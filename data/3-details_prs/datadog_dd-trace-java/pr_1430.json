{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDA1NjA4", "number": 1430, "title": "intern UTF8 encoding of well known constants to reduce allocation in \u2026", "bodyText": "\u2026MsgPack writer", "createdAt": "2020-05-05T09:33:10Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1430", "merged": true, "mergeCommit": {"oid": "36135e887272cfb94fdbca3a66ab985322908928"}, "closed": true, "closedAt": "2020-05-05T16:04:00Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceQthmgH2gAyNDEzNDA1NjA4OjQ2MjJmZjk1NzBmMzZlMDUzYzliMmU0NjE0YzExOTFjNDhhNWZiMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceV0AIgFqTQwNTkwMjAzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4622ff9570f36e053c9b2e4614c1191c48a5fb16", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4622ff9570f36e053c9b2e4614c1191c48a5fb16", "committedDate": "2020-05-05T09:32:01Z", "message": "intern UTF8 encoding of well known constants to reduce allocation in MsgPack writer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzAxNDk5", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#pullrequestreview-405701499", "createdAt": "2020-05-05T11:30:45Z", "commit": {"oid": "4622ff9570f36e053c9b2e4614c1191c48a5fb16"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0ec88414387d7d8860250186bc2aa4cf356284", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8a0ec88414387d7d8860250186bc2aa4cf356284", "committedDate": "2020-05-05T11:39:36Z", "message": "rationalise component names to ease deduplication of component encodings, aim to deduplicate tags in msgpack serialisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "977bd6c6b7a0c552e9aac35d9ab0394548bd9abd", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/977bd6c6b7a0c552e9aac35d9ab0394548bd9abd", "committedDate": "2020-05-05T12:03:50Z", "message": "reformat DDComponents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8", "committedDate": "2020-05-05T13:05:53Z", "message": "exclude DDComponentTypes from minimum coverage check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODQwNjU4", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#pullrequestreview-405840658", "createdAt": "2020-05-05T14:24:48Z", "commit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoyNDo0OFrOGQr80g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDozNToyNFrOGQscJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MDQ4Mg==", "bodyText": "Please move this to the internal-api project (or somewhere else not \"publicly accessible\").", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420150482", "createdAt": "2020-05-05T14:24:48Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/DDComponents.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.api;\n+\n+public class DDComponents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MjQyMg==", "bodyText": "Should we instead use an LRU cache?", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420152422", "createdAt": "2020-05-05T14:27:19Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1MzI2OQ==", "bodyText": "Most of these strings will not be used in every application.  Is it worth only loading strings that are actually used?", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420153269", "createdAt": "2020-05-05T14:28:25Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);\n+\n+  static {\n+    internConstantsUTF8(StringTables.class);\n+    internConstantsUTF8(Tags.class);\n+    internConstantsUTF8(DDSpanTypes.class);\n+    internConstantsUTF8(DDComponents.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1NDIzMQ==", "bodyText": "I was wondering how all those fields were getting referenced... clever.", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420154231", "createdAt": "2020-05-05T14:29:37Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);\n+\n+  static {\n+    internConstantsUTF8(StringTables.class);\n+    internConstantsUTF8(Tags.class);\n+    internConstantsUTF8(DDSpanTypes.class);\n+    internConstantsUTF8(DDComponents.class);\n+  }\n+\n+  public static byte[] getBytesUTF8(String value) {\n+    byte[] bytes = UTF8_INTERN_TABLE.get(value);\n+    return null == bytes ? value.getBytes(UTF_8) : bytes;\n+  }\n+\n+  private static void internConstantsUTF8(Class<?> clazz) {\n+    for (Field field : clazz.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers())\n+          && Modifier.isPublic(field.getModifiers())\n+          && field.getType() == String.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODUwMA==", "bodyText": "Since UTF8_INTERN_TABLE is not an LRU cache, I think component will be the only case where the tag will likely be interned (thanks to DDComponents). Is this intentional? Should we extend this to other values?", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420158500", "createdAt": "2020-05-05T14:35:24Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/MsgpackFormatWriter.java", "diffHunk": "@@ -18,78 +19,99 @@ public void writeListHeader(final int size, final MessagePacker destination) thr\n   }\n \n   @Override\n-  public void writeListFooter(final MessagePacker destination) throws IOException {}\n+  public void writeListFooter(final MessagePacker destination) {}\n \n   @Override\n   public void writeMapHeader(final int size, final MessagePacker destination) throws IOException {\n     destination.packMapHeader(size);\n   }\n \n   @Override\n-  public void writeMapFooter(final MessagePacker destination) throws IOException {}\n+  public void writeMapFooter(final MessagePacker destination) {}\n \n   @Override\n   public void writeString(final String key, final String value, final MessagePacker destination)\n       throws IOException {\n-    destination.packString(key);\n+    writeStringUTF8(key, destination);\n     if (value == null) {\n       destination.packNil();\n     } else {\n       destination.packString(value);\n     }\n   }\n \n+  @Override\n+  public void writeTag(String key, String value, MessagePacker destination) throws IOException {\n+    // there's a good chance that the tag value will be something we have interned\n+    writeStringUTF8(key, destination);\n+    if (value == null) {\n+      destination.packNil();\n+    } else {\n+      writeStringUTF8(value, destination);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e9a75f8c28652aaba2631f5e46071b21c64712", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e2e9a75f8c28652aaba2631f5e46071b21c64712", "committedDate": "2020-05-05T14:51:25Z", "message": "move DDComponents to internal-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODY3MzIx", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#pullrequestreview-405867321", "createdAt": "2020-05-05T14:51:31Z", "commit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1MTozMVrOGQtNqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDo1MTozMVrOGQtNqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3MTE3Ng==", "bodyText": "That's so beautiful:)\nI think we can even remove the 1st argument of this function.", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420171176", "createdAt": "2020-05-05T14:51:31Z", "author": {"login": "lpriima"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package datadog.trace.core;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.api.DDComponents;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class StringTables {\n+\n+  public static final String SERVICE = \"service\";\n+  public static final String NAME = \"name\";\n+  public static final String RESOURCE = \"resource\";\n+  public static final String TRACE_ID = \"trace_id\";\n+  public static final String SPAN_ID = \"span_id\";\n+  public static final String PARENT_ID = \"parent_id\";\n+  public static final String START = \"start\";\n+  public static final String DURATION = \"duration\";\n+  public static final String TYPE = \"type\";\n+  public static final String ERROR = \"error\";\n+  public static final String METRICS = \"metrics\";\n+  public static final String META = \"meta\";\n+\n+  // intentionally not thread safe; must be maintained to be effectively immutable\n+  // if a constant registration API is added, should be ensured that this is only used during\n+  // startup\n+  private static final Map<String, byte[]> UTF8_INTERN_TABLE = new HashMap<>(256);\n+\n+  static {\n+    internConstantsUTF8(StringTables.class);\n+    internConstantsUTF8(Tags.class);\n+    internConstantsUTF8(DDSpanTypes.class);\n+    internConstantsUTF8(DDComponents.class);\n+  }\n+\n+  public static byte[] getBytesUTF8(String value) {\n+    byte[] bytes = UTF8_INTERN_TABLE.get(value);\n+    return null == bytes ? value.getBytes(UTF_8) : bytes;\n+  }\n+\n+  private static void internConstantsUTF8(Class<?> clazz) {\n+    for (Field field : clazz.getDeclaredFields()) {\n+      if (Modifier.isStatic(field.getModifiers())\n+          && Modifier.isPublic(field.getModifiers())\n+          && field.getType() == String.class) {\n+        try {\n+          intern(UTF8_INTERN_TABLE, (String) field.get(null), UTF_8);\n+        } catch (IllegalAccessException e) {\n+          // won't happen\n+        }\n+      }\n+    }\n+  }\n+\n+  private static void intern(Map<String, byte[]> table, String value, Charset encoding) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0", "committedDate": "2020-05-05T15:04:10Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODg2NjA2", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#pullrequestreview-405886606", "createdAt": "2020-05-05T15:11:44Z", "commit": {"oid": "26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToxMTo0NFrOGQuJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToxMTo0NFrOGQuJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4NjU4Mg==", "bodyText": "@richardartoul you can see the span type set here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420186582", "createdAt": "2020-05-05T15:11:44Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/FormatWriter.java", "diffHunk": "@@ -84,18 +101,18 @@ public void writeTrace(final List<DDSpan> trace, final DEST destination) throws\n   public void writeDDSpan(final DDSpan span, final DEST destination) throws IOException {\n     // Some of the tests rely on the specific ordering here.\n     writeMapHeader(12, destination); // must match count below.\n-    /* 1  */ writeString(\"service\", span.getServiceName(), destination);\n-    /* 2  */ writeString(\"name\", span.getOperationName(), destination);\n-    /* 3  */ writeString(\"resource\", span.getResourceName(), destination);\n-    /* 4  */ writeBigInteger(\"trace_id\", span.getTraceId(), destination);\n-    /* 5  */ writeBigInteger(\"span_id\", span.getSpanId(), destination);\n-    /* 6  */ writeBigInteger(\"parent_id\", span.getParentId(), destination);\n-    /* 7  */ writeLong(\"start\", span.getStartTime(), destination);\n-    /* 8  */ writeLong(\"duration\", span.getDurationNano(), destination);\n-    /* 9  */ writeString(\"type\", span.getType(), destination);\n-    /* 10 */ writeInt(\"error\", span.getError(), destination);\n-    /* 11 */ writeNumberMap(\"metrics\", span.getMetrics(), destination);\n-    /* 12 */ writeStringMap(\"meta\", span.getMeta(), destination);\n+    /* 1  */ writeString(SERVICE, span.getServiceName(), destination);\n+    /* 2  */ writeString(NAME, span.getOperationName(), destination);\n+    /* 3  */ writeString(RESOURCE, span.getResourceName(), destination);\n+    /* 4  */ writeBigInteger(TRACE_ID, span.getTraceId(), destination);\n+    /* 5  */ writeBigInteger(SPAN_ID, span.getSpanId(), destination);\n+    /* 6  */ writeBigInteger(PARENT_ID, span.getParentId(), destination);\n+    /* 7  */ writeLong(START, span.getStartTime(), destination);\n+    /* 8  */ writeLong(DURATION, span.getDurationNano(), destination);\n+    /* 9  */ writeString(TYPE, span.getType(), destination);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26415cb25fb8266bc6a12e7ed2674fbb9d1e1ad0"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d2a2208f3a7aceaa4fc82055fb7c3b8c7fa3adc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5d2a2208f3a7aceaa4fc82055fb7c3b8c7fa3adc", "committedDate": "2020-05-05T15:22:25Z", "message": "write span type via string table lookup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTAyMDMy", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#pullrequestreview-405902032", "createdAt": "2020-05-05T15:28:32Z", "commit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToyODozMlrOGQu6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToyODozMlrOGQu6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5OTAyOQ==", "bodyText": "This can also be reverted...", "url": "https://github.com/DataDog/dd-trace-java/pull/1430#discussion_r420199029", "createdAt": "2020-05-05T15:28:32Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/dd-trace-api.gradle", "diffHunk": "@@ -5,6 +5,7 @@ minimumBranchCoverage = 0.8\n \n // These are tested outside of this module since this module mainly just defines 'API'\n excludedClassesCoverage += [\n+  'datadog.trace.api.DDComponents',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d55ee9bdaefd94761fdf98718c3dc10dbef9e8"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2468, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}