{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzM5OTA1", "number": 1261, "title": "speedup context injection matchers", "bodyText": "This provides 0.5-1s speedup on petclinic app on java8.\nThere is still a question on how to make different classloader matchers not break things - but even in current state this should be functionally correct.", "createdAt": "2020-02-27T09:51:14Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1261", "merged": true, "mergeCommit": {"oid": "a26f08957f1cd8acc2770b604cddc79532b170ec"}, "closed": true, "closedAt": "2020-02-28T02:04:06Z", "author": {"login": "mar-kolya"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIYeC-gBqjMwNzcyMDgwMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIlVwwABqjMwODAwNzcyNDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a697267286e85179efb0038866ecdee8f884ab8", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1a697267286e85179efb0038866ecdee8f884ab8", "committedDate": "2020-02-27T09:50:27Z", "message": "Make FieldBackedProvider inject fields only once"}, "afterCommit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2cf97980e2070c1031c1466e827b2a48162a1efb", "committedDate": "2020-02-27T10:07:49Z", "message": "Make FieldBackedProvider inject fields only once"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzIwMzA1", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#pullrequestreview-365720305", "createdAt": "2020-02-27T14:23:15Z", "commit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyMzoxNVrOFvUIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyMzoxNVrOFvUIYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1NzIxOA==", "bodyText": "Yes, that assumption sounds reasonable to me, but I think it speaks to the fact that our abstraction isn't quite right.\nIt seems to me that the contextClasses should carry a ClassLoaderMatcher constraint that is incorporated into the Instrumenter activation implicitly.  An Instrumenter could safely add additional criteria, but cannot remove the requirement needed by the contextClasses.", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#discussion_r385157218", "createdAt": "2020-02-27T14:23:15Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldBackedProvider.java", "diffHunk": "@@ -342,38 +343,63 @@ public void visitLdcInsn(final Object value) {\n     };\n   }\n \n+  private static final Set<Map.Entry<String, String>> INSTALLED_CONTEXT_MATCHERS = new HashSet<>();\n+\n+  /** Clear set that prevents multiple matchers for same context class */\n+  public static void resetContextMatchers() {\n+    synchronized (INSTALLED_CONTEXT_MATCHERS) {\n+      INSTALLED_CONTEXT_MATCHERS.clear();\n+    }\n+  }\n+\n   @Override\n   public AgentBuilder.Identified.Extendable additionalInstrumentation(\n       AgentBuilder.Identified.Extendable builder) {\n \n     if (fieldInjectionEnabled) {\n       for (final Map.Entry<String, String> entry : instrumenter.contextStore().entrySet()) {\n-        /**\n-         * For each context store defined in a current instrumentation we create an agent builder\n-         * that injects necessary fields.\n+        /*\n+        Note: this synchronization should not have any impact on performace since this is done when agent builder is being made,\n+        it doesn't affect actual class transformation.\n          */\n-        builder =\n-            builder\n-                .type(\n-                    not(isInterface()).and(safeHasSuperType(named(entry.getKey()))),\n-                    instrumenter.classLoaderMatcher())\n-                .and(safeToInjectFieldsMatcher())\n-                // Added here instead of AgentInstaller's ignores because it's relatively\n-                // expensive. https://github.com/DataDog/dd-trace-java/pull/1045\n-                .and(not(isAnnotatedWith(named(\"javax.decorator.Decorator\"))))\n-                .transform(AgentBuilder.Transformer.NoOp.INSTANCE);\n+        synchronized (INSTALLED_CONTEXT_MATCHERS) {\n+          // FIXME: This makes an assunption that class loader matchers for instrumenters that use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzI0MzYw", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#pullrequestreview-365724360", "createdAt": "2020-02-27T14:28:03Z", "commit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyODowNFrOFvUVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyODowNFrOFvUVWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MDUzNw==", "bodyText": "A Set<Map.Entry<String, String>> looks rather odd.  My first thought was how this different from a Setof just the Entry keys.  But I guess we're accumulating this from multiple maps, so it makes sense.  Still not very obvious.\nI also think there's likely a better option than reducing statics here.  Ultimately, the reset boundary is contained by the caller, so I think it would be better for the caller to construct and pass in object rather than introducing a static that the caller must remember to reset.", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#discussion_r385160537", "createdAt": "2020-02-27T14:28:04Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldBackedProvider.java", "diffHunk": "@@ -342,38 +343,63 @@ public void visitLdcInsn(final Object value) {\n     };\n   }\n \n+  private static final Set<Map.Entry<String, String>> INSTALLED_CONTEXT_MATCHERS = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzI1Mzc0", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#pullrequestreview-365725374", "createdAt": "2020-02-27T14:29:13Z", "commit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyOToxNlrOFvUYcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyOToxNlrOFvUYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2MTMzMA==", "bodyText": "I know this wasn't part of this change, but I think we might be well served to move the construction of this Matcher into a helper method.  Doesn't need to be part of this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#discussion_r385161330", "createdAt": "2020-02-27T14:29:16Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldBackedProvider.java", "diffHunk": "@@ -342,38 +343,63 @@ public void visitLdcInsn(final Object value) {\n     };\n   }\n \n+  private static final Set<Map.Entry<String, String>> INSTALLED_CONTEXT_MATCHERS = new HashSet<>();\n+\n+  /** Clear set that prevents multiple matchers for same context class */\n+  public static void resetContextMatchers() {\n+    synchronized (INSTALLED_CONTEXT_MATCHERS) {\n+      INSTALLED_CONTEXT_MATCHERS.clear();\n+    }\n+  }\n+\n   @Override\n   public AgentBuilder.Identified.Extendable additionalInstrumentation(\n       AgentBuilder.Identified.Extendable builder) {\n \n     if (fieldInjectionEnabled) {\n       for (final Map.Entry<String, String> entry : instrumenter.contextStore().entrySet()) {\n-        /**\n-         * For each context store defined in a current instrumentation we create an agent builder\n-         * that injects necessary fields.\n+        /*\n+        Note: this synchronization should not have any impact on performace since this is done when agent builder is being made,\n+        it doesn't affect actual class transformation.\n          */\n-        builder =\n-            builder\n-                .type(\n-                    not(isInterface()).and(safeHasSuperType(named(entry.getKey()))),\n-                    instrumenter.classLoaderMatcher())\n-                .and(safeToInjectFieldsMatcher())\n-                // Added here instead of AgentInstaller's ignores because it's relatively\n-                // expensive. https://github.com/DataDog/dd-trace-java/pull/1045\n-                .and(not(isAnnotatedWith(named(\"javax.decorator.Decorator\"))))\n-                .transform(AgentBuilder.Transformer.NoOp.INSTANCE);\n+        synchronized (INSTALLED_CONTEXT_MATCHERS) {\n+          // FIXME: This makes an assunption that class loader matchers for instrumenters that use\n+          // same context classes should be the same - which seems reasonable, but is not checked.\n+          if (INSTALLED_CONTEXT_MATCHERS.contains(entry)) {\n+            log.debug(\"Skipping builder for {} {}\", instrumenter.getClass().getName(), entry);\n+            continue;\n+          }\n \n-        /**\n-         * We inject helpers here as well as when instrumentation is applied to ensure that helpers\n-         * are present even if instrumented classes are not loaded, but classes with state fields\n-         * added are loaded (e.g. sun.net.www.protocol.https.HttpsURLConnectionImpl).\n-         */\n-        builder = injectHelpersIntoBootstrapClassloader(builder);\n+          log.debug(\"Making builder for {} {}\", instrumenter.getClass().getName(), entry);\n+          INSTALLED_CONTEXT_MATCHERS.add(entry);\n \n-        builder =\n-            builder.transform(\n-                getTransformerForASMVisitor(\n-                    getFieldInjectionVisitor(entry.getKey(), entry.getValue())));\n+          /**\n+           * For each context store defined in a current instrumentation we create an agent builder\n+           * that injects necessary fields.\n+           */\n+          builder =\n+              builder\n+                  .type(\n+                      not(isInterface()).and(safeHasSuperType(named(entry.getKey()))),\n+                      instrumenter.classLoaderMatcher())\n+                  .and(safeToInjectFieldsMatcher())\n+                  // Added here instead of AgentInstaller's ignores because it's relatively\n+                  // expensive. https://github.com/DataDog/dd-trace-java/pull/1045\n+                  .and(not(isAnnotatedWith(named(\"javax.decorator.Decorator\"))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cf97980e2070c1031c1466e827b2a48162a1efb", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2cf97980e2070c1031c1466e827b2a48162a1efb", "committedDate": "2020-02-27T10:07:49Z", "message": "Make FieldBackedProvider inject fields only once"}, "afterCommit": {"oid": "9b711c9918bb7bee6d4b03fb864661b61be7b630", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9b711c9918bb7bee6d4b03fb864661b61be7b630", "committedDate": "2020-02-27T14:58:27Z", "message": "Make FieldBackedProvider inject fields only once"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b711c9918bb7bee6d4b03fb864661b61be7b630", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9b711c9918bb7bee6d4b03fb864661b61be7b630", "committedDate": "2020-02-27T14:58:27Z", "message": "Make FieldBackedProvider inject fields only once"}, "afterCommit": {"oid": "3723b4f014603d8585bae499d7b61402a018f34e", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3723b4f014603d8585bae499d7b61402a018f34e", "committedDate": "2020-02-27T15:21:49Z", "message": "Make FieldBackedProvider inject fields only once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d53c1380161bf383d5455f43f471cb4999c06dba", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d53c1380161bf383d5455f43f471cb4999c06dba", "committedDate": "2020-02-27T15:24:01Z", "message": "Make FieldBackedProvider inject fields only once"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3723b4f014603d8585bae499d7b61402a018f34e", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3723b4f014603d8585bae499d7b61402a018f34e", "committedDate": "2020-02-27T15:21:49Z", "message": "Make FieldBackedProvider inject fields only once"}, "afterCommit": {"oid": "d53c1380161bf383d5455f43f471cb4999c06dba", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d53c1380161bf383d5455f43f471cb4999c06dba", "committedDate": "2020-02-27T15:24:01Z", "message": "Make FieldBackedProvider inject fields only once"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTQ1NDU2", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#pullrequestreview-365945456", "createdAt": "2020-02-27T19:40:59Z", "commit": {"oid": "d53c1380161bf383d5455f43f471cb4999c06dba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTcyMDcx", "url": "https://github.com/DataDog/dd-trace-java/pull/1261#pullrequestreview-365972071", "createdAt": "2020-02-27T20:23:16Z", "commit": {"oid": "d53c1380161bf383d5455f43f471cb4999c06dba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4ab938889b5a43908427e02a113787ab76b013", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3d4ab938889b5a43908427e02a113787ab76b013", "committedDate": "2020-02-28T01:01:33Z", "message": "Merge branch 'master' into mar-kolya/speedup-context-injection-matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf5fe9feff114cb2c4dc73b712989fcb9f2d9999", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cf5fe9feff114cb2c4dc73b712989fcb9f2d9999", "committedDate": "2020-02-28T01:07:37Z", "message": "Merge branch 'master' into mar-kolya/speedup-context-injection-matchers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "538987b7ad3b3c90dd2bc1bfda078123bad312c5", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/538987b7ad3b3c90dd2bc1bfda078123bad312c5", "committedDate": "2020-02-28T01:06:25Z", "message": "Merge branch 'master' into mar-kolya/speedup-context-injection-matchers"}, "afterCommit": {"oid": "cf5fe9feff114cb2c4dc73b712989fcb9f2d9999", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cf5fe9feff114cb2c4dc73b712989fcb9f2d9999", "committedDate": "2020-02-28T01:07:37Z", "message": "Merge branch 'master' into mar-kolya/speedup-context-injection-matchers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2525, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}