{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjI0NTQx", "number": 1735, "title": "add catch for exceptions in sample method", "bodyText": "and log it", "createdAt": "2020-08-03T14:52:01Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1735", "merged": true, "mergeCommit": {"oid": "b36b8af120d56a4b197995cdf2123823bb31291d"}, "closed": true, "closedAt": "2020-08-03T17:26:01Z", "author": {"login": "jpbempel"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7TN4FAH2gAyNDYyMjI0NTQxOjcyYmM1MDM0OWJlNjc4YjJlZDVhYjJiOTFmMTM3NzQxYTk0MWJiZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7VDrJAFqTQ2MDE4OTE0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72bc50349be678b2ed5ab2b91f137741a941bbd8", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/72bc50349be678b2ed5ab2b91f137741a941bbd8", "committedDate": "2020-08-03T14:50:58Z", "message": "add catch for exceptions in sample method\n\nand log it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDk5OTIy", "url": "https://github.com/DataDog/dd-trace-java/pull/1735#pullrequestreview-460099922", "createdAt": "2020-08-03T15:00:05Z", "commit": {"oid": "72bc50349be678b2ed5ab2b91f137741a941bbd8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowMDowNlrOG69APQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowMDowNlrOG69APQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3MDA3Nw==", "bodyText": "What is the chance of this happening on customer deployments?\nWould it be a very rare occasion only?", "url": "https://github.com/DataDog/dd-trace-java/pull/1735#discussion_r464470077", "createdAt": "2020-08-03T15:00:06Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "diffHunk": "@@ -86,27 +86,31 @@ public void removeThread(long threadId) {\n   }\n \n   private void sample() {\n-    long[] tmpArray = threadIds.get();\n-    if (tmpArray == null || tmpArray.length == 0) {\n-      return;\n-    }\n-    ThreadStackProvider provider = ThreadStackAccess.getCurrentThreadStackProvider();\n-    if (provider instanceof NoneThreadStackProvider && providerFirstAccess) {\n-      log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");\n-      providerFirstAccess = false;\n-    }\n-    final ThreadInfo[] threadInfos = provider.getThreadInfo(tmpArray);\n-    // dispatch to Scopes\n-    for (ThreadInfo threadInfo : threadInfos) {\n-      ScopeManager scopeManager = threadScopeMapper.forThread(threadInfo.getThreadId());\n-      if (scopeManager == null) {\n-        continue;\n+    try {\n+      long[] tmpArray = threadIds.get();\n+      if (tmpArray == null || tmpArray.length == 0) {\n+        return;\n+      }\n+      ThreadStackProvider provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+      if (provider instanceof NoneThreadStackProvider && providerFirstAccess) {\n+        log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");\n+        providerFirstAccess = false;\n       }\n-      ScopeStackCollector scopeStackCollector = scopeManager.getCurrentScope();\n-      if (scopeStackCollector == null) {\n-        continue;\n+      final ThreadInfo[] threadInfos = provider.getThreadInfo(tmpArray);\n+      // dispatch to Scopes\n+      for (ThreadInfo threadInfo : threadInfos) {\n+        ScopeManager scopeManager = threadScopeMapper.forThread(threadInfo.getThreadId());\n+        if (scopeManager == null) {\n+          continue;\n+        }\n+        ScopeStackCollector scopeStackCollector = scopeManager.getCurrentScope();\n+        if (scopeStackCollector == null) {\n+          continue;\n+        }\n+        scopeStackCollector.collect(threadInfo.getStackTrace());\n       }\n-      scopeStackCollector.collect(threadInfo.getStackTrace());\n+    } catch (Exception ex) {\n+      log.warn(\"Exception thrown during JMX sampling:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72bc50349be678b2ed5ab2b91f137741a941bbd8"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68502bacee97e5e9e48a5b1c47f4ae0a57dc3a45", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/68502bacee97e5e9e48a5b1c47f4ae0a57dc3a45", "committedDate": "2020-08-03T16:03:08Z", "message": "change log level to info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTUyNjAz", "url": "https://github.com/DataDog/dd-trace-java/pull/1735#pullrequestreview-460152603", "createdAt": "2020-08-03T16:06:24Z", "commit": {"oid": "68502bacee97e5e9e48a5b1c47f4ae0a57dc3a45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994a0c842c5264e202a1bbbda680e6d99fc4cba5", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/994a0c842c5264e202a1bbbda680e6d99fc4cba5", "committedDate": "2020-08-03T16:10:24Z", "message": "Fix possible NPE on threadInfo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTYxOTA2", "url": "https://github.com/DataDog/dd-trace-java/pull/1735#pullrequestreview-460161906", "createdAt": "2020-08-03T16:19:20Z", "commit": {"oid": "994a0c842c5264e202a1bbbda680e6d99fc4cba5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxOToyMVrOG6_9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxOToyMVrOG6_9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODUyOQ==", "bodyText": "This should either be at debug only or rate limited.", "url": "https://github.com/DataDog/dd-trace-java/pull/1735#discussion_r464518529", "createdAt": "2020-08-03T16:19:21Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "diffHunk": "@@ -86,27 +86,34 @@ public void removeThread(long threadId) {\n   }\n \n   private void sample() {\n-    long[] tmpArray = threadIds.get();\n-    if (tmpArray == null || tmpArray.length == 0) {\n-      return;\n-    }\n-    ThreadStackProvider provider = ThreadStackAccess.getCurrentThreadStackProvider();\n-    if (provider instanceof NoneThreadStackProvider && providerFirstAccess) {\n-      log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");\n-      providerFirstAccess = false;\n-    }\n-    final ThreadInfo[] threadInfos = provider.getThreadInfo(tmpArray);\n-    // dispatch to Scopes\n-    for (ThreadInfo threadInfo : threadInfos) {\n-      ScopeManager scopeManager = threadScopeMapper.forThread(threadInfo.getThreadId());\n-      if (scopeManager == null) {\n-        continue;\n+    try {\n+      long[] tmpArray = threadIds.get();\n+      if (tmpArray == null || tmpArray.length == 0) {\n+        return;\n+      }\n+      ThreadStackProvider provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+      if (provider instanceof NoneThreadStackProvider && providerFirstAccess) {\n+        log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");\n+        providerFirstAccess = false;\n       }\n-      ScopeStackCollector scopeStackCollector = scopeManager.getCurrentScope();\n-      if (scopeStackCollector == null) {\n-        continue;\n+      final ThreadInfo[] threadInfos = provider.getThreadInfo(tmpArray);\n+      // dispatch to Scopes\n+      for (ThreadInfo threadInfo : threadInfos) {\n+        if (threadInfo == null) {\n+          continue;\n+        }\n+        ScopeManager scopeManager = threadScopeMapper.forThread(threadInfo.getThreadId());\n+        if (scopeManager == null) {\n+          continue;\n+        }\n+        ScopeStackCollector scopeStackCollector = scopeManager.getCurrentScope();\n+        if (scopeStackCollector == null) {\n+          continue;\n+        }\n+        scopeStackCollector.collect(threadInfo.getStackTrace());\n       }\n-      scopeStackCollector.collect(threadInfo.getStackTrace());\n+    } catch (Exception ex) {\n+      log.info(\"Exception thrown during JMX sampling:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994a0c842c5264e202a1bbbda680e6d99fc4cba5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8316da857e7e91e9e37ef8787207c68caf0b9120", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8316da857e7e91e9e37ef8787207c68caf0b9120", "committedDate": "2020-08-03T16:33:06Z", "message": "add rate limiting for logging exception\n\n1 per minute"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTg5MTQ2", "url": "https://github.com/DataDog/dd-trace-java/pull/1735#pullrequestreview-460189146", "createdAt": "2020-08-03T16:59:38Z", "commit": {"oid": "8316da857e7e91e9e37ef8787207c68caf0b9120"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2071, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}