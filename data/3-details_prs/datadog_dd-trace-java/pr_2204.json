{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTkwMTU3", "number": 2204, "title": "Make PendingTrace lighter-weight", "bodyText": "The CAS with the WeakReference when setting the root span was showing up in profiles. I don't see any harm in keeping a direct reference to the root span.\nrootSpanWritten could have been volatile, as currently implemented.", "createdAt": "2020-12-15T11:46:05Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2204", "merged": true, "mergeCommit": {"oid": "395974122aa63fa5cdf20fa0b85a3b5aa70b0d8e"}, "closed": true, "closedAt": "2020-12-15T19:06:01Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmY8lNgFqTU1MjM3MjI0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmeQdKgFqTU1MjcyNjE2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzcyMjQ5", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552372249", "createdAt": "2020-12-15T11:50:15Z", "commit": {"oid": "927380c394f6b61177f760e03e3cb592b09c3f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1MDoxNVrOIGHCxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTo1MDoxNVrOIGHCxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI3Nzc2Ng==", "bodyText": "I'm not really sure why this isn't just a final field required for construction. No doubt it's motivated by code reuse.", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#discussion_r543277766", "createdAt": "2020-12-15T11:50:15Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -143,8 +140,12 @@ public void registerSpan(final DDSpan span) {\n       return;\n     }\n \n-    if (!rootSpanWritten.get()) {\n-      rootSpan.compareAndSet(null, new WeakReference<>(span));\n+    if (null == rootSpan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927380c394f6b61177f760e03e3cb592b09c3f5e"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzg3MTcx", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552387171", "createdAt": "2020-12-15T12:11:24Z", "commit": {"oid": "927380c394f6b61177f760e03e3cb592b09c3f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxMToyNVrOIGHzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoxMToyNVrOIGHzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5MDMwMA==", "bodyText": "The comment above about Use a weak ref because... can also be removed now", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#discussion_r543290300", "createdAt": "2020-12-15T12:11:25Z", "author": {"login": "mcculls"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -85,9 +82,9 @@ PendingTrace create(final DDId traceId) {\n    * <p>The root span will be available in non-buggy cases because it has either finished and\n    * strongly ref'd in this queue or is unfinished and ref'd in a ContinuableScope.\n    */\n-  private final AtomicReference<WeakReference<DDSpan>> rootSpan = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927380c394f6b61177f760e03e3cb592b09c3f5e"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2affd1ef3a2f616c4d05b853464c495f1a42558", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b2affd1ef3a2f616c4d05b853464c495f1a42558", "committedDate": "2020-12-15T12:13:21Z", "message": "use volatiles instead of atomics in PendingTrace, hold direct reference to root span"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "927380c394f6b61177f760e03e3cb592b09c3f5e", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/927380c394f6b61177f760e03e3cb592b09c3f5e", "committedDate": "2020-12-15T11:42:28Z", "message": "use volatiles instead of atomics in PendingTrace, hold direct reference to root span"}, "afterCommit": {"oid": "b2affd1ef3a2f616c4d05b853464c495f1a42558", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b2affd1ef3a2f616c4d05b853464c495f1a42558", "committedDate": "2020-12-15T12:13:21Z", "message": "use volatiles instead of atomics in PendingTrace, hold direct reference to root span"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fed89b91665313d6d3f7fb2adc6e430fab5683b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4fed89b91665313d6d3f7fb2adc6e430fab5683b", "committedDate": "2020-12-15T12:17:18Z", "message": "align PendingTrace comments with present reality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzkyNDg1", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552392485", "createdAt": "2020-12-15T12:18:39Z", "commit": {"oid": "4fed89b91665313d6d3f7fb2adc6e430fab5683b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzk1Mjc5", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552395279", "createdAt": "2020-12-15T12:22:36Z", "commit": {"oid": "4fed89b91665313d6d3f7fb2adc6e430fab5683b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyMjozNlrOIGIOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjoyMjozNlrOIGIOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI5NzIyNA==", "bodyText": "I think this should be inside the synchronized block and I don't understand how\nif (!rootSpanWritten.get()) {\n      rootSpan.compareAndSet(null, new WeakReference<>(span));\n}\n...\nrootSpanWritten.set(true);\nweren't just racing anyway.", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#discussion_r543297224", "createdAt": "2020-12-15T12:22:36Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -247,7 +234,7 @@ private void partialFlush() {\n \n   /** Important to note: may be called multiple times. */\n   void write() {\n-    rootSpanWritten.set(true);\n+    rootSpanWritten = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fed89b91665313d6d3f7fb2adc6e430fab5683b"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNDAxNTk4", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552401598", "createdAt": "2020-12-15T12:31:21Z", "commit": {"oid": "d168b9f3595a67fe6ac3fe523baa91c1b724e858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozMToyMlrOIGIjKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjozMToyMlrOIGIjKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwMjQ0MA==", "bodyText": "previously this was only set on a full write, now it is set on partial and full writes - is this ok?\nie. does any write end up writing the root span?", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#discussion_r543302440", "createdAt": "2020-12-15T12:31:22Z", "author": {"login": "mcculls"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -259,6 +245,7 @@ private int write(boolean isPartial) {\n       try (Recording recording = tracer.writeTimer()) {\n         // Only one writer at a time\n         synchronized (this) {\n+          rootSpanWritten = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d168b9f3595a67fe6ac3fe523baa91c1b724e858"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e5c91f2a1e8cedfa337091880fd4879972f73e78", "committedDate": "2020-12-15T12:58:08Z", "message": "move setting rootSpanWritten into synchronized block in write()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d168b9f3595a67fe6ac3fe523baa91c1b724e858", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d168b9f3595a67fe6ac3fe523baa91c1b724e858", "committedDate": "2020-12-15T12:23:09Z", "message": "move setting rootSpanWritten into synchronized block in write()"}, "afterCommit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e5c91f2a1e8cedfa337091880fd4879972f73e78", "committedDate": "2020-12-15T12:58:08Z", "message": "move setting rootSpanWritten into synchronized block in write()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNTk0NjU3", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552594657", "createdAt": "2020-12-15T15:44:04Z", "commit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzI1MzM2", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552725336", "createdAt": "2020-12-15T18:00:27Z", "commit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMDoyN1rOIGYlkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMDoyN1rOIGYlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTIwMQ==", "bodyText": "Thanks for removing that.  We should probably should have done that during the prior round of PendingTraces.", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#discussion_r543565201", "createdAt": "2020-12-15T18:00:27Z", "author": {"login": "dougqh"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -61,33 +58,20 @@ PendingTrace create(final DDId traceId) {\n   /** Nano second ticks value at trace start */\n   private final long startNanoTicks;\n \n-  private final ConcurrentLinkedDeque<DDSpan> finishedSpans = new ConcurrentLinkedDeque();\n+  private final ConcurrentLinkedDeque<DDSpan> finishedSpans = new ConcurrentLinkedDeque<>();\n \n   // We must maintain a separate count because ConcurrentLinkedDeque.size() is a linear operation.\n   private final AtomicInteger completedSpanCount = new AtomicInteger(0);\n \n   private final AtomicInteger pendingReferenceCount = new AtomicInteger(0);\n \n-  // FIXME: In async frameworks we may have situations where traces do not report due to references", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzI2MTY4", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#pullrequestreview-552726168", "createdAt": "2020-12-15T18:01:28Z", "commit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMToyOFrOIGYocg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMToyOFrOIGYocg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NTkzOA==", "bodyText": "Yes, we seemed to have used Atomic* in a lot places where its overkill.  Thanks for cleaning this up.", "url": "https://github.com/DataDog/dd-trace-java/pull/2204#discussion_r543565938", "createdAt": "2020-12-15T18:01:28Z", "author": {"login": "dougqh"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -61,33 +58,20 @@ PendingTrace create(final DDId traceId) {\n   /** Nano second ticks value at trace start */\n   private final long startNanoTicks;\n \n-  private final ConcurrentLinkedDeque<DDSpan> finishedSpans = new ConcurrentLinkedDeque();\n+  private final ConcurrentLinkedDeque<DDSpan> finishedSpans = new ConcurrentLinkedDeque<>();\n \n   // We must maintain a separate count because ConcurrentLinkedDeque.size() is a linear operation.\n   private final AtomicInteger completedSpanCount = new AtomicInteger(0);\n \n   private final AtomicInteger pendingReferenceCount = new AtomicInteger(0);\n \n-  // FIXME: In async frameworks we may have situations where traces do not report due to references\n-  //  being held by async operators. In order to support testing in these cases we should have a way\n-  //  to keep track of the fact that this trace is ready to report but is still pending. This would\n-  //  likely require a change to the writer interface to allow signaling this intent. This could\n-  //  also give us the benefit of being able to recover for reporting traces that get stuck due to\n-  //  references being held for long periods of time.\n-\n   /**\n    * During a trace there are cases where the root span must be accessed (e.g. priority sampling and\n-   * trace-search tags).\n-   *\n-   * <p>Use a weak ref because we still need to handle buggy cases where the root span is not\n-   * correctly closed (see SpanCleaner).\n-   *\n-   * <p>The root span will be available in non-buggy cases because it has either finished and\n-   * strongly ref'd in this queue or is unfinished and ref'd in a ContinuableScope.\n+   * trace-search tags). These use cases are an obstacle to span-streaming.\n    */\n-  private final AtomicReference<WeakReference<DDSpan>> rootSpan = new AtomicReference<>();\n+  private volatile DDSpan rootSpan = null;\n \n-  private final AtomicBoolean rootSpanWritten = new AtomicBoolean(false);\n+  private volatile boolean rootSpanWritten = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5c91f2a1e8cedfa337091880fd4879972f73e78"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2759, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}