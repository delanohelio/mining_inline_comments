{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MTA3NzY4", "number": 1185, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDoyNTo1OVrODaMEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDoyNTo1OVrODaMEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Nzg3Mjk2OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/serialization/FormatWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDoyNTo1OVrOFg__sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDoyNTo1OVrOFg__sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE0NzI1MQ==", "bodyText": "else with an exception for unsupported types?", "url": "https://github.com/DataDog/dd-trace-java/pull/1185#discussion_r370147251", "createdAt": "2020-01-23T14:25:59Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/serialization/FormatWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package datadog.trace.common.serialization;\n+\n+import datadog.opentracing.DDSpan;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class FormatWriter<DEST> {\n+  public abstract void writeKey(String key, DEST destination) throws IOException;\n+\n+  public abstract void writeListHeader(int size, DEST destination) throws IOException;\n+\n+  public abstract void writeListFooter(DEST destination) throws IOException;\n+\n+  public abstract void writeMapHeader(int size, DEST destination) throws IOException;\n+\n+  public abstract void writeMapFooter(DEST destination) throws IOException;\n+\n+  public abstract void writeString(String key, String value, DEST destination) throws IOException;\n+\n+  public abstract void writeShort(String key, short value, DEST destination) throws IOException;\n+\n+  public abstract void writeByte(String key, byte value, DEST destination) throws IOException;\n+\n+  public abstract void writeInt(String key, int value, DEST destination) throws IOException;\n+\n+  public abstract void writeLong(String key, long value, DEST destination) throws IOException;\n+\n+  public abstract void writeFloat(String key, float value, DEST destination) throws IOException;\n+\n+  public abstract void writeDouble(String key, double value, DEST destination) throws IOException;\n+\n+  public abstract void writeBigInteger(String key, BigInteger value, DEST destination)\n+      throws IOException;\n+\n+  public void writeNumber(final String key, final Number value, final DEST destination)\n+      throws IOException {\n+    if (value instanceof Double) {\n+      writeDouble(key, value.doubleValue(), destination);\n+    } else if (value instanceof Long) {\n+      writeLong(key, value.longValue(), destination);\n+    } else if (value instanceof Integer) {\n+      writeInt(key, value.intValue(), destination);\n+    } else if (value instanceof Float) {\n+      writeFloat(key, value.floatValue(), destination);\n+    } else if (value instanceof Byte) {\n+      writeByte(key, value.byteValue(), destination);\n+    } else if (value instanceof Short) {\n+      writeShort(key, value.shortValue(), destination);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af212af4f510772d150eaa0b59bb186ad2ccf387"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 483, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}