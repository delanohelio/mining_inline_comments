{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5OTkwODc4", "number": 1961, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxNDoxNFrOErtcwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxNDoxNFrOErtcwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjY4ODY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaForkJoinPoolInstrumentation.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxNDoxNFrOHeobZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzo0Mjo0MFrOHepgbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTcwMQ==", "bodyText": "Something like this might be valuable if we start needing to add this in other places: https://github.com/openzipkin/brave/blob/master/brave/src/main/java/brave/internal/Platform.java", "url": "https://github.com/DataDog/dd-trace-java/pull/1961#discussion_r501881701", "createdAt": "2020-10-08T17:14:14Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaForkJoinPoolInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.NameMatchers.namedOneOf;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType.FORK_JOIN_TASK;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinTask;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JavaForkJoinPoolInstrumentation extends Instrumenter.Default {\n+\n+  public JavaForkJoinPoolInstrumentation() {\n+    super(\"java_concurrent\", \"fjp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"java.util.concurrent.ForkJoinPool\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"java.util.concurrent.ForkJoinTask\", State.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    if (System.getProperty(\"java.version\").startsWith(\"1.7\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9bceeacf87d3d9cb9ed3549ce94bd75e6198c15"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MzczMg==", "bodyText": "Yes, though I think we should try to avoid doing this sort of thing in general.", "url": "https://github.com/DataDog/dd-trace-java/pull/1961#discussion_r501883732", "createdAt": "2020-10-08T17:17:30Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaForkJoinPoolInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.NameMatchers.namedOneOf;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType.FORK_JOIN_TASK;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinTask;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JavaForkJoinPoolInstrumentation extends Instrumenter.Default {\n+\n+  public JavaForkJoinPoolInstrumentation() {\n+    super(\"java_concurrent\", \"fjp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"java.util.concurrent.ForkJoinPool\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"java.util.concurrent.ForkJoinTask\", State.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    if (System.getProperty(\"java.version\").startsWith(\"1.7\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTcwMQ=="}, "originalCommit": {"oid": "e9bceeacf87d3d9cb9ed3549ce94bd75e6198c15"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NDY0Nw==", "bodyText": "Agreed, thoug I know there is a big switch statement for JFR compatibility, localizing these kind of checks would probably be good", "url": "https://github.com/DataDog/dd-trace-java/pull/1961#discussion_r501884647", "createdAt": "2020-10-08T17:19:03Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaForkJoinPoolInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.NameMatchers.namedOneOf;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType.FORK_JOIN_TASK;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinTask;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JavaForkJoinPoolInstrumentation extends Instrumenter.Default {\n+\n+  public JavaForkJoinPoolInstrumentation() {\n+    super(\"java_concurrent\", \"fjp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"java.util.concurrent.ForkJoinPool\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"java.util.concurrent.ForkJoinTask\", State.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    if (System.getProperty(\"java.version\").startsWith(\"1.7\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTcwMQ=="}, "originalCommit": {"oid": "e9bceeacf87d3d9cb9ed3549ce94bd75e6198c15"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NTg2MA==", "bodyText": "We could probably use something like this to conditionally add instrumentations. IE: reactor shouldn't even be loaded into bytebuddy unless we are on 8+, and 11+ for the new JDK WebClient if we had instrumentation for that", "url": "https://github.com/DataDog/dd-trace-java/pull/1961#discussion_r501885860", "createdAt": "2020-10-08T17:21:09Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaForkJoinPoolInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.NameMatchers.namedOneOf;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType.FORK_JOIN_TASK;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinTask;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JavaForkJoinPoolInstrumentation extends Instrumenter.Default {\n+\n+  public JavaForkJoinPoolInstrumentation() {\n+    super(\"java_concurrent\", \"fjp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"java.util.concurrent.ForkJoinPool\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"java.util.concurrent.ForkJoinTask\", State.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    if (System.getProperty(\"java.version\").startsWith(\"1.7\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTcwMQ=="}, "originalCommit": {"oid": "e9bceeacf87d3d9cb9ed3549ce94bd75e6198c15"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5OTM3NQ==", "bodyText": "Yes, switching everything on by default is wasteful when a lot can be determined cheaply up front.", "url": "https://github.com/DataDog/dd-trace-java/pull/1961#discussion_r501899375", "createdAt": "2020-10-08T17:42:40Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaForkJoinPoolInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.NameMatchers.namedOneOf;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType.FORK_JOIN_TASK;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinTask;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JavaForkJoinPoolInstrumentation extends Instrumenter.Default {\n+\n+  public JavaForkJoinPoolInstrumentation() {\n+    super(\"java_concurrent\", \"fjp\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"java.util.concurrent.ForkJoinPool\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"java.util.concurrent.ForkJoinTask\", State.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    if (System.getProperty(\"java.version\").startsWith(\"1.7\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTcwMQ=="}, "originalCommit": {"oid": "e9bceeacf87d3d9cb9ed3549ce94bd75e6198c15"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4684, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}