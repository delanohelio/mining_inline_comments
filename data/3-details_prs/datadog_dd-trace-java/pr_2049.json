{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MzUxMjgz", "number": 2049, "title": "implement protobuf writer, refactor msgpack serialisation to reuse code", "bodyText": "This PR aims to allow producing messages in protobuf or messagepack in a format agnostic way.\nProtobuf has a slight difference to messagepack in that it requires all length delimited types to know the number of bytes as opposed to the logical element count (these two numbers coincide for ASCII strings and raw binary data) which requires the maintenance of a stack in the protobuf writer.\nThe protobuf writer requires the user to write fields in the order specified by the field numbers (not the position in the message specification in the .proto), which has benefits for readers doing partial deserialisation by skipping over regions of the message, but also means we're not truly agnostic to the format.", "createdAt": "2020-11-04T12:24:27Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2049", "merged": true, "mergeCommit": {"oid": "fad7c9e0584a9414512797cdf99e8bc2b698dd2f"}, "closed": true, "closedAt": "2020-11-09T12:08:12Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZOADKABqjM5NTc2NTM2ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdayjK0AH2gAyNTE1MzUxMjgzOjJhZjU5M2M1MzMzZWJmMDU2MGE1Yjc2ZmE4NDU3YTAyMGY1ODcxYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03b9921ae986bdca59add891ce3833026aa215c7", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/03b9921ae986bdca59add891ce3833026aa215c7", "committedDate": "2020-11-04T12:23:45Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "a4b50828a43dcc9d548c55c99e2cb6a82371e3ff", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a4b50828a43dcc9d548c55c99e2cb6a82371e3ff", "committedDate": "2020-11-04T13:43:55Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4b50828a43dcc9d548c55c99e2cb6a82371e3ff", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a4b50828a43dcc9d548c55c99e2cb6a82371e3ff", "committedDate": "2020-11-04T13:43:55Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "3a2f05064e7a5b69d25abf9ffed22bc0e3fc52b5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3a2f05064e7a5b69d25abf9ffed22bc0e3fc52b5", "committedDate": "2020-11-04T13:54:31Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a2f05064e7a5b69d25abf9ffed22bc0e3fc52b5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3a2f05064e7a5b69d25abf9ffed22bc0e3fc52b5", "committedDate": "2020-11-04T13:54:31Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "fc0d450e25781d2e6f7b06c362429de1195d1718", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fc0d450e25781d2e6f7b06c362429de1195d1718", "committedDate": "2020-11-04T16:49:58Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc0d450e25781d2e6f7b06c362429de1195d1718", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fc0d450e25781d2e6f7b06c362429de1195d1718", "committedDate": "2020-11-04T16:49:58Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "42def7a99d5f22dcfe6746f8a5ad0c2039955d77", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/42def7a99d5f22dcfe6746f8a5ad0c2039955d77", "committedDate": "2020-11-04T18:05:08Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42def7a99d5f22dcfe6746f8a5ad0c2039955d77", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/42def7a99d5f22dcfe6746f8a5ad0c2039955d77", "committedDate": "2020-11-04T18:05:08Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d13d4957bc94fa892a643a243f6c8ea6448fa59f", "committedDate": "2020-11-05T11:09:57Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTYxNjI4", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#pullrequestreview-524161628", "createdAt": "2020-11-05T11:19:10Z", "commit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxOToxMFrOHt-tSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxOToxMFrOHt-tSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NTM3MQ==", "bodyText": "This is flawed at the moment because the root buffer will not be written in to until the end for messages like\nmessage Foo {\n     repeated Any x = 1;\n}\n\nAnd the first context pushed to the stack would need to grow indefinitely.", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#discussion_r517975371", "createdAt": "2020-11-05T11:19:10Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/protobuf/ProtobufWriter.java", "diffHunk": "@@ -0,0 +1,416 @@\n+package datadog.trace.core.serialization.protobuf;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.core.serialization.ByteBufferConsumer;\n+import datadog.trace.core.serialization.Codec;\n+import datadog.trace.core.serialization.EncodingCache;\n+import datadog.trace.core.serialization.Writable;\n+import datadog.trace.core.serialization.WritableFormatter;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+/**\n+ * Gives low level access to the protobuf format. Requires writers to write fields in the correct\n+ * order (which is also beneficial for readers hoping to skip fields, allowing the reader to pass\n+ * over the buffer once).\n+ */\n+public class ProtobufWriter extends WritableFormatter {\n+\n+  private static final int VARINT = 0;\n+  private static final int FIXED_64 = 1;\n+  private static final int LENGTH_DELIMITED = 2;\n+  private static final int FIXED_32 = 5;\n+\n+  private class Context implements Writable {\n+    private final ByteBuffer buffer;\n+    private int elementCount = Integer.MAX_VALUE;\n+    private int fieldNumber = 1;\n+    private int position = 0;\n+    private boolean inArray = false;\n+\n+    private Context(ByteBuffer buffer) {\n+      this.buffer = buffer;\n+    }\n+\n+    private Context() {\n+      // 512 KB\n+      this(ByteBuffer.allocate(1 << 19));\n+    }\n+\n+    void reset() {\n+      buffer.position(0);\n+      buffer.limit(buffer.capacity());\n+      this.fieldNumber = 1;\n+      this.position = 0;\n+      this.elementCount = Integer.MAX_VALUE;\n+    }\n+\n+    void transferTo(Context target) {\n+      buffer.flip();\n+      target.writeBinary(buffer);\n+    }\n+\n+    @Override\n+    public void writeNull() {\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeBoolean(boolean value) {\n+      if (value) {\n+        if (!inArray) {\n+          writeTag(VARINT);\n+        }\n+        writeVarInt(1);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeObject(Object value, EncodingCache encodingCache) {\n+      ProtobufWriter.this.writeObject(value, encodingCache);\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeMap(Map<? extends CharSequence, ?> map, EncodingCache encodingCache) {\n+      if (!map.isEmpty()) {\n+        ProtobufWriter.this.writeMap(map, encodingCache);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeString(CharSequence s, EncodingCache encodingCache) {\n+      if (s instanceof UTF8BytesString) {\n+        writeUTF8((UTF8BytesString) s);\n+      } else {\n+        // TODO consider avoiding allocations here\n+        writeUTF8(String.valueOf(s).getBytes(UTF_8));\n+      }\n+    }\n+\n+    @Override\n+    public void writeUTF8(byte[] string, int offset, int length) {\n+      if (length != 0) {\n+        writeLengthPrefix(length);\n+        buffer.put(string, offset, length);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeUTF8(byte[] string) {\n+      if (string.length != 0) {\n+        writeLengthPrefix(string.length);\n+        buffer.put(string);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeUTF8(UTF8BytesString string) {\n+      if (string.encodedLength() != 0) {\n+        writeLengthPrefix(string.encodedLength());\n+        string.transferTo(buffer);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeBinary(byte[] binary, int offset, int length) {\n+      if (length != 0) {\n+        writeLengthPrefix(length);\n+        buffer.put(binary, offset, length);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeBinary(ByteBuffer buffer) {\n+      if (buffer.hasRemaining()) {\n+        writeLengthPrefix(buffer.remaining());\n+        this.buffer.put(buffer);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void startMap(int elementCount) {\n+      if (elementCount != 0) {\n+        ProtobufWriter.this.startMap(elementCount);\n+      }\n+    }\n+\n+    @Override\n+    public void startStruct(int elementCount) {\n+      if (elementCount != 0) {\n+        ProtobufWriter.this.startStruct(elementCount);\n+      }\n+    }\n+\n+    @Override\n+    public void startArray(int elementCount) {\n+      if (elementCount != 0) {\n+        ProtobufWriter.this.startArray(elementCount);\n+      }\n+    }\n+\n+    @Override\n+    public void writeInt(int value) {\n+      // TODO to support sint32 need a separate zigzag encoded method\n+      if (value != 0) {\n+        if (!inArray) {\n+          writeTag(VARINT);\n+        }\n+        writeVarInt(value);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeLong(long value) {\n+      // TODO to support sint64 need a separate zigzag encoded method\n+      if (value != 0) {\n+        if (!inArray) {\n+          writeTag(VARINT);\n+        }\n+        writeVarInt(value);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeFloat(float value) {\n+      if (value != 0f) {\n+        if (!inArray) {\n+          writeTag(FIXED_32);\n+        }\n+        buffer.putFloat(value);\n+      }\n+      nextElement();\n+    }\n+\n+    @Override\n+    public void writeDouble(double value) {\n+      if (value != 0d) {\n+        if (!inArray) {\n+          writeTag(FIXED_64);\n+        }\n+        buffer.putDouble(value);\n+      }\n+      nextElement();\n+    }\n+\n+    private void writeLengthPrefix(int length) {\n+      writeTag(LENGTH_DELIMITED);\n+      writeVarInt(length);\n+    }\n+\n+    private void nextElement() {\n+      if (!inArray) {\n+        ++fieldNumber;\n+      }\n+      ++position;\n+      checkElementCountInvariant();\n+    }\n+\n+    private void checkElementCountInvariant() {\n+      if (position == elementCount) {\n+        ProtobufWriter.this.leaveContext();\n+      }\n+    }\n+\n+    void writeTag(int wireType) {\n+      writeVarInt((fieldNumber << 3) | wireType);\n+    }\n+\n+    private void writeVarInt(int value) {\n+      int length = varIntLength(value);\n+      for (int i = 0; i < length; ++i) {\n+        buffer.put((byte) ((value & 0x7F) | 0x80));\n+        value >>>= 7;\n+      }\n+      buffer.put((byte) value);\n+    }\n+\n+    private void writeVarInt(long value) {\n+      int length = varIntLength(value);\n+      for (int i = 0; i < length; ++i) {\n+        buffer.put((byte) ((value & 0x7F) | 0x80));\n+        value >>>= 7;\n+      }\n+      buffer.put((byte) value);\n+    }\n+\n+    private int varIntLength(int value) {\n+      return (31 - Integer.numberOfLeadingZeros(value)) / 7;\n+    }\n+\n+    private int varIntLength(long value) {\n+      return (63 - Long.numberOfLeadingZeros(value)) / 7;\n+    }\n+  }\n+\n+  private final Deque<Context> pool = new ArrayDeque<>();\n+  private final Deque<Context> stack = new ArrayDeque<>();\n+  private final Context root;\n+  private Context active;\n+\n+  public ProtobufWriter(\n+      Codec codec, ByteBufferConsumer sink, ByteBuffer buffer, boolean manualReset) {\n+    super(codec, sink, buffer, manualReset, 0);\n+    this.root = new Context(buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "originalPosition": 267}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjM5NzIx", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#pullrequestreview-524239721", "createdAt": "2020-11-05T13:06:06Z", "commit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowNjowNlrOHuCYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowNjowNlrOHuCYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzNTUyOA==", "bodyText": "This is just a name change, not new code.", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#discussion_r518035528", "createdAt": "2020-11-05T13:06:06Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/MsgPackWriter.java", "diffHunk": "@@ -1,8 +1,606 @@\n package datadog.trace.core.serialization.msgpack;\n \n+import static java.nio.charset.StandardCharsets.UTF_8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzgyMTA5", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#pullrequestreview-524382109", "createdAt": "2020-11-05T15:31:01Z", "commit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozMTowMVrOHuIvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozODoxMlrOHuJMpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEzOTc5Mw==", "bodyText": "Tis a shame that these annotations can't be added when targeting Java 7.", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#discussion_r518139793", "createdAt": "2020-11-05T15:31:01Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/ValueWriter.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package datadog.trace.core.serialization;\n+\n+// TODO @FunctionalInterface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0MjIxOQ==", "bodyText": "Any idea why git didn't pick up on the rename?", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#discussion_r518142219", "createdAt": "2020-11-05T15:33:37Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/MsgPackWriter.java", "diffHunk": "@@ -1,8 +1,606 @@\n package datadog.trace.core.serialization.msgpack;\n \n+import static java.nio.charset.StandardCharsets.UTF_8;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzNTUyOA=="}, "originalCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0NzIzOQ==", "bodyText": "This doesn't seem as easy to follow as parameterized spock.", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#discussion_r518147239", "createdAt": "2020-11-05T15:38:12Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/test/java/datadog/trace/core/serialization/protobuf/IntPackingTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package datadog.trace.core.serialization.protobuf;\n+\n+import static datadog.trace.core.serialization.protobuf.CompactRepeatedFieldHelper.verifyCompactVarints;\n+\n+import datadog.trace.core.serialization.ByteBufferConsumer;\n+import datadog.trace.core.serialization.EncodingCachingStrategies;\n+import datadog.trace.core.serialization.Mapper;\n+import datadog.trace.core.serialization.MessageFormatter;\n+import datadog.trace.core.serialization.Writable;\n+import java.nio.ByteBuffer;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+@RunWith(Parameterized.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d13d4957bc94fa892a643a243f6c8ea6448fa59f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d13d4957bc94fa892a643a243f6c8ea6448fa59f", "committedDate": "2020-11-05T11:09:57Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "84b6b3eb3715bd6f943087f72240826dc1cf40f2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/84b6b3eb3715bd6f943087f72240826dc1cf40f2", "committedDate": "2020-11-06T12:58:10Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f239fc21c7f9f475cfc321f46da94636deed5c1", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0f239fc21c7f9f475cfc321f46da94636deed5c1", "committedDate": "2020-11-06T15:59:58Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84b6b3eb3715bd6f943087f72240826dc1cf40f2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/84b6b3eb3715bd6f943087f72240826dc1cf40f2", "committedDate": "2020-11-06T12:58:10Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}, "afterCommit": {"oid": "0f239fc21c7f9f475cfc321f46da94636deed5c1", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0f239fc21c7f9f475cfc321f46da94636deed5c1", "committedDate": "2020-11-06T15:59:58Z", "message": "implement protobuf writer, refactor msgpack serialisation to reuse code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDc0ODU2", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#pullrequestreview-526074856", "createdAt": "2020-11-09T09:39:39Z", "commit": {"oid": "0f239fc21c7f9f475cfc321f46da94636deed5c1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozOTozOVrOHvmObg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozOTozOVrOHvmObg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MTQwNg==", "bodyText": "If I understand the code correctly, the Context is used to serialize out the current struct or array so that it's possible to write the length in bytes in the varint encoding in the parent buffer before copying over the serialized bytes from the context. It would be great with some comment about the machinery so it would be easier to follow without digging through the call chain.", "url": "https://github.com/DataDog/dd-trace-java/pull/2049#discussion_r519671406", "createdAt": "2020-11-09T09:39:39Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/protobuf/ProtobufWriter.java", "diffHunk": "@@ -0,0 +1,434 @@\n+package datadog.trace.core.serialization.protobuf;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.core.serialization.ByteBufferConsumer;\n+import datadog.trace.core.serialization.Codec;\n+import datadog.trace.core.serialization.EncodingCache;\n+import datadog.trace.core.serialization.Writable;\n+import datadog.trace.core.serialization.WritableFormatter;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.Map;\n+\n+/**\n+ * Gives low level access to the protobuf format. Requires writers to write fields in the correct\n+ * order (which is also beneficial for readers hoping to skip fields, allowing the reader to pass\n+ * over the buffer once).\n+ */\n+public class ProtobufWriter extends WritableFormatter {\n+\n+  private static final int VARINT = 0;\n+  private static final int FIXED_64 = 1;\n+  private static final int LENGTH_DELIMITED = 2;\n+  private static final int FIXED_32 = 5;\n+\n+  private class Context implements Writable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f239fc21c7f9f475cfc321f46da94636deed5c1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af593c5333ebf0560a5b76fa8457a020f5871a2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2af593c5333ebf0560a5b76fa8457a020f5871a2", "committedDate": "2020-11-09T10:52:56Z", "message": "javadoc to clarify the protobuf context stack"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3073, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}