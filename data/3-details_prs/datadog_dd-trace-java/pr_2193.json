{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTkzMDk3", "number": 2193, "title": "Update server span's resource name after Zuul forward", "bodyText": "Otherwise the resource name is very generic (GET /**).", "createdAt": "2020-12-11T15:10:42Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2193", "merged": true, "mergeCommit": {"oid": "4e2bd0e1ef11e3928f6a55ff1cbc85fc95b7446d"}, "closed": true, "closedAt": "2020-12-15T16:01:07Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlKR6dgH2gAyNTM2OTkzMDk3OjhmMGU1NDg1MDhjYmQ1NTBiN2QyMjA4ZjViMDcxMjA1ODY4YTBiMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmcaTpAFqTU1MjYwMzI2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8f0e548508cbd550b7d2208f5b071205868a0b33", "committedDate": "2020-12-11T16:11:03Z", "message": "Update server span's resource name after Zuul forward\n\nOtherwise the resource name is very generic (`GET /**`)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd275f33c6ef4bbb65f4c435ac6acaa400067535", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fd275f33c6ef4bbb65f4c435ac6acaa400067535", "committedDate": "2020-12-10T23:47:17Z", "message": "Update server span's resource name after Zuul forward\n\nOtherwise the resource name is very generic (`GET /**`)."}, "afterCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8f0e548508cbd550b7d2208f5b071205868a0b33", "committedDate": "2020-12-11T16:11:03Z", "message": "Update server span's resource name after Zuul forward\n\nOtherwise the resource name is very generic (`GET /**`)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjg3MDEw", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550287010", "createdAt": "2020-12-11T16:56:19Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1NjoyMFrOIEBbnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1NjoyMFrOIEBbnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA==", "bodyText": "Adding check against status 0?  Why?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541088668", "createdAt": "2020-12-11T16:56:20Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjkxNTU5", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550291559", "createdAt": "2020-12-11T16:59:37Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1OTozN1rOIEBkhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1OTozN1rOIEBkhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MDk0OQ==", "bodyText": "Why are these ignores necessary?\nI think this needs more commenting.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541090949", "createdAt": "2020-12-11T16:59:37Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjk0MTM2", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550294136", "createdAt": "2020-12-11T17:01:30Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMTozMFrOIEBpEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMTozMFrOIEBpEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjExNQ==", "bodyText": "We take request as a parameter and then ignore it?\nSame question for parentSpan?\nThis whole method doesn't appear to really be doing anything.  Am I missing something?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541092115", "createdAt": "2020-12-11T17:01:30Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMjk0OTY4", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550294968", "createdAt": "2020-12-11T17:02:10Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMjoxMFrOIEBqyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMjoxMFrOIEBqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjU1Mw==", "bodyText": "These were added because the tests now exercises Spring Boot 2.x, which has different package names.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541092553", "createdAt": "2020-12-11T17:02:10Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n+            || name.equals(\n+                \"org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.EmbeddedWebApplicationContext\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")) {\n+                \"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMzA1MzUy", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550305352", "createdAt": "2020-12-11T17:09:34Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowOTozNFrOIEB8SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowOTozNFrOIEB8SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5NzAzMw==", "bodyText": "I think that's fine.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541097033", "createdAt": "2020-12-11T17:09:34Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();\n+      if (request != null) {\n+        // Capture the span from the request before forwarding.\n+        Object span = request.getAttribute(DD_SPAN_ATTRIBUTE);\n+        if (span instanceof AgentSpan) {\n+          parentSpan = (AgentSpan) span;\n+        }\n+      }\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      if (request != null && parentSpan != null) {\n+        final String method = request.getMethod();\n+        // Get the updated route pattern.\n+        // Opted for static string here to avoid an additional spring dependency.\n+        final Object bestMatchingPattern =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMzEzNDAw", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550313400", "createdAt": "2020-12-11T17:15:11Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToxMlrOIECJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToxMlrOIECJ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDUzMA==", "bodyText": "I presume we already generate similar resource names elsewhere.\nWhy does this require its own cache?\nUnable to share across instrumentation boundaries?\nOr because there's a performance benefit to separate caches?\nI'm not saying this either good or bad, but I want to understand our motivation.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541100530", "createdAt": "2020-12-11T17:15:12Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ResourceNameCache.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+\n+public class ResourceNameCache {\n+  public static final Function<Pair<String, Object>, CharSequence> RESOURCE_NAME_JOINER =\n+      new Function<Pair<String, Object>, CharSequence>() {\n+        @Override\n+        public CharSequence apply(Pair<String, Object> input) {\n+          return UTF8BytesString.create(input.getLeft() + \" \" + input.getRight());\n+        }\n+      };\n+\n+  public static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMzcwMTA0", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550370104", "createdAt": "2020-12-11T17:50:40Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MDo0MFrOIEDeMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MDo0MFrOIEDeMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMjA5Nw==", "bodyText": "I think this implicitly setting tags is problematic, but I realize that's pre-existing.\nWe'll have to address that in some of the other server work.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541122097", "createdAt": "2020-12-11T17:50:40Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {\n+          if (throwable != null && status == HttpServletResponse.SC_OK) {\n+            span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNTE2Njc4", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550516678", "createdAt": "2020-12-11T19:27:24Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjAxMTI4", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-550601128", "createdAt": "2020-12-11T21:50:45Z", "commit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo1MDo0NVrOIEQOkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo1MDo0NVrOIEQOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMTA4OQ==", "bodyText": "We need extra instrumentation just in the test?  Why?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541331089", "createdAt": "2020-12-11T21:50:45Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/test/groovy/ServletTestInstrumentation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.test.base.HttpServerTestAdvice;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+\n+@AutoService(Instrumenter.class)\n+public class ServletTestInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d78e29aa88bb920bfbe2c66486619e4a38bf1b1", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3d78e29aa88bb920bfbe2c66486619e4a38bf1b1", "committedDate": "2020-12-14T15:28:22Z", "message": "Add a static final representing an unset port."}, "afterCommit": {"oid": "c4e2305e43e513a73faaecb706bb7d3365f98817", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c4e2305e43e513a73faaecb706bb7d3365f98817", "committedDate": "2020-12-14T15:33:00Z", "message": "Add a static final representing an unset status."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDg2MTM5", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-551486139", "createdAt": "2020-12-14T15:34:09Z", "commit": {"oid": "c4e2305e43e513a73faaecb706bb7d3365f98817"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNDowOVrOIFWRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNDowOVrOIFWRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3ODYwNQ==", "bodyText": "@richardstartin any concerns with adding 0 into the default cache? How should I update the comment?  Should I apply a similar change for PORTS below?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r542478605", "createdAt": "2020-12-14T15:34:09Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/api/cache/RadixTreeCache.java", "diffHunk": "@@ -14,11 +14,13 @@ public Integer apply(int value) {\n         }\n       };\n \n+  public static final int UNSET_STATUS = 0;\n   // should cover range [0, 512) to cover all standard HTTP statuses\n   // 16 pages of 32 should keep the tree sparse with typical pages\n   // covering ranges [192, 224), [288, 320), [384, 416), [480, 512)\n   public static final RadixTreeCache<Integer> HTTP_STATUSES =\n-      new RadixTreeCache<>(16, 32, AUTOBOX, 200, 201, 301, 307, 400, 401, 403, 404, 500, 502, 503);\n+      new RadixTreeCache<>(\n+          16, 32, AUTOBOX, UNSET_STATUS, 200, 201, 301, 307, 400, 401, 403, 404, 500, 502, 503);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4e2305e43e513a73faaecb706bb7d3365f98817"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebfc4a75be47b8d90f231772bc874cfeddc9000b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ebfc4a75be47b8d90f231772bc874cfeddc9000b", "committedDate": "2020-12-14T15:40:27Z", "message": "Add a static final representing an unset status/port."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4e2305e43e513a73faaecb706bb7d3365f98817", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c4e2305e43e513a73faaecb706bb7d3365f98817", "committedDate": "2020-12-14T15:33:00Z", "message": "Add a static final representing an unset status."}, "afterCommit": {"oid": "ebfc4a75be47b8d90f231772bc874cfeddc9000b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ebfc4a75be47b8d90f231772bc874cfeddc9000b", "committedDate": "2020-12-14T15:40:27Z", "message": "Add a static final representing an unset status/port."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c927a5a248d9433438d2afcde2856c4ca81e067", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2c927a5a248d9433438d2afcde2856c4ca81e067", "committedDate": "2020-12-14T17:34:55Z", "message": "Merge branch 'master' into tyler/zuul"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8dcaeac1dda2c1f962f83448dcb3a92f50d40c6", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e8dcaeac1dda2c1f962f83448dcb3a92f50d40c6", "committedDate": "2020-12-14T15:59:32Z", "message": "Merge branch 'master' into tyler/zuul"}, "afterCommit": {"oid": "2c927a5a248d9433438d2afcde2856c4ca81e067", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2c927a5a248d9433438d2afcde2856c4ca81e067", "committedDate": "2020-12-14T17:34:55Z", "message": "Merge branch 'master' into tyler/zuul"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjAzMjY4", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#pullrequestreview-552603268", "createdAt": "2020-12-15T15:52:26Z", "commit": {"oid": "2c927a5a248d9433438d2afcde2856c4ca81e067"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2745, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}