{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjAyMzEw", "number": 1285, "title": "Avoid temporary Jar file collisions", "bodyText": "This change aims to avoid JAR file collisions by creating a per-injection temp dir inside the usual java.io.tmpdir.\nThe HelperInjector selects a temporary directory using Files.createTempDirectory for each injection.  This compensates for ByteBuddy's ClassInjector.UsingInstrumentation not using File.createTempFile which leads to occasional collisions.\nThis scheme was chosen in part to avoid modifying or recreating the logic in ClassInjector.UsingInstrumentation.  While the logic of that class is not complicated, many of the helper classes it calls are not public.", "createdAt": "2020-03-03T21:51:23Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1285", "merged": true, "mergeCommit": {"oid": "3ff5b99cd67484bbd16ef8ac1cece070a8d9d21c"}, "closed": true, "closedAt": "2020-03-06T20:14:26Z", "author": {"login": "dougqh"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKI6NqgH2gAyMzgzMjAyMzEwOjM0MTdmZDg5NDBlMWJjMDNkYTY1NzBkNzc3MTBlMWRiMDM1MjI2NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKcvGpgH2gAyMzgzMjAyMzEwOjdhMTgzZTc1NWUzMTAyOWM3ZWM3YTFmZWVkMTQ4ZmJmMDUwMzUyNmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3417fd8940e1bc03da6570d77710e1db03522673", "author": {"user": {"login": "dougqh", "name": "Douglas Q Hawkins"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3417fd8940e1bc03da6570d77710e1db03522673", "committedDate": "2020-03-03T21:08:09Z", "message": "Improving debuggability by requestingName\n\nThis change adds a requestingName field to help in diagnosing the source of any injection failures.\n\nUsually, the requestingName is the simple class name of the Instrumenter; however, this change doesn't propagate the Instumeneter named through FieldBackedProvider."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c50899f1845643cab256d7f380c699d35356f627", "author": {"user": {"login": "dougqh", "name": "Douglas Q Hawkins"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c50899f1845643cab256d7f380c699d35356f627", "committedDate": "2020-03-03T21:08:19Z", "message": "Creating helper methods for injection\n\nCreate helper methods injectBootstrapClassLoader & injectClassLoader.\n\nThe directory creation and retry logic that will be added to the handling of the bootstrap will complicated the code.\n\nTo keep the code readable, I broke the bootstrap handling into its own method.  To keep the level abstraction consistent, I did the same with injectClassLoader."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ecce477e0d3ce497b6e3379a543dc6b447d223", "author": {"user": {"login": "dougqh", "name": "Douglas Q Hawkins"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d2ecce477e0d3ce497b6e3379a543dc6b447d223", "committedDate": "2020-03-03T21:08:29Z", "message": "Switching to per-process temp dir\n\nSwitching to create a per-process temp dir as protection against file name collisions.  This is done by introduced TEMP_DIR which is calculated during class initialization.\n\nThe current selection process generates a random directory name and sees if that name is availabe in java.io.tmpdir.  If it is that name is selected; otherwise, another name is generated.\n\nIf no unique name is found after 10 rounds of generation, the code falls back to the old behavior of writing directly to java.io.tmpdir."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933", "author": {"user": {"login": "dougqh", "name": "Douglas Q Hawkins"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4ad51dd9fa91c4d306be3d581132456c03b92933", "committedDate": "2020-03-03T21:08:37Z", "message": "Introducing TempDir helper\n\nIntroduces a TempDir helper class\n\nThis was done to help handle an oversight in the prior per-process temp dir change.  The fallback mode is to use the shared java.io.tmpdir directly.\n\nWhen using java.io.tmpdir, we don't want to be creating and destorying, since it may be shared.\n\nThe new TempDir object is constructed knowing whether the TempDir is per-process or shared -- and the behavior of its prepare and cleanup method change accordingly.\n\nWhen using a per-process temp dir, the dir is creating and deleted regularly.  When using a shared temp dir, those methods become nops.\n\nCreating TempDir also made it easy to avoid repeatedly calling deleteOnExit in the event that delete fails, so I made that change as well."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzUyNDUy", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368352452", "createdAt": "2020-03-03T21:52:26Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MjoyNlrOFxX5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MjoyNlrOFxX5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNTk3Ng==", "bodyText": "This field was added to improved our ability to debug problems when failures occur.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387315976", "createdAt": "2020-03-03T21:52:26Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();\n+\n   // Need this because we can't put null into the injectedClassLoaders map.\n   private static final ClassLoader BOOTSTRAP_CLASSLOADER_PLACEHOLDER =\n       new SecureClassLoader(null) {};\n \n+  private final String requestingName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzUyOTY5", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368352969", "createdAt": "2020-03-03T21:53:17Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MzoxN1rOFxX6uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MzoxN1rOFxX6uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNjQwOQ==", "bodyText": "This logic was pulled out into helper methods to make things more readable.\nAlthough, now that most of the preparation and cleanup has been moved to the TempDir class, this might be overkill.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387316409", "createdAt": "2020-03-03T21:53:17Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -101,14 +111,9 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n           final Map<String, byte[]> classnameToBytes = getHelperMap();\n           final Map<String, Class<?>> classes;\n           if (classLoader == BOOTSTRAP_CLASSLOADER_PLACEHOLDER) {\n-            classes =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzU0OTEx", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368354911", "createdAt": "2020-03-03T21:56:28Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1NjoyOVrOFxYA9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1NjoyOVrOFxYA9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODAwNw==", "bodyText": "This is probably the most debatable part.\nTo avoid leaving around vestigial dirs, this checks if the dir is empty and deletes it.\nOn some level, this does actually open a possibility for collisions, since another process might find that a directory by the name doesn't exist and then assume it has exclusive access to that name.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387318007", "createdAt": "2020-03-03T21:56:29Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {\n+      return new TempDir(dir, true);\n+    }\n+\n+    static final TempDir makeShared(final File dir) {\n+      return new TempDir(dir, false);\n+    }\n+\n+    public final File dir;\n+    private final boolean perProcess;\n+    private volatile boolean scheduledDelete = false;\n+\n+    TempDir(final File dir, final boolean perProcess) {\n+      this.dir = dir;\n+      this.perProcess = perProcess;\n+    }\n+\n+    void prepare() {\n+      // If shared, we're using java.io.tmpdir which should already exist\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, need to create directory for this process\n+      dir.mkdirs();\n+    }\n+\n+    void cleanup() {\n+      // If not per process, no directory clean-up\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, clean-up the directory -- if it is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzU3MzI0", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368357324", "createdAt": "2020-03-03T22:00:26Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowMDoyNlrOFxYInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowMDoyNlrOFxYInw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxOTk2Nw==", "bodyText": "As a further level of defense, we could do couple things here.\nThe ClassInjector internally constructs a RandomString which in turn uses a Random.\nFrom inspection, two threads injecting at the same time are unlikely to conflict because the Random objects should have different seeds.\nJava seeds Random objects not just with time, but also with another value that is changed for each Random object created.\nIf wanted to provide a stronger guarantee, we could reuse the UsingInstrumentation object from injection to the next which would also reuse the underlying RandomString and Random objects.  However, before doing that, we need to double check that all the classes involved are thread-safe.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387319967", "createdAt": "2020-03-03T22:00:26Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -141,6 +147,25 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n     return builder;\n   }\n \n+  private Map<String, Class<?>> injectBootstrapClassLoader(\n+      final Map<String, byte[]> classnameToBytes) {\n+    TEMP_DIR.prepare();\n+    try {\n+      return ClassInjector.UsingInstrumentation.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mzg2MDgw", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368386080", "createdAt": "2020-03-03T22:53:16Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1MzoxNlrOFxZl3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1NjoyOVrOFxZrOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MzgzNw==", "bodyText": "Why is it ok to run cleanup right after injecting the classes?  Does this assume the JVM now has the file open and deleting it will have no negative impact?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387343837", "createdAt": "2020-03-03T22:53:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -141,6 +147,25 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n     return builder;\n   }\n \n+  private Map<String, Class<?>> injectBootstrapClassLoader(\n+      final Map<String, byte[]> classnameToBytes) {\n+    TEMP_DIR.prepare();\n+    try {\n+      return ClassInjector.UsingInstrumentation.of(\n+              TEMP_DIR.dir,\n+              ClassInjector.UsingInstrumentation.Target.BOOTSTRAP,\n+              AgentInstaller.getInstrumentation())\n+          .injectRaw(classnameToBytes);\n+    } finally {\n+      TEMP_DIR.cleanup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NTIxMQ==", "bodyText": "Did you consider using java.io.File#createTempFile(...)?  I think that is supposed to guarantee a unique file.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387345211", "createdAt": "2020-03-03T22:56:29Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzUyMTM2", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368752136", "createdAt": "2020-03-04T12:54:26Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1NDoyNlrOFxsGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1NDoyNlrOFxsGhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzExMA==", "bodyText": "is the a point in making statics final?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387647110", "createdAt": "2020-03-04T12:54:26Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzUyODEw", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368752810", "createdAt": "2020-03-04T12:55:31Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1NTozMlrOFxsIng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1NTozMlrOFxsIng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzY0Ng==", "bodyText": "Generates up to random names.\n\nmissing a number?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387647646", "createdAt": "2020-03-04T12:55:32Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzU3MzEx", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368757311", "createdAt": "2020-03-04T13:02:12Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowMjoxMlrOFxsWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowMjoxMlrOFxsWug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTI1OA==", "bodyText": "Wouldn't it make sense to generate TMP name right before creating a dir - not at start up and then creating a dir potentially quite a bit later?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387651258", "createdAt": "2020-03-04T13:02:12Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzY3MDQ3", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#pullrequestreview-368767047", "createdAt": "2020-03-04T13:16:51Z", "commit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNjo1MlrOFxs0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNjo1MlrOFxs0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1ODg4Ng==", "bodyText": "Have you considered using java.nio.file.Files#createTempDirectory(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute<?>...) instead? Looks like it's part of jdk since java7, does pretty much similar thing and doesn't require reimplementing...", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387658886", "createdAt": "2020-03-04T13:16:52Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a183e755e31029c7ec7a1feed148fbf0503526f", "author": {"user": {"login": "dougqh", "name": "Douglas Q Hawkins"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7a183e755e31029c7ec7a1feed148fbf0503526f", "committedDate": "2020-03-04T20:14:07Z", "message": "Switching to per-injection temp dir to avoid race\n\nUpon review, we realized that there was a race not just between processes but also with multiple threads in the same process.\n\nThis race happens because of the effort to proactively clean-up directories.\n\nThis left two choices...\n- assume per-process exclusivity -- and resolve the race with reference counting\n- move to a temp dir per injection\n\nThis change uses the later strategy which is potentially more expensive but safest."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2547, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}