{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjAyMzEw", "number": 1285, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MjoyNlrODk1EsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNjo1MlrODlCiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQ0ODgxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MjoyNlrOFxX5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MjoyNlrOFxX5CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNTk3Ng==", "bodyText": "This field was added to improved our ability to debug problems when failures occur.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387315976", "createdAt": "2020-03-03T21:52:26Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();\n+\n   // Need this because we can't put null into the injectedClassLoaders map.\n   private static final ClassLoader BOOTSTRAP_CLASSLOADER_PLACEHOLDER =\n       new SecureClassLoader(null) {};\n \n+  private final String requestingName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQ1MTU5OnYy", "diffSide": "LEFT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MzoxN1rOFxX6uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1MzoxN1rOFxX6uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNjQwOQ==", "bodyText": "This logic was pulled out into helper methods to make things more readable.\nAlthough, now that most of the preparation and cleanup has been moved to the TempDir class, this might be overkill.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387316409", "createdAt": "2020-03-03T21:53:17Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -101,14 +111,9 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n           final Map<String, byte[]> classnameToBytes = getHelperMap();\n           final Map<String, Class<?>> classes;\n           if (classLoader == BOOTSTRAP_CLASSLOADER_PLACEHOLDER) {\n-            classes =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQ2MTQ1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1NjoyOVrOFxYA9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0NTowOVrOFx-wLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODAwNw==", "bodyText": "This is probably the most debatable part.\nTo avoid leaving around vestigial dirs, this checks if the dir is empty and deletes it.\nOn some level, this does actually open a possibility for collisions, since another process might find that a directory by the name doesn't exist and then assume it has exclusive access to that name.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387318007", "createdAt": "2020-03-03T21:56:29Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {\n+      return new TempDir(dir, true);\n+    }\n+\n+    static final TempDir makeShared(final File dir) {\n+      return new TempDir(dir, false);\n+    }\n+\n+    public final File dir;\n+    private final boolean perProcess;\n+    private volatile boolean scheduledDelete = false;\n+\n+    TempDir(final File dir, final boolean perProcess) {\n+      this.dir = dir;\n+      this.perProcess = perProcess;\n+    }\n+\n+    void prepare() {\n+      // If shared, we're using java.io.tmpdir which should already exist\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, need to create directory for this process\n+      dir.mkdirs();\n+    }\n+\n+    void cleanup() {\n+      // If not per process, no directory clean-up\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, clean-up the directory -- if it is empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2MDQ2Ng==", "bodyText": "I'm not sure I quite follow the exact problem you are solving here...\nIf the problem is that BB's logic to create tmp files sometimes gives you collisions then why don't you just pass it result of new call tojava.nio.file.Files#createTempDirectory() every time (and then remove the directory)? Creating dir seems to be cheap enough operation - considering that we also write a file into it. And this would guarantee no races and collisions. And also it feels like it would be simpler.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387660466", "createdAt": "2020-03-04T13:19:53Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {\n+      return new TempDir(dir, true);\n+    }\n+\n+    static final TempDir makeShared(final File dir) {\n+      return new TempDir(dir, false);\n+    }\n+\n+    public final File dir;\n+    private final boolean perProcess;\n+    private volatile boolean scheduledDelete = false;\n+\n+    TempDir(final File dir, final boolean perProcess) {\n+      this.dir = dir;\n+      this.perProcess = perProcess;\n+    }\n+\n+    void prepare() {\n+      // If shared, we're using java.io.tmpdir which should already exist\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, need to create directory for this process\n+      dir.mkdirs();\n+    }\n+\n+    void cleanup() {\n+      // If not per process, no directory clean-up\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, clean-up the directory -- if it is empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODAwNw=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNzAwNg==", "bodyText": "Yes, using createTempDirectory repeatedly might be a good option.  I'll look into how it works and see if switching seems reasonable.\nHowever, I would caution about assuming file system operations are cheap.  I'd actually like us to remove them if possible to avoid a source of variability during start-up.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387727006", "createdAt": "2020-03-04T15:08:09Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {\n+      return new TempDir(dir, true);\n+    }\n+\n+    static final TempDir makeShared(final File dir) {\n+      return new TempDir(dir, false);\n+    }\n+\n+    public final File dir;\n+    private final boolean perProcess;\n+    private volatile boolean scheduledDelete = false;\n+\n+    TempDir(final File dir, final boolean perProcess) {\n+      this.dir = dir;\n+      this.perProcess = perProcess;\n+    }\n+\n+    void prepare() {\n+      // If shared, we're using java.io.tmpdir which should already exist\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, need to create directory for this process\n+      dir.mkdirs();\n+    }\n+\n+    void cleanup() {\n+      // If not per process, no directory clean-up\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, clean-up the directory -- if it is empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODAwNw=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MjY4Nw==", "bodyText": "Switched to createTempDirectory per injection as discussed outside GitHub", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387952687", "createdAt": "2020-03-04T21:45:09Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {\n+      return new TempDir(dir, true);\n+    }\n+\n+    static final TempDir makeShared(final File dir) {\n+      return new TempDir(dir, false);\n+    }\n+\n+    public final File dir;\n+    private final boolean perProcess;\n+    private volatile boolean scheduledDelete = false;\n+\n+    TempDir(final File dir, final boolean perProcess) {\n+      this.dir = dir;\n+      this.perProcess = perProcess;\n+    }\n+\n+    void prepare() {\n+      // If shared, we're using java.io.tmpdir which should already exist\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, need to create directory for this process\n+      dir.mkdirs();\n+    }\n+\n+    void cleanup() {\n+      // If not per process, no directory clean-up\n+      if (!perProcess) {\n+        return;\n+      }\n+\n+      // If per process, clean-up the directory -- if it is empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODAwNw=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQ3MzIyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowMDoyNlrOFxYInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjowMDoyNlrOFxYInw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxOTk2Nw==", "bodyText": "As a further level of defense, we could do couple things here.\nThe ClassInjector internally constructs a RandomString which in turn uses a Random.\nFrom inspection, two threads injecting at the same time are unlikely to conflict because the Random objects should have different seeds.\nJava seeds Random objects not just with time, but also with another value that is changed for each Random object created.\nIf wanted to provide a stronger guarantee, we could reuse the UsingInstrumentation object from injection to the next which would also reuse the underlying RandomString and Random objects.  However, before doing that, we need to double check that all the classes involved are thread-safe.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387319967", "createdAt": "2020-03-03T22:00:26Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -141,6 +147,25 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n     return builder;\n   }\n \n+  private Map<String, Class<?>> injectBootstrapClassLoader(\n+      final Map<String, byte[]> classnameToBytes) {\n+    TEMP_DIR.prepare();\n+    try {\n+      return ClassInjector.UsingInstrumentation.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTYyMzIzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1MzoxNlrOFxZl3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0Nzo1NVrOFx-1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MzgzNw==", "bodyText": "Why is it ok to run cleanup right after injecting the classes?  Does this assume the JVM now has the file open and deleting it will have no negative impact?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387343837", "createdAt": "2020-03-03T22:53:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -141,6 +147,25 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n     return builder;\n   }\n \n+  private Map<String, Class<?>> injectBootstrapClassLoader(\n+      final Map<String, byte[]> classnameToBytes) {\n+    TEMP_DIR.prepare();\n+    try {\n+      return ClassInjector.UsingInstrumentation.of(\n+              TEMP_DIR.dir,\n+              ClassInjector.UsingInstrumentation.Target.BOOTSTRAP,\n+              AgentInstaller.getInstrumentation())\n+          .injectRaw(classnameToBytes);\n+    } finally {\n+      TEMP_DIR.cleanup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxMDY0NQ==", "bodyText": "In part, I was modeling after what ByteBuddy is already doing.  It deletes the JAR immediately after using it.  I do think this is potentially a bit dangerous, but ByteBuddy immediately loads all the classes in the temporary JAR -- so it works.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387410645", "createdAt": "2020-03-04T02:07:56Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -141,6 +147,25 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n     return builder;\n   }\n \n+  private Map<String, Class<?>> injectBootstrapClassLoader(\n+      final Map<String, byte[]> classnameToBytes) {\n+    TEMP_DIR.prepare();\n+    try {\n+      return ClassInjector.UsingInstrumentation.of(\n+              TEMP_DIR.dir,\n+              ClassInjector.UsingInstrumentation.Target.BOOTSTRAP,\n+              AgentInstaller.getInstrumentation())\n+          .injectRaw(classnameToBytes);\n+    } finally {\n+      TEMP_DIR.cleanup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MzgzNw=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1NDA5Mg==", "bodyText": "Revised code still follows this approach but with a temp dir per injection", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387954092", "createdAt": "2020-03-04T21:47:55Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -141,6 +147,25 @@ public static HelperInjector forDynamicTypes(final Collection<DynamicType.Unload\n     return builder;\n   }\n \n+  private Map<String, Class<?>> injectBootstrapClassLoader(\n+      final Map<String, byte[]> classnameToBytes) {\n+    TEMP_DIR.prepare();\n+    try {\n+      return ClassInjector.UsingInstrumentation.of(\n+              TEMP_DIR.dir,\n+              ClassInjector.UsingInstrumentation.Target.BOOTSTRAP,\n+              AgentInstaller.getInstrumentation())\n+          .injectRaw(classnameToBytes);\n+    } finally {\n+      TEMP_DIR.cleanup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MzgzNw=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTYzMjYzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1NjoyOVrOFxZrOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0MjowOFrOFx-qvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NTIxMQ==", "bodyText": "Did you consider using java.io.File#createTempFile(...)?  I think that is supposed to guarantee a unique file.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387345211", "createdAt": "2020-03-03T22:56:29Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxMTAyNA==", "bodyText": "I suppose I could do that instead.  Although, it creates a file not a directory, so I'd then need to delete it which would create a different race.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387411024", "createdAt": "2020-03-04T02:09:46Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NTIxMQ=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MTI5NQ==", "bodyText": "Latest version uses createTempDirectory which was apparently added in Java 7.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387951295", "createdAt": "2020-03-04T21:42:08Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NTIxMQ=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTU3OTYzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1NDoyNlrOFxsGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1OTowNlrOFxwnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzExMA==", "bodyText": "is the a point in making statics final?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387647110", "createdAt": "2020-03-04T12:54:26Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyMTE1Ng==", "bodyText": "Strictly speaking no.\nI tend to think lots of overriding is confusing even for non-statics, so I tend to make things final by default.  Theoretically, there are some tiny perf benefits to making non-statics final, but my main reason is code hygiene.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387721156", "createdAt": "2020-03-04T14:59:06Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {\n+    File rootTempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+    rootTempDir.mkdir();\n+\n+    RandomString randString = new RandomString(16);\n+    for (int i = 0; i < 10; ++i) {\n+      String dirName = \"datadog-temp-jars-\" + randString.nextString();\n+      File processTempDir = new File(rootTempDir, dirName);\n+      if (!processTempDir.exists()) {\n+        return TempDir.makePerProcess(processTempDir);\n+      }\n+    }\n+    return TempDir.makeShared(rootTempDir);\n+  }\n+\n+  static final class TempDir {\n+    static final TempDir makePerProcess(final File dir) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzExMA=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTU4Mjk2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1NTozMlrOFxsIng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0Mjo1M1rOFx-sGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzY0Ng==", "bodyText": "Generates up to random names.\n\nmissing a number?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387647646", "createdAt": "2020-03-04T12:55:32Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NDg0OA==", "bodyText": "Yes, I have a tendency to leave out words.  I'll fix that.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387854848", "createdAt": "2020-03-04T18:33:14Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzY0Ng=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MTY0Mg==", "bodyText": "Since I switched to using createTempDirectory, I just deleted this comment.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387951642", "createdAt": "2020-03-04T21:42:53Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NzY0Ng=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYwNTk0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowMjoxMlrOFxsWug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0ODoyOVrOFx-2ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTI1OA==", "bodyText": "Wouldn't it make sense to generate TMP name right before creating a dir - not at start up and then creating a dir potentially quite a bit later?", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387651258", "createdAt": "2020-03-04T13:02:12Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMzcwNA==", "bodyText": "That would incur slightly more runtime overhead, but I could do that.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387703704", "createdAt": "2020-03-04T14:32:46Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTI1OA=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NTY0Ng==", "bodyText": "After some discussion outside GitHub, we identified a race.\nSo we need to either remove the proactive clean-up or create a temp dir per injection.\nI think I'm going to do the later.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387855646", "createdAt": "2020-03-04T18:34:37Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTI1OA=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1NDM3MQ==", "bodyText": "Done -- using temp dir per injection", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387954371", "createdAt": "2020-03-04T21:48:29Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -25,14 +25,19 @@\n import net.bytebuddy.dynamic.DynamicType;\n import net.bytebuddy.dynamic.loading.ClassInjector;\n import net.bytebuddy.utility.JavaModule;\n+import net.bytebuddy.utility.RandomString;\n \n /** Injects instrumentation helper classes into the user's classloader. */\n @Slf4j\n public class HelperInjector implements Transformer {\n+  private static final TempDir TEMP_DIR = computeTempDir();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTI1OA=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTY1NTQ2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzoxNjo1MlrOFxs0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo0MzozMFrOFx-tOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1ODg4Ng==", "bodyText": "Have you considered using java.nio.file.Files#createTempDirectory(java.nio.file.Path, java.lang.String, java.nio.file.attribute.FileAttribute<?>...) instead? Looks like it's part of jdk since java7, does pretty much similar thing and doesn't require reimplementing...", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387658886", "createdAt": "2020-03-04T13:16:52Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMjk1NA==", "bodyText": "No, I'll take a look it.  Mostly, I was modeling after ByteBuddy.\nI'm also not entirely sure I want createTempDirectory, since I'd prefer to lazily create the dir, destroy it, and recreate the dir.", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387702954", "createdAt": "2020-03-04T14:31:34Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1ODg4Ng=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwNTY1MA==", "bodyText": "You can create dir right before you need it - you do not have to do this in static call... :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387705650", "createdAt": "2020-03-04T14:35:43Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1ODg4Ng=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1MTkzMQ==", "bodyText": "Switch to using createTempDirectory as suggested", "url": "https://github.com/DataDog/dd-trace-java/pull/1285#discussion_r387951931", "createdAt": "2020-03-04T21:43:30Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -162,4 +187,82 @@ private void ensureModuleCanReadHelperModules(final JavaModule target) {\n       }\n     }\n   }\n+\n+  /*\n+   * Tries to temp file naming collisions by creating a unique directory per\n+   * process.  Generates up to random names.  If a no file exists with a\n+   * generated name, settles on using that name.  If name can be found falls\n+   * back using java.io.tmpdir directly.\n+   */\n+  private static final TempDir computeTempDir() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1ODg4Ng=="}, "originalCommit": {"oid": "4ad51dd9fa91c4d306be3d581132456c03b92933"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 369, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}