{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNjU3NTM3", "number": 1363, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjowNDo1N1rODxSpBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1NjoxNVrODxjDHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDEyMjI4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/exception-profiling.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjowNDo1N1rOGErYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0MTowMlrOGFKoVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODI2MQ==", "bodyText": "This tends to screw up the bytecode level - when you check the compiled classes in non-java11 folder you will see that they get compiled to Java 8 level bytecode (version 52.0). At least this happens when I build it locally.", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407558261", "createdAt": "2020-04-13T16:04:57Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/exception-profiling.gradle", "diffHunk": "@@ -24,6 +24,8 @@ targetCompatibility = JavaVersion.VERSION_1_7\n \n // Must use Java 11 to build JFR enabled code - there is no JFR in OpenJDK 8 (revisit once JFR in Java 8 is available)\n [compileMain_java11Java, compileTestJava].each {\n+  sourceCompatibility = JavaVersion.VERSION_1_8\n+  targetCompatibility = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDIyOA==", "bodyText": "Looks like we need source set defined for that to work properly - should be fixed now", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408070228", "createdAt": "2020-04-14T11:41:02Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/exception-profiling.gradle", "diffHunk": "@@ -24,6 +24,8 @@ targetCompatibility = JavaVersion.VERSION_1_7\n \n // Must use Java 11 to build JFR enabled code - there is no JFR in OpenJDK 8 (revisit once JFR in Java 8 is available)\n [compileMain_java11Java, compileTestJava].each {\n+  sourceCompatibility = JavaVersion.VERSION_1_8\n+  targetCompatibility = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODI2MQ=="}, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDEyMzIyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionProfiling.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjowNToxNlrOGErZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxMzowOFrOGFJxnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODQyOQ==", "bodyText": "Nit: This is unnecessary. Since Java 8 the effectively immutable variables are treated as such without the necessity of declaring them final. But I guess this is done by the auto-formatter plugin ...", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407558429", "createdAt": "2020-04-13T16:05:16Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionProfiling.java", "diffHunk": "@@ -36,7 +35,7 @@ public ExceptionSampleEvent process(final Exception e) {\n     // always record the exception in histogram\n     final boolean firstHit = histogram.record(e);\n \n-    boolean sampled = sampler.sample();\n+    final boolean sampled = sampler.sample();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NjIyMQ==", "bodyText": "Yeah, this is done by autoformatting", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408056221", "createdAt": "2020-04-14T11:13:08Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionProfiling.java", "diffHunk": "@@ -36,7 +35,7 @@ public ExceptionSampleEvent process(final Exception e) {\n     // always record the exception in histogram\n     final boolean firstHit = histogram.record(e);\n \n-    boolean sampled = sampler.sample();\n+    final boolean sampled = sampler.sample();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODQyOQ=="}, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDEyNTY4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjowNTo1OVrOGErarA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxNDoxOFrOGFJ0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODgyOA==", "bodyText": "Did the auto-formatter do this as well? It is not really conventional to have one-liner javadoc.", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407558828", "createdAt": "2020-04-13T16:05:59Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "diffHunk": "@@ -17,28 +17,42 @@\n   @Label(\"Exception message\")\n   private final String message;\n \n-  /**\n-   * JFR may truncate the stack trace - so store original length as well.\n-   */\n+  /** JFR may truncate the stack trace - so store original length as well. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1Njg4NA==", "bodyText": "Yeah, I'm not doing this manually", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408056884", "createdAt": "2020-04-14T11:14:18Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "diffHunk": "@@ -17,28 +17,42 @@\n   @Label(\"Exception message\")\n   private final String message;\n \n-  /**\n-   * JFR may truncate the stack trace - so store original length as well.\n-   */\n+  /** JFR may truncate the stack trace - so store original length as well. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU1ODgyOA=="}, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDE0OTg1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoxMzowNVrOGErpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0NTozMFrOGFKxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MjY0Mw==", "bodyText": "I am not really convinced this should be here. There can be a chain of causes - why are we capturing just the first one? There are certainly situations when only 3rd+ cause starts to be really interesting. If we want to capture all the causes down to the root we would need to somehow fit them into one string, which could become quite long :/\nIMO, we should think about all the consequences before we commit to providing this info.", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407562643", "createdAt": "2020-04-13T16:13:05Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "diffHunk": "@@ -17,28 +17,42 @@\n   @Label(\"Exception message\")\n   private final String message;\n \n-  /**\n-   * JFR may truncate the stack trace - so store original length as well.\n-   */\n+  /** JFR may truncate the stack trace - so store original length as well. */\n   @Label(\"Exception stackdepth\")\n   private final int stackDepth;\n \n+  @Label(\"Cause type\")\n+  private final String causeType;\n+\n+  @Label(\"Cause message\")\n+  private final String causeMessage;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MjYyMQ==", "bodyText": "removed", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408072621", "createdAt": "2020-04-14T11:45:30Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/ExceptionSampleEvent.java", "diffHunk": "@@ -17,28 +17,42 @@\n   @Label(\"Exception message\")\n   private final String message;\n \n-  /**\n-   * JFR may truncate the stack trace - so store original length as well.\n-   */\n+  /** JFR may truncate the stack trace - so store original length as well. */\n   @Label(\"Exception stackdepth\")\n   private final int stackDepth;\n \n+  @Label(\"Cause type\")\n+  private final String causeType;\n+\n+  @Label(\"Cause message\")\n+  private final String causeMessage;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2MjY0Mw=="}, "originalCommit": {"oid": "556e96e1e5c649d2a854e89eb84e951de4750eae"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcyMTQ2OnYy", "diffSide": "RIGHT", "path": "dd-trace-api/dd-trace-api.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMDo1NVrOGE6wOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMDo1NVrOGE6wOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMDEwNA==", "bodyText": "Note: we would have to resolve this somehow before main PR lands, but I think this PR can be merged regardless - the same problem already existed in main PR, we just didn't see it due to other failures", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407810104", "createdAt": "2020-04-14T01:20:55Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/dd-trace-api.gradle", "diffHunk": "@@ -15,5 +15,10 @@ excludedClassesCoverage += [\n description = 'dd-trace-api'\n dependencies {\n   compile deps.slf4j\n+\n+  // FIXME: this essentially makes thread-utils part of our 'public api'\n+  // - we should move/rename things around to make this less prone to accidental public use since this is a utility class\n+  compile project(':utils:thread-utils')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f401865918f86b9dc57e66d21cc19f17373a691"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjc3NDg5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo0Nzo0NlrOGFEdlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo0Nzo0NlrOGFEdlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2OTE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * for compensate for too rapid changes in the incoming events rate and maintain the target average\n          \n          \n            \n             * to compensate for too rapid changes in the incoming events rate and maintain the target average", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407969172", "createdAt": "2020-04-14T08:47:46Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/com/datadog/profiling/exceptions/StreamingSampler.java", "diffHunk": "@@ -16,40 +13,31 @@\n  * A streaming (non-remembering) sampler.\n  *\n  * <p>The sampler attempts to generate at most N samples per fixed time window in randomized\n- * fashion. For this it divides the timeline into 'profiling windows' of constant length/duration.\n- * Each profiling window targets a constant number of samples which are scattered randomly (uniform distribution)\n- * throughout the window duration and once the window is over the real stats of incoming events and the number of\n- * gathered samples is used to recompute the target probability to use in the following window.\n- * </p>\n- * <p>\n- * This will guarantee, if the windows are not excessively large, that the sampler will be able to adjust\n- * to the changes in the rate of incoming events.\n- * </p>\n- * <p>\n- * However, there might so rapid changes in incoming events rate that we will optimistically use all allowed samples\n- * well before the current window has elapsed or, on the other end of the spectrum, there will be to few incoming events\n- * and the sampler will not be able to generate the target number of samples.\n- * </p>\n- * <p>\n- * To smooth out these hicups the sampler maintains an under/over-sampling budget which can be used for compensate\n- * for too rapid changes in the incoming events rate and maintain the target average number of samples per window.\n- * </p>\n+ * fashion. For this it divides the timeline into 'sampling windows' of constant duration. Each\n+ * sampling window targets a constant number of samples which are scattered randomly (uniform\n+ * distribution) throughout the window duration and once the window is over the real stats of\n+ * incoming events and the number of gathered samples is used to recompute the target probability to\n+ * use in the following window.\n+ *\n+ * <p>This will guarantee, if the windows are not excessively large, that the sampler will be able\n+ * to adjust to the changes in the rate of incoming events.\n+ *\n+ * <p>However, there might so rapid changes in incoming events rate that we will optimistically use\n+ * all allowed samples well before the current window has elapsed or, on the other end of the\n+ * spectrum, there will be to few incoming events and the sampler will not be able to generate the\n+ * target number of samples.\n+ *\n+ * <p>To smooth out these hicups the sampler maintains an under-sampling budget which can be used\n+ * for compensate for too rapid changes in the incoming events rate and maintain the target average", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a3241988dd541e3803387a87c8ce49e448711f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjgwMDI5OnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1NDowMFrOGFEtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxNjowOFrOGFJ3yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MzE2MA==", "bodyText": "Ok, is it just me or this reformatting stuff of code which is not affected by any other changes looks crazy?", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407973160", "createdAt": "2020-04-14T08:54:00Z", "author": {"login": "jbachorik"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3,24 +3,26 @@ def spockGroovyVer = groovyVer.replaceAll(/\\.\\d+$/, '')\n \n ext {\n   versions = [\n-    opentracing: '0.32.0',\n+    opentracing   : '0.32.0',\n \n-    slf4j      : \"1.7.29\",\n-    guava      : \"20.0\", // Last version to support Java 7\n-    okhttp     : \"3.12.8\", // 3.12.x is last version to support Java7)\n+    slf4j         : \"1.7.29\",\n+    guava         : \"20.0\", // Last version to support Java 7\n+    okhttp        : \"3.12.8\", // 3.12.x is last version to support Java7)\n \n-    spock      : \"1.3-groovy-$spockGroovyVer\",\n-    groovy     : groovyVer,\n-    junit5     : \"5.5.2\",\n-    logback    : \"1.2.3\",\n-    lombok     : \"1.18.10\",\n-    bytebuddy  : \"1.10.6\",\n-    scala      : \"2.11.12\",  // Last version to support Java 7 (2.12+ require Java 8+)\n-    kotlin     : \"1.3.61\",\n-    coroutines : \"1.3.0\",\n-    commons    : \"3.2\",\n+    spock         : \"1.3-groovy-$spockGroovyVer\",\n+    groovy        : groovyVer,\n+    junit5        : \"5.5.2\",\n+    logback       : \"1.2.3\",\n+    lombok        : \"1.18.10\",\n+    bytebuddy     : \"1.10.6\",\n+    scala         : \"2.11.12\",  // Last version to support Java 7 (2.12+ require Java 8+)\n+    kotlin        : \"1.3.61\",\n+    coroutines    : \"1.3.0\",\n+    commons       : \"3.2\",\n+    mockito       : '3.3.3',\n+    testcontainers: '1.12.2',\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a3241988dd541e3803387a87c8ce49e448711f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1NzgwMQ==", "bodyText": "Having colons lined up like this is apparently a style...", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408057801", "createdAt": "2020-04-14T11:16:08Z", "author": {"login": "mar-kolya"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -3,24 +3,26 @@ def spockGroovyVer = groovyVer.replaceAll(/\\.\\d+$/, '')\n \n ext {\n   versions = [\n-    opentracing: '0.32.0',\n+    opentracing   : '0.32.0',\n \n-    slf4j      : \"1.7.29\",\n-    guava      : \"20.0\", // Last version to support Java 7\n-    okhttp     : \"3.12.8\", // 3.12.x is last version to support Java7)\n+    slf4j         : \"1.7.29\",\n+    guava         : \"20.0\", // Last version to support Java 7\n+    okhttp        : \"3.12.8\", // 3.12.x is last version to support Java7)\n \n-    spock      : \"1.3-groovy-$spockGroovyVer\",\n-    groovy     : groovyVer,\n-    junit5     : \"5.5.2\",\n-    logback    : \"1.2.3\",\n-    lombok     : \"1.18.10\",\n-    bytebuddy  : \"1.10.6\",\n-    scala      : \"2.11.12\",  // Last version to support Java 7 (2.12+ require Java 8+)\n-    kotlin     : \"1.3.61\",\n-    coroutines : \"1.3.0\",\n-    commons    : \"3.2\",\n+    spock         : \"1.3-groovy-$spockGroovyVer\",\n+    groovy        : groovyVer,\n+    junit5        : \"5.5.2\",\n+    logback       : \"1.2.3\",\n+    lombok        : \"1.18.10\",\n+    bytebuddy     : \"1.10.6\",\n+    scala         : \"2.11.12\",  // Last version to support Java 7 (2.12+ require Java 8+)\n+    kotlin        : \"1.3.61\",\n+    coroutines    : \"1.3.0\",\n+    commons       : \"3.2\",\n+    mockito       : '3.3.3',\n+    testcontainers: '1.12.2',\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MzE2MA=="}, "originalCommit": {"oid": "47a3241988dd541e3803387a87c8ce49e448711f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjgxMDUzOnYy", "diffSide": "RIGHT", "path": "dd-trace-api/dd-trace-api.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1NjoxNVrOGFEzQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToxODoxMlrOGFJ75w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NDcyMg==", "bodyText": "Why does this dependency needs to be moved here from dd-trace-ot?  Also, I do not think the exception sampler PR should fix this issue since it is not introduced here. Let's try to separate the feature development from general cleanup tasks.", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r407974722", "createdAt": "2020-04-14T08:56:15Z", "author": {"login": "jbachorik"}, "path": "dd-trace-api/dd-trace-api.gradle", "diffHunk": "@@ -15,5 +15,10 @@ excludedClassesCoverage += [\n description = 'dd-trace-api'\n dependencies {\n   compile deps.slf4j\n+\n+  // FIXME: this essentially makes thread-utils part of our 'public api'\n+  // - we should move/rename things around to make this less prone to accidental public use since this is a utility class\n+  compile project(':utils:thread-utils')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47a3241988dd541e3803387a87c8ce49e448711f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA1ODg1NQ==", "bodyText": "I think build fails without this hack because so far we have never used thread utils for integrations. But this as is is not good for other reasons.", "url": "https://github.com/DataDog/dd-trace-java/pull/1363#discussion_r408058855", "createdAt": "2020-04-14T11:18:12Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/dd-trace-api.gradle", "diffHunk": "@@ -15,5 +15,10 @@ excludedClassesCoverage += [\n description = 'dd-trace-api'\n dependencies {\n   compile deps.slf4j\n+\n+  // FIXME: this essentially makes thread-utils part of our 'public api'\n+  // - we should move/rename things around to make this less prone to accidental public use since this is a utility class\n+  compile project(':utils:thread-utils')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NDcyMg=="}, "originalCommit": {"oid": "47a3241988dd541e3803387a87c8ce49e448711f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 456, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}