{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NjUxMjE5", "number": 2128, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyMTo0MlrOE-m75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyMTo0MlrOE-m75A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDg1MDkyOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyMTo0MlrOH72sSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowODo1MFrOH8E83A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNDEwNQ==", "bodyText": "I can't stand the Google formatting", "url": "https://github.com/DataDog/dd-trace-java/pull/2128#discussion_r532524105", "createdAt": "2020-11-30T11:21:42Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -244,7 +246,28 @@ private CoreTracer(\n     this.writer.start();\n \n     metricsAggregator = createMetricsAggregator(config);\n-    metricsAggregator.start();\n+    // schedule to start after geometrically distributed number of seconds expressed in\n+    // milliseconds, with p = 0.25, meaning the probability that the aggregator will not\n+    // have started by the nth second is 0.25(0.75)^n-1 (or a 1% chance of not having\n+    // started within 10 seconds, where a cap is applied) This avoids a fleet of traced\n+    // applications starting at the same time and sending metrics in sync\n+    long delayMillis =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bc8215605e26d168a6d36c32a94594538c29d1c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUzMTEyMg==", "bodyText": "\ud83d\udc4d for the comment in the code and \ud83d\udcaf for disliking the auto formatting...", "url": "https://github.com/DataDog/dd-trace-java/pull/2128#discussion_r532531122", "createdAt": "2020-11-30T11:34:26Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -244,7 +246,28 @@ private CoreTracer(\n     this.writer.start();\n \n     metricsAggregator = createMetricsAggregator(config);\n-    metricsAggregator.start();\n+    // schedule to start after geometrically distributed number of seconds expressed in\n+    // milliseconds, with p = 0.25, meaning the probability that the aggregator will not\n+    // have started by the nth second is 0.25(0.75)^n-1 (or a 1% chance of not having\n+    // started within 10 seconds, where a cap is applied) This avoids a fleet of traced\n+    // applications starting at the same time and sending metrics in sync\n+    long delayMillis =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNDEwNQ=="}, "originalCommit": {"oid": "2bc8215605e26d168a6d36c32a94594538c29d1c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjQxOQ==", "bodyText": "This may not be your primary issue, but if you wrap these kind of comments in /** ... */ style comments, then google format does a bit nicer job with it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2128#discussion_r532712419", "createdAt": "2020-11-30T16:08:21Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -244,7 +246,28 @@ private CoreTracer(\n     this.writer.start();\n \n     metricsAggregator = createMetricsAggregator(config);\n-    metricsAggregator.start();\n+    // schedule to start after geometrically distributed number of seconds expressed in\n+    // milliseconds, with p = 0.25, meaning the probability that the aggregator will not\n+    // have started by the nth second is 0.25(0.75)^n-1 (or a 1% chance of not having\n+    // started within 10 seconds, where a cap is applied) This avoids a fleet of traced\n+    // applications starting at the same time and sending metrics in sync\n+    long delayMillis =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNDEwNQ=="}, "originalCommit": {"oid": "2bc8215605e26d168a6d36c32a94594538c29d1c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczNTkyMA==", "bodyText": "the problem is the formatting of the code, not the comment", "url": "https://github.com/DataDog/dd-trace-java/pull/2128#discussion_r532735920", "createdAt": "2020-11-30T16:39:31Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -244,7 +246,28 @@ private CoreTracer(\n     this.writer.start();\n \n     metricsAggregator = createMetricsAggregator(config);\n-    metricsAggregator.start();\n+    // schedule to start after geometrically distributed number of seconds expressed in\n+    // milliseconds, with p = 0.25, meaning the probability that the aggregator will not\n+    // have started by the nth second is 0.25(0.75)^n-1 (or a 1% chance of not having\n+    // started within 10 seconds, where a cap is applied) This avoids a fleet of traced\n+    // applications starting at the same time and sending metrics in sync\n+    long delayMillis =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNDEwNQ=="}, "originalCommit": {"oid": "2bc8215605e26d168a6d36c32a94594538c29d1c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NzcyNA==", "bodyText": "Ah, ok... I see below.  Yes that is pretty ridiculous.", "url": "https://github.com/DataDog/dd-trace-java/pull/2128#discussion_r532757724", "createdAt": "2020-11-30T17:08:50Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -244,7 +246,28 @@ private CoreTracer(\n     this.writer.start();\n \n     metricsAggregator = createMetricsAggregator(config);\n-    metricsAggregator.start();\n+    // schedule to start after geometrically distributed number of seconds expressed in\n+    // milliseconds, with p = 0.25, meaning the probability that the aggregator will not\n+    // have started by the nth second is 0.25(0.75)^n-1 (or a 1% chance of not having\n+    // started within 10 seconds, where a cap is applied) This avoids a fleet of traced\n+    // applications starting at the same time and sending metrics in sync\n+    long delayMillis =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNDEwNQ=="}, "originalCommit": {"oid": "2bc8215605e26d168a6d36c32a94594538c29d1c"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4634, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}