{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTg1MTY1", "number": 1469, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNTowMlrOD9e-6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNjoxMlrOD9fAhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk3MzU0OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNTowMlrOGXAcLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODo0MzozOFrOGXWDVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NzY0Ng==", "bodyText": "Where does the need for this to be a collection originate from? Can we make do with this being a long[] everywhere given that this won't be public API (won't it?)", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r426777646", "createdAt": "2020-05-18T17:15:02Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -30,4 +26,24 @@\n     }\n     return stackTraces;\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d3884aa6ebf180268a451bea4e60d266dbc848"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMTI4OQ==", "bodyText": "The underlying call is indeed a long[] for the JMX call, but in the end we may change for other thing. So I won't to lock the api to an implementation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r427111289", "createdAt": "2020-05-19T08:12:00Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -30,4 +26,24 @@\n     }\n     return stackTraces;\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NzY0Ng=="}, "originalCommit": {"oid": "f8d3884aa6ebf180268a451bea4e60d266dbc848"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMTczNQ==", "bodyText": "Does the other thing take a List<Long> and return a List<ThreadInfo>? The wrapping here doesn't really abstract the underlying call.", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r427131735", "createdAt": "2020-05-19T08:43:38Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -30,4 +26,24 @@\n     }\n     return stackTraces;\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NzY0Ng=="}, "originalCommit": {"oid": "f8d3884aa6ebf180268a451bea4e60d266dbc848"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk3NzY2OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxNjoxMlrOGXAepw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoxMjoyM1rOGXU0Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODI3OQ==", "bodyText": "Who consumes this API? Is there a reason they can't consume ThreadInfo[] given that's what we're wrapping elsewhere?", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r426778279", "createdAt": "2020-05-18T17:16:12Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "diffHunk": "@@ -9,4 +10,9 @@\n   public List<StackTraceElement[]> getStackTrace(List<Long> threadIds) {\n     return Collections.emptyList();\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8d3884aa6ebf180268a451bea4e60d266dbc848"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMTUyMw==", "bodyText": "same remark than above", "url": "https://github.com/DataDog/dd-trace-java/pull/1469#discussion_r427111523", "createdAt": "2020-05-19T08:12:23Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "diffHunk": "@@ -9,4 +10,9 @@\n   public List<StackTraceElement[]> getStackTrace(List<Long> threadIds) {\n     return Collections.emptyList();\n   }\n+\n+  @Override\n+  public List<ThreadInfo> getThreadInfo(List<Long> threadIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3ODI3OQ=="}, "originalCommit": {"oid": "f8d3884aa6ebf180268a451bea4e60d266dbc848"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 336, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}