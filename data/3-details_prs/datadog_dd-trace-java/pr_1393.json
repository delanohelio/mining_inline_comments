{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzY1NDQw", "number": 1393, "title": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\"", "bodyText": "This change introduces merging of explicitly defined span properties and properties defined in   \"dd.trace.global.tags\".\nI ) For every property  we have 3 levels of defining it:\n\ncreating tracer with configuration via API and with explicit Properties argument with specifying this exact property inside this argument ( https://github.com/DataDog/dd-trace-java/blob/master/dd-trace-api/src/main/java/datadog/trace/api/Config.java#L1384 )\njava system property\nlinux environment variable\njava property file\nWe take next one only if it's not defined the previous one. Eg. So we look into linux environment variables only\n\nII ) We have special container properties tags and global.tags which allow to aggregate other properties inside it.\n\ndd.tags(DD_TAGS) has precedence over dd.trace.global.tags. It will be merging of tags.\n\nIII ) The result service tag in span is set up by\n\nproperty(env variable) dd.service (DD_SERVICE) first.\nif dd.service (DD_SERVICE)  is not set the result service tag is set by  dd.service.name (DD_SERVICE_NAME)\nif neither of above is set, the result service tag is set by default integration name or just default name\nyou can't define service tag through tags", "createdAt": "2020-04-21T16:26:15Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1393", "merged": true, "mergeCommit": {"oid": "3808bbf2a5c73834343fd840694744d5aca9e9b2"}, "closed": true, "closedAt": "2020-04-28T15:55:14Z", "author": {"login": "lpriima"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ6xFpABqjMyNTgwMTUxNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccFn7dAFqTQwMTk1NDM1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cfd9226a2de8f903485312669ccb75eb89a0e63", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1cfd9226a2de8f903485312669ccb75eb89a0e63", "committedDate": "2020-04-21T16:22:35Z", "message": "tests set DD_VERSION independently"}, "afterCommit": {"oid": "48402c44810a22a7b926b6e8b666df6cb03e7ce4", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/48402c44810a22a7b926b6e8b666df6cb03e7ce4", "committedDate": "2020-04-21T21:41:52Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzI1OTI0", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#pullrequestreview-397725924", "createdAt": "2020-04-21T22:41:12Z", "commit": {"oid": "48402c44810a22a7b926b6e8b666df6cb03e7ce4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0MToxMlrOGJbeXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjo0MToxMlrOGJbeXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0MDUxMA==", "bodyText": "weird formatting...", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r412540510", "createdAt": "2020-04-21T22:41:12Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -375,11 +375,26 @@ private String profilingProxyPasswordMasker() {\n         getBooleanSettingFromEnvironment(TRACE_RESOLVER_ENABLED, DEFAULT_TRACE_RESOLVER_ENABLED);\n     serviceMapping = getMapSettingFromEnvironment(SERVICE_MAPPING, null);\n \n-    final Map<String, String> tagsPreMap = new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, ENV);\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, VERSION);\n-    tags = Collections.unmodifiableMap(tagsPreMap);\n-    globalTags = getMapSettingFromEnvironment(GLOBAL_TAGS, null);\n+    {\n+      final Map<String, String> tagsPreMap =\n+          new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n+      if (tagsPreMap != null && !tagsPreMap.isEmpty()) {\n+        // we only populate this tags if we use 'dd.tags'. If we don't use it: we populate this tags\n+        // to\n+        // 'dd.trace.global.tags' and globalTags field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48402c44810a22a7b926b6e8b666df6cb03e7ce4"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48402c44810a22a7b926b6e8b666df6cb03e7ce4", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/48402c44810a22a7b926b6e8b666df6cb03e7ce4", "committedDate": "2020-04-21T21:41:52Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}, "afterCommit": {"oid": "5e66734796fc700349c96144fccc35d1961a8cb8", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5e66734796fc700349c96144fccc35d1961a8cb8", "committedDate": "2020-04-22T00:10:13Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e66734796fc700349c96144fccc35d1961a8cb8", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5e66734796fc700349c96144fccc35d1961a8cb8", "committedDate": "2020-04-22T00:10:13Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}, "afterCommit": {"oid": "d02ceb3d9446bdbc2fc883bc4fb77674d53245e5", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d02ceb3d9446bdbc2fc883bc4fb77674d53245e5", "committedDate": "2020-04-22T01:25:36Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d02ceb3d9446bdbc2fc883bc4fb77674d53245e5", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d02ceb3d9446bdbc2fc883bc4fb77674d53245e5", "committedDate": "2020-04-22T01:25:36Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}, "afterCommit": {"oid": "b82171f522bae86c5c428f37c9c86a463e11823e", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b82171f522bae86c5c428f37c9c86a463e11823e", "committedDate": "2020-04-22T06:12:02Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b82171f522bae86c5c428f37c9c86a463e11823e", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b82171f522bae86c5c428f37c9c86a463e11823e", "committedDate": "2020-04-22T06:12:02Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}, "afterCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "committedDate": "2020-04-22T07:13:37Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDE1ODk5", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#pullrequestreview-400015899", "createdAt": "2020-04-24T14:49:23Z", "commit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo0OToyM1rOGLbWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NTo0NVrOGLbpSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNTYzNg==", "bodyText": "Do you think it would simplify things to reduce the distinction between tags and global tags and combine them into a single map as soon as possible?  (End result being just a single tags field.)", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414635636", "createdAt": "2020-04-24T14:49:23Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -375,11 +376,20 @@ private String profilingProxyPasswordMasker() {\n         getBooleanSettingFromEnvironment(TRACE_RESOLVER_ENABLED, DEFAULT_TRACE_RESOLVER_ENABLED);\n     serviceMapping = getMapSettingFromEnvironment(SERVICE_MAPPING, null);\n \n-    final Map<String, String> tagsPreMap = new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, ENV);\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, VERSION);\n-    tags = Collections.unmodifiableMap(tagsPreMap);\n-    globalTags = getMapSettingFromEnvironment(GLOBAL_TAGS, null);\n+    {\n+      final Map<String, String> tagsPreMap = getMapSettingFromEnvironment(TAGS, null);\n+      if (tagsPreMap != null && !tagsPreMap.isEmpty()) {\n+        // we only populate this tags if we use 'dd.tags'. If we don't use it: we populate this tags\n+        // to 'dd.trace.global.tags' and globalTags field\n+        tags = getMapWithPropertiesDefinedByEnvironment(tagsPreMap, ENV, VERSION);\n+      } else {\n+        tags = Collections.emptyMap();\n+      }\n+    }\n+    globalTags =\n+        getMapWithPropertiesDefinedByEnvironment(\n+            getMapSettingFromEnvironment(GLOBAL_TAGS, null), ENV, VERSION);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQ1Ng==", "bodyText": "When you've implemented merging of the tags/global tags, this should also have b:2, right?", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414640456", "createdAt": "2020-04-24T14:55:45Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1142,22 +1144,27 @@ class ConfigTest extends DDSpecification {\n   def \"verify dd.tags overrides global tags in properties\"() {\n     setup:\n     def prop = new Properties()\n-    prop.setProperty(TAGS, \"a:1\")\n+    prop.setProperty(TAGS, \"a:1,env:us-west,version:42\")\n     prop.setProperty(GLOBAL_TAGS, \"b:2\")\n     prop.setProperty(SPAN_TAGS, \"c:3\")\n     prop.setProperty(JMX_TAGS, \"d:4\")\n     prop.setProperty(HEADER_TAGS, \"e:5\")\n     prop.setProperty(PROFILING_TAGS, \"f:6\")\n+    prop.setProperty(Config.ENV, \"eu-east\")\n+    prop.setProperty(Config.VERSION, \"43\")\n \n     when:\n     Config config = Config.get(prop)\n \n     then:\n-    config.mergedSpanTags == [a: \"1\", c: \"3\"]\n-    config.mergedJmxTags == [a: \"1\", d: \"4\", (RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName]\n+    config.mergedSpanTags == [a: \"1\", c: \"3\",  (Config.ENV) : \"eu-east\", (Config.VERSION) : \"43\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTcwMTI3", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#pullrequestreview-400170127", "createdAt": "2020-04-24T18:15:50Z", "commit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxNTo1MFrOGLjn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMzo0NFrOGLj6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MTE5Mw==", "bodyText": "+1 I think this idea makes sense too. We just need to be careful about the order of precedence for updating the single map.\nE.g.,\n\nLook for DD_ prefixed env var first for env/service/version.\nThen look at JMX flags.", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414771193", "createdAt": "2020-04-24T18:15:50Z", "author": {"login": "jdgumz"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -375,11 +376,20 @@ private String profilingProxyPasswordMasker() {\n         getBooleanSettingFromEnvironment(TRACE_RESOLVER_ENABLED, DEFAULT_TRACE_RESOLVER_ENABLED);\n     serviceMapping = getMapSettingFromEnvironment(SERVICE_MAPPING, null);\n \n-    final Map<String, String> tagsPreMap = new HashMap<>(getMapSettingFromEnvironment(TAGS, null));\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, ENV);\n-    addPropToMapIfDefinedByEnvironment(tagsPreMap, VERSION);\n-    tags = Collections.unmodifiableMap(tagsPreMap);\n-    globalTags = getMapSettingFromEnvironment(GLOBAL_TAGS, null);\n+    {\n+      final Map<String, String> tagsPreMap = getMapSettingFromEnvironment(TAGS, null);\n+      if (tagsPreMap != null && !tagsPreMap.isEmpty()) {\n+        // we only populate this tags if we use 'dd.tags'. If we don't use it: we populate this tags\n+        // to 'dd.trace.global.tags' and globalTags field\n+        tags = getMapWithPropertiesDefinedByEnvironment(tagsPreMap, ENV, VERSION);\n+      } else {\n+        tags = Collections.emptyMap();\n+      }\n+    }\n+    globalTags =\n+        getMapWithPropertiesDefinedByEnvironment(\n+            getMapSettingFromEnvironment(GLOBAL_TAGS, null), ENV, VERSION);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNTYzNg=="}, "originalCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MjUzNA==", "bodyText": "DD_SERVICE should not be ignored - it should have the highest precedence.", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414772534", "createdAt": "2020-04-24T18:18:09Z", "author": {"login": "jdgumz"}, "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1283,191 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"DD_SERVICE ignored when 'dd.service.name' java property is set; 'dd.service.name' overwrites DD_SERVICE_NAME\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA==", "bodyText": "I'm not sure I understand. Why are we using the service:service-tag-in-dd-trace-global-tags-java-property still? I think it'd be confusing to see a different service in the span metadata from the one that should be used (the value of DD_SERVICE).", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r414775850", "createdAt": "2020-04-24T18:23:44Z", "author": {"login": "jdgumz"}, "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1283,191 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"DD_SERVICE ignored when 'dd.service.name' java property is set; 'dd.service.name' overwrites DD_SERVICE_NAME\"() {\n+    setup:\n+    environmentVariables.set(DD_SERVICE_NAME_ENV,\"dd-service-name-env-var\")\n+    System.setProperty(PREFIX + SERVICE_NAME, \"dd-service-name-java-prop\")\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-name-java-prop\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n   }\n \n+  def \"DD_SERVICE ignored when 'DD_SERVICE_NAME' environment var is set\"() {\n+    setup:\n+    environmentVariables.set(DD_SERVICE_NAME_ENV,\"dd-service-name-env-var\")\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-name-env-var\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"dd.service overwrites DD_SERVICE\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-java-prop\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"set servicenaem by DD_SERVICE\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+    environmentVariables.set(DD_GLOBAL_TAGS_ENV, \"service:service-tag-in-env-var,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "originalPosition": 247}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8994a8b37bf78e59d342a44726981eca4aa0b71a", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8994a8b37bf78e59d342a44726981eca4aa0b71a", "committedDate": "2020-04-27T06:30:26Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/baae56954071f35ab1fb8f1e3844f7f8300ef2a6", "committedDate": "2020-04-22T07:13:37Z", "message": "merge DD_VERSION and DD_ENV with \"dd.trace.global.tags\""}, "afterCommit": {"oid": "f50a4871c55a0cee2e4596503e81e6088a26ce25", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f50a4871c55a0cee2e4596503e81e6088a26ce25", "committedDate": "2020-04-27T06:53:07Z", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bab0776f81603348332bab998a6a466f779fdfa", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2bab0776f81603348332bab998a6a466f779fdfa", "committedDate": "2020-04-27T06:55:07Z", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f50a4871c55a0cee2e4596503e81e6088a26ce25", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f50a4871c55a0cee2e4596503e81e6088a26ce25", "committedDate": "2020-04-27T06:53:07Z", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS"}, "afterCommit": {"oid": "2bab0776f81603348332bab998a6a466f779fdfa", "author": {"user": {"login": "lpriima", "name": "Lev"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2bab0776f81603348332bab998a6a466f779fdfa", "committedDate": "2020-04-27T06:55:07Z", "message": "DD_SERVICE priority over DD_SERVICE_NAME; merge TAGS and GLOBAL_TAGS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjAwMjY0", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#pullrequestreview-401200264", "createdAt": "2020-04-27T18:07:12Z", "commit": {"oid": "2bab0776f81603348332bab998a6a466f779fdfa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowNzo1OVrOGMw0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODoyNTo0NVrOGMxkeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNjAzMg==", "bodyText": "I'm not sure I understand this case. If we have a service somewhere (global tags, or even DD_SERVICE) shouldn't that be used?", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416036032", "createdAt": "2020-04-27T18:07:59Z", "author": {"login": "jdgumz"}, "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1282,190 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bab0776f81603348332bab998a6a466f779fdfa"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0NDc1OQ==", "bodyText": "Gotcha. One other question: it seems like DD_SERVICE overrides the value of service even when there's a service tag in the global system property. This seems inconsistent with dd.service as a system property overriding the env var DD_SERVICE? It sounded like we wanted to maintain the highest precedence for system properties?", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416044759", "createdAt": "2020-04-27T18:20:54Z", "author": {"login": "jdgumz"}, "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1283,191 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"DD_SERVICE ignored when 'dd.service.name' java property is set; 'dd.service.name' overwrites DD_SERVICE_NAME\"() {\n+    setup:\n+    environmentVariables.set(DD_SERVICE_NAME_ENV,\"dd-service-name-env-var\")\n+    System.setProperty(PREFIX + SERVICE_NAME, \"dd-service-name-java-prop\")\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-name-java-prop\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n   }\n \n+  def \"DD_SERVICE ignored when 'DD_SERVICE_NAME' environment var is set\"() {\n+    setup:\n+    environmentVariables.set(DD_SERVICE_NAME_ENV,\"dd-service-name-env-var\")\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-name-env-var\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"dd.service overwrites DD_SERVICE\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + SERVICE, \"dd-service-java-prop\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-java-prop\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n+  }\n+\n+  def \"set servicenaem by DD_SERVICE\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+    environmentVariables.set(DD_GLOBAL_TAGS_ENV, \"service:service-tag-in-env-var,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTg1MA=="}, "originalCommit": {"oid": "baae56954071f35ab1fb8f1e3844f7f8300ef2a6"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA0ODI0OA==", "bodyText": "Wait - don't we have it set up to allow DD_ENV and DD_VERSION to override dd.trace.global.tags?\nI'm guessing this is a different case because dd.service already existed and generally system properties take the highest precedent?", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#discussion_r416048248", "createdAt": "2020-04-27T18:25:45Z", "author": {"login": "jdgumz"}, "path": "dd-trace-api/src/test/groovy/datadog/trace/api/ConfigTest.groovy", "diffHunk": "@@ -1276,11 +1282,190 @@ class ConfigTest extends DDSpecification {\n     config.mergedSpanTags == [\"env\": \"test_env\", \"version\": \"1.2.3\"]\n   }\n \n-  def \"propertyNameToEnvironmentVariableName unit test\"() {\n+  def \"explicit DD_ENV and DD_VERSION overwrites dd.trace.global.tags\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    environmentVariables.set(DD_ENV_ENV, \"production-us\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS,\n+      \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"production-us\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge env from dd.trace.global.tags and version from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"1.2.3\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:us-barista-test,other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"1.2.3\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.mergedSpanTags == [\"version\": \"3.2.1\", \"env\": \"us-barista-test\", \"other_tag\":\"test\"]\n+  }\n+\n+  def \"merge version from dd.trace.global.tags DD_SERVICE and env from DD_VERSION\"() {\n+    setup:\n+    environmentVariables.set(\"DD_SERVICE\", \"dd-service-env-var\")\n+    environmentVariables.set(DD_ENV_ENV, \"us-barista-test\")\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"other_tag:test,version:3.2.1,service.version:my-svc-vers\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    config.serviceName == \"dd-service-env-var\"\n+    config.mergedSpanTags == [version: \"3.2.1\", \"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): 'dd-service-env-var',\n+                             version: \"3.2.1\",\"service.version\" : \"my-svc-vers\", \"env\": \"us-barista-test\", other_tag:\"test\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.env exclusively by java properties and without DD_ENV\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"env:production\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [\"env\": \"production\"]\n+  }\n+\n+  def \"set of dd.trace.global.tags.version exclusively by java properties\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"version:42\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    //check that env wasn't set:\n+    System.getenv(DD_ENV_ENV) == null\n+    System.getenv(DD_VERSION_ENV) == null\n+    //actual guard:\n+    config.mergedSpanTags == [(Config.VERSION) : \"42\"]\n+  }\n+\n+  def \"set of version exclusively by DD_VERSION and without DD_ENV \"() {\n+    setup:\n+    environmentVariables.set(DD_VERSION_ENV, \"3.2.1\")\n+\n+    when:\n+    Config config = new Config()\n+\n+    then:\n+    System.getenv(DD_ENV_ENV) == null\n+    config.mergedSpanTags.get(\"env\") == null\n+    config.mergedSpanTags == [(Config.VERSION): \"3.2.1\"]\n+  }\n+\n+  // service name precedence checks\n+  def \"default service name exist\"() {\n     expect:\n-    Config.propertyNameToEnvironmentVariableName(Config.SERVICE) == \"DD_SERVICE\"\n+    Config.get().serviceName == DEFAULT_SERVICE_NAME\n+  }\n+\n+  def \"default service name is not affected by tags, nor env variables\"() {\n+    setup:\n+    System.setProperty(PREFIX + GLOBAL_TAGS, \"service:service-tag-in-dd-trace-global-tags-java-property,service.version:my-svc-vers\")\n+\n+    when:\n+    def config = new Config()\n+\n+    then:\n+    config.serviceName == DEFAULT_SERVICE_NAME\n+    config.mergedSpanTags == [service:'service-tag-in-dd-trace-global-tags-java-property','service.version' : 'my-svc-vers']\n+    config.mergedJmxTags == [(RUNTIME_ID_TAG): config.getRuntimeId(), (SERVICE_TAG): config.serviceName,\n+                             'service.version' : 'my-svc-vers']\n   }\n \n+  def \"DD_SERVICE precedence over 'dd.service.name' java property is set; 'dd.service' overwrites DD_SERVICE\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bab0776f81603348332bab998a6a466f779fdfa"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTU0MzU5", "url": "https://github.com/DataDog/dd-trace-java/pull/1393#pullrequestreview-401954359", "createdAt": "2020-04-28T15:29:06Z", "commit": {"oid": "2bab0776f81603348332bab998a6a466f779fdfa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2430, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}