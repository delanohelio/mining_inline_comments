{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTYzMzY2", "number": 1659, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1NDo1NFrOEMjUZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMTo0M1rOEM72PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTk3MDI5OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1NDo1NFrOGuunRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo1OTozOFrOG3fZiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTM5Ng==", "bodyText": "Nit: Isn't this functionally equivalent to l % 100?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r451651396", "createdAt": "2020-07-08T15:54:54Z", "author": {"login": "jbachorik"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceMapper.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import static datadog.trace.core.StringTables.DURATION;\n+import static datadog.trace.core.StringTables.ERROR;\n+import static datadog.trace.core.StringTables.META;\n+import static datadog.trace.core.StringTables.METRICS;\n+import static datadog.trace.core.StringTables.NAME;\n+import static datadog.trace.core.StringTables.PARENT_ID;\n+import static datadog.trace.core.StringTables.RESOURCE;\n+import static datadog.trace.core.StringTables.SERVICE;\n+import static datadog.trace.core.StringTables.SPAN_ID;\n+import static datadog.trace.core.StringTables.START;\n+import static datadog.trace.core.StringTables.TRACE_ID;\n+import static datadog.trace.core.StringTables.TYPE;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_KEYS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_TAGS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.NO_CACHING;\n+\n+import datadog.trace.core.DDSpan;\n+import datadog.trace.core.serialization.msgpack.Mapper;\n+import datadog.trace.core.serialization.msgpack.Writable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class TraceMapper implements Mapper<List<DDSpan>> {\n+  @Override\n+  public void map(List<DDSpan> trace, Writable writable) {\n+    writable.startArray(trace.size());\n+    for (DDSpan span : trace) {\n+      writable.startMap(12);\n+      /* 1  */\n+      writable.writeUTF8(SERVICE);\n+      writable.writeString(span.getServiceName(), CONSTANT_TAGS);\n+      /* 2  */\n+      writable.writeUTF8(NAME);\n+      writable.writeString(span.getOperationName(), CONSTANT_TAGS);\n+      /* 3  */\n+      writable.writeUTF8(RESOURCE);\n+      writable.writeString(span.getResourceName(), NO_CACHING);\n+      /* 4  */\n+      writable.writeUTF8(TRACE_ID);\n+      writable.writeLong(span.getTraceId().toLong());\n+      /* 5  */\n+      writable.writeUTF8(SPAN_ID);\n+      writable.writeLong(span.getSpanId().toLong());\n+      /* 6  */\n+      writable.writeUTF8(PARENT_ID);\n+      writable.writeLong(span.getParentId().toLong());\n+      /* 7  */\n+      writable.writeUTF8(START);\n+      writable.writeLong(span.getStartTime());\n+      /* 8  */\n+      writable.writeUTF8(DURATION);\n+      writable.writeLong(span.getDurationNano());\n+      /* 9  */\n+      writable.writeUTF8(TYPE);\n+      writable.writeString(span.getType(), CONSTANT_TAGS);\n+      /* 10 */\n+      writable.writeUTF8(ERROR);\n+      writable.writeInt(span.getError());\n+      /* 11 */\n+      writable.writeUTF8(METRICS);\n+      writable.writeMap(span.getMetrics(), CONSTANT_KEYS);\n+      /* 12 */\n+      writable.writeUTF8(META);\n+      Map<String, String> baggage = span.context().getBaggageItems();\n+      Map<String, Object> tags = span.context().getTags();\n+      writable.startMap(baggage.size() + tags.size());\n+      for (Map.Entry<String, String> entry : baggage.entrySet()) {\n+        // tags and baggage may intersect, but tags take priority\n+        if (!tags.containsKey(entry.getKey())) {\n+          writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+          writable.writeObject(entry.getValue(), NO_CACHING);\n+        }\n+      }\n+      for (Map.Entry<String, Object> entry : tags.entrySet()) {\n+        writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+        if (entry.getValue() instanceof Long || entry.getValue() instanceof Integer) {\n+          // TODO it would be nice not to need to do this, either because\n+          //  the agent would accept variably typed tag values, or numeric\n+          //  tags get moved to the metrics\n+          writeLongAsString(((Number) entry.getValue()).longValue(), writable);\n+        } else {\n+          writable.writeString(String.valueOf(entry.getValue()), NO_CACHING);\n+        }\n+      }\n+    }\n+  }\n+\n+  private static final byte[] DIGIT_TENS = {\n+    '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n+    '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n+    '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n+    '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n+    '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n+    '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n+    '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n+    '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n+    '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n+    '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n+  };\n+\n+  private static final byte[] DIGIT_ONES = {\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+  };\n+\n+  private final byte[] numberByteArray = new byte[20]; // this is max long digits and sign\n+\n+  private void writeLongAsString(final long value, final Writable destination) {\n+    int pos = 20; // start from the end\n+    long l = value;\n+    boolean negative = (l < 0);\n+    if (!negative) {\n+      l = -l; // do the conversion on negative values to not overflow Long.MIN_VALUE\n+    }\n+\n+    int r;\n+    // convert 2 digits per iteration with longs until quotient fits into an int\n+    long lq;\n+    while (l <= Integer.MIN_VALUE) {\n+      lq = l / 100;\n+      r = (int) ((lq * 100) - l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1NjM5NA==", "bodyText": "This isn't new code. cc @bantonsson :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r451656394", "createdAt": "2020-07-08T16:02:24Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceMapper.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import static datadog.trace.core.StringTables.DURATION;\n+import static datadog.trace.core.StringTables.ERROR;\n+import static datadog.trace.core.StringTables.META;\n+import static datadog.trace.core.StringTables.METRICS;\n+import static datadog.trace.core.StringTables.NAME;\n+import static datadog.trace.core.StringTables.PARENT_ID;\n+import static datadog.trace.core.StringTables.RESOURCE;\n+import static datadog.trace.core.StringTables.SERVICE;\n+import static datadog.trace.core.StringTables.SPAN_ID;\n+import static datadog.trace.core.StringTables.START;\n+import static datadog.trace.core.StringTables.TRACE_ID;\n+import static datadog.trace.core.StringTables.TYPE;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_KEYS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_TAGS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.NO_CACHING;\n+\n+import datadog.trace.core.DDSpan;\n+import datadog.trace.core.serialization.msgpack.Mapper;\n+import datadog.trace.core.serialization.msgpack.Writable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class TraceMapper implements Mapper<List<DDSpan>> {\n+  @Override\n+  public void map(List<DDSpan> trace, Writable writable) {\n+    writable.startArray(trace.size());\n+    for (DDSpan span : trace) {\n+      writable.startMap(12);\n+      /* 1  */\n+      writable.writeUTF8(SERVICE);\n+      writable.writeString(span.getServiceName(), CONSTANT_TAGS);\n+      /* 2  */\n+      writable.writeUTF8(NAME);\n+      writable.writeString(span.getOperationName(), CONSTANT_TAGS);\n+      /* 3  */\n+      writable.writeUTF8(RESOURCE);\n+      writable.writeString(span.getResourceName(), NO_CACHING);\n+      /* 4  */\n+      writable.writeUTF8(TRACE_ID);\n+      writable.writeLong(span.getTraceId().toLong());\n+      /* 5  */\n+      writable.writeUTF8(SPAN_ID);\n+      writable.writeLong(span.getSpanId().toLong());\n+      /* 6  */\n+      writable.writeUTF8(PARENT_ID);\n+      writable.writeLong(span.getParentId().toLong());\n+      /* 7  */\n+      writable.writeUTF8(START);\n+      writable.writeLong(span.getStartTime());\n+      /* 8  */\n+      writable.writeUTF8(DURATION);\n+      writable.writeLong(span.getDurationNano());\n+      /* 9  */\n+      writable.writeUTF8(TYPE);\n+      writable.writeString(span.getType(), CONSTANT_TAGS);\n+      /* 10 */\n+      writable.writeUTF8(ERROR);\n+      writable.writeInt(span.getError());\n+      /* 11 */\n+      writable.writeUTF8(METRICS);\n+      writable.writeMap(span.getMetrics(), CONSTANT_KEYS);\n+      /* 12 */\n+      writable.writeUTF8(META);\n+      Map<String, String> baggage = span.context().getBaggageItems();\n+      Map<String, Object> tags = span.context().getTags();\n+      writable.startMap(baggage.size() + tags.size());\n+      for (Map.Entry<String, String> entry : baggage.entrySet()) {\n+        // tags and baggage may intersect, but tags take priority\n+        if (!tags.containsKey(entry.getKey())) {\n+          writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+          writable.writeObject(entry.getValue(), NO_CACHING);\n+        }\n+      }\n+      for (Map.Entry<String, Object> entry : tags.entrySet()) {\n+        writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+        if (entry.getValue() instanceof Long || entry.getValue() instanceof Integer) {\n+          // TODO it would be nice not to need to do this, either because\n+          //  the agent would accept variably typed tag values, or numeric\n+          //  tags get moved to the metrics\n+          writeLongAsString(((Number) entry.getValue()).longValue(), writable);\n+        } else {\n+          writable.writeString(String.valueOf(entry.getValue()), NO_CACHING);\n+        }\n+      }\n+    }\n+  }\n+\n+  private static final byte[] DIGIT_TENS = {\n+    '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n+    '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n+    '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n+    '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n+    '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n+    '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n+    '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n+    '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n+    '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n+    '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n+  };\n+\n+  private static final byte[] DIGIT_ONES = {\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+  };\n+\n+  private final byte[] numberByteArray = new byte[20]; // this is max long digits and sign\n+\n+  private void writeLongAsString(final long value, final Writable destination) {\n+    int pos = 20; // start from the end\n+    long l = value;\n+    boolean negative = (l < 0);\n+    if (!negative) {\n+      l = -l; // do the conversion on negative values to not overflow Long.MIN_VALUE\n+    }\n+\n+    int r;\n+    // convert 2 digits per iteration with longs until quotient fits into an int\n+    long lq;\n+    while (l <= Integer.MIN_VALUE) {\n+      lq = l / 100;\n+      r = (int) ((lq * 100) - l);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTM5Ng=="}, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzOTMwNw==", "bodyText": "Sorry for being late to the game. Was on vacation.\nYes, and no. This is a modulo operation, but since l has been swapped to negative numbers this is more like 100 - (l % 100). The reason to reuse lq in this way is that lq is an input to the next iteration so we need to compute it anyway, as well as a division (modulo) would either have been optimized into something similar to this for speed, or if the div instruction is used, it would be at least 5 times slower than a mul.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r460839307", "createdAt": "2020-07-27T11:59:38Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceMapper.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import static datadog.trace.core.StringTables.DURATION;\n+import static datadog.trace.core.StringTables.ERROR;\n+import static datadog.trace.core.StringTables.META;\n+import static datadog.trace.core.StringTables.METRICS;\n+import static datadog.trace.core.StringTables.NAME;\n+import static datadog.trace.core.StringTables.PARENT_ID;\n+import static datadog.trace.core.StringTables.RESOURCE;\n+import static datadog.trace.core.StringTables.SERVICE;\n+import static datadog.trace.core.StringTables.SPAN_ID;\n+import static datadog.trace.core.StringTables.START;\n+import static datadog.trace.core.StringTables.TRACE_ID;\n+import static datadog.trace.core.StringTables.TYPE;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_KEYS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_TAGS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.NO_CACHING;\n+\n+import datadog.trace.core.DDSpan;\n+import datadog.trace.core.serialization.msgpack.Mapper;\n+import datadog.trace.core.serialization.msgpack.Writable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class TraceMapper implements Mapper<List<DDSpan>> {\n+  @Override\n+  public void map(List<DDSpan> trace, Writable writable) {\n+    writable.startArray(trace.size());\n+    for (DDSpan span : trace) {\n+      writable.startMap(12);\n+      /* 1  */\n+      writable.writeUTF8(SERVICE);\n+      writable.writeString(span.getServiceName(), CONSTANT_TAGS);\n+      /* 2  */\n+      writable.writeUTF8(NAME);\n+      writable.writeString(span.getOperationName(), CONSTANT_TAGS);\n+      /* 3  */\n+      writable.writeUTF8(RESOURCE);\n+      writable.writeString(span.getResourceName(), NO_CACHING);\n+      /* 4  */\n+      writable.writeUTF8(TRACE_ID);\n+      writable.writeLong(span.getTraceId().toLong());\n+      /* 5  */\n+      writable.writeUTF8(SPAN_ID);\n+      writable.writeLong(span.getSpanId().toLong());\n+      /* 6  */\n+      writable.writeUTF8(PARENT_ID);\n+      writable.writeLong(span.getParentId().toLong());\n+      /* 7  */\n+      writable.writeUTF8(START);\n+      writable.writeLong(span.getStartTime());\n+      /* 8  */\n+      writable.writeUTF8(DURATION);\n+      writable.writeLong(span.getDurationNano());\n+      /* 9  */\n+      writable.writeUTF8(TYPE);\n+      writable.writeString(span.getType(), CONSTANT_TAGS);\n+      /* 10 */\n+      writable.writeUTF8(ERROR);\n+      writable.writeInt(span.getError());\n+      /* 11 */\n+      writable.writeUTF8(METRICS);\n+      writable.writeMap(span.getMetrics(), CONSTANT_KEYS);\n+      /* 12 */\n+      writable.writeUTF8(META);\n+      Map<String, String> baggage = span.context().getBaggageItems();\n+      Map<String, Object> tags = span.context().getTags();\n+      writable.startMap(baggage.size() + tags.size());\n+      for (Map.Entry<String, String> entry : baggage.entrySet()) {\n+        // tags and baggage may intersect, but tags take priority\n+        if (!tags.containsKey(entry.getKey())) {\n+          writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+          writable.writeObject(entry.getValue(), NO_CACHING);\n+        }\n+      }\n+      for (Map.Entry<String, Object> entry : tags.entrySet()) {\n+        writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+        if (entry.getValue() instanceof Long || entry.getValue() instanceof Integer) {\n+          // TODO it would be nice not to need to do this, either because\n+          //  the agent would accept variably typed tag values, or numeric\n+          //  tags get moved to the metrics\n+          writeLongAsString(((Number) entry.getValue()).longValue(), writable);\n+        } else {\n+          writable.writeString(String.valueOf(entry.getValue()), NO_CACHING);\n+        }\n+      }\n+    }\n+  }\n+\n+  private static final byte[] DIGIT_TENS = {\n+    '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n+    '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n+    '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n+    '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n+    '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n+    '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n+    '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n+    '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n+    '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n+    '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n+  };\n+\n+  private static final byte[] DIGIT_ONES = {\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+  };\n+\n+  private final byte[] numberByteArray = new byte[20]; // this is max long digits and sign\n+\n+  private void writeLongAsString(final long value, final Writable destination) {\n+    int pos = 20; // start from the end\n+    long l = value;\n+    boolean negative = (l < 0);\n+    if (!negative) {\n+      l = -l; // do the conversion on negative values to not overflow Long.MIN_VALUE\n+    }\n+\n+    int r;\n+    // convert 2 digits per iteration with longs until quotient fits into an int\n+    long lq;\n+    while (l <= Integer.MIN_VALUE) {\n+      lq = l / 100;\n+      r = (int) ((lq * 100) - l);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTM5Ng=="}, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjE1ODU0OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Codec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0MTowNVrOGuwdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1ODo0MFrOGvF-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTYyMA==", "bodyText": "Would it make sense to pre-fill the known mappings into the config map?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r451681620", "createdAt": "2020-07-08T16:41:05Z", "author": {"login": "jbachorik"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Codec.java", "diffHunk": "@@ -0,0 +1,281 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public final class Codec extends ClassValue<Writer<?>> {\n+\n+  public static final Codec INSTANCE = new Codec();\n+\n+  private final Map<Class<?>, Writer<?>> config;\n+\n+  public Codec(Map<Class<?>, Writer<?>> config) {\n+    this.config = config;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public Codec() {\n+    this(Collections.<Class<?>, Writer<?>>emptyMap());\n+  }\n+\n+  @Override\n+  protected Writer<?> computeValue(Class<?> clazz) {\n+    Writer<?> writer = config.get(clazz);\n+    if (null != writer) {\n+      return writer;\n+    }\n+    if (Number.class.isAssignableFrom(clazz)) {\n+      if (Double.class == clazz) {\n+        return new DoubleWriter();\n+      }\n+      if (Float.class == clazz) {\n+        return new FloatWriter();\n+      }\n+      if (Integer.class == clazz) {\n+        return new IntWriter();\n+      }\n+      if (Long.class == clazz) {\n+        return new LongWriter();\n+      }\n+      if (Short.class == clazz) {\n+        return new ShortWriter();\n+      }\n+    }\n+    if (clazz.isArray()) {\n+      if (byte[].class == clazz) {\n+        return new ByteArrayWriter();\n+      }\n+      if (int[].class == clazz) {\n+        return new IntArrayWriter();\n+      }\n+      if (long[].class == clazz) {\n+        return new LongArrayWriter();\n+      }\n+      if (double[].class == clazz) {\n+        return new DoubleArrayWriter();\n+      }\n+      if (float[].class == clazz) {\n+        return new FloatArrayWriter();\n+      }\n+      if (short[].class == clazz) {\n+        return new ShortArrayWriter();\n+      }\n+      if (char[].class == clazz) {\n+        return new CharArrayWriter();\n+      }\n+      if (boolean[].class == clazz) {\n+        return new BooleanArrayWriter();\n+      }\n+      return new ObjectArrayWriter();\n+    }\n+    if (Boolean.class == clazz) {\n+      return new BooleanWriter();\n+    }\n+    if (CharSequence.class.isAssignableFrom(clazz)) {\n+      return CharSequenceWriter.INSTANCE;\n+    }\n+    if (Map.class.isAssignableFrom(clazz)) {\n+      return new MapWriter();\n+    }\n+    if (Collection.class.isAssignableFrom(clazz)) {\n+      return new CollectionWriter();\n+    }\n+    if (ByteBuffer.class.isAssignableFrom(clazz)) {\n+      return new ByteBufferWriter();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzNDIwMg==", "bodyText": "I might end with almost as much code as there is here. Worth trying though.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452034202", "createdAt": "2020-07-09T07:58:40Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Codec.java", "diffHunk": "@@ -0,0 +1,281 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public final class Codec extends ClassValue<Writer<?>> {\n+\n+  public static final Codec INSTANCE = new Codec();\n+\n+  private final Map<Class<?>, Writer<?>> config;\n+\n+  public Codec(Map<Class<?>, Writer<?>> config) {\n+    this.config = config;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public Codec() {\n+    this(Collections.<Class<?>, Writer<?>>emptyMap());\n+  }\n+\n+  @Override\n+  protected Writer<?> computeValue(Class<?> clazz) {\n+    Writer<?> writer = config.get(clazz);\n+    if (null != writer) {\n+      return writer;\n+    }\n+    if (Number.class.isAssignableFrom(clazz)) {\n+      if (Double.class == clazz) {\n+        return new DoubleWriter();\n+      }\n+      if (Float.class == clazz) {\n+        return new FloatWriter();\n+      }\n+      if (Integer.class == clazz) {\n+        return new IntWriter();\n+      }\n+      if (Long.class == clazz) {\n+        return new LongWriter();\n+      }\n+      if (Short.class == clazz) {\n+        return new ShortWriter();\n+      }\n+    }\n+    if (clazz.isArray()) {\n+      if (byte[].class == clazz) {\n+        return new ByteArrayWriter();\n+      }\n+      if (int[].class == clazz) {\n+        return new IntArrayWriter();\n+      }\n+      if (long[].class == clazz) {\n+        return new LongArrayWriter();\n+      }\n+      if (double[].class == clazz) {\n+        return new DoubleArrayWriter();\n+      }\n+      if (float[].class == clazz) {\n+        return new FloatArrayWriter();\n+      }\n+      if (short[].class == clazz) {\n+        return new ShortArrayWriter();\n+      }\n+      if (char[].class == clazz) {\n+        return new CharArrayWriter();\n+      }\n+      if (boolean[].class == clazz) {\n+        return new BooleanArrayWriter();\n+      }\n+      return new ObjectArrayWriter();\n+    }\n+    if (Boolean.class == clazz) {\n+      return new BooleanWriter();\n+    }\n+    if (CharSequence.class.isAssignableFrom(clazz)) {\n+      return CharSequenceWriter.INSTANCE;\n+    }\n+    if (Map.class.isAssignableFrom(clazz)) {\n+      return new MapWriter();\n+    }\n+    if (Collection.class.isAssignableFrom(clazz)) {\n+      return new CollectionWriter();\n+    }\n+    if (ByteBuffer.class.isAssignableFrom(clazz)) {\n+      return new ByteBufferWriter();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTYyMA=="}, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTg4OTQzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0MToxNlrOGvUTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0MToxNlrOGvUTcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2ODkxNQ==", "bodyText": "The comment here is wrong now...  want to document the reason for this choice?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452268915", "createdAt": "2020-07-09T14:41:16Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -55,10 +58,9 @@ public TraceProcessingDisruptor(\n             ProducerType.MULTI,\n             // use sleeping wait strategy because it reduces CPU usage,\n             // and is cheaper for application threads publishing traces\n-            new SleepingWaitStrategy(0, MILLISECONDS.toNanos(10)));\n+            new BlockingWaitStrategy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk1MzYzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NDoxNVrOGvU6sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToyMDowMVrOGvel5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3ODk2MQ==", "bodyText": "Does this mean the trace that triggers the exception will be serialized twice?  Perhaps there should be a buffer to avoid relying on the exception?  ie, flush if the payload exceeds x, but allow it to go over by y.\nAlso, wouldn't messageCount be off by one at this point?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452278961", "createdAt": "2020-07-09T14:54:15Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTAzNw==", "bodyText": "No, maybe I should add a comment.\nWhat happens here is when an entire message is put into the buffer (i.e. it's possible without overflow) the buffer gets marked (i.e. take a snapshot of the buffer's current position, where the next message would start), which is important. When there is overflow, the buffer is reset, so the position is restored to that snapshot. Now there are two cases:\n\nThat snapshot position is the start of the buffer, so the object being mapped is larger than we have space for. This is unrecoverable, and we're relying on this not being possible.\nOtherwise, the snapshot position is where the last successfully written message ended. If we flip the buffer, it can be dispatched. After it's been dispatched, we can write the message which caused the overflow into the now reset buffer.\n\nSo, crucially, messageCountcan't have been incremented if we reach the catch block. Does that make sense?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452295037", "createdAt": "2020-07-09T15:16:12Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3ODk2MQ=="}, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyOTQyMg==", "bodyText": "oh, right... I see.  If the exception is thrown, then messageCount won't have been incremented.  Probably good to comment inline.  I still don't understand why it wouldn't result in duplicate serialization though.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452429422", "createdAt": "2020-07-09T19:04:29Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3ODk2MQ=="}, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNzQ3OQ==", "bodyText": "I don't see how the above doesn't explain it, given some understanding of ByteBuffer.\n\nByteBuffer.mark records the current position, stored in a field called mark\nByteBuffer.reset sets position to mark - it effectively undoes any operation since the last mark() call.\nByteBuffer.flip sets limit to position, sets position to zero\nByteBuffer.slice creates a view over the buffer between position and limit\n\nOnly successfully serialised records get marked. If an attempt is made to serialise a record and the buffer overflows, whatever's in the buffer since the last mark will be discarded; it won't be in the slice created in flush. Unsuccessful serialisation attempts are repeated after flushing when there's room to accommodate the record.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452437479", "createdAt": "2020-07-09T19:20:01Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3ODk2MQ=="}, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk1NjM5OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo1NDo1MlrOGvU8bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTowMDowNFrOGvhntQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3OTQwNg==", "bodyText": "what is this for?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452279406", "createdAt": "2020-07-09T14:54:52Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {\n+      // go back to the last successfully written message\n+      buffer.reset();\n+      if (buffer.position() == MAX_ARRAY_HEADER_SIZE) {\n+        throw e;\n+      }\n+      flush();\n+      format(message, mapper);\n+    }\n+  }\n+\n+  @Override\n+  public void flush() {\n+    buffer.flip();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI5NTYzMg==", "bodyText": "https://docs.oracle.com/javase/7/docs/api/java/nio/Buffer.html#flip()", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452295632", "createdAt": "2020-07-09T15:17:04Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {\n+      // go back to the last successfully written message\n+      buffer.reset();\n+      if (buffer.position() == MAX_ARRAY_HEADER_SIZE) {\n+        throw e;\n+      }\n+      flush();\n+      format(message, mapper);\n+    }\n+  }\n+\n+  @Override\n+  public void flush() {\n+    buffer.flip();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3OTQwNg=="}, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzMDM1Mw==", "bodyText": "so buffer is a circular structure, where the index 0 isn't necessarily the beginning of the buffer?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452430353", "createdAt": "2020-07-09T19:06:15Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {\n+      // go back to the last successfully written message\n+      buffer.reset();\n+      if (buffer.position() == MAX_ARRAY_HEADER_SIZE) {\n+        throw e;\n+      }\n+      flush();\n+      format(message, mapper);\n+    }\n+  }\n+\n+  @Override\n+  public void flush() {\n+    buffer.flip();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3OTQwNg=="}, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzA5Mw==", "bodyText": "nah", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452487093", "createdAt": "2020-07-09T21:00:04Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {\n+      // go back to the last successfully written message\n+      buffer.reset();\n+      if (buffer.position() == MAX_ARRAY_HEADER_SIZE) {\n+        throw e;\n+      }\n+      flush();\n+      format(message, mapper);\n+    }\n+  }\n+\n+  @Override\n+  public void flush() {\n+    buffer.flip();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3OTQwNg=="}, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk4MjU2OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMDoxOVrOGvVNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMDoxOVrOGvVNJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MzY4NA==", "bodyText": "So this is now a blocking call that might trigger IO, right?  Can you add a comment to that effect because that isn't obvious from the method name.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452283684", "createdAt": "2020-07-09T15:00:19Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -174,43 +177,10 @@ public void onEvent(\n       }\n     }\n \n-    private void serialize(List<DDSpan> trace, int representativeCount) throws IOException {\n+    private void serialize(List<DDSpan> trace, int representativeCount) {\n       // TODO populate `_sample_rate` metric in a way that accounts for lost/dropped traces\n+      packer.format(processor.onTraceComplete(trace), traceMapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTk4OTA5OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMTo0M1rOGvVRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMTo0M1rOGvVRQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4NDczOQ==", "bodyText": "or when flush is called via heartbeat.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452284739", "createdAt": "2020-07-09T15:01:43Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -223,6 +193,33 @@ private long millisecondTime() {\n       // important: nanoTime is monotonic, currentTimeMillis is not\n       return NANOSECONDS.toMillis(System.nanoTime());\n     }\n+\n+    @Override\n+    public void accept(int messageCount, ByteBuffer buffer) {\n+      // the packer calls this when the buffer is full", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 196}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 120, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}