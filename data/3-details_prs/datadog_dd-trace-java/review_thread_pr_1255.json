{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzU5ODc4", "number": 1255, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1Njo0MFrODi2VVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTowMToxNFrODi2alA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY4MzcyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/dropwizard/src/test/groovy/JettyTestInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1Njo0MFrOFuU5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTo0OToyMVrOFuWeRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMTI5NQ==", "bodyText": "Should there be just default implementation instead of these repeats?", "url": "https://github.com/DataDog/dd-trace-java/pull/1255#discussion_r384121295", "createdAt": "2020-02-25T20:56:40Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/dropwizard/src/test/groovy/JettyTestInstrumentation.java", "diffHunk": "@@ -24,4 +26,9 @@ public AgentBuilder instrument(final AgentBuilder agentBuilder) {\n             new AgentBuilder.Transformer.ForAdvice()\n                 .advice(named(\"handle\"), HttpServerTestAdvice.ServerEntryAdvice.class.getName()));\n   }\n+\n+  @Override\n+  public Collection<String> getLibraryBlacklistedPrefixes() {\n+    return Collections.emptySet();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f250b44a601293b01e993b4651736f8d07a83acf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMDMxNA==", "bodyText": "Yup, I even added a comment to Instrumenter.  The problem is we're Java 7 for the time being.", "url": "https://github.com/DataDog/dd-trace-java/pull/1255#discussion_r384130314", "createdAt": "2020-02-25T21:15:36Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/dropwizard/src/test/groovy/JettyTestInstrumentation.java", "diffHunk": "@@ -24,4 +26,9 @@ public AgentBuilder instrument(final AgentBuilder agentBuilder) {\n             new AgentBuilder.Transformer.ForAdvice()\n                 .advice(named(\"handle\"), HttpServerTestAdvice.ServerEntryAdvice.class.getName()));\n   }\n+\n+  @Override\n+  public Collection<String> getLibraryBlacklistedPrefixes() {\n+    return Collections.emptySet();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMTI5NQ=="}, "originalCommit": {"oid": "f250b44a601293b01e993b4651736f8d07a83acf"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0NzAxMg==", "bodyText": "We could add a default implementation to Instrumenter.Default.\nAlthough, I'll admit I'm usually fine with making each implementation explicitly redeclare it needs, since these are really independent decisions for each matcher.  However, in this case, I think we'll rarely use the blacklist.\nBut I do have a related question, does this really belong on an Instrumenter?  It seems like the blacklist is really more a property of a library and separate from any particular instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1255#discussion_r384147012", "createdAt": "2020-02-25T21:49:21Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/dropwizard/src/test/groovy/JettyTestInstrumentation.java", "diffHunk": "@@ -24,4 +26,9 @@ public AgentBuilder instrument(final AgentBuilder agentBuilder) {\n             new AgentBuilder.Transformer.ForAdvice()\n                 .advice(named(\"handle\"), HttpServerTestAdvice.ServerEntryAdvice.class.getName()));\n   }\n+\n+  @Override\n+  public Collection<String> getLibraryBlacklistedPrefixes() {\n+    return Collections.emptySet();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMTI5NQ=="}, "originalCommit": {"oid": "f250b44a601293b01e993b4651736f8d07a83acf"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY5NzE2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/GlobalIgnoresMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTowMToxNFrOFuVCDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTowMToxNFrOFuVCDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMzQwNQ==", "bodyText": "Personally I would say that mutable matcher goes heavily against BBs design intentions and may lead to awkward and hard to debug errors.\nAlso: having list of ignores classes in instrumentation is counterintuitive: we probably want that list to apply even if instrumentation is disabled for some reason. Or, for that matter, if for some reason we could not load it.\nI think keeping list of ignores here is actually less confusing (since we keep some here anyway).", "url": "https://github.com/DataDog/dd-trace-java/pull/1255#discussion_r384123405", "createdAt": "2020-02-25T21:01:14Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/GlobalIgnoresMatcher.java", "diffHunk": "@@ -9,11 +12,13 @@\n public class GlobalIgnoresMatcher<T extends TypeDescription>\n     extends ElementMatcher.Junction.AbstractBase<T> {\n \n+  private final Set<String> blacklistedPrefixes = new HashSet<>();\n+\n   private static final Pattern COM_MCHANGE_PROXY =\n       Pattern.compile(\"com\\\\.mchange\\\\.v2\\\\.c3p0\\\\..*Proxy\");\n \n-  public static <T extends TypeDescription> ElementMatcher.Junction<T> globalIgnoresMatcher() {\n-    return new GlobalIgnoresMatcher<>();\n+  public void addBlacklistedPrefixes(final Collection<String> prefixes) {\n+    blacklistedPrefixes.addAll(prefixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f250b44a601293b01e993b4651736f8d07a83acf"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 339, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}