{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzkxNzY3", "number": 1246, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowNzozNVrODh9zgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMjo1NlrODi0T3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQyMjA4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowNzozNVrOFs_00A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToxNTowOVrOFt-CUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng==", "bodyText": "Nice -- did these two changes reduce the collision rate?\nMostly just curious", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382727376", "createdAt": "2020-02-21T18:07:35Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -140,7 +140,7 @@ final long approximateSize() {\n       this.loaderRef = loaderRef;\n       this.className = className;\n \n-      hashCode = (int) (31 * this.loaderHash) ^ className.hashCode();\n+      hashCode = 31 * this.loaderHash + className.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjU2MA==", "bodyText": "I didn't check, but I did notice that before equals falled down to string comparison way too often.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382746560", "createdAt": "2020-02-21T18:49:29Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -140,7 +140,7 @@ final long approximateSize() {\n       this.loaderRef = loaderRef;\n       this.className = className;\n \n-      hashCode = (int) (31 * this.loaderHash) ^ className.hashCode();\n+      hashCode = 31 * this.loaderHash + className.hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng=="}, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4MzQ0Mg==", "bodyText": "Yes, that might have more to do with the loader hash.  I think the change of the bootstrap hash is good, but I'm not so sure about the other parts.\nHere, I was using a variation on FNV: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\nI suspect this can be improved, but I'm not so sure that switching from ^ to + is a good idea.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383483442", "createdAt": "2020-02-24T20:00:08Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -140,7 +140,7 @@ final long approximateSize() {\n       this.loaderRef = loaderRef;\n       this.className = className;\n \n-      hashCode = (int) (31 * this.loaderHash) ^ className.hashCode();\n+      hashCode = 31 * this.loaderHash + className.hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng=="}, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0NjY0Mg==", "bodyText": "I think + is used by java.util.Arrays, and 'promoted' by things like Guava (java.util.Arrays has a bit different formula, but in our case I think it will produce only constant difference).\nAs far as I can see FNV performs all calculation on bytes and then 'collects' result in int - ensuring mixing within values. I'm not sure how different this is from current implementation in this code. Also FNV uses 'carefully selected' prime and offset.\nFWIW in my quick test on 1000 iterations of hash(r.nextInt() % 10, r.nextInt() % 100) new implementation routinely produces better results (less collisions) than old one.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383746642", "createdAt": "2020-02-25T09:15:09Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -140,7 +140,7 @@ final long approximateSize() {\n       this.loaderRef = loaderRef;\n       this.className = className;\n \n-      hashCode = (int) (31 * this.loaderHash) ^ className.hashCode();\n+      hashCode = 31 * this.loaderHash + className.hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNzM3Ng=="}, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQzMTQ5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoxMTowM1rOFs_61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToyMDozN1rOFt-N3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA==", "bodyText": "Does this case get exercised?  I believe the outer layer always creates a new TypeCacheKey, so this probably doesn't get exercised much.\nI did try a separate branch where I used ImmutableTypeCacheKeys for put and used a thread local MutableTypeCacheKey for look-up.  That did slightly reduce allocation but the allocation from evicting and then rematerializing still dominated and there was no measurable reduction in GCs or impact on start-up.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382728918", "createdAt": "2020-02-21T18:11:03Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,11 +150,19 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      if (this == obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Njc1OA==", "bodyText": "I do not think I have direct data on this... would you like me to remove this?", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r382746758", "createdAt": "2020-02-21T18:49:57Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,11 +150,19 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      if (this == obj) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA=="}, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ4NDgyOA==", "bodyText": "Yes, I don't think is helping -- probably hurting slightly.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383484828", "createdAt": "2020-02-24T20:02:52Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,11 +150,19 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      if (this == obj) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA=="}, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0OTU5Nw==", "bodyText": "I think it will be optimized away eventually by JVM, but I've removed it anyway.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r383749597", "createdAt": "2020-02-25T09:20:37Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,11 +150,19 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      if (this == obj) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyODkxOA=="}, "originalCommit": {"oid": "00c268e6d8acf642f0810f25a3d9e64b7f639543"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMxNjQ4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowMTo0MVrOFuRWCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowMTo0MVrOFuRWCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2Mjk4Ng==", "bodyText": "I was mostly assuming that hashCode comparisons had already been done.\nThe idea behind the loaderHash comparison was that it provides a fast exit for some hash collisions.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384062986", "createdAt": "2020-02-25T19:01:41Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50793e524485e6a3b48136d3f4f4e852e76236b9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM1MjI4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMjo1NlrOFuRsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozMDo1M1rOFuiCsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ==", "bodyText": "Yes, this part is debatable but still quite deliberate.\nThe loaderRef reference equivalence check was placed before the className.equals check because it is faster.\nThe order is reversed for the slow path because I want to avoid calling Reference.get whenever possible.\nThe reason being that concurrency GCs will \"strengthen\" the reference on a get call.\nhttps://github.com/real-logic/agrona/blob/master/agrona/src/main/java/org/agrona/References.java has a nice explanation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384068811", "createdAt": "2020-02-25T19:12:56Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {\n+        return false;\n+      }\n+\n+      if (className.equals(that.className)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50793e524485e6a3b48136d3f4f4e852e76236b9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExODU5MA==", "bodyText": "I think performance wise this check is equivalent.\nIt was:\n\nequivalence check for references\nimmediately after equals on class name in both branches\n\nNow:\n\nEquals in classname first\nequivalence check if first passes.\n\nSo if anything we save equivalence check in some cases. Strings were compared anyway.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384118590", "createdAt": "2020-02-25T20:51:11Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {\n+        return false;\n+      }\n+\n+      if (className.equals(that.className)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ=="}, "originalCommit": {"oid": "50793e524485e6a3b48136d3f4f4e852e76236b9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0ODM3Mg==", "bodyText": "Yes, that's a fair point -- and if we put back the loaderHash check that covers a fast exit for loader mismatch.", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384148372", "createdAt": "2020-02-25T21:52:03Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {\n+        return false;\n+      }\n+\n+      if (className.equals(that.className)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ=="}, "originalCommit": {"oid": "50793e524485e6a3b48136d3f4f4e852e76236b9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNjU2MA==", "bodyText": "I've put that back", "url": "https://github.com/DataDog/dd-trace-java/pull/1246#discussion_r384336560", "createdAt": "2020-02-26T08:30:53Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -150,18 +153,23 @@ public final int hashCode() {\n \n     @Override\n     public boolean equals(final Object obj) {\n-      if (!(obj instanceof TypeCacheKey)) return false;\n+      if (!(obj instanceof TypeCacheKey)) {\n+        return false;\n+      }\n \n-      TypeCacheKey that = (TypeCacheKey) obj;\n+      final TypeCacheKey that = (TypeCacheKey) obj;\n \n-      if (loaderHash != that.loaderHash) return false;\n+      if (hashCode != that.hashCode) {\n+        return false;\n+      }\n+\n+      if (className.equals(that.className)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODgxMQ=="}, "originalCommit": {"oid": "50793e524485e6a3b48136d3f4f4e852e76236b9"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 538, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}