{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODE1ODA1", "number": 1997, "title": "Add Scala Controllers and Actions to Play smoke tests", "bodyText": "Adds Scala Controller and Action to play smoke tests, and also makes sure that we don't create multiple play.request spans in Scala when we compose Actions.", "createdAt": "2020-10-16T12:47:13Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1997", "merged": true, "mergeCommit": {"oid": "19d65653370291c1d9a294b99530a816b1ff53dc"}, "closed": true, "closedAt": "2020-10-19T09:59:17Z", "author": {"login": "bantonsson"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTF48PgFqTUxMDQzOTM2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdT_K_MgBqjM4OTE4MTQ2NjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDM5MzY2", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#pullrequestreview-510439366", "createdAt": "2020-10-16T12:53:30Z", "commit": {"oid": "27cf65c83fec846e8436d1b65c6e4c1168a47813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1MzozMVrOHi7LIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1MzozMVrOHi7LIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MzEzOQ==", "bodyText": "invokeExact?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506383139", "createdAt": "2020-10-16T12:53:31Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {\n+      try {\n+        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n+        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n+      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+      }\n+    }\n+    WITH_TAG = withTag;\n+    APPLY = apply;\n+  }\n+\n+  public static Request withTag(final Request request, final String key, final String value) {\n+    Request newRequest = request;\n+    if (APPLY != null) {\n+      try {\n+        RequestHeader newHeader = request;\n+        if (WITH_TAG != null) {\n+          newHeader = (RequestHeader) WITH_TAG.invoke(request, key, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27cf65c83fec846e8436d1b65c6e4c1168a47813"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27cf65c83fec846e8436d1b65c6e4c1168a47813", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/27cf65c83fec846e8436d1b65c6e4c1168a47813", "committedDate": "2020-10-16T12:44:07Z", "message": "Don't add multiple play.request spans for play 2.4+"}, "afterCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/676bb5fc6c62416a6ac64a160304c889621d8a8f", "committedDate": "2020-10-16T15:48:06Z", "message": "Don't add multiple play.request spans for play 2.4+"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjAxODY4", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#pullrequestreview-510601868", "createdAt": "2020-10-16T15:58:31Z", "commit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzAxNzEx", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#pullrequestreview-510701711", "createdAt": "2020-10-16T18:15:59Z", "commit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoxNTo1OVrOHjLRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyNDozMlrOHjLhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0Njc5MQ==", "bodyText": "Could you add a comment here when you'd expect the lookup to fail?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506646791", "createdAt": "2020-10-16T18:15:59Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzE2Mw==", "bodyText": "Would this be better in the catch instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506647163", "createdAt": "2020-10-16T18:16:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzgyMg==", "bodyText": "Please add a comment describing the motivation for this class.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506647822", "createdAt": "2020-10-16T18:18:05Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw==", "bodyText": "What impact will this have?  Does this mean that the first action in the filter chain will be the only one with a span?  (Am I thinking about it right as a filter chain?)", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506649077", "createdAt": "2020-10-16T18:20:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java", "diffHunk": "@@ -37,6 +43,9 @@ public static AgentScope onEnter(@Advice.Argument(0) final Request req) {\n \n     final AgentScope scope = activateSpan(span);\n     scope.setAsyncPropagation(true);\n+\n+    req = RequestHelper.withTag(req, \"_dd_HasPlayRequestSpan\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDA2Nw==", "bodyText": "I assume this is the key distinction here for java (vs the base case)...", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506650067", "createdAt": "2020-10-16T18:22:41Z", "author": {"login": "tylerbenson"}, "path": "dd-smoke-tests/play-2.4/app/controllers/JController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package controllers;\n+\n+import actions.*;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import javax.inject.Inject;\n+import play.Configuration;\n+import play.libs.F.*;\n+import play.libs.ws.*;\n+import play.mvc.*;\n+import play.mvc.With;\n+\n+public class JController extends Controller {\n+\n+  private final WSClient ws;\n+  private final String clientRequestBase;\n+\n+  @Inject\n+  public JController(WSClient ws, Configuration configuration) {\n+    this.ws = ws;\n+    this.clientRequestBase =\n+        configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\");\n+  }\n+\n+  @With({Action1.class, Action2.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDkyMg==", "bodyText": "In the java controller, I would assume the actions would be called first followed by the doGet method, but for scala that seems to be opposite.  Does that change the expected controller span resource name?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506650922", "createdAt": "2020-10-16T18:24:32Z", "author": {"login": "tylerbenson"}, "path": "dd-smoke-tests/play-2.4/app/controllers/SController.scala", "diffHunk": "@@ -0,0 +1,45 @@\n+package controllers\n+\n+import actions._\n+import io.opentracing.{Scope, Span, Tracer}\n+import io.opentracing.util.GlobalTracer\n+import javax.inject.Inject\n+import play.api.libs.ws._\n+import play.api.mvc._\n+import play.Configuration\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+class SController @Inject()(\n+    executionContext: ExecutionContext,\n+    ws: WSClient,\n+    configuration: Configuration\n+) extends Controller {\n+\n+  private implicit val ec: ExecutionContext = executionContext\n+\n+  private val clientRequestBase =\n+    configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\")\n+\n+  def doGet(id: Option[Int]) =\n+    SAction1 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c3d42ffa9d2da52f54a4972b1810152a5a65e0ac", "committedDate": "2020-10-19T07:37:36Z", "message": "Add Scala Controller to Play 2.6 smoke tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3596d89deb4d631184293322e46c7f6310e1caa7", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3596d89deb4d631184293322e46c7f6310e1caa7", "committedDate": "2020-10-19T07:37:36Z", "message": "Don't add multiple play.request spans for play 2.6+"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0924b986c8618e34312ae8658a7d2b6717545eba", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0924b986c8618e34312ae8658a7d2b6717545eba", "committedDate": "2020-10-19T07:37:36Z", "message": "Add Scala Controller to Play 2.5 smoke tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "909c305257678151f21e4fa0dfaa4edcc4e780fd", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/909c305257678151f21e4fa0dfaa4edcc4e780fd", "committedDate": "2020-10-19T07:37:37Z", "message": "Play 2.4 smoke test with filters, actions and client requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8369b283dc7e0955f2103d1ef957b5c98184bca", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b8369b283dc7e0955f2103d1ef957b5c98184bca", "committedDate": "2020-10-19T07:37:37Z", "message": "Don't add multiple play.request spans for play 2.4+"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/676bb5fc6c62416a6ac64a160304c889621d8a8f", "committedDate": "2020-10-16T15:48:06Z", "message": "Don't add multiple play.request spans for play 2.4+"}, "afterCommit": {"oid": "b8369b283dc7e0955f2103d1ef957b5c98184bca", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b8369b283dc7e0955f2103d1ef957b5c98184bca", "committedDate": "2020-10-19T07:37:37Z", "message": "Don't add multiple play.request spans for play 2.4+"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2991, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}