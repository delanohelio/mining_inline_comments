{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjM3MzY2", "number": 1165, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo1NTo0NlrODXR9oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo1NTo0NlrODXR9oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzM4MTQ1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo1NTo0NlrOFchDwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo1NTo0NlrOFchDwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NjA4MA==", "bodyText": "This change fixed the resource naming issue with the sample hybris application.", "url": "https://github.com/DataDog/dd-trace-java/pull/1165#discussion_r365446080", "createdAt": "2020-01-10T21:55:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherInstrumentation.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package datadog.trace.instrumentation.servlet.dispatcher;\n+\n+import static datadog.trace.agent.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.agent.tooling.ByteBuddyElementMatchers.safeHasSuperType;\n+import static datadog.trace.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.servlet.ServletRequestSetter.SETTER;\n+import static datadog.trace.instrumentation.servlet.dispatcher.RequestDispatcherDecorator.DECORATE;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.instrumentation.api.AgentScope;\n+import datadog.trace.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import javax.servlet.RequestDispatcher;\n+import javax.servlet.ServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class RequestDispatcherInstrumentation extends Instrumenter.Default {\n+  public RequestDispatcherInstrumentation() {\n+    super(\"servlet\", \"servlet-dispatcher\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"datadog.trace.instrumentation.servlet.ServletRequestSetter\",\n+      \"datadog.trace.agent.decorator.BaseDecorator\",\n+      packageName + \".RequestDispatcherDecorator\",\n+    };\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return not(isInterface()).and(safeHasSuperType(named(\"javax.servlet.RequestDispatcher\")));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"javax.servlet.RequestDispatcher\", String.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"forward\")\n+            .or(named(\"include\"))\n+            .and(takesArgument(0, named(\"javax.servlet.ServletRequest\")))\n+            .and(takesArgument(1, named(\"javax.servlet.ServletResponse\")))\n+            .and(isPublic()),\n+        RequestDispatcherAdvice.class.getName());\n+  }\n+\n+  public static class RequestDispatcherAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope start(\n+        @Advice.Origin(\"#m\") final String method,\n+        @Advice.This final RequestDispatcher dispatcher,\n+        @Advice.Argument(0) final ServletRequest request) {\n+      if (activeSpan() == null) {\n+        // Don't want to generate a new top-level span\n+        return null;\n+      }\n+\n+      final AgentSpan span = startSpan(\"servlet.\" + method);\n+      DECORATE.afterStart(span);\n+\n+      final String target =\n+          InstrumentationContext.get(RequestDispatcher.class, String.class).get(dispatcher);\n+      span.setTag(DDTags.RESOURCE_NAME, target);\n+\n+      // In case we lose context, inject trace into to the request.\n+      propagate().inject(span, request, SETTER);\n+\n+      // temporarily remove from request to avoid spring resource name bubbling up:\n+      request.removeAttribute(DD_SPAN_ATTRIBUTE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e440eba9a19f7476f08a84949b00c2c9ad05e43e"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 473, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}