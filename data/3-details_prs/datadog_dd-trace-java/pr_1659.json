{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTYzMzY2", "number": 1659, "title": "replace msgpack-java", "bodyText": "Replaces msgpack-java with a lighter-weight codec with better support for memory reuse/preallocation, which doesn't allocate except to publish a slice of its buffer to a consumer.\nAt the same time removes FormatWriter, the logic from MsgPackFormatWriter moves to TraceMapper and logic from JSONFormatWriter is embedded in LoggingWriter. These classes were performing different functions and would never be used interchangeably (could not publish JSON, would not log messagepack) and separating them allows us to do the right thing in each case, e.g. log traces differently without impacting reporting.\nAdopting the memory reuse of the new codec was simplified a lot by removing the second disruptor. Now, when we fill a buffer, we send it to the agent. Instead of polling the ringbuffer every 10ms and sleeping in between, sending data on the serialisation thread performs a similar function so the wait strategy now just blocks.", "createdAt": "2020-07-07T17:51:55Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1659", "merged": true, "mergeCommit": {"oid": "1329ac22ce823db4a28a5af1be14345b46ec692d"}, "closed": true, "closedAt": "2020-07-10T15:59:19Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcytGdqgBqjM1MjI0NjQ0ODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczWtKwAH2gAyNDQ1NTYzMzY2OjExMDE2YjFiYmM4NDM1YWE2Yjg0OGRkNmNmNzgxNmE2MDI0ZTAzZDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b265ace54d4edcad720bd7a9c4dc8523826caca0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b265ace54d4edcad720bd7a9c4dc8523826caca0", "committedDate": "2020-07-07T17:51:17Z", "message": "replace msgpack-java"}, "afterCommit": {"oid": "bb788929a76c264ca5713842ec9c4a290caeda1a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bb788929a76c264ca5713842ec9c4a290caeda1a", "committedDate": "2020-07-07T21:54:36Z", "message": "replace msgpack-java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb788929a76c264ca5713842ec9c4a290caeda1a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bb788929a76c264ca5713842ec9c4a290caeda1a", "committedDate": "2020-07-07T21:54:36Z", "message": "replace msgpack-java"}, "afterCommit": {"oid": "c564e337f16789c0caeaf54f5ffa2cf0b688afff", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c564e337f16789c0caeaf54f5ffa2cf0b688afff", "committedDate": "2020-07-07T22:03:30Z", "message": "replace msgpack-java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c564e337f16789c0caeaf54f5ffa2cf0b688afff", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c564e337f16789c0caeaf54f5ffa2cf0b688afff", "committedDate": "2020-07-07T22:03:30Z", "message": "replace msgpack-java"}, "afterCommit": {"oid": "0a6b4e23931a2cc25cd1d9b3274192913feb6cd7", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0a6b4e23931a2cc25cd1d9b3274192913feb6cd7", "committedDate": "2020-07-08T04:26:07Z", "message": "replace msgpack-java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a6b4e23931a2cc25cd1d9b3274192913feb6cd7", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0a6b4e23931a2cc25cd1d9b3274192913feb6cd7", "committedDate": "2020-07-08T04:26:07Z", "message": "replace msgpack-java"}, "afterCommit": {"oid": "4dd504b6ca8d9331fd2b84fed2b079f367c023c8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4dd504b6ca8d9331fd2b84fed2b079f367c023c8", "committedDate": "2020-07-08T04:37:15Z", "message": "replace msgpack-java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dd504b6ca8d9331fd2b84fed2b079f367c023c8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4dd504b6ca8d9331fd2b84fed2b079f367c023c8", "committedDate": "2020-07-08T04:37:15Z", "message": "replace msgpack-java"}, "afterCommit": {"oid": "543af4cb02554768f73c51d9dfec8bca66fd246d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/543af4cb02554768f73c51d9dfec8bca66fd246d", "committedDate": "2020-07-08T04:55:51Z", "message": "replace msgpack-java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16a6dc96c11396f2c1b8595c193867e8c0ff9844", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/16a6dc96c11396f2c1b8595c193867e8c0ff9844", "committedDate": "2020-07-08T04:58:36Z", "message": "revapi"}, "afterCommit": {"oid": "2d7c893ebb83bf94ddbe238917f70a4e24b034fb", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2d7c893ebb83bf94ddbe238917f70a4e24b034fb", "committedDate": "2020-07-08T05:09:18Z", "message": "revapi"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d7c893ebb83bf94ddbe238917f70a4e24b034fb", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2d7c893ebb83bf94ddbe238917f70a4e24b034fb", "committedDate": "2020-07-08T05:09:18Z", "message": "revapi"}, "afterCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/070dd0b07d3741620c4c533c1098718d12fed3d0", "committedDate": "2020-07-08T14:27:34Z", "message": "revapi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0ODMxMDAw", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#pullrequestreview-444831000", "createdAt": "2020-07-08T14:36:13Z", "commit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTA1NjEx", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#pullrequestreview-444905611", "createdAt": "2020-07-08T15:54:53Z", "commit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1NDo1NFrOGuunRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTo1NDo1NFrOGuunRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY1MTM5Ng==", "bodyText": "Nit: Isn't this functionally equivalent to l % 100?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r451651396", "createdAt": "2020-07-08T15:54:54Z", "author": {"login": "jbachorik"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceMapper.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import static datadog.trace.core.StringTables.DURATION;\n+import static datadog.trace.core.StringTables.ERROR;\n+import static datadog.trace.core.StringTables.META;\n+import static datadog.trace.core.StringTables.METRICS;\n+import static datadog.trace.core.StringTables.NAME;\n+import static datadog.trace.core.StringTables.PARENT_ID;\n+import static datadog.trace.core.StringTables.RESOURCE;\n+import static datadog.trace.core.StringTables.SERVICE;\n+import static datadog.trace.core.StringTables.SPAN_ID;\n+import static datadog.trace.core.StringTables.START;\n+import static datadog.trace.core.StringTables.TRACE_ID;\n+import static datadog.trace.core.StringTables.TYPE;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_KEYS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.CONSTANT_TAGS;\n+import static datadog.trace.core.serialization.msgpack.EncodingCachingStrategies.NO_CACHING;\n+\n+import datadog.trace.core.DDSpan;\n+import datadog.trace.core.serialization.msgpack.Mapper;\n+import datadog.trace.core.serialization.msgpack.Writable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public final class TraceMapper implements Mapper<List<DDSpan>> {\n+  @Override\n+  public void map(List<DDSpan> trace, Writable writable) {\n+    writable.startArray(trace.size());\n+    for (DDSpan span : trace) {\n+      writable.startMap(12);\n+      /* 1  */\n+      writable.writeUTF8(SERVICE);\n+      writable.writeString(span.getServiceName(), CONSTANT_TAGS);\n+      /* 2  */\n+      writable.writeUTF8(NAME);\n+      writable.writeString(span.getOperationName(), CONSTANT_TAGS);\n+      /* 3  */\n+      writable.writeUTF8(RESOURCE);\n+      writable.writeString(span.getResourceName(), NO_CACHING);\n+      /* 4  */\n+      writable.writeUTF8(TRACE_ID);\n+      writable.writeLong(span.getTraceId().toLong());\n+      /* 5  */\n+      writable.writeUTF8(SPAN_ID);\n+      writable.writeLong(span.getSpanId().toLong());\n+      /* 6  */\n+      writable.writeUTF8(PARENT_ID);\n+      writable.writeLong(span.getParentId().toLong());\n+      /* 7  */\n+      writable.writeUTF8(START);\n+      writable.writeLong(span.getStartTime());\n+      /* 8  */\n+      writable.writeUTF8(DURATION);\n+      writable.writeLong(span.getDurationNano());\n+      /* 9  */\n+      writable.writeUTF8(TYPE);\n+      writable.writeString(span.getType(), CONSTANT_TAGS);\n+      /* 10 */\n+      writable.writeUTF8(ERROR);\n+      writable.writeInt(span.getError());\n+      /* 11 */\n+      writable.writeUTF8(METRICS);\n+      writable.writeMap(span.getMetrics(), CONSTANT_KEYS);\n+      /* 12 */\n+      writable.writeUTF8(META);\n+      Map<String, String> baggage = span.context().getBaggageItems();\n+      Map<String, Object> tags = span.context().getTags();\n+      writable.startMap(baggage.size() + tags.size());\n+      for (Map.Entry<String, String> entry : baggage.entrySet()) {\n+        // tags and baggage may intersect, but tags take priority\n+        if (!tags.containsKey(entry.getKey())) {\n+          writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+          writable.writeObject(entry.getValue(), NO_CACHING);\n+        }\n+      }\n+      for (Map.Entry<String, Object> entry : tags.entrySet()) {\n+        writable.writeString(entry.getKey(), CONSTANT_KEYS);\n+        if (entry.getValue() instanceof Long || entry.getValue() instanceof Integer) {\n+          // TODO it would be nice not to need to do this, either because\n+          //  the agent would accept variably typed tag values, or numeric\n+          //  tags get moved to the metrics\n+          writeLongAsString(((Number) entry.getValue()).longValue(), writable);\n+        } else {\n+          writable.writeString(String.valueOf(entry.getValue()), NO_CACHING);\n+        }\n+      }\n+    }\n+  }\n+\n+  private static final byte[] DIGIT_TENS = {\n+    '0', '0', '0', '0', '0', '0', '0', '0', '0', '0',\n+    '1', '1', '1', '1', '1', '1', '1', '1', '1', '1',\n+    '2', '2', '2', '2', '2', '2', '2', '2', '2', '2',\n+    '3', '3', '3', '3', '3', '3', '3', '3', '3', '3',\n+    '4', '4', '4', '4', '4', '4', '4', '4', '4', '4',\n+    '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',\n+    '6', '6', '6', '6', '6', '6', '6', '6', '6', '6',\n+    '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',\n+    '8', '8', '8', '8', '8', '8', '8', '8', '8', '8',\n+    '9', '9', '9', '9', '9', '9', '9', '9', '9', '9',\n+  };\n+\n+  private static final byte[] DIGIT_ONES = {\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n+  };\n+\n+  private final byte[] numberByteArray = new byte[20]; // this is max long digits and sign\n+\n+  private void writeLongAsString(final long value, final Writable destination) {\n+    int pos = 20; // start from the end\n+    long l = value;\n+    boolean negative = (l < 0);\n+    if (!negative) {\n+      l = -l; // do the conversion on negative values to not overflow Long.MIN_VALUE\n+    }\n+\n+    int r;\n+    // convert 2 digits per iteration with longs until quotient fits into an int\n+    long lq;\n+    while (l <= Integer.MIN_VALUE) {\n+      lq = l / 100;\n+      r = (int) ((lq * 100) - l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0OTQ1OTQz", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#pullrequestreview-444945943", "createdAt": "2020-07-08T16:41:05Z", "commit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0MTowNVrOGuwdVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0MTowNVrOGuwdVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4MTYyMA==", "bodyText": "Would it make sense to pre-fill the known mappings into the config map?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r451681620", "createdAt": "2020-07-08T16:41:05Z", "author": {"login": "jbachorik"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Codec.java", "diffHunk": "@@ -0,0 +1,281 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public final class Codec extends ClassValue<Writer<?>> {\n+\n+  public static final Codec INSTANCE = new Codec();\n+\n+  private final Map<Class<?>, Writer<?>> config;\n+\n+  public Codec(Map<Class<?>, Writer<?>> config) {\n+    this.config = config;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public Codec() {\n+    this(Collections.<Class<?>, Writer<?>>emptyMap());\n+  }\n+\n+  @Override\n+  protected Writer<?> computeValue(Class<?> clazz) {\n+    Writer<?> writer = config.get(clazz);\n+    if (null != writer) {\n+      return writer;\n+    }\n+    if (Number.class.isAssignableFrom(clazz)) {\n+      if (Double.class == clazz) {\n+        return new DoubleWriter();\n+      }\n+      if (Float.class == clazz) {\n+        return new FloatWriter();\n+      }\n+      if (Integer.class == clazz) {\n+        return new IntWriter();\n+      }\n+      if (Long.class == clazz) {\n+        return new LongWriter();\n+      }\n+      if (Short.class == clazz) {\n+        return new ShortWriter();\n+      }\n+    }\n+    if (clazz.isArray()) {\n+      if (byte[].class == clazz) {\n+        return new ByteArrayWriter();\n+      }\n+      if (int[].class == clazz) {\n+        return new IntArrayWriter();\n+      }\n+      if (long[].class == clazz) {\n+        return new LongArrayWriter();\n+      }\n+      if (double[].class == clazz) {\n+        return new DoubleArrayWriter();\n+      }\n+      if (float[].class == clazz) {\n+        return new FloatArrayWriter();\n+      }\n+      if (short[].class == clazz) {\n+        return new ShortArrayWriter();\n+      }\n+      if (char[].class == clazz) {\n+        return new CharArrayWriter();\n+      }\n+      if (boolean[].class == clazz) {\n+        return new BooleanArrayWriter();\n+      }\n+      return new ObjectArrayWriter();\n+    }\n+    if (Boolean.class == clazz) {\n+      return new BooleanWriter();\n+    }\n+    if (CharSequence.class.isAssignableFrom(clazz)) {\n+      return CharSequenceWriter.INSTANCE;\n+    }\n+    if (Map.class.isAssignableFrom(clazz)) {\n+      return new MapWriter();\n+    }\n+    if (Collection.class.isAssignableFrom(clazz)) {\n+      return new CollectionWriter();\n+    }\n+    if (ByteBuffer.class.isAssignableFrom(clazz)) {\n+      return new ByteBufferWriter();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070dd0b07d3741620c4c533c1098718d12fed3d0"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NjgzOTE0", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#pullrequestreview-445683914", "createdAt": "2020-07-09T14:41:16Z", "commit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDo0MToxNlrOGvUTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTowMTo0M1rOGvVRQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2ODkxNQ==", "bodyText": "The comment here is wrong now...  want to document the reason for this choice?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452268915", "createdAt": "2020-07-09T14:41:16Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -55,10 +58,9 @@ public TraceProcessingDisruptor(\n             ProducerType.MULTI,\n             // use sleeping wait strategy because it reduces CPU usage,\n             // and is cheaper for application threads publishing traces\n-            new SleepingWaitStrategy(0, MILLISECONDS.toNanos(10)));\n+            new BlockingWaitStrategy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3ODk2MQ==", "bodyText": "Does this mean the trace that triggers the exception will be serialized twice?  Perhaps there should be a buffer to avoid relying on the exception?  ie, flush if the payload exceeds x, but allow it to go over by y.\nAlso, wouldn't messageCount be off by one at this point?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452278961", "createdAt": "2020-07-09T14:54:15Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3OTQwNg==", "bodyText": "what is this for?", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452279406", "createdAt": "2020-07-09T14:54:52Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/msgpack/Packer.java", "diffHunk": "@@ -0,0 +1,695 @@\n+package datadog.trace.core.serialization.msgpack;\n+\n+import java.nio.BufferOverflowException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/** Not thread-safe (use one per thread). */\n+public class Packer implements Writable, MessageFormatter {\n+\n+  private static final int UTF8_BUFFER_SIZE = 8;\n+  private static final int MAX_ARRAY_HEADER_SIZE = 5;\n+\n+  // see https://github.com/msgpack/msgpack/blob/master/spec.md\n+  private static final byte NULL = (byte) 0xC0;\n+\n+  private static final byte FALSE = (byte) 0xC2;\n+  private static final byte TRUE = (byte) 0xC3;\n+\n+  private static final byte UINT8 = (byte) 0xCC;\n+  private static final byte UINT16 = (byte) 0xCD;\n+  private static final byte UINT32 = (byte) 0xCE;\n+  private static final byte UINT64 = (byte) 0xCF;\n+\n+  private static final byte INT8 = (byte) 0xD0;\n+  private static final byte INT16 = (byte) 0xD1;\n+  private static final byte INT32 = (byte) 0xD2;\n+  private static final byte INT64 = (byte) 0xD3;\n+\n+  private static final byte FLOAT32 = (byte) 0xCA;\n+  private static final byte FLOAT64 = (byte) 0xCB;\n+\n+  private static final byte STR8 = (byte) 0xD9;\n+  private static final byte STR16 = (byte) 0xDA;\n+  private static final byte STR32 = (byte) 0xDB;\n+\n+  private static final byte BIN8 = (byte) 0xC4;\n+  private static final byte BIN16 = (byte) 0xC5;\n+  private static final byte BIN32 = (byte) 0xC6;\n+\n+  private static final byte ARRAY16 = (byte) 0xDC;\n+  private static final byte ARRAY32 = (byte) 0xDD;\n+\n+  private static final byte MAP16 = (byte) 0xDE;\n+  private static final byte MAP32 = (byte) 0xDF;\n+\n+  private static final int NEGFIXNUM = 0xE0;\n+  private static final int FIXSTR = 0xA0;\n+  private static final int FIXARRAY = 0x90;\n+  private static final int FIXMAP = 0x80;\n+\n+  private final Codec codec;\n+\n+  private final ByteBufferConsumer sink;\n+  private final ByteBuffer buffer;\n+  private int messageCount = 0;\n+\n+  private final byte[] utf8Buffer = new byte[UTF8_BUFFER_SIZE * 4];\n+\n+  public Packer(Codec codec, ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this.codec = codec;\n+    this.sink = sink;\n+    this.buffer = buffer;\n+    this.buffer.position(MAX_ARRAY_HEADER_SIZE);\n+    buffer.mark();\n+  }\n+\n+  public Packer(ByteBufferConsumer sink, ByteBuffer buffer) {\n+    this(Codec.INSTANCE, sink, buffer);\n+  }\n+\n+  @Override\n+  public <T> void format(T message, Mapper<T> mapper) {\n+    try {\n+      mapper.map(message, this);\n+      buffer.mark();\n+      ++messageCount;\n+    } catch (BufferOverflowException e) {\n+      // go back to the last successfully written message\n+      buffer.reset();\n+      if (buffer.position() == MAX_ARRAY_HEADER_SIZE) {\n+        throw e;\n+      }\n+      flush();\n+      format(message, mapper);\n+    }\n+  }\n+\n+  @Override\n+  public void flush() {\n+    buffer.flip();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4MzY4NA==", "bodyText": "So this is now a blocking call that might trigger IO, right?  Can you add a comment to that effect because that isn't obvious from the method name.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452283684", "createdAt": "2020-07-09T15:00:19Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -174,43 +177,10 @@ public void onEvent(\n       }\n     }\n \n-    private void serialize(List<DDSpan> trace, int representativeCount) throws IOException {\n+    private void serialize(List<DDSpan> trace, int representativeCount) {\n       // TODO populate `_sample_rate` metric in a way that accounts for lost/dropped traces\n+      packer.format(processor.onTraceComplete(trace), traceMapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI4NDczOQ==", "bodyText": "or when flush is called via heartbeat.", "url": "https://github.com/DataDog/dd-trace-java/pull/1659#discussion_r452284739", "createdAt": "2020-07-09T15:01:43Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -223,6 +193,33 @@ private long millisecondTime() {\n       // important: nanoTime is monotonic, currentTimeMillis is not\n       return NANOSECONDS.toMillis(System.nanoTime());\n     }\n+\n+    @Override\n+    public void accept(int messageCount, ByteBuffer buffer) {\n+      // the packer calls this when the buffer is full", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee"}, "originalPosition": 196}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/05c04dcd56eab6ab7bf82dfc5c82970ebb9d8bee", "committedDate": "2020-07-08T16:39:17Z", "message": "special case for UTF8ByteString for now"}, "afterCommit": {"oid": "66942b49b03c446a17900364f1101e58b8cf16f8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/66942b49b03c446a17900364f1101e58b8cf16f8", "committedDate": "2020-07-09T15:52:25Z", "message": "clarifying comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66942b49b03c446a17900364f1101e58b8cf16f8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/66942b49b03c446a17900364f1101e58b8cf16f8", "committedDate": "2020-07-09T15:52:25Z", "message": "clarifying comments"}, "afterCommit": {"oid": "756dbae8c3aa0f61f9aafc5f252d3dbee7087f32", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/756dbae8c3aa0f61f9aafc5f252d3dbee7087f32", "committedDate": "2020-07-09T16:01:25Z", "message": "clarifying comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "756dbae8c3aa0f61f9aafc5f252d3dbee7087f32", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/756dbae8c3aa0f61f9aafc5f252d3dbee7087f32", "committedDate": "2020-07-09T16:01:25Z", "message": "clarifying comments"}, "afterCommit": {"oid": "21d00d46b6a04aebc8ddbe06d3212a18fc992ec0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/21d00d46b6a04aebc8ddbe06d3212a18fc992ec0", "committedDate": "2020-07-09T17:38:33Z", "message": "clarifying comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21d00d46b6a04aebc8ddbe06d3212a18fc992ec0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/21d00d46b6a04aebc8ddbe06d3212a18fc992ec0", "committedDate": "2020-07-09T17:38:33Z", "message": "clarifying comments"}, "afterCommit": {"oid": "714fc96c33bb1bea0867c9663270b279d790d143", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/714fc96c33bb1bea0867c9663270b279d790d143", "committedDate": "2020-07-09T17:51:45Z", "message": "clarifying comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "714fc96c33bb1bea0867c9663270b279d790d143", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/714fc96c33bb1bea0867c9663270b279d790d143", "committedDate": "2020-07-09T17:51:45Z", "message": "clarifying comments"}, "afterCommit": {"oid": "446aab6acb84acc5660b925854a049be22af6f61", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/446aab6acb84acc5660b925854a049be22af6f61", "committedDate": "2020-07-09T18:57:36Z", "message": "clarifying comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78727c25c20e0782b1636a04b32fed8fa1f68802", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/78727c25c20e0782b1636a04b32fed8fa1f68802", "committedDate": "2020-07-09T19:56:52Z", "message": "replace msgpack-java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "446aab6acb84acc5660b925854a049be22af6f61", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/446aab6acb84acc5660b925854a049be22af6f61", "committedDate": "2020-07-09T18:57:36Z", "message": "clarifying comments"}, "afterCommit": {"oid": "0548a7b60d7c484f778f33b971206a9ad14281c6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0548a7b60d7c484f778f33b971206a9ad14281c6", "committedDate": "2020-07-09T19:56:52Z", "message": "clarifying comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f1198f40c15c2aed754225b96080fc60703a5c", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/19f1198f40c15c2aed754225b96080fc60703a5c", "committedDate": "2020-07-09T21:33:58Z", "message": "special case for UTF8ByteString for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e13f19f9f27c8718e3ac5c4b60ccdd0abcbba631", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e13f19f9f27c8718e3ac5c4b60ccdd0abcbba631", "committedDate": "2020-07-09T21:33:58Z", "message": "clarifying comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a02905de4b38c7996ff961cca0965c72b6f7cd6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3a02905de4b38c7996ff961cca0965c72b6f7cd6", "committedDate": "2020-07-09T21:36:33Z", "message": "revapi, again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0548a7b60d7c484f778f33b971206a9ad14281c6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0548a7b60d7c484f778f33b971206a9ad14281c6", "committedDate": "2020-07-09T19:56:52Z", "message": "clarifying comments"}, "afterCommit": {"oid": "3a02905de4b38c7996ff961cca0965c72b6f7cd6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3a02905de4b38c7996ff961cca0965c72b6f7cd6", "committedDate": "2020-07-09T21:36:33Z", "message": "revapi, again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11016b1bbc8435aa6b848dd6cf7816a6024e03d9", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/11016b1bbc8435aa6b848dd6cf7816a6024e03d9", "committedDate": "2020-07-09T22:23:28Z", "message": "Merge branch 'master' into rgs/msgpack"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2239, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}