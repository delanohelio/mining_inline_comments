{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MTM1MjUz", "number": 1244, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowMjozMlrODh9uKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyNTo1MlrODh-HbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQwODQwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowMjozMlrOFs_sag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowNzo1OVrOFuMMLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTIyNg==", "bodyText": "It might be better to allow some redundant work outside the critical section then do a put -- rather than using get with CacheLoader.  But we'd definitely have to measure.", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382725226", "createdAt": "2020-02-21T18:02:32Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(\n+                new CacheLoader<ClassLoader, Boolean>() {\n+                  @Override\n+                  public Boolean load(ClassLoader cl) {\n+                    for (final String name : names) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NDUzMw==", "bodyText": "You right. For me it shows 0.25 seconds faster satrtup of spring-petclinic.", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382984533", "createdAt": "2020-02-23T08:49:17Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(\n+                new CacheLoader<ClassLoader, Boolean>() {\n+                  @Override\n+                  public Boolean load(ClassLoader cl) {\n+                    for (final String name : names) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTIyNg=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3ODU0Mg==", "bodyText": "updated", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r383978542", "createdAt": "2020-02-25T16:07:59Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(\n+                new CacheLoader<ClassLoader, Boolean>() {\n+                  @Override\n+                  public Boolean load(ClassLoader cl) {\n+                    for (final String name : names) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTIyNg=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQxMDg1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODowMzoyNlrOFs_t6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowNzo0NFrOFuMLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTYxMQ==", "bodyText": "I think this should probably be an error.", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382725611", "createdAt": "2020-02-21T18:03:26Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -60,19 +69,13 @@ private boolean shouldSkipClass(final ClassLoader loader) {\n       return false;\n     }\n \n-    private boolean shouldSkipInstance(final ClassLoader loader) {\n-      return SKIP_CACHE.computeIfAbsent(loader, this);\n-    }\n-\n-    @Override\n-    public Boolean get(final ClassLoader loader) {\n-      final boolean skip = !delegatesToBootstrap(loader);\n-      if (skip) {\n-        log.debug(\n-            \"skipping classloader instance {} of type {}\", loader, loader.getClass().getName());\n+    private static boolean shouldSkipInstance(final ClassLoader loader) {\n+      try {\n+        return skipCache.get(loader);\n+      } catch (ExecutionException e) {\n+        log.warn(\"Exception while getting from cache\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg4MDMxNA==", "bodyText": "From my looking at code checked exception never might happen in get, because loader (https://github.com/DataDog/dd-trace-java/pull/1244/files#diff-4923261bc6c9ae6cc686fc457a9d2ae6R41) can't  throw exception. But contract is so vague : https://github.com/google/guava/wiki/CachesExplained#interruption", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382880314", "createdAt": "2020-02-22T03:00:33Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -60,19 +69,13 @@ private boolean shouldSkipClass(final ClassLoader loader) {\n       return false;\n     }\n \n-    private boolean shouldSkipInstance(final ClassLoader loader) {\n-      return SKIP_CACHE.computeIfAbsent(loader, this);\n-    }\n-\n-    @Override\n-    public Boolean get(final ClassLoader loader) {\n-      final boolean skip = !delegatesToBootstrap(loader);\n-      if (skip) {\n-        log.debug(\n-            \"skipping classloader instance {} of type {}\", loader, loader.getClass().getName());\n+    private static boolean shouldSkipInstance(final ClassLoader loader) {\n+      try {\n+        return skipCache.get(loader);\n+      } catch (ExecutionException e) {\n+        log.warn(\"Exception while getting from cache\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTYxMQ=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3ODM3MA==", "bodyText": "updated", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r383978370", "createdAt": "2020-02-25T16:07:44Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -60,19 +69,13 @@ private boolean shouldSkipClass(final ClassLoader loader) {\n       return false;\n     }\n \n-    private boolean shouldSkipInstance(final ClassLoader loader) {\n-      return SKIP_CACHE.computeIfAbsent(loader, this);\n-    }\n-\n-    @Override\n-    public Boolean get(final ClassLoader loader) {\n-      final boolean skip = !delegatesToBootstrap(loader);\n-      if (skip) {\n-        log.debug(\n-            \"skipping classloader instance {} of type {}\", loader, loader.getClass().getName());\n+    private static boolean shouldSkipInstance(final ClassLoader loader) {\n+      try {\n+        return skipCache.get(loader);\n+      } catch (ExecutionException e) {\n+        log.warn(\"Exception while getting from cache\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcyNTYxMQ=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ3MzA4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyNTo1MlrOFtAVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo0OTowNlrOFuS5Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw==", "bodyText": "We might also want to set the concurrency level.  I picked 8 for the type cache.\nAlthough, we should add a configuration option in a separate PR -- and maybe auto-select by availableProcessors.", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382735813", "createdAt": "2020-02-21T18:25:52Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MzUwNA==", "bodyText": "Be careful with availableProcessors - it may be a lie in k8s land...", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r382753504", "createdAt": "2020-02-21T19:04:29Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3Mzk3MA==", "bodyText": "Yes, that is true.  We probably want to a cap on it.  Although, I suspect for concurrency level we're better off err-ing slightly on the high-side.", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r384073970", "createdAt": "2020-02-25T19:22:37Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4ODQxMQ==", "bodyText": "capped on 8.", "url": "https://github.com/DataDog/dd-trace-java/pull/1244#discussion_r384088411", "createdAt": "2020-02-25T19:49:06Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -104,10 +108,23 @@ private boolean loadsExpectedClass(final ClassLoader loader, final Class<?> expe\n   }\n \n   public static class ClassLoaderHasClassMatcher\n-      extends ElementMatcher.Junction.AbstractBase<ClassLoader>\n-      implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n-\n-    private final WeakMap<ClassLoader, Boolean> cache = newWeakMap();\n+      extends ElementMatcher.Junction.AbstractBase<ClassLoader> {\n+\n+    private final LoadingCache<ClassLoader, Boolean> cache =\n+        CacheBuilder.newBuilder()\n+            .weakKeys()\n+            .build(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNTgxMw=="}, "originalCommit": {"oid": "37bcb4e288b0c501d3df3b44048b2f50847236d3"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 535, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}