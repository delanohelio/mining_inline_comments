{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzU3MDc0", "number": 2172, "title": "metric buffering + payload format change", "bodyText": "We don't need dbtype on the metrics any more\nWe need a buffering mechanism for when the agent is in a degraded state", "createdAt": "2020-12-08T10:39:12Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2172", "merged": true, "mergeCommit": {"oid": "9dee72e7c7eb5219e2dd2dcc575ea6f538143376"}, "closed": true, "closedAt": "2020-12-09T12:34:48Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkHwZBABqjQwODQxMTA1MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkdQ_jgFqTU0ODEwMDUyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a3030ecb4d94f3243488e3de507140c38cfcee2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9a3030ecb4d94f3243488e3de507140c38cfcee2", "committedDate": "2020-12-08T10:38:36Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}, "afterCommit": {"oid": "739575fbe32aa3713ae0b121d2c0e7ce101a8238", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/739575fbe32aa3713ae0b121d2c0e7ce101a8238", "committedDate": "2020-12-08T10:40:31Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "739575fbe32aa3713ae0b121d2c0e7ce101a8238", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/739575fbe32aa3713ae0b121d2c0e7ce101a8238", "committedDate": "2020-12-08T10:40:31Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}, "afterCommit": {"oid": "449f84541b279351a120aba8f0c89784c079a0cd", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/449f84541b279351a120aba8f0c89784c079a0cd", "committedDate": "2020-12-08T12:51:12Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "449f84541b279351a120aba8f0c89784c079a0cd", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/449f84541b279351a120aba8f0c89784c079a0cd", "committedDate": "2020-12-08T12:51:12Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}, "afterCommit": {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d7ce0e023b69e9fb937640484f5ee1a19561485f", "committedDate": "2020-12-08T13:01:10Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MzQyOTE5", "url": "https://github.com/DataDog/dd-trace-java/pull/2172#pullrequestreview-547342919", "createdAt": "2020-12-08T15:26:09Z", "commit": {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNjowOVrOIBjMHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyNjowOVrOIBjMHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5NjAyOQ==", "bodyText": "So I'm not completely sure about how we arrive at 100 seconds, with a queue of  10 elements.", "url": "https://github.com/DataDog/dd-trace-java/pull/2172#discussion_r538496029", "createdAt": "2020-12-08T15:26:09Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/common/metrics/OkHttpSinkTest.groovy", "diffHunk": "@@ -48,6 +51,53 @@ class OkHttpSinkTest extends DDSpecification {\n     OK          | 201\n   }\n \n+  def \"degrade to async mode when agent slow to respond\"() {\n+    // metrics payloads are relatively large and we don't want to copy them,\n+    // and we typically expect the agent to respond well within the aggregation\n+    // window, so will send synchronously whenever possible to avoid allocating\n+    // a copy of the payload. When the agent is slow to respond, we degrade to\n+    // an asynchronous mode where up to 100 seconds of requests are copied and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDI0MzIw", "url": "https://github.com/DataDog/dd-trace-java/pull/2172#pullrequestreview-547424320", "createdAt": "2020-12-08T16:47:51Z", "commit": {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0Nzo1MVrOIBo31Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0Nzo1MVrOIBo31Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4OTE0MQ==", "bodyText": "This will only trigger when responses from the agent are slow (more than a second by default). Do we want to take error responses from the agent into account?", "url": "https://github.com/DataDog/dd-trace-java/pull/2172#discussion_r538589141", "createdAt": "2020-12-08T16:47:51Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/metrics/OkHttpSink.java", "diffHunk": "@@ -7,47 +7,112 @@\n import static datadog.trace.core.http.OkHttpUtils.buildHttpClient;\n import static datadog.trace.core.http.OkHttpUtils.msgpackRequestBodyOf;\n import static datadog.trace.core.http.OkHttpUtils.prepareRequest;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n \n+import datadog.trace.util.AgentTaskScheduler;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import lombok.extern.slf4j.Slf4j;\n import okhttp3.HttpUrl;\n import okhttp3.OkHttpClient;\n+import okhttp3.Request;\n+import org.jctools.queues.SpscArrayQueue;\n \n+@Slf4j\n public final class OkHttpSink implements Sink, EventListener {\n \n   private final OkHttpClient client;\n   private final HttpUrl metricsUrl;\n   private final List<EventListener> listeners;\n+  private final SpscArrayQueue<Request> enqueuedRequests = new SpscArrayQueue<>(10);\n+  private final AtomicLong lastRequestTime = new AtomicLong();\n+  private final AtomicLong asyncRequestCounter = new AtomicLong();\n+  private final long asyncThresholdLatency;\n+\n+  private final AtomicBoolean asyncTaskStarted = new AtomicBoolean(false);\n+  private volatile AgentTaskScheduler.Scheduled<OkHttpSink> future;\n \n   public OkHttpSink(String agentUrl, long timeoutMillis) {\n     this(buildHttpClient(HttpUrl.get(agentUrl), timeoutMillis), agentUrl, \"v0.5/stats\");\n   }\n \n   public OkHttpSink(OkHttpClient client, String agentUrl, String path) {\n+    this(client, agentUrl, path, SECONDS.toNanos(1));\n+  }\n+\n+  public OkHttpSink(OkHttpClient client, String agentUrl, String path, long asyncThresholdLatency) {\n     this.client = client;\n     this.metricsUrl = HttpUrl.get(agentUrl).resolve(path);\n     this.listeners = new CopyOnWriteArrayList<>();\n+    this.asyncThresholdLatency = asyncThresholdLatency;\n   }\n \n   @Override\n   public void accept(int messageCount, ByteBuffer buffer) {\n-    try (final okhttp3.Response response =\n-        client\n-            .newCall(\n-                prepareRequest(metricsUrl)\n-                    .put(msgpackRequestBodyOf(Collections.singletonList(buffer)))\n-                    .build())\n-            .execute()) {\n+    // if the agent is healthy, then we can send on this thread,\n+    // without copying the buffer, otherwise this needs to be async,\n+    // so need to copy and buffer the request, and let it be executed\n+    // on the main task scheduler as a last resort\n+    if (lastRequestTime.get() < asyncThresholdLatency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2446eb706ca38bd1c2cd7c02dea50d1ceb5bb0d2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2446eb706ca38bd1c2cd7c02dea50d1ceb5bb0d2", "committedDate": "2020-12-09T11:19:21Z", "message": "get rid of unused DBType field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbcfa79f4649b43a0538d7a364ae53963c6f031f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dbcfa79f4649b43a0538d7a364ae53963c6f031f", "committedDate": "2020-12-09T11:19:21Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "113aca61c67deec7b9c9993ab7c3884d7bff024a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/113aca61c67deec7b9c9993ab7c3884d7bff024a", "committedDate": "2020-12-09T11:19:21Z", "message": "comment about buffering"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7ce0e023b69e9fb937640484f5ee1a19561485f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d7ce0e023b69e9fb937640484f5ee1a19561485f", "committedDate": "2020-12-08T13:01:10Z", "message": "implement a buffering mechanism for requests when the agent is slow to respond"}, "afterCommit": {"oid": "113aca61c67deec7b9c9993ab7c3884d7bff024a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/113aca61c67deec7b9c9993ab7c3884d7bff024a", "committedDate": "2020-12-09T11:19:21Z", "message": "comment about buffering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MTAwNTI0", "url": "https://github.com/DataDog/dd-trace-java/pull/2172#pullrequestreview-548100524", "createdAt": "2020-12-09T11:44:19Z", "commit": {"oid": "113aca61c67deec7b9c9993ab7c3884d7bff024a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2712, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}