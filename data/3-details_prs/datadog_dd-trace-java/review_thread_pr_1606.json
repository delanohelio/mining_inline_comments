{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTIwMTc2", "number": 1606, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNToyOVrOEHIm0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDozNDozOVrOEHIzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTE2NDk2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNToyOVrOGmWtPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDozOTozNFrOGmXL1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MTEwMw==", "bodyText": "What is the reason for this special treatment of META-INF/services folder?", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442871103", "createdAt": "2020-06-19T14:25:29Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -27,35 +25,40 @@\n \n   private final String name;\n   private final FileNotInInternalJar notFound;\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n   private final Set<String> packages = new HashSet<>();\n   private final JarFile bootstrapJarFile;\n \n+  private static final ThreadLocal<StringBuilder> JAR_ENTRY_QUERY =\n+      new ThreadLocal<StringBuilder>() {\n+        @Override\n+        protected StringBuilder initialValue() {\n+          return new StringBuilder(128);\n+        }\n+      };\n+\n   private WeakReference<Pair<String, JarEntry>> cache = NULL;\n \n   InternalJarURLHandler(final String internalJarFileName, final URL bootstrapJarLocation) {\n     this.name = internalJarFileName;\n     this.notFound = new FileNotInInternalJar(internalJarFileName);\n     final String filePrefix = internalJarFileName + \"/\";\n     JarFile jarFile = null;\n-    String currentDir = \"$\";\n     try {\n       if (bootstrapJarLocation != null) {\n         jarFile = new JarFile(new File(bootstrapJarLocation.toURI()), false);\n         final Enumeration<JarEntry> entries = jarFile.entries();\n         while (entries.hasMoreElements()) {\n           final JarEntry entry = entries.nextElement();\n-          if (!entry.isDirectory() && entry.getName().startsWith(filePrefix)) {\n-            String name = entry.getName();\n-            // remove data suffix\n-            int end = name.endsWith(\".classdata\") ? name.length() - 4 : name.length();\n-            String fileName = name.substring(internalJarFileName.length(), end);\n-            filenameToEntry.put(fileName, entry);\n-            if (fileName.endsWith(\".class\") && !fileName.startsWith(currentDir)) {\n-              int fileNameStart = fileName.lastIndexOf('/');\n-              if (fileNameStart != -1) {\n-                currentDir = fileName.substring(1, fileNameStart);\n-                String currentPackage = currentDir.replace('/', '.');\n+          String name = entry.getName();\n+          if (name.startsWith(filePrefix)) {\n+            if (entry.isDirectory()) {\n+              int prefix = filePrefix.length();\n+              if (name.contains(\"META-INF/services/\")) {\n+                prefix += \"META-INF/services/\".length();\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3ODkzNA==", "bodyText": "We package some stuff in META-INF - this is a bit hacky I agree, but we can't infer packages from the contents of the jar properly otherwise. I am investigating ways to store package info in the manifest and set it during the build to eliminate this scan entirely - should be less error prone.", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442878934", "createdAt": "2020-06-19T14:39:34Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -27,35 +25,40 @@\n \n   private final String name;\n   private final FileNotInInternalJar notFound;\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n   private final Set<String> packages = new HashSet<>();\n   private final JarFile bootstrapJarFile;\n \n+  private static final ThreadLocal<StringBuilder> JAR_ENTRY_QUERY =\n+      new ThreadLocal<StringBuilder>() {\n+        @Override\n+        protected StringBuilder initialValue() {\n+          return new StringBuilder(128);\n+        }\n+      };\n+\n   private WeakReference<Pair<String, JarEntry>> cache = NULL;\n \n   InternalJarURLHandler(final String internalJarFileName, final URL bootstrapJarLocation) {\n     this.name = internalJarFileName;\n     this.notFound = new FileNotInInternalJar(internalJarFileName);\n     final String filePrefix = internalJarFileName + \"/\";\n     JarFile jarFile = null;\n-    String currentDir = \"$\";\n     try {\n       if (bootstrapJarLocation != null) {\n         jarFile = new JarFile(new File(bootstrapJarLocation.toURI()), false);\n         final Enumeration<JarEntry> entries = jarFile.entries();\n         while (entries.hasMoreElements()) {\n           final JarEntry entry = entries.nextElement();\n-          if (!entry.isDirectory() && entry.getName().startsWith(filePrefix)) {\n-            String name = entry.getName();\n-            // remove data suffix\n-            int end = name.endsWith(\".classdata\") ? name.length() - 4 : name.length();\n-            String fileName = name.substring(internalJarFileName.length(), end);\n-            filenameToEntry.put(fileName, entry);\n-            if (fileName.endsWith(\".class\") && !fileName.startsWith(currentDir)) {\n-              int fileNameStart = fileName.lastIndexOf('/');\n-              if (fileNameStart != -1) {\n-                currentDir = fileName.substring(1, fileNameStart);\n-                String currentPackage = currentDir.replace('/', '.');\n+          String name = entry.getName();\n+          if (name.startsWith(filePrefix)) {\n+            if (entry.isDirectory()) {\n+              int prefix = filePrefix.length();\n+              if (name.contains(\"META-INF/services/\")) {\n+                prefix += \"META-INF/services/\".length();\n+              }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MTEwMw=="}, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTE2NTA2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNTozMVrOGmWtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoyNTozMVrOGmWtUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3MTEyMA==", "bodyText": "nice one!", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442871120", "createdAt": "2020-06-19T14:25:31Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -27,35 +25,40 @@\n \n   private final String name;\n   private final FileNotInInternalJar notFound;\n-  private final Map<String, JarEntry> filenameToEntry = new HashMap<>();\n   private final Set<String> packages = new HashSet<>();\n   private final JarFile bootstrapJarFile;\n \n+  private static final ThreadLocal<StringBuilder> JAR_ENTRY_QUERY =\n+      new ThreadLocal<StringBuilder>() {\n+        @Override\n+        protected StringBuilder initialValue() {\n+          return new StringBuilder(128);\n+        }\n+      };\n+\n   private WeakReference<Pair<String, JarEntry>> cache = NULL;\n \n   InternalJarURLHandler(final String internalJarFileName, final URL bootstrapJarLocation) {\n     this.name = internalJarFileName;\n     this.notFound = new FileNotInInternalJar(internalJarFileName);\n     final String filePrefix = internalJarFileName + \"/\";\n     JarFile jarFile = null;\n-    String currentDir = \"$\";\n     try {\n       if (bootstrapJarLocation != null) {\n         jarFile = new JarFile(new File(bootstrapJarLocation.toURI()), false);\n         final Enumeration<JarEntry> entries = jarFile.entries();\n         while (entries.hasMoreElements()) {\n           final JarEntry entry = entries.nextElement();\n-          if (!entry.isDirectory() && entry.getName().startsWith(filePrefix)) {\n-            String name = entry.getName();\n-            // remove data suffix\n-            int end = name.endsWith(\".classdata\") ? name.length() - 4 : name.length();\n-            String fileName = name.substring(internalJarFileName.length(), end);\n-            filenameToEntry.put(fileName, entry);\n-            if (fileName.endsWith(\".class\") && !fileName.startsWith(currentDir)) {\n-              int fileNameStart = fileName.lastIndexOf('/');\n-              if (fileNameStart != -1) {\n-                currentDir = fileName.substring(1, fileNameStart);\n-                String currentPackage = currentDir.replace('/', '.');\n+          String name = entry.getName();\n+          if (name.startsWith(filePrefix)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTE5Njc0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDozNDozOVrOGmXBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0NjoxM1rOGmXZtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NjIwNg==", "bodyText": "Suggestion... instead of resetting this to 0 each time then calling sb.append(this.name), make the StringBuilder a non-static field, prepopulate it with this.name and reset to this.name.size() to avoid recopying it each time.", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442876206", "createdAt": "2020-06-19T14:34:39Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -90,7 +93,14 @@ protected URLConnection openConnection(final URL url) throws IOException {\n     // and the key will be a new object each time.\n     Pair<String, JarEntry> pair = cache.get();\n     if (null == pair || !filename.equals(pair.getLeft())) {\n-      final JarEntry entry = filenameToEntry.get(filename);\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NzgwNA==", "bodyText": "could do but no - I thought about it - but we save like a 5 chars copy", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442877804", "createdAt": "2020-06-19T14:37:32Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -90,7 +93,14 @@ protected URLConnection openConnection(final URL url) throws IOException {\n     // and the key will be a new object each time.\n     Pair<String, JarEntry> pair = cache.get();\n     if (null == pair || !filename.equals(pair.getLeft())) {\n-      final JarEntry entry = filenameToEntry.get(filename);\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NjIwNg=="}, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MDg0NA==", "bodyText": "isn't that multiplied over the many jar entries though?  what's the downside?", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442880844", "createdAt": "2020-06-19T14:43:04Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -90,7 +93,14 @@ protected URLConnection openConnection(final URL url) throws IOException {\n     // and the key will be a new object each time.\n     Pair<String, JarEntry> pair = cache.get();\n     if (null == pair || !filename.equals(pair.getLeft())) {\n-      final JarEntry entry = filenameToEntry.get(filename);\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NjIwNg=="}, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjQ4NA==", "bodyText": "The downside is making the change and getting a clean build, to save a nanosecond for at most the 10,000 classes we bundle. Of those 10,000 classes, at least 4000 are never loaded, so we're talking about saving 6000ns or 6us on seconds, for what will amount to about an hour of my time.", "url": "https://github.com/DataDog/dd-trace-java/pull/1606#discussion_r442882484", "createdAt": "2020-06-19T14:46:13Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/InternalJarURLHandler.java", "diffHunk": "@@ -90,7 +93,14 @@ protected URLConnection openConnection(final URL url) throws IOException {\n     // and the key will be a new object each time.\n     Pair<String, JarEntry> pair = cache.get();\n     if (null == pair || !filename.equals(pair.getLeft())) {\n-      final JarEntry entry = filenameToEntry.get(filename);\n+      StringBuilder sb = JAR_ENTRY_QUERY.get();\n+      sb.append(this.name).append(filename);\n+      if (filename.endsWith(\".class\")) {\n+        sb.append(\"data\");\n+      }\n+      String classFileName = sb.toString();\n+      sb.setLength(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3NjIwNg=="}, "originalCommit": {"oid": "7b00bcc701556637e22bfe3f5edfbb65e17f6306"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 89, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}