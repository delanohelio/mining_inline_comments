{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzM5NjQ5", "number": 1403, "title": "Check jax-rs AsyncResponse for span before starting new one", "bodyText": "This will prevent the request from being broken due to replacing the unfinished span.", "createdAt": "2020-04-27T20:49:50Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1403", "merged": true, "mergeCommit": {"oid": "03b6f578927f5eb50eccc7f610eefa816a9d813f"}, "closed": true, "closedAt": "2020-04-28T17:56:18Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb0tn4AH2gAyNDA5NzM5NjQ5OjJlOGY2OTUxN2NkMWM1YTg2ODBhOTkzNjg1ZGQyNjhlMjU1YjIxM2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccHSeygFqTQwMjA1NTIyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2e8f69517cd1c5a8680a993685dd268e255b213c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2e8f69517cd1c5a8680a993685dd268e255b213c", "committedDate": "2020-04-27T19:46:56Z", "message": "Check jax-rs AsyncResponse for span before starting new one\n\nThis will prevent the request from being broken due to replacing the unfinished span."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzIwNzA5", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#pullrequestreview-401320709", "createdAt": "2020-04-27T20:57:48Z", "commit": {"oid": "2e8f69517cd1c5a8680a993685dd268e255b213c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1Nzo0OFrOGM3YIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo1Nzo0OFrOGM3YIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0MzM5NA==", "bodyText": "This is not immediately related, though I discovered this problem in the same investigation and it is tangentially related...\nWhen an executor has multiple execute methods, one calling the other, previously they were both instrumented and we would see Failed to set continuation because another continuation is already set log messages.  This is because the first call would create a continuation, set it on the task, then call the next execute method, which would do the same, but it would close the second one and keep the first.  These log messages were a red herring for my investigation as it didn't actually impact the application reporting.", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#discussion_r416143394", "createdAt": "2020-04-27T20:57:48Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java", "diffHunk": "@@ -44,7 +45,7 @@\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n     transformers.put(\n-        named(\"execute\").and(takesArgument(0, Runnable.class)),\n+        named(\"execute\").and(takesArgument(0, Runnable.class)).and(takesArguments(1)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8f69517cd1c5a8680a993685dd268e255b213c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDA1OTYx", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#pullrequestreview-401405961", "createdAt": "2020-04-27T23:53:18Z", "commit": {"oid": "2e8f69517cd1c5a8680a993685dd268e255b213c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzo1MzoxOFrOGM8hLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzo1MzoxOFrOGM8hLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyNzYzMA==", "bodyText": "what's the point to creating nested if? why not ? :\nif (asyncResponse != null && !asyncResponse.isSuspended()) {\t\n     InstrumentationContext.get(AsyncResponse.class, AgentSpan.class).put(asyncResponse, span);\t\n}\nif (asyncResponse == null  || !asyncResponse.isSuspended()) {\n    DECORATE.beforeFinish(span);\n    span.finish();\n}", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#discussion_r416227630", "createdAt": "2020-04-27T23:53:18Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsInstrumentation.java", "diffHunk": "@@ -110,16 +140,11 @@ public static void stopSpan(\n         return;\n       }\n \n-      AsyncResponse asyncResponse = null;\n-      for (final Object arg : args) {\n-        if (arg instanceof AsyncResponse) {\n-          asyncResponse = (AsyncResponse) arg;\n-          break;\n+      if (asyncResponse == null || !asyncResponse.isSuspended()) {\n+        if (asyncResponse != null && !asyncResponse.isSuspended()) {\n+          // Clear span from the asyncResponse\n+          InstrumentationContext.get(AsyncResponse.class, AgentSpan.class).put(asyncResponse, null);\n         }\n-      }\n-      if (asyncResponse != null && asyncResponse.isSuspended()) {\n-        InstrumentationContext.get(AsyncResponse.class, AgentSpan.class).put(asyncResponse, span);\n-      } else {\n         DECORATE.beforeFinish(span);\n         span.finish();\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e8f69517cd1c5a8680a993685dd268e255b213c"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90987a8d232e30705ae307b4c9fb267e22dc9adf", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/90987a8d232e30705ae307b4c9fb267e22dc9adf", "committedDate": "2020-04-28T14:12:12Z", "message": "Merge branch 'master' into tyler/jax-rs-nested-async"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f69da615802f0bb5f75aa0c45c57848ee3552d0", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1f69da615802f0bb5f75aa0c45c57848ee3552d0", "committedDate": "2020-04-28T14:14:59Z", "message": "Remove nested if."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDAyNzQy", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#pullrequestreview-402002742", "createdAt": "2020-04-28T16:21:00Z", "commit": {"oid": "1f69da615802f0bb5f75aa0c45c57848ee3552d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyMTowMFrOGNcT1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoyMTowMFrOGNcT1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0ODUwMw==", "bodyText": "And this doesn't need to be done for datadog.trace.instrumentation.jaxrs1.JaxRsAnnotationsInstrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#discussion_r416748503", "createdAt": "2020-04-28T16:21:00Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/jax-rs-annotations-2/src/main/java/datadog/trace/instrumentation/jaxrs2/JaxRsAnnotationsInstrumentation.java", "diffHunk": "@@ -83,7 +84,28 @@ public JaxRsAnnotationsInstrumentation() {\n \n     @Advice.OnMethodEnter(suppress = Throwable.class)\n     public static AgentScope nameSpan(\n-        @Advice.This final Object target, @Advice.Origin final Method method) {\n+        @Advice.This final Object target,\n+        @Advice.Origin final Method method,\n+        @Advice.AllArguments final Object[] args,\n+        @Advice.Local(\"asyncResponse\") AsyncResponse asyncResponse) {\n+      ContextStore<AsyncResponse, AgentSpan> contextStore = null;\n+      for (final Object arg : args) {\n+        if (arg instanceof AsyncResponse) {\n+          asyncResponse = (AsyncResponse) arg;\n+          contextStore = InstrumentationContext.get(AsyncResponse.class, AgentSpan.class);\n+          if (contextStore.get(asyncResponse) != null) {\n+            /**\n+             * We are probably in a recursive call and don't want to start a new span because it\n+             * would replace the existing span in the asyncResponse and cause it to never finish. We\n+             * could work around this by using a list instead, but we likely don't want the extra\n+             * span anyway.\n+             */\n+            return null;\n+          }\n+          break;\n+        }\n+      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f69da615802f0bb5f75aa0c45c57848ee3552d0"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDU1MjI4", "url": "https://github.com/DataDog/dd-trace-java/pull/1403#pullrequestreview-402055228", "createdAt": "2020-04-28T17:25:29Z", "commit": {"oid": "1f69da615802f0bb5f75aa0c45c57848ee3552d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2442, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}