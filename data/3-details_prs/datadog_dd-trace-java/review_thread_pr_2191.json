{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2ODI5NzA5", "number": 2191, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjoyOToyMFrOFD9rHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjoyOToyMFrOFD9rHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzAwNTExOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjoyOToyMFrOID2uNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMDo0NFrOIEBnMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA==", "bodyText": "So this can be and is overridden in some instrumentations, e.g. datadog.trace.instrumentation.slf4j.mdc.MDCInjectionInstrumentation, meaning that they could be installed even though the tracing is off. It feels like there should be a separate flag for profiling, and some more logic where the enabled field is being set.", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r540913204", "createdAt": "2020-12-11T12:29:20Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MjQ3Ng==", "bodyText": "And I thought it was easy :(\nThere is a separate flag for profiling - so, in theory each instrumentation should check whether its target system is enabled. Argh, I really don't want to redo all the instrumentation to introduce the concept of the 'system' (eg. profiling, tracing) but might have to do it, unless someone has a better idea ...", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r540972476", "createdAt": "2020-12-11T14:09:26Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMzc3OA==", "bodyText": "I think that the default should be that the instrumentations shouldn't care if they don't know that they explicitly want to be enabled with profiling only.\nI would  add a separate interface that you could add to the instrumentations that should be enabled with only the profiler enabled, and then only call the instrument method for instrumentations with that interface in installBytebuddyAgent method when we're in the profiler only state. (What I wouldn't give for default methods on interfaces)", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r541003778", "createdAt": "2020-12-11T14:54:25Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxMTY5MQ==", "bodyText": "@bantonsson The problem here is the other way around - I want non-profiler instrumentations disabled when only profiling is enabled.\nIMO, it makes sense for tracing specific instrumentations to check whether tracing is enabled before they announce themselves as enabled-by-default.\nActually, this seems to be the same problem for jmxfetch - as it is now you can not enable jmxfetch without enabling tracing. And if we would change things to initialize the agent when only jmxfetch is enabled we would also load a bunch of integrations the user really don't care for.", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r541011691", "createdAt": "2020-12-11T15:05:48Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAxNTMyMw==", "bodyText": "@jbachorik Yes, that's what I said. That you should only activate the instrumentations that specifically says that they want to be enabled in the profiler only mode, e.g. by implementing a specific marker interface and adding a check in datadog/trace/agent/tooling/AgentInstaller.java:114.", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r541015323", "createdAt": "2020-12-11T15:10:52Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0MDUwOQ==", "bodyText": "IMO, it should be the instrumentation which knows for which system it is targeted - and by the marker interface we are adding that exact information only we are externalizing the enablement logic to AgentInstaller. Also, I am really not fond of using instanceof to signal something which is inherently a property of the instance. But hey, if that makes this PR pass ... \ud83e\udd37\nWhat about extending Instrumentor.Default with something like targetSystem() and then use that information to load that integration in AgentInstaller as suggested? Could make Instrumentor.Tracing and Instrumentor.Profiling subclasses to serve as parents for respectively targeted instrumentations.", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r541040509", "createdAt": "2020-12-11T15:45:28Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1MDIxMw==", "bodyText": "I think it is messy the way it is right now, with some logic hidden away in Instrumenter.Default at line 74, but you're right, there's no need to make it even messier.\nIt's probably better to add something like targetSystem, or how you would like to call it, as you said, but it should end up on the Instrumentation interface (there are only very few direct implementers of it), so it can be checked from the outside by the agent installer.", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r541050213", "createdAt": "2020-12-11T15:59:17Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTYzMg==", "bodyText": "Ok, I have updated the impl based on the previous conversation.", "url": "https://github.com/DataDog/dd-trace-java/pull/2191#discussion_r541091632", "createdAt": "2020-12-11T17:00:44Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -294,7 +294,9 @@ public void postMatch(\n     }\n \n     protected boolean defaultEnabled() {\n-      return Config.get().isIntegrationsEnabled();\n+      // by default an instrumentation is guarded by both tracing and the particular integration\n+      // being active\n+      return Config.get().isTraceEnabled() && Config.get().isIntegrationsEnabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkxMzIwNA=="}, "originalCommit": {"oid": "d7064a2cff0b717ff09586c4ba9df3ddccccafc3"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4529, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}