{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODY1ODMw", "number": 2137, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyMTo0MFrOE_CARg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyMjoxMlrOE_E3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTI4NTgyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyMTo0MFrOH8gQBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyODowM1rOH8g23Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwNDk5Nw==", "bodyText": "Won't this also match when to is in a sub package as well, i.e. to = \"foo/bar/baz/SomeClass\" and from = \"foo/bar/OtherClass\" ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533204997", "createdAt": "2020-12-01T09:21:40Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -81,13 +81,8 @@\n     return references;\n   }\n \n-  /**\n-   * Get the package of an internal class name.\n-   *\n-   * <p>foo/bar/Baz -> foo/bar/\n-   */\n-  private static String internalPackageName(final String internalName) {\n-    return internalName.replaceAll(\"/[^/]+$\", \"\");\n+  private static boolean samePackage(String from, String to) {\n+    return from.regionMatches(0, to, 0, from.lastIndexOf('/') + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae13bf444ca29216a0ffd88cb6f7db5e1cf18dc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIxNDk0MQ==", "bodyText": "\ud83e\udd26", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533214941", "createdAt": "2020-12-01T09:28:03Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -81,13 +81,8 @@\n     return references;\n   }\n \n-  /**\n-   * Get the package of an internal class name.\n-   *\n-   * <p>foo/bar/Baz -> foo/bar/\n-   */\n-  private static String internalPackageName(final String internalName) {\n-    return internalName.replaceAll(\"/[^/]+$\", \"\");\n+  private static boolean samePackage(String from, String to) {\n+    return from.regionMatches(0, to, 0, from.lastIndexOf('/') + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwNDk5Nw=="}, "originalCommit": {"oid": "dae13bf444ca29216a0ffd88cb6f7db5e1cf18dc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTMxMTM3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToyNDo0MFrOH8ghLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTo0ODozOFrOH8imeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwOTM4OQ==", "bodyText": "Could we pull out the getInternalName() calls? Even though they're just substring calls it feels unnecessary.", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533209389", "createdAt": "2020-12-01T09:24:40Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -98,8 +93,7 @@ private static String internalPackageName(final String internalName) {\n   private static Reference.Flag computeMinimumClassAccess(final Type from, final Type to) {\n     if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n       return Reference.Flag.PRIVATE_OR_HIGHER;\n-    } else if (internalPackageName(from.getInternalName())\n-        .equals(internalPackageName(to.getInternalName()))) {\n+    } else if (samePackage(from.getInternalName(), to.getInternalName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae13bf444ca29216a0ffd88cb6f7db5e1cf18dc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0MzUxMg==", "bodyText": "Yes, I hadn't realised this was allocating a substring every time (this was just a search for all String.replaceAll after yesterday's find) - I've changed things to avoid calling it more often than necessary.", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533243512", "createdAt": "2020-12-01T09:48:38Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -98,8 +93,7 @@ private static String internalPackageName(final String internalName) {\n   private static Reference.Flag computeMinimumClassAccess(final Type from, final Type to) {\n     if (from.getInternalName().equalsIgnoreCase(to.getInternalName())) {\n       return Reference.Flag.PRIVATE_OR_HIGHER;\n-    } else if (internalPackageName(from.getInternalName())\n-        .equals(internalPackageName(to.getInternalName()))) {\n+    } else if (samePackage(from.getInternalName(), to.getInternalName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwOTM4OQ=="}, "originalCommit": {"oid": "dae13bf444ca29216a0ffd88cb6f7db5e1cf18dc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTc1NjA4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/google-http-client/src/main/java/datadog/trace/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyMjoxMlrOH8lFvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMTowNTowMFrOH8nhtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDI4NA==", "bodyText": "could this use url.replace(\"%20\", \"+\") since it's just a literal replacement and no regex is involved?", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533284284", "createdAt": "2020-12-01T10:22:12Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/google-http-client/src/main/java/datadog/trace/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -23,7 +25,7 @@ protected URI url(final HttpRequest httpRequest) throws URISyntaxException {\n     // Google uses %20 (space) instead of \"+\" for spaces in the fragment\n     // Add \"+\" back for consistency with the other http client instrumentations\n     final String url = httpRequest.getUrl().build();\n-    final String fixedUrl = url.replaceAll(\"%20\", \"+\");\n+    final String fixedUrl = URL_REPLACEMENT.matcher(url).replaceAll(\"+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMxOTE0MA==", "bodyText": "Here's the implementation of that in JDK8:\n    public String replace(CharSequence target, CharSequence replacement) {\n        return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(\n                this).replaceAll(Matcher.quoteReplacement(replacement.toString()));\n    }", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533319140", "createdAt": "2020-12-01T10:56:16Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/google-http-client/src/main/java/datadog/trace/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -23,7 +25,7 @@ protected URI url(final HttpRequest httpRequest) throws URISyntaxException {\n     // Google uses %20 (space) instead of \"+\" for spaces in the fragment\n     // Add \"+\" back for consistency with the other http client instrumentations\n     final String url = httpRequest.getUrl().build();\n-    final String fixedUrl = url.replaceAll(\"%20\", \"+\");\n+    final String fixedUrl = URL_REPLACEMENT.matcher(url).replaceAll(\"+\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDI4NA=="}, "originalCommit": {"oid": "9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMyNDIxMw==", "bodyText": "thanks, I'd forgotten JDK8 still used that approach", "url": "https://github.com/DataDog/dd-trace-java/pull/2137#discussion_r533324213", "createdAt": "2020-12-01T11:05:00Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/google-http-client/src/main/java/datadog/trace/instrumentation/googlehttpclient/GoogleHttpClientDecorator.java", "diffHunk": "@@ -23,7 +25,7 @@ protected URI url(final HttpRequest httpRequest) throws URISyntaxException {\n     // Google uses %20 (space) instead of \"+\" for spaces in the fragment\n     // Add \"+\" back for consistency with the other http client instrumentations\n     final String url = httpRequest.getUrl().build();\n-    final String fixedUrl = url.replaceAll(\"%20\", \"+\");\n+    final String fixedUrl = URL_REPLACEMENT.matcher(url).replaceAll(\"+\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4NDI4NA=="}, "originalCommit": {"oid": "9f9dd0ac7ab8477c8eef0a7ab753f422d5c674aa"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4642, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}