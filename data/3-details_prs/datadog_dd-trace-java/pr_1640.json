{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTI0MzE2", "number": 1640, "title": "Deadlock detection JFR events", "bodyText": "Periodically check for deadlocked threads using JMX ThreadMXBean and emit a series of events describing the locking cycle.\nUnfortunately, JFR user (Java) definable events do not support any non-scalar attributes and as such the list of affected threads had to be decomposed into a list of separate events.\nAdditionally, it also makes it impossible to capture the full stack trace of threads in dead-lock so the information must be extracted and only the locker-waiter frames are reported if available (j.u.concurrent locks do not provide info about which frame locked them).\nIn addition to unit tests the profiling smoke test was extended to have a guaranteed deadlock and the test recording is then asserted for the presence of the deadlock related events.", "createdAt": "2020-06-29T16:29:38Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1640", "merged": true, "mergeCommit": {"oid": "defc36cda4f8d5df09005529d3958e4b85af5a6a"}, "closed": true, "closedAt": "2020-07-01T14:16:08Z", "author": {"login": "jbachorik"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwEMUDgH2gAyNDQxNTI0MzE2OjcwOWQ4MzRkMTIwM2JiNzQ1NDJlMTQ0MjNkNmE1ZjdkMGYxYjQ1YTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwn2qXgFqTQ0MDc1MzAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "709d834d1203bb74542e14423d6a5f7d0f1b45a2", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/709d834d1203bb74542e14423d6a5f7d0f1b45a2", "committedDate": "2020-06-29T17:07:31Z", "message": "Deadlock detection JFR events"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de0cfa3c6778e3256efe1bd2d46ea38fb36ed165", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/de0cfa3c6778e3256efe1bd2d46ea38fb36ed165", "committedDate": "2020-06-29T16:27:36Z", "message": "Deadlock detection JFR events"}, "afterCommit": {"oid": "709d834d1203bb74542e14423d6a5f7d0f1b45a2", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/709d834d1203bb74542e14423d6a5f7d0f1b45a2", "committedDate": "2020-06-29T17:07:31Z", "message": "Deadlock detection JFR events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e6cee49e41b1d110b24a15b01164097886a067", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/73e6cee49e41b1d110b24a15b01164097886a067", "committedDate": "2020-06-29T17:59:21Z", "message": "Guard DeadlockEvent registration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a57c9bca21e2beb0db732dde331169d53e055c", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d0a57c9bca21e2beb0db732dde331169d53e055c", "committedDate": "2020-06-29T18:17:56Z", "message": "Formatting!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d200ca519181a63f550fa7db6a857f9927723a", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c7d200ca519181a63f550fa7db6a857f9927723a", "committedDate": "2020-06-30T10:02:14Z", "message": "Enforce same order for the collected events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95a8d0e16d29b0cb07eab5700943a0f997dd147", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a95a8d0e16d29b0cb07eab5700943a0f997dd147", "committedDate": "2020-06-30T10:14:51Z", "message": "Format!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad107ba2e68d7d93184bb99931986d4d7a1ccaf7", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ad107ba2e68d7d93184bb99931986d4d7a1ccaf7", "committedDate": "2020-06-30T11:09:24Z", "message": "Move the event registration to where it does not break wildfly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83905084c6ebd6e997ee8cc12e6f8844cf091179", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/83905084c6ebd6e997ee8cc12e6f8844cf091179", "committedDate": "2020-06-30T11:12:16Z", "message": "Format!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71ed3af3261823a85210d08faf315882089d7006", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/71ed3af3261823a85210d08faf315882089d7006", "committedDate": "2020-06-30T13:04:46Z", "message": "Revert @Slf4j annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e068845279a6d1cecb1094779e907bbedc86fa", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a5e068845279a6d1cecb1094779e907bbedc86fa", "committedDate": "2020-07-01T07:09:27Z", "message": "Remove the debug wait. Argh!"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjA4MDUz", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#pullrequestreview-440608053", "createdAt": "2020-07-01T07:21:13Z", "commit": {"oid": "a5e068845279a6d1cecb1094779e907bbedc86fa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzoyMToxM1rOGrZ2-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzoyNjoxNFrOGraBiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2NTYyNQ==", "bodyText": "Like for MLT we may have an issue regarding initializing or using JMX to early no?", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448165625", "createdAt": "2020-07-01T07:21:13Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/events/DeadlockEventFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.datadog.profiling.controller.openjdk.events;\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MonitorInfo;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+\n+public class DeadlockEventFactory {\n+  private static final DeadlockEvent DEADLOCK_EVENT = new DeadlockEvent();\n+  private static final DeadlockedThreadEvent DEADLOCKED_THREAD_EVENT = new DeadlockedThreadEvent();\n+\n+  private final ThreadMXBean threadMXBean;\n+  private final AtomicLong deadlockCounter = new AtomicLong();\n+\n+  public static void registerEvents() {\n+    FlightRecorder.addPeriodicEvent(DeadlockEvent.class, DeadlockEvent::emit);\n+  }\n+\n+  DeadlockEventFactory(ThreadMXBean threadMXBean) {\n+    this.threadMXBean = threadMXBean;\n+  }\n+\n+  DeadlockEventFactory() {\n+    this(ManagementFactory.getThreadMXBean());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e068845279a6d1cecb1094779e907bbedc86fa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE2ODMzMQ==", "bodyText": "could we at least store the Thread Ids for this event, it could be sufficient for correlating and identifying deadlocked threads, no?", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448168331", "createdAt": "2020-07-01T07:26:14Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/events/DeadlockEventFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package com.datadog.profiling.controller.openjdk.events;\n+\n+import java.lang.management.LockInfo;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MonitorInfo;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import jdk.jfr.Event;\n+import jdk.jfr.FlightRecorder;\n+\n+public class DeadlockEventFactory {\n+  private static final DeadlockEvent DEADLOCK_EVENT = new DeadlockEvent();\n+  private static final DeadlockedThreadEvent DEADLOCKED_THREAD_EVENT = new DeadlockedThreadEvent();\n+\n+  private final ThreadMXBean threadMXBean;\n+  private final AtomicLong deadlockCounter = new AtomicLong();\n+\n+  public static void registerEvents() {\n+    FlightRecorder.addPeriodicEvent(DeadlockEvent.class, DeadlockEvent::emit);\n+  }\n+\n+  DeadlockEventFactory(ThreadMXBean threadMXBean) {\n+    this.threadMXBean = threadMXBean;\n+  }\n+\n+  DeadlockEventFactory() {\n+    this(ManagementFactory.getThreadMXBean());\n+  }\n+\n+  final List<? extends Event> collectEvents() {\n+    if (!isDeadlockEventEnabled()) {\n+      return Collections.emptyList();\n+    }\n+\n+    long[] locked = threadMXBean.findDeadlockedThreads();\n+    if (locked == null) {\n+      return Collections.emptyList();\n+    }\n+    long id = deadlockCounter.getAndIncrement();\n+\n+    List<Event> events = new ArrayList<>();\n+    DeadlockEvent event = new DeadlockEvent(id, locked.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e068845279a6d1cecb1094779e907bbedc86fa"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a017d77f0101e4f2658e83cfd2be89bbd446707f", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a017d77f0101e4f2658e83cfd2be89bbd446707f", "committedDate": "2020-07-01T09:59:09Z", "message": "Let's do the JMX initialization jiggle-wiggle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzQ1NzE2", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#pullrequestreview-440745716", "createdAt": "2020-07-01T10:28:53Z", "commit": {"oid": "a017d77f0101e4f2658e83cfd2be89bbd446707f"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoyODo1M1rOGrgOgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoyODo1M1rOGrgOgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2OTk1NQ==", "bodyText": "are you sure about this change?\nit seems to desynchronize later access to AGENT_CLASSLOADER in this method", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#discussion_r448269955", "createdAt": "2020-07-01T10:28:53Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -264,12 +264,27 @@ private static synchronized void installDatadogTracer() {\n   private static synchronized void startJmx(final URL bootstrapURL) {\n     startJmxFetch(bootstrapURL);\n     initializeJmxThreadCpuTimeProvider();\n+    registerDeadlockDetectionEvent(bootstrapURL);\n+  }\n+\n+  private static synchronized void registerDeadlockDetectionEvent(URL bootstrapUrl) {\n+    log.info(\"Initializing JMX thread deadlock detector\");\n+    try {\n+      ClassLoader classLoader = getProfilingClassloader(bootstrapUrl);\n+      final Class<?> deadlockFactoryClass =\n+          classLoader.loadClass(\n+              \"com.datadog.profiling.controller.openjdk.events.DeadlockEventFactory\");\n+      final Method registerMethod = deadlockFactoryClass.getMethod(\"registerEvents\");\n+      registerMethod.invoke(null);\n+    } catch (final Throwable ex) {\n+      log.error(\"Throwable thrown while initializing JMX thread deadlock detector\", ex);\n+    }\n   }\n \n   /** Enable JMX based thread CPU time provider once it is safe to touch JMX */\n   private static synchronized void initializeJmxThreadCpuTimeProvider() {\n     log.info(\"Initializing JMX thread CPU time provider\");\n-    if (AGENT_CLASSLOADER == null) {\n+    if (PROFILING_CLASSLOADER == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a017d77f0101e4f2658e83cfd2be89bbd446707f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bfd16c0716ff2438b60e3bded1a16f625056b6", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/28bfd16c0716ff2438b60e3bded1a16f625056b6", "committedDate": "2020-07-01T10:38:40Z", "message": "Clean up the mess with incorrect class loader check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzUzMDAx", "url": "https://github.com/DataDog/dd-trace-java/pull/1640#pullrequestreview-440753001", "createdAt": "2020-07-01T10:40:27Z", "commit": {"oid": "28bfd16c0716ff2438b60e3bded1a16f625056b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2218, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}