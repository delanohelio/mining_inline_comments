{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjU2MDk1", "number": 2079, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxNjoxMVrOE5e6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo1ODoxNVrOFCl8lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzEwNjgzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaConsumerInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxNjoxMVrOHz-Pqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxNjoxMVrOHz-Pqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1OTI0Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r524259243", "createdAt": "2020-11-16T13:16:11Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaConsumerInstrumentation.java", "diffHunk": "@@ -75,7 +75,8 @@ public KafkaConsumerInstrumentation() {\n   public static class IterableAdvice {\n \n     @Advice.OnMethodExit(suppress = Throwable.class)\n-    public static void wrap(@Advice.Return(readOnly = false) Iterable<ConsumerRecord> iterable) {\n+    public static void wrap(\n+        @Advice.Return(readOnly = false) Iterable<ConsumerRecord<?, ?>> iterable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9c5b7071720058d3558cd1869d81f0eade1e7c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzExMTM4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxNzoxOVrOHz-Sag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMzoxNzoxOVrOHz-Sag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI1OTk0Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r524259946", "createdAt": "2020-11-16T13:17:19Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingListIterator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.kafka_clients;\n+\n+import java.util.ListIterator;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+\n+public class TracingListIterator extends TracingIterator\n+    implements ListIterator<ConsumerRecord<?, ?>> {\n+\n+  private final ListIterator<ConsumerRecord<?, ?>> delegateIterator;\n+\n+  public TracingListIterator(\n+      ListIterator<ConsumerRecord<?, ?>> delegateIterator,\n+      CharSequence operationName,\n+      KafkaDecorator decorator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9c5b7071720058d3558cd1869d81f0eade1e7c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzA0NzQ2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDowOTowNVrOH_J4aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozMDoyNVrOH_KtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NDIzMw==", "bodyText": "does this need to be an atomic?", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535984233", "createdAt": "2020-12-04T10:09:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -1,18 +1,26 @@\n package datadog.trace.instrumentation.kafka_clients;\n \n import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import org.apache.kafka.clients.consumer.ConsumerRecord;\n \n-public class TracingList extends TracingIterable implements List<ConsumerRecord> {\n-  private final List<ConsumerRecord> delegate;\n+public class TracingList implements List<ConsumerRecord<?, ?>> {\n+  private final List<ConsumerRecord<?, ?>> delegate;\n+  private final CharSequence operationName;\n+  private final KafkaDecorator decorator;\n+\n+  // TODO: not thread safe wrapping\n+  //  in case of batch consumer and requesting iterator of consumed list from different threads\n+  private boolean firstIteration = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NzczNg==", "bodyText": "wasn't before:\nhttps://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterable.java#L27", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535997736", "createdAt": "2020-12-04T10:30:25Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -1,18 +1,26 @@\n package datadog.trace.instrumentation.kafka_clients;\n \n import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import org.apache.kafka.clients.consumer.ConsumerRecord;\n \n-public class TracingList extends TracingIterable implements List<ConsumerRecord> {\n-  private final List<ConsumerRecord> delegate;\n+public class TracingList implements List<ConsumerRecord<?, ?>> {\n+  private final List<ConsumerRecord<?, ?>> delegate;\n+  private final CharSequence operationName;\n+  private final KafkaDecorator decorator;\n+\n+  // TODO: not thread safe wrapping\n+  //  in case of batch consumer and requesting iterator of consumed list from different threads\n+  private boolean firstIteration = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NDIzMw=="}, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzA0OTE1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDowOToyNlrOH_J5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDowOToyNlrOH_J5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NDQ3OA==", "bodyText": "should this be a cas?", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535984478", "createdAt": "2020-12-04T10:09:26Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {\n+      maybeTracingListIterator =\n+          new TracingListIterator(delegate.listIterator(index), operationName, decorator);\n+      firstIteration = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzExNjE2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoyNDo0MVrOH_KfjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTo1MjoxN1rOIBQsLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NDI1Mg==", "bodyText": "Shouldn't we only call maybeClosePreviousIterationScope() if delegateIterator.hasNext() returns false? I mean you could call hasNext() and still do some work before you call next().", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535994252", "createdAt": "2020-12-04T10:24:41Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java", "diffHunk": "@@ -36,40 +36,43 @@ public TracingIterator(\n \n   @Override\n   public boolean hasNext() {\n-    if (currentScope != null) {\n-      finish();\n-    }\n+    maybeClosePreviousIterationScope();\n     return delegateIterator.hasNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE5Mjk0Mg==", "bodyText": "Thanks. I think your suggestion covers more cases.", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r538192942", "createdAt": "2020-12-08T09:52:17Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterator.java", "diffHunk": "@@ -36,40 +36,43 @@ public TracingIterator(\n \n   @Override\n   public boolean hasNext() {\n-    if (currentScope != null) {\n-      finish();\n-    }\n+    maybeClosePreviousIterationScope();\n     return delegateIterator.hasNext();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5NDI1Mg=="}, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzE0ODA3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozMjoyNFrOH_Kx9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTozMzo0MVrOIBP1BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng==", "bodyText": "I'm curious why we only do tracing on the first iterator. What is the rationale?", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r535998966", "createdAt": "2020-12-04T10:32:24Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMTA2OQ==", "bodyText": "rationale here is the \"hope\" that iteration will be performed only once in thread:\nhttps://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingIterable.java#L25\nthat's the assumption so far.", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r536021069", "createdAt": "2020-12-04T11:08:36Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng=="}, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyMzc2OA==", "bodyText": "Yes, I get that, but what is the downside of always returning a TracingListIterator?", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r536023768", "createdAt": "2020-12-04T11:13:21Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng=="}, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3ODgyMQ==", "bodyText": "every iteration will add spans. No obvious downsides which I can see. I think the instrumentation before supported only the very basic code pattern. I've changed it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r538178821", "createdAt": "2020-12-08T09:33:41Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/TracingList.java", "diffHunk": "@@ -113,25 +126,25 @@ public int lastIndexOf(final Object o) {\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator() {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator();\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator() {\n+    return listIterator(0);\n   }\n \n   @Override\n-  public ListIterator<ConsumerRecord> listIterator(final int index) {\n-    // TODO: the API for ListIterator is not really good to instrument it in context of Kafka\n-    // Consumer so we will not do that for now\n-    return delegate.listIterator(index);\n+  public ListIterator<ConsumerRecord<?, ?>> listIterator(final int index) {\n+    final ListIterator<ConsumerRecord<?, ?>> maybeTracingListIterator;\n+    if (firstIteration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5ODk2Ng=="}, "originalCommit": {"oid": "4ae89aafb6f5cfea37b988462aded10259cec6d1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjYzMTg4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/test/groovy/KafkaClientTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo1ODoxNVrOIB151w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNTo0Nzo0N1rOICDh_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwMjY0Nw==", "bodyText": "Could you point out which part of this test exercises this new behavior? It's not obvious to me.", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r538802647", "createdAt": "2020-12-08T20:58:15Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/test/groovy/KafkaClientTest.groovy", "diffHunk": "@@ -434,6 +435,167 @@ class KafkaClientTest extends AgentTestRunner {\n \n   }\n \n+  def \"test spring kafka template produce and batch consume\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "455272289171a7b62c15f648d392de572ac15bd5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAyNTkxOQ==", "bodyText": "I've added test for explicit backwards iteration over ConsumerRecords:\nhttps://github.com/DataDog/dd-trace-java/pull/2079/files#diff-56b3557d444393bb6245962fecaa6f346015adf022d387ea2d2e52ed7ee871deR438", "url": "https://github.com/DataDog/dd-trace-java/pull/2079#discussion_r539025919", "createdAt": "2020-12-09T05:47:47Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/test/groovy/KafkaClientTest.groovy", "diffHunk": "@@ -434,6 +435,167 @@ class KafkaClientTest extends AgentTestRunner {\n \n   }\n \n+  def \"test spring kafka template produce and batch consume\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwMjY0Nw=="}, "originalCommit": {"oid": "455272289171a7b62c15f648d392de572ac15bd5"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4593, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}