{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTYyNDkx", "number": 1883, "title": "Add instrumentation for ScheduledExecutorService, dormant integration testing for spanner session creation dependent on PendingTrace changes", "bodyText": "ScheduledExecutorService is currently double instrumented because we instrument both schedule and submit, and submit calls schedule. ScheduledExecutorService is used in Spanner.\nWe are forced to create continuations which we can't close without instrumenting spanner itself, so the integration tests are dependent on pending changes to PendingTrace to relax reference counting semantics, in order to be able to trace creation of a session without actually connecting to spanner (or tolerating failure at all, for that matter).", "createdAt": "2020-09-18T08:30:59Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1883", "merged": true, "mergeCommit": {"oid": "bbd70144e171f51fb52e67f1ef2e721525275247"}, "closed": true, "closedAt": "2020-09-25T10:11:01Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKBk-PAFqTQ5MTI2OTQ0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMGFeMAFqTQ5NTg3NTMzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjY5NDQw", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#pullrequestreview-491269440", "createdAt": "2020-09-18T08:46:46Z", "commit": {"oid": "304220584d3598aa4e392ed9522347e3540c7fbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f040fa7b33a35f14f302eab87de519c028d0164", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0f040fa7b33a35f14f302eab87de519c028d0164", "committedDate": "2020-09-18T09:08:16Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}, "afterCommit": {"oid": "1d1ffdebe714e13fab82e62edf9a1802048f0d7b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1d1ffdebe714e13fab82e62edf9a1802048f0d7b", "committedDate": "2020-09-18T09:20:33Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d1ffdebe714e13fab82e62edf9a1802048f0d7b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1d1ffdebe714e13fab82e62edf9a1802048f0d7b", "committedDate": "2020-09-18T09:20:33Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}, "afterCommit": {"oid": "d503e5bccf4532f5d966af94ab0d745bb7aacf25", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d503e5bccf4532f5d966af94ab0d745bb7aacf25", "committedDate": "2020-09-18T09:52:58Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d503e5bccf4532f5d966af94ab0d745bb7aacf25", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d503e5bccf4532f5d966af94ab0d745bb7aacf25", "committedDate": "2020-09-18T09:52:58Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}, "afterCommit": {"oid": "007003ff353fe95b2b2dc31c4e6afcf09858345d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/007003ff353fe95b2b2dc31c4e6afcf09858345d", "committedDate": "2020-09-18T10:04:27Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "007003ff353fe95b2b2dc31c4e6afcf09858345d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/007003ff353fe95b2b2dc31c4e6afcf09858345d", "committedDate": "2020-09-18T10:04:27Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}, "afterCommit": {"oid": "22d05fe42174757e536c4e6489152c09c1f2b877", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/22d05fe42174757e536c4e6489152c09c1f2b877", "committedDate": "2020-09-18T11:36:40Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8e85d36e715ef4c163a449f5d9b5f730367c749", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e8e85d36e715ef4c163a449f5d9b5f730367c749", "committedDate": "2020-09-18T12:24:12Z", "message": "classloader lock experiment"}, "afterCommit": {"oid": "22d05fe42174757e536c4e6489152c09c1f2b877", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/22d05fe42174757e536c4e6489152c09c1f2b877", "committedDate": "2020-09-18T11:36:40Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDgzMDg0", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#pullrequestreview-491483084", "createdAt": "2020-09-18T13:50:16Z", "commit": {"oid": "800f646a659ae4263c73a8e11799e6d6638c4e46"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo1MDoxNlrOHUOAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo1NTo1OFrOHUOPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MzExMw==", "bodyText": "Thank you. I've been too lazy to do anything about these.", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490963113", "createdAt": "2020-09-18T13:50:16Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/CallableWrapper.java", "diffHunk": "@@ -22,11 +22,13 @@ public Object call() throws Exception {\n   }\n \n   public static Callable<?> wrapIfNeeded(final Callable<?> task) {\n-    // We wrap only lambdas' anonymous classes and if given object has not already been wrapped.\n-    // Anonymous classes have '/' in class name which is not allowed in 'normal' classes.\n-    if (task.getClass().getName().contains(\"/\") && (!(task instanceof CallableWrapper))) {\n-      log.debug(\"Wrapping callable task {}\", task);\n-      return new CallableWrapper(task);\n+    if (!(task instanceof CallableWrapper)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f646a659ae4263c73a8e11799e6d6638c4e46"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NDMyMg==", "bodyText": "Nice", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490964322", "createdAt": "2020-09-18T13:52:01Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java", "diffHunk": "@@ -27,22 +27,22 @@\n    * Only apply executor instrumentation to whitelisted executors. To apply to all executors, use\n    * override setting above.\n    */\n-  private final Collection<String> WHITELISTED_EXECUTORS;\n+  private final Collection<String> PERMITTED_EXECUTORS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f646a659ae4263c73a8e11799e6d6638c4e46"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NjkxNg==", "bodyText": "How costly is this? I mean if you schedule something it probably isn't time critical, but anyway it's String comparisons.", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r490966916", "createdAt": "2020-09-18T13:55:58Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExecutorInstrumentationUtils;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ScheduledExecutorServiceInstrumentation extends Instrumenter.Default {\n+\n+  public ScheduledExecutorServiceInstrumentation() {\n+    super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    // targeting the concrete type because it's an implementation detail\n+    // that this executor's submit calls schedule, and our instrumentation\n+    // is not idempotent\n+    return named(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        named(\"schedule\").and(takesArgument(0, Runnable.class)),\n+        ScheduledExecutorServiceInstrumentation.class.getName() + \"$ScheduleRunnableAdvice\");\n+    transformers.put(\n+        named(\"schedule\").and(takesArgument(0, Callable.class)),\n+        ScheduledExecutorServiceInstrumentation.class.getName() + \"$ScheduleCallableAdvice\");\n+    return transformers;\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    final Map<String, String> map = new HashMap<>(4);\n+    map.put(Runnable.class.getName(), State.class.getName());\n+    map.put(Callable.class.getName(), State.class.getName());\n+    map.put(Future.class.getName(), State.class.getName());\n+    return Collections.unmodifiableMap(map);\n+  }\n+\n+  public static class ScheduleRunnableAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static State enterSchedule(\n+        @Advice.This final Executor executor,\n+        @Advice.Argument(value = 0, readOnly = false) Runnable task) {\n+      if (task.getClass().getName().startsWith(\"datadog.common.exec.\")) {\n+        // don't instrument our background tasks!\n+        return null;\n+      }\n+      final TraceScope scope = activeScope();\n+      task = new RunnableWrapper(task);\n+      final ContextStore<Runnable, State> contextStore =\n+          InstrumentationContext.get(Runnable.class, State.class);\n+      return ExecutorInstrumentationUtils.setupState(contextStore, task, scope);\n+    }\n+\n+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+    public static void exitSchedule(\n+        @Advice.This final Executor executor,\n+        @Advice.Enter final State state,\n+        @Advice.Thrown final Throwable throwable,\n+        @Advice.Return final Future future) {\n+      if (state != null && future != null) {\n+        final ContextStore<Future, State> contextStore =\n+            InstrumentationContext.get(Future.class, State.class);\n+        contextStore.put(future, state);\n+      }\n+      ExecutorInstrumentationUtils.cleanUpOnMethodExit(executor, state, throwable);\n+    }\n+  }\n+\n+  public static class ScheduleCallableAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static State enterSchedule(\n+        @Advice.This final Executor executor,\n+        @Advice.Argument(value = 0, readOnly = false) Callable task) {\n+      if (task.getClass().getName().startsWith(\"datadog.common.exec.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800f646a659ae4263c73a8e11799e6d6638c4e46"}, "originalPosition": 101}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "800f646a659ae4263c73a8e11799e6d6638c4e46", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/800f646a659ae4263c73a8e11799e6d6638c4e46", "committedDate": "2020-09-18T13:22:02Z", "message": "defence against instrumenting our own background tasks"}, "afterCommit": {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/99bf6d878707148e723f9552f1051a9a0e48662d", "committedDate": "2020-09-18T14:21:39Z", "message": "defence against instrumenting our own background tasks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTQxMTk2", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#pullrequestreview-491541196", "createdAt": "2020-09-18T14:54:53Z", "commit": {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1NDo1M1rOHUQoSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1NDo1M1rOHUQoSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNjAyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");\n          \n          \n            \n                super(\"java-concurrent\");", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491006024", "createdAt": "2020-09-18T14:54:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ScheduledExecutorServiceInstrumentation.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package datadog.trace.instrumentation.java.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExecutorInstrumentationUtils;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Future;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ScheduledExecutorServiceInstrumentation extends Instrumenter.Default {\n+\n+  public ScheduledExecutorServiceInstrumentation() {\n+    super(\"java.util.concurrent.ScheduledThreadPoolExecutor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTQyODcy", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#pullrequestreview-491542872", "createdAt": "2020-09-18T14:56:47Z", "commit": {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1Njo0OFrOHUQtaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo1Njo0OFrOHUQtaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAwNzMzOQ==", "bodyText": "Do we still want to keep the schedule method advice above?", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#discussion_r491007339", "createdAt": "2020-09-18T14:56:48Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/JavaExecutorInstrumentation.java", "diffHunk": "@@ -81,6 +81,9 @@\n     public static State enterJobSubmit(\n         @Advice.This final Executor executor,\n         @Advice.Argument(value = 0, readOnly = false) Runnable task) {\n+      // there are cased like ScheduledExecutorService.submit (which we instrument)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99bf6d878707148e723f9552f1051a9a0e48662d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/99bf6d878707148e723f9552f1051a9a0e48662d", "committedDate": "2020-09-18T14:21:39Z", "message": "defence against instrumenting our own background tasks"}, "afterCommit": {"oid": "bc27ab87f989b1df4af74011b73d62d8f9a044af", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bc27ab87f989b1df4af74011b73d62d8f9a044af", "committedDate": "2020-09-18T17:05:28Z", "message": "rename instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc27ab87f989b1df4af74011b73d62d8f9a044af", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bc27ab87f989b1df4af74011b73d62d8f9a044af", "committedDate": "2020-09-18T17:05:28Z", "message": "rename instrumentation"}, "afterCommit": {"oid": "d1695417c7865943f4cc986011713c57be546b14", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d1695417c7865943f4cc986011713c57be546b14", "committedDate": "2020-09-18T17:34:48Z", "message": "rename instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1695417c7865943f4cc986011713c57be546b14", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d1695417c7865943f4cc986011713c57be546b14", "committedDate": "2020-09-18T17:34:48Z", "message": "rename instrumentation"}, "afterCommit": {"oid": "a552f88403246ce15a4baa70466c0f62e62c5b83", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a552f88403246ce15a4baa70466c0f62e62c5b83", "committedDate": "2020-09-18T17:41:32Z", "message": "rename instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a552f88403246ce15a4baa70466c0f62e62c5b83", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a552f88403246ce15a4baa70466c0f62e62c5b83", "committedDate": "2020-09-18T17:41:32Z", "message": "rename instrumentation"}, "afterCommit": {"oid": "b9036d6134c2882709c149b8580d393b9b9c77d7", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b9036d6134c2882709c149b8580d393b9b9c77d7", "committedDate": "2020-09-18T17:44:57Z", "message": "rename instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9036d6134c2882709c149b8580d393b9b9c77d7", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b9036d6134c2882709c149b8580d393b9b9c77d7", "committedDate": "2020-09-18T17:44:57Z", "message": "rename instrumentation"}, "afterCommit": {"oid": "39d36af8fe2f5907a0c1973b6549f426e68c6ad6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/39d36af8fe2f5907a0c1973b6549f426e68c6ad6", "committedDate": "2020-09-18T17:59:14Z", "message": "rename instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "39d36af8fe2f5907a0c1973b6549f426e68c6ad6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/39d36af8fe2f5907a0c1973b6549f426e68c6ad6", "committedDate": "2020-09-18T17:59:14Z", "message": "rename instrumentation"}, "afterCommit": {"oid": "a9ae57d9e10db3852b4cf0c8e2a75f18dc761023", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a9ae57d9e10db3852b4cf0c8e2a75f18dc761023", "committedDate": "2020-09-21T11:01:17Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9ae57d9e10db3852b4cf0c8e2a75f18dc761023", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a9ae57d9e10db3852b4cf0c8e2a75f18dc761023", "committedDate": "2020-09-21T11:01:17Z", "message": "add test without spring async which fails more reliably"}, "afterCommit": {"oid": "3eb0cc04c49b5452560197d87736d20a72185e56", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3eb0cc04c49b5452560197d87736d20a72185e56", "committedDate": "2020-09-21T12:54:05Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3eb0cc04c49b5452560197d87736d20a72185e56", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3eb0cc04c49b5452560197d87736d20a72185e56", "committedDate": "2020-09-21T12:54:05Z", "message": "add test without spring async which fails more reliably"}, "afterCommit": {"oid": "d388f521693462404d0864c6c626ce04410674ce", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d388f521693462404d0864c6c626ce04410674ce", "committedDate": "2020-09-22T13:46:29Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d388f521693462404d0864c6c626ce04410674ce", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d388f521693462404d0864c6c626ce04410674ce", "committedDate": "2020-09-22T13:46:29Z", "message": "add test without spring async which fails more reliably"}, "afterCommit": {"oid": "e839b02c53aec24795ca757dd83fa479be708b94", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e839b02c53aec24795ca757dd83fa479be708b94", "committedDate": "2020-09-23T10:52:32Z", "message": "Add Reiterating RedefinitionStrategy\n\nThis ensures that any classes that may have been loaded by the agent in the process of transforming will also be given a chance to be instrumented in a subsequent pass."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e839b02c53aec24795ca757dd83fa479be708b94", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e839b02c53aec24795ca757dd83fa479be708b94", "committedDate": "2020-09-23T10:52:32Z", "message": "Add Reiterating RedefinitionStrategy\n\nThis ensures that any classes that may have been loaded by the agent in the process of transforming will also be given a chance to be instrumented in a subsequent pass."}, "afterCommit": {"oid": "3dc7f21d41519086a8268014d80d053f971c6808", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3dc7f21d41519086a8268014d80d053f971c6808", "committedDate": "2020-09-23T14:10:48Z", "message": "Add Reiterating RedefinitionStrategy\n\nThis ensures that any classes that may have been loaded by the agent in the process of transforming will also be given a chance to be instrumented in a subsequent pass."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc7f21d41519086a8268014d80d053f971c6808", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3dc7f21d41519086a8268014d80d053f971c6808", "committedDate": "2020-09-23T14:10:48Z", "message": "Add Reiterating RedefinitionStrategy\n\nThis ensures that any classes that may have been loaded by the agent in the process of transforming will also be given a chance to be instrumented in a subsequent pass."}, "afterCommit": {"oid": "2797ed1bbdf7983911087b39677330de7f8f765b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2797ed1bbdf7983911087b39677330de7f8f765b", "committedDate": "2020-09-23T14:10:48Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2797ed1bbdf7983911087b39677330de7f8f765b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2797ed1bbdf7983911087b39677330de7f8f765b", "committedDate": "2020-09-23T14:10:48Z", "message": "add test without spring async which fails more reliably"}, "afterCommit": {"oid": "f94f286dee541a8e6ceec4154c71acebccbab1bc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f94f286dee541a8e6ceec4154c71acebccbab1bc", "committedDate": "2020-09-23T17:45:33Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d56602a2bc72c9c9405eca5cafce0d47c5d74da9", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d56602a2bc72c9c9405eca5cafce0d47c5d74da9", "committedDate": "2020-09-24T13:39:56Z", "message": "failing spanner client test (servlet spans lost)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7690cfdfdb167c0b7268c5991560e2a1659d73fa", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7690cfdfdb167c0b7268c5991560e2a1659d73fa", "committedDate": "2020-09-24T13:39:56Z", "message": "don't instrument ScheduledThreadPoolExecutor generically because submit calls schedule, implement specialised instrumentation for ScheduledThreadPoolExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c57aef8a156bd1dd4b4488f2541969e2393d5e5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5c57aef8a156bd1dd4b4488f2541969e2393d5e5", "committedDate": "2020-09-24T13:39:56Z", "message": "make springboot-grpc integration tests more resilient to nondeterminism in instrumented code (e.g. spanner batch session creation)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db7b36053d6fb8eee41d5785408df5b588a41bf", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4db7b36053d6fb8eee41d5785408df5b588a41bf", "committedDate": "2020-09-24T13:39:56Z", "message": "defence against instrumenting our own background tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7a96e9c867e050fa6c4120c70f8a885726a83c", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5f7a96e9c867e050fa6c4120c70f8a885726a83c", "committedDate": "2020-09-24T13:39:56Z", "message": "rename instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c701e286cd6668bec3feee3a7da199ab90904344", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c701e286cd6668bec3feee3a7da199ab90904344", "committedDate": "2020-09-24T13:39:56Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f94f286dee541a8e6ceec4154c71acebccbab1bc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f94f286dee541a8e6ceec4154c71acebccbab1bc", "committedDate": "2020-09-23T17:45:33Z", "message": "add test without spring async which fails more reliably"}, "afterCommit": {"oid": "c701e286cd6668bec3feee3a7da199ab90904344", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c701e286cd6668bec3feee3a7da199ab90904344", "committedDate": "2020-09-24T13:39:56Z", "message": "add test without spring async which fails more reliably"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9adb59447d3c212fb98663469b2a3e916a658be1", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9adb59447d3c212fb98663469b2a3e916a658be1", "committedDate": "2020-09-24T18:56:12Z", "message": "don't eagerly wrap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73998ba689f711c7c287a975a44b0e5e0007cc26", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/73998ba689f711c7c287a975a44b0e5e0007cc26", "committedDate": "2020-09-24T18:56:56Z", "message": "ignore spanner tests until PendingTrace continuation counting is dropped"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODc1MzMx", "url": "https://github.com/DataDog/dd-trace-java/pull/1883#pullrequestreview-495875331", "createdAt": "2020-09-24T19:09:44Z", "commit": {"oid": "73998ba689f711c7c287a975a44b0e5e0007cc26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3135, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}