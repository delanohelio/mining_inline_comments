{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTA0NzU1", "number": 1990, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo0NDoxNFrOEtyO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1NTowNVrOEtyYKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDQ0MzczOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo0NDoxNFrOHhxlog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzowOTowMVrOHh1heg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3NzUwNg==", "bodyText": "Not something to change in this PR, but a broader question. This is fine for an interface but would block a class from getting the fields injected by loading the class afaics. Should we try to use String consistently throughout the code?", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505177506", "createdAt": "2020-10-15T05:44:14Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));\n   }\n \n   @Override\n   public Map<String, String> contextStore() {\n     Map<String, String> contextStore = new HashMap<>(4);\n-    contextStore.put(\"java.util.concurrent.RunnableFuture\", State.class.getName());\n+    contextStore.put(RunnableFuture.class.getName(), State.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MTk3OA==", "bodyText": "I changed this to be more consistent, but you raise a good point. If we standardise on this we don't get field injection.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505241978", "createdAt": "2020-10-15T07:09:01Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));\n   }\n \n   @Override\n   public Map<String, String> contextStore() {\n     Map<String, String> contextStore = new HashMap<>(4);\n-    contextStore.put(\"java.util.concurrent.RunnableFuture\", State.class.getName());\n+    contextStore.put(RunnableFuture.class.getName(), State.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3NzUwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDQ1OTg1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1MTozNlrOHhxung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowMjo0OFrOHiAXxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg==", "bodyText": "So they all implement RejectedExecutionHandler. Why do we need to name them separately?", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505179806", "createdAt": "2020-10-15T05:51:36Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzOTgyNA==", "bodyText": "I actually don't know why this was necessary but inner classes of types we transform seem not to be ignored.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505239824", "createdAt": "2020-10-15T07:07:09Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MzU0OQ==", "bodyText": "I'm confused. You said \" inner classes of types we transform seem not to be ignored\", does that mean we want to ignore them or match them?", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505243549", "createdAt": "2020-10-15T07:10:23Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1OTUyNw==", "bodyText": "We want to include them. They weren't being included by the implementsInterface check, even though others were. If it's a hack it's benign or positive because it short circuits a type hierarchy walk.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505259527", "createdAt": "2020-10-15T07:24:50Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyNTk1Ng==", "bodyText": "It's scary that they were missed. I wonder why that happened? I'll \ud83d\udc4d this workaround.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505325956", "createdAt": "2020-10-15T08:20:10Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQwNDk5MA==", "bodyText": "Actually this wasn't necessary, there was a mistake in the type name in the argument matcher. I'll keep this so we short circuit the check for the only four implementations which will ever load in lots of applications.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505404990", "createdAt": "2020-10-15T09:42:15Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxOTcxOQ==", "bodyText": "Ah, stringly typed programming...", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505419719", "createdAt": "2020-10-15T10:02:48Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTgwNg=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDQ2NzYxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo1NTowNVrOHhxzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODozMzoxN1rOHh7ggQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTAyOQ==", "bodyText": "The first argument is still a Runnable.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505181029", "createdAt": "2020-10-15T05:55:05Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));\n   }\n \n   @Override\n   public Map<String, String> contextStore() {\n     Map<String, String> contextStore = new HashMap<>(4);\n-    contextStore.put(\"java.util.concurrent.RunnableFuture\", State.class.getName());\n+    contextStore.put(RunnableFuture.class.getName(), State.class.getName());\n     // TODO get rid of this\n-    contextStore.put(\"java.util.concurrent.Runnable\", State.class.getName());\n+    contextStore.put(Runnable.class.getName(), State.class.getName());\n     return Collections.unmodifiableMap(contextStore);\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod()\n-            .and(named(\"rejectedExecution\"))\n-            .and(takesArgument(0, named(\"java.util.concurrent.Runnable\"))),\n-        getClass().getName() + \"$Reject\");\n+        isMethod().and(named(\"rejectedExecution\")), getClass().getName() + \"$Reject\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI0MzU4Mg==", "bodyText": "It just seemed like wasted cycles", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505243582", "createdAt": "2020-10-15T07:10:27Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));\n   }\n \n   @Override\n   public Map<String, String> contextStore() {\n     Map<String, String> contextStore = new HashMap<>(4);\n-    contextStore.put(\"java.util.concurrent.RunnableFuture\", State.class.getName());\n+    contextStore.put(RunnableFuture.class.getName(), State.class.getName());\n     // TODO get rid of this\n-    contextStore.put(\"java.util.concurrent.Runnable\", State.class.getName());\n+    contextStore.put(Runnable.class.getName(), State.class.getName());\n     return Collections.unmodifiableMap(contextStore);\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod()\n-            .and(named(\"rejectedExecution\"))\n-            .and(takesArgument(0, named(\"java.util.concurrent.Runnable\"))),\n-        getClass().getName() + \"$Reject\");\n+        isMethod().and(named(\"rejectedExecution\")), getClass().getName() + \"$Reject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTAyOQ=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI1OTQ2Nw==", "bodyText": "I'm just afraid of someone naming a method the wrong thing an us picking it up by mistake.", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505259467", "createdAt": "2020-10-15T07:24:47Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));\n   }\n \n   @Override\n   public Map<String, String> contextStore() {\n     Map<String, String> contextStore = new HashMap<>(4);\n-    contextStore.put(\"java.util.concurrent.RunnableFuture\", State.class.getName());\n+    contextStore.put(RunnableFuture.class.getName(), State.class.getName());\n     // TODO get rid of this\n-    contextStore.put(\"java.util.concurrent.Runnable\", State.class.getName());\n+    contextStore.put(Runnable.class.getName(), State.class.getName());\n     return Collections.unmodifiableMap(contextStore);\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod()\n-            .and(named(\"rejectedExecution\"))\n-            .and(takesArgument(0, named(\"java.util.concurrent.Runnable\"))),\n-        getClass().getName() + \"$Reject\");\n+        isMethod().and(named(\"rejectedExecution\")), getClass().getName() + \"$Reject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTAyOQ=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM0MDAzMw==", "bodyText": "I'll change it back", "url": "https://github.com/DataDog/dd-trace-java/pull/1990#discussion_r505340033", "createdAt": "2020-10-15T08:33:17Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RejectedExecutionHandlerInstrumentation.java", "diffHunk": "@@ -28,25 +29,27 @@ public RejectedExecutionHandlerInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(named(\"java.util.concurrent.RejectedExecutionHandler\"));\n+    return NameMatchers.<TypeDescription>namedOneOf(\n+            \"java.util.concurrent.ThreadPoolExecutor$AbortPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy\",\n+            \"java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy\")\n+        .or(implementsInterface(named(RejectedExecutionHandler.class.getName())));\n   }\n \n   @Override\n   public Map<String, String> contextStore() {\n     Map<String, String> contextStore = new HashMap<>(4);\n-    contextStore.put(\"java.util.concurrent.RunnableFuture\", State.class.getName());\n+    contextStore.put(RunnableFuture.class.getName(), State.class.getName());\n     // TODO get rid of this\n-    contextStore.put(\"java.util.concurrent.Runnable\", State.class.getName());\n+    contextStore.put(Runnable.class.getName(), State.class.getName());\n     return Collections.unmodifiableMap(contextStore);\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     return Collections.singletonMap(\n-        isMethod()\n-            .and(named(\"rejectedExecution\"))\n-            .and(takesArgument(0, named(\"java.util.concurrent.Runnable\"))),\n-        getClass().getName() + \"$Reject\");\n+        isMethod().and(named(\"rejectedExecution\")), getClass().getName() + \"$Reject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MTAyOQ=="}, "originalCommit": {"oid": "0ec80b7f172b0f7b761275c3ad530783b0b48e2e"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4710, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}