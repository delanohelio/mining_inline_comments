{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDgwNDY3", "number": 1683, "title": "CI-App: JUnit4 Instrumentation", "bodyText": "Description\n\nAdded instrumentation to trace JUnit4 v4.10+ test executions.\n\nThe instrumentation is applied to the following methods of the class org.junit.runner.notification.RunNotifier which will be executed during a JUnit4 test lifecycle:\n\nfireTestStarted\nfireTestFinished\nfireTestFailure\nfireTestIgnored\n\nThe instrumentation will be disabled by default. This can be enabled configuring the following:\n\nEnvironment Variable: DD_TRACE_TESTS_ENABLED\nSystem Prop: dd.trace.tests.enabled\n\nAdditionally, some test java classes are created to be used in the tests of this instrumentation. As these classes contain executable tests, it's necessary to exclude them explicitly in the java.gradle file to avoid being executed as part of the dd-java-agent build.\nFinally, the @DisableTestTrace is created to be used in the testing frameworks tests. This annotation will avoid the \"self-tracing\" in the test itself.", "createdAt": "2020-07-15T13:26:47Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1683", "merged": true, "mergeCommit": {"oid": "71c3d57b3e88a9550c694279ada437abdeb0ba58"}, "closed": true, "closedAt": "2020-07-29T08:48:30Z", "author": {"login": "drodriguezhdez"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4Efi3gH2gAyNDQ5NDgwNDY3OjNiMDhmZWU5ZTBlZjcyZWQwY2M5MDZlMjU4YzJmOTU5NTUyNGI0MTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6AXBRAFqTQ1ODQ0NjYwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b08fee9e0ef72ed0cc906e258c2f9595524b416", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3b08fee9e0ef72ed0cc906e258c2f9595524b416", "committedDate": "2020-07-24T13:59:55Z", "message": "Added instrumentation for JUnit4 test framework."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19fbc856f0de364adabf80d0d227ab84fb63aeec", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/19fbc856f0de364adabf80d0d227ab84fb63aeec", "committedDate": "2020-07-24T13:59:55Z", "message": "Remove ContextStore logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a901b0fc68970393d9af97cbe35a422fcb461ca", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0a901b0fc68970393d9af97cbe35a422fcb461ca", "committedDate": "2020-07-15T13:25:54Z", "message": "JUnit4 Instrumentation"}, "afterCommit": {"oid": "f7fdafba7ac78198580fe65367953ebcf0b83a7a", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f7fdafba7ac78198580fe65367953ebcf0b83a7a", "committedDate": "2020-07-24T13:59:55Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7fdafba7ac78198580fe65367953ebcf0b83a7a", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f7fdafba7ac78198580fe65367953ebcf0b83a7a", "committedDate": "2020-07-24T13:59:55Z", "message": "JUnit4 Instrumentation"}, "afterCommit": {"oid": "cd7b1221e165043234f995ebd6dae7134393af0c", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cd7b1221e165043234f995ebd6dae7134393af0c", "committedDate": "2020-07-24T14:38:29Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd7b1221e165043234f995ebd6dae7134393af0c", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cd7b1221e165043234f995ebd6dae7134393af0c", "committedDate": "2020-07-24T14:38:29Z", "message": "JUnit4 Instrumentation"}, "afterCommit": {"oid": "5dacf808ac29b095cd12205f188a1d7f786a4955", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5dacf808ac29b095cd12205f188a1d7f786a4955", "committedDate": "2020-07-27T08:21:18Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5dacf808ac29b095cd12205f188a1d7f786a4955", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5dacf808ac29b095cd12205f188a1d7f786a4955", "committedDate": "2020-07-27T08:21:18Z", "message": "JUnit4 Instrumentation"}, "afterCommit": {"oid": "dffcf3080836c55e8f75eb031d8f533e80fce1b5", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dffcf3080836c55e8f75eb031d8f533e80fce1b5", "committedDate": "2020-07-27T13:01:45Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dffcf3080836c55e8f75eb031d8f533e80fce1b5", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dffcf3080836c55e8f75eb031d8f533e80fce1b5", "committedDate": "2020-07-27T13:01:45Z", "message": "JUnit4 Instrumentation"}, "afterCommit": {"oid": "9baadbf4c6dfff2823d6310f7eb7b492f8528d0a", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9baadbf4c6dfff2823d6310f7eb7b492f8528d0a", "committedDate": "2020-07-27T15:00:48Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dffb903d913721b9199c6c619cfbd469069256f9", "committedDate": "2020-07-27T15:28:59Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9baadbf4c6dfff2823d6310f7eb7b492f8528d0a", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9baadbf4c6dfff2823d6310f7eb7b492f8528d0a", "committedDate": "2020-07-27T15:00:48Z", "message": "JUnit4 Instrumentation"}, "afterCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dffb903d913721b9199c6c619cfbd469069256f9", "committedDate": "2020-07-27T15:28:59Z", "message": "JUnit4 Instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTc5OTg3", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-455979987", "createdAt": "2020-07-27T17:16:11Z", "commit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxNjoxMVrOG3r8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODowNzowMFrOG3tulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc1Mg==", "bodyText": "Would it be possible to annotate the class instead of each method?", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461044752", "createdAt": "2020-07-27T17:16:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4/src/test/groovy/JUnit4Test.groovy", "diffHunk": "@@ -0,0 +1,106 @@\n+import datadog.trace.agent.test.base.TestFrameworkTest\n+import datadog.trace.api.DisableTestTrace\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator\n+import datadog.trace.instrumentation.junit4.JUnit4Decorator\n+import org.junit.runner.JUnitCore\n+import spock.lang.Shared\n+\n+class JUnit4Test extends TestFrameworkTest {\n+\n+  @Shared\n+  def runner = new JUnitCore()\n+\n+  @DisableTestTrace(reason = \"avoid self-tracing\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjQ0NQ==", "bodyText": "Can you use BaseDecorator.spanNameForMethod instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461046445", "createdAt": "2020-07-27T17:19:10Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Decorator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@Slf4j\n+public class JUnit4Decorator extends TestDecorator {\n+  public static final JUnit4Decorator DECORATE = new JUnit4Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit4\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-4\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final Description description) {\n+    onTestStart(span, description, null);\n+  }\n+\n+  public void onTestStart(\n+      final AgentSpan span, final Description description, final String testNameArg) {\n+    final String testSuite = description.getClassName();\n+    final String testName = (testNameArg != null) ? testNameArg : description.getMethodName();\n+\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTg4Mg==", "bodyText": "This seems to suggest the compatibility extends beyond junit 4...", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461055882", "createdAt": "2020-07-27T17:34:50Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4/junit-4.gradle", "diffHunk": "@@ -0,0 +1,15 @@\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'junit'\n+    module = 'junit'\n+    versions = '(,)'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjE2Mg==", "bodyText": "We usually set this version to the earliest supported version.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461056162", "createdAt": "2020-07-27T17:35:15Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4/junit-4.gradle", "diffHunk": "@@ -0,0 +1,15 @@\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'junit'\n+    module = 'junit'\n+    versions = '(,)'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'junit', name: 'junit', version: '4.12'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjU1MQ==", "bodyText": "if we change this, what effect does it have on the spock tests?", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461056551", "createdAt": "2020-07-27T17:35:57Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4/junit-4.gradle", "diffHunk": "@@ -0,0 +1,15 @@\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+muzzle {\n+  pass {\n+    group = 'junit'\n+    module = 'junit'\n+    versions = '(,)'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'junit', name: 'junit', version: '4.12'\n+\n+  testCompile group: 'junit', name: 'junit', version: '4.12'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODIxMg==", "bodyText": "This is mainly only needed if you're doing inheritance/interface matching.  Here you're instrumenting a specific named class, so it's not needed.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461058212", "createdAt": "2020-07-27T17:39:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.junit4.JUnit4Decorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.DisableTestTrace;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.context.TraceScope;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Test;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit4Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit4Instrumentation() {\n+    super(\"junit\", \"junit-4\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.junit.runner.notification.RunNotifier\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"org.junit.runner.notification.RunNotifier\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjg5OA==", "bodyText": "Is this going to be the convention across other languages too?", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461072898", "createdAt": "2020-07-27T18:04:51Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.bootstrap.instrumentation.decorator;\n+\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class TestDecorator extends BaseDecorator {\n+  public static final String TEST_PASS = \"PASS\";\n+  public static final String TEST_FAIL = \"FAIL\";\n+  public static final String TEST_SKIP = \"SKIP\";\n+\n+  protected abstract String testFramework();\n+\n+  protected String service() {\n+    return Config.get().getServiceName() + \".test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MzY0NA==", "bodyText": "Also, since you're going to be calling this every span, consider saving the result to a field to avoid string concat over and over.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461073644", "createdAt": "2020-07-27T18:06:13Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.bootstrap.instrumentation.decorator;\n+\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class TestDecorator extends BaseDecorator {\n+  public static final String TEST_PASS = \"PASS\";\n+  public static final String TEST_FAIL = \"FAIL\";\n+  public static final String TEST_SKIP = \"SKIP\";\n+\n+  protected abstract String testFramework();\n+\n+  protected String service() {\n+    return Config.get().getServiceName() + \".test\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjg5OA=="}, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDA2OA==", "bodyText": "with a field, this conditional should be unnecessary.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461074068", "createdAt": "2020-07-27T18:07:00Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.bootstrap.instrumentation.decorator;\n+\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public abstract class TestDecorator extends BaseDecorator {\n+  public static final String TEST_PASS = \"PASS\";\n+  public static final String TEST_FAIL = \"FAIL\";\n+  public static final String TEST_SKIP = \"SKIP\";\n+\n+  protected abstract String testFramework();\n+\n+  protected String service() {\n+    return Config.get().getServiceName() + \".test\";\n+  }\n+\n+  protected String spanKind() {\n+    return Tags.SPAN_KIND_TEST;\n+  }\n+\n+  @Override\n+  protected String spanType() {\n+    return DDSpanTypes.TEST;\n+  }\n+\n+  @Override\n+  public AgentSpan afterStart(final AgentSpan span) {\n+    assert span != null;\n+    if (service() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dffb903d913721b9199c6c619cfbd469069256f9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc5a87ecf858658d7c21b78e2065767f2b449413", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cc5a87ecf858658d7c21b78e2065767f2b449413", "committedDate": "2020-07-28T06:38:51Z", "message": "Set @DisableTestTrace annotation at type level."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fd8aefd1c9b5f06071ede4149c18ca0772839f0", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4fd8aefd1c9b5f06071ede4149c18ca0772839f0", "committedDate": "2020-07-28T06:43:57Z", "message": "Avoid using CL to load test class. Use Description getTestClass accessor instead."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496255b64b30e5b06c7c697ec35059e4d6673d0f", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/496255b64b30e5b06c7c697ec35059e4d6673d0f", "committedDate": "2020-07-28T06:46:48Z", "message": "Remove unnecesary classLoader matcher."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ae0ac93d9343e81943b1305d3d8169f1ab79a0", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/66ae0ac93d9343e81943b1305d3d8169f1ab79a0", "committedDate": "2020-07-28T06:59:26Z", "message": "Test instrumentation on test inheritance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09990e3acf974a3e9f5763715ceca3efa645e69f", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/09990e3acf974a3e9f5763715ceca3efa645e69f", "committedDate": "2020-07-28T07:08:14Z", "message": "Use spanNameForMethod to calculate test resourceName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7a296f10909325840a6ded93f2f84419286efd", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2b7a296f10909325840a6ded93f2f84419286efd", "committedDate": "2020-07-28T07:21:30Z", "message": "Removed unnecesary test dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "325189415c0508621f234b873ff1fb6fed98a155", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/325189415c0508621f234b873ff1fb6fed98a155", "committedDate": "2020-07-28T07:22:09Z", "message": "Exclude JUnit4 testInheritance classes to be executed during dd-java-agent build lifecycle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d697722c4cf2b572e0a73d3771d85645bb4fc66", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8d697722c4cf2b572e0a73d3771d85645bb4fc66", "committedDate": "2020-07-28T07:39:00Z", "message": "Configure Muzzle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acba3dddd081d78ab4a4d7b69adaa4fb89e38695", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/acba3dddd081d78ab4a4d7b69adaa4fb89e38695", "committedDate": "2020-07-28T07:43:01Z", "message": "service() is based on a field in TestDecorator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ac721a56b5a36bdd4de2ad1e707cbf7317991b8", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9ac721a56b5a36bdd4de2ad1e707cbf7317991b8", "committedDate": "2020-07-28T08:13:23Z", "message": "Use testSuite and testName from Description to calculate resourceName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de288942cdb752e808bb4f7f1bfafca79d4f3cd0", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/de288942cdb752e808bb4f7f1bfafca79d4f3cd0", "committedDate": "2020-07-28T08:13:57Z", "message": "Configure Muzzle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8105fdb1145f266a3d9bac2e8c1e17badcc647b9", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8105fdb1145f266a3d9bac2e8c1e17badcc647b9", "committedDate": "2020-07-28T08:19:48Z", "message": "service name is not changed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ff293264d285a960dfa14babbac8390d433ed7", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/06ff293264d285a960dfa14babbac8390d433ed7", "committedDate": "2020-07-28T08:31:00Z", "message": "service name is not changed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDIzOTM3", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-456423937", "createdAt": "2020-07-28T08:42:16Z", "commit": {"oid": "06ff293264d285a960dfa14babbac8390d433ed7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODo0MjoxNlrOG4CpcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODo0MjoxNlrOG4CpcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxNjgxNw==", "bodyText": "So I thought that setting the TEST_STATUS to TEST_PASS here in onTestStart seemed a bit premature,  shouldn't that be done in onTestFinish? But after reading the instrumentation, it seems that onTestFinish is called for all tests even if it is a failure. Would be nice with some short comments explaining which method gets called when. And yes most of the other decorators are missing this type of information which I think is a shame.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r461416817", "createdAt": "2020-07-28T08:42:16Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/junit-4/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Decorator.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.DisableTestTrace;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@Slf4j\n+public class JUnit4Decorator extends TestDecorator {\n+  public static final JUnit4Decorator DECORATE = new JUnit4Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit4\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-4\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public boolean skipTrace(final Description description) {\n+    return description.getAnnotation(DisableTestTrace.class) != null\n+        || description.getTestClass().getAnnotation(DisableTestTrace.class) != null;\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final Description description) {\n+    onTestStart(span, description, null);\n+  }\n+\n+  public void onTestStart(\n+      final AgentSpan span, final Description description, final String testNameArg) {\n+    final String testSuite = description.getClassName();\n+    final String testName = (testNameArg != null) ? testNameArg : description.getMethodName();\n+\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);\n+    span.setTag(DDTags.TEST_SUITE, testSuite);\n+    span.setTag(DDTags.TEST_NAME, testName);\n+    span.setTag(DDTags.TEST_STATUS, TEST_PASS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ff293264d285a960dfa14babbac8390d433ed7"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b4a7fb1a4c1110b5eb0e597f09d3e3e04dc92e2", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5b4a7fb1a4c1110b5eb0e597f09d3e3e04dc92e2", "committedDate": "2020-07-28T08:52:26Z", "message": "Added comments at JUnit4Decorator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODM0ODg1", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-456834885", "createdAt": "2020-07-28T17:03:51Z", "commit": {"oid": "5b4a7fb1a4c1110b5eb0e597f09d3e3e04dc92e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19f0b56a26c4589045db547e228805fb2649059b", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/19f0b56a26c4589045db547e228805fb2649059b", "committedDate": "2020-07-29T07:19:55Z", "message": "Configure Muzzle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c130e199cf565f1d179786df689c43553ae77bf", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7c130e199cf565f1d179786df689c43553ae77bf", "committedDate": "2020-07-29T07:24:49Z", "message": "Rename module to junit-4.10"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "author": {"user": {"login": "drodriguezhdez", "name": "Daniel Rodriguez Hernandez"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74", "committedDate": "2020-07-29T08:12:04Z", "message": "Test traces disabled by default. Enabled by configuration."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDIxMzcw", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-458421370", "createdAt": "2020-07-30T13:53:11Z", "commit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo1MzoxMVrOG5kBrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo1MzoxMVrOG5kBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAxMjI2OQ==", "bodyText": "This could have been just false... no additional config required.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463012269", "createdAt": "2020-07-30T13:53:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-4.10/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -55,6 +56,11 @@ public JUnit4Instrumentation() {\n     return transformers;\n   }\n \n+  @Override\n+  protected boolean defaultEnabled() {\n+    return Config.get().isTraceTestsEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDM3OTIy", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-458437922", "createdAt": "2020-07-30T14:09:54Z", "commit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDowOTo1NVrOG5kv9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDowOTo1NVrOG5kv9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNDExNw==", "bodyText": "I'm curious if using a RunListener would suffice instead of resorting to instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463024117", "createdAt": "2020-07-30T14:09:55Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/junit-4.10/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.junit4.JUnit4Decorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.context.TraceScope;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit4Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit4Instrumentation() {\n+    super(\"junit\", \"junit-4\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.junit.runner.notification.RunNotifier\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".JUnit4Decorator\"};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDQ1MTEz", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-458445113", "createdAt": "2020-07-30T14:17:15Z", "commit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoxNzoxNVrOG5lFBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoxNzoxNVrOG5lFBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyOTUxMA==", "bodyText": "This ends up repeating the annotation detection of JUnit.\nIf the RunListener is sufficient, we can avoid that altogether.", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#discussion_r463029510", "createdAt": "2020-07-30T14:17:15Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/junit-4.10/src/main/java/datadog/trace/instrumentation/junit4/JUnit4Instrumentation.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package datadog.trace.instrumentation.junit4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.junit4.JUnit4Decorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.context.TraceScope;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.Description;\n+import org.junit.runner.notification.Failure;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit4Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit4Instrumentation() {\n+    super(\"junit\", \"junit-4\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.junit.runner.notification.RunNotifier\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".JUnit4Decorator\"};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        named(\"fireTestStarted\"), JUnit4Instrumentation.class.getName() + \"$TestStartedAdvice\");\n+    transformers.put(\n+        named(\"fireTestFinished\"), JUnit4Instrumentation.class.getName() + \"$TestFinishedAdvice\");\n+    transformers.put(\n+        named(\"fireTestFailure\"), JUnit4Instrumentation.class.getName() + \"$TestFailureAdvice\");\n+    transformers.put(\n+        named(\"fireTestIgnored\"), JUnit4Instrumentation.class.getName() + \"$TestIgnoredAdvice\");\n+    return transformers;\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return Config.get().isTraceTestsEnabled();\n+  }\n+\n+  public static class TestStartedAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void startTest(@Advice.Argument(0) final Description description) {\n+      if (DECORATE.skipTrace(description)) {\n+        return;\n+      }\n+\n+      final AgentSpan span = startSpan(\"junit.test\");\n+      final AgentScope scope = activateSpan(span);\n+      scope.setAsyncPropagation(true);\n+\n+      DECORATE.afterStart(span);\n+      DECORATE.onTestStart(span, description);\n+    }\n+  }\n+\n+  public static class TestFinishedAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void finishTest(@Advice.Argument(0) final Description description) {\n+      if (DECORATE.skipTrace(description)) {\n+        return;\n+      }\n+\n+      final AgentSpan span = AgentTracer.activeSpan();\n+      if (span == null) {\n+        return;\n+      }\n+\n+      final TraceScope scope = AgentTracer.activeScope();\n+      if (scope != null) {\n+        scope.close();\n+      }\n+\n+      DECORATE.onTestFinish(span);\n+      DECORATE.beforeFinish(span);\n+      span.finish();\n+    }\n+  }\n+\n+  public static class TestFailureAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void failureTest(@Advice.Argument(0) final Failure failure) {\n+      if (DECORATE.skipTrace(failure.getDescription())) {\n+        return;\n+      }\n+\n+      final AgentSpan span = AgentTracer.activeSpan();\n+      if (span == null) {\n+        return;\n+      }\n+\n+      DECORATE.onTestFailure(span, failure);\n+    }\n+  }\n+\n+  public static class TestIgnoredAdvice {\n+    @Advice.OnMethodExit\n+    public static void ignoreTest(@Advice.Argument(0) final Description description) {\n+      if (DECORATE.skipTrace(description)) {\n+        return;\n+      }\n+\n+      final List<String> testNames = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDQ2NjA1", "url": "https://github.com/DataDog/dd-trace-java/pull/1683#pullrequestreview-458446605", "createdAt": "2020-07-30T14:18:50Z", "commit": {"oid": "16aa8c5a518bc0b6fd2df5ef154f8dc719ddca74"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2261, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}