{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTI1OTEz", "number": 1629, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDoyOToyOVrOEItBIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDoyOToyOVrOEItBIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTYxNjM1OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDoyOToyOVrOGo00Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDoyOToyOVrOGo00Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2MTYwNw==", "bodyText": "I would be tempted to make this a wrapper around a raw byte[] and implement the CharSequence basics.", "url": "https://github.com/DataDog/dd-trace-java/pull/1629#discussion_r445461607", "createdAt": "2020-06-25T10:29:29Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.bootstrap.instrumentation.api;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * Class that wraps a {@code String} and caches the UTF8 byte representation. Implements {@code\n+ * CharSequence} so that it can be mixed with normal{@code String} instances.\n+ */\n+public final class UTF8BytesString implements CharSequence {\n+  public static UTF8BytesString create(String string) {\n+    if (string == null) {\n+      return null;\n+    } else {\n+      // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n+      // very String, we create a new wrapper String that we hold on to instead.\n+      return new UTF8BytesString(new String(string));\n+    }\n+  }\n+\n+  public static UTF8BytesString create(CharSequence chars) {\n+    if (chars == null) {\n+      return null;\n+    } else if (chars instanceof UTF8BytesString) {\n+      return (UTF8BytesString) chars;\n+    } else if (chars instanceof String) {\n+      return create((String) chars);\n+    } else {\n+      return new UTF8BytesString(String.valueOf(chars));\n+    }\n+  }\n+\n+  private final String string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4536eae809cc632593703f790d55db99f85e2ab"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 96, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}