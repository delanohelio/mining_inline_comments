{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzIzMjc0", "number": 1412, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNjo1NFrOD3_7UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxNTozN1rOD8f53Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ1NjQ5OnYy", "diffSide": "RIGHT", "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNjo1NFrOGOkyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0MjoyNVrOGQA5rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ==", "bodyText": "This should be volatile or atomic. I think we already have pattern in datadog.trace.api.GlobalTracer that should be reused.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417935951", "createdAt": "2020-04-30T11:16:54Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyNDA2OA==", "bodyText": "I'll admit I'm not necessarily a fan of our current to late binding approach; however, being consistent seems like a reasonable start for now.\nMy one question is \"why do we need the dependency injection for SessionFactory?\"  Do we foresee other implementations in the near term?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r418024068", "createdAt": "2020-04-30T13:49:21Z", "author": {"login": "dougqh"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyODE4Ng==", "bodyText": "The problem is the interaction between 3 classloaders:\n\njava agent Classloader\ntracer ClassLoader where you will use the API\nprofiling ClassLoader where the implementation will reside\nI need to inject the implementation at some point", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r418028186", "createdAt": "2020-04-30T13:54:45Z", "author": {"login": "jpbempel"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAzMjU2MA==", "bodyText": "Above is correct with possibly two comments:\n\n\nThere are limitations in terms of APIs older jvms provide and what we can inject into tracer/agent classloaders considering need to run on older jvms\n\n\nIt is not clear to me that implementation of that api has to be specifically on profiler classloader - I think it is TBD, really... Like we ended up doing cpu time event not on profiler Classloader - and on JMX classloader instead even though it produces JFR events.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r418032560", "createdAt": "2020-04-30T14:00:41Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0ODkzNw==", "bodyText": "I am ok to move impl outside of Profiling ClassLoader, but if we endup in JMX classloader, the problem of late binding is the same :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r418048937", "createdAt": "2020-04-30T14:23:33Z", "author": {"login": "jpbempel"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MDEyMQ==", "bodyText": "@dougqh The whole late-binding business is caused by JMX initializing j.u.l classes which in turn seems to mess up some instrumented apps.\nUnfortunately, the JLS allows eager class runtime constant pool initialization in which case simply having the incriminating JMX code reachable via class references (not even using or instantiating the entry class!) can make the problem to pop up.\nTherefore all that late-binding-via-reflection magic :/", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r419440121", "createdAt": "2020-05-04T13:35:14Z", "author": {"login": "jbachorik"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0NTE2NQ==", "bodyText": "@mar-kolya\n\nThere are limitations in terms of APIs older jvms provide and what we can inject into tracer/agent classloaders considering need to run on older jvms\n\nThe MX bean we are going to be using to get the stacktraces has been in JDK since 1.6 so it should be fairly safe to use :)\n\nIt is not clear to me that implementation of that api has to be specifically on profiler classloader - I think it is TBD, really... Like we ended up doing cpu time event not on profiler Classloader - and on JMX classloader instead even though it produces JFR events.\n\nWell, at least the API part will have to live in bootstrap since the classes need to be accessible from all instrumentations. In fact I think we will need to mirror the classloading setup we are using for ScopeEvents since this API will be called from more or less the same places.\nThe implementation part, on the other hand, is pretty much free to decide where it wants to live - we can add it to the profiler 'space' or create something separate just for the JMX sampler (although this would be a bit of overkill for the simple impl we have in mind).", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r419445165", "createdAt": "2020-05-04T13:42:25Z", "author": {"login": "jbachorik"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ1Nzc5OnYy", "diffSide": "RIGHT", "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNzoyN1rOGOkzPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo0MDowOFrOGQAzYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjE5MA==", "bodyText": "Public interfaces should be documented", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417936190", "createdAt": "2020-04-30T11:17:27Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface SessionFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4Mzk1Nw==", "bodyText": "I'm fine with more documentation, but I think we should separate a few things here.\n\n\nFirst, there's a difference between a public class and a published API.\nI suspect we don't want outside users calling this class, so the more important thing might be placing this an internal package.\n\n\nSecond, added a minimal header comment isn't really documentation in my view.\nFor the most part, I'd say most of our code lacks documentation and we should fix that, but I'd place the emphasis on package and concept documentation over header doc.\n\n\nThird, I care more that we agree on the interface first -- we can add the documentation once we've reached agreemnt.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r418183957", "createdAt": "2020-04-30T17:48:11Z", "author": {"login": "dougqh"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface SessionFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjE5MA=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxNzE2OA==", "bodyText": "Some documentation is better than none, but yeah good points.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r418217168", "createdAt": "2020-04-30T18:47:10Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface SessionFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjE5MA=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNTQ2NA==", "bodyText": "A standard Javadoc block is a very good way to make the API (even internal one) discoverable. Nothing is more frustrating than guessing the expected input and output - although that should be also possible to deduce from unit tests having the javadoc being rendered right in the IDE without the need to jump around and build the mental model of the whole thing seems to be a better use of time (at least IMO).", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r419435464", "createdAt": "2020-05-04T13:28:41Z", "author": {"login": "jbachorik"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface SessionFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjE5MA=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MzU1NA==", "bodyText": "I am ok to move those classes, but where is the best place/package?\nThis api needs to be available by instrumenters and the implementation", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r419443554", "createdAt": "2020-05-04T13:40:08Z", "author": {"login": "jpbempel"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface SessionFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjE5MA=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDQ1ODM2OnYy", "diffSide": "RIGHT", "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Session.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNzo0MVrOGOkzpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoyNDo0N1rOGURMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI5Mg==", "bodyText": "Should this be Closeable", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417936292", "createdAt": "2020-04-30T11:17:41Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Session.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface Session {\n+  void stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjQyNA==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423906424", "createdAt": "2020-05-12T17:24:47Z", "author": {"login": "jpbempel"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Session.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface Session {\n+  void stop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI5Mg=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDgzMTU2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowNzowNVrOGOoYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozOTo0OVrOGURw8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDkxNg==", "bodyText": "The way things turn out to be we may not be able to use JMX inside profiler for certain setups. Please see how datadog.trace.common.util.ThreadCpuTimeAccess is implemented and used from datadog.trace.bootstrap.Agent", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417994916", "createdAt": "2020-04-30T13:07:05Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.api.profiling.Session;\n+\n+public class JMXSession implements Session {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMjM0OQ==", "bodyText": "Please add a fixme to address this if this is not going to be addressed in this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423902349", "createdAt": "2020-05-12T17:18:05Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.api.profiling.Session;\n+\n+public class JMXSession implements Session {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDkxNg=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNjYxMw==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423906613", "createdAt": "2020-05-12T17:25:04Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.api.profiling.Session;\n+\n+public class JMXSession implements Session {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDkxNg=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTc2Mg==", "bodyText": "I do not think this has been done. getProvider may still be called too early - at least I do not see what prevents that from happening.\ndatadog.trace.common.util.ThreadCpuTimeAccess has enableJMX that is called from Agent.java when safe to load jmx parts..", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423915762", "createdAt": "2020-05-12T17:39:49Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.api.profiling.Session;\n+\n+public class JMXSession implements Session {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDkxNg=="}, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDI2NTgxOnYy", "diffSide": "RIGHT", "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjozMlrOGRaYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjozMlrOGRaYtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMTI4NA==", "bodyText": "Please move this and related classes to the internal-api project instead.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r420911284", "createdAt": "2020-05-06T16:06:32Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.api.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ * Example of usage:\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ * or\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756286ceaee94cc2f9d74498e830fe0433534e6e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjkyMTE2OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoyNTozN1rOGT0tng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODo0NzowN1rOGT8fwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzOTc3NA==", "bodyText": "Because we saw this in python: what happens if a user starts and stops the profiler many times a second?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423439774", "createdAt": "2020-05-12T03:25:37Z", "author": {"login": "dbenamydd"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ * Example of usage:\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ * or\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NzI5Nw==", "bodyText": "This is an internal API - meaning that only tracer should be calling it directly.\nThat should give us some control over the usage.\nAs for the initial question - the sampler periodical task is still running with a constant period.  Calling start() will just mark that particular thread as eligible for sampling - eg. add the thread ID to the list of thread IDs for which we request stack traces. So it is not really starting-stopping the profiler and the call frequency will impact only what is collected but has no real side-effects.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423567297", "createdAt": "2020-05-12T08:47:07Z", "author": {"login": "jbachorik"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ * Example of usage:\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ * or\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzOTc3NA=="}, "originalCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTc3OTA0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxNzozMVrOGUQ7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozMDo0M1rOGURaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMTk3NA==", "bodyText": "Isn't this a race condition? I think you may potentially overwrite newly created live session with null.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423901974", "createdAt": "2020-05-12T17:17:31Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.profiling.Session;\n+import datadog.trace.profiling.SessionFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class JMXSessionFactory implements SessionFactory {\n+  private static final AtomicInteger refCount = new AtomicInteger();\n+  private static final AtomicReference<JMXSession> currentSession = new AtomicReference<>(null);\n+\n+  public Session createSession(Thread thread) {\n+    int prevCount = refCount.getAndIncrement();\n+    if (prevCount == 0) {\n+      currentSession.compareAndSet(null, new JMXSession(this, thread));\n+    }\n+    Session session = currentSession.get();\n+    session.addThread(thread);\n+    return session;\n+  }\n+\n+  void decCount() {\n+    int currentCount = refCount.decrementAndGet();\n+    if (currentCount == 0) {\n+      currentSession.set(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMDA4Nw==", "bodyText": "Indeed it is.\nAlso, calling JmxSession.close() is not idempotent since each call will decrement the counter and as such calls to createSession will not actually create a new session until it is called as many times as the previous closes :/\nAlso, the ref-counting is happening on a global level and it should be per-thread.\nIMO, the implementation should be a WeakMap<Thread, JMXSession> based and JMXSession should be doing the ref-counting via atomic counter. That should solve most if not all concurrency issues seen here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423910087", "createdAt": "2020-05-12T17:30:43Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.profiling.Session;\n+import datadog.trace.profiling.SessionFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class JMXSessionFactory implements SessionFactory {\n+  private static final AtomicInteger refCount = new AtomicInteger();\n+  private static final AtomicReference<JMXSession> currentSession = new AtomicReference<>(null);\n+\n+  public Session createSession(Thread thread) {\n+    int prevCount = refCount.getAndIncrement();\n+    if (prevCount == 0) {\n+      currentSession.compareAndSet(null, new JMXSession(this, thread));\n+    }\n+    Session session = currentSession.get();\n+    session.addThread(thread);\n+    return session;\n+  }\n+\n+  void decCount() {\n+    int currentCount = refCount.decrementAndGet();\n+    if (currentCount == 0) {\n+      currentSession.set(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMTk3NA=="}, "originalCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzc5NTE2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1Nzo0M1rOGU4ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1OToxOVrOGU4nWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1MTEwMw==", "bodyText": "Can this be simplified by having jmxSessions as ConcurrentHashMap?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424551103", "createdAt": "2020-05-13T15:57:43Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -2,27 +2,39 @@\n \n import datadog.trace.profiling.Session;\n import datadog.trace.profiling.SessionFactory;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n \n public class JMXSessionFactory implements SessionFactory {\n-  private static final AtomicInteger refCount = new AtomicInteger();\n-  private static final AtomicReference<JMXSession> currentSession = new AtomicReference<>(null);\n+  private static final Map<Long, JMXSession> jmxSessions = new HashMap<>();\n+\n+  private final StackTraceSink sink;\n+\n+  public JMXSessionFactory(StackTraceSink sink) {\n+    this.sink = sink;\n+  }\n \n   public Session createSession(Thread thread) {\n-    int prevCount = refCount.getAndIncrement();\n-    if (prevCount == 0) {\n-      currentSession.compareAndSet(null, new JMXSession(this, thread));\n+    long id = thread.getId();\n+    JMXSession session;\n+    synchronized (jmxSessions) {\n+      session = jmxSessions.computeIfAbsent(id, this::newSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1MjI4Mg==", "bodyText": "I don't think so, because of the cleanup which iterates on thread ids and will generate a race condition if we starting a new session", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424552282", "createdAt": "2020-05-13T15:59:19Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -2,27 +2,39 @@\n \n import datadog.trace.profiling.Session;\n import datadog.trace.profiling.SessionFactory;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n \n public class JMXSessionFactory implements SessionFactory {\n-  private static final AtomicInteger refCount = new AtomicInteger();\n-  private static final AtomicReference<JMXSession> currentSession = new AtomicReference<>(null);\n+  private static final Map<Long, JMXSession> jmxSessions = new HashMap<>();\n+\n+  private final StackTraceSink sink;\n+\n+  public JMXSessionFactory(StackTraceSink sink) {\n+    this.sink = sink;\n+  }\n \n   public Session createSession(Thread thread) {\n-    int prevCount = refCount.getAndIncrement();\n-    if (prevCount == 0) {\n-      currentSession.compareAndSet(null, new JMXSession(this, thread));\n+    long id = thread.getId();\n+    JMXSession session;\n+    synchronized (jmxSessions) {\n+      session = jmxSessions.computeIfAbsent(id, this::newSession);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1MTEwMw=="}, "originalCommit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzgxMjc1OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMTo0MlrOGU4uJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMTo0MlrOGU4uJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NDAyMA==", "bodyText": "Seems like the formatting tool messed this up a bit :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424554020", "createdAt": "2020-05-13T16:01:42Z", "author": {"login": "jbachorik"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -3,14 +3,16 @@\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * Entry point of the Profiling API to allow trigger sampling profiling on demand\n- * Example of usage:\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk5NDMzOnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NzowNlrOGU6jIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyMDo0OVrOGVRL8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA==", "bodyText": "Do we need to pass in any metadata like trace/span id?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424583968", "createdAt": "2020-05-13T16:47:06Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNjQ5Mg==", "bodyText": "What is the type for those?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424616492", "createdAt": "2020-05-13T17:40:19Z", "author": {"login": "jpbempel"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMjM5Nw==", "bodyText": "Funny you should ask that... we use different representations internally depending on the context. (There's even a possibility that we change that: #1458)\nFor now, I'd suggest sticking with BigInteger.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424702397", "createdAt": "2020-05-13T20:10:48Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTQ1MA==", "bodyText": "We may want to use this for other kinds of contexts in the future, but perhaps cross that bridge when we have to? For now traceid and/or spanid should be enough. The implementation will basically record a special event with this context for the thread for the duration of the sampling.\nWhat is the internal representation for traceid/spanid? If they are sometimes strings, we might as well just accept strings. We'll basically have to convert them to strings in our events anyways (JFR has no native support for big integers).", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424735450", "createdAt": "2020-05-13T21:15:21Z", "author": {"login": "thegreystone"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MDU3OA==", "bodyText": "I'd suggest exposing it as string then and we can do the conversion on our side.  We can likely do it more efficiently since we cache the serialization result.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424740578", "createdAt": "2020-05-13T21:25:52Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1NDg2Nw==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424954867", "createdAt": "2020-05-14T08:20:49Z", "author": {"login": "jpbempel"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk5NzEyOnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0Nzo0M1rOGU6k2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyMDozMlrOGVRLLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDQxMA==", "bodyText": "I don't think we would ever use this since we wouldn't pass the session between threads.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424584410", "createdAt": "2020-05-13T16:47:43Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package datadog.trace.profiling;\n+\n+import java.io.Closeable;\n+\n+/** Represents the current profiling session Call close method to end the profiling session */\n+public interface Session extends Closeable {\n+\n+  /**\n+   * Adds a thread to be sampled for the current session\n+   *\n+   * @param thread additional thread to be sampled\n+   */\n+  void addThread(Thread thread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NTExMA==", "bodyText": "I'd second that... is there any technical difference between 'multi-thread' session and multiple sessions, one per thread?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424595110", "createdAt": "2020-05-13T17:04:46Z", "author": {"login": "mar-kolya"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package datadog.trace.profiling;\n+\n+import java.io.Closeable;\n+\n+/** Represents the current profiling session Call close method to end the profiling session */\n+public interface Session extends Closeable {\n+\n+  /**\n+   * Adds a thread to be sampled for the current session\n+   *\n+   * @param thread additional thread to be sampled\n+   */\n+  void addThread(Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDQxMA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTg1MA==", "bodyText": "I was thinking about one session for a trace and then adding thread for async calls, no?\nHow are you dealing with async calls?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424615850", "createdAt": "2020-05-13T17:39:18Z", "author": {"login": "jpbempel"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package datadog.trace.profiling;\n+\n+import java.io.Closeable;\n+\n+/** Represents the current profiling session Call close method to end the profiling session */\n+public interface Session extends Closeable {\n+\n+  /**\n+   * Adds a thread to be sampled for the current session\n+   *\n+   * @param thread additional thread to be sampled\n+   */\n+  void addThread(Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDQxMA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwMTA4MQ==", "bodyText": "That would be a separate call to the api and an independent session.  Session would only be associated with a single thread since it's tied to a scope.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424701081", "createdAt": "2020-05-13T20:08:22Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package datadog.trace.profiling;\n+\n+import java.io.Closeable;\n+\n+/** Represents the current profiling session Call close method to end the profiling session */\n+public interface Session extends Closeable {\n+\n+  /**\n+   * Adds a thread to be sampled for the current session\n+   *\n+   * @param thread additional thread to be sampled\n+   */\n+  void addThread(Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDQxMA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1NDY3MA==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424954670", "createdAt": "2020-05-14T08:20:32Z", "author": {"login": "jpbempel"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package datadog.trace.profiling;\n+\n+import java.io.Closeable;\n+\n+/** Represents the current profiling session Call close method to end the profiling session */\n+public interface Session extends Closeable {\n+\n+  /**\n+   * Adds a thread to be sampled for the current session\n+   *\n+   * @param thread additional thread to be sampled\n+   */\n+  void addThread(Thread thread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDQxMA=="}, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzYzODY5OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxNTozN1rOGVeYow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxODoyNlrOGVegzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MTEwNw==", "bodyText": "This will be called through reflection during agent startup?\nIf yes, could you make this private (it kind of exposes the implementation detail) and just do setAccessible() before invoking it via reflection?\nIf it's not the usecase, please disregard this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r425171107", "createdAt": "2020-05-14T14:15:37Z", "author": {"login": "jbachorik"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ *\n+ * <p>Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling(spanId)) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling(spanId)\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling(String id) {\n+    return startProfiling(id, Thread.currentThread());\n+  }\n+\n+  /**\n+   * Starts a profiling session for the specified thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling(String id, Thread thread) {\n+    SessionFactory localFactory = factory;\n+    if (localFactory == null) {\n+      log.warn(\"Profiling session not initialized\");\n+      return NO_SESSION;\n+    }\n+    return localFactory.createSession(id, thread);\n+  }\n+\n+  /**\n+   * Initializes the Profiler API with an implementation through SessionFactory\n+   *\n+   * @param sessionFactory\n+   */\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MzE5OQ==", "bodyText": "Ok, apparently this is called directly so the comment does not apply.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r425173199", "createdAt": "2020-05-14T14:18:26Z", "author": {"login": "jbachorik"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ *\n+ * <p>Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling(spanId)) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling(spanId)\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling(String id) {\n+    return startProfiling(id, Thread.currentThread());\n+  }\n+\n+  /**\n+   * Starts a profiling session for the specified thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling(String id, Thread thread) {\n+    SessionFactory localFactory = factory;\n+    if (localFactory == null) {\n+      log.warn(\"Profiling session not initialized\");\n+      return NO_SESSION;\n+    }\n+    return localFactory.createSession(id, thread);\n+  }\n+\n+  /**\n+   * Initializes the Profiler API with an implementation through SessionFactory\n+   *\n+   * @param sessionFactory\n+   */\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MTEwNw=="}, "originalCommit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 274, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}