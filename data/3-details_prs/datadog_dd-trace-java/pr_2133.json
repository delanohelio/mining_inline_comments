{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDk5Nzcz", "number": 2133, "title": "Simplify context store read check", "bodyText": "The partial JVM simulation made this code more complex than it needed to be for the purposes of checking the last two constants loaded before the method invocation. Also replaced use of reflected method information with constants - this avoids repeated string transformations while still catching the necessary rewriting.", "createdAt": "2020-11-30T11:58:37Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2133", "merged": true, "mergeCommit": {"oid": "559d811668f6ec6c61ec8fcbaf721d80d685c390"}, "closed": true, "closedAt": "2020-11-30T17:45:49Z", "author": {"login": "mcculls"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhjq6SgH2gAyNTI5NDk5NzczOmFlZmJjMmFjMWZjNzU2MTU3NWIyZTNiODg0MTNkZDMzNjVlMGVlMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhko1LgH2gAyNTI5NDk5NzczOjAxMmI5NWI4YTEwYmFiYzdkNWU3ZTI0ZmMzYjNkMTE4NDkwYWMyYzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aefbc2ac1fc7561575b2e3b88413dd3365e0ee27", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/aefbc2ac1fc7561575b2e3b88413dd3365e0ee27", "committedDate": "2020-11-30T11:30:17Z", "message": "Prefer constants when matching against bytecode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b820583a482dcf36fff3e81b4c810d9a8fb16e6f", "committedDate": "2020-11-30T11:45:50Z", "message": "Remove partial JVM simulation and replace with simple constant check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODQyMjk2", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#pullrequestreview-540842296", "createdAt": "2020-11-30T11:59:54Z", "commit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1OTo1NVrOH73_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1OTo1NVrOH73_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTI5NQ==", "bodyText": "Sorry to bikeshed but can we not do snake case?", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532545295", "createdAt": "2020-11-30T11:59:55Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */\n-              if ((insnStack[0] == Opcodes.INVOKESTATIC\n-                      && insnStack[1] == Opcodes.LDC\n-                      && insnStack[2] == Opcodes.LDC)\n-                  && (stack[0] instanceof Type && stack[1] instanceof Type)) {\n-                final String contextClassName = ((Type) stack[0]).getClassName();\n-                final String keyClassName = ((Type) stack[1]).getClassName();\n+              if (constant_1 instanceof Type && constant_2 instanceof Type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7dcd0d4528f0f7fc356d7d23af0e00a7b941596", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c7dcd0d4528f0f7fc356d7d23af0e00a7b941596", "committedDate": "2020-11-30T12:02:23Z", "message": "Remove snake-case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODQ0NjI0", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#pullrequestreview-540844624", "createdAt": "2020-11-30T12:03:13Z", "commit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwODUzODM3", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#pullrequestreview-540853837", "createdAt": "2020-11-30T12:16:46Z", "commit": {"oid": "c7dcd0d4528f0f7fc356d7d23af0e00a7b941596"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxNjo0NlrOH74jfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxNjo0NlrOH74jfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NDYyMw==", "bodyText": "This comment can use an update.", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532554623", "createdAt": "2020-11-30T12:16:46Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dcd0d4528f0f7fc356d7d23af0e00a7b941596"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "012b95b8a10babc7d5e7e24fc3b3d118490ac2c4", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/012b95b8a10babc7d5e7e24fc3b3d118490ac2c4", "committedDate": "2020-11-30T12:37:55Z", "message": "Update comments to match code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2889, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}