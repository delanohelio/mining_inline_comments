{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTU4ODU2", "number": 1461, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowOTowM1rOD8hbGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0ODo0MVrOD89lrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg4NzYzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowOTowM1rOGVg4AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyNDozOFrOGV7Rvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMTkwNA==", "bodyText": "Coul you please explain why it mutates parameter instead of just returning a new list?", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425211904", "createdAt": "2020-05-14T15:09:03Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxNDI0OA==", "bodyText": "To let the caller having the choice to allocate or reuse the list (reducing garbage...)", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425214248", "createdAt": "2020-05-14T15:12:05Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMTkwNA=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4MTc5Mw==", "bodyText": "Overall this seems like a premature optimization considering amount of allocation happening beyond that list. And also this is not a public API so we could potentially change it later if we needed to optimize...\nBut if you strongly feel this is the way to go, could you please:\n\nrename it to fill...\ndocument that it mutates parameter\ndocument that is requires caller to clean up the list before call", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425281793", "createdAt": "2020-05-14T16:43:58Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMTkwNA=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYzOTIxMA==", "bodyText": "I agree with @mar-kolya here.\nUnfortunately, the number of stack frames is not fixed so the list will need to be resized from time to time. Also, it needs to be cleared after use which basically makes all objects originally contained by this list eligible for GC unless they are referenced from elsewhere. So we could save some allocations of the underlying array if we are lucky and don't need a lot of resizing. Would be good to measure the effect before an attempt to optimize this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425639210", "createdAt": "2020-05-15T08:14:50Z", "author": {"login": "jbachorik"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMTkwNA=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NDQ3OQ==", "bodyText": "The list depends on the number of the threads not the depth of the stacks which are arrays of StrackTraceElement.\nThis is not an optimization, but an api design that allow flexibility on how to deal with object lifecycle and does not enforce the fact that we need to allocate an object to return the requested information.\nHowever I will change to comply to your comments.", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425644479", "createdAt": "2020-05-15T08:24:38Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMTkwNA=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg5MDgzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowOTo0MlrOGVg6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjozMjo0OFrOGVkszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMjQyMA==", "bodyText": "Why to just use toArray?", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425212420", "createdAt": "2020-05-14T15:09:42Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package datadog.trace.core.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class JmxThreadStackProvider implements ThreadStackProvider {\n+  private final ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+\n+  public static final ThreadStackProvider INSTANCE = new JmxThreadStackProvider();\n+\n+  @Override\n+  public void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces) {\n+    long[] ids = new long[threadIds.size()];\n+    int idx = 0;\n+    for (Long id : threadIds) {\n+      ids[idx] = id;\n+      idx++;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxODkxOQ==", "bodyText": "because toArray does not return a primitive array", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425218919", "createdAt": "2020-05-14T15:18:24Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package datadog.trace.core.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class JmxThreadStackProvider implements ThreadStackProvider {\n+  private final ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+\n+  public static final ThreadStackProvider INSTANCE = new JmxThreadStackProvider();\n+\n+  @Override\n+  public void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces) {\n+    long[] ids = new long[threadIds.size()];\n+    int idx = 0;\n+    for (Long id : threadIds) {\n+      ids[idx] = id;\n+      idx++;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMjQyMA=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NDU3Mg==", "bodyText": "ah, ok, and we cannot use streams I guess.", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425274572", "createdAt": "2020-05-14T16:32:48Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package datadog.trace.core.util;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class JmxThreadStackProvider implements ThreadStackProvider {\n+  private final ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+\n+  public static final ThreadStackProvider INSTANCE = new JmxThreadStackProvider();\n+\n+  @Override\n+  public void getStackTrace(Set<Long> threadIds, List<StackTraceElement[]> stackTraces) {\n+    long[] ids = new long[threadIds.size()];\n+    int idx = 0;\n+    for (Long id : threadIds) {\n+      ids[idx] = id;\n+      idx++;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMjQyMA=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg5OTM1OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToxMToyNVrOGVg_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTozNTo0NVrOGViH2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMzc1Mg==", "bodyText": "FWIW: if you didn't have this static instance the whole class could be GCed once real thing is loaded...", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425213752", "createdAt": "2020-05-14T15:11:25Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public class NoneThreadStackProvider implements ThreadStackProvider {\n+\n+  public static final ThreadStackProvider INSTANCE = new NoneThreadStackProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzMjM0NQ==", "bodyText": "true", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425232345", "createdAt": "2020-05-14T15:35:45Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/NoneThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public class NoneThreadStackProvider implements ThreadStackProvider {\n+\n+  public static final ThreadStackProvider INSTANCE = new NoneThreadStackProvider();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxMzc1Mg=="}, "originalCommit": {"oid": "5be1b2390e5a1bc73913c49a3bc873812ae845cd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjUwMjIzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0ODo0MVrOGWOUhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo1NTowOVrOGWOhSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjQ4NQ==", "bodyText": "I have a concern about this API . We can have 2 different Sets with all same elements, but iteration order over these elements will be different.  As a result of this method, we can have a list with stack traces ordered in a different way for equal Sets. So, it requires user of this API strictly rely on iteration order of the set which we pass as an argument. Moreover, there is no guarantee, that iteration by one iterator will return the same order for another iterator for some instance of Set. It means even having the same instance of the Set, we won't necessarily be able to understand which stacktrace correspond to which thread ID.", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425956485", "createdAt": "2020-05-15T17:48:41Z", "author": {"login": "lpriima"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  List<StackTraceElement[]> getStackTrace(Set<Long> threadIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94f81182900741c55a27989264581a721de87951"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1OTc1NA==", "bodyText": "true, good catch", "url": "https://github.com/DataDog/dd-trace-java/pull/1461#discussion_r425959754", "createdAt": "2020-05-15T17:55:09Z", "author": {"login": "jpbempel"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/ThreadStackProvider.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.util;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+public interface ThreadStackProvider {\n+  List<StackTraceElement[]> getStackTrace(Set<Long> threadIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NjQ4NQ=="}, "originalCommit": {"oid": "94f81182900741c55a27989264581a721de87951"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 321, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}