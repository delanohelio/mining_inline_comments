{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzA5MTIx", "number": 2129, "title": "Add support for JBoss LogManager and early LogContextScopeListener registration", "bodyText": "This adds support for the JBoss LogManager MDC as well as delays the LogContextScopeListener until there is a Tracer installed if necessary.", "createdAt": "2020-11-27T16:44:19Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2129", "merged": true, "mergeCommit": {"oid": "d95d561772401cca538f4507a3781e5cd7c7d887"}, "closed": true, "closedAt": "2020-12-01T10:59:08Z", "author": {"login": "bantonsson"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgqjxlAFqTU0MDEwMjUyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh2qr3ABqjQwNTYxMTA0NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTAyNTIz", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540102523", "createdAt": "2020-11-27T16:57:54Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjo1Nzo1NFrOH7EWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjo1Nzo1NFrOH7EWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY5OTM0OA==", "bodyText": "This should only happen once, right?", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531699348", "createdAt": "2020-11-27T16:57:54Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jboss-logmanager/src/main/java/datadog/trace/instrumentation/jbosslogmanager/JBossLogManagerMDCInstrumentation.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package datadog.trace.instrumentation.jbosslogmanager;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.agent.tooling.log.LogContextScopeListener;\n+import datadog.trace.api.Config;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JBossLogManagerMDCInstrumentation extends Instrumenter.Default {\n+  public static final String MDC_INSTRUMENTATION_NAME = \"jboss-logmanager\";\n+\n+  public JBossLogManagerMDCInstrumentation() {\n+    super(MDC_INSTRUMENTATION_NAME);\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return Config.get().isLogsInjectionEnabled();\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"org.jboss.logmanager.MDC\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isTypeInitializer(),\n+        JBossLogManagerMDCInstrumentation.class.getName() + \"$MDCContextAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\"datadog.trace.agent.tooling.log.LogContextScopeListener\"};\n+  }\n+\n+  public static class MDCContextAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTAzMzgy", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540103382", "createdAt": "2020-11-27T16:59:58Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjo1OTo1OFrOH7EZew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjo1OTo1OFrOH7EZew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMDA5MQ==", "bodyText": "For it to work at all or to work better?", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531700091", "createdAt": "2020-11-27T16:59:58Z", "author": {"login": "richardstartin"}, "path": "dd-smoke-tests/quarkus/application/build.gradle", "diffHunk": "@@ -0,0 +1,46 @@\n+plugins {\n+  id 'java'\n+  id 'io.quarkus'\n+  id 'com.diffplug.gradle.spotless' version '4.3.0'\n+  id 'pl.allegro.tech.build.axion-release' version '1.10.3'\n+}\n+\n+def rootRootDir = \"$rootDir/../../../\"\n+def sharedConfigDirectory = \"$rootRootDir/gradle\"\n+rootProject.ext.sharedConfigDirectory = sharedConfigDirectory\n+\n+apply from: \"$sharedConfigDirectory/repositories.gradle\"\n+apply from: \"$sharedConfigDirectory/spotless.gradle\"\n+\n+// TODO need to set up build cache here as well for CI to work", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTA0NTY0", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540104564", "createdAt": "2020-11-27T17:02:42Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowMjo0MlrOH7Edkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowMjo0MlrOH7Edkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMTEzOQ==", "bodyText": "Good to see a smoke test for this, it's what's been missing in the past", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531701139", "createdAt": "2020-11-27T17:02:42Z", "author": {"login": "richardstartin"}, "path": "dd-smoke-tests/quarkus/quarkus.gradle", "diffHunk": "@@ -0,0 +1,44 @@\n+ext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTA0ODA1", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540104805", "createdAt": "2020-11-27T17:03:15Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowMzoxNVrOH7EeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowMzoxNVrOH7EeUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMTMyOA==", "bodyText": "This does indeed look wrong (but not the point of this PR)", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531701328", "createdAt": "2020-11-27T17:03:15Z", "author": {"login": "richardstartin"}, "path": "dd-smoke-tests/quarkus/src/test/groovy/datadog/smoketest/QuarkusSmokeTest.groovy", "diffHunk": "@@ -0,0 +1,99 @@\n+package datadog.smoketest\n+\n+import datadog.trace.agent.test.utils.ThreadUtils\n+import okhttp3.Request\n+import spock.lang.Shared\n+\n+import java.util.concurrent.ThreadLocalRandom\n+import java.util.regex.Pattern\n+\n+abstract class QuarkusSmokeTest extends AbstractServerSmokeTest {\n+\n+  @Override\n+  ProcessBuilder createProcessBuilder() {\n+    String quarkusUberJar = System.getProperty(\"datadog.smoketest.quarkus.uberJar.path\")\n+\n+    List<String> command = new ArrayList<>()\n+    command.add(javaPath())\n+    command.addAll(defaultJavaProperties)\n+    command.addAll((String[]) [\n+      \"-Ddd.writer.type=MultiWriter:TraceStructureWriter:${output.getAbsolutePath()},DDAgentWriter\",\n+      \"-Ddd.logs.injection=true\",\n+      \"-Ddd.app.customlogmanager=true\",\n+      \"-Dquarkus.http.port=${httpPort}\",\n+      \"-jar\",\n+      quarkusUberJar\n+    ])\n+    ProcessBuilder processBuilder = new ProcessBuilder(command)\n+    processBuilder.directory(new File(buildDirectory))\n+  }\n+\n+  @Override\n+  File createTemporaryFile() {\n+    return new File(\"${buildDirectory}/tmp/trace-structure-quarkus.out\")\n+  }\n+\n+  @Override\n+  protected Set<String> expectedTraces() {\n+    // TODO is this really how quarkus requests should look?\n+    return [\"[jax-rs.request]\", \"[netty.request]\"].toSet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTA1MzYw", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540105360", "createdAt": "2020-11-27T17:04:29Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNDoyOVrOH7EgFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzowNDoyOVrOH7EgFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwMTc4MA==", "bodyText": "\ud83d\udc4d I want a linter to find all the cases where we don't check the result of a CAS!", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531701780", "createdAt": "2020-11-27T17:04:29Z", "author": {"login": "richardstartin"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java", "diffHunk": "@@ -35,11 +35,44 @@ public void addScopeListener(ScopeListener listener) {}\n \n   public static void registerIfAbsent(Tracer p) {\n     if (p != null && p != NO_OP) {\n-      provider.compareAndSet(NO_OP, p);\n+      boolean installed = provider.compareAndSet(NO_OP, p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTA4NDY2", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540108466", "createdAt": "2020-11-27T17:12:01Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzoxMjowMVrOH7EqgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzoxMjowMVrOH7EqgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNDQ0OQ==", "bodyText": "I don't really like this because this could break if the implementation of GlobalTracer.isTracerInstalled became reorderable. Should this all be delegated to GlobalTracer?", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531704449", "createdAt": "2020-11-27T17:12:01Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.api;\n+\n+import static datadog.trace.api.GlobalTracer.isTracerInstalled;\n+\n+import java.util.LinkedList;\n+\n+public class WithGlobalTracer {\n+\n+  private static final Object lock = new Object();\n+  private static LinkedList<Callback> registeredCallbacks = null;\n+\n+  /**\n+   * Register a callback to be run when the global tracer is installed, or execute it right now if\n+   * the tracer is installed.\n+   */\n+  public static void registerOrExecute(Callback callback) {\n+    boolean shouldExecute = true;\n+    if (!isTracerInstalled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTEwNjY3", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540110667", "createdAt": "2020-11-27T17:17:46Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMTExODUy", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540111852", "createdAt": "2020-11-27T17:20:50Z", "commit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzoyMDo1MVrOH7E1pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNzoyMDo1MVrOH7E1pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNzMwMw==", "bodyText": "I looked at this for a while and had some doubts about the implementation strategy, but think that this is probably among the best and simplest options, especially if this is rare.", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r531707303", "createdAt": "2020-11-27T17:20:51Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/api/WithGlobalTracer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.api;\n+\n+import static datadog.trace.api.GlobalTracer.isTracerInstalled;\n+\n+import java.util.LinkedList;\n+\n+public class WithGlobalTracer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "700fc22b16679a6d1bf1daf9a76ef982bf0a88f6", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/700fc22b16679a6d1bf1daf9a76ef982bf0a88f6", "committedDate": "2020-11-27T16:43:07Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "27230a0098e5f4ac002b812750b9f998542d9598", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/27230a0098e5f4ac002b812750b9f998542d9598", "committedDate": "2020-11-30T09:07:10Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27230a0098e5f4ac002b812750b9f998542d9598", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/27230a0098e5f4ac002b812750b9f998542d9598", "committedDate": "2020-11-30T09:07:10Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "c590356a0e6ae54338c04ec8b1e688812ad00350", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c590356a0e6ae54338c04ec8b1e688812ad00350", "committedDate": "2020-11-30T09:27:44Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c590356a0e6ae54338c04ec8b1e688812ad00350", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c590356a0e6ae54338c04ec8b1e688812ad00350", "committedDate": "2020-11-30T09:27:44Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "44a05f88b54ef413b7853a44dfd35e881ee310ed", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/44a05f88b54ef413b7853a44dfd35e881ee310ed", "committedDate": "2020-11-30T10:03:00Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44a05f88b54ef413b7853a44dfd35e881ee310ed", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/44a05f88b54ef413b7853a44dfd35e881ee310ed", "committedDate": "2020-11-30T10:03:00Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "e399a5806d46b36c4e50d5fbdacf5c01fe04b4f3", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e399a5806d46b36c4e50d5fbdacf5c01fe04b4f3", "committedDate": "2020-11-30T10:35:13Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e399a5806d46b36c4e50d5fbdacf5c01fe04b4f3", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e399a5806d46b36c4e50d5fbdacf5c01fe04b4f3", "committedDate": "2020-11-30T10:35:13Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "e2b904a98158539d0f21ddefc9ee302fe0384964", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e2b904a98158539d0f21ddefc9ee302fe0384964", "committedDate": "2020-11-30T11:36:23Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2b904a98158539d0f21ddefc9ee302fe0384964", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e2b904a98158539d0f21ddefc9ee302fe0384964", "committedDate": "2020-11-30T11:36:23Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "0f93a9a9de45e82e6460fe5addf1e6e567801393", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0f93a9a9de45e82e6460fe5addf1e6e567801393", "committedDate": "2020-11-30T13:42:40Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTM3Nzky", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540937792", "createdAt": "2020-11-30T14:05:51Z", "commit": {"oid": "0f93a9a9de45e82e6460fe5addf1e6e567801393"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowNTo1MVrOH78k0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDowNTo1MVrOH78k0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYyMDQ5Nw==", "bodyText": "I have a nagging suspicion that there's a ! missing here, but I need to trace through this on paper to be sure", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#discussion_r532620497", "createdAt": "2020-11-30T14:05:51Z", "author": {"login": "mcculls"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/GlobalTracer.java", "diffHunk": "@@ -35,11 +35,50 @@ public void addScopeListener(ScopeListener listener) {}\n \n   public static void registerIfAbsent(Tracer p) {\n     if (p != null && p != NO_OP) {\n-      provider.compareAndSet(NO_OP, p);\n+      boolean installed = provider.compareAndSet(NO_OP, p);\n+      if (installed) {\n+        Callback callback = installationCallback.getAndSet(null);\n+        if (callback != null) {\n+          callback.installed(p);\n+        }\n+      }\n     }\n   }\n \n   public static Tracer get() {\n     return provider.get();\n   }\n+\n+  // --------------------------------------------------------------------------------\n+  // All code below is to support the callback registration in WithGlobalTracer\n+  // --------------------------------------------------------------------------------\n+\n+  // Needs to use a read that can't be reordered for the code in WithGlobalTracer to be correct\n+  static boolean isTracerInstalled() {\n+    return provider.get() != NO_OP;\n+  }\n+\n+  private static final AtomicReference<Callback> installationCallback = new AtomicReference<>(null);\n+\n+  // Needs to use a read that can't be reordered for the code in WithGlobalTracer to be correct\n+  static boolean isCallbackInstalled() {\n+    return installationCallback.get() != null;\n+  }\n+\n+  static boolean registerInstallationCallback(Callback callback) {\n+    if (!isTracerInstalled()) {\n+      boolean installed = installationCallback.compareAndSet(null, callback);\n+      // Check if the tracer was installed while we were doing this, and try to back out\n+      if (installed && isTracerInstalled()) {\n+        installed = installationCallback.compareAndSet(callback, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f93a9a9de45e82e6460fe5addf1e6e567801393"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f93a9a9de45e82e6460fe5addf1e6e567801393", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0f93a9a9de45e82e6460fe5addf1e6e567801393", "committedDate": "2020-11-30T13:42:40Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "c2cc27611fb9e064040476be13937add388f5c7d", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c2cc27611fb9e064040476be13937add388f5c7d", "committedDate": "2020-11-30T14:41:21Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTcxNTU3", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-540971557", "createdAt": "2020-11-30T14:41:50Z", "commit": {"oid": "c2cc27611fb9e064040476be13937add388f5c7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTU0ODU4", "url": "https://github.com/DataDog/dd-trace-java/pull/2129#pullrequestreview-541154858", "createdAt": "2020-11-30T17:55:03Z", "commit": {"oid": "c2cc27611fb9e064040476be13937add388f5c7d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255917652ceb485f3b059844c92a2835a370ea89", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/255917652ceb485f3b059844c92a2835a370ea89", "committedDate": "2020-12-01T09:35:21Z", "message": "Add MDC log injection support for JBoss Log Manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8866fbf1fde762b5790856895e480622138f83", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/de8866fbf1fde762b5790856895e480622138f83", "committedDate": "2020-12-01T09:35:21Z", "message": "Add forked tests to coverage report"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677c675a0554f250c26004cb55a7cb9550baa1dd", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/677c675a0554f250c26004cb55a7cb9550baa1dd", "committedDate": "2020-12-01T09:35:21Z", "message": "Delay LogContextScopeListener registration if necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "committedDate": "2020-12-01T09:35:21Z", "message": "Add quarkus logging smoke test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2cc27611fb9e064040476be13937add388f5c7d", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c2cc27611fb9e064040476be13937add388f5c7d", "committedDate": "2020-11-30T14:41:21Z", "message": "Add quarkus logging smoke test"}, "afterCommit": {"oid": "b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b34ccbc048a7087ea6d393dc1e6e319c470dcb82", "committedDate": "2020-12-01T09:35:21Z", "message": "Add quarkus logging smoke test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2886, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}