{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNjkxMzUz", "number": 1497, "title": "avoid hashing tags when they can't be in the table", "bodyText": "Sometimes, we have large tag values like SQL queries which definitely could not have been interned. These strings will likely never have had their hash code computed, and checking if they have been interned involves calculating their hash code. This PR adds two heuristics for avoiding the lookup:\n\nif the string is longer than the largest key in the map\nis no string in the map has the same first byte as the tag", "createdAt": "2020-05-27T08:26:59Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1497", "merged": true, "mergeCommit": {"oid": "133a53bb3135409ef5b4ba169b2e5aebe90e4eb1"}, "closed": true, "closedAt": "2020-05-27T13:03:54Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclCsUhAH2gAyNDIzNjkxMzUzOmVlZWQ2NjYxYTNkMjM0YmRhZmRjZjAyM2U3ZjJkNzExMjhmZTk2N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclXtWjAFqTQxOTEwNDE4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eeed6661a3d234bdafdcf023e7f2d71128fe967a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/eeed6661a3d234bdafdcf023e7f2d71128fe967a", "committedDate": "2020-05-26T11:09:30Z", "message": "avoid hashing tags when they can't be in the table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58fdde92ee3527f0f75be883d042fb668883d177", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/58fdde92ee3527f0f75be883d042fb668883d177", "committedDate": "2020-05-27T08:54:45Z", "message": "Merge branch 'master' into richardstartin/avoid-hashing-tags"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTA0MTg5", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#pullrequestreview-419104189", "createdAt": "2020-05-27T11:35:14Z", "commit": {"oid": "58fdde92ee3527f0f75be883d042fb668883d177"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTozNToxNFrOGbFNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTozODoxNVrOGbFSkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MDA1Mg==", "bodyText": "I can't find where this is used", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431050052", "createdAt": "2020-05-27T11:35:14Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -13,6 +13,7 @@\n import java.nio.charset.Charset;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fdde92ee3527f0f75be883d042fb668883d177"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MDI1OQ==", "bodyText": "Nice. Interning the empty String.", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431050259", "createdAt": "2020-05-27T11:35:46Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -34,39 +35,72 @@\n   // startup\n   private static final Map<String, byte[]> UTF8_INTERN_KEYS_TABLE = new HashMap<>(256);\n   private static final Map<String, byte[]> UTF8_INTERN_TAGS_TABLE = new HashMap<>(256);\n+  private static final int MAX_TAGS_LENGTH;\n+  private static final long[] TAGS_FIRST_CHAR_IS_PRESENT = new long[4];\n \n   static {\n-    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE);\n+    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    UTF8_INTERN_TAGS_TABLE.put(\"\", new byte[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fdde92ee3527f0f75be883d042fb668883d177"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MTQwOA==", "bodyText": "Maybe it would be easier to read if the empty tag always returned true here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1497#discussion_r431051408", "createdAt": "2020-05-27T11:38:15Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/StringTables.java", "diffHunk": "@@ -34,39 +35,72 @@\n   // startup\n   private static final Map<String, byte[]> UTF8_INTERN_KEYS_TABLE = new HashMap<>(256);\n   private static final Map<String, byte[]> UTF8_INTERN_TAGS_TABLE = new HashMap<>(256);\n+  private static final int MAX_TAGS_LENGTH;\n+  private static final long[] TAGS_FIRST_CHAR_IS_PRESENT = new long[4];\n \n   static {\n-    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE);\n-    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE);\n-    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE);\n+    internConstantsUTF8(Tags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(InstrumentationTags.class, UTF8_INTERN_KEYS_TABLE, null);\n+    internConstantsUTF8(DDSpanTypes.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDComponents.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(DDSpanNames.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    internConstantsUTF8(CommonTagValues.class, UTF8_INTERN_TAGS_TABLE, TAGS_FIRST_CHAR_IS_PRESENT);\n+    UTF8_INTERN_TAGS_TABLE.put(\"\", new byte[0]);\n+    MAX_TAGS_LENGTH = maxKeyLength(UTF8_INTERN_TAGS_TABLE.keySet());\n   }\n \n   public static byte[] getKeyBytesUTF8(String value) {\n     return UTF8_INTERN_KEYS_TABLE.get(value);\n   }\n \n   public static byte[] getTagBytesUTF8(String value) {\n-    return UTF8_INTERN_TAGS_TABLE.get(value);\n+    return tagMaybeInterned(value) ? UTF8_INTERN_TAGS_TABLE.get(value) : null;\n   }\n \n-  private static void internConstantsUTF8(Class<?> clazz, Map<String, byte[]> map) {\n+  private static void internConstantsUTF8(\n+      Class<?> clazz, Map<String, byte[]> map, long[] firstByteBitmap) {\n     for (Field field : clazz.getDeclaredFields()) {\n       if (Modifier.isStatic(field.getModifiers())\n           && Modifier.isPublic(field.getModifiers())\n           && field.getType() == String.class) {\n         try {\n-          intern(map, (String) field.get(null), UTF_8);\n+          intern(map, (String) field.get(null), UTF_8, firstByteBitmap);\n         } catch (IllegalAccessException e) {\n           // won't happen\n         }\n       }\n     }\n   }\n \n-  private static void intern(Map<String, byte[]> table, String value, Charset encoding) {\n-    table.put(value, value.getBytes(encoding));\n+  private static void intern(\n+      Map<String, byte[]> table, String value, Charset encoding, long[] firstByteBitmap) {\n+    byte[] bytes = value.getBytes(encoding);\n+    if (null != firstByteBitmap && bytes.length > 0) {\n+      int bit = bytes[0] & 0xFF;\n+      firstByteBitmap[bit >>> 6] |= 1L << bit;\n+    }\n+    table.put(value, bytes);\n+  }\n+\n+  private static boolean tagMaybeInterned(final String tag) {\n+    if (null == tag || tag.length() > MAX_TAGS_LENGTH) {\n+      return false;\n+    }\n+    if (!tag.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fdde92ee3527f0f75be883d042fb668883d177"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2303, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}