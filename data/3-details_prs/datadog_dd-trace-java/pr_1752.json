{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNDI5Mzk5", "number": 1752, "title": "Add a config to disable thread pool executor instrumentation for all wrapped tasks", "bodyText": "A user can provide their own Queue to a ThreadPoolExecutor, and can provide a queue that breaks the contract we expect. This is a minimal change to allow users to disable the thread pool executor instrumentation for all wrapped runnables (lambdas)", "createdAt": "2020-08-05T14:42:26Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1752", "merged": true, "mergeCommit": {"oid": "46f23184cf71f38d6d00f7c40e9801c369ec300d"}, "closed": true, "closedAt": "2020-08-13T18:03:50Z", "author": {"login": "devinsba"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8R_0hAFqTQ2MjY1NzYwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-isYTABqjM2NTI4OTczOTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjU3NjAy", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-462657602", "createdAt": "2020-08-06T15:59:37Z", "commit": {"oid": "6b0d06b7a47da97dcb97392305b434c47dc6b032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo1OTozN1rOG86AJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo1OTozN1rOG86AJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxODA1NQ==", "bodyText": "You should probably have a cleanupSpec method that clear's the property when the test is done.", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r466518055", "createdAt": "2020-08-06T15:59:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/groovy/ThreadPoolExecutorInstrumentationTest.groovy", "diffHunk": "@@ -14,7 +14,7 @@ import static org.junit.Assume.assumeTrue\n class ThreadPoolExecutorInstrumentationTest extends AgentTestRunner {\n   static {\n     ConfigUtils.updateConfig {\n-      System.setProperty(\"dd.integration.thread-pool-executor.enabled\", \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b0d06b7a47da97dcb97392305b434c47dc6b032"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDE4ODE4", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466018818", "createdAt": "2020-08-12T15:17:23Z", "commit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNzoyNFrOG_mGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNzoyNFrOG_mGLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzY0Ng==", "bodyText": "Does this need to be cleared afterwards?", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469337646", "createdAt": "2020-08-12T15:17:24Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/java-threadpoolexecutor/src/test/groovy/ThreadPoolExecutorInstrumentationTest.groovy", "diffHunk": "@@ -0,0 +1,75 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.ConfigUtils\n+import datadog.trace.api.Trace\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper\n+import spock.lang.Shared\n+\n+import java.util.concurrent.Callable\n+import java.util.concurrent.ScheduledThreadPoolExecutor\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope\n+\n+class ThreadPoolExecutorInstrumentationTest extends AgentTestRunner {\n+  static {\n+    ConfigUtils.updateConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDE5Njkz", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466019693", "createdAt": "2020-08-12T15:18:23Z", "commit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxODoyM1rOG_mI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxODoyM1rOG_mI0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzODMyMw==", "bodyText": "Can you call toString on these so it works with any CharSequence equivalent to \"parent\" - you may need to rebase.", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469338323", "createdAt": "2020-08-12T15:18:23Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/java-threadpoolexecutor/src/test/groovy/ThreadPoolExecutorInstrumentationTest.groovy", "diffHunk": "@@ -0,0 +1,75 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.ConfigUtils\n+import datadog.trace.api.Trace\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper\n+import spock.lang.Shared\n+\n+import java.util.concurrent.Callable\n+import java.util.concurrent.ScheduledThreadPoolExecutor\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope\n+\n+class ThreadPoolExecutorInstrumentationTest extends AgentTestRunner {\n+  static {\n+    ConfigUtils.updateConfig {\n+      System.setProperty(\"dd.trace.thread_pool_executor.wrapped_runnables.enabled\", \"false\")\n+    }\n+  }\n+\n+  @Shared\n+  def executeRunnable = { e, c -> e.execute((Runnable) c) }\n+  @Shared\n+  def submitRunnable = { e, c -> e.submit((Runnable) c) }\n+  @Shared\n+  def submitCallable = { e, c -> e.submit((Callable) c) }\n+  @Shared\n+  def scheduleRunnable = { e, c -> e.schedule((Runnable) c, 10, TimeUnit.MILLISECONDS) }\n+  @Shared\n+  def scheduleCallable = { e, c -> e.schedule((Callable) c, 10, TimeUnit.MILLISECONDS) }\n+\n+  def \"#poolImpl '#name' disabled\"() {\n+    setup:\n+    def pool = poolImpl\n+    def m = method\n+    def w = wrap\n+\n+    JavaAsyncChild child = new JavaAsyncChild(true, true)\n+    new Runnable() {\n+      @Override\n+      @Trace(operationName = \"parent\")\n+      void run() {\n+        activeScope().setAsyncPropagation(true)\n+        m(pool, w(child))\n+      }\n+    }.run()\n+    // We block in child to make sure spans close in predictable order\n+    child.unblock()\n+\n+    // Expect two traces because async propagation gets effectively disabled\n+    TEST_WRITER.waitForTraces(2)\n+\n+    expect:\n+    TEST_WRITER.size() == 2\n+    TEST_WRITER.get(0).size() == 1\n+    TEST_WRITER.get(0).get(0).operationName == \"parent\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDIxNjQ2", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466021646", "createdAt": "2020-08-12T15:20:32Z", "commit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyMDozM1rOG_mOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyMDozM1rOG_mOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzOTgyMw==", "bodyText": "Might it be possible/still correct to hoist this into a final boolean variable? Are rules updated on the fly?", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469339823", "createdAt": "2020-08-12T15:20:33Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java", "diffHunk": "@@ -51,18 +52,24 @@ public ThreadPoolExecutorInstrumentation() {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-\n-      if (queue.isEmpty()) {\n-        try {\n-          queue.offer(new GenericRunnable());\n-          queue.clear(); // Remove the Runnable we just added.\n-        } catch (final ClassCastException | IllegalArgumentException e) {\n-          // These errors indicate the queue is fundamentally incompatible with wrapped runnables.\n-          // We must disable the executor instance to avoid passing wrapped runnables later.\n-          ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n-        } catch (final Exception e) {\n-          // Other errors might indicate the queue is not fully initialized.\n-          // We might want to disable for those too, but for now just ignore.\n+      // We disabable this way because this instrumentation is only used to call\n+      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n+      // work, for this instrumentation disabling for all executors is more of the intention\n+      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDI2NDMz", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466026433", "createdAt": "2020-08-12T15:25:47Z", "commit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyNTo0N1rOG_mdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToyNTo0N1rOG_mdJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM0MzUyNw==", "bodyText": "OK, so this checks compatibility. How can we be sure a consumer doesn't see the value? Could it cause an error in the consumer?", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469343527", "createdAt": "2020-08-12T15:25:47Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java", "diffHunk": "@@ -51,18 +52,24 @@ public ThreadPoolExecutorInstrumentation() {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-\n-      if (queue.isEmpty()) {\n-        try {\n-          queue.offer(new GenericRunnable());\n-          queue.clear(); // Remove the Runnable we just added.\n-        } catch (final ClassCastException | IllegalArgumentException e) {\n-          // These errors indicate the queue is fundamentally incompatible with wrapped runnables.\n-          // We must disable the executor instance to avoid passing wrapped runnables later.\n-          ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n-        } catch (final Exception e) {\n-          // Other errors might indicate the queue is not fully initialized.\n-          // We might want to disable for those too, but for now just ignore.\n+      // We disabable this way because this instrumentation is only used to call\n+      // disableExecutorForWrappedTasks. Therefore disabling the instrumentation explictly will not\n+      // work, for this instrumentation disabling for all executors is more of the intention\n+      if (!Config.get().isRuleEnabled(\"thread_pool_executor.wrapped_runnables\")) {\n+        ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n+      } else {\n+        if (queue.isEmpty()) {\n+          try {\n+            queue.offer(new GenericRunnable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDMwOTc0", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466030974", "createdAt": "2020-08-12T15:30:53Z", "commit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MDM2MTQ4", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466036148", "createdAt": "2020-08-12T15:36:53Z", "commit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNjo1M1rOG_m7wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNTozNjo1M1rOG_m7wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM1MTM2MQ==", "bodyText": "Why do we need a separate project to test this? Can't it be done in the main project?", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469351361", "createdAt": "2020-08-12T15:36:53Z", "author": {"login": "tylerbenson"}, "path": "settings.gradle", "diffHunk": "@@ -105,6 +105,7 @@ include ':dd-java-agent:instrumentation:jax-rs-client-2.0:connection-error-handl\n include ':dd-java-agent:instrumentation:jax-rs-client-2.0:connection-error-handling-resteasy'\n include ':dd-java-agent:instrumentation:java-concurrent'\n include ':dd-java-agent:instrumentation:java-concurrent:java-completablefuture'\n+include ':dd-java-agent:instrumentation:java-concurrent:java-threadpoolexecutor'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27a42b1520504c7aed3b0c656b674c2dc7e84196"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4dd7a8c13b207c02d2d1c3a99e968848e175a4f", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d4dd7a8c13b207c02d2d1c3a99e968848e175a4f", "committedDate": "2020-08-12T15:47:00Z", "message": "Back to the same module"}, "afterCommit": {"oid": "6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb", "committedDate": "2020-08-12T15:52:30Z", "message": "Back to the same module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTgyNDMx", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#pullrequestreview-466182431", "createdAt": "2020-08-12T18:47:49Z", "commit": {"oid": "6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0Nzo0OVrOG_uGIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0Nzo0OVrOG_uGIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2ODcwNw==", "bodyText": "disable", "url": "https://github.com/DataDog/dd-trace-java/pull/1752#discussion_r469468707", "createdAt": "2020-08-12T18:47:49Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/ThreadPoolExecutorInstrumentation.java", "diffHunk": "@@ -51,18 +52,24 @@ public ThreadPoolExecutorInstrumentation() {\n     public static void disableIfQueueWrongType(\n         @Advice.This final ThreadPoolExecutor executor,\n         @Advice.Argument(4) final BlockingQueue<Runnable> queue) {\n-\n-      if (queue.isEmpty()) {\n-        try {\n-          queue.offer(new GenericRunnable());\n-          queue.clear(); // Remove the Runnable we just added.\n-        } catch (final ClassCastException | IllegalArgumentException e) {\n-          // These errors indicate the queue is fundamentally incompatible with wrapped runnables.\n-          // We must disable the executor instance to avoid passing wrapped runnables later.\n-          ExecutorInstrumentationUtils.disableExecutorForWrappedTasks(executor);\n-        } catch (final Exception e) {\n-          // Other errors might indicate the queue is not fully initialized.\n-          // We might want to disable for those too, but for now just ignore.\n+      // We disabable this way because this instrumentation is only used to call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ed2a9bf2fd77bbac650a83691b4a51f66c5d2cb"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ffc3b6bd43b28b77d4747920a1a2a1ea223287bb", "committedDate": "2020-08-13T16:34:27Z", "message": "So that's odd..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3ad83f1879252ca3ef5ec16b6e1ff26e205ee55", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a3ad83f1879252ca3ef5ec16b6e1ff26e205ee55", "committedDate": "2020-08-13T16:34:27Z", "message": "Maybe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76987ec1d39fb7f7cbbc9d6f00e6a02ef1740d84", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/76987ec1d39fb7f7cbbc9d6f00e6a02ef1740d84", "committedDate": "2020-08-13T16:34:27Z", "message": "broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62cb77705112948017f894483b0d67dbda0480be", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/62cb77705112948017f894483b0d67dbda0480be", "committedDate": "2020-08-13T16:34:27Z", "message": "Apparently ConfigUtil is global???"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9af1dff97628799ce150803ed469dc42a84f36d", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d9af1dff97628799ce150803ed469dc42a84f36d", "committedDate": "2020-08-13T16:34:27Z", "message": "Now to fix the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0432b6496c387f1df8271244966b299cd405802b", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0432b6496c387f1df8271244966b299cd405802b", "committedDate": "2020-08-13T16:34:27Z", "message": "This test should be failing..........."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae4927494387d386fdd01f9903d1b8f06aa0bcd", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6ae4927494387d386fdd01f9903d1b8f06aa0bcd", "committedDate": "2020-08-13T16:34:27Z", "message": "I think I got it working......"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40d885790aecaea35b7ef77aacf4c520ab79e111", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/40d885790aecaea35b7ef77aacf4c520ab79e111", "committedDate": "2020-08-13T16:34:27Z", "message": "I think this property name is better:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "130c552a88a78b2fda183696ce0b1e7fd2b775ff", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/130c552a88a78b2fda183696ce0b1e7fd2b775ff", "committedDate": "2020-08-13T16:34:27Z", "message": "Add a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4859d51b8e5e739f5f4035cae7b13f35da56c1f", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b4859d51b8e5e739f5f4035cae7b13f35da56c1f", "committedDate": "2020-08-13T16:34:27Z", "message": "Address a couple comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39814f24e9d988d57e89c6dfdd306820efd72f1c", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/39814f24e9d988d57e89c6dfdd306820efd72f1c", "committedDate": "2020-08-13T16:34:27Z", "message": "Back to the same module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3891beebf31d6042d2425ba8e9f62cc01efe960a", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3891beebf31d6042d2425ba8e9f62cc01efe960a", "committedDate": "2020-08-13T16:34:27Z", "message": "Fix typos"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a72869a34be0a2677fc35e8aaac11b7661d45c1", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5a72869a34be0a2677fc35e8aaac11b7661d45c1", "committedDate": "2020-08-12T18:49:34Z", "message": "Fix typos"}, "afterCommit": {"oid": "3891beebf31d6042d2425ba8e9f62cc01efe960a", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3891beebf31d6042d2425ba8e9f62cc01efe960a", "committedDate": "2020-08-13T16:34:27Z", "message": "Fix typos"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2095, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}