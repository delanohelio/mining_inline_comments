{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTY1MjUz", "number": 1973, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxMTowNlrOEspiNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxODoxOVrOEsptoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjUzMzAwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxMTowNlrOHgAaOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoyMzo0OVrOHgA6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzE5Mw==", "bodyText": "println?", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503323193", "createdAt": "2020-10-12T14:11:06Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,9 @@\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+public class SwallowingRejectedExecutionHandler implements RejectedExecutionHandler {\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    System.out.println(executor + \" rejected \" + r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00a767f31d264f179a109210bbd3ecc379faf84"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNTAyNg==", "bodyText": "It's Java", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503325026", "createdAt": "2020-10-12T14:13:56Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,9 @@\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+public class SwallowingRejectedExecutionHandler implements RejectedExecutionHandler {\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    System.out.println(executor + \" rejected \" + r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzE5Mw=="}, "originalCommit": {"oid": "d00a767f31d264f179a109210bbd3ecc379faf84"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNjAzOQ==", "bodyText": "Sorry. I was wondering why there is a System.out.println(...) there at all.", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503326039", "createdAt": "2020-10-12T14:15:32Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,9 @@\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+public class SwallowingRejectedExecutionHandler implements RejectedExecutionHandler {\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    System.out.println(executor + \" rejected \" + r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzE5Mw=="}, "originalCommit": {"oid": "d00a767f31d264f179a109210bbd3ecc379faf84"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNjc5Ng==", "bodyText": "When tests fail it's nice to have some context, this seems relevant to me. I can change it to be a log statement if you like.", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503326796", "createdAt": "2020-10-12T14:16:49Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,9 @@\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+public class SwallowingRejectedExecutionHandler implements RejectedExecutionHandler {\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    System.out.println(executor + \" rejected \" + r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzE5Mw=="}, "originalCommit": {"oid": "d00a767f31d264f179a109210bbd3ecc379faf84"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNzcwOA==", "bodyText": "Ok, just leave it there.", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503327708", "createdAt": "2020-10-12T14:18:19Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,9 @@\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+public class SwallowingRejectedExecutionHandler implements RejectedExecutionHandler {\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    System.out.println(executor + \" rejected \" + r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzE5Mw=="}, "originalCommit": {"oid": "d00a767f31d264f179a109210bbd3ecc379faf84"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMTM2MA==", "bodyText": "I removed it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503331360", "createdAt": "2020-10-12T14:23:49Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/java/SwallowingRejectedExecutionHandler.java", "diffHunk": "@@ -0,0 +1,9 @@\n+import java.util.concurrent.RejectedExecutionHandler;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+public class SwallowingRejectedExecutionHandler implements RejectedExecutionHandler {\n+  @Override\n+  public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n+    System.out.println(executor + \" rejected \" + r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzE5Mw=="}, "originalCommit": {"oid": "d00a767f31d264f179a109210bbd3ecc379faf84"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjU2MjI0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/test/groovy/ForkJoinPoolPropagationTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxODoxOVrOHgAr4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxOToxOFrOHgAuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNzcxNQ==", "bodyText": "the async variable only appears to be used in the test name - is this right?", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503327715", "createdAt": "2020-10-12T14:18:19Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/groovy/ForkJoinPoolPropagationTest.groovy", "diffHunk": "@@ -4,7 +4,7 @@ import datadog.trace.core.DDSpan\n import java.util.concurrent.ForkJoinPool\n \n class ForkJoinPoolPropagationTest extends AgentTestRunner {\n-  def \"test imbalanced recursive task propagation #parallelism FJP threads\" () {\n+  def \"test imbalanced recursive task propagation #parallelism FJP threads (async #async)\" () {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c339813ba2a9000b026c816e9fec1ad444c8205"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyODMzNw==", "bodyText": "good catch, it was supposed to go in to the FJP constructor...", "url": "https://github.com/DataDog/dd-trace-java/pull/1973#discussion_r503328337", "createdAt": "2020-10-12T14:19:18Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/groovy/ForkJoinPoolPropagationTest.groovy", "diffHunk": "@@ -4,7 +4,7 @@ import datadog.trace.core.DDSpan\n import java.util.concurrent.ForkJoinPool\n \n class ForkJoinPoolPropagationTest extends AgentTestRunner {\n-  def \"test imbalanced recursive task propagation #parallelism FJP threads\" () {\n+  def \"test imbalanced recursive task propagation #parallelism FJP threads (async #async)\" () {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyNzcxNQ=="}, "originalCommit": {"oid": "1c339813ba2a9000b026c816e9fec1ad444c8205"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4695, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}