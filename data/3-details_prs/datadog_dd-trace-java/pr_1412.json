{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzIzMjc0", "number": 1412, "title": "Profiling API", "bodyText": "Rough version mainly to validate the interaction with sub projects\nand classloaders", "createdAt": "2020-04-30T10:24:25Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1412", "merged": true, "mergeCommit": {"oid": "ae80f55b256e5137910c06f82d3af2eeb9a23d7b"}, "closed": true, "closedAt": "2020-05-14T16:01:12Z", "author": {"login": "jpbempel"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccsytDAFqTQwMzQyNTAxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchPqYXgFqTQxMTk1MzAzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDI1MDE1", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-403425015", "createdAt": "2020-04-30T11:16:54Z", "commit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMToxNjo1NFrOGOkyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowNzowNVrOGOoYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNTk1MQ==", "bodyText": "This should be volatile or atomic. I think we already have pattern in datadog.trace.api.GlobalTracer that should be reused.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417935951", "createdAt": "2020-04-30T11:16:54Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.api.profiling;\n+\n+public class Profiler {\n+  private static SessionFactory factory;\n+\n+  public static Session startProfiling() {\n+    return factory.createSession();\n+  }\n+\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjE5MA==", "bodyText": "Public interfaces should be documented", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417936190", "createdAt": "2020-04-30T11:17:27Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/SessionFactory.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface SessionFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI5Mg==", "bodyText": "Should this be Closeable", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417936292", "createdAt": "2020-04-30T11:17:41Z", "author": {"login": "mar-kolya"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Session.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package datadog.trace.api.profiling;\n+\n+public interface Session {\n+  void stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDkxNg==", "bodyText": "The way things turn out to be we may not be able to use JMX inside profiler for certain setups. Please see how datadog.trace.common.util.ThreadCpuTimeAccess is implemented and used from datadog.trace.bootstrap.Agent", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r417994916", "createdAt": "2020-04-30T13:07:05Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.api.profiling.Session;\n+\n+public class JMXSession implements Session {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b97ac09e247471b2546f871fa402cdf1c8d7a64"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzY1NDQ1", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-406765445", "createdAt": "2020-05-06T16:06:32Z", "commit": {"oid": "756286ceaee94cc2f9d74498e830fe0433534e6e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjozMlrOGRaYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjowNjozMlrOGRaYtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMTI4NA==", "bodyText": "Please move this and related classes to the internal-api project instead.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r420911284", "createdAt": "2020-05-06T16:06:32Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.api.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ * Example of usage:\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ * or\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "756286ceaee94cc2f9d74498e830fe0433534e6e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85f2d0250bd48c328029178f2eb86f27a049a8a", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e85f2d0250bd48c328029178f2eb86f27a049a8a", "committedDate": "2020-05-06T17:18:18Z", "message": "Profiling API\n\nRough version mainly to validate the interaction with sub projects\nand classloaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f52a8b696f80d2532a1667bdb59368a932a337", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f5f52a8b696f80d2532a1667bdb59368a932a337", "committedDate": "2020-05-06T17:18:18Z", "message": "Improve API\n\nAdd refCounting\nAdd docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2215b164fe540b1655277a1c90d85cfa7da38885", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2215b164fe540b1655277a1c90d85cfa7da38885", "committedDate": "2020-05-06T17:18:18Z", "message": "add JMX provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e", "committedDate": "2020-05-06T19:24:27Z", "message": "move to internal-api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "756286ceaee94cc2f9d74498e830fe0433534e6e", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/756286ceaee94cc2f9d74498e830fe0433534e6e", "committedDate": "2020-05-04T14:28:14Z", "message": "add JMX provider"}, "afterCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e", "committedDate": "2020-05-06T19:24:27Z", "message": "move to internal-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjcyNzgw", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-409672780", "createdAt": "2020-05-12T03:25:36Z", "commit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoyNTozN1rOGT0tng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzoyNTozN1rOGT0tng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQzOTc3NA==", "bodyText": "Because we saw this in python: what happens if a user starts and stops the profiler many times a second?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423439774", "createdAt": "2020-05-12T03:25:37Z", "author": {"login": "dbenamydd"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ * Example of usage:\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ * or\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjUwMzg3", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-410250387", "createdAt": "2020-05-12T17:08:31Z", "commit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjU3MzE2", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-410257316", "createdAt": "2020-05-12T17:17:31Z", "commit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxNzozMVrOGUQ7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxNzozMVrOGUQ7Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMTk3NA==", "bodyText": "Isn't this a race condition? I think you may potentially overwrite newly created live session with null.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r423901974", "createdAt": "2020-05-12T17:17:31Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.profiling.Session;\n+import datadog.trace.profiling.SessionFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public class JMXSessionFactory implements SessionFactory {\n+  private static final AtomicInteger refCount = new AtomicInteger();\n+  private static final AtomicReference<JMXSession> currentSession = new AtomicReference<>(null);\n+\n+  public Session createSession(Thread thread) {\n+    int prevCount = refCount.getAndIncrement();\n+    if (prevCount == 0) {\n+      currentSession.compareAndSet(null, new JMXSession(this, thread));\n+    }\n+    Session session = currentSession.get();\n+    session.addThread(thread);\n+    return session;\n+  }\n+\n+  void decCount() {\n+    int currentCount = refCount.decrementAndGet();\n+    if (currentCount == 0) {\n+      currentSession.set(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81a2a1bc6d9e5a95dee5b8d60d7a7e427f6b78e"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d87e48b2638ae87c7c6a5c8dc108ff1a77e03217", "committedDate": "2020-05-13T15:50:55Z", "message": "Address JMX order load & concurrency issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDcxMDU1", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411071055", "createdAt": "2020-05-13T15:57:43Z", "commit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1Nzo0M1rOGU4ivw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1Nzo0M1rOGU4ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1MTEwMw==", "bodyText": "Can this be simplified by having jmxSessions as ConcurrentHashMap?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424551103", "createdAt": "2020-05-13T15:57:43Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -2,27 +2,39 @@\n \n import datadog.trace.profiling.Session;\n import datadog.trace.profiling.SessionFactory;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n \n public class JMXSessionFactory implements SessionFactory {\n-  private static final AtomicInteger refCount = new AtomicInteger();\n-  private static final AtomicReference<JMXSession> currentSession = new AtomicReference<>(null);\n+  private static final Map<Long, JMXSession> jmxSessions = new HashMap<>();\n+\n+  private final StackTraceSink sink;\n+\n+  public JMXSessionFactory(StackTraceSink sink) {\n+    this.sink = sink;\n+  }\n \n   public Session createSession(Thread thread) {\n-    int prevCount = refCount.getAndIncrement();\n-    if (prevCount == 0) {\n-      currentSession.compareAndSet(null, new JMXSession(this, thread));\n+    long id = thread.getId();\n+    JMXSession session;\n+    synchronized (jmxSessions) {\n+      session = jmxSessions.computeIfAbsent(id, this::newSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDc0ODE0", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411074814", "createdAt": "2020-05-13T16:01:42Z", "commit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMTo0MlrOGU4uJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMTo0MlrOGU4uJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NDAyMA==", "bodyText": "Seems like the formatting tool messed this up a bit :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424554020", "createdAt": "2020-05-13T16:01:42Z", "author": {"login": "jbachorik"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -3,14 +3,16 @@\n import lombok.extern.slf4j.Slf4j;\n \n /**\n- * Entry point of the Profiling API to allow trigger sampling profiling on demand\n- * Example of usage:\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDc3MDc2", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411077076", "createdAt": "2020-05-13T16:04:10Z", "commit": {"oid": "d87e48b2638ae87c7c6a5c8dc108ff1a77e03217"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afd4fe07778c304d68b31af3a921c0d1c4330eef", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/afd4fe07778c304d68b31af3a921c0d1c4330eef", "committedDate": "2020-05-13T16:36:02Z", "message": "remove impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/25038ec189770ab633d6075a82d238b18e9406f1", "committedDate": "2020-05-13T16:39:59Z", "message": "formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTEyODAz", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411112803", "createdAt": "2020-05-13T16:47:06Z", "commit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NzowNlrOGU6jIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NzowNlrOGU6jIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Mzk2OA==", "bodyText": "Do we need to pass in any metadata like trace/span id?", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424583968", "createdAt": "2020-05-13T16:47:06Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling()) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling()\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTEzMzU1", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411113355", "createdAt": "2020-05-13T16:47:43Z", "commit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0Nzo0M1rOGU6k2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0Nzo0M1rOGU6k2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NDQxMA==", "bodyText": "I don't think we would ever use this since we wouldn't pass the session between threads.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r424584410", "createdAt": "2020-05-13T16:47:43Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Session.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package datadog.trace.profiling;\n+\n+import java.io.Closeable;\n+\n+/** Represents the current profiling session Call close method to end the profiling session */\n+public interface Session extends Closeable {\n+\n+  /**\n+   * Adds a thread to be sampled for the current session\n+   *\n+   * @param thread additional thread to be sampled\n+   */\n+  void addThread(Thread thread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25038ec189770ab633d6075a82d238b18e9406f1"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a42a05436d8798cdefa52729030937a2be1461", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a4a42a05436d8798cdefa52729030937a2be1461", "committedDate": "2020-05-14T08:20:06Z", "message": "remove addThread and add id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/15b3a8742ed3210c75760a6f8dadd2dd99636a7c", "committedDate": "2020-05-14T13:54:13Z", "message": "add package prefix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODQ4OTU4", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411848958", "createdAt": "2020-05-14T14:15:37Z", "commit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxNTozN1rOGVeYow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoxNTozN1rOGVeYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MTEwNw==", "bodyText": "This will be called through reflection during agent startup?\nIf yes, could you make this private (it kind of exposes the implementation detail) and just do setAccessible() before invoking it via reflection?\nIf it's not the usecase, please disregard this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#discussion_r425171107", "createdAt": "2020-05-14T14:15:37Z", "author": {"login": "jbachorik"}, "path": "internal-api/src/main/java/datadog/trace/profiling/Profiler.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package datadog.trace.profiling;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Entry point of the Profiling API to allow trigger sampling profiling on demand\n+ *\n+ * <p>Example of usage:\n+ *\n+ * <pre>\n+ *   try (Session session = Profiler.startProfiling(spanId)) {\n+ *     // ...\n+ *   }\n+ * </pre>\n+ *\n+ * or\n+ *\n+ * <pre>\n+ *   Session session = Profiler.startProfiling(spanId)\n+ *   // ... and into another method:\n+ *   session.close();\n+ * </pre>\n+ *\n+ * Nested calls are allowed but only outer calls will be effective\n+ */\n+@Slf4j\n+public class Profiler {\n+  private static volatile SessionFactory factory;\n+  private static final Session NO_SESSION = new NoSession();\n+\n+  /**\n+   * Starts a profiling session for the current thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling(String id) {\n+    return startProfiling(id, Thread.currentThread());\n+  }\n+\n+  /**\n+   * Starts a profiling session for the specified thread\n+   *\n+   * @return an instance of profiling session\n+   */\n+  public static Session startProfiling(String id, Thread thread) {\n+    SessionFactory localFactory = factory;\n+    if (localFactory == null) {\n+      log.warn(\"Profiling session not initialized\");\n+      return NO_SESSION;\n+    }\n+    return localFactory.createSession(id, thread);\n+  }\n+\n+  /**\n+   * Initializes the Profiler API with an implementation through SessionFactory\n+   *\n+   * @param sessionFactory\n+   */\n+  public static void initialize(SessionFactory sessionFactory) {\n+    factory = sessionFactory;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExODUxOTMx", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411851931", "createdAt": "2020-05-14T14:18:33Z", "commit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExOTUzMDM0", "url": "https://github.com/DataDog/dd-trace-java/pull/1412#pullrequestreview-411953034", "createdAt": "2020-05-14T16:00:27Z", "commit": {"oid": "15b3a8742ed3210c75760a6f8dadd2dd99636a7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2445, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}