{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTkzMDk3", "number": 2193, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1NjoxOVrOFEE3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNDowOVrOFFCxYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODE4MjUzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1NjoyMFrOIEBbnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNToxOFrOIFV0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA==", "bodyText": "Adding check against status 0?  Why?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541088668", "createdAt": "2020-12-11T16:56:20Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTQ2NQ==", "bodyText": "I believe 0 is used to represent null by a lot of servlet implementations. Not sure if this is specified though.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541091465", "createdAt": "2020-12-11T17:00:25Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MTU5Mg==", "bodyText": "The servlet.forward span generated in the zuul test was reporting an http status of 0.  Elsewhere we do a similar check before adding the tag, so I figured it would be better to make this consistent than apply an odd tag to the test.  (Also what Richard said... didn't see his reply before submitting my own.)", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541091592", "createdAt": "2020-12-11T17:00:40Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMTU2Mw==", "bodyText": "Okay, that makes sense.  It just wasn't clear why that needed to be added.\nIf we're repeating this same logic elsewhere we might want to think about ways to avoid it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541121563", "createdAt": "2020-12-11T17:49:45Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2MzIxNA==", "bodyText": "add a comment to explain why zero :)", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r542463214", "createdAt": "2020-12-14T15:15:35Z", "author": {"login": "clutchski"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MTIyMw==", "bodyText": "I'll replace with a static final instead.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r542471223", "createdAt": "2020-12-14T15:25:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA4ODY2OA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODE5NzczOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjo1OTozN1rOIEBkhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNjoyN1rOIFV37Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MDk0OQ==", "bodyText": "Why are these ignores necessary?\nI think this needs more commenting.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541090949", "createdAt": "2020-12-11T16:59:37Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwNDU0NQ==", "bodyText": "Is this sufficient? #2193 (comment)", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541104545", "createdAt": "2020-12-11T17:21:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MDk0OQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMjg2NA==", "bodyText": "Yes, although, now I'm wondering why we failed to catch the Spring Boot 2 problem sooner.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541332864", "createdAt": "2020-12-11T21:52:38Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MDk0OQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQxNzA2Ng==", "bodyText": "I'm also now wondering if we've covered all the various servers that you can embed in Spring Boot.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541417066", "createdAt": "2020-12-11T23:37:47Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MDk0OQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MjE3Mw==", "bodyText": "Probably not.  Likely worth spending some time extending/improving our Spring Boot test matrix.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r542472173", "createdAt": "2020-12-14T15:26:27Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MDk0OQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODIwNDgxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMTozMFrOIEBpEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTo1ODoxNVrOIGSwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjExNQ==", "bodyText": "We take request as a parameter and then ignore it?\nSame question for parentSpan?\nThis whole method doesn't appear to really be doing anything.  Am I missing something?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541092115", "createdAt": "2020-12-11T17:01:30Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwODkwMA==", "bodyText": "The request and parent span are captured here, but used in onExit. They are passed between via @Advice.Local parameters.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541108900", "createdAt": "2020-12-11T17:28:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjExNQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMyOTg0OQ==", "bodyText": "So ByteBuddy requires taking a dummy parameter, so it can be shared with the MethodExit Advice?\nI guess there's no better way to express that, but ugh.  I suppose that's my lack of first hand experiencing writing instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541329849", "createdAt": "2020-12-11T21:49:22Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjExNQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2NDExOQ==", "bodyText": "yes, it's how byte-buddy represents sharing between the static advice (which will get applied to the same method) - note when you're only sharing one thing you can return it from the onEnter and consume it using @Advice.Enter in the onExit, which is a bit better.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r543464119", "createdAt": "2020-12-15T15:51:46Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjExNQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2OTYxOA==", "bodyText": "Yes, I guess I'd only seen the sharing a single value case.\nI think I would have chosen to handle locals differently,  but if that's what bytebuddy requires so be it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r543469618", "createdAt": "2020-12-15T15:58:15Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjExNQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODIwNzY3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowMjoxMFrOIEBqyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoyNjoxOFrOIEXmyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjU1Mw==", "bodyText": "These were added because the tests now exercises Spring Boot 2.x, which has different package names.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541092553", "createdAt": "2020-12-11T17:02:10Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n+            || name.equals(\n+                \"org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.EmbeddedWebApplicationContext\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")) {\n+                \"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NTc4Ng==", "bodyText": "I see, so we also also had a previously undetected problem with support Spring Boot 2?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541165786", "createdAt": "2020-12-11T19:02:14Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n+            || name.equals(\n+                \"org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.EmbeddedWebApplicationContext\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")) {\n+                \"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjU1Mw=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTk3OA==", "bodyText": "yes, though possibly benign.  This is part of the reason I was hoping to get some time to improve the spring tests.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541451978", "createdAt": "2020-12-12T00:26:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -103,14 +103,21 @@ public boolean matches(final T target) {\n         if (name.startsWith(\"org.springframework.boot.autoconfigure.BackgroundPreinitializer$\")\n             || name.startsWith(\"org.springframework.boot.autoconfigure.condition.OnClassCondition$\")\n             || name.startsWith(\"org.springframework.boot.web.embedded.netty.NettyWebServer$\")\n+            || name.startsWith(\"org.springframework.boot.web.embedded.tomcat.TomcatWebServer$1\")\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n+            || name.equals(\n+                \"org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")\n             || name.equals(\n                 \"org.springframework.boot.context.embedded.EmbeddedWebApplicationContext\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")) {\n+                \"org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext\")\n+            || name.equals(\n+                \"org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5MjU1Mw=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODIzNzU3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowOTozNFrOIEB8SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzowOTozNFrOIEB8SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5NzAzMw==", "bodyText": "I think that's fine.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541097033", "createdAt": "2020-12-11T17:09:34Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ZuulSendForwardFilterInstrumentation.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_CACHE;\n+import static datadog.trace.instrumentation.springcloudzuul2.ResourceNameCache.RESOURCE_NAME_JOINER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import com.netflix.zuul.context.RequestContext;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ZuulSendForwardFilterInstrumentation extends Instrumenter.Default {\n+  public ZuulSendForwardFilterInstrumentation() {\n+    super(\"spring-cloud-zuul\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.springframework.cloud.netflix.zuul.filters.route.SendForwardFilter\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".ResourceNameCache\", packageName + \".ResourceNameCache$1\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod().and(named(\"run\")).and(takesNoArguments()),\n+        ZuulSendForwardFilterInstrumentation.class.getName() + \"$FilterInjectingAdvice\");\n+  }\n+\n+  /**\n+   * Using the zuul proxy results in the Spring \"HandlerMapping.bestMatchingPattern\" value being\n+   * very generic. In the case where zuul forwards the request to a more specific Spring controller,\n+   * a better pattern will be updated on the request after the call returns, so we want to update\n+   * the resource name with that.\n+   */\n+  public static class FilterInjectingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void onEnter(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      RequestContext ctx = RequestContext.getCurrentContext();\n+      request = ctx.getRequest();\n+      if (request != null) {\n+        // Capture the span from the request before forwarding.\n+        Object span = request.getAttribute(DD_SPAN_ATTRIBUTE);\n+        if (span instanceof AgentSpan) {\n+          parentSpan = (AgentSpan) span;\n+        }\n+      }\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onExit(\n+        @Advice.Local(\"request\") HttpServletRequest request,\n+        @Advice.Local(\"parentSpan\") AgentSpan parentSpan) {\n+      if (request != null && parentSpan != null) {\n+        final String method = request.getMethod();\n+        // Get the updated route pattern.\n+        // Opted for static string here to avoid an additional spring dependency.\n+        final Object bestMatchingPattern =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI2MTQwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ResourceNameCache.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToxMlrOIECJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTowMTozMVrOIEGF8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDUzMA==", "bodyText": "I presume we already generate similar resource names elsewhere.\nWhy does this require its own cache?\nUnable to share across instrumentation boundaries?\nOr because there's a performance benefit to separate caches?\nI'm not saying this either good or bad, but I want to understand our motivation.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541100530", "createdAt": "2020-12-11T17:15:12Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ResourceNameCache.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+\n+public class ResourceNameCache {\n+  public static final Function<Pair<String, Object>, CharSequence> RESOURCE_NAME_JOINER =\n+      new Function<Pair<String, Object>, CharSequence>() {\n+        @Override\n+        public CharSequence apply(Pair<String, Object> input) {\n+          return UTF8BytesString.create(input.getLeft() + \" \" + input.getRight());\n+        }\n+      };\n+\n+  public static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwNjI2OQ==", "bodyText": "I expect there would be some benefit to consolidating these but sharing across instrumentation boundaries is difficult.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541106269", "createdAt": "2020-12-11T17:24:42Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ResourceNameCache.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+\n+public class ResourceNameCache {\n+  public static final Function<Pair<String, Object>, CharSequence> RESOURCE_NAME_JOINER =\n+      new Function<Pair<String, Object>, CharSequence>() {\n+        @Override\n+        public CharSequence apply(Pair<String, Object> input) {\n+          return UTF8BytesString.create(input.getLeft() + \" \" + input.getRight());\n+        }\n+      };\n+\n+  public static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDUzMA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTExMjA5Mw==", "bodyText": "I could potentially reference the one in SpringWebHttpServerDecorator, but didn't think there was much benefit in that.  If you want I can restructure it to do so.\nThis cache is relatively tied to the instrumentation and structure of the resource name, so it wouldn't make sense to extract out generically.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541112093", "createdAt": "2020-12-11T17:34:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ResourceNameCache.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+\n+public class ResourceNameCache {\n+  public static final Function<Pair<String, Object>, CharSequence> RESOURCE_NAME_JOINER =\n+      new Function<Pair<String, Object>, CharSequence>() {\n+        @Override\n+        public CharSequence apply(Pair<String, Object> input) {\n+          return UTF8BytesString.create(input.getLeft() + \" \" + input.getRight());\n+        }\n+      };\n+\n+  public static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDUzMA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NTA0Mg==", "bodyText": "Yes, I could easily believe that a larger number of smaller focused caches is better than a bigger shared cache.\nhttp resources seem like one of the potentially shareable cases -- that's why I asked.\nI'm fine with this for now.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541165042", "createdAt": "2020-12-11T19:01:31Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/main/java/datadog/trace/instrumentation/springcloudzuul2/ResourceNameCache.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package datadog.trace.instrumentation.springcloudzuul2;\n+\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.Pair;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+\n+public class ResourceNameCache {\n+  public static final Function<Pair<String, Object>, CharSequence> RESOURCE_NAME_JOINER =\n+      new Function<Pair<String, Object>, CharSequence>() {\n+        @Override\n+        public CharSequence apply(Pair<String, Object> input) {\n+          return UTF8BytesString.create(input.getLeft() + \" \" + input.getRight());\n+        }\n+      };\n+\n+  public static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDUzMA=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQwNjI1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MDo0MFrOIEDeMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzo1MDo0MFrOIEDeMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyMjA5Nw==", "bodyText": "I think this implicitly setting tags is problematic, but I realize that's pre-existing.\nWe'll have to address that in some of the other server work.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541122097", "createdAt": "2020-12-11T17:50:40Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -70,19 +70,19 @@ public AgentSpan onResponse(\n     if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n       try {\n         int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n-\n-        if (throwable != null && status == HttpServletResponse.SC_OK) {\n-          span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);\n-          span.setError(true);\n-        } else {\n-          span.setTag(Tags.HTTP_STATUS, HTTP_STATUSES.get(status));\n-          if (SERVER_ERROR_STATUSES.get(status)) {\n+        if (status > 0) {\n+          if (throwable != null && status == HttpServletResponse.SC_OK) {\n+            span.setTag(Tags.HTTP_STATUS, SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTcxMjk4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/test/groovy/ServletTestInstrumentation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTo1MDo0NVrOIEQOkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTo0NDoyNVrOIGSDHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMTA4OQ==", "bodyText": "We need extra instrumentation just in the test?  Why?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541331089", "createdAt": "2020-12-11T21:50:45Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/test/groovy/ServletTestInstrumentation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.test.base.HttpServerTestAdvice;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+\n+@AutoService(Instrumenter.class)\n+public class ServletTestInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1Mjg5NA==", "bodyText": "This is an artifact of extending our HttpServerTest which expects an extra span before the start of the actual span to verify it correctly ignores the parent.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r541452894", "createdAt": "2020-12-12T00:29:42Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/test/groovy/ServletTestInstrumentation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.test.base.HttpServerTestAdvice;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+\n+@AutoService(Instrumenter.class)\n+public class ServletTestInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMTA4OQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ1ODA3Nw==", "bodyText": "Is there a plan to rework the HTTP/servlet tests to not require this? Ideally we should only test the instrumentations we're actually shipping :)", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r543458077", "createdAt": "2020-12-15T15:44:25Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/spring-cloud-zuul-2/src/test/groovy/ServletTestInstrumentation.java", "diffHunk": "@@ -0,0 +1,20 @@\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.test.base.HttpServerTestAdvice;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+\n+@AutoService(Instrumenter.class)\n+public class ServletTestInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMzMTA4OQ=="}, "originalCommit": {"oid": "8f0e548508cbd550b7d2208f5b071205868a0b33"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwODMyNjEwOnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/api/cache/RadixTreeCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNDowOVrOIFWRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNzo0MFrOIFWciQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3ODYwNQ==", "bodyText": "@richardstartin any concerns with adding 0 into the default cache? How should I update the comment?  Should I apply a similar change for PORTS below?", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r542478605", "createdAt": "2020-12-14T15:34:09Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/api/cache/RadixTreeCache.java", "diffHunk": "@@ -14,11 +14,13 @@ public Integer apply(int value) {\n         }\n       };\n \n+  public static final int UNSET_STATUS = 0;\n   // should cover range [0, 512) to cover all standard HTTP statuses\n   // 16 pages of 32 should keep the tree sparse with typical pages\n   // covering ranges [192, 224), [288, 320), [384, 416), [480, 512)\n   public static final RadixTreeCache<Integer> HTTP_STATUSES =\n-      new RadixTreeCache<>(16, 32, AUTOBOX, 200, 201, 301, 307, 400, 401, 403, 404, 500, 502, 503);\n+      new RadixTreeCache<>(\n+          16, 32, AUTOBOX, UNSET_STATUS, 200, 201, 301, 307, 400, 401, 403, 404, 500, 502, 503);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4e2305e43e513a73faaecb706bb7d3365f98817"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4MTU0NQ==", "bodyText": "Actually, I just realized the unset value is never added to the cache, so I'll remove it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2193#discussion_r542481545", "createdAt": "2020-12-14T15:37:40Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/api/cache/RadixTreeCache.java", "diffHunk": "@@ -14,11 +14,13 @@ public Integer apply(int value) {\n         }\n       };\n \n+  public static final int UNSET_STATUS = 0;\n   // should cover range [0, 512) to cover all standard HTTP statuses\n   // 16 pages of 32 should keep the tree sparse with typical pages\n   // covering ranges [192, 224), [288, 320), [384, 416), [480, 512)\n   public static final RadixTreeCache<Integer> HTTP_STATUSES =\n-      new RadixTreeCache<>(16, 32, AUTOBOX, 200, 201, 301, 307, 400, 401, 403, 404, 500, 502, 503);\n+      new RadixTreeCache<>(\n+          16, 32, AUTOBOX, UNSET_STATUS, 200, 201, 301, 307, 400, 401, 403, 404, 500, 502, 503);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3ODYwNQ=="}, "originalCommit": {"oid": "c4e2305e43e513a73faaecb706bb7d3365f98817"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4535, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}