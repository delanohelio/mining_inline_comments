{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDA2NzY2", "number": 1599, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMDoyM1rOEGgBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODowNjozOFrOEGpNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUxNDc5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeStackCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMDoyM1rOGlVnQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzo0Njo0MlrOGljhZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNDYxMA==", "bodyText": "I suspect this branch will probably lead to much better compression opportunities than the other.", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r441804610", "createdAt": "2020-06-17T20:10:23Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeStackCollector.java", "diffHunk": "@@ -55,20 +65,37 @@ public void collect(StackTraceElement[] stackTrace) {\n     if (stackTrace.length == 0) {\n       return;\n     }\n-    FrameSequence subtree = null;\n-    for (int i = stackTrace.length - 1; i >= 0; i--) {\n-      StackTraceElement element = stackTrace[i];\n-      subtree =\n-          newTree(\n-              new FrameElement(\n-                  element.getClassName(),\n-                  element.getMethodName(),\n-                  element.getLineNumber(),\n-                  stringPool),\n-              subtree);\n+    FrameSequence tree = null;\n+    if (USE_SUBTREE_COMPRESSION) {\n+      for (int i = stackTrace.length - 1; i >= 0; i--) {\n+        StackTraceElement element = stackTrace[i];\n+        tree =\n+            newTree(\n+                new FrameElement(\n+                    element.getClassName(),\n+                    element.getMethodName(),\n+                    element.getLineNumber(),\n+                    stringPool,\n+                    framePool),\n+                tree);\n+      }\n+    } else {\n+      int[] framePtrs = new int[stackTrace.length];\n+      for (int i = 0; i < stackTrace.length; i++) {\n+        StackTraceElement element = stackTrace[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMjQ4Ng==", "bodyText": "Yep. The former one will be probably removed - does not seem to bring much benefit in real life.", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r442032486", "createdAt": "2020-06-18T07:46:42Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeStackCollector.java", "diffHunk": "@@ -55,20 +65,37 @@ public void collect(StackTraceElement[] stackTrace) {\n     if (stackTrace.length == 0) {\n       return;\n     }\n-    FrameSequence subtree = null;\n-    for (int i = stackTrace.length - 1; i >= 0; i--) {\n-      StackTraceElement element = stackTrace[i];\n-      subtree =\n-          newTree(\n-              new FrameElement(\n-                  element.getClassName(),\n-                  element.getMethodName(),\n-                  element.getLineNumber(),\n-                  stringPool),\n-              subtree);\n+    FrameSequence tree = null;\n+    if (USE_SUBTREE_COMPRESSION) {\n+      for (int i = stackTrace.length - 1; i >= 0; i--) {\n+        StackTraceElement element = stackTrace[i];\n+        tree =\n+            newTree(\n+                new FrameElement(\n+                    element.getClassName(),\n+                    element.getMethodName(),\n+                    element.getLineNumber(),\n+                    stringPool,\n+                    framePool),\n+                tree);\n+      }\n+    } else {\n+      int[] framePtrs = new int[stackTrace.length];\n+      for (int i = 0; i < stackTrace.length; i++) {\n+        StackTraceElement element = stackTrace[i];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNDYxMA=="}, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUyNDMzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeStackCollector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMzowM1rOGlVtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxMzowM1rOGlVtBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNjA4NQ==", "bodyText": "if ((topItem & 0x80000000) == 0x80000000\n->\nif (topItem < 0)\nhttps://github.com/DataDog/dd-trace-java/pull/1599/files#diff-a5e10a778b56aa8ff92e25ed4fd67ae4L121", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r441806085", "createdAt": "2020-06-17T20:13:03Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/ScopeStackCollector.java", "diffHunk": "@@ -148,8 +179,8 @@ void addCompressedStackptr(int stackptr) {\n     stacks.add(stackptr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUzNTEzOnYy", "diffSide": "RIGHT", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/LEB128ByteBufferWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNjo0NFrOGlVz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNjo0NFrOGlVz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwNzg3MA==", "bodyText": "good.", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r441807870", "createdAt": "2020-06-17T20:16:44Z", "author": {"login": "richardstartin"}, "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/LEB128ByteBufferWriter.java", "diffHunk": "@@ -127,11 +158,31 @@ private void ensureCapacity(int offset, int dataLength) {\n       ByteBuffer newBuffer = allocateBuffer(newCapacity);\n       buffer.flip();\n       newBuffer.put(buffer);\n-      buffer = newBuffer;\n+      BUFFER_REF.set(new SoftReference<>(newBuffer));\n+      return newBuffer;\n     }\n+    return buffer;\n   }\n \n   private static ByteBuffer allocateBuffer(int capacity) {\n-    return ByteBuffer.allocateDirect(capacity);\n+    return ByteBuffer.allocate(capacity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjUzNzI4OnYy", "diffSide": "RIGHT", "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/MLTWriter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNzoyN1rOGlV1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDoxNzoyN1rOGlV1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgwODIxMg==", "bodyText": "if (val >= 0)", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r441808212", "createdAt": "2020-06-17T20:17:27Z", "author": {"login": "richardstartin"}, "path": "utils/mlt-support/src/main/java/com/datadog/mlt/io/MLTWriter.java", "diffHunk": "@@ -44,23 +39,16 @@ private void writeChunk(IMLTChunk chunk, LEB128Writer writer) {\n         .writeLong(chunk.getDuration()) // duration\n         .writeLong(chunk.getThreadId());\n \n-    IntSet stringConstants = new IntArraySet();\n-    IntSet frameConstants = new IntArraySet();\n-    IntSet stackConstants = new IntArraySet();\n+    IntSet stringConstants = new IntOpenHashSet();\n+    IntSet frameConstants = new IntOpenHashSet();\n+    IntSet stackConstants = new IntOpenHashSet();\n \n-    /*\n-     * Write out the stack trace sequence and collect the constant pool usage.\n-     * In order collect the data and count it in one pass the intermediary result is written to a separate\n-     * writer.\n-     */\n-    LEB128Writer stackEventWriter = frameStackDataWriter;\n     int[] eventCount = new int[1];\n     chunk\n         .frameSequenceCpIndexes()\n         .forEach(\n             val -> {\n               eventCount[0]++;\n-              stackEventWriter.writeInt(val);\n               if ((val & 0x80000000) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzkzNTkwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzo0MjoyM1rOGljXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoxMDo0MlrOGlowNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMDAyNw==", "bodyText": "can remove the comment then :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r442030027", "createdAt": "2020-06-18T07:42:23Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "diffHunk": "@@ -25,7 +25,8 @@\n   public JMXSampler(ThreadScopeMapper threadScopeMapper) {\n     this.threadScopeMapper = threadScopeMapper;\n     // TODO period as parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExODE5OA==", "bodyText": "It is not a proper parameter, though :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r442118198", "createdAt": "2020-06-18T10:10:42Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "diffHunk": "@@ -25,7 +25,8 @@\n   public JMXSampler(ThreadScopeMapper threadScopeMapper) {\n     this.threadScopeMapper = threadScopeMapper;\n     // TODO period as parameter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMDAyNw=="}, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Mzk0MzQyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzo0NDoyNFrOGljcZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzo0NDoyNFrOGljcZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMTIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                long samplerPeriod = Long.parseLong(System.getProperty(\"mlt.sampler.ms\", \"10\"));\n          \n          \n            \n                long samplerPeriod = Long.getLong(\"mlt.sampler.ms\", 10);", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r442031207", "createdAt": "2020-06-18T07:44:24Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-mlt/src/main/java/com/datadog/mlt/sampler/JMXSampler.java", "diffHunk": "@@ -25,7 +25,8 @@\n   public JMXSampler(ThreadScopeMapper threadScopeMapper) {\n     this.threadScopeMapper = threadScopeMapper;\n     // TODO period as parameter\n-    executor.scheduleAtFixedRate(this::sample, 0, 10, TimeUnit.MILLISECONDS);\n+    long samplerPeriod = Long.parseLong(System.getProperty(\"mlt.sampler.ms\", \"10\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDAxOTkxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-mlt/src/test/java/com/datadog/mlt/sampler/ScopeManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODowNjozOFrOGlkNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDoxMTozM1rOGloyGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MzgwMg==", "bodyText": "MLTReader class does not have any fields so we may make all methods static.\nusually when you are doing something like:\nnew MyClass().aMethod()\nyou can transform your method as a static one as don't have to store any fields inside the object", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r442043802", "createdAt": "2020-06-18T08:06:38Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-mlt/src/test/java/com/datadog/mlt/sampler/ScopeManagerTest.java", "diffHunk": "@@ -51,32 +50,37 @@ void sample() throws Exception {\n       sampler.collect(ti.getStackTrace());\n       Thread.sleep(ThreadLocalRandom.current().nextInt(20) + 2);\n     }\n-    IMLTChunk collectedChunk = sampler.end();\n+    sampler.end(\n+        collectedChunk -> {\n+          byte[] serializedChunk = collectedChunk.serialize();\n+          List<MLTChunk> chunks = new MLTReader().readMLTChunks(serializedChunk);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExODY4MQ==", "bodyText": "Yep, once the overall shape is stabilized I might do this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1599#discussion_r442118681", "createdAt": "2020-06-18T10:11:33Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-mlt/src/test/java/com/datadog/mlt/sampler/ScopeManagerTest.java", "diffHunk": "@@ -51,32 +50,37 @@ void sample() throws Exception {\n       sampler.collect(ti.getStackTrace());\n       Thread.sleep(ThreadLocalRandom.current().nextInt(20) + 2);\n     }\n-    IMLTChunk collectedChunk = sampler.end();\n+    sampler.end(\n+        collectedChunk -> {\n+          byte[] serializedChunk = collectedChunk.serialize();\n+          List<MLTChunk> chunks = new MLTReader().readMLTChunks(serializedChunk);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MzgwMg=="}, "originalCommit": {"oid": "99cfcc1c8c433dae6013bc0ed4edfabe21eac768"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}