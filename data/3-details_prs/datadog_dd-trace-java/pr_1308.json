{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODE3NTc3", "number": 1308, "title": "Fix projectreactor instrumentation to keep span context connected", "bodyText": "Fixes issue where the reactive lettuce client spans can be orphaned. This would also be an issue with spring WebClient.\nsupersedes #1203\nfixes #1100\nfixes #1178\nNotes on the implication:\nThe largest change here is the use of reactor's built in hook mechanism. This wraps (almost) every Publisher (including Operator which implements Publisher and Subscriber) with our tracing function. The scope for any given operator is the one active at the time of creation. So if I have a pre-existing Flux and attach some operators to it while scoped to a span, all of those operators will have that span as their scope as soon as they execute.\nThe Webflux client uses a combination of a WebClient native filter, and a very targeted instrumentation that handles copying the current span from the reactor context, to the netty channel attributes\nGiven the time required to make the above changes, the server instrumentation was not changed beyond making the tests pass again. Given enough time I would also update the webflux server instrumentation to use filters directly instead of the special purpose instrumentations for each handler type.", "createdAt": "2020-03-11T17:13:41Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1308", "merged": true, "mergeCommit": {"oid": "537c17547ee7d149b0a4d284e3814094be86d877"}, "closed": true, "closedAt": "2020-04-29T17:14:09Z", "author": {"login": "devinsba"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMu0tpgFqTM3MzAwOTI2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccbiOhgFqTQwMjg2MzEyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDA5MjYx", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-373009261", "createdAt": "2020-03-11T18:13:54Z", "commit": {"oid": "25616139f7a522e80176496eb3dfb63e39896592"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzo1NVrOF1DGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMjo0NFrOF1LVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMw==", "bodyText": "Might make more sense for this test to be in the lettuce project.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391169703", "createdAt": "2020-03-11T18:13:55Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "diffHunk": "@@ -0,0 +1,109 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.PortUtils\n+import datadog.trace.agent.test.utils.TraceUtils\n+import io.lettuce.core.ClientOptions\n+import io.lettuce.core.RedisClient\n+import io.lettuce.core.api.StatefulConnection\n+import io.lettuce.core.api.reactive.RedisReactiveCommands\n+import reactor.core.scheduler.Schedulers\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+class LettuceReactiveTest extends AgentTestRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25616139f7a522e80176496eb3dfb63e39896592"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDA1NA==", "bodyText": "I usually static import this...", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391170054", "createdAt": "2020-03-11T18:14:31Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "diffHunk": "@@ -0,0 +1,109 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.PortUtils\n+import datadog.trace.agent.test.utils.TraceUtils\n+import io.lettuce.core.ClientOptions\n+import io.lettuce.core.RedisClient\n+import io.lettuce.core.api.StatefulConnection\n+import io.lettuce.core.api.reactive.RedisReactiveCommands\n+import reactor.core.scheduler.Schedulers\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+class LettuceReactiveTest extends AgentTestRunner {\n+  public static final String HOST = \"127.0.0.1\"\n+  public static final int DB_INDEX = 0\n+  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n+  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n+\n+  @Shared\n+  String embeddedDbUri\n+\n+  @Shared\n+  RedisServer redisServer\n+\n+  RedisClient redisClient\n+  StatefulConnection connection\n+  RedisReactiveCommands<String, ?> reactive\n+\n+  def setupSpec() {\n+    int port = PortUtils.randomOpenPort()\n+    String dbAddr = HOST + \":\" + port + \"/\" + DB_INDEX\n+    embeddedDbUri = \"redis://\" + dbAddr\n+\n+    redisServer = RedisServer.builder()\n+    // bind to localhost to avoid firewall popup\n+      .setting(\"bind \" + HOST)\n+    // set max memory to avoid problems in CI\n+      .setting(\"maxmemory 128M\")\n+      .port(port).build()\n+  }\n+\n+  def setup() {\n+    redisClient = RedisClient.create(embeddedDbUri)\n+\n+    println \"Using redis: $redisServer.args\"\n+    redisServer.start()\n+    redisClient.setOptions(CLIENT_OPTIONS)\n+    connection = redisClient.connect()\n+\n+    reactive = connection.reactive()\n+    reactive.set(\"test\", \"test\").block()\n+\n+    TEST_WRITER.waitForTraces(2)\n+    TEST_WRITER.clear()\n+  }\n+\n+  def cleanup() {\n+    connection.close()\n+    redisServer.stop()\n+  }\n+\n+  def \"blocking subscriber\"() {\n+    when:\n+    TraceUtils.runUnderTrace(\"test-parent\") {\n+      reactive.set(\"a\", \"1\")\n+        .then(reactive.get(\"a\")) // The get here is ending up in another trace\n+        .block()\n+    }\n+    TEST_WRITER.waitForTraces(1)\n+\n+    def traces = TEST_WRITER.collect()\n+\n+    then:\n+    traces.size() == 1\n+    traces.get(0).size() == 3\n+  }\n+\n+  def \"async subscriber\"() {\n+    when:\n+    TraceUtils.runUnderTrace(\"test-parent\") {\n+      reactive.set(\"a\", \"1\")\n+        .then(reactive.get(\"a\")) // The get here is ending up in another trace\n+        .subscribe()\n+    }\n+    TEST_WRITER.waitForTraces(1)\n+\n+    def traces = TEST_WRITER.collect()\n+\n+    then:\n+    traces.size() == 1\n+    traces.get(0).size() == 3\n+  }\n+\n+  def \"async subscriber with specific thread pool\"() {\n+    when:\n+    TraceUtils.runUnderTrace(\"test-parent\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25616139f7a522e80176496eb3dfb63e39896592"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTY3NA==", "bodyText": "These methods should be in a separate class... Advice classes should only be used for instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391171674", "createdAt": "2020-03-11T18:17:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/ReactorHooksAdvice.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopTraceScope;\n+import datadog.trace.context.TraceScope;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.asm.Advice;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+import reactor.util.context.Context;\n+\n+public class ReactorHooksAdvice {\n+  @Advice.OnMethodExit(suppress = Throwable.class)\n+  public static void postInit() {\n+    Hooks.onEachOperator(ReactorHooksAdvice.class.getName(), tracingOperator());\n+  }\n+\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingOperator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac7d215ee33faa0149aa178683a29f249019a0d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MDAyNQ==", "bodyText": "I'm a little concerned by this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391290025", "createdAt": "2020-03-11T21:54:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -28,10 +37,19 @@ class SpringWebfluxHttpClientTest extends HttpClientTest<SpringWebfluxHttpClient\n       .exchange()\n       .doOnSuccessOrError { success, error ->\n         blockUntilChildSpansFinished(1)\n-        callback?.call()\n+        // The callback span is expected to be detached from the client trace, this however means we either have\n+        // to have the reactor instrumentation not work in this case, breaking the lettuce flow expectations, or\n+        // we can make this code conditional here to make the test pass\n+        if (hasParent) {\n+          callback?.call()\n+        }\n       }\n       .block()\n \n+    if (!hasParent) {\n+      callback?.call()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2ad0496861bcdff3bcf133bffb55f306767d37"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MDgwOQ==", "bodyText": "Would it be better to sort by trace start time instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391290809", "createdAt": "2020-03-11T21:56:35Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/SpringWebfluxTest.groovy", "diffHunk": "@@ -524,4 +534,23 @@ class SpringWebfluxTest extends AgentTestRunner {\n     \"functional API delayed response\" | \"/greet-delayed\" | \"/greet-delayed\"     | null            | SpringWebFluxTestApplication.GreetingHandler.DEFAULT_RESPONSE\n     \"annotation API delayed response\" | \"/foo-delayed\"   | \"/foo-delayed\"       | \"getFooDelayed\" | new FooModel(3L, \"delayed\").toString()\n   }\n+\n+  void sortAndAssertTraces(\n+    final int size,\n+    @ClosureParams(value = SimpleType, options = \"datadog.trace.agent.test.asserts.ListWriterAssert\")\n+    @DelegatesTo(value = ListWriterAssert, strategy = Closure.DELEGATE_FIRST)\n+    final Closure spec) {\n+\n+    TEST_WRITER.waitForTraces(size)\n+\n+    TEST_WRITER.each {\n+      it.sort({\n+        a, b ->\n+          // Intentionally backward because asserts are sorted that way already\n+          return b.resourceName <=> a.resourceName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MjI0NQ==", "bodyText": "This also concerns me...  Semantically, if I were using reactor independently, wouldn't I expect the exception to be captured here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391292245", "createdAt": "2020-03-11T22:00:15Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -102,11 +107,13 @@ class ReactorCoreTest extends AgentTestRunner {\n           resourceName \"publisher-parent\"\n           operationName \"publisher-parent\"\n           childOf(span(0))\n-          errored true\n-          tags {\n-            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n-            defaultTags()\n-          }\n+          // MonoError and FluxError are both Fuseable.ScalarCallable which we cannot wrap without\n+          // causing a lot of problems in other places where we integrate with reactor, like webflux\n+          //          errored true\n+          //          tags {\n+          //            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n+          //            defaultTags()\n+          //          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMzU5MQ==", "bodyText": "This should prob be extendsClass now.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391303591", "createdAt": "2020-03-11T22:20:19Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -42,21 +35,19 @@ public DefaultWebClientInstrumentation() {\n       \"datadog.trace.agent.decorator.HttpClientDecorator\",\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDQ2OA==", "bodyText": "Try to avoid safeHasSuperType now... only use it if you don't know whether the argument is a class or an interface.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391304468", "createdAt": "2020-03-11T22:22:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/ReactorHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.springwebflux.client;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n+  public ReactorHttpClientInstrumentation() {\n+    super(\"spring-webflux\", \"spring-webflux-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"reactor.ipc.netty.http.client.HttpClient\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".ReactorHttpClientAdvice$Handler\"};\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"reactor.ipc.netty.http.client.HttpClient\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjQ5MzE2", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-374649316", "createdAt": "2020-03-13T22:20:32Z", "commit": {"oid": "3bb1cdecea93bf69f6aa4ed7b91dfd2cec37880a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMDozM1rOF2U_Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMDozM1rOF2U_Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMTI1OQ==", "bodyText": "You can remove this now.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r392511259", "createdAt": "2020-03-13T22:20:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/reactor-core-3.1.gradle", "diffHunk": "@@ -21,6 +21,8 @@ testSets {\n   latestDepTest {\n     dirName = 'test'\n   }\n+\n+  lettuceTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb1cdecea93bf69f6aa4ed7b91dfd2cec37880a"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "337f353eebed9da43b2788ed51af65b53688286b", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/337f353eebed9da43b2788ed51af65b53688286b", "committedDate": "2020-03-24T14:05:22Z", "message": "Hmm, redis doesn't have the behavior I see from webclient"}, "afterCommit": {"oid": "5095a5204dfeb1b1f3d6cfa7e3867d0035634e13", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5095a5204dfeb1b1f3d6cfa7e3867d0035634e13", "committedDate": "2020-03-24T18:19:30Z", "message": "Hmm, redis doesn't have the behavior I see from webclient"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2036e63cc94226941328d1d7a0159b6f852f96c3", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2036e63cc94226941328d1d7a0159b6f852f96c3", "committedDate": "2020-04-23T15:14:41Z", "message": "More self review"}, "afterCommit": {"oid": "9da6500575acf88d9a719f7cbcd05cdcc48448cc", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9da6500575acf88d9a719f7cbcd05cdcc48448cc", "committedDate": "2020-04-23T15:43:49Z", "message": "More self review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTczMzQz", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-400173343", "createdAt": "2020-04-24T18:20:48Z", "commit": {"oid": "bc051465f569d3a52c1d5965c830f33229cb0f4b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMDo0OFrOGLjzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMzo1MVrOGLj6Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NDA4Ng==", "bodyText": "Will undo before merge", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414774086", "createdAt": "2020-04-24T18:20:48Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/test/groovy/Netty40ClientTest.groovy", "diffHunk": "@@ -67,6 +68,7 @@ class Netty40ClientTest extends HttpClientTest {\n     return false\n   }\n \n+  @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc051465f569d3a52c1d5965c830f33229cb0f4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTkwNg==", "bodyText": "Will undo before merge", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414775906", "createdAt": "2020-04-24T18:23:51Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "diffHunk": "@@ -77,6 +78,7 @@ class Netty41ClientTest extends HttpClientTest {\n     return false\n   }\n \n+  @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32aa51afa2e11fe8a8155414079374c3d5134499"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32aa51afa2e11fe8a8155414079374c3d5134499", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/32aa51afa2e11fe8a8155414079374c3d5134499", "committedDate": "2020-04-24T18:23:28Z", "message": "I guess my import settings were still wrong"}, "afterCommit": {"oid": "90c0e7269f93be9ceca98b8cd2e1a0b4ad3b307f", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/90c0e7269f93be9ceca98b8cd2e1a0b4ad3b307f", "committedDate": "2020-04-24T18:55:56Z", "message": "Ignore flaky tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjE1OTE3", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-400215917", "createdAt": "2020-04-24T19:29:36Z", "commit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyOTozN1rOGLmJmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyOTozN1rOGLmJmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMjU2OQ==", "bodyText": "class names like this remind me that the way I feel about reactive, other people feel about java in general.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414812569", "createdAt": "2020-04-24T19:29:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHooksInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHooksInstrumentation() {\n+    super(\"reactor-core\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.core.publisher.Hooks\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingPublishers\",\n+      packageName + \".TracingPublishers$MonoTracingPublisher\",\n+      packageName + \".TracingPublishers$ParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$ConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$GroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableMonoTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableGroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableFluxTracingPublisher\",\n+      packageName + \".TracingSubscriber\",\n+      packageName + \".TracingSubscriber$UnifiedScope\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjE4MjMw", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-400218230", "createdAt": "2020-04-24T19:33:33Z", "commit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozMzozM1rOGLmRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMjozN1rOGLnjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNDY0NQ==", "bodyText": "nice.... isTypeInitializer()!  I've never used that one.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414814645", "createdAt": "2020-04-24T19:33:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHooksInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHooksInstrumentation() {\n+    super(\"reactor-core\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.core.publisher.Hooks\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingPublishers\",\n+      packageName + \".TracingPublishers$MonoTracingPublisher\",\n+      packageName + \".TracingPublishers$ParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$ConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$GroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableMonoTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableGroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableFluxTracingPublisher\",\n+      packageName + \".TracingSubscriber\",\n+      packageName + \".TracingSubscriber$UnifiedScope\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(isTypeInitializer(), packageName + \".ReactorHooksAdvice\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTI5NQ==", "bodyText": "Nice comment!", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414815295", "createdAt": "2020-04-24T19:34:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTQ4NA==", "bodyText": "How noisy will this be when we have debug enabled?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414815484", "createdAt": "2020-04-24T19:35:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODY0Nw==", "bodyText": "suggestion:  change this to a wrapSubscriber that does the instanceof check and returns either a newly or already wrapped instance.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414818647", "createdAt": "2020-04-24T19:40:56Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());\n+\n+    // based on Operators.LiftFunction.apply in reactor 3.3.4\n+    if (delegate instanceof Fuseable) {\n+      if (delegate instanceof Mono) {\n+        return new FuseableMonoTracingPublisher<>(span, (Mono<T>) delegate);\n+      }\n+      if (delegate instanceof ParallelFlux) {\n+        return new FuseableParallelFluxTracingPublisher<>(span, (ParallelFlux<T>) delegate);\n+      }\n+      if (delegate instanceof ConnectableFlux) {\n+        return new FuseableConnectableFluxTracingPublisher<>(span, (ConnectableFlux<T>) delegate);\n+      }\n+      if (delegate instanceof GroupedFlux) {\n+        return new FuseableGroupedFluxTracingPublisher<>(span, (GroupedFlux<?, T>) delegate);\n+      }\n+      return new FuseableFluxTracingPublisher<>(span, (Flux<T>) delegate);\n+    } else {\n+      if (delegate instanceof Mono) {\n+        return new MonoTracingPublisher<>(span, (Mono<T>) delegate);\n+      }\n+      if (delegate instanceof ParallelFlux) {\n+        return new ParallelFluxTracingPublisher<>(span, (ParallelFlux<T>) delegate);\n+      }\n+      if (delegate instanceof ConnectableFlux) {\n+        return new ConnectableFluxTracingPublisher<>(span, (ConnectableFlux<T>) delegate);\n+      }\n+      if (delegate instanceof GroupedFlux) {\n+        return new GroupedFluxTracingPublisher<>(span, (GroupedFlux<?, T>) delegate);\n+      }\n+      return new FluxTracingPublisher<>(span, (Flux<T>) delegate);\n+    }\n+  }\n+\n+  static <T> boolean shouldWrapSubscriber(final CoreSubscriber<? super T> actual) {\n+    return !(actual instanceof TracingSubscriber);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTQzOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414821439", "createdAt": "2020-04-24T19:45:57Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -102,32 +118,34 @@ class ReactorCoreTest extends AgentTestRunner {\n           resourceName \"publisher-parent\"\n           operationName \"publisher-parent\"\n           childOf(span(0))\n-          errored true\n+          // It's important that we don't attach errors at the Reactor level so that we don't\n+          // impact the spans on reactor integrations such as netty and lettuce, as reactor is\n+          // more of a context propagation mechanism than something we would be tracking for\n+          // errors this is ok.\n+          errored false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNTMwNQ==", "bodyText": "You can simplify this a lot with TraceUtils.basicSpan", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414825305", "createdAt": "2020-04-24T19:53:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -193,41 +308,136 @@ class ReactorCoreTest extends AgentTestRunner {\n             defaultTags()\n           }\n         }\n+        span(2) {\n+          resourceName \"intermediate\"\n+          operationName \"intermediate\"\n+          childOf(span(1))\n+          tags {\n+            defaultTags()\n+          }\n+        }\n+        for (int i = 0; i < workItems * 2; i++) {\n+          span(i + 3) {\n+            resourceName \"addOne\"\n+            operationName \"addOne\"\n+            childOf(span(i % 2 == 0 ? 1 : 2))\n+            tags {\n+              \"$Tags.COMPONENT\" \"trace\"\n+              defaultTags()\n+            }\n+          }\n+        }\n       }\n     }\n \n     where:\n-    name         | publisher\n-    \"basic mono\" | Mono.just(1)\n-    \"basic flux\" | Flux.fromIterable([5, 6])\n+    name         | workItems | publisherSupplier\n+    \"basic mono\" | 1         | { -> Mono.just(1).map(addOne) }\n+    \"basic flux\" | 2         | { -> Flux.fromIterable([1, 2]).map(addOne) }\n+  }\n+\n+  def \"Publisher chain spans can have the parent removed at assembly time '#name'\"() {\n+    when:\n+    runUnderTrace {\n+      // The operations in the publisher created here all end up children of the publisher-parent\n+      Publisher<Integer> publisher = publisherSupplier()\n+\n+      // After this activation, all additions to the assembly will create new traces\n+      AgentScope scope = activateSpan(AgentTracer.noopSpan(), true)\n+      try {\n+        if (publisher instanceof Mono) {\n+          return ((Mono) publisher).map(addOne)\n+        } else if (publisher instanceof Flux) {\n+          return ((Flux) publisher).map(addOne)\n+        }\n+        throw new IllegalStateException(\"Unknown publisher type\")\n+      } finally {\n+        scope.close()\n+      }\n+    }\n+\n+    then:\n+    sortAndAssertTraces(1 + workItems) {\n+      trace(0, 2 + workItems) {\n+        span(0) {\n+          resourceName \"trace-parent\"\n+          operationName \"trace-parent\"\n+          parent()\n+          tags {\n+            \"$Tags.COMPONENT\" \"trace\"\n+            defaultTags()\n+          }\n+        }\n+        span(1) {\n+          resourceName \"publisher-parent\"\n+          operationName \"publisher-parent\"\n+          childOf(span(0))\n+          tags {\n+            defaultTags()\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA==", "bodyText": "I assume there's no way to construct without the builder that might bypass the instrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414830924", "createdAt": "2020-04-24T20:03:45Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -16,44 +15,36 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultWebClientInstrumentation extends Instrumenter.Default {\n+public class WebClientFilterInstrumentation extends Instrumenter.Default {\n \n-  public DefaultWebClientInstrumentation() {\n+  public WebClientFilterInstrumentation() {\n     super(\"spring-webflux\", \"spring-webflux-client\");\n   }\n \n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n     // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.reactive.function.client.ExchangeFunction\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(\n-        named(\"org.springframework.web.reactive.function.client.ExchangeFunction\"));\n+    return hasClassesNamed(\"org.springframework.web.reactive.function.client.WebClient\");\n   }\n \n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(\n+        named(\"org.springframework.web.reactive.function.client.WebClient$Builder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMjcxNA==", "bodyText": "lifted \ud83e\udd41", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414832714", "createdAt": "2020-04-24T20:07:07Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMzg1NA==", "bodyText": "Do we need to put anything back into scope here?  Maybe the span's parent?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414833854", "createdAt": "2020-04-24T20:09:22Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer\n+   * versions of reactor-core have easier way to access context but we want to support older\n+   * versions.\n+   */\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> finishSpanNextOrError(\n+      final AgentSpan span) {\n+    return Operators.lift(\n+        (scannable, subscriber) -> new SpanFinishingSubscriber<>(subscriber, span));\n+  }\n+\n   public static void finishSpanIfPresent(\n       final ServerWebExchange exchange, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) exchange.getAttributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (exchange != null) {\n+      finishSpanIfPresentInAttributes(exchange.getAttributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ServerRequest serverRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) serverRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (serverRequest != null) {\n+      finishSpanIfPresentInAttributes(serverRequest.attributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ClientRequest clientRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) clientRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (clientRequest != null) {\n+      finishSpanIfPresentInAttributes(clientRequest.attributes(), throwable);\n+    }\n+  }\n+\n+  private static void finishSpanIfPresentInAttributes(\n+      final Map<String, Object> attributes, final Throwable throwable) {\n+\n+    final AgentSpan span = (AgentSpan) attributes.remove(SPAN_ATTRIBUTE);\n+    finishSpanIfPresent(span, throwable);\n+  }\n+\n+  static void finishSpanIfPresent(final AgentSpan span, final Throwable throwable) {\n+    if (span != null) {\n+      if (throwable != null) {\n+        span.setError(true);\n+        span.addThrowable(throwable);\n+      }\n+      span.finish();\n+    }\n+  }\n+\n+  public static class SpanFinishingSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+    private final AgentSpan span;\n+    private final Context context;\n+\n+    public SpanFinishingSubscriber(\n+        final CoreSubscriber<? super T> subscriber, final AgentSpan span) {\n+      this.subscriber = subscriber;\n+      this.span = span;\n+      context = subscriber.currentContext().put(AgentSpan.class, span);\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription s) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onSubscribe(s);\n+      }\n+    }\n+\n+    @Override\n+    public void onNext(final T t) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onNext(t);\n+      }\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+      finishSpanIfPresent(span, t);\n+      subscriber.onError(t);\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+      finishSpanIfPresent(span, null);\n+      subscriber.onComplete();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNDgxOA==", "bodyText": "isn't this cheating? seems like this should be reverted so you exercise the instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414834818", "createdAt": "2020-04-24T20:11:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -19,17 +22,22 @@ import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan\n class SpringWebfluxHttpClientTest extends HttpClientTest {\n \n   @Shared\n-  def client = WebClient.builder().build()\n+  WebClient client = WebClient.builder().filter(new WebClientTracingFilter()).build()\n+\n+  @Override\n+  void setupBeforeTests() {\n+    super.setupBeforeTests()\n+    Hooks.onEachOperator(TracingPublishers.getName(), { p -> TracingPublishers.wrap(p) })\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNTA5MA==", "bodyText": "why?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414835090", "createdAt": "2020-04-24T20:11:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -95,8 +103,14 @@ class SpringWebfluxHttpClientTest extends HttpClientTest {\n     false\n   }\n \n+\n   boolean testRemoteConnection() {\n     // FIXME: figure out how to configure timeouts.\n     false\n   }\n+\n+  @Override\n+  boolean testCallbackWithoutParent() {\n+    false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNTUyNw==", "bodyText": "Let's see if we can resolve this...", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414835527", "createdAt": "2020-04-24T20:12:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -450,4 +453,10 @@ abstract class HttpClientTest extends AgentTestRunner {\n     // function is used.  There is no way to stop a test from a derived class hence the flag\n     true\n   }\n+\n+  boolean testCallbackWithoutParent() {\n+    // FIXME: This is a hack to allow disabling the callback without parent test in Spring Webflux\n+    // The problem is that the traces get reported in an inconsistent order depending on the version of webflux in use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzAwODY4", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-401300868", "createdAt": "2020-04-27T20:27:54Z", "commit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNzo1NVrOGM2REQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNzo1NVrOGM2REQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ==", "bodyText": "Not sure how I feel about this...", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416125201", "createdAt": "2020-04-27T20:27:55Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODQxMDk0", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-401841094", "createdAt": "2020-04-28T13:35:54Z", "commit": {"oid": "64127a6542dd05398fd788561d83a38aaf8289f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNTo1NFrOGNUWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNTo1NFrOGNUWaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxODA4OA==", "bodyText": "I suspect this might be causing the netty client test failure but I'm not sure why", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416618088", "createdAt": "2020-04-28T13:35:54Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java", "diffHunk": "@@ -85,7 +86,7 @@ public TraceScope activeScope() {\n     if (scope instanceof TraceScope) {\n       return (TraceScope) scope;\n     } else {\n-      return null;\n+      return AgentTracer.noopTraceScope();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64127a6542dd05398fd788561d83a38aaf8289f6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2289cae23bb46efb515ad537e52dd4ffc6626d0", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a2289cae23bb46efb515ad537e52dd4ffc6626d0", "committedDate": "2020-04-28T15:21:54Z", "message": "Reactor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5800ee7545d9c14e7a9a399e6d3a2a7d2ee33b6d", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5800ee7545d9c14e7a9a399e6d3a2a7d2ee33b6d", "committedDate": "2020-04-28T15:21:54Z", "message": "Lettuce fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cad41113a9f52feda9755c8fb02461a874223cf", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7cad41113a9f52feda9755c8fb02461a874223cf", "committedDate": "2020-04-28T15:21:54Z", "message": "Webflux fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5aa19ad07f753540ba4b8d316fda92cc394753f", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b5aa19ad07f753540ba4b8d316fda92cc394753f", "committedDate": "2020-04-28T15:21:54Z", "message": "Ignore flaky tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e691792f8b6823201996a9619d6227d58a746f", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b6e691792f8b6823201996a9619d6227d58a746f", "committedDate": "2020-04-28T15:21:54Z", "message": "Most of the code review fixes. Just need to fix the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8444432bb7b0b1e9b8dbabcb7546bb014f4bea2b", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8444432bb7b0b1e9b8dbabcb7546bb014f4bea2b", "committedDate": "2020-04-28T15:21:54Z", "message": "Fix callback test in http client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28c4828400a029246f38cecad5d893d015030b8", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a28c4828400a029246f38cecad5d893d015030b8", "committedDate": "2020-04-28T15:21:54Z", "message": "Make test less flaky and fix build on java 7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4700983f73ccc98574c3512991e29a0f3699a4", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/da4700983f73ccc98574c3512991e29a0f3699a4", "committedDate": "2020-04-28T15:21:54Z", "message": "I can't believe how long it took me to find a single line issue..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436c2937f03422c0a61fcb94eccbe1933c4eeefc", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/436c2937f03422c0a61fcb94eccbe1933c4eeefc", "committedDate": "2020-04-28T15:21:54Z", "message": "Verify spans finish in the right order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73a50916f912b85dfcdb71258818969978b9a8e", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e73a50916f912b85dfcdb71258818969978b9a8e", "committedDate": "2020-04-28T15:21:54Z", "message": "Assertion doesn't work on some http clients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01538359cee3c8855e70627d8ed5345829e875be", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/01538359cee3c8855e70627d8ed5345829e875be", "committedDate": "2020-04-28T15:15:32Z", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed"}, "afterCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d206d3be83e1fb4041798736aca3b279f19417bc", "committedDate": "2020-04-28T15:21:54Z", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDgyODg3", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-402082887", "createdAt": "2020-04-28T18:01:43Z", "commit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowMTo0M1rOGNgZ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNjozMVrOGNglcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNTU3NA==", "bodyText": "revert?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416815574", "createdAt": "2020-04-28T18:01:43Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/test/groovy/Netty40ClientTest.groovy", "diffHunk": "@@ -66,7 +66,7 @@ class Netty40ClientTest extends HttpClientTest {\n   boolean testRemoteConnection() {\n     return false\n   }\n-\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNTYzOQ==", "bodyText": "revert?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416815639", "createdAt": "2020-04-28T18:01:51Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "diffHunk": "@@ -76,7 +76,7 @@ class Netty41ClientTest extends HttpClientTest {\n   boolean testRemoteConnection() {\n     return false\n   }\n-\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzczNg==", "bodyText": "please no sleep...  Maybe try blockUntilChildSpansFinished(1) instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416817736", "createdAt": "2020-04-28T18:05:14Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA==", "bodyText": "Why can't this stay?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416818294", "createdAt": "2020-04-28T18:06:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ==", "bodyText": "still needed?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416818545", "createdAt": "2020-04-28T18:06:31Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "committedDate": "2020-04-28T18:22:12Z", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d206d3be83e1fb4041798736aca3b279f19417bc", "committedDate": "2020-04-28T15:21:54Z", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed"}, "afterCommit": {"oid": "915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/915b5f6ad38bf07eb0cadb6ff88d19f3f3ac76e2", "committedDate": "2020-04-28T18:22:12Z", "message": "Attempt to fix the netty 4.0 and 4.1 client tests fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a9d7d95dc61132d7c72e0534d5efe0e0d984d89", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8a9d7d95dc61132d7c72e0534d5efe0e0d984d89", "committedDate": "2020-04-29T16:27:58Z", "message": "Result of over the shoulder with Tyler and some nice long todo messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODYzMTI0", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#pullrequestreview-402863124", "createdAt": "2020-04-29T17:00:47Z", "commit": {"oid": "8a9d7d95dc61132d7c72e0534d5efe0e0d984d89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}