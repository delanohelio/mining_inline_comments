{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDI0OTY0", "number": 2113, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0Njo1MFrOE9tM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNjoyMzo1N1rOE-M94g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM5MTU1OnYy", "diffSide": "LEFT", "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0Njo1MFrOH6ibtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0Njo1MFrOH6ibtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzYwNg==", "bodyText": "this use case no longer exists, and hasn't existed since April/May", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531143606", "createdAt": "2020-11-26T16:46:50Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "diffHunk": "@@ -31,23 +31,6 @@ class TagInterceptorTest extends DDSpecification {\n     span = SpanFactory.newSpanOf(tracer)\n   }\n \n-  def \"adding span personalisation using Decorators\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfc4a253ed73ea18ac0aa927eefca613a8ba787a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM5MjMxOnYy", "diffSide": "LEFT", "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0NzowOFrOH6icMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0NzowOFrOH6icMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MzczMA==", "bodyText": "now we add the splitting tag into a set", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531143730", "createdAt": "2020-11-26T16:47:08Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "diffHunk": "@@ -174,16 +157,14 @@ class TagInterceptorTest extends DDSpecification {\n   }\n \n   static createSplittingTracer(tag) {\n-    def tracer = CoreTracer.builder()\n+    return CoreTracer.builder()\n       .serviceName(\"my-service\")\n       .writer(new LoggingWriter())\n       .sampler(new AllSampler())\n-      .build()\n-\n     // equivalent to split-by-tags: tag\n-    tracer.addTagInterceptor(new ServiceNameTagInterceptor(tag, true))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfc4a253ed73ea18ac0aa927eefca613a8ba787a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM5NDA0OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0NzozOFrOH6idIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0NzozOFrOH6idIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0Mzk2OQ==", "bodyText": "maintain legacy names (difficult to respect the old names now though)", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531143969", "createdAt": "2020-11-26T16:47:38Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "diffHunk": "@@ -434,16 +415,16 @@ class TagInterceptorTest extends DDSpecification {\n     span.getServiceName() == enabled ? \"other-service\" : \"some-service\"\n \n     where:\n-    decorator                                               | enabled\n-    ServiceNameTagInterceptor.getSimpleName().toLowerCase() | true\n-    ServiceNameTagInterceptor.getSimpleName()               | true\n-    ServiceNameTagInterceptor.getSimpleName().toLowerCase() | false\n-    ServiceNameTagInterceptor.getSimpleName()               | false\n+    decorator                   | enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfc4a253ed73ea18ac0aa927eefca613a8ba787a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc1NTQ2OnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/mongo/driver-3.1/src/test/groovy/MongoClientTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToxODoyNFrOH6lq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToxODoyNFrOH6lq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5NjY1NA==", "bodyText": "This just duplicates data and mongo queries can be very large", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531196654", "createdAt": "2020-11-26T19:18:24Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/mongo/driver-3.1/src/test/groovy/MongoClientTest.groovy", "diffHunk": "@@ -251,9 +251,6 @@ class MongoClientTest extends MongoBaseTest {\n         \"$Tags.PEER_HOSTNAME\" \"localhost\"\n         \"$Tags.PEER_HOST_IPV4\" \"127.0.0.1\"\n         \"$Tags.PEER_PORT\" port\n-        \"$Tags.DB_STATEMENT\" {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a360408739a9af75430e492c7cf12cf3e44c8d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc1OTA4OnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/mongo/driver-4/src/test/groovy/Mongo4ClientTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToxOTo1MVrOH6lsyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToxOTo1MVrOH6lsyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5NzEyOA==", "bodyText": "Removing data duplication", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531197128", "createdAt": "2020-11-26T19:19:51Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/src/test/groovy/Mongo4ClientTest.groovy", "diffHunk": "@@ -246,9 +246,6 @@ class Mongo4ClientTest extends MongoBaseTest {\n         \"$Tags.PEER_HOSTNAME\" \"localhost\"\n         \"$Tags.PEER_HOST_IPV4\" \"127.0.0.1\"\n         \"$Tags.PEER_PORT\" port\n-        \"$Tags.DB_STATEMENT\" {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc2MjMxOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyMToyMFrOH6luhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxMTowMVrOH64a1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5NzU3NA==", "bodyText": "These names all derive from the simple class names which were used as config at some point in the past. As to whether these are really used, we'll never know, but the names have been changed without notice or mention in release notes in the past, so this configurability may or may not be important to maintain.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531197574", "createdAt": "2020-11-26T19:21:20Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package datadog.trace.core.taginterceptor;\n+\n+import datadog.trace.api.Config;\n+\n+public class RuleFlags {\n+\n+  public enum Feature {\n+    RESOURCE_NAME(\"ResourceNameRule\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMDk5Mw==", "bodyText": "Add a comment explaining that in the file?", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531420993", "createdAt": "2020-11-27T07:22:18Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package datadog.trace.core.taginterceptor;\n+\n+import datadog.trace.api.Config;\n+\n+public class RuleFlags {\n+\n+  public enum Feature {\n+    RESOURCE_NAME(\"ResourceNameRule\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5NzU3NA=="}, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwMzgyOA==", "bodyText": "Done", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531503828", "createdAt": "2020-11-27T10:11:01Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package datadog.trace.core.taginterceptor;\n+\n+import datadog.trace.api.Config;\n+\n+public class RuleFlags {\n+\n+  public enum Feature {\n+    RESOURCE_NAME(\"ResourceNameRule\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5NzU3NA=="}, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc2NDQxOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/TagInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyMjoyMFrOH6lvlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoyMzoyNFrOH6zYqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5Nzg0Ng==", "bodyText": "All tag interception logic is now encapsulated in this class. If you want to know what will happen to a tag, step away from the debugger and just look here...", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531197846", "createdAt": "2020-11-26T19:22:20Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/TagInterceptor.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package datadog.trace.core.taginterceptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMTM1NA==", "bodyText": "Nice", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531421354", "createdAt": "2020-11-27T07:23:24Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/TagInterceptor.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package datadog.trace.core.taginterceptor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5Nzg0Ng=="}, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc2NTQzOnYy", "diffSide": "LEFT", "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyMjo1MVrOH6lwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyMjo1MVrOH6lwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5Nzk4OA==", "bodyText": "This is now handled by the mongo decorators", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531197988", "createdAt": "2020-11-26T19:22:51Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/core/taginterceptor/TagInterceptorTest.groovy", "diffHunk": "@@ -336,23 +316,6 @@ class TagInterceptorTest extends DDSpecification {\n     DDTags.MANUAL_DROP | \"asdf\"  | null\n   }\n \n-  def \"DBStatementAsResource should not interact on Mongo queries\"() {\n-    when:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc3MDQ3OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyNToxNFrOH6ly4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyNToxNFrOH6ly4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5ODY5MQ==", "bodyText": "This will probably have a decent impact on performance, because a lot of the time no lock needs to be acquired. Previously, with the hybrid tag interceptor and rules based approach, we would have to contend for the locks, possibly find some space in the map to temporarily store the tag value, and only then decide that the tag value should really have been a field all along, or that the tag value is useless.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531198691", "createdAt": "2020-11-26T19:25:14Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -357,26 +351,14 @@ public void setMetric(final CharSequence key, final Number value) {\n    * @param value the value of the tag. tags with null values are ignored.\n    */\n   public void setTag(final String tag, final Object value) {\n-    // intercept tags we represent as fields but used to store in a weakly typed map\n-    switch (tag) {\n-      case SPAN_TYPE:\n-        if (value instanceof CharSequence) {\n-          this.spanType = (CharSequence) value;\n-        }\n-        break;\n-      case ANALYTICS_SAMPLE_RATE:\n-        Number analyticsSampleRate = getOrTryParse(value);\n-        if (null != analyticsSampleRate) {\n-          setMetric(ANALYTICS_SAMPLE_RATE, analyticsSampleRate);\n-        }\n-        break;\n-      case Tags.ERROR:\n-        setErrorFlag(Boolean.TRUE.equals(value) || Boolean.parseBoolean(String.valueOf(value)));\n-        break;\n-      default:\n-        synchronized (unsafeTags) {\n-          unsafeSetTag(tag, value);\n-        }\n+    if (null == value || \"\".equals(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTc3NDk2OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOToyNzoxOVrOH6l1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoxODowOFrOH6zSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTM1MA==", "bodyText": "Unrelated to this PR, but what's below is incredibly wasteful:\n      context.setAllTags(defaultSpanTags);\n      context.setAllTags(tags);\n      context.setAllTags(coreTags);\n      context.setAllTags(rootSpanTags);\nWe're passing effectively constant values through tag interceptors over and over again here.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531199350", "createdAt": "2020-11-26T19:27:19Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -674,30 +646,14 @@ public CoreSpanBuilder asChildOf(final AgentSpan agentSpan) {\n \n     @Override\n     public CoreSpanBuilder withTag(final String tag, final Object value) {\n-      switch (tag) {\n-        case DDTags.ANALYTICS_SAMPLE_RATE:\n-          analyticsSampleRate = getOrTryParse(value);\n-          break;\n-        case Tags.ERROR:\n-          if (Boolean.TRUE.equals(value) || Boolean.parseBoolean(String.valueOf(value))) {\n-            return withErrorFlag();\n-          }\n-          break;\n-        case DDTags.SPAN_TYPE:\n-          if (value instanceof CharSequence) {\n-            return withSpanType((CharSequence) value);\n-          }\n-          break;\n-        default:\n-          Map<String, Object> tagMap = tags;\n-          if (tagMap == null) {\n-            tags = tagMap = new LinkedHashMap<>(); // Insertion order is important\n-          }\n-          if (value == null || (value instanceof String && ((String) value).isEmpty())) {\n-            tagMap.remove(tag);\n-          } else {\n-            tagMap.put(tag, value);\n-          }\n+      Map<String, Object> tagMap = tags;\n+      if (tagMap == null) {\n+        tags = tagMap = new LinkedHashMap<>(); // Insertion order is important\n+      }\n+      if (value == null || (value instanceof String && ((String) value).isEmpty())) {\n+        tagMap.remove(tag);\n+      } else {\n+        tagMap.put(tag, value);\n       }\n       return this;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxOTY3MA==", "bodyText": "Yes indeed. The whole builder mechanism needs more cleanup.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531419670", "createdAt": "2020-11-27T07:18:08Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -674,30 +646,14 @@ public CoreSpanBuilder asChildOf(final AgentSpan agentSpan) {\n \n     @Override\n     public CoreSpanBuilder withTag(final String tag, final Object value) {\n-      switch (tag) {\n-        case DDTags.ANALYTICS_SAMPLE_RATE:\n-          analyticsSampleRate = getOrTryParse(value);\n-          break;\n-        case Tags.ERROR:\n-          if (Boolean.TRUE.equals(value) || Boolean.parseBoolean(String.valueOf(value))) {\n-            return withErrorFlag();\n-          }\n-          break;\n-        case DDTags.SPAN_TYPE:\n-          if (value instanceof CharSequence) {\n-            return withSpanType((CharSequence) value);\n-          }\n-          break;\n-        default:\n-          Map<String, Object> tagMap = tags;\n-          if (tagMap == null) {\n-            tags = tagMap = new LinkedHashMap<>(); // Insertion order is important\n-          }\n-          if (value == null || (value instanceof String && ((String) value).isEmpty())) {\n-            tagMap.remove(tag);\n-          } else {\n-            tagMap.put(tag, value);\n-          }\n+      Map<String, Object> tagMap = tags;\n+      if (tagMap == null) {\n+        tags = tagMap = new LinkedHashMap<>(); // Insertion order is important\n+      }\n+      if (value == null || (value instanceof String && ((String) value).isEmpty())) {\n+        tagMap.remove(tag);\n+      } else {\n+        tagMap.put(tag, value);\n       }\n       return this;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTM1MA=="}, "originalCommit": {"oid": "d6e5757396a57497426d8e3ec9c430082fbcafbd"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzI2MjcwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoyNjozMlrOH6zczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Mjo1M1rOH61dmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQxNA==", "bodyText": "Is there anything in the backend that relies on this tag being set?", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531422414", "createdAt": "2020-11-27T07:26:32Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -56,7 +56,7 @@ public AgentSpan onConnection(final AgentSpan span, final CONNECTION connection)\n \n   public AgentSpan onStatement(final AgentSpan span, final CharSequence statement) {\n     assert span != null;\n-    span.setTag(Tags.DB_STATEMENT, statement);\n+    span.setResourceName(statement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d5ba0aaa18d6ca55884b8b48eff1a1fc8e7c8f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTQ3Nw==", "bodyText": "We were removing it before sending for all but Mongo. I will find out if Mongo spans need the statement set.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531441477", "createdAt": "2020-11-27T08:14:25Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -56,7 +56,7 @@ public AgentSpan onConnection(final AgentSpan span, final CONNECTION connection)\n \n   public AgentSpan onStatement(final AgentSpan span, final CharSequence statement) {\n     assert span != null;\n-    span.setTag(Tags.DB_STATEMENT, statement);\n+    span.setResourceName(statement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQxNA=="}, "originalCommit": {"oid": "27d5ba0aaa18d6ca55884b8b48eff1a1fc8e7c8f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTM4Ng==", "bodyText": "I got confirmation this is not required in the backend or the agent. It might be an historical user preference.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531455386", "createdAt": "2020-11-27T08:42:53Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/DatabaseClientDecorator.java", "diffHunk": "@@ -56,7 +56,7 @@ public AgentSpan onConnection(final AgentSpan span, final CONNECTION connection)\n \n   public AgentSpan onStatement(final AgentSpan span, final CharSequence statement) {\n     assert span != null;\n-    span.setTag(Tags.DB_STATEMENT, statement);\n+    span.setResourceName(statement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQxNA=="}, "originalCommit": {"oid": "27d5ba0aaa18d6ca55884b8b48eff1a1fc8e7c8f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjU5NjE4OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNjoyMzo1N1rOH7SxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwOToxNzo0OFrOH7x-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNTYwOA==", "bodyText": "BitSet or even just byte with masks, since we have only 7 legacy names", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r531935608", "createdAt": "2020-11-28T06:23:57Z", "author": {"login": "lpriima"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package datadog.trace.core.taginterceptor;\n+\n+import datadog.trace.api.Config;\n+\n+public class RuleFlags {\n+\n+  public enum Feature {\n+    // These names all derive from the simple class names which\n+    // were exposed as config at some point in the past.\n+    RESOURCE_NAME(\"ResourceNameRule\"),\n+    DB_STATEMENT(\"DBStatementRule\"),\n+    FORCE_MANUAL_DROP(\"ForceManualDropTagInterceptor\"),\n+    FORCE_MANUAL_KEEP(\"ForceManualKeepTagInterceptor\"),\n+    PEER_SERVICE(\"PeerServiceTagInterceptor\"),\n+    SERVICE_NAME(\"ServiceNameTagInterceptor\"),\n+    SERVLET_CONTEXT(\"ServletContextTagInterceptor\");\n+\n+    private final String name;\n+\n+    Feature(String name) {\n+      this.name = name;\n+    }\n+  }\n+\n+  private final boolean[] flags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6cb0f89ed5d1c7d1657b62defd9ac0a47d8f852"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ0Njg5OA==", "bodyText": "Actually, if we used a BitSet it would take up quite a bit more space, if that's what we care about, because it uses long[] as its storage and has an int and a boolean field. We could use a byte, but would have to change it if we ever added two more flags. I think boolean[] is probably the most obvious choice here.", "url": "https://github.com/DataDog/dd-trace-java/pull/2113#discussion_r532446898", "createdAt": "2020-11-30T09:17:48Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/taginterceptor/RuleFlags.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package datadog.trace.core.taginterceptor;\n+\n+import datadog.trace.api.Config;\n+\n+public class RuleFlags {\n+\n+  public enum Feature {\n+    // These names all derive from the simple class names which\n+    // were exposed as config at some point in the past.\n+    RESOURCE_NAME(\"ResourceNameRule\"),\n+    DB_STATEMENT(\"DBStatementRule\"),\n+    FORCE_MANUAL_DROP(\"ForceManualDropTagInterceptor\"),\n+    FORCE_MANUAL_KEEP(\"ForceManualKeepTagInterceptor\"),\n+    PEER_SERVICE(\"PeerServiceTagInterceptor\"),\n+    SERVICE_NAME(\"ServiceNameTagInterceptor\"),\n+    SERVLET_CONTEXT(\"ServletContextTagInterceptor\");\n+\n+    private final String name;\n+\n+    Feature(String name) {\n+      this.name = name;\n+    }\n+  }\n+\n+  private final boolean[] flags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNTYwOA=="}, "originalCommit": {"oid": "e6cb0f89ed5d1c7d1657b62defd9ac0a47d8f852"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4622, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}