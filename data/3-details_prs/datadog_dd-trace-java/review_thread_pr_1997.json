{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODE1ODA1", "number": 1997, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1MzozMVrOEufNbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyNDozMlrOEuo-Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTgxMjk1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1MzozMVrOHi7LIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTo0ODo1M1rOHjGL-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MzEzOQ==", "bodyText": "invokeExact?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506383139", "createdAt": "2020-10-16T12:53:31Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {\n+      try {\n+        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n+        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n+      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+      }\n+    }\n+    WITH_TAG = withTag;\n+    APPLY = apply;\n+  }\n+\n+  public static Request withTag(final Request request, final String key, final String value) {\n+    Request newRequest = request;\n+    if (APPLY != null) {\n+      try {\n+        RequestHeader newHeader = request;\n+        if (WITH_TAG != null) {\n+          newHeader = (RequestHeader) WITH_TAG.invoke(request, key, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27cf65c83fec846e8436d1b65c6e4c1168a47813"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2MzU3OA==", "bodyText": "Absolutely.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506563578", "createdAt": "2020-10-16T15:48:53Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {\n+      try {\n+        MethodType mt = MethodType.methodType(RequestHeader.class, String.class, String.class);\n+        withTag = lookup.findVirtual(RequestHeader.class, \"withTag\", mt);\n+      } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+      }\n+    }\n+    WITH_TAG = withTag;\n+    APPLY = apply;\n+  }\n+\n+  public static Request withTag(final Request request, final String key, final String value) {\n+    Request newRequest = request;\n+    if (APPLY != null) {\n+      try {\n+        RequestHeader newHeader = request;\n+        if (WITH_TAG != null) {\n+          newHeader = (RequestHeader) WITH_TAG.invoke(request, key, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MzEzOQ=="}, "originalCommit": {"oid": "27cf65c83fec846e8436d1b65c6e4c1168a47813"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzM4NzA2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoxNTo1OVrOHjLRBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozMDoyMFrOHj_enw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0Njc5MQ==", "bodyText": "Could you add a comment here when you'd expect the lookup to fail?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506646791", "createdAt": "2020-10-16T18:15:59Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMjIzOQ==", "bodyText": "Sure, I'll add a comment that we actually don't expect this to fail.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507502239", "createdAt": "2020-10-19T06:30:20Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0Njc5MQ=="}, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzM4OTU4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoxNjo0NFrOHjLSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozODowMVrOHj_qRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzE2Mw==", "bodyText": "Would this be better in the catch instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506647163", "createdAt": "2020-10-16T18:16:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNTIyMA==", "bodyText": "It's checking for the opposite, i.e. that we found apply, and only then do we try to find the withTag method.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507505220", "createdAt": "2020-10-19T06:38:01Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {\n+  private static final MethodHandle WITH_TAG;\n+  private static final MethodHandle APPLY;\n+\n+  static {\n+    MethodHandle withTag = null;\n+    MethodHandle apply = null;\n+    MethodHandles.Lookup lookup = MethodHandles.publicLookup();\n+    try {\n+      MethodType mt = MethodType.methodType(Request.class, RequestHeader.class, Object.class);\n+      apply = lookup.findVirtual(Request$.class, \"apply\", mt);\n+    } catch (final NoSuchMethodException | IllegalAccessException ignored) {\n+    }\n+    if (apply != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzE2Mw=="}, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzM5MzQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoxODowNVrOHjLVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozMToxOVrOHj_gSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzgyMg==", "bodyText": "Please add a comment describing the motivation for this class.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506647822", "createdAt": "2020-10-16T18:18:05Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMjY2Nw==", "bodyText": "Absolutely. I'll add comments about the motivation and the control flow.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507502667", "createdAt": "2020-10-19T06:31:19Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/RequestHelper.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package datadog.trace.instrumentation.play24;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.function.Supplier;\n+import play.api.mvc.Headers;\n+import play.api.mvc.Request;\n+import play.api.mvc.Request$;\n+import play.api.mvc.RequestHeader;\n+import scala.Function0;\n+import scala.collection.immutable.Map;\n+import scala.runtime.AbstractFunction0;\n+\n+public class RequestHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0NzgyMg=="}, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQwMTE0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyMDozM1rOHjLZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozOTozNFrOHj_snw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw==", "bodyText": "What impact will this have?  Does this mean that the first action in the filter chain will be the only one with a span?  (Am I thinking about it right as a filter chain?)", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506649077", "createdAt": "2020-10-16T18:20:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java", "diffHunk": "@@ -37,6 +43,9 @@ public static AgentScope onEnter(@Advice.Argument(0) final Request req) {\n \n     final AgentScope scope = activateSpan(span);\n     scope.setAsyncPropagation(true);\n+\n+    req = RequestHelper.withTag(req, \"_dd_HasPlayRequestSpan\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwMzU2OA==", "bodyText": "Yes, it means that we will only add a play.request span automatically once. All the actions will be executed inside that span. I should have added a more descriptive comment in the PR description.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507503568", "createdAt": "2020-10-19T06:33:41Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java", "diffHunk": "@@ -37,6 +43,9 @@ public static AgentScope onEnter(@Advice.Argument(0) final Request req) {\n \n     final AgentScope scope = activateSpan(span);\n     scope.setAsyncPropagation(true);\n+\n+    req = RequestHelper.withTag(req, \"_dd_HasPlayRequestSpan\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw=="}, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNTgyMw==", "bodyText": "Forgot to mention that this is how the span looks in java already , since the java actions are built up in a separate class from the action class that we instrument.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507505823", "createdAt": "2020-10-19T06:39:34Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/play-2.4/src/main/java8/datadog/trace/instrumentation/play24/PlayAdvice.java", "diffHunk": "@@ -37,6 +43,9 @@ public static AgentScope onEnter(@Advice.Argument(0) final Request req) {\n \n     final AgentScope scope = activateSpan(span);\n     scope.setAsyncPropagation(true);\n+\n+    req = RequestHelper.withTag(req, \"_dd_HasPlayRequestSpan\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY0OTA3Nw=="}, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQwNzUyOnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/play-2.4/app/controllers/JController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyMjo0MVrOHjLd0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyMjo0MVrOHjLd0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDA2Nw==", "bodyText": "I assume this is the key distinction here for java (vs the base case)...", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506650067", "createdAt": "2020-10-16T18:22:41Z", "author": {"login": "tylerbenson"}, "path": "dd-smoke-tests/play-2.4/app/controllers/JController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package controllers;\n+\n+import actions.*;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+import io.opentracing.util.GlobalTracer;\n+import javax.inject.Inject;\n+import play.Configuration;\n+import play.libs.F.*;\n+import play.libs.ws.*;\n+import play.mvc.*;\n+import play.mvc.With;\n+\n+public class JController extends Controller {\n+\n+  private final WSClient ws;\n+  private final String clientRequestBase;\n+\n+  @Inject\n+  public JController(WSClient ws, Configuration configuration) {\n+    this.ws = ws;\n+    this.clientRequestBase =\n+        configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\");\n+  }\n+\n+  @With({Action1.class, Action2.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQxMjY2OnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/play-2.4/app/controllers/SController.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyNDozMlrOHjLhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjozNzozNFrOHj_pjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDkyMg==", "bodyText": "In the java controller, I would assume the actions would be called first followed by the doGet method, but for scala that seems to be opposite.  Does that change the expected controller span resource name?", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r506650922", "createdAt": "2020-10-16T18:24:32Z", "author": {"login": "tylerbenson"}, "path": "dd-smoke-tests/play-2.4/app/controllers/SController.scala", "diffHunk": "@@ -0,0 +1,45 @@\n+package controllers\n+\n+import actions._\n+import io.opentracing.{Scope, Span, Tracer}\n+import io.opentracing.util.GlobalTracer\n+import javax.inject.Inject\n+import play.api.libs.ws._\n+import play.api.mvc._\n+import play.Configuration\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+class SController @Inject()(\n+    executionContext: ExecutionContext,\n+    ws: WSClient,\n+    configuration: Configuration\n+) extends Controller {\n+\n+  private implicit val ec: ExecutionContext = executionContext\n+\n+  private val clientRequestBase =\n+    configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\")\n+\n+  def doGet(id: Option[Int]) =\n+    SAction1 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwNTAzNw==", "bodyText": "So the main difference between scala and java is that action composition is  controlled by annotations in java while it is explicit in scala. The result will be the same. When you call the doGet method, the actions are executed before your own logic.", "url": "https://github.com/DataDog/dd-trace-java/pull/1997#discussion_r507505037", "createdAt": "2020-10-19T06:37:34Z", "author": {"login": "bantonsson"}, "path": "dd-smoke-tests/play-2.4/app/controllers/SController.scala", "diffHunk": "@@ -0,0 +1,45 @@\n+package controllers\n+\n+import actions._\n+import io.opentracing.{Scope, Span, Tracer}\n+import io.opentracing.util.GlobalTracer\n+import javax.inject.Inject\n+import play.api.libs.ws._\n+import play.api.mvc._\n+import play.Configuration\n+import scala.concurrent.{ExecutionContext, Future}\n+\n+class SController @Inject()(\n+    executionContext: ExecutionContext,\n+    ws: WSClient,\n+    configuration: Configuration\n+) extends Controller {\n+\n+  private implicit val ec: ExecutionContext = executionContext\n+\n+  private val clientRequestBase =\n+    configuration.getString(\"client.request.base\", \"http://localhost:0/broken/\")\n+\n+  def doGet(id: Option[Int]) =\n+    SAction1 {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MDkyMg=="}, "originalCommit": {"oid": "676bb5fc6c62416a6ac64a160304c889621d8a8f"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4719, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}