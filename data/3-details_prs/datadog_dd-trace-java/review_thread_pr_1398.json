{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MDI5MzIx", "number": 1398, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMToxNlrOD1aImg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozNjoxMlrOD2t8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzI5MzA2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoxMToxNlrOGK1gyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo0OToyMlrOGLeCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNTY4OQ==", "bodyText": "this could just be [4.0.Final,] or [4.0.Final,5.0]", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r414015689", "createdAt": "2020-04-23T18:11:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+  maxJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"biz.paluch.redis\"\n+    module = \"lettuce\"\n+    versions = \"[4.0.Final,4.5.0.Final]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a07512a021113a6be1f33f5eb0d0dc05ca6da3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTc1Ng==", "bodyText": "Addressed.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r414679756", "createdAt": "2020-04-24T15:49:22Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "diffHunk": "@@ -0,0 +1,35 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+  maxJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"biz.paluch.redis\"\n+    module = \"lettuce\"\n+    versions = \"[4.0.Final,4.5.0.Final]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNTY4OQ=="}, "originalCommit": {"oid": "67a07512a021113a6be1f33f5eb0d0dc05ca6da3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzM0MTQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDoxMToyN1rOGLZmXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo0OTowNFrOGLeCCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwNjk0MQ==", "bodyText": "Do 4.0 and 4.5 have different minimum java versions?", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r414606941", "createdAt": "2020-04-24T14:11:27Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "diffHunk": "@@ -0,0 +1,34 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+  maxJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"biz.paluch.redis\"\n+    module = \"lettuce\"\n+    versions = \"[4.0.Final,4.5.0.Final]\"\n+    assertInverse = true\n+  }\n+}\n+\n+apply from: \"${rootDir}/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.0.Final'\n+  main_java8CompileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.5.0.Final'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f84a94056add5b3d2cb4c08a6c62336cf77d6e1b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTU2MA==", "bodyText": "Addressed.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r414679560", "createdAt": "2020-04-24T15:49:04Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "diffHunk": "@@ -0,0 +1,34 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+  maxJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"biz.paluch.redis\"\n+    module = \"lettuce\"\n+    versions = \"[4.0.Final,4.5.0.Final]\"\n+    assertInverse = true\n+  }\n+}\n+\n+apply from: \"${rootDir}/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.0.Final'\n+  main_java8CompileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.5.0.Final'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwNjk0MQ=="}, "originalCommit": {"oid": "f84a94056add5b3d2cb4c08a6c62336cf77d6e1b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU4NDE2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1OTo1OFrOGLb2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo0ODo1MFrOGLeBSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mzc5Nw==", "bodyText": "Why is this 4.5 but everything else 4.0 (which it should be)?", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r414643797", "createdAt": "2020-04-24T14:59:58Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "diffHunk": "@@ -0,0 +1,34 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+  maxJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"biz.paluch.redis\"\n+    module = \"lettuce\"\n+    versions = \"[4.0.Final,4.5.0.Final]\"\n+    assertInverse = true\n+  }\n+}\n+\n+apply from: \"${rootDir}/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.0.Final'\n+  main_java8CompileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.5.0.Final'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f84a94056add5b3d2cb4c08a6c62336cf77d6e1b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY3OTM3MQ==", "bodyText": "Addressed.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r414679371", "createdAt": "2020-04-24T15:48:50Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/lettuce-4.0.gradle", "diffHunk": "@@ -0,0 +1,34 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+  maxJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"biz.paluch.redis\"\n+    module = \"lettuce\"\n+    versions = \"[4.0.Final,4.5.0.Final]\"\n+    assertInverse = true\n+  }\n+}\n+\n+apply from: \"${rootDir}/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.0.Final'\n+  main_java8CompileOnly group: 'biz.paluch.redis', name: 'lettuce', version: '4.5.0.Final'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mzc5Nw=="}, "originalCommit": {"oid": "f84a94056add5b3d2cb4c08a6c62336cf77d6e1b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njk1NDQ0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/lettuce-4.0/src/test/groovy/LettuceAsyncClientTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyNDoxOFrOGMl5gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyNDoxOFrOGMl5gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NzAyNA==", "bodyText": "Is there any logic that can be shared between the sync/async tests?", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415857024", "createdAt": "2020-04-27T14:24:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/src/test/groovy/LettuceAsyncClientTest.groovy", "diffHunk": "@@ -0,0 +1,542 @@\n+import com.lambdaworks.redis.ClientOptions\n+import com.lambdaworks.redis.RedisClient\n+import com.lambdaworks.redis.RedisFuture\n+import com.lambdaworks.redis.RedisURI\n+import com.lambdaworks.redis.api.StatefulConnection\n+import com.lambdaworks.redis.api.async.RedisAsyncCommands\n+import com.lambdaworks.redis.api.sync.RedisCommands\n+import com.lambdaworks.redis.protocol.AsyncCommand\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.PortUtils\n+import datadog.trace.api.DDSpanTypes\n+import datadog.trace.bootstrap.instrumentation.api.Tags\n+\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+import spock.util.concurrent.AsyncConditions\n+import com.lambdaworks.redis.codec.Utf8StringCodec\n+\n+import java.util.concurrent.CancellationException\n+import java.util.concurrent.TimeUnit\n+import java.util.function.BiConsumer\n+import java.util.function.BiFunction\n+import java.util.function.Consumer\n+import java.util.function.Function\n+\n+import com.lambdaworks.redis.RedisConnectionException\n+\n+import static datadog.trace.instrumentation.lettuce.InstrumentationPoints.AGENT_CRASHING_COMMAND_PREFIX\n+\n+class LettuceAsyncClientTest extends AgentTestRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njk3MDU4OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyNjo1NlrOGMmCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0Nzo0NFrOGMnIZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1OTM2Mw==", "bodyText": "Unless it's important to disambiguate, we've generally dropped the trailing .0 from the version number.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415859363", "createdAt": "2020-04-27T14:26:56Z", "author": {"login": "tylerbenson"}, "path": "settings.gradle", "diffHunk": "@@ -107,6 +107,7 @@ include ':dd-java-agent:instrumentation:jms'\n include ':dd-java-agent:instrumentation:jsp-2.3'\n include ':dd-java-agent:instrumentation:kafka-clients-0.11'\n include ':dd-java-agent:instrumentation:kafka-streams-0.11'\n+include ':dd-java-agent:instrumentation:lettuce-4.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NzIyMw==", "bodyText": "Done.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415877223", "createdAt": "2020-04-27T14:47:44Z", "author": {"login": "richardstartin"}, "path": "settings.gradle", "diffHunk": "@@ -107,6 +107,7 @@ include ':dd-java-agent:instrumentation:jms'\n include ':dd-java-agent:instrumentation:jsp-2.3'\n include ':dd-java-agent:instrumentation:kafka-clients-0.11'\n include ':dd-java-agent:instrumentation:kafka-streams-0.11'\n+include ':dd-java-agent:instrumentation:lettuce-4.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1OTM2Mw=="}, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njk4MzQ0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOToxMVrOGMmKEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo1NDoyOFrOGMnf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MTI2NA==", "bodyText": "This url is now out of date... maybe find the new one?", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415861264", "createdAt": "2020-04-27T14:29:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package datadog.trace.instrumentation.lettuce;\n+\n+import static com.lambdaworks.redis.protocol.CommandKeyword.SEGFAULT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLIENT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLUSTER;\n+import static com.lambdaworks.redis.protocol.CommandType.COMMAND;\n+import static com.lambdaworks.redis.protocol.CommandType.CONFIG;\n+import static com.lambdaworks.redis.protocol.CommandType.DEBUG;\n+import static com.lambdaworks.redis.protocol.CommandType.SCRIPT;\n+import static com.lambdaworks.redis.protocol.CommandType.SHUTDOWN;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.lettuce.LettuceClientDecorator.DECORATE;\n+\n+import com.lambdaworks.redis.RedisURI;\n+import com.lambdaworks.redis.protocol.AsyncCommand;\n+import com.lambdaworks.redis.protocol.CommandType;\n+import com.lambdaworks.redis.protocol.ProtocolKeyword;\n+import com.lambdaworks.redis.protocol.RedisCommand;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+\n+public final class InstrumentationPoints {\n+\n+  private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n+\n+  private static final Set<CommandType> AGENT_CRASHING_COMMANDS =\n+    EnumSet.of(CLIENT, CLUSTER, COMMAND, CONFIG, DEBUG, SCRIPT);\n+\n+  public static final String AGENT_CRASHING_COMMAND_PREFIX = \"COMMAND-NAME:\";\n+\n+  public static AgentScope beforeCommand(RedisCommand<?, ?, ?> command) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onCommand(span, command);\n+    return activateSpan(span, finishSpanEarly(command));\n+  }\n+\n+  public static void afterCommand(RedisCommand<?, ?, ?> command,\n+                                  AgentScope scope,\n+                                  Throwable throwable,\n+                                  AsyncCommand<?, ?, ?> asyncCommand) {\n+      AgentSpan span = scope.span();\n+      if (throwable != null) {\n+        DECORATE.onError(span, throwable);\n+        DECORATE.beforeFinish(span);\n+        span.finish();\n+      } else if (!finishSpanEarly(command)) {\n+        asyncCommand.handleAsync((value, ex) -> {\n+          if (ex instanceof CancellationException) {\n+            span.setTag(\"db.command.cancelled\", true);\n+          } else {\n+            DECORATE.onError(span, ex);\n+          }\n+          DECORATE.beforeFinish(span);\n+          span.finish();\n+          return null;\n+        });\n+      }\n+      scope.close();\n+  }\n+\n+  public static AgentScope beforeConnect(RedisURI redisURI) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, redisURI);\n+    return activateSpan(span, false);\n+  }\n+\n+  public static void afterConnect(AgentScope scope, Throwable throwable) {\n+    AgentSpan span = scope.span();\n+    if (throwable != null) {\n+      DECORATE.onError(span, throwable);\n+      DECORATE.beforeFinish(span);\n+    }\n+    span.finish();\n+    scope.close();\n+  }\n+\n+  /**\n+   * Determines whether a redis command should finish its relevant span early (as soon as tags are\n+   * added and the command is executed) because these commands have no return values/call backs, so\n+   * we must close the span early in order to provide info for the users\n+   *\n+   * @param command\n+   * @return true if finish the span early (the command will not have a return value)\n+   */\n+  public static boolean finishSpanEarly(RedisCommand<?, ?, ?> command) {\n+    ProtocolKeyword keyword = command.getType();\n+    return isNonInstrumentingCommand(keyword) || isNonInstrumentingKeyword(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingCommand(ProtocolKeyword keyword) {\n+    return keyword instanceof CommandType && NON_INSTRUMENTING_COMMANDS.contains(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingKeyword(ProtocolKeyword keyword) {\n+    return keyword == SEGFAULT;\n+  }\n+\n+  // Workaround to keep trace agent from crashing\n+  // Currently the commands in AGENT_CRASHING_COMMANDS_WORDS will crash the trace agent and\n+  // traces with these commands as the resource name will not be processed by the trace agent\n+  // https://github.com/DataDog/datadog-trace-agent/blob/master/quantizer/redis.go#L18 has", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3MjQwNw==", "bodyText": "I looked for it, but couldn't find it, there seems to have been major refactoring here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415872407", "createdAt": "2020-04-27T14:42:14Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package datadog.trace.instrumentation.lettuce;\n+\n+import static com.lambdaworks.redis.protocol.CommandKeyword.SEGFAULT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLIENT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLUSTER;\n+import static com.lambdaworks.redis.protocol.CommandType.COMMAND;\n+import static com.lambdaworks.redis.protocol.CommandType.CONFIG;\n+import static com.lambdaworks.redis.protocol.CommandType.DEBUG;\n+import static com.lambdaworks.redis.protocol.CommandType.SCRIPT;\n+import static com.lambdaworks.redis.protocol.CommandType.SHUTDOWN;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.lettuce.LettuceClientDecorator.DECORATE;\n+\n+import com.lambdaworks.redis.RedisURI;\n+import com.lambdaworks.redis.protocol.AsyncCommand;\n+import com.lambdaworks.redis.protocol.CommandType;\n+import com.lambdaworks.redis.protocol.ProtocolKeyword;\n+import com.lambdaworks.redis.protocol.RedisCommand;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+\n+public final class InstrumentationPoints {\n+\n+  private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n+\n+  private static final Set<CommandType> AGENT_CRASHING_COMMANDS =\n+    EnumSet.of(CLIENT, CLUSTER, COMMAND, CONFIG, DEBUG, SCRIPT);\n+\n+  public static final String AGENT_CRASHING_COMMAND_PREFIX = \"COMMAND-NAME:\";\n+\n+  public static AgentScope beforeCommand(RedisCommand<?, ?, ?> command) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onCommand(span, command);\n+    return activateSpan(span, finishSpanEarly(command));\n+  }\n+\n+  public static void afterCommand(RedisCommand<?, ?, ?> command,\n+                                  AgentScope scope,\n+                                  Throwable throwable,\n+                                  AsyncCommand<?, ?, ?> asyncCommand) {\n+      AgentSpan span = scope.span();\n+      if (throwable != null) {\n+        DECORATE.onError(span, throwable);\n+        DECORATE.beforeFinish(span);\n+        span.finish();\n+      } else if (!finishSpanEarly(command)) {\n+        asyncCommand.handleAsync((value, ex) -> {\n+          if (ex instanceof CancellationException) {\n+            span.setTag(\"db.command.cancelled\", true);\n+          } else {\n+            DECORATE.onError(span, ex);\n+          }\n+          DECORATE.beforeFinish(span);\n+          span.finish();\n+          return null;\n+        });\n+      }\n+      scope.close();\n+  }\n+\n+  public static AgentScope beforeConnect(RedisURI redisURI) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, redisURI);\n+    return activateSpan(span, false);\n+  }\n+\n+  public static void afterConnect(AgentScope scope, Throwable throwable) {\n+    AgentSpan span = scope.span();\n+    if (throwable != null) {\n+      DECORATE.onError(span, throwable);\n+      DECORATE.beforeFinish(span);\n+    }\n+    span.finish();\n+    scope.close();\n+  }\n+\n+  /**\n+   * Determines whether a redis command should finish its relevant span early (as soon as tags are\n+   * added and the command is executed) because these commands have no return values/call backs, so\n+   * we must close the span early in order to provide info for the users\n+   *\n+   * @param command\n+   * @return true if finish the span early (the command will not have a return value)\n+   */\n+  public static boolean finishSpanEarly(RedisCommand<?, ?, ?> command) {\n+    ProtocolKeyword keyword = command.getType();\n+    return isNonInstrumentingCommand(keyword) || isNonInstrumentingKeyword(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingCommand(ProtocolKeyword keyword) {\n+    return keyword instanceof CommandType && NON_INSTRUMENTING_COMMANDS.contains(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingKeyword(ProtocolKeyword keyword) {\n+    return keyword == SEGFAULT;\n+  }\n+\n+  // Workaround to keep trace agent from crashing\n+  // Currently the commands in AGENT_CRASHING_COMMANDS_WORDS will crash the trace agent and\n+  // traces with these commands as the resource name will not be processed by the trace agent\n+  // https://github.com/DataDog/datadog-trace-agent/blob/master/quantizer/redis.go#L18 has", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MTI2NA=="}, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NzkyNw==", "bodyText": "I have removed the link but will follow up to see if this logic can actually just be removed in another PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415877927", "createdAt": "2020-04-27T14:48:31Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package datadog.trace.instrumentation.lettuce;\n+\n+import static com.lambdaworks.redis.protocol.CommandKeyword.SEGFAULT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLIENT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLUSTER;\n+import static com.lambdaworks.redis.protocol.CommandType.COMMAND;\n+import static com.lambdaworks.redis.protocol.CommandType.CONFIG;\n+import static com.lambdaworks.redis.protocol.CommandType.DEBUG;\n+import static com.lambdaworks.redis.protocol.CommandType.SCRIPT;\n+import static com.lambdaworks.redis.protocol.CommandType.SHUTDOWN;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.lettuce.LettuceClientDecorator.DECORATE;\n+\n+import com.lambdaworks.redis.RedisURI;\n+import com.lambdaworks.redis.protocol.AsyncCommand;\n+import com.lambdaworks.redis.protocol.CommandType;\n+import com.lambdaworks.redis.protocol.ProtocolKeyword;\n+import com.lambdaworks.redis.protocol.RedisCommand;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+\n+public final class InstrumentationPoints {\n+\n+  private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n+\n+  private static final Set<CommandType> AGENT_CRASHING_COMMANDS =\n+    EnumSet.of(CLIENT, CLUSTER, COMMAND, CONFIG, DEBUG, SCRIPT);\n+\n+  public static final String AGENT_CRASHING_COMMAND_PREFIX = \"COMMAND-NAME:\";\n+\n+  public static AgentScope beforeCommand(RedisCommand<?, ?, ?> command) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onCommand(span, command);\n+    return activateSpan(span, finishSpanEarly(command));\n+  }\n+\n+  public static void afterCommand(RedisCommand<?, ?, ?> command,\n+                                  AgentScope scope,\n+                                  Throwable throwable,\n+                                  AsyncCommand<?, ?, ?> asyncCommand) {\n+      AgentSpan span = scope.span();\n+      if (throwable != null) {\n+        DECORATE.onError(span, throwable);\n+        DECORATE.beforeFinish(span);\n+        span.finish();\n+      } else if (!finishSpanEarly(command)) {\n+        asyncCommand.handleAsync((value, ex) -> {\n+          if (ex instanceof CancellationException) {\n+            span.setTag(\"db.command.cancelled\", true);\n+          } else {\n+            DECORATE.onError(span, ex);\n+          }\n+          DECORATE.beforeFinish(span);\n+          span.finish();\n+          return null;\n+        });\n+      }\n+      scope.close();\n+  }\n+\n+  public static AgentScope beforeConnect(RedisURI redisURI) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, redisURI);\n+    return activateSpan(span, false);\n+  }\n+\n+  public static void afterConnect(AgentScope scope, Throwable throwable) {\n+    AgentSpan span = scope.span();\n+    if (throwable != null) {\n+      DECORATE.onError(span, throwable);\n+      DECORATE.beforeFinish(span);\n+    }\n+    span.finish();\n+    scope.close();\n+  }\n+\n+  /**\n+   * Determines whether a redis command should finish its relevant span early (as soon as tags are\n+   * added and the command is executed) because these commands have no return values/call backs, so\n+   * we must close the span early in order to provide info for the users\n+   *\n+   * @param command\n+   * @return true if finish the span early (the command will not have a return value)\n+   */\n+  public static boolean finishSpanEarly(RedisCommand<?, ?, ?> command) {\n+    ProtocolKeyword keyword = command.getType();\n+    return isNonInstrumentingCommand(keyword) || isNonInstrumentingKeyword(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingCommand(ProtocolKeyword keyword) {\n+    return keyword instanceof CommandType && NON_INSTRUMENTING_COMMANDS.contains(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingKeyword(ProtocolKeyword keyword) {\n+    return keyword == SEGFAULT;\n+  }\n+\n+  // Workaround to keep trace agent from crashing\n+  // Currently the commands in AGENT_CRASHING_COMMANDS_WORDS will crash the trace agent and\n+  // traces with these commands as the resource name will not be processed by the trace agent\n+  // https://github.com/DataDog/datadog-trace-agent/blob/master/quantizer/redis.go#L18 has", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MTI2NA=="}, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4MzI1NQ==", "bodyText": "probably this: https://github.com/DataDog/datadog-trace-agent/blob/c56f4c62b8656b3e8fd2c80058fffd0ec6052374/quantizer/redis.go#L18 but was moved to here: https://github.com/DataDog/datadog-agent/blob/1c76b8381a195a0b0f629011a6225e936fe1d37a/pkg/trace/obfuscate/redis.go", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415883255", "createdAt": "2020-04-27T14:54:28Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package datadog.trace.instrumentation.lettuce;\n+\n+import static com.lambdaworks.redis.protocol.CommandKeyword.SEGFAULT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLIENT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLUSTER;\n+import static com.lambdaworks.redis.protocol.CommandType.COMMAND;\n+import static com.lambdaworks.redis.protocol.CommandType.CONFIG;\n+import static com.lambdaworks.redis.protocol.CommandType.DEBUG;\n+import static com.lambdaworks.redis.protocol.CommandType.SCRIPT;\n+import static com.lambdaworks.redis.protocol.CommandType.SHUTDOWN;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.lettuce.LettuceClientDecorator.DECORATE;\n+\n+import com.lambdaworks.redis.RedisURI;\n+import com.lambdaworks.redis.protocol.AsyncCommand;\n+import com.lambdaworks.redis.protocol.CommandType;\n+import com.lambdaworks.redis.protocol.ProtocolKeyword;\n+import com.lambdaworks.redis.protocol.RedisCommand;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+\n+public final class InstrumentationPoints {\n+\n+  private static final Set<CommandType> NON_INSTRUMENTING_COMMANDS = EnumSet.of(SHUTDOWN, DEBUG);\n+\n+  private static final Set<CommandType> AGENT_CRASHING_COMMANDS =\n+    EnumSet.of(CLIENT, CLUSTER, COMMAND, CONFIG, DEBUG, SCRIPT);\n+\n+  public static final String AGENT_CRASHING_COMMAND_PREFIX = \"COMMAND-NAME:\";\n+\n+  public static AgentScope beforeCommand(RedisCommand<?, ?, ?> command) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onCommand(span, command);\n+    return activateSpan(span, finishSpanEarly(command));\n+  }\n+\n+  public static void afterCommand(RedisCommand<?, ?, ?> command,\n+                                  AgentScope scope,\n+                                  Throwable throwable,\n+                                  AsyncCommand<?, ?, ?> asyncCommand) {\n+      AgentSpan span = scope.span();\n+      if (throwable != null) {\n+        DECORATE.onError(span, throwable);\n+        DECORATE.beforeFinish(span);\n+        span.finish();\n+      } else if (!finishSpanEarly(command)) {\n+        asyncCommand.handleAsync((value, ex) -> {\n+          if (ex instanceof CancellationException) {\n+            span.setTag(\"db.command.cancelled\", true);\n+          } else {\n+            DECORATE.onError(span, ex);\n+          }\n+          DECORATE.beforeFinish(span);\n+          span.finish();\n+          return null;\n+        });\n+      }\n+      scope.close();\n+  }\n+\n+  public static AgentScope beforeConnect(RedisURI redisURI) {\n+    AgentSpan span = startSpan(\"redis.query\");\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, redisURI);\n+    return activateSpan(span, false);\n+  }\n+\n+  public static void afterConnect(AgentScope scope, Throwable throwable) {\n+    AgentSpan span = scope.span();\n+    if (throwable != null) {\n+      DECORATE.onError(span, throwable);\n+      DECORATE.beforeFinish(span);\n+    }\n+    span.finish();\n+    scope.close();\n+  }\n+\n+  /**\n+   * Determines whether a redis command should finish its relevant span early (as soon as tags are\n+   * added and the command is executed) because these commands have no return values/call backs, so\n+   * we must close the span early in order to provide info for the users\n+   *\n+   * @param command\n+   * @return true if finish the span early (the command will not have a return value)\n+   */\n+  public static boolean finishSpanEarly(RedisCommand<?, ?, ?> command) {\n+    ProtocolKeyword keyword = command.getType();\n+    return isNonInstrumentingCommand(keyword) || isNonInstrumentingKeyword(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingCommand(ProtocolKeyword keyword) {\n+    return keyword instanceof CommandType && NON_INSTRUMENTING_COMMANDS.contains(keyword);\n+  }\n+\n+  private static boolean isNonInstrumentingKeyword(ProtocolKeyword keyword) {\n+    return keyword == SEGFAULT;\n+  }\n+\n+  // Workaround to keep trace agent from crashing\n+  // Currently the commands in AGENT_CRASHING_COMMANDS_WORDS will crash the trace agent and\n+  // traces with these commands as the resource name will not be processed by the trace agent\n+  // https://github.com/DataDog/datadog-trace-agent/blob/master/quantizer/redis.go#L18 has", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MTI2NA=="}, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzAyNDIwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozNjoxMlrOGMmhow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozNjoxMlrOGMmhow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2NzI5OQ==", "bodyText": "I think I'd prefer if this logic was in either the advice classes or the decorator, but I'm also fine leaving it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1398#discussion_r415867299", "createdAt": "2020-04-27T14:36:12Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/lettuce-4.0/src/main/java8/datadog/trace/instrumentation/lettuce/InstrumentationPoints.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package datadog.trace.instrumentation.lettuce;\n+\n+import static com.lambdaworks.redis.protocol.CommandKeyword.SEGFAULT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLIENT;\n+import static com.lambdaworks.redis.protocol.CommandType.CLUSTER;\n+import static com.lambdaworks.redis.protocol.CommandType.COMMAND;\n+import static com.lambdaworks.redis.protocol.CommandType.CONFIG;\n+import static com.lambdaworks.redis.protocol.CommandType.DEBUG;\n+import static com.lambdaworks.redis.protocol.CommandType.SCRIPT;\n+import static com.lambdaworks.redis.protocol.CommandType.SHUTDOWN;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.lettuce.LettuceClientDecorator.DECORATE;\n+\n+import com.lambdaworks.redis.RedisURI;\n+import com.lambdaworks.redis.protocol.AsyncCommand;\n+import com.lambdaworks.redis.protocol.CommandType;\n+import com.lambdaworks.redis.protocol.ProtocolKeyword;\n+import com.lambdaworks.redis.protocol.RedisCommand;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+import java.util.EnumSet;\n+import java.util.Set;\n+import java.util.concurrent.CancellationException;\n+\n+public final class InstrumentationPoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d158590ab781e75cb9098ee9d25dc062c00a52ae"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 263, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}