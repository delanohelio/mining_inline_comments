{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTg5NDY1", "number": 1360, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToyODoyM1rODwiWcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMDo1MFrODxW8aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjIxMDQyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/HandlerMappingResourceNameFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToyODoyM1rOGDmYYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozMzowMFrOGDmiMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNzc0Nw==", "bodyText": "I guess this doesn't have to implement Filter since it's not being used as one, but since we don't have access to the functional interfaces there doesn't really seem to be a better type in my mind", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406427747", "createdAt": "2020-04-09T19:28:23Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/HandlerMappingResourceNameFilter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.springweb;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springweb.SpringWebHttpServerDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import org.springframework.web.servlet.HandlerExecutionChain;\n+import org.springframework.web.servlet.HandlerMapping;\n+\n+public class HandlerMappingResourceNameFilter implements Filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDI1OQ==", "bodyText": "Yeah, that was my thought also...  If there's a better generic interface that takes a single argument I'd be happy to use that instead.", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406430259", "createdAt": "2020-04-09T19:33:00Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/HandlerMappingResourceNameFilter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.springweb;\n+\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.springweb.SpringWebHttpServerDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import org.springframework.web.servlet.HandlerExecutionChain;\n+import org.springframework.web.servlet.HandlerMapping;\n+\n+public class HandlerMappingResourceNameFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNzc0Nw=="}, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTE5NTI0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoxMzozNVrOGEB4_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODozMzo1M1rOGFbvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3ODQ2Mg==", "bodyText": "Do we want log here?  Add a health metric?", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406878462", "createdAt": "2020-04-10T18:13:35Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "diffHunk": "@@ -58,12 +61,32 @@ protected Integer status(final HttpServletResponse httpServletResponse) {\n   public AgentSpan onRequest(final AgentSpan span, final HttpServletRequest request) {\n     assert span != null;\n     if (request != null) {\n-      span.setTag(\"servlet.context\", request.getContextPath());\n       span.setTag(\"servlet.path\", request.getServletPath());\n+      span.setTag(\"servlet.context\", request.getContextPath());\n+      onContext(span, request, request.getServletContext());\n     }\n     return super.onRequest(span, request);\n   }\n \n+  /**\n+   * This method executes the filter created by\n+   * datadog.trace.instrumentation.springweb.DispatcherServletInstrumentation$HandlerMappingAdvice.\n+   * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n+   * chain.\n+   */\n+  private void onContext(\n+      final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n+    final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n+    if (attribute instanceof Filter) {\n+      final Filter filter = (Filter) attribute;\n+      try {\n+        request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n+        filter.doFilter(request, null, null);\n+      } catch (final IOException | ServletException e) {\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDYzNw==", "bodyText": "I added a log statement, even though the exception is never thrown.  If we had a better shared interface we could avoid the try/catch (filter doesn't actually need to implement the Filter interface).", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r408350637", "createdAt": "2020-04-14T18:33:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "diffHunk": "@@ -58,12 +61,32 @@ protected Integer status(final HttpServletResponse httpServletResponse) {\n   public AgentSpan onRequest(final AgentSpan span, final HttpServletRequest request) {\n     assert span != null;\n     if (request != null) {\n-      span.setTag(\"servlet.context\", request.getContextPath());\n       span.setTag(\"servlet.path\", request.getServletPath());\n+      span.setTag(\"servlet.context\", request.getContextPath());\n+      onContext(span, request, request.getServletContext());\n     }\n     return super.onRequest(span, request);\n   }\n \n+  /**\n+   * This method executes the filter created by\n+   * datadog.trace.instrumentation.springweb.DispatcherServletInstrumentation$HandlerMappingAdvice.\n+   * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n+   * chain.\n+   */\n+  private void onContext(\n+      final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n+    final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n+    if (attribute instanceof Filter) {\n+      final Filter filter = (Filter) attribute;\n+      try {\n+        request.setAttribute(DD_SPAN_ATTRIBUTE, span);\n+        filter.doFilter(request, null, null);\n+      } catch (final IOException | ServletException e) {\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3ODQ2Mg=="}, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM2MjQ2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyMTowNlrOGEDgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyMTowNlrOGEDgaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNDkzOQ==", "bodyText": "This seems completely unrelated.  While it is small, generally, I'd prefer to keep clean-up to what is relevant to the change at hand.", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406904939", "createdAt": "2020-04-10T19:21:06Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/RunnableInstrumentation.java", "diffHunk": "@@ -37,9 +37,7 @@ public RunnableInstrumentation() {\n \n   @Override\n   public Map<String, String> contextStore() {\n-    final Map<String, String> map = new HashMap<>();\n-    map.put(Runnable.class.getName(), State.class.getName());\n-    return Collections.unmodifiableMap(map);\n+    return singletonMap(Runnable.class.getName(), State.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM2NzA1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyMjo1N1rOGEDjKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyMjo1N1rOGEDjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTY0MQ==", "bodyText": "Should setAttribute be inside the try?", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r406905641", "createdAt": "2020-04-10T19:22:57Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/Servlet3Decorator.java", "diffHunk": "@@ -58,12 +61,32 @@ protected Integer status(final HttpServletResponse httpServletResponse) {\n   public AgentSpan onRequest(final AgentSpan span, final HttpServletRequest request) {\n     assert span != null;\n     if (request != null) {\n-      span.setTag(\"servlet.context\", request.getContextPath());\n       span.setTag(\"servlet.path\", request.getServletPath());\n+      span.setTag(\"servlet.context\", request.getContextPath());\n+      onContext(span, request, request.getServletContext());\n     }\n     return super.onRequest(span, request);\n   }\n \n+  /**\n+   * This method executes the filter created by\n+   * datadog.trace.instrumentation.springweb.DispatcherServletInstrumentation$HandlerMappingAdvice.\n+   * This was easier and less \"hacky\" than other ways to add the filter to the front of the filter\n+   * chain.\n+   */\n+  private void onContext(\n+      final AgentSpan span, final HttpServletRequest request, final ServletContext context) {\n+    final Object attribute = context.getAttribute(\"dd.dispatcher-filter\");\n+    if (attribute instanceof Filter) {\n+      final Filter filter = (Filter) attribute;\n+      try {\n+        request.setAttribute(DD_SPAN_ATTRIBUTE, span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDgyNzI4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/DispatcherServletInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxOTozMDo1MFrOGEyRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoxNzowMFrOGFbIPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTExNA==", "bodyText": "I realize this didn't change in this PR, but I'll ask anyway.\nI'd expect scope.close to be inside of a finally block, but usually, it is not.\nI'd actually expect XDecorator.beforeFinish to be inside a finally block as well.\nMaybe, the first two lines don't typically raise exceptions; however, we might not know because of the suppress=Throwable.\nBasically, I'm concerned that this code is not obviously correct.  From looking around, this seems to be a general problem with our resource handling.", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r407671114", "createdAt": "2020-04-13T19:30:50Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -79,11 +132,6 @@ public static void stopSpan(\n       DECORATE_RENDER.beforeFinish(scope);\n       scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDU0Mw==", "bodyText": "It's true that exceptions thrown from our decorators could cause problems in many places... That should probably be addressed as a separate issue.", "url": "https://github.com/DataDog/dd-trace-java/pull/1360#discussion_r408340543", "createdAt": "2020-04-14T18:17:00Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/DispatcherServletInstrumentation.java", "diffHunk": "@@ -79,11 +132,6 @@ public static void stopSpan(\n       DECORATE_RENDER.beforeFinish(scope);\n       scope.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3MTExNA=="}, "originalCommit": {"oid": "2db1e17140ed7e2a3eed91200d0fc2b3e4120a0e"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 450, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}