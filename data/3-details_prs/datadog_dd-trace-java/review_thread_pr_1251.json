{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTEwNjY0", "number": 1251, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0M1rODiuHgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozMjo0NlrODi3AZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzMzNzYxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0M1rOFuH9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0M1rOFuH9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTEyNA==", "bodyText": "I know this was pre-existing and I'm being nit-picky, but I'd prefer isEmpty.\nFor some collections, size is actually O(n).  For lazily filtered collection, isEmpty might also be O(n) but isEmpty is never worse.\nThat said since it was pre-existing, I don't really mind if we leave this as is.", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383909124", "createdAt": "2020-02-25T14:23:43Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzM0MTY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyNDo0NlrOFuH_gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyNjo0NVrOFuIEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTc2MQ==", "bodyText": "My original thought was that we'd short-circuit here as well; however...\nWe seem like we're already reaching a point of diminishing returns here and that will definitely make the code more complicated.", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383909761", "createdAt": "2020-02-25T14:24:46Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {\n+        return false;\n+      }\n+      // Don't reference-check helper classes.\n+      // They will be injected by the instrumentation's HelperInjector.\n+      if (!helperClassNames.contains(reference.getClassName())) {\n+        mismatches.addAll(checkMatch(reference, loader));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxMTExNA==", "bodyText": "That's a good point, now that I switched the cache to boolean, there's really no need to collect all the mismatches", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383911114", "createdAt": "2020-02-25T14:26:45Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {\n+        return false;\n+      }\n+      // Don't reference-check helper classes.\n+      // They will be injected by the instrumentation's HelperInjector.\n+      if (!helperClassNames.contains(reference.getClassName())) {\n+        mismatches.addAll(checkMatch(reference, loader));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTc2MQ=="}, "originalCommit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODc2ODY5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMToyNDoyMFrOFuVt-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDoxNDozN1rOFutESA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDY1MA==", "bodyText": "final", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384134650", "createdAt": "2020-02-25T21:24:20Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNzE5Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384517192", "createdAt": "2020-02-26T14:14:37Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDY1MA=="}, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODc4MzYyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMToyOToyMVrOFuV3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDoxMDoyN1rOFus6Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA==", "bodyText": "isn't this field always empty set ? where do we add elements to it ?", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384137084", "createdAt": "2020-02-25T21:29:21Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n+  private final WeakMap<ClassLoader, Boolean> mismatchCache = newWeakMap();\n   private final Reference[] references;\n   private final Set<String> helperClassNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MDI4MQ==", "bodyText": "Given that it is final, it must be assigned in the constructor.", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384170281", "createdAt": "2020-02-25T22:39:54Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n+  private final WeakMap<ClassLoader, Boolean> mismatchCache = newWeakMap();\n   private final Reference[] references;\n   private final Set<String> helperClassNames;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA=="}, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNDYwMg==", "bodyText": "It is set to a list of the args in the constructor(s)", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384514602", "createdAt": "2020-02-26T14:10:27Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n+  private final WeakMap<ClassLoader, Boolean> mismatchCache = newWeakMap();\n   private final Reference[] references;\n   private final Set<String> helperClassNames;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA=="}, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODc5Mzk2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozMjo0NlrOFuV99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo0MTo1NVrOFvlA0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA==", "bodyText": "private ?", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384138740", "createdAt": "2020-02-25T21:32:46Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -82,11 +99,12 @@ public boolean matches(final ClassLoader loader) {\n    * @param loader\n    * @return A list of mismatched sources. A list of size 0 means the reference matches the class.\n    */\n-  public static List<Reference.Mismatch> checkMatch(Reference reference, ClassLoader loader) {\n+  public static List<Reference.Mismatch> checkMatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxNjkzMA==", "bodyText": "Sure", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384516930", "createdAt": "2020-02-26T14:14:09Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -82,11 +99,12 @@ public boolean matches(final ClassLoader loader) {\n    * @param loader\n    * @return A list of mismatched sources. A list of size 0 means the reference matches the class.\n    */\n-  public static List<Reference.Mismatch> checkMatch(Reference reference, ClassLoader loader) {\n+  public static List<Reference.Mismatch> checkMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA=="}, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzgxMQ==", "bodyText": "still not private?", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r385433811", "createdAt": "2020-02-27T23:41:55Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -82,11 +99,12 @@ public boolean matches(final ClassLoader loader) {\n    * @param loader\n    * @return A list of mismatched sources. A list of size 0 means the reference matches the class.\n    */\n-  public static List<Reference.Mismatch> checkMatch(Reference reference, ClassLoader loader) {\n+  public static List<Reference.Mismatch> checkMatch(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA=="}, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 544, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}