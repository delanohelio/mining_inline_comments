{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTc5ODEw", "number": 1575, "title": "Prevent re-entering throwable instrumentation handler", "bodyText": "The throwable instance instrumentation handler is using code which in turn will end up using lazily linked lambdas - and as a part of the linkage process a LinkageError is thrown. Which will enter the throwable instrumentation handler code and so on and so forth.\nThis patch is adding a TLS flag which is supposed to prevent re-entrant execution of the instrumentation handler.\nIn addition to the main fix the smoke tests were updated to detect this kind of failure (and also other failures manifesting as ERROR or WARN messages in the test application log file) such that it can be detected earlier in the future.", "createdAt": "2020-06-11T15:55:13Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1575", "merged": true, "mergeCommit": {"oid": "eb5b1f26fdbdfd8fc261cbca3d8b912bbc685876"}, "closed": true, "closedAt": "2020-06-12T08:09:33Z", "author": {"login": "jbachorik"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqQTHsAH2gAyNDMzMTc5ODEwOjFiMGNlYzA3MmIyMDhlYTIxOWJjOTU3NGM2ZTVkOWRiMDY0OGU1MWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqdE8ggFqTQyOTQ5NzcwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b0cec072b208ea219bc9574c6e5d9db0648e51b", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1b0cec072b208ea219bc9574c6e5d9db0648e51b", "committedDate": "2020-06-11T15:50:16Z", "message": "Make profiling smoke test use the agent jar (instead of shadowed classes)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee3f35ff662898d6553def1fca5214575d529c0", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9ee3f35ff662898d6553def1fca5214575d529c0", "committedDate": "2020-06-11T15:50:41Z", "message": "Add log file contents assertion to profiling smoke tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/862cb5ed16828fa2fc3104728c445c3d5f9c9509", "committedDate": "2020-06-11T15:51:02Z", "message": "Prevent infinite recursion in throwable instance instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDcwNjg3", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429070687", "createdAt": "2020-06-11T16:11:08Z", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTowOFrOGikqmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTowOFrOGikqmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTQ5OA==", "bodyText": "Imho this is a good idea but you may want to make it available for all AbstractSmokeTest - they all use same approach to write logs", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438905498", "createdAt": "2020-06-11T16:11:08Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {\n+      if (it.contains(\"ERROR\") || it.contains(\"WARN\") || it.contains(\"ASSERTION FAILED\")) {\n+        println it\n+        logHasErrors = true\n+      }\n+      checker(it)\n+    }\n+  }\n+\n+  def checkLog() {\n+    checkLog {}\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDcxMTE0", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429071114", "createdAt": "2020-06-11T16:11:37Z", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTozN1rOGikr1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTozN1rOGikr1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTgxNQ==", "bodyText": "Could you please explain what this does?", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438905815", "createdAt": "2020-06-11T16:11:37Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/profiling-integration-tests.gradle", "diffHunk": "@@ -34,3 +34,9 @@ tasks.withType(Test).configureEach {\n \n   jvmArgs \"-Ddatadog.smoketest.profiling.shadowJar.path=${tasks.shadowJar.archivePath}\"\n }\n+\n+shadowJar {\n+  dependencies {\n+    include(dependency('org.slf4j::'))\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDcyMzQy", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429072342", "createdAt": "2020-06-11T16:13:06Z", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzowNlrOGikvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzowNlrOGikvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjgxOA==", "bodyText": "Would be great to have a comment explaining what this protects against in detail... this is useful info since it is very non trivial", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438906818", "createdAt": "2020-06-11T16:13:06Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDcyODUx", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429072851", "createdAt": "2020-06-11T16:13:41Z", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzo0MlrOGikxIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzo0MlrOGikxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzE3MQ==", "bodyText": "Maybe a comment here explaining what it guards against (as described in the PR comment).", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438907171", "createdAt": "2020-06-11T16:13:42Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTA2Nzc2", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429106776", "createdAt": "2020-06-11T16:57:03Z", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1NzowM1rOGimXVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1NzowM1rOGimXVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMzMzMw==", "bodyText": "you you please add a print out something like 'See full run logs in {filename}` if there are errors?", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438933333", "createdAt": "2020-06-11T16:57:03Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTE0NzQ5", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429114749", "createdAt": "2020-06-11T17:07:40Z", "commit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzowNzo0MFrOGimuag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzowNzo0MFrOGimuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzOTI0Mg==", "bodyText": "FWIW: if you move the reentrace check into ExceptionProfiling.getInstance().process you would actually be able to unit test this since you can call process with some special exception that calls process again...", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438939242", "createdAt": "2020-06-11T17:07:40Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {\n+      try {\n+        /*\n+         * We may get into a situation when this is called before ExceptionProfiling had a chance\n+         * to fully initialize. So despite the fact that this returns static singleton this may\n+         * return null sometimes.\n+         */\n+        if (ExceptionProfiling.getInstance() == null) {\n+          return;\n+        }\n+        /*\n+         * JFR will assign the stacktrace depending on the place where the event is committed.\n+         * Therefore we need to commit the event here, right in the 'Exception' constructor\n+         */\n+        final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b28676c1d5285167cdfd70e795ceb83bf59bf7d2", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b28676c1d5285167cdfd70e795ceb83bf59bf7d2", "committedDate": "2020-06-11T17:08:22Z", "message": "Add comments and improve tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjQ5MjAw", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429249200", "createdAt": "2020-06-11T20:03:58Z", "commit": {"oid": "b28676c1d5285167cdfd70e795ceb83bf59bf7d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDk3NzA4", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#pullrequestreview-429497708", "createdAt": "2020-06-12T06:43:33Z", "commit": {"oid": "b28676c1d5285167cdfd70e795ceb83bf59bf7d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2404, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}