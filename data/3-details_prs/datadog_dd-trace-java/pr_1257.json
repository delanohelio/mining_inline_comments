{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTM3MDE2", "number": 1257, "title": "Return TypePool.Resolution that caches TypeDescription calls.", "bodyText": "Caching focused on the expensive calls primarily used by our instrumentation.\nThis reduces startup by nearly a second.\nI'm not sure what the impact of this on memory overhead will be.  We should consider increasing the cache size a bit to make this even more effective.", "createdAt": "2020-02-26T01:17:32Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1257", "merged": true, "mergeCommit": {"oid": "4e8e0983306e2813a9a51fbf387323c79db2659f"}, "closed": true, "closedAt": "2020-02-27T19:12:41Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH8UPjAFqTM2NDU2NTIxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcINZpFgBqjMwNzU0NTQ5NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTY1MjE5", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#pullrequestreview-364565219", "createdAt": "2020-02-26T01:19:07Z", "commit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMToxOTowN1rOFubSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMToxOTozNlrOFubS9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNTkwOQ==", "bodyText": "Do these need to be volatile?", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384225909", "createdAt": "2020-02-26T01:19:07Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?\n+\n+    public CachingResolution(final TypePool.Resolution delegate) {\n+\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return delegate.isResolved();\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      if (cachedResolution == null) {\n+        cachedResolution = new CachingTypeDescription(delegate.resolve());\n+      }\n+      return cachedResolution;\n+    }\n+  }\n+\n+  /**\n+   * TypeDescription implementation that delegates and caches the results for the expensive calls\n+   * commonly used by our instrumentation.\n+   */\n+  private static class CachingTypeDescription\n+      extends TypeDescription.AbstractBase.OfSimpleType.WithDelegation {\n+    private final TypeDescription delegate;\n+\n+    // TODO fix thread safetyness:\n+    private Generic superClass;\n+    private TypeList.Generic interfaces;\n+    private AnnotationList annotations;\n+    private MethodList<MethodDescription.InDefinedShape> methods;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNjAzNw==", "bodyText": "And this?", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384226037", "createdAt": "2020-02-26T01:19:36Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Njg5MDE1", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#pullrequestreview-364689015", "createdAt": "2020-02-26T08:11:37Z", "commit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoxMTozN1rOFuhibw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODoyNzozMFrOFuh8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyODMwMw==", "bodyText": "No need, worst case you have created 2 CachingTypeDescriptions on concurrent calls", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384328303", "createdAt": "2020-02-26T08:11:37Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNjAzNw=="}, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMyOTU0Nw==", "bodyText": "to help you reason about concurrency here, you can use local vars:\nTypeDescription localResolution = cachedResolution; // read field\nif (localResolution == null) {\n    localResolution = new CachingTypeDescription(delegate.resolve());\n}\ncachedResolution = localResolution; // write field\nreturn localResolution;\n\nIn any case you won't return null, that's the most important.", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384329547", "createdAt": "2020-02-26T08:14:43Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?\n+\n+    public CachingResolution(final TypePool.Resolution delegate) {\n+\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return delegate.isResolved();\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      if (cachedResolution == null) {\n+        cachedResolution = new CachingTypeDescription(delegate.resolve());\n+      }\n+      return cachedResolution;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNDk2Mw==", "bodyText": "no need", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384334963", "createdAt": "2020-02-26T08:27:30Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?\n+\n+    public CachingResolution(final TypePool.Resolution delegate) {\n+\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return delegate.isResolved();\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      if (cachedResolution == null) {\n+        cachedResolution = new CachingTypeDescription(delegate.resolve());\n+      }\n+      return cachedResolution;\n+    }\n+  }\n+\n+  /**\n+   * TypeDescription implementation that delegates and caches the results for the expensive calls\n+   * commonly used by our instrumentation.\n+   */\n+  private static class CachingTypeDescription\n+      extends TypeDescription.AbstractBase.OfSimpleType.WithDelegation {\n+    private final TypeDescription delegate;\n+\n+    // TODO fix thread safetyness:\n+    private Generic superClass;\n+    private TypeList.Generic interfaces;\n+    private AnnotationList annotations;\n+    private MethodList<MethodDescription.InDefinedShape> methods;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNTkwOQ=="}, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODkyOTI3", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#pullrequestreview-364892927", "createdAt": "2020-02-26T13:24:58Z", "commit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyNDo1OFrOFurU9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyNDo1OFrOFurU9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4ODY5Mg==", "bodyText": "Looks like this either needs to be addressed, or removed - or maybe expanded with more explanation for posterity", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384488692", "createdAt": "2020-02-26T13:24:58Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?\n+\n+    public CachingResolution(final TypePool.Resolution delegate) {\n+\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return delegate.isResolved();\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      if (cachedResolution == null) {\n+        cachedResolution = new CachingTypeDescription(delegate.resolve());\n+      }\n+      return cachedResolution;\n+    }\n+  }\n+\n+  /**\n+   * TypeDescription implementation that delegates and caches the results for the expensive calls\n+   * commonly used by our instrumentation.\n+   */\n+  private static class CachingTypeDescription\n+      extends TypeDescription.AbstractBase.OfSimpleType.WithDelegation {\n+    private final TypeDescription delegate;\n+\n+    // TODO fix thread safetyness:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODkzNzA4", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#pullrequestreview-364893708", "createdAt": "2020-02-26T13:26:07Z", "commit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyNjowN1rOFurXVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoyNjowN1rOFurXVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4OTMwMA==", "bodyText": "SuperClass can be null for things that do not have it... but I guess it's ok to call getSuperClass again in this case - however you may want to add a comment.", "url": "https://github.com/DataDog/dd-trace-java/pull/1257#discussion_r384489300", "createdAt": "2020-02-26T13:26:07Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -232,4 +247,88 @@ public void clear() {\n       // Allowing the high-level eviction policy make the clearing decisions\n     }\n   }\n+\n+  private static class CachingResolution implements TypePool.Resolution {\n+    private final TypePool.Resolution delegate;\n+    private TypeDescription cachedResolution; // FIXME: should this be volatile?\n+\n+    public CachingResolution(final TypePool.Resolution delegate) {\n+\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return delegate.isResolved();\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      if (cachedResolution == null) {\n+        cachedResolution = new CachingTypeDescription(delegate.resolve());\n+      }\n+      return cachedResolution;\n+    }\n+  }\n+\n+  /**\n+   * TypeDescription implementation that delegates and caches the results for the expensive calls\n+   * commonly used by our instrumentation.\n+   */\n+  private static class CachingTypeDescription\n+      extends TypeDescription.AbstractBase.OfSimpleType.WithDelegation {\n+    private final TypeDescription delegate;\n+\n+    // TODO fix thread safetyness:\n+    private Generic superClass;\n+    private TypeList.Generic interfaces;\n+    private AnnotationList annotations;\n+    private MethodList<MethodDescription.InDefinedShape> methods;\n+\n+    public CachingTypeDescription(final TypeDescription delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    protected TypeDescription delegate() {\n+      return delegate;\n+    }\n+\n+    @Override\n+    public Generic getSuperClass() {\n+      if (superClass == null) {\n+        superClass = delegate.getSuperClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f431d5285af9c629dcf5b18544955959dff8b42d", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f431d5285af9c629dcf5b18544955959dff8b42d", "committedDate": "2020-02-26T20:47:48Z", "message": "Return TypePool.Resolution that caches\n\nCaching focused on the expensive calls primarily used by our instrumentation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a8bdefcdf6407d163a029625c85482450f3f3b1", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8a8bdefcdf6407d163a029625c85482450f3f3b1", "committedDate": "2020-02-26T01:04:56Z", "message": "Return TypePool.Resolution that caches\n\nCaching focused on the expensive calls primarily used by our instrumentation."}, "afterCommit": {"oid": "f431d5285af9c629dcf5b18544955959dff8b42d", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f431d5285af9c629dcf5b18544955959dff8b42d", "committedDate": "2020-02-26T20:47:48Z", "message": "Return TypePool.Resolution that caches\n\nCaching focused on the expensive calls primarily used by our instrumentation."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2523, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}