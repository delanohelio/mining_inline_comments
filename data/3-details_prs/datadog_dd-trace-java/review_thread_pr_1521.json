{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MzAzMjAz", "number": 1521, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxOToyMFrOEByvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxMDowMlrOEDFauw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzE1MjY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxOToyMFrOGd2sGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTowMDowNlrOGfyGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzkxNA==", "bodyText": "Unfortunately this method was not added until 2.6.8: https://github.com/playframework/playframework/blob/2.6.8/framework/src/play/src/main/java/play/libs/typedmap/TypedKey.java#L31\nMaking this change while good would break support of some play 2.6 versions. Given the size of this change, can you make this call with reflection to the appropriate method instead? (make asScala the default path)\nI don't think this is a place where creating a whole new version makes sense", "url": "https://github.com/DataDog/dd-trace-java/pull/1521#discussion_r433957914", "createdAt": "2020-06-02T15:19:20Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "diffHunk": "@@ -61,7 +61,7 @@ public AgentSpan onRequest(final AgentSpan span, final Request request) {\n       // more about routes here:\n       // https://github.com/playframework/playframework/blob/master/documentation/manual/releases/release26/migration26/Migration26.md\n       final Option<HandlerDef> defOption =\n-          request.attrs().get(Router.Attrs.HANDLER_DEF.underlying());\n+          request.attrs().get(Router.Attrs.HANDLER_DEF.asScala());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87814acd1f1cfc966537fccecdc89a84b106ba96"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk2ODk4NQ==", "bodyText": "Well, I'd appreciate if you could pick this up, I'm not very familiar with the codebase yet. thank you!", "url": "https://github.com/DataDog/dd-trace-java/pull/1521#discussion_r435968985", "createdAt": "2020-06-05T14:42:57Z", "author": {"login": "keki"}, "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "diffHunk": "@@ -61,7 +61,7 @@ public AgentSpan onRequest(final AgentSpan span, final Request request) {\n       // more about routes here:\n       // https://github.com/playframework/playframework/blob/master/documentation/manual/releases/release26/migration26/Migration26.md\n       final Option<HandlerDef> defOption =\n-          request.attrs().get(Router.Attrs.HANDLER_DEF.underlying());\n+          request.attrs().get(Router.Attrs.HANDLER_DEF.asScala());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzkxNA=="}, "originalCommit": {"oid": "87814acd1f1cfc966537fccecdc89a84b106ba96"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3OTg3Nw==", "bodyText": "Thanks - we'll take a closer look on our end to get over the finish line!", "url": "https://github.com/DataDog/dd-trace-java/pull/1521#discussion_r435979877", "createdAt": "2020-06-05T15:00:06Z", "author": {"login": "andrewsouthard1"}, "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "diffHunk": "@@ -61,7 +61,7 @@ public AgentSpan onRequest(final AgentSpan span, final Request request) {\n       // more about routes here:\n       // https://github.com/playframework/playframework/blob/master/documentation/manual/releases/release26/migration26/Migration26.md\n       final Option<HandlerDef> defOption =\n-          request.attrs().get(Router.Attrs.HANDLER_DEF.underlying());\n+          request.attrs().get(Router.Attrs.HANDLER_DEF.asScala());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzkxNA=="}, "originalCommit": {"oid": "87814acd1f1cfc966537fccecdc89a84b106ba96"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjY5OTQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDoxMDowMlrOGf7-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODozNjowNFrOG4CbXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MTU2OQ==", "bodyText": "This is probably subverting the muzzle check... so if they change this in the future, we might not detect it properly.  Lightbend will likely break our instrumentation in the next \"minor\" version anyway so we should be sure to split it out as a separate module at that point.", "url": "https://github.com/DataDog/dd-trace-java/pull/1521#discussion_r436141569", "createdAt": "2020-06-05T20:10:02Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "diffHunk": "@@ -5,20 +5,41 @@\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.UndeclaredThrowableException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import lombok.extern.slf4j.Slf4j;\n import play.api.mvc.Request;\n import play.api.mvc.Result;\n import play.api.routing.HandlerDef;\n+import play.libs.typedmap.TypedKey;\n import play.routing.Router;\n import scala.Option;\n \n @Slf4j\n public class PlayHttpServerDecorator extends HttpServerDecorator<Request, Request, Result> {\n   public static final PlayHttpServerDecorator DECORATE = new PlayHttpServerDecorator();\n \n+  private static final Method typedKeyGetUnderlying;\n+\n+  static {\n+    Method typedKeyGetUnderlyingCheck = null;\n+    try {\n+      // This method was added in Play 2.6.8\n+      typedKeyGetUnderlyingCheck = TypedKey.class.getMethod(\"asScala\");\n+    } catch (final NoSuchMethodException ignored) {\n+    }\n+    // Fallback\n+    if (typedKeyGetUnderlyingCheck == null) {\n+      try {\n+        typedKeyGetUnderlyingCheck = TypedKey.class.getMethod(\"underlying\");\n+      } catch (final NoSuchMethodException ignored) {\n+      }\n+    }\n+    typedKeyGetUnderlying = typedKeyGetUnderlyingCheck;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20bf9c031744bd8ec99335ca93faaacc4c197d8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0OTg0OA==", "bodyText": "It's definitely subverting it, I think the API of that class is unlikely to remove this method without the class completely changing", "url": "https://github.com/DataDog/dd-trace-java/pull/1521#discussion_r436149848", "createdAt": "2020-06-05T20:30:18Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "diffHunk": "@@ -5,20 +5,41 @@\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.UndeclaredThrowableException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import lombok.extern.slf4j.Slf4j;\n import play.api.mvc.Request;\n import play.api.mvc.Result;\n import play.api.routing.HandlerDef;\n+import play.libs.typedmap.TypedKey;\n import play.routing.Router;\n import scala.Option;\n \n @Slf4j\n public class PlayHttpServerDecorator extends HttpServerDecorator<Request, Request, Result> {\n   public static final PlayHttpServerDecorator DECORATE = new PlayHttpServerDecorator();\n \n+  private static final Method typedKeyGetUnderlying;\n+\n+  static {\n+    Method typedKeyGetUnderlyingCheck = null;\n+    try {\n+      // This method was added in Play 2.6.8\n+      typedKeyGetUnderlyingCheck = TypedKey.class.getMethod(\"asScala\");\n+    } catch (final NoSuchMethodException ignored) {\n+    }\n+    // Fallback\n+    if (typedKeyGetUnderlyingCheck == null) {\n+      try {\n+        typedKeyGetUnderlyingCheck = TypedKey.class.getMethod(\"underlying\");\n+      } catch (final NoSuchMethodException ignored) {\n+      }\n+    }\n+    typedKeyGetUnderlying = typedKeyGetUnderlyingCheck;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MTU2OQ=="}, "originalCommit": {"oid": "f20bf9c031744bd8ec99335ca93faaacc4c197d8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMzIxNQ==", "bodyText": "I'm curious why you need all this reflection logic. You should be able to call request.asJava() to convert the request to a Java request, so you can use all the normal Play Java API.\nSo below you could write:\nrequest.asJava().attrs().getOptional(Router.Attrs.HANDLER_DEF).ifPresent(hd -> {\n  span.setTag(DDTags.RESOURCE_NAME, hd.verb() + \" \" + hd.path());\n});\nIt's not an immediate issue for me but I was trying to better understand how this integration works.", "url": "https://github.com/DataDog/dd-trace-java/pull/1521#discussion_r461413215", "createdAt": "2020-07-28T08:36:04Z", "author": {"login": "gmethvin"}, "path": "dd-java-agent/instrumentation/play-2.6/src/main/java8/datadog/trace/instrumentation/play26/PlayHttpServerDecorator.java", "diffHunk": "@@ -5,20 +5,41 @@\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.UndeclaredThrowableException;\n import java.net.URI;\n import java.net.URISyntaxException;\n import lombok.extern.slf4j.Slf4j;\n import play.api.mvc.Request;\n import play.api.mvc.Result;\n import play.api.routing.HandlerDef;\n+import play.libs.typedmap.TypedKey;\n import play.routing.Router;\n import scala.Option;\n \n @Slf4j\n public class PlayHttpServerDecorator extends HttpServerDecorator<Request, Request, Result> {\n   public static final PlayHttpServerDecorator DECORATE = new PlayHttpServerDecorator();\n \n+  private static final Method typedKeyGetUnderlying;\n+\n+  static {\n+    Method typedKeyGetUnderlyingCheck = null;\n+    try {\n+      // This method was added in Play 2.6.8\n+      typedKeyGetUnderlyingCheck = TypedKey.class.getMethod(\"asScala\");\n+    } catch (final NoSuchMethodException ignored) {\n+    }\n+    // Fallback\n+    if (typedKeyGetUnderlyingCheck == null) {\n+      try {\n+        typedKeyGetUnderlyingCheck = TypedKey.class.getMethod(\"underlying\");\n+      } catch (final NoSuchMethodException ignored) {\n+      }\n+    }\n+    typedKeyGetUnderlying = typedKeyGetUnderlyingCheck;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE0MTU2OQ=="}, "originalCommit": {"oid": "f20bf9c031744bd8ec99335ca93faaacc4c197d8"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 188, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}