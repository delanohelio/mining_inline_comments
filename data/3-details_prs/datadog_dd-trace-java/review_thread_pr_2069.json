{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTk2Njgy", "number": 2069, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozMjozOVrOE4tk3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowNzozM1rOE7GTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTAyNDI4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozMjozOVrOHyy_Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozMjozOVrOHyy_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyNjI2Nw==", "bodyText": "I'm not sure what the right way to use the routing path/regex is in this case. I don't really like the pattern of modifying one span just to start another. It's also not clear to me what the correct methods to call are", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r523026267", "createdAt": "2020-11-13T15:32:39Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.INSTRUMENTATION_NAME;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RouteHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> actual;\n+\n+  public RouteHandlerWrapper(final Handler<RoutingContext> handler) {\n+    actual = handler;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74086f35abd5d004781eafb92ca6b0d44739f325"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDI1MTI1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0MjoxMlrOH1D2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTowMzoxNlrOH1yEew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5OTU4NA==", "bodyText": "Should this be wrapped in a scope?", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r525399584", "createdAt": "2020-11-17T18:42:12Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerResponse;\n+\n+public class EndHandlerWrapper implements Handler<Void> {\n+  private final AgentSpan span;\n+  private final HttpServerResponse response;\n+\n+  Handler<Void> actual;\n+\n+  EndHandlerWrapper(final AgentSpan span, final HttpServerResponse response) {\n+    this.span = span;\n+    this.response = response;\n+  }\n+\n+  @Override\n+  public void handle(final Void event) {\n+    if (actual != null) {\n+      actual.handle(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1NjkyMw==", "bodyText": "It will be inside the scope from the other handler. Either directly or through async propagation", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526156923", "createdAt": "2020-11-18T15:03:16Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerResponse;\n+\n+public class EndHandlerWrapper implements Handler<Void> {\n+  private final AgentSpan span;\n+  private final HttpServerResponse response;\n+\n+  Handler<Void> actual;\n+\n+  EndHandlerWrapper(final AgentSpan span, final HttpServerResponse response) {\n+    this.span = span;\n+    this.response = response;\n+  }\n+\n+  @Override\n+  public void handle(final Void event) {\n+    if (actual != null) {\n+      actual.handle(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5OTU4NA=="}, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDI1NzEyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapperAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0Mzo0NFrOH1D5xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0Mzo0NFrOH1D5xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMDUxOQ==", "bodyText": "I think some comments here would be helpful.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r525400519", "createdAt": "2020-11-17T18:43:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapperAdvice.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import io.vertx.core.Handler;\n+import net.bytebuddy.asm.Advice;\n+\n+public class EndHandlerWrapperAdvice {\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static void wrapHandler(\n+      @Advice.FieldValue(value = \"endHandler\", readOnly = false) final Handler<Void> endHandler,\n+      @Advice.Argument(value = 0, readOnly = false) final Handler<Void> handler) {\n+    if (endHandler instanceof EndHandlerWrapper && handler instanceof EndHandlerWrapper) {\n+      return;\n+    }\n+    if (handler instanceof EndHandlerWrapper && endHandler != null) {\n+      ((EndHandlerWrapper) handler).actual = endHandler;\n+    } else if (endHandler instanceof EndHandlerWrapper) {\n+      ((EndHandlerWrapper) endHandler).actual = handler;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDI3MTE3OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0Njo1NVrOH1ECCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxMDozMFrOH1ya9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMjYzNQ==", "bodyText": "Is the rx project only for testing?  If so, consider putting it as a sub project to web.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r525402635", "createdAt": "2020-11-17T18:46:55Z", "author": {"login": "tylerbenson"}, "path": "settings.gradle", "diffHunk": "@@ -184,7 +184,8 @@ include ':dd-java-agent:instrumentation:spymemcached-2.12'\n include ':dd-java-agent:instrumentation:testng-6.4'\n include ':dd-java-agent:instrumentation:trace-annotation'\n include ':dd-java-agent:instrumentation:twilio'\n-include ':dd-java-agent:instrumentation:vertx'\n+include ':dd-java-agent:instrumentation:vertx-rx-3.5'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2MjY3OQ==", "bodyText": "It's likely we need specific instrumentation for rx. And considering the version difference I don't really think as a sub project makes sense", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526162679", "createdAt": "2020-11-18T15:10:30Z", "author": {"login": "devinsba"}, "path": "settings.gradle", "diffHunk": "@@ -184,7 +184,8 @@ include ':dd-java-agent:instrumentation:spymemcached-2.12'\n include ':dd-java-agent:instrumentation:testng-6.4'\n include ':dd-java-agent:instrumentation:trace-annotation'\n include ':dd-java-agent:instrumentation:twilio'\n-include ':dd-java-agent:instrumentation:vertx'\n+include ':dd-java-agent:instrumentation:vertx-rx-3.5'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwMjYzNQ=="}, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDI4MDk2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/test/groovy/server/VertxHttpServerTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo0OToyMlrOH1EH1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoxNDozNVrOH17z_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDExOA==", "bodyText": "I don't think vertx.router is the right name here.  I think it should be something like vertx.controller or vertx.action instead.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r525404118", "createdAt": "2020-11-17T18:49:22Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/test/groovy/server/VertxHttpServerTest.groovy", "diffHunk": "@@ -72,6 +76,40 @@ class VertxHttpServerTest extends HttpServerTest<Vertx> {\n     true\n   }\n \n+  @Override\n+  int spanCount(ServerEndpoint endpoint) {\n+    if (endpoint == NOT_FOUND) {\n+      return super.spanCount(endpoint) - 1\n+    }\n+    return super.spanCount(endpoint)\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    true\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, ServerEndpoint endpoint = SUCCESS) {\n+    if (endpoint == NOT_FOUND) {\n+      return\n+    }\n+    trace.span {\n+      serviceName expectedServiceName()\n+      operationName \"vertx.router\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMxNjU0MQ==", "bodyText": "I'll go with vertx.route-handler to stick with the frameworks vocabulary", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526316541", "createdAt": "2020-11-18T18:14:35Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/test/groovy/server/VertxHttpServerTest.groovy", "diffHunk": "@@ -72,6 +76,40 @@ class VertxHttpServerTest extends HttpServerTest<Vertx> {\n     true\n   }\n \n+  @Override\n+  int spanCount(ServerEndpoint endpoint) {\n+    if (endpoint == NOT_FOUND) {\n+      return super.spanCount(endpoint) - 1\n+    }\n+    return super.spanCount(endpoint)\n+  }\n+\n+  @Override\n+  boolean hasHandlerSpan() {\n+    true\n+  }\n+\n+  @Override\n+  void handlerSpan(TraceAssert trace, ServerEndpoint endpoint = SUCCESS) {\n+    if (endpoint == NOT_FOUND) {\n+      return\n+    }\n+    trace.span {\n+      serviceName expectedServiceName()\n+      operationName \"vertx.router\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNDExOA=="}, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDI5Njk5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo1MzoxNFrOH1ERSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzo1MToxOFrOH16zvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNjUzOA==", "bodyText": "I think it would be useful to set the span's resource name to actual's class name.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r525406538", "createdAt": "2020-11-17T18:53:14Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.INSTRUMENTATION_NAME;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RouteHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> actual;\n+\n+  public RouteHandlerWrapper(final Handler<RoutingContext> handler) {\n+    actual = handler;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final AgentSpan parentSpan = activeSpan();\n+    DECORATE.onRequest(parentSpan, routingContext);\n+\n+    final AgentSpan span = startSpan(INSTRUMENTATION_NAME);\n+    routingContext.response().endHandler(new EndHandlerWrapper(span, routingContext.response()));\n+    DECORATE.afterStart(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE2MDk0Ng==", "bodyText": "For most use cases I would expect this to be an anonymous class. I don't feel that is all that useful but I can be convinced", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526160946", "createdAt": "2020-11-18T15:08:19Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.INSTRUMENTATION_NAME;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RouteHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> actual;\n+\n+  public RouteHandlerWrapper(final Handler<RoutingContext> handler) {\n+    actual = handler;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final AgentSpan parentSpan = activeSpan();\n+    DECORATE.onRequest(parentSpan, routingContext);\n+\n+    final AgentSpan span = startSpan(INSTRUMENTATION_NAME);\n+    routingContext.response().endHandler(new EndHandlerWrapper(span, routingContext.response()));\n+    DECORATE.afterStart(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNjUzOA=="}, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMwMDA5Mg==", "bodyText": "Since this isn't a measured span, the cardinality requirements are less strict.  I think an anonymous class name would still be more useful than nothing.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526300092", "createdAt": "2020-11-18T17:51:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.INSTRUMENTATION_NAME;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RouteHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> actual;\n+\n+  public RouteHandlerWrapper(final Handler<RoutingContext> handler) {\n+    actual = handler;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final AgentSpan parentSpan = activeSpan();\n+    DECORATE.onRequest(parentSpan, routingContext);\n+\n+    final AgentSpan span = startSpan(INSTRUMENTATION_NAME);\n+    routingContext.response().endHandler(new EndHandlerWrapper(span, routingContext.response()));\n+    DECORATE.afterStart(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNjUzOA=="}, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDMwMTAyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo1NDoxNlrOH1ET3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODo1NDoxNlrOH1ET3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQwNzE5OQ==", "bodyText": "If there's any chance of this throwing an exception, you should catch and add it to the span.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r525407199", "createdAt": "2020-11-17T18:54:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/RouteHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.INSTRUMENTATION_NAME;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+\n+public class RouteHandlerWrapper implements Handler<RoutingContext> {\n+  private final Handler<RoutingContext> actual;\n+\n+  public RouteHandlerWrapper(final Handler<RoutingContext> handler) {\n+    actual = handler;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final AgentSpan parentSpan = activeSpan();\n+    DECORATE.onRequest(parentSpan, routingContext);\n+\n+    final AgentSpan span = startSpan(INSTRUMENTATION_NAME);\n+    routingContext.response().endHandler(new EndHandlerWrapper(span, routingContext.response()));\n+    DECORATE.afterStart(span);\n+\n+    try (final AgentScope scope = activateSpan(span)) {\n+      scope.setAsyncPropagation(true);\n+      actual.handle(routingContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b826545d7d2da6836c081d61bd3c96a4928eedd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDI2MjA0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/test/java/server/VertxTestServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo0NjozNlrOH1_TAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxOTo0NjozNlrOH1_TAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM3MzYzMg==", "bodyText": "The test was not behaving correctly when this server was written in Groovy with regards to the exception", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526373632", "createdAt": "2020-11-18T19:46:36Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/test/java/server/VertxTestServer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package server;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484129d84c6fdd4c493f0a4e6531c8af7d081a06"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDA0ODAxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowNzozM1rOH2jFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNToxNDowOVrOH2jaXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1OTkyMQ==", "bodyText": "you might want to put the span.finish() in a try/finally in case the handle throws an exception.", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526959921", "createdAt": "2020-11-19T15:07:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerResponse;\n+\n+public class EndHandlerWrapper implements Handler<Void> {\n+  private final AgentSpan span;\n+  private final HttpServerResponse response;\n+\n+  Handler<Void> actual;\n+\n+  EndHandlerWrapper(final AgentSpan span, final HttpServerResponse response) {\n+    this.span = span;\n+    this.response = response;\n+  }\n+\n+  @Override\n+  public void handle(final Void event) {\n+    if (actual != null) {\n+      actual.handle(event);\n+    }\n+    DECORATE.onResponse(span, response);\n+    span.finish();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484129d84c6fdd4c493f0a4e6531c8af7d081a06"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2NTM0Mg==", "bodyText": "Good call. Done", "url": "https://github.com/DataDog/dd-trace-java/pull/2069#discussion_r526965342", "createdAt": "2020-11-19T15:14:09Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/vertx-web-3.4/src/main/java8/datadog/trace/instrumentation/vertx_3_4/server/EndHandlerWrapper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.instrumentation.vertx_3_4.server;\n+\n+import static datadog.trace.instrumentation.vertx_3_4.server.VertxRouterDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerResponse;\n+\n+public class EndHandlerWrapper implements Handler<Void> {\n+  private final AgentSpan span;\n+  private final HttpServerResponse response;\n+\n+  Handler<Void> actual;\n+\n+  EndHandlerWrapper(final AgentSpan span, final HttpServerResponse response) {\n+    this.span = span;\n+    this.response = response;\n+  }\n+\n+  @Override\n+  public void handle(final Void event) {\n+    if (actual != null) {\n+      actual.handle(event);\n+    }\n+    DECORATE.onResponse(span, response);\n+    span.finish();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1OTkyMQ=="}, "originalCommit": {"oid": "484129d84c6fdd4c493f0a4e6531c8af7d081a06"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4585, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}