{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzUxMzk0", "number": 1977, "title": "Instrument akka dispatchers without relying on Executor/Runnable instrumentations", "bodyText": "akka.dispatch.Mailbox is a subclass of ForkJoinTask so Dispatcher context propagation should come for free from the j.u.c FJP/FJT instrumentation.  This is almost the case (akka.dispatch.forkjoin is needed in older akka versions, and older Play framework versions depend on this).\nakka.dispatch.ExecutionContexts$sameThreadExecutionContext$ doesn't need context propagation.\nakka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinPool seems to be FJP based too. This is almost the case: quirky error handling means the tasks but not the executor need special instrumentation, which is guarded by a class loader matcher to prevent field injection of Runnable unless this instrumentation is activated (requires Scala 2.11 and an old Akka version so not very likely).\nakka.dispatch.Dispatcher$LazyExecutorServiceDelegate is a wrapper around another ExecutorService\nI couldn't locate akka.actor.ActorSystemImpl$$anon$1 but I suspect that not interfering with this is what akka-init is testing.", "createdAt": "2020-10-12T18:52:48Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1977", "merged": true, "mergeCommit": {"oid": "1d5de7502cd74431437988033d36732239fe510e"}, "closed": true, "closedAt": "2020-10-15T10:13:52Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSFozfAFqTUwNzI3MTA2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSfjvXABqjM4Nzc0MTg2MDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjcxMDY3", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#pullrequestreview-507271067", "createdAt": "2020-10-13T10:01:58Z", "commit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MzIxMjcw", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#pullrequestreview-507321270", "createdAt": "2020-10-13T11:10:23Z", "commit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDcyNjAy", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#pullrequestreview-507472602", "createdAt": "2020-10-13T14:04:55Z", "commit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowNDo1NlrOHgogMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxMTowNFrOHgozNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDA4MA==", "bodyText": "Is this expected to stay like this long term?", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503980080", "createdAt": "2020-10-13T14:04:56Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinExecutorTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaWrappedRunnableInstrumentation; its responsibility\n+ * is to capture context if there is an active scope.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class AkkaForkJoinExecutorTaskInstrumentation extends Instrumenter.Default {\n+  public AkkaForkJoinExecutorTaskInstrumentation() {\n+    super(\"java_concurrent\", \"akka_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // prevents Runnable from being instrumented unless this\n+    // instrumentation would take effect (unless something else\n+    // instruments it).\n+    return hasClassesNamed(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return Collections.singletonMap(Runnable.class.getName(), State.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MjMzMw==", "bodyText": "wrapped?", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503982333", "createdAt": "2020-10-13T14:07:52Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinExecutorTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaWrappedRunnableInstrumentation; its responsibility\n+ * is to capture context if there is an active scope.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class AkkaForkJoinExecutorTaskInstrumentation extends Instrumenter.Default {\n+  public AkkaForkJoinExecutorTaskInstrumentation() {\n+    super(\"java_concurrent\", \"akka_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // prevents Runnable from being instrumented unless this\n+    // instrumentation would take effect (unless something else\n+    // instruments it).\n+    return hasClassesNamed(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return Collections.singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isConstructor().and(takesArgument(0, named(Runnable.class.getName()))),\n+        getClass().getName() + \"$Construct\");\n+  }\n+\n+  public static final class Construct {\n+    @Advice.OnMethodExit\n+    public static void construct(@Advice.Argument(0) Runnable wrapped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NDk1MQ==", "bodyText": "both this and AkkaForkJoinExecutorTaskInstrumentation are instrumenting the same class.  Why separate them?", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503984951", "createdAt": "2020-10-13T14:11:04Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaWrappedRunnableInstrumentation.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.AdviceUtils.endTaskScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.AdviceUtils.startTaskScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaForkJoinExecutorTaskInstrumentation; its\n+ * responsibility is to activate any captured scope.\n+ */\n+@AutoService(Instrumenter.class)\n+public final class AkkaWrappedRunnableInstrumentation extends Instrumenter.Default {\n+\n+  public AkkaWrappedRunnableInstrumentation() {\n+    super(\"java_concurrent\", \"akka_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // prevents Runnable from being instrumented unless this\n+    // instrumentation would take effect (unless something else\n+    // instruments it).\n+    return hasClassesNamed(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return Collections.singletonMap(Runnable.class.getName(), State.class.getName());\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDg2MTk5", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#pullrequestreview-507486199", "createdAt": "2020-10-13T14:17:55Z", "commit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxNzo1NlrOHgpISQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxNzo1NlrOHgpISQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5MDM0NQ==", "bodyText": "Can you elaborate on how this collaboration works in this comment for future people who might be working in here", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503990345", "createdAt": "2020-10-13T14:17:56Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinExecutorTaskInstrumentation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package datadog.trace.instrumentation.akka.concurrent;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask requires special treatment and can't\n+ * be handled generically despite being a subclass of akka.dispatch.ForkJoinTask, because of its\n+ * error handling.\n+ *\n+ * <p>This instrumentation collaborates with AkkaWrappedRunnableInstrumentation; its responsibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDg4NzY5", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#pullrequestreview-507488769", "createdAt": "2020-10-13T14:20:17Z", "commit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyMDoxN1rOHgpP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyMDoxN1rOHgpP3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5MjI4NQ==", "bodyText": "This is incorrect - both need to be instrumented to be correct with work-stealing", "url": "https://github.com/DataDog/dd-trace-java/pull/1977#discussion_r503992285", "createdAt": "2020-10-13T14:20:17Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinTaskInstrumentation.java", "diffHunk": "@@ -41,19 +43,20 @@ public AkkaForkJoinTaskInstrumentation() {\n \n   @Override\n   public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return named(\"akka.dispatch.forkjoin.ForkJoinTask\");\n+    return extendsClass(named(\"akka.dispatch.forkjoin.ForkJoinTask\"))\n+        .and(not(named(\"akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask\")));\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n     Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>(4);\n-    transformers.put(isMethod().and(named(\"doExec\")), getClass().getName() + \"$DoExec\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6666d161367fd47312438de2ea91c73ea3ecbc"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e46cb9104e64591b620de76fa0c380697fdea21", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7e46cb9104e64591b620de76fa0c380697fdea21", "committedDate": "2020-10-13T14:40:00Z", "message": "merge instrumentations"}, "afterCommit": {"oid": "2dba20944b292e7b3441e1d319623f58d38ae707", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2dba20944b292e7b3441e1d319623f58d38ae707", "committedDate": "2020-10-13T18:27:11Z", "message": "merge instrumentations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2dba20944b292e7b3441e1d319623f58d38ae707", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2dba20944b292e7b3441e1d319623f58d38ae707", "committedDate": "2020-10-13T18:27:11Z", "message": "merge instrumentations"}, "afterCommit": {"oid": "fe3377e9250900194b86a7aaf328d125ea349bb6", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fe3377e9250900194b86a7aaf328d125ea349bb6", "committedDate": "2020-10-14T07:02:40Z", "message": "merge instrumentations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d9f26bfd0f7125dff04f2971951d6437f1180ab", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7d9f26bfd0f7125dff04f2971951d6437f1180ab", "committedDate": "2020-10-14T11:31:12Z", "message": "instrument ExecutionContext, wrap Runnable in akka-concurrent"}, "afterCommit": {"oid": "fb78748eea00b4a8c92a4bec48fe36109e2daf29", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fb78748eea00b4a8c92a4bec48fe36109e2daf29", "committedDate": "2020-10-14T11:50:29Z", "message": "add test for dispatcher propagation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a1dba91625f46645f36854978e03f82efc787d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/65a1dba91625f46645f36854978e03f82efc787d", "committedDate": "2020-10-14T16:13:33Z", "message": "disable instrumentation akka dispatchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5008301e7547355134c442ea69a07e3d1a331c1", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f5008301e7547355134c442ea69a07e3d1a331c1", "committedDate": "2020-10-14T16:13:33Z", "message": "enough specialised instrumentation of Akka executors not to rely on generic Executor/Runnable instrumentation from java-concurrent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a364d2ccb39a998f457c611d3a895123ea358bf0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a364d2ccb39a998f457c611d3a895123ea358bf0", "committedDate": "2020-10-14T16:13:34Z", "message": "don't assert inverse for ancient versions of Akka because some but not all akka-concurrent instrumentations pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40214eee33964bf351561277c4b59bc64f04f8c2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/40214eee33964bf351561277c4b59bc64f04f8c2", "committedDate": "2020-10-14T16:13:34Z", "message": "add testing for ForkJoinExecutorConfigurator.AkkaForkJoinPool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae51423ec521b194159b5957bb3db2d30cf074b0", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ae51423ec521b194159b5957bb3db2d30cf074b0", "committedDate": "2020-10-14T16:13:34Z", "message": "merge instrumentations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "committedDate": "2020-10-14T16:13:34Z", "message": "add test for dispatcher propagation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb78748eea00b4a8c92a4bec48fe36109e2daf29", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fb78748eea00b4a8c92a4bec48fe36109e2daf29", "committedDate": "2020-10-14T11:50:29Z", "message": "add test for dispatcher propagation"}, "afterCommit": {"oid": "0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0ff5644eecd7ed36b3c9ac7672a52cd7092e7c13", "committedDate": "2020-10-14T16:13:34Z", "message": "add test for dispatcher propagation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2962, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}