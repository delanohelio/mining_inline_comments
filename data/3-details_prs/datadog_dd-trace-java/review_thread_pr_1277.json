{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMTI3Nzkz", "number": 1277, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozOToxM1rODkbt_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzowODoyOVrODkdSeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTI5NDcwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozOToxM1rOFwwO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozOToxM1rOFwwO-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NjIzNA==", "bodyText": "This actually may be a bug uncovered by this test", "url": "https://github.com/DataDog/dd-trace-java/pull/1277#discussion_r386666234", "createdAt": "2020-03-02T21:39:13Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * Additional global matchers that are used to reduce number of classes we try to apply expensive\n+ * matchers to.\n+ *\n+ * <p>This is separated from {@link GlobalIgnoresMatcher} to allow for better testing. The idea is\n+ * that we should be able to remove this matcher from the agent and all tests should still pass.\n+ * Moreover, no classes matched by this matcher should be modified during test run.\n+ */\n+public class AdditionalLibraryIgnoresMatcher<T extends TypeDescription>\n+    extends ElementMatcher.Junction.AbstractBase<T> {\n+\n+  public static <T extends TypeDescription> Junction<T> additionalLibraryIgnoresMatcher() {\n+    return new AdditionalLibraryIgnoresMatcher<>();\n+  }\n+\n+  /**\n+   * Be very careful about the types of matchers used in this section as they are called on every\n+   * class load, so they must be fast. Generally speaking try to only use name matchers as they\n+   * don't have to load additional info.\n+   */\n+  @Override\n+  public boolean matches(final T target) {\n+    final String name = target.getActualName();\n+\n+    if (name.startsWith(\"org.springframework.aop.\")\n+        || name.startsWith(\"org.springframework.beans.factory.annotation.\")\n+        || name.startsWith(\"org.springframework.beans.factory.config.\")\n+        || name.startsWith(\"org.springframework.beans.factory.parsing.\")\n+        || name.startsWith(\"org.springframework.beans.factory.xml.\")\n+        || name.startsWith(\"org.springframework.beans.propertyeditors.\")\n+        || name.startsWith(\"org.springframework.boot.autoconfigure.cache.\")\n+        || name.startsWith(\"org.springframework.boot.autoconfigure.condition.\")\n+        || name.startsWith(\"org.springframework.boot.autoconfigure.http.\")\n+        || name.startsWith(\"org.springframework.boot.autoconfigure.jackson.\")\n+        || name.startsWith(\"org.springframework.boot.autoconfigure.web.\")\n+        || name.startsWith(\"org.springframework.boot.context.\")\n+        || name.startsWith(\"org.springframework.boot.convert.\")\n+        || name.startsWith(\"org.springframework.boot.diagnostics.\")\n+        || name.startsWith(\"org.springframework.boot.web.server.\")\n+        || name.startsWith(\"org.springframework.boot.web.servlet.\")\n+        || name.startsWith(\"org.springframework.context.annotation.\")\n+        || name.startsWith(\"org.springframework.context.event.\")\n+        || name.startsWith(\"org.springframework.context.expression.\")\n+        || name.startsWith(\"org.springframework.core.annotation.\")\n+        || name.startsWith(\"org.springframework.core.convert.\")\n+        || name.startsWith(\"org.springframework.core.env.\")\n+        || name.startsWith(\"org.springframework.core.io.\")\n+        || name.startsWith(\"org.springframework.core.type.\")\n+        || name.startsWith(\"org.springframework.expression.\")\n+        || name.startsWith(\"org.springframework.format.\")\n+        || name.startsWith(\"org.springframework.ui.\")\n+        || name.startsWith(\"org.springframework.validation.\")\n+        || name.startsWith(\"org.springframework.web.context.\")\n+        || name.startsWith(\"org.springframework.web.filter.\")\n+        || name.startsWith(\"org.springframework.web.method.\")\n+        || name.startsWith(\"org.springframework.web.multipart.\")\n+        || name.startsWith(\"org.springframework.web.util.\")) {\n+      return true;\n+    }\n+\n+    // Dynamic proxy classes we should not touch\n+    if (name.startsWith(\"org.springframework.core.$Proxy\")) {\n+      return true;\n+    }\n+\n+    if (name.startsWith(\"org.springframework.cglib.\")) {\n+      // This class contains nested Callable instance that we'd happily not touch, but unfortunately\n+      // our field injection code is not flexible enough to realize that, so instead\n+      // we instrument this Callable to make tests happy.\n+      if (name.startsWith(\"org.springframework.cglib.core.internal.LoadingCache$\")) {\n+        return false;\n+      }\n+\n+      return true;\n+    }\n+\n+    if (name.startsWith(\"org.springframework.http.\")) {\n+      // There are some Mono implementation that get instrumented\n+      if (name.startsWith(\"org.springframework.http.server.reactive.\")) {\n+        return false;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22ce02762b9b6ed327bc994c9a5d45224455b1e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTU1MTkyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentInstaller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzowODoyOVrOFwyrzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoyOTo1M1rOFxD2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwNjM4Mw==", "bodyText": "Rename to addAdditionalLibraryIgnores?  The current name doesn't match what it's doing.", "url": "https://github.com/DataDog/dd-trace-java/pull/1277#discussion_r386706383", "createdAt": "2020-03-02T23:08:29Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentInstaller.java", "diffHunk": "@@ -67,10 +71,17 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n             // FIXME: we cannot enable it yet due to BB/JVM bug, see\n             // https://github.com/raphw/byte-buddy/issues/558\n             // .with(AgentBuilder.LambdaInstrumentationStrategy.ENABLED)\n-            .ignore(any(), skipClassLoader())\n-            .or(globalIgnoresMatcher())\n-            .or(matchesConfiguredExcludes());\n+            .ignore(any(), skipClassLoader());\n+    if (skipAdditionalLibraryMatcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e22ce02762b9b6ed327bc994c9a5d45224455b1e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4NzUyMQ==", "bodyText": "I think the name is actually correct. I've added and additional comment there. Please let me know if that makes sense.", "url": "https://github.com/DataDog/dd-trace-java/pull/1277#discussion_r386987521", "createdAt": "2020-03-03T12:29:53Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentInstaller.java", "diffHunk": "@@ -67,10 +71,17 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n             // FIXME: we cannot enable it yet due to BB/JVM bug, see\n             // https://github.com/raphw/byte-buddy/issues/558\n             // .with(AgentBuilder.LambdaInstrumentationStrategy.ENABLED)\n-            .ignore(any(), skipClassLoader())\n-            .or(globalIgnoresMatcher())\n-            .or(matchesConfiguredExcludes());\n+            .ignore(any(), skipClassLoader());\n+    if (skipAdditionalLibraryMatcher) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwNjM4Mw=="}, "originalCommit": {"oid": "e22ce02762b9b6ed327bc994c9a5d45224455b1e"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 362, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}