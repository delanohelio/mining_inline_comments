{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjQ3MjEx", "number": 1462, "title": "Minor ScopeManager cleanup", "bodyText": "I wanted to do more, but was limited by the fact that we allow access to the current scope.", "createdAt": "2020-05-14T21:08:04Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1462", "merged": true, "mergeCommit": {"oid": "4c6153c7aa108430c5607e1124f6307c60b42c10"}, "closed": true, "closedAt": "2020-05-15T18:12:06Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchUfGLgH2gAyNDE4MjQ3MjExOjIxMmQxYjE1OTFjOTAwNTA4Njk4ZTI3Y2UxYmMwNDkyYmVkODNhODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchlmpagFqTQxMjgzOTc5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "212d1b1591c900508698e27ce1bc0492bed83a84", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/212d1b1591c900508698e27ce1bc0492bed83a84", "committedDate": "2020-05-14T21:37:39Z", "message": "Reduce dependency on concrete types in PendingTrace and ContinuableScope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/16936cd729f709c74f41097bac5b42037d9ba9fd", "committedDate": "2020-05-14T21:37:39Z", "message": "Remove SimpleScope"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4f3f3c6ef2db7d3481d5384461f0913e265ba17", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f4f3f3c6ef2db7d3481d5384461f0913e265ba17", "committedDate": "2020-05-14T20:56:42Z", "message": "Remove SimpleScope"}, "afterCommit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/16936cd729f709c74f41097bac5b42037d9ba9fd", "committedDate": "2020-05-14T21:37:39Z", "message": "Remove SimpleScope"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzk0NTM1", "url": "https://github.com/DataDog/dd-trace-java/pull/1462#pullrequestreview-412394535", "createdAt": "2020-05-15T07:02:15Z", "commit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzowNzo0NFrOGV5AbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyMDoxMFrOGV5VaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNzI3Ng==", "bodyText": "Wasn't introduced in this PR but this is common throughout this code base. this must not escape constructors because there are no guarantees about what state the object is in until the constructor exits. IMO a clean up of this class should address this problem.", "url": "https://github.com/DataDog/dd-trace-java/pull/1462#discussion_r425607276", "createdAt": "2020-05-15T07:07:44Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScope.java", "diffHunk": "@@ -145,25 +146,25 @@ public String toString() {\n    * maintain private constructor access.\n    */\n   @Slf4j // This is important to prevent the log messages below from referencing the super class.\n-  public static class Continuation implements TraceScope.Continuation {\n-    public WeakReference<Continuation> ref;\n+  public static class Continuation implements AgentScope.Continuation {\n+    public WeakReference<AgentScope.Continuation> ref;\n \n-    private final DDSpan spanUnderScope;\n+    private final AgentSpan spanUnderScope;\n     private final ContextualScopeManager scopeManager;\n     private final DDScopeEventFactory eventFactory;\n \n-    private final PendingTrace trace;\n+    private final AgentTrace trace;\n     private final AtomicBoolean used = new AtomicBoolean(false);\n \n     private Continuation(\n-        final DDSpan spanUnderScope,\n+        final AgentSpan spanUnderScope,\n         final ContextualScopeManager scopeManager,\n         final DDScopeEventFactory eventFactory) {\n \n       this.spanUnderScope = spanUnderScope;\n       this.scopeManager = scopeManager;\n       this.eventFactory = eventFactory;\n-      final DDSpanContext context = this.spanUnderScope.context();\n+      final AgentSpan.Context context = this.spanUnderScope.context();\n       trace = context.getTrace();\n       trace.registerContinuation(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNzgwNQ==", "bodyText": "this should not escape.", "url": "https://github.com/DataDog/dd-trace-java/pull/1462#discussion_r425607805", "createdAt": "2020-05-15T07:09:05Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/scopemanager/ContinuableScope.java", "diffHunk": "@@ -190,5 +191,23 @@ public void cancel() {\n         log.debug(\"Failed to close continuation {}. Already used.\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMjU0Mw==", "bodyText": "Should be wrapped in log.isDebugEnabled() because this hits a vararg overload and allocates an Object[]", "url": "https://github.com/DataDog/dd-trace-java/pull/1462#discussion_r425612543", "createdAt": "2020-05-15T07:19:58Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -174,12 +175,11 @@ public DDSpan getRootSpan() {\n    * When using continuations, it's possible one may be used after all existing spans are otherwise\n    * completed, so we need to wait till continuations are de-referenced before reporting.\n    */\n-  public void registerContinuation(final ContinuableScope.Continuation continuation) {\n+  @Override\n+  public void registerContinuation(final AgentScope.Continuation continuation) {\n     synchronized (continuation) {\n-      if (continuation.ref == null) {\n-        continuation.ref =\n-            new WeakReference<ContinuableScope.Continuation>(continuation, referenceQueue);\n-        weakReferences.add(continuation.ref);\n+      if (!continuation.isRegistered()) {\n+        weakReferences.add(continuation.register(referenceQueue));\n         final int count = pendingReferenceCount.incrementAndGet();\n         log.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxMjY0OQ==", "bodyText": "It's good to know this reference won't be reassigned in the next two lines of the method!", "url": "https://github.com/DataDog/dd-trace-java/pull/1462#discussion_r425612649", "createdAt": "2020-05-15T07:20:10Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -23,10 +24,10 @@\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n-public class PendingTrace extends ConcurrentLinkedDeque<DDSpan> {\n+public class PendingTrace extends ConcurrentLinkedDeque<DDSpan> implements AgentTrace {\n \n   static PendingTrace create(final CoreTracer tracer, final BigInteger traceId) {\n-    PendingTrace pendingTrace = new PendingTrace(tracer, traceId);\n+    final PendingTrace pendingTrace = new PendingTrace(tracer, traceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16936cd729f709c74f41097bac5b42037d9ba9fd"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe3d968ecadfec170ae07c76bb260e62a2b0dd8", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bbe3d968ecadfec170ae07c76bb260e62a2b0dd8", "committedDate": "2020-05-15T17:25:00Z", "message": "Prevent Continuation instance from escaping in constructor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODM5Nzk2", "url": "https://github.com/DataDog/dd-trace-java/pull/1462#pullrequestreview-412839796", "createdAt": "2020-05-15T17:34:17Z", "commit": {"oid": "bbe3d968ecadfec170ae07c76bb260e62a2b0dd8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2502, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}