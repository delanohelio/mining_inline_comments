{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNTYxMDk5", "number": 1643, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxOToxNVrOEKk7JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNDoyOFrOEKojwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTI2MTgxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxOToxNVrOGrsvyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoyMzo1MlrOGrs6xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3NTA4Mw==", "bodyText": "Can't you do a break here as well as in the other non matching ones?", "url": "https://github.com/DataDog/dd-trace-java/pull/1643#discussion_r448475083", "createdAt": "2020-07-01T16:19:15Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -47,129 +47,145 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"datadog.opentracing.\")\n-        || name.startsWith(\"datadog.trace.core.\")\n-        || name.startsWith(\"datadog.slf4j.\")\n-        || name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.newrelic.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+      case 'b' - 'a':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ced6805f70f33aef44f2e3df02c2eff85a3057b8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3Nzg5Mg==", "bodyText": "Can't believe I missed that, will measure again.", "url": "https://github.com/DataDog/dd-trace-java/pull/1643#discussion_r448477892", "createdAt": "2020-07-01T16:23:52Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -47,129 +47,145 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"datadog.opentracing.\")\n-        || name.startsWith(\"datadog.trace.core.\")\n-        || name.startsWith(\"datadog.slf4j.\")\n-        || name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.newrelic.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+      case 'b' - 'a':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3NTA4Mw=="}, "originalCommit": {"oid": "ced6805f70f33aef44f2e3df02c2eff85a3057b8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg1Mzc0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyMzoxNVrOGryhMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyMzoxNVrOGryhMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2OTY0OA==", "bodyText": "what happens if the case doesn't start with 0?", "url": "https://github.com/DataDog/dd-trace-java/pull/1643#discussion_r448569648", "createdAt": "2020-07-01T19:23:15Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -47,129 +47,159 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"datadog.opentracing.\")\n-        || name.startsWith(\"datadog.trace.core.\")\n-        || name.startsWith(\"datadog.slf4j.\")\n-        || name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.newrelic.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-    // clojure\n-    if (name.startsWith(\"clojure.\") || name.contains(\"$fn__\")) {\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"datadog.trace.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\"datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d36a51065888172dcea195726eff2ad196e15e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg1NzMwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNDoyOFrOGryjbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNDoyOFrOGryjbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MDIyMA==", "bodyText": "can these all fall through to the last break?  (does the break need to be duplicated?)", "url": "https://github.com/DataDog/dd-trace-java/pull/1643#discussion_r448570220", "createdAt": "2020-07-01T19:24:28Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/GlobalIgnoresMatcher.java", "diffHunk": "@@ -47,129 +47,159 @@ private GlobalIgnoresMatcher(final boolean skipAdditionalLibraryMatcher) {\n   @Override\n   public boolean matches(final T target) {\n     final String name = target.getActualName();\n-\n-    if (name.startsWith(\"datadog.opentracing.\")\n-        || name.startsWith(\"datadog.trace.core.\")\n-        || name.startsWith(\"datadog.slf4j.\")\n-        || name.startsWith(\"net.bytebuddy.\")\n-        || name.startsWith(\"jdk.\")\n-        || name.startsWith(\"org.aspectj.\")\n-        || name.startsWith(\"com.intellij.rt.debugger.\")\n-        || name.startsWith(\"com.p6spy.\")\n-        || name.startsWith(\"com.newrelic.\")\n-        || name.startsWith(\"com.dynatrace.\")\n-        || name.startsWith(\"com.jloadtrace.\")\n-        || name.startsWith(\"com.appdynamics.\")\n-        || name.startsWith(\"com.singularity.\")\n-        || name.startsWith(\"com.jinspired.\")\n-        || name.startsWith(\"org.jinspired.\")) {\n-      return true;\n-    }\n-\n-    // groovy\n-    if (name.startsWith(\"org.groovy.\") || name.startsWith(\"org.apache.groovy.\")) {\n-      return true;\n-    }\n-    if (name.startsWith(\"org.codehaus.groovy.\")) {\n-      // We seem to instrument some classes in runtime\n-      if (name.startsWith(\"org.codehaus.groovy.runtime.\")) {\n-        return false;\n-      }\n-      return true;\n-    }\n-    // clojure\n-    if (name.startsWith(\"clojure.\") || name.contains(\"$fn__\")) {\n-      return true;\n-    }\n-\n-    if (name.startsWith(\"datadog.trace.\")) {\n-      // FIXME: We should remove this once\n-      // https://github.com/raphw/byte-buddy/issues/558 is fixed\n-      if (name.equals(\"datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n-          || name.equals(\n-              \"datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper\")) {\n-        return false;\n-      }\n-      return true;\n+    switch (name.charAt(0) - 'a') {\n+        // starting at zero to get a tableswitch from javac, though it looks horrendous\n+      case 'a' - 'a':\n+        break;\n+      case 'b' - 'a':\n+        break;\n+      case 'c' - 'a':\n+        if (name.startsWith(\"com.\")) {\n+          if (name.startsWith(\"com.p6spy.\")\n+              || name.startsWith(\"com.newrelic.\")\n+              || name.startsWith(\"com.dynatrace.\")\n+              || name.startsWith(\"com.jloadtrace.\")\n+              || name.startsWith(\"com.appdynamics.\")\n+              || name.startsWith(\"com.singularity.\")\n+              || name.startsWith(\"com.jinspired.\")\n+              || name.startsWith(\"com.intellij.rt.debugger.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"com.sun.\")) {\n+            return !name.startsWith(\"com.sun.messaging.\")\n+                && !name.startsWith(\"com.sun.jersey.api.client\");\n+          }\n+          if (COM_MCHANGE_PROXY.matcher(name).matches()) {\n+            return true;\n+          }\n+        }\n+        if (name.startsWith(\"clojure.\")) {\n+          return true;\n+        }\n+        break;\n+      case 'd' - 'a':\n+        if (name.startsWith(\"datadog.\")) {\n+          if (name.startsWith(\"datadog.opentracing.\")\n+              || name.startsWith(\"datadog.trace.core.\")\n+              || name.startsWith(\"datadog.slf4j.\")) {\n+            return true;\n+          }\n+          if (name.startsWith(\"datadog.trace.\")) {\n+            // FIXME: We should remove this once\n+            // https://github.com/raphw/byte-buddy/issues/558 is fixed\n+            return !name.equals(\n+                    \"datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper\")\n+                && !name.equals(\n+                    \"datadog.trace.bootstrap.instrumentation.java.concurrent.CallableWrapper\");\n+          }\n+        }\n+        break;\n+      case 'e' - 'a':\n+        break;\n+      case 'f' - 'a':\n+        break;\n+      case 'g' - 'a':\n+        break;\n+      case 'h' - 'a':\n+        break;\n+      case 'i' - 'a':\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d36a51065888172dcea195726eff2ad196e15e"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 108, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}