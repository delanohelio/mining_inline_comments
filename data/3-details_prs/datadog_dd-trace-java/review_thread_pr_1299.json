{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDg0MDQw", "number": 1299, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMDo0NFrODlmmEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxOTowNlrODl2tXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU2MjQzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/commons-httpclient-3/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMDo0NFrOFylzbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMDo0NFrOFylzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MjQ5Mg==", "bodyText": "Will need to be resolved with #1298.", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388592492", "createdAt": "2020-03-05T22:00:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package datadog.trace.instrumentation.commonshttpclient;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.classLoaderHasNoResources;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.extendsClass;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.commonshttpclient.CommonsHttpClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.commonshttpclient.HttpHeadersInjectAdapter.SETTER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.CallDepthThreadLocalMap;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n+\n+@AutoService(Instrumenter.class)\n+public class CommonsHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public CommonsHttpClientInstrumentation() {\n+    super(\"commons-http-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"org/apache/commons/httpclient/HttpClient.class\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU2NjI1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/commons-httpclient-3/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMTo0NFrOFyl1gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMTo0NFrOFyl1gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzAyNA==", "bodyText": "I don't think this was ever used with AWS client, so this is prob unnecessary.", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388593024", "createdAt": "2020-03-05T22:01:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package datadog.trace.instrumentation.commonshttpclient;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.classLoaderHasNoResources;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.extendsClass;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.commonshttpclient.CommonsHttpClientDecorator.DECORATE;\n+import static datadog.trace.instrumentation.commonshttpclient.HttpHeadersInjectAdapter.SETTER;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.CallDepthThreadLocalMap;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.apache.commons.httpclient.HttpClient;\n+import org.apache.commons.httpclient.HttpMethod;\n+\n+@AutoService(Instrumenter.class)\n+public class CommonsHttpClientInstrumentation extends Instrumenter.Default {\n+\n+  public CommonsHttpClientInstrumentation() {\n+    super(\"commons-http-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return not(classLoaderHasNoResources(\"org/apache/commons/httpclient/HttpClient.class\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return extendsClass(named(\"org.apache.commons.httpclient.HttpClient\"));\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      \"datadog.trace.agent.decorator.BaseDecorator\",\n+      \"datadog.trace.agent.decorator.ClientDecorator\",\n+      \"datadog.trace.agent.decorator.HttpClientDecorator\",\n+      packageName + \".CommonsHttpClientDecorator\",\n+      packageName + \".HttpHeadersInjectAdapter\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"executeMethod\"))\n+            .and(takesArguments(3))\n+            .and(takesArgument(1, named(\"org.apache.commons.httpclient.HttpMethod\"))),\n+        CommonsHttpClientInstrumentation.class.getName() + \"$ExecAdvice\");\n+  }\n+\n+  public static class ExecAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope methodEnter(@Advice.Argument(1) final HttpMethod httpMethod) {\n+      final int callDepth = CallDepthThreadLocalMap.incrementCallDepth(HttpClient.class);\n+      if (callDepth > 0) {\n+        return null;\n+      }\n+\n+      final AgentSpan span = startSpan(\"http.request\");\n+      final AgentScope scope = activateSpan(span, true);\n+\n+      DECORATE.afterStart(span);\n+      DECORATE.onRequest(span, httpMethod);\n+\n+      final boolean awsClientCall =\n+          httpMethod.getRequestHeaders(\"amz-sdk-invocation-id\").length > 0;\n+      // AWS calls are often signed, so we can't add headers without breaking the signature.\n+      if (!awsClientCall) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU3MDE4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMzowNVrOFyl37w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMzowNVrOFyl37w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzY0Nw==", "bodyText": "SO OLD....", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388593647", "createdAt": "2020-03-05T22:03:05Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+muzzle {\n+  // There are lots of weird versions in this project like \"20020423\"\n+  // Keep things simple with just 3.x\n+  pass {\n+    group = \"commons-httpclient\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU3NjIwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNTowNlrOFyl7cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozNDowNVrOFyn5rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDU0NQ==", "bodyText": "I'm not sure if this works... I think you need something like `[3.0,].  I could be wrong though.", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388594545", "createdAt": "2020-03-05T22:05:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+muzzle {\n+  // There are lots of weird versions in this project like \"20020423\"\n+  // Keep things simple with just 3.x\n+  pass {\n+    group = \"commons-httpclient\"\n+    module = \"commons-httpclient\"\n+    versions = \"3.+\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNjg2Mw==", "bodyText": "You're right.  It doesn't work", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388626863", "createdAt": "2020-03-05T23:34:05Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+muzzle {\n+  // There are lots of weird versions in this project like \"20020423\"\n+  // Keep things simple with just 3.x\n+  pass {\n+    group = \"commons-httpclient\"\n+    module = \"commons-httpclient\"\n+    versions = \"3.+\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDU0NQ=="}, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU3NzgyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNTo0MVrOFyl8gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMzozNDo0MVrOFyn6Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDgxNg==", "bodyText": "Assert inverse?", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388594816", "createdAt": "2020-03-05T22:05:41Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+muzzle {\n+  // There are lots of weird versions in this project like \"20020423\"\n+  // Keep things simple with just 3.x\n+  pass {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYyNzAxMQ==", "bodyText": "Added and discovered it works fine with 2.0", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388627011", "createdAt": "2020-03-05T23:34:41Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-3/commons-httpclient-3.gradle", "diffHunk": "@@ -0,0 +1,26 @@\n+muzzle {\n+  // There are lots of weird versions in this project like \"20020423\"\n+  // Keep things simple with just 3.x\n+  pass {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDgxNg=="}, "originalCommit": {"oid": "2662379bbf1944b359545d07abfb7d9b41664d99"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDIwMjU0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/commons-httpclient-2/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxOTowNlrOFy-nbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjoxOTowNlrOFy-nbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5OTAyMA==", "bodyText": "Unfortunate there isn't a direct way to do this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1299#discussion_r388999020", "createdAt": "2020-03-06T16:19:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/commons-httpclient-2/src/main/java/datadog/trace/instrumentation/commonshttpclient/CommonsHttpClientDecorator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.instrumentation.commonshttpclient;\n+\n+import datadog.trace.agent.decorator.HttpClientDecorator;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import org.apache.commons.httpclient.HttpMethod;\n+import org.apache.commons.httpclient.StatusLine;\n+import org.apache.commons.httpclient.URIException;\n+\n+public class CommonsHttpClientDecorator extends HttpClientDecorator<HttpMethod, HttpMethod> {\n+  public static final CommonsHttpClientDecorator DECORATE = new CommonsHttpClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"commons-http-client\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"commons-http-client\";\n+  }\n+\n+  @Override\n+  protected String method(final HttpMethod httpMethod) {\n+    return httpMethod.getName();\n+  }\n+\n+  @Override\n+  protected URI url(final HttpMethod httpMethod) throws URISyntaxException {\n+    try {\n+      //  org.apache.commons.httpclient.URI -> java.net.URI\n+      return new URI(httpMethod.getURI().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5538021ea6a720d3d3b76e69c3c32d6b2dd25d0a"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 387, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}