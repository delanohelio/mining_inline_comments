{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDQ1NDc4", "number": 1760, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo0NTozNFrOEXE2Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo1MDo0NlrOEXGF0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjMyMTU4OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo0NTozNFrOG-qeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNjo0NTozNFrOG-qeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM2MDc4OA==", "bodyText": "Nice change", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468360788", "createdAt": "2020-08-11T06:45:34Z", "author": {"login": "bantonsson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);\n   }\n \n-  /**\n-   * Returns a <code>byte[]</code> representing the UTF8 encoding of the wrapped {@code String}.\n-   * Please note that the same <code>byte[]</code> will be returned on each call, and the caller is\n-   * bound by honor, and the fear of purgatory, to not modify the <code>byte[]</code>.\n-   *\n-   * @return the byte array of the UTF8 encode string\n-   */\n-  public byte[] getUtf8Bytes() {\n-    byte[] bytes = this.utf8Bytes;\n-    // This race condition is intentional and benign.\n-    // The worst that can happen is that an identical value is produced and written into the field.\n-    if (bytes == null) {\n-      this.utf8Bytes = bytes = this.string.getBytes(StandardCharsets.UTF_8);\n-    }\n-    return bytes;\n+  /** Writes the UTF8 encoding of the wrapped {@code String}. */\n+  public void transferTo(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjUxMjgwOnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo0NzowNlrOG-sQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODozMTozMFrOG-tyCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTk1NA==", "bodyText": "So this no longer matches up to the comment on the line above it. We cache UTF8BytesStringin a WeakMap in datadog.trace.instrumentation.jdbc.JDBCMaps, and as far as I can tell from running some experiments, only the key is treated as a weak reference, and if we don't make a copy String here, nothing will ever be removed from that map.", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468389954", "createdAt": "2020-08-11T07:47:06Z", "author": {"login": "bantonsson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -13,7 +20,7 @@ public static UTF8BytesString create(String string) {\n     } else {\n       // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n       // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(new String(string));\n+      return new UTF8BytesString(string);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5Nzc5NA==", "bodyText": "Sorry this was an automated refactor suggested by IDEA, I'll roll it back.", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468397794", "createdAt": "2020-08-11T08:01:26Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -13,7 +20,7 @@ public static UTF8BytesString create(String string) {\n     } else {\n       // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n       // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(new String(string));\n+      return new UTF8BytesString(string);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTk1NA=="}, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQxNDk4Ng==", "bodyText": "Do you mean the private constructor? The other create method hopefully does the right thing by calling this method for String.", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468414986", "createdAt": "2020-08-11T08:31:30Z", "author": {"login": "bantonsson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -13,7 +20,7 @@ public static UTF8BytesString create(String string) {\n     } else {\n       // To make sure that we don't get an infinite circle in weak caches that are indexed on this\n       // very String, we create a new wrapper String that we hold on to instead.\n-      return new UTF8BytesString(new String(string));\n+      return new UTF8BytesString(string);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM4OTk1NA=="}, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjUyNDk2OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzo1MDo0NlrOG-sXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMToyNzoyNFrOG-zkXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA==", "bodyText": "I'm a bit afraid that we might leak things here if this gets used from the wrong place. Should there be a more ominous name for creating a UTF8BytesString that is allocated this way?", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468391844", "createdAt": "2020-08-11T07:50:46Z", "author": {"login": "bantonsson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5ODUxMg==", "bodyText": "Yes, we could, my intention was that we would use this lots for constants, or things we cache because we think they're effectively constant. In the comparatively rare case that we put something unusual in trace, we'd just use String", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468398512", "createdAt": "2020-08-11T08:02:54Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5OTAxNg==", "bodyText": "Two separate methods calling in to different constructors might be a good idea indeed", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468399016", "createdAt": "2020-08-11T08:03:59Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ4OTM4OQ==", "bodyText": "Addressed this, there's now a createConstant which copies the bytes into a \"page\". If we can move all constants over to using CharSequences I will use it to store them, and allocate constants at instrumentation load time, and remove the centralised \"string table\". This should eliminate a large number fo hash map lookups.", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468489389", "createdAt": "2020-08-11T10:45:03Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUwOTc4OA==", "bodyText": "Great. Removing the hash lookups is exactly where I was hoping that we'd end up!", "url": "https://github.com/DataDog/dd-trace-java/pull/1760#discussion_r468509788", "createdAt": "2020-08-11T11:27:24Z", "author": {"login": "bantonsson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/UTF8BytesString.java", "diffHunk": "@@ -29,28 +36,25 @@ public static UTF8BytesString create(CharSequence chars) {\n     }\n   }\n \n+  private static final Allocator ALLOCATOR = new Allocator();\n+\n   private final String string;\n   private byte[] utf8Bytes = null;\n+  private int offset;\n+  private int length;\n \n   private UTF8BytesString(String string) {\n     this.string = string;\n+    ALLOCATOR.allocate(string, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM5MTg0NA=="}, "originalCommit": {"oid": "6c7f7a18a359c22e365269fb5459e9758190a49e"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 8, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}