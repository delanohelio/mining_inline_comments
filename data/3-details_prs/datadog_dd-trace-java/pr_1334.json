{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjYzNzY0", "number": 1334, "title": "Multiple fixes for exception histogram", "bodyText": "Add limit to histogram size\nMake sure entries are removed in the same iteration they were used\nImprove tests\nFix configuration object initialization\nAdd tests for new config fields", "createdAt": "2020-03-23T22:09:07Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1334", "merged": true, "mergeCommit": {"oid": "07ce810d262958c9c5b85b234374296dd1b08940"}, "closed": true, "closedAt": "2020-03-25T14:30:12Z", "author": {"login": "mar-kolya"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQlvNBgH2gAyMzkyNjYzNzY0OmRkMDZlYmQ0ZTZjZDdhZjIxMGQ1MWU3MTY2N2Q2ZGI2ZGI5NWE0M2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRIAlAAH2gAyMzkyNjYzNzY0OjIxYTE1OTU2OGZhODNkMzAxOGJjMzdiMTNhMjc1MDM3MzljODhlNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dd06ebd4e6cd7af210d51e71667d6db6db95a43b", "committedDate": "2020-03-23T22:06:55Z", "message": "Multiple fixes for exception histogram\n\n* Add limit to histogram size\n* Make sure entries are removed in the same iteration they were used\n* Improve tests\n* Fix configuration object initialization\n* Add tests for new config fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTM2MDM2", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#pullrequestreview-380136036", "createdAt": "2020-03-24T09:34:22Z", "commit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTQ5OTAz", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#pullrequestreview-380149903", "createdAt": "2020-03-24T09:52:17Z", "commit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1MjoxN1rOF6ohag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowNDowMlrOF6o_Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNTY0Mg==", "bodyText": "This is for tests only. Should be at most package private.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397025642", "createdAt": "2020-03-24T09:52:17Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -11,39 +11,22 @@\n \n @Slf4j\n public class ExceptionHistogram {\n-  private final Map<String, AtomicLong> histoMap = new ConcurrentHashMap<>();\n-  private final EventType exceptionCountEventType;\n+  private final Map<String, AtomicLong> histogram = new ConcurrentHashMap<>();\n   private final int maxTopItems;\n-  private final boolean forceEnabled;\n-\n-  @FunctionalInterface\n-  interface ValueVisitor {\n-    void visit(String key, long value);\n-  }\n+  private final int maxSize;\n+  private final EventType exceptionCountEventType;\n+  private final Runnable eventHook;\n \n   ExceptionHistogram(final Config config) {\n-    this(config.getProfilingExceptionHistoMax(), false);\n-  }\n-\n-  ExceptionHistogram(final int maxTopItems, final boolean forceEnabled) {\n-    this.maxTopItems = maxTopItems;\n+    maxTopItems = config.getProfilingExceptionHistogramTopItems();\n+    maxSize = config.getProfilingExceptionHistogramMaxCollectionSize();\n     exceptionCountEventType = EventType.getEventType(ExceptionCountEvent.class);\n-    this.forceEnabled = forceEnabled;\n-\n-    FlightRecorder.addPeriodicEvent(ExceptionCountEvent.class, this::emit);\n-  }\n-\n-  private void emit() {\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n-      processAndReset(this::newExceptionCountEvent);\n-    }\n+    eventHook = this::emit;\n+    FlightRecorder.addPeriodicEvent(ExceptionCountEvent.class, eventHook);\n   }\n \n-  private void newExceptionCountEvent(final String type, final long count) {\n-    final ExceptionCountEvent event = new ExceptionCountEvent(type, count);\n-    if (event.shouldCommit()) {\n-      event.commit();\n-    }\n+  public void deregister() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMDQxNw==", "bodyText": "size() on concurrent structures can be rather expensive as it needs to merge data from all thread-local buckets.\nAdditionally, this check is not thread safe but in the worst case it will add extra N items where N is the number of concurrently accessing threads - so the overflow should not be too severe.\nWhat makes me nervous about this histogram size clipping is that it may produce incorrect data once new items are refused. To make things worse the information about clipping will be available only in the customer logs so our analysis operating on JFR only will have no clue that the histogram may be garbage.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397030417", "createdAt": "2020-03-24T09:59:33Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -53,13 +36,19 @@ public boolean record(final Exception exception) {\n     return record(exception.getClass().getCanonicalName());\n   }\n \n-  boolean record(final String typeName) {\n-    if (typeName == null) {\n-      return false;\n-    }\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n+  private boolean record(final String typeName) {\n+    if (exceptionCountEventType.isEnabled()) {\n+      if (histogram.size() >= maxSize && !histogram.containsKey(typeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjA1MA==", "bodyText": "Well, with the size clipping it is totally confusing and basically can not be used since you can be getting quite random results depending on the histogram size limit and the number of unique type names of exceptions emitted during one chunk. Eg. all exception types which will not be added to the histogram will not be sampled on their first occurrence.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397032050", "createdAt": "2020-03-24T10:02:05Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -71,24 +60,41 @@ boolean record(final String typeName) {\n               })\n           .incrementAndGet();\n \n+      // FIXME: this 'first hit' logic is confusing and untested", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMzIzMA==", "bodyText": "IMO a unit test should not require all this JFR machinery to test just a simple in-memory data structure.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397033230", "createdAt": "2020-03-24T10:04:02Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/test/java/com/datadog/profiling/exceptions/ExceptionHistogramTest.java", "diffHunk": "@@ -1,70 +1,259 @@\n package com.datadog.profiling.exceptions;\n \n-import java.util.Arrays;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Assert;\n-import org.junit.jupiter.api.Assertions;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import com.google.common.collect.ImmutableSortedMap;\n+import datadog.trace.api.Config;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.Properties;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Recording;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.Attribute;\n+import org.openjdk.jmc.common.item.IAttribute;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n \n public class ExceptionHistogramTest {\n+\n+  private static final IAttribute<String> TYPE =\n+      Attribute.attr(\"type\", \"type\", \"Exception type\", UnitLookup.PLAIN_TEXT);\n+  private static final IAttribute<IQuantity> COUNT =\n+      Attribute.attr(\"count\", \"count\", \"Exception count\", UnitLookup.NUMBER);\n+\n+  private static final Comparator<Exception> EXCEPTION_COMPARATOR =\n+      new Comparator<>() {\n+        @Override\n+        public int compare(final Exception e1, final Exception e2) {\n+          return e1.getClass().getCanonicalName().compareTo(e2.getClass().getCanonicalName());\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+          return this == obj;\n+        }\n+      };\n+\n   private static final int MAX_ITEMS = 2;\n+  private static final int MAX_SIZE = 2;\n+\n+  private Recording recording;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c4a1c8fa65ef1d31a440b4dc99678ec0020179a", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1c4a1c8fa65ef1d31a440b4dc99678ec0020179a", "committedDate": "2020-03-24T11:00:32Z", "message": "Made deregister package private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e465dcb796d1010115774dda9729a80fc8fcdf44", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e465dcb796d1010115774dda9729a80fc8fcdf44", "committedDate": "2020-03-24T11:01:32Z", "message": "Remove logging left behind by accident"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5721f6e1edc28118e76560430322fac6f104f27", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b5721f6e1edc28118e76560430322fac6f104f27", "committedDate": "2020-03-24T11:08:25Z", "message": "Count 'clipped' exceptions and provide to provide information about histogram overflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "362006d57449f0ff57f46377f13452d6935d0b15", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/362006d57449f0ff57f46377f13452d6935d0b15", "committedDate": "2020-03-24T11:28:59Z", "message": "Update helper list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88471b749c6a8a2c3ff32f142fa7465de724b927", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/88471b749c6a8a2c3ff32f142fa7465de724b927", "committedDate": "2020-03-24T12:13:43Z", "message": "Use enablement config for exception instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b619a5f6153a68bacba68077b91f3467125fae4", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1b619a5f6153a68bacba68077b91f3467125fae4", "committedDate": "2020-03-24T12:51:23Z", "message": "Remove unneccessary dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8ceb258bc9dcc6a53700cf907a5b7fd69548763", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f8ceb258bc9dcc6a53700cf907a5b7fd69548763", "committedDate": "2020-03-24T12:51:32Z", "message": "Make sure samplier is initialized before using it\n\nException class can be loaded and instantiated before Sampler code had\na chance to initialize. This results in advice seeing null in static\nfield - so we have to check for that."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb9b38aa32a599e5098a248adf2bc778ad519c69", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cb9b38aa32a599e5098a248adf2bc778ad519c69", "committedDate": "2020-03-24T13:16:26Z", "message": "Merge branch 'jb/PROF-581_exceptions_sampler' into mar-kolya/exceptions-histogram-fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a43a009e95eafd06b63fd2e6ff77d859ed529eb", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8a43a009e95eafd06b63fd2e6ff77d859ed529eb", "committedDate": "2020-03-24T13:30:37Z", "message": "Make compiler happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b0de5efb4d7741eed8564559840bd8d5773b236", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1b0de5efb4d7741eed8564559840bd8d5773b236", "committedDate": "2020-03-24T14:13:04Z", "message": "Fix timing of chunk rotation is tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e05d10a2f2529768d01aaef953db85fae6a3e453", "committedDate": "2020-03-25T11:58:07Z", "message": "Merge branch 'master' into mar-kolya/exceptions-histogram-fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDk0MzI5", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#pullrequestreview-381094329", "createdAt": "2020-03-25T12:19:43Z", "commit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjoxOTo0M1rOF7Yc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjoxOTo0M1rOF7Yc8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA==", "bodyText": "Is this correct? When you remove this override the exception instrumentation will be enabled only if 'integrations' are enabled. IMO, exception profiling is not an integration, like netty or elasticsearch.\nMaybe I am missing something but this does not seem right.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397810930", "createdAt": "2020-03-25T12:19:43Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTA0OTc2", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#pullrequestreview-381104976", "createdAt": "2020-03-25T12:35:43Z", "commit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6313523d766c30cf95d4883a08df00329a20325", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a6313523d766c30cf95d4883a08df00329a20325", "committedDate": "2020-03-25T12:50:03Z", "message": "Merge branch 'jb/PROF-581_exceptions_sampler' into mar-kolya/exceptions-histogram-fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a159568fa83d3018bc37b13a27503739c88e70", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/21a159568fa83d3018bc37b13a27503739c88e70", "committedDate": "2020-03-25T14:02:40Z", "message": "Add missing helper"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2597, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}