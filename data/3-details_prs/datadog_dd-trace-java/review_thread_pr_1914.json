{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMTY2MjM2", "number": 1914, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzowOToxNFrOEniZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozMzo1MVrOEoCcKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODkzNDQ5OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/AgentSpan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzowOToxNFrOHYL3tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxMjowNFrOHYL9Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMjM1Ng==", "bodyText": "Should we change all the keys here to also be CharSequence?  (Perhaps this is already planned for a future pass?)", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495122356", "createdAt": "2020-09-25T17:09:14Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/AgentSpan.java", "diffHunk": "@@ -20,6 +20,8 @@\n   @Override\n   AgentSpan setTag(String key, String value);\n \n+  AgentSpan setTag(String key, CharSequence value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMzc2Mg==", "bodyText": "The problem with doing that is we expose a map with the keys, and that's a source-incompatible change (we'll need to make it at some point) and if you try it, it ripples everywhere.", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495123762", "createdAt": "2020-09-25T17:12:04Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/AgentSpan.java", "diffHunk": "@@ -20,6 +20,8 @@\n   @Override\n   AgentSpan setTag(String key, String value);\n \n+  AgentSpan setTag(String key, CharSequence value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMjM1Ng=="}, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk2NTgyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/SpringWebHttpServerDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxOToyOFrOHYMLgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozNToyM1rOHYMrWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNzQyNQ==", "bodyText": "nit: I think it would have been equivalent to do this inside the constructor instead.", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495127425", "createdAt": "2020-09-25T17:19:28Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/SpringWebHttpServerDecorator.java", "diffHunk": "@@ -39,14 +39,14 @@ public CharSequence apply(Pair<String, Object> input) {\n   private static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =\n       DDCaches.newFixedSizeCache(64);\n \n-  private final String component;\n+  private final CharSequence component;\n \n   public static final SpringWebHttpServerDecorator DECORATE =\n-      new SpringWebHttpServerDecorator(\"spring-web-controller\");\n+      new SpringWebHttpServerDecorator(UTF8BytesString.createConstant(\"spring-web-controller\"));\n   public static final SpringWebHttpServerDecorator DECORATE_RENDER =\n-      new SpringWebHttpServerDecorator(\"spring-webmvc\");\n+      new SpringWebHttpServerDecorator(UTF8BytesString.createConstant(\"spring-webmvc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTU3OQ==", "bodyText": "Since they are constants, and get allocated into a byte[] from which they can't be freed, I want to do this where they are declared, and never on unknown data, however close it is. We should never call createConstant on something not already constant.", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495135579", "createdAt": "2020-09-25T17:35:23Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/SpringWebHttpServerDecorator.java", "diffHunk": "@@ -39,14 +39,14 @@ public CharSequence apply(Pair<String, Object> input) {\n   private static final DDCache<Pair<String, Object>, CharSequence> RESOURCE_NAME_CACHE =\n       DDCaches.newFixedSizeCache(64);\n \n-  private final String component;\n+  private final CharSequence component;\n \n   public static final SpringWebHttpServerDecorator DECORATE =\n-      new SpringWebHttpServerDecorator(\"spring-web-controller\");\n+      new SpringWebHttpServerDecorator(UTF8BytesString.createConstant(\"spring-web-controller\"));\n   public static final SpringWebHttpServerDecorator DECORATE_RENDER =\n-      new SpringWebHttpServerDecorator(\"spring-webmvc\");\n+      new SpringWebHttpServerDecorator(UTF8BytesString.createConstant(\"spring-webmvc\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNzQyNQ=="}, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk4MjczOnYy", "diffSide": "LEFT", "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/CommonTagValues.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyNDo0N1rOHYMWDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozMzoxMVrOHYMnHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMDEyNQ==", "bodyText": "Are these handled in some other fashion now?", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495130125", "createdAt": "2020-09-25T17:24:47Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/CommonTagValues.java", "diffHunk": "@@ -1,12 +0,0 @@\n-package datadog.trace.bootstrap.instrumentation.api;\n-\n-public class CommonTagValues {\n-\n-  public static final String GET = \"GET\";\n-  public static final String PUT = \"PUT\";\n-  public static final String POST = \"POST\";\n-  public static final String DELETE = \"DELETE\";\n-\n-  public static final String TRUE = \"true\";\n-  public static final String FALSE = \"false\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNDQ5NA==", "bodyText": "no, they just aren't worth the lookups, they can be handled in future where they need to be", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495134494", "createdAt": "2020-09-25T17:33:11Z", "author": {"login": "richardstartin"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/CommonTagValues.java", "diffHunk": "@@ -1,12 +0,0 @@\n-package datadog.trace.bootstrap.instrumentation.api;\n-\n-public class CommonTagValues {\n-\n-  public static final String GET = \"GET\";\n-  public static final String PUT = \"PUT\";\n-  public static final String POST = \"POST\";\n-  public static final String DELETE = \"DELETE\";\n-\n-  public static final String TRUE = \"true\";\n-  public static final String FALSE = \"false\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMDEyNQ=="}, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk5ODg1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/twilio/src/main/java/datadog/trace/instrumentation/twilio/TwilioClientDecorator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyOTo0NlrOHYMgPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozMzo1NVrOHYMoiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMjczMw==", "bodyText": "Do the toStrings here make this counter productive?", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495132733", "createdAt": "2020-09-25T17:29:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/twilio/src/main/java/datadog/trace/instrumentation/twilio/TwilioClientDecorator.java", "diffHunk": "@@ -20,26 +20,26 @@\n \n   public static final TwilioClientDecorator DECORATE = new TwilioClientDecorator();\n \n-  static final String COMPONENT_NAME = \"twilio-sdk\";\n+  static final CharSequence COMPONENT_NAME = UTF8BytesString.createConstant(\"twilio-sdk\");\n \n   @Override\n-  protected String spanType() {\n-    return DDSpanTypes.HTTP_CLIENT;\n+  protected CharSequence spanType() {\n+    return InternalSpanTypes.HTTP_CLIENT;\n   }\n \n   @Override\n   protected String[] instrumentationNames() {\n-    return new String[] {COMPONENT_NAME};\n+    return new String[] {COMPONENT_NAME.toString()};\n   }\n \n   @Override\n-  protected String component() {\n+  protected CharSequence component() {\n     return COMPONENT_NAME;\n   }\n \n   @Override\n   protected String service() {\n-    return COMPONENT_NAME;\n+    return COMPONENT_NAME.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNDYxNA==", "bodyText": "this doesn't allocate", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495134614", "createdAt": "2020-09-25T17:33:25Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/twilio/src/main/java/datadog/trace/instrumentation/twilio/TwilioClientDecorator.java", "diffHunk": "@@ -20,26 +20,26 @@\n \n   public static final TwilioClientDecorator DECORATE = new TwilioClientDecorator();\n \n-  static final String COMPONENT_NAME = \"twilio-sdk\";\n+  static final CharSequence COMPONENT_NAME = UTF8BytesString.createConstant(\"twilio-sdk\");\n \n   @Override\n-  protected String spanType() {\n-    return DDSpanTypes.HTTP_CLIENT;\n+  protected CharSequence spanType() {\n+    return InternalSpanTypes.HTTP_CLIENT;\n   }\n \n   @Override\n   protected String[] instrumentationNames() {\n-    return new String[] {COMPONENT_NAME};\n+    return new String[] {COMPONENT_NAME.toString()};\n   }\n \n   @Override\n-  protected String component() {\n+  protected CharSequence component() {\n     return COMPONENT_NAME;\n   }\n \n   @Override\n   protected String service() {\n-    return COMPONENT_NAME;\n+    return COMPONENT_NAME.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMjczMw=="}, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNDg1Ng==", "bodyText": "and service is next on the list, it's harder because it interacts with Config", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495134856", "createdAt": "2020-09-25T17:33:55Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/twilio/src/main/java/datadog/trace/instrumentation/twilio/TwilioClientDecorator.java", "diffHunk": "@@ -20,26 +20,26 @@\n \n   public static final TwilioClientDecorator DECORATE = new TwilioClientDecorator();\n \n-  static final String COMPONENT_NAME = \"twilio-sdk\";\n+  static final CharSequence COMPONENT_NAME = UTF8BytesString.createConstant(\"twilio-sdk\");\n \n   @Override\n-  protected String spanType() {\n-    return DDSpanTypes.HTTP_CLIENT;\n+  protected CharSequence spanType() {\n+    return InternalSpanTypes.HTTP_CLIENT;\n   }\n \n   @Override\n   protected String[] instrumentationNames() {\n-    return new String[] {COMPONENT_NAME};\n+    return new String[] {COMPONENT_NAME.toString()};\n   }\n \n   @Override\n-  protected String component() {\n+  protected CharSequence component() {\n     return COMPONENT_NAME;\n   }\n \n   @Override\n   protected String service() {\n-    return COMPONENT_NAME;\n+    return COMPONENT_NAME.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMjczMw=="}, "originalCommit": {"oid": "3d08b5b08afe0ac070fb5e3f2c61f03115f038f7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE2MDE2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/jdbc/src/main/java/datadog/trace/instrumentation/jdbc/ConnectionInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyNjowNVrOHY5bEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMToyNjowNVrOHY5bEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg2ODY5MA==", "bodyText": "Yes, my original code was a bit defensive.", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495868690", "createdAt": "2020-09-28T11:26:05Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/jdbc/src/main/java/datadog/trace/instrumentation/jdbc/ConnectionInstrumentation.java", "diffHunk": "@@ -61,7 +61,7 @@ public static void addDBInfo(\n       // check if we have seen this String before\n       UTF8BytesString utf8Sql = JDBCMaps.preparedStatementsSql.get(sql);\n       if (utf8Sql == null) {\n-        utf8Sql = UTF8BytesString.create(sql);\n+        utf8Sql = UTF8BytesString.createWeak(sql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db0ca8d254275f9d59d6f15d44e78d976ed0c79"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDE4NDc0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/mongo/driver-3.1/src/main/java/datadog/trace/instrumentation/mongo/MongoClientDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozMzo1MVrOHY5piw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTozODowNlrOHY5xbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MjM5NQ==", "bodyText": "Why is this not using the InternalSpanTypes.MONGO?", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495872395", "createdAt": "2020-09-28T11:33:51Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/mongo/driver-3.1/src/main/java/datadog/trace/instrumentation/mongo/MongoClientDecorator.java", "diffHunk": "@@ -37,12 +37,12 @@ protected String service() {\n \n   @Override\n   protected CharSequence component() {\n-    return JAVA_MONGO;\n+    return \"java-mongo\";\n   }\n \n   @Override\n   protected CharSequence spanType() {\n-    return InternalSpanTypes.MONGO;\n+    return DDSpanTypes.MONGO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8bc6a7b98fa834a3b89a211cba8a4092d9fafd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDQxMw==", "bodyText": "Just to avoid changing a test which relies on far too much magic", "url": "https://github.com/DataDog/dd-trace-java/pull/1914#discussion_r495874413", "createdAt": "2020-09-28T11:38:06Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/mongo/driver-3.1/src/main/java/datadog/trace/instrumentation/mongo/MongoClientDecorator.java", "diffHunk": "@@ -37,12 +37,12 @@ protected String service() {\n \n   @Override\n   protected CharSequence component() {\n-    return JAVA_MONGO;\n+    return \"java-mongo\";\n   }\n \n   @Override\n   protected CharSequence spanType() {\n-    return InternalSpanTypes.MONGO;\n+    return DDSpanTypes.MONGO;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3MjM5NQ=="}, "originalCommit": {"oid": "6f8bc6a7b98fa834a3b89a211cba8a4092d9fafd"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4849, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}