{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDEwMTA4", "number": 1783, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDozNjoyN1rOEZ6vaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo1MTowMVrOEdO11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjEyMjY0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/junit-5.3.2/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Decorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDozNjoyN1rOHDBb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo1NzoxNVrOHDGGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMTI5Mw==", "bodyText": "This must be quite high cardinality?", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r472931293", "createdAt": "2020-08-19T10:36:27Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/junit-5.3.2/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Decorator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.trace.instrumentation.junit5;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+\n+@Slf4j\n+public class JUnit5Decorator extends TestDecorator {\n+\n+  public static final JUnit5Decorator DECORATE = new JUnit5Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit5\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-5\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final MethodSource methodSource) {\n+    onTestStart(span, methodSource.getClassName(), methodSource.getMethodName());\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final String testSuite, final String testName) {\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNzgxMQ==", "bodyText": "It could be as we'd like to trace every single test.\nE.g: We used to report more than 200k tests if we tested our previous tool (Scope) in the Guava project.", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r473007811", "createdAt": "2020-08-19T12:57:15Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/instrumentation/junit-5.3.2/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Decorator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.trace.instrumentation.junit5;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.decorator.TestDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.support.descriptor.MethodSource;\n+\n+@Slf4j\n+public class JUnit5Decorator extends TestDecorator {\n+\n+  public static final JUnit5Decorator DECORATE = new JUnit5Decorator();\n+\n+  @Override\n+  public String testFramework() {\n+    return \"junit5\";\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"junit\", \"junit-5\"};\n+  }\n+\n+  @Override\n+  public String component() {\n+    return \"junit\";\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final MethodSource methodSource) {\n+    onTestStart(span, methodSource.getClassName(), methodSource.getMethodName());\n+  }\n+\n+  public void onTestStart(final AgentSpan span, final String testSuite, final String testName) {\n+    span.setTag(DDTags.RESOURCE_NAME, testSuite + \".\" + testName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMTI5Mw=="}, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzU2MTgyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/junit-5.3.2/junit-5.3.2.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowMToxOFrOHELNwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjozNzozMlrOHFiV3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MDA5OA==", "bodyText": "You should not set this manually since it would cause the Instrumentation class to be incompatible with Java 7.  You should use the java8 source set that is created automatically with the minJavaVersionForTests config.", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r474140098", "createdAt": "2020-08-20T17:01:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-5.3.2/junit-5.3.2.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // JUnit5 requires Java 1.8+\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+def jupiterVersion = '5.3.2'\n+def platformVersion = '1.3.2'\n+\n+muzzle {\n+  pass {\n+    group = 'org.junit.platform'\n+    module = 'junit-platform-launcher'\n+    versions = \"[$platformVersion,)\"\n+    assertInverse = true\n+    extraDependency \"org.junit.jupiter:junit-jupiter-api:$jupiterVersion\"\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: \"$platformVersion\"\n+  compileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: \"$jupiterVersion\"\n+\n+  testCompile(group: 'org.junit.platform', name: 'junit-platform-engine', version: \"$platformVersion\") {\n+    force = true\n+  }\n+  testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: \"$jupiterVersion\") {\n+    force = true\n+  }\n+}\n+\n+// JUnit5 requires Java 1.8+\n+sourceCompatibility = JavaVersion.VERSION_1_8\n+targetCompatibility = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MjA2Mg==", "bodyText": "Notice, many/all of the test failures in java 7 ci build is likely caused by this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r474142062", "createdAt": "2020-08-20T17:05:03Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-5.3.2/junit-5.3.2.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // JUnit5 requires Java 1.8+\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+def jupiterVersion = '5.3.2'\n+def platformVersion = '1.3.2'\n+\n+muzzle {\n+  pass {\n+    group = 'org.junit.platform'\n+    module = 'junit-platform-launcher'\n+    versions = \"[$platformVersion,)\"\n+    assertInverse = true\n+    extraDependency \"org.junit.jupiter:junit-jupiter-api:$jupiterVersion\"\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: \"$platformVersion\"\n+  compileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: \"$jupiterVersion\"\n+\n+  testCompile(group: 'org.junit.platform', name: 'junit-platform-engine', version: \"$platformVersion\") {\n+    force = true\n+  }\n+  testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: \"$jupiterVersion\") {\n+    force = true\n+  }\n+}\n+\n+// JUnit5 requires Java 1.8+\n+sourceCompatibility = JavaVersion.VERSION_1_8\n+targetCompatibility = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MDA5OA=="}, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2NzU4Mg==", "bodyText": "Changed \ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r475567582", "createdAt": "2020-08-24T12:37:32Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/instrumentation/junit-5.3.2/junit-5.3.2.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // JUnit5 requires Java 1.8+\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+def jupiterVersion = '5.3.2'\n+def platformVersion = '1.3.2'\n+\n+muzzle {\n+  pass {\n+    group = 'org.junit.platform'\n+    module = 'junit-platform-launcher'\n+    versions = \"[$platformVersion,)\"\n+    assertInverse = true\n+    extraDependency \"org.junit.jupiter:junit-jupiter-api:$jupiterVersion\"\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.junit.platform', name: 'junit-platform-launcher', version: \"$platformVersion\"\n+  compileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: \"$jupiterVersion\"\n+\n+  testCompile(group: 'org.junit.platform', name: 'junit-platform-engine', version: \"$platformVersion\") {\n+    force = true\n+  }\n+  testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: \"$jupiterVersion\") {\n+    force = true\n+  }\n+}\n+\n+// JUnit5 requires Java 1.8+\n+sourceCompatibility = JavaVersion.VERSION_1_8\n+targetCompatibility = JavaVersion.VERSION_1_8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MDA5OA=="}, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzU2NjkwOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzowMjo0N1rOHELQ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0MDowNFrOHFia4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MDg4Nw==", "bodyText": "I'm a little curious why such a specific version.  Also, does this mean we don't support 5.0-5.3.1 or is that covered by 4.10?  A comment in the gradle file might be useful.", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r474140887", "createdAt": "2020-08-20T17:02:47Z", "author": {"login": "tylerbenson"}, "path": "settings.gradle", "diffHunk": "@@ -113,6 +113,7 @@ include ':dd-java-agent:instrumentation:jetty-8'\n include ':dd-java-agent:instrumentation:jms'\n include ':dd-java-agent:instrumentation:jsp-2.3'\n include ':dd-java-agent:instrumentation:junit-4.10'\n+include ':dd-java-agent:instrumentation:junit-5.3.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU2ODg2Ng==", "bodyText": "Changed the minimum version to 5.3.0\nThe 5.3.0+ is used because it's in that version there the TestInheritance test suite names are based on the concrete class (and not on the base/abstract class).\nYes, that means that [5.0, 5.3.0) versions are not covered officially.\nAdded a comment in the gradle file \ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r475568866", "createdAt": "2020-08-24T12:40:04Z", "author": {"login": "drodriguezhdez"}, "path": "settings.gradle", "diffHunk": "@@ -113,6 +113,7 @@ include ':dd-java-agent:instrumentation:jetty-8'\n include ':dd-java-agent:instrumentation:jms'\n include ':dd-java-agent:instrumentation:jsp-2.3'\n include ':dd-java-agent:instrumentation:junit-4.10'\n+include ':dd-java-agent:instrumentation:junit-5.3.2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0MDg4Nw=="}, "originalCommit": {"oid": "5413f45e5c59d1d07e181a1cf1eedb3f5f76e1f5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDg1NTg3OnYy", "diffSide": "RIGHT", "path": "gradle/java.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0NzowM1rOHIRKIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0NzowM1rOHIRKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMTc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return [\"junit-4.10\", \"testng-6.4\", \"junit-5.3.2\"].contains(project.name)\n          \n          \n            \n              return [\"junit-4.10\", \"testng-6.4\", \"junit-5.3.0\"].contains(project.name)", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r478431776", "createdAt": "2020-08-27T13:47:03Z", "author": {"login": "tylerbenson"}, "path": "gradle/java.gradle", "diffHunk": "@@ -279,7 +279,7 @@ def isJdkForced(String javaName) {\n }\n \n def isTestingInstrumentation(Project project) {\n-  return [\"junit-4.10\", \"testng-6.4\"].contains(project.name)\n+  return [\"junit-4.10\", \"testng-6.4\", \"junit-5.3.2\"].contains(project.name)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbf9073867b8b062d216df7b167cd449c458353"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDg2MTA1OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0ODoxOFrOHIRNig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0ODoxOFrOHIRNig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjY1MA==", "bodyText": "minor suggestion, but if you support .0 now, you can drop that part... We generally don't include the smallest version part if it's not significant.", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r478432650", "createdAt": "2020-08-27T13:48:18Z", "author": {"login": "tylerbenson"}, "path": "settings.gradle", "diffHunk": "@@ -115,6 +115,7 @@ include ':dd-java-agent:instrumentation:jetty-8'\n include ':dd-java-agent:instrumentation:jms'\n include ':dd-java-agent:instrumentation:jsp-2.3'\n include ':dd-java-agent:instrumentation:junit-4.10'\n+include ':dd-java-agent:instrumentation:junit-5.3.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbf9073867b8b062d216df7b167cd449c458353"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDg3MzE5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/junit-5.3.0/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Instrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo1MTowMVrOHIRVhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo1MTowMVrOHIRVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzNDY5Mw==", "bodyText": "Since you only have one instrumentation class is this necessary? What happens without this?", "url": "https://github.com/DataDog/dd-trace-java/pull/1783#discussion_r478434693", "createdAt": "2020-08-27T13:51:01Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/junit-5.3.0/src/main/java/datadog/trace/instrumentation/junit5/JUnit5Instrumentation.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package datadog.trace.instrumentation.junit5;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService;\n+import org.junit.platform.launcher.Launcher;\n+\n+@AutoService(Instrumenter.class)\n+public class JUnit5Instrumentation extends Instrumenter.Default {\n+\n+  public JUnit5Instrumentation() {\n+    super(\"junit\", \"junit-5\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.junit.platform.launcher.Launcher\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return hasClassesNamed(\"org.junit.platform.launcher.Launcher\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".JUnit5Decorator\", packageName + \".TracingListener\"};\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isConstructor(), JUnit5Instrumentation.class.getName() + \"$JUnit5Advice\");\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return false;\n+  }\n+\n+  public static class JUnit5Advice {\n+\n+    @Advice.OnMethodExit\n+    public static void addTracingListener(@Advice.This final Launcher launcher) {\n+      final TracingListener listener = new TracingListener();\n+      launcher.registerTestExecutionListeners(listener);\n+    }\n+\n+    // JUnit 5.3.0 and above\n+    public static void muzzleCheck(final SameThreadHierarchicalTestExecutorService service) {\n+      service.invokeAll(null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbf9073867b8b062d216df7b167cd449c458353"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 40, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}