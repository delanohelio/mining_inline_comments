{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzM5MjM5", "number": 1605, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxNjoyOFrOEG5iDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNzo1OVrOEKObog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjY5NTE4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxNjoyOFrOGl-wQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowNjowNVrOGmdTOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3ODY1Ng==", "bodyText": "A matching private constructor would be good", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442478656", "createdAt": "2020-06-18T20:16:28Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class OtelContextPropagators implements ContextPropagators {\n+  public static final OtelContextPropagators INSTANCE = new OtelContextPropagators();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3OTEyOA==", "bodyText": "Yes, and make this final as well.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442979128", "createdAt": "2020-06-19T18:06:05Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class OtelContextPropagators implements ContextPropagators {\n+  public static final OtelContextPropagators INSTANCE = new OtelContextPropagators();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3ODY1Ng=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjcxODg1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyNDo1MlrOGl-_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNTo0MDoyMFrOGmZMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MjUxMg==", "bodyText": "Doesn't this depend on the type of span? IE: a client sees 400 as an error where a server doesn't", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442482512", "createdAt": "2020-06-18T20:24:52Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.\n+    }\n+  }\n+\n+  @Override\n+  public void addEvent(final String name) {}\n+\n+  @Override\n+  public void addEvent(final String name, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final String name, final Map<String, AttributeValue> attributes) {}\n+\n+  @Override\n+  public void addEvent(\n+      final String name, final Map<String, AttributeValue> attributes, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final Event event) {}\n+\n+  @Override\n+  public void addEvent(final Event event, final long timestamp) {}\n+\n+  @Override\n+  public void setStatus(final Status status) {\n+    if (!status.isOk()) {\n+      delegate.setError(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMTgxMw==", "bodyText": "This isn't the regular http status codes... this is an OTel specific Status (more similar to grpc) https://github.com/open-telemetry/opentelemetry-java/blob/master/api/src/main/java/io/opentelemetry/trace/Status.java", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442911813", "createdAt": "2020-06-19T15:40:20Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.\n+    }\n+  }\n+\n+  @Override\n+  public void addEvent(final String name) {}\n+\n+  @Override\n+  public void addEvent(final String name, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final String name, final Map<String, AttributeValue> attributes) {}\n+\n+  @Override\n+  public void addEvent(\n+      final String name, final Map<String, AttributeValue> attributes, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final Event event) {}\n+\n+  @Override\n+  public void addEvent(final Event event, final long timestamp) {}\n+\n+  @Override\n+  public void setStatus(final Status status) {\n+    if (!status.isOk()) {\n+      delegate.setError(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MjUxMg=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjcyMzcyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelTracerProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyNjoyNVrOGl_CQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowODowM1rOGmdWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MzI2NQ==", "bodyText": "We should probably cache this instead of returning a new one everytime to protect from bad instrumentation", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442483265", "createdAt": "2020-06-18T20:26:25Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelTracerProvider.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+\n+public class OtelTracerProvider implements TracerProvider {\n+  public static final OtelTracerProvider INSTANCE = new OtelTracerProvider();\n+\n+  private final TypeConverter converter = new TypeConverter();\n+\n+  @Override\n+  public Tracer get(final String instrumentationName) {\n+    return get(instrumentationName, null);\n+  }\n+\n+  @Override\n+  public Tracer get(final String instrumentationName, final String instrumentationVersion) {\n+    return new OtelTracer(instrumentationName, AgentTracer.get(), converter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxNDc2MA==", "bodyText": "There's a nice very low overhead cache on #1603, maybe we can use that once that's merged, but merge this without implementing caching yet?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442914760", "createdAt": "2020-06-19T15:46:10Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelTracerProvider.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+\n+public class OtelTracerProvider implements TracerProvider {\n+  public static final OtelTracerProvider INSTANCE = new OtelTracerProvider();\n+\n+  private final TypeConverter converter = new TypeConverter();\n+\n+  @Override\n+  public Tracer get(final String instrumentationName) {\n+    return get(instrumentationName, null);\n+  }\n+\n+  @Override\n+  public Tracer get(final String instrumentationName, final String instrumentationVersion) {\n+    return new OtelTracer(instrumentationName, AgentTracer.get(), converter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MzI2NQ=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3OTk1NA==", "bodyText": "I added a todo.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442979954", "createdAt": "2020-06-19T18:08:03Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelTracerProvider.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.opentelemetry.trace.Tracer;\n+import io.opentelemetry.trace.TracerProvider;\n+\n+public class OtelTracerProvider implements TracerProvider {\n+  public static final OtelTracerProvider INSTANCE = new OtelTracerProvider();\n+\n+  private final TypeConverter converter = new TypeConverter();\n+\n+  @Override\n+  public Tracer get(final String instrumentationName) {\n+    return get(instrumentationName, null);\n+  }\n+\n+  @Override\n+  public Tracer get(final String instrumentationName, final String instrumentationVersion) {\n+    return new OtelTracer(instrumentationName, AgentTracer.get(), converter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MzI2NQ=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODA1NzI5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OpenTelemetryInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODowMTowNFrOGmL3KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0ODozNFrOGmbSVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MzQxNg==", "bodyText": "Could we move away from having lots of small nested classes with long names?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442693416", "createdAt": "2020-06-19T08:01:04Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OpenTelemetryInstrumentation.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.trace.TracerProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * This is experimental instrumentation and should only be enabled for evaluation/testing purposes.\n+ */\n+@AutoService(Instrumenter.class)\n+public class OpenTelemetryInstrumentation extends Instrumenter.Default {\n+  public OpenTelemetryInstrumentation() {\n+    super(\"opentelemetry-beta\");\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return false;\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.opentelemetry.OpenTelemetry\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".OtelScope\",\n+      packageName + \".OtelSpan\",\n+      packageName + \".OtelSpan$1\", // switch statement\n+      packageName + \".OtelSpanContext\",\n+      packageName + \".OtelTracer\",\n+      packageName + \".OtelTracer$1\", // switch statement\n+      packageName + \".OtelTracerProvider\",\n+      packageName + \".OtelTracer$SpanBuilder\",\n+      packageName + \".OtelContextPropagators\",\n+      packageName + \".OtelContextPropagators$1\", // switch statement\n+      packageName + \".OtelContextPropagators$OtelHttpTextFormat\",\n+      packageName + \".OtelContextPropagators$OtelSetter\",\n+      packageName + \".OtelContextPropagators$OtelGetter\",\n+      packageName + \".TypeConverter\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        named(\"getTracerProvider\").and(returns(named(\"io.opentelemetry.trace.TracerProvider\"))),\n+        OpenTelemetryInstrumentation.class.getName() + \"$TracerProviderAdvice\");\n+    transformers.put(\n+        named(\"getPropagators\")\n+            .and(returns(named(\"io.opentelemetry.context.propagation.ContextPropagators\"))),\n+        OpenTelemetryInstrumentation.class.getName() + \"$ContextPropagatorsAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class TracerProviderAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NjEzMg==", "bodyText": "This should be a separate discussion and done in a consistent fashion.  Meanwhile, this is consistent with the rest of the repo style.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442946132", "createdAt": "2020-06-19T16:48:34Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OpenTelemetryInstrumentation.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.trace.TracerProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+/**\n+ * This is experimental instrumentation and should only be enabled for evaluation/testing purposes.\n+ */\n+@AutoService(Instrumenter.class)\n+public class OpenTelemetryInstrumentation extends Instrumenter.Default {\n+  public OpenTelemetryInstrumentation() {\n+    super(\"opentelemetry-beta\");\n+  }\n+\n+  @Override\n+  protected boolean defaultEnabled() {\n+    return false;\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.opentelemetry.OpenTelemetry\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".OtelScope\",\n+      packageName + \".OtelSpan\",\n+      packageName + \".OtelSpan$1\", // switch statement\n+      packageName + \".OtelSpanContext\",\n+      packageName + \".OtelTracer\",\n+      packageName + \".OtelTracer$1\", // switch statement\n+      packageName + \".OtelTracerProvider\",\n+      packageName + \".OtelTracer$SpanBuilder\",\n+      packageName + \".OtelContextPropagators\",\n+      packageName + \".OtelContextPropagators$1\", // switch statement\n+      packageName + \".OtelContextPropagators$OtelHttpTextFormat\",\n+      packageName + \".OtelContextPropagators$OtelSetter\",\n+      packageName + \".OtelContextPropagators$OtelGetter\",\n+      packageName + \".TypeConverter\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        named(\"getTracerProvider\").and(returns(named(\"io.opentelemetry.trace.TracerProvider\"))),\n+        OpenTelemetryInstrumentation.class.getName() + \"$TracerProviderAdvice\");\n+    transformers.put(\n+        named(\"getPropagators\")\n+            .and(returns(named(\"io.opentelemetry.context.propagation.ContextPropagators\"))),\n+        OpenTelemetryInstrumentation.class.getName() + \"$ContextPropagatorsAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class TracerProviderAdvice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MzQxNg=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODEzMDkwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyNTowMVrOGmMlMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo0MDoxMFrOGmcoTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTIwMA==", "bodyText": "The thing about iterating over the keys and then checking for each possible thing that we care about it is that it's quadratic time and works against pretty much every HTTP API which presents headers to you as a HashMap. Maybe it makes sense not to encourage users to consume headers the way we do?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442705200", "createdAt": "2020-06-19T08:25:01Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class OtelContextPropagators implements ContextPropagators {\n+  public static final OtelContextPropagators INSTANCE = new OtelContextPropagators();\n+\n+  @Override\n+  public HttpTextFormat getHttpTextFormat() {\n+    return OtelHttpTextFormat.INSTANCE;\n+  }\n+\n+  private static class OtelHttpTextFormat implements HttpTextFormat {\n+    private static final OtelHttpTextFormat INSTANCE = new OtelHttpTextFormat();\n+\n+    private final AgentTracer.TracerAPI tracer = AgentTracer.get();\n+    private final TypeConverter converter = new TypeConverter();\n+\n+    @Override\n+    public List<String> fields() {\n+      return null;\n+    }\n+\n+    @Override\n+    public <C> void inject(final Context context, final C carrier, final Setter<C> setter) {\n+      final Span span = TracingContextUtils.getSpanWithoutDefault(context);\n+      if (span == null || !span.getContext().isValid()) {\n+        return;\n+      }\n+      tracer.inject(converter.toAgentSpan(span), carrier, new OtelSetter<>(setter));\n+    }\n+\n+    @Override\n+    public <C> Context extract(final Context context, final C carrier, final Getter<C> getter) {\n+      final AgentSpan.Context agentContext = tracer.extract(carrier, new OtelGetter<>(getter));\n+      return TracingContextUtils.withSpan(\n+          DefaultSpan.create(converter.toSpanContext(agentContext)), context);\n+    }\n+  }\n+\n+  private static class OtelSetter<C> implements AgentPropagation.Setter<C> {\n+    private final HttpTextFormat.Setter<C> setter;\n+\n+    private OtelSetter(final HttpTextFormat.Setter<C> setter) {\n+      this.setter = setter;\n+    }\n+\n+    @Override\n+    public void set(final C carrier, final String key, final String value) {\n+      setter.set(carrier, key, value);\n+    }\n+  }\n+\n+  private static class OtelGetter<C> implements AgentPropagation.Getter<C> {\n+    private static final String DD_TRACE_ID_KEY = \"x-datadog-trace-id\";\n+    private static final String DD_SPAN_ID_KEY = \"x-datadog-parent-id\";\n+    private static final String DD_SAMPLING_PRIORITY_KEY = \"x-datadog-sampling-priority\";\n+    private static final String DD_ORIGIN_KEY = \"x-datadog-origin\";\n+\n+    private static final String B3_TRACE_ID_KEY = \"X-B3-TraceId\";\n+    private static final String B3_SPAN_ID_KEY = \"X-B3-SpanId\";\n+    private static final String B3_SAMPLING_PRIORITY_KEY = \"X-B3-Sampled\";\n+\n+    private static final String HAYSTACK_TRACE_ID_KEY = \"Trace-ID\";\n+    private static final String HAYSTACK_SPAN_ID_KEY = \"Span-ID\";\n+    private static final String HAYSTACK_PARENT_ID_KEY = \"Parent_ID\";\n+\n+    private static final List<String> KEYS =\n+        Arrays.asList(\n+            DD_TRACE_ID_KEY,\n+            DD_SPAN_ID_KEY,\n+            DD_SAMPLING_PRIORITY_KEY,\n+            DD_ORIGIN_KEY,\n+            B3_TRACE_ID_KEY,\n+            B3_SPAN_ID_KEY,\n+            B3_SAMPLING_PRIORITY_KEY,\n+            HAYSTACK_TRACE_ID_KEY,\n+            HAYSTACK_SPAN_ID_KEY,\n+            HAYSTACK_PARENT_ID_KEY);\n+\n+    private final HttpTextFormat.Getter<C> getter;\n+\n+    private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n+      this.getter = getter;\n+    }\n+\n+    @Override\n+    public Iterable<String> keys(final C carrier) {\n+      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkxMzQyOA==", "bodyText": "I figured you'd appreciate this... the problem is it doesn't work with baggage which relies on a prefix.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442913428", "createdAt": "2020-06-19T15:43:28Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class OtelContextPropagators implements ContextPropagators {\n+  public static final OtelContextPropagators INSTANCE = new OtelContextPropagators();\n+\n+  @Override\n+  public HttpTextFormat getHttpTextFormat() {\n+    return OtelHttpTextFormat.INSTANCE;\n+  }\n+\n+  private static class OtelHttpTextFormat implements HttpTextFormat {\n+    private static final OtelHttpTextFormat INSTANCE = new OtelHttpTextFormat();\n+\n+    private final AgentTracer.TracerAPI tracer = AgentTracer.get();\n+    private final TypeConverter converter = new TypeConverter();\n+\n+    @Override\n+    public List<String> fields() {\n+      return null;\n+    }\n+\n+    @Override\n+    public <C> void inject(final Context context, final C carrier, final Setter<C> setter) {\n+      final Span span = TracingContextUtils.getSpanWithoutDefault(context);\n+      if (span == null || !span.getContext().isValid()) {\n+        return;\n+      }\n+      tracer.inject(converter.toAgentSpan(span), carrier, new OtelSetter<>(setter));\n+    }\n+\n+    @Override\n+    public <C> Context extract(final Context context, final C carrier, final Getter<C> getter) {\n+      final AgentSpan.Context agentContext = tracer.extract(carrier, new OtelGetter<>(getter));\n+      return TracingContextUtils.withSpan(\n+          DefaultSpan.create(converter.toSpanContext(agentContext)), context);\n+    }\n+  }\n+\n+  private static class OtelSetter<C> implements AgentPropagation.Setter<C> {\n+    private final HttpTextFormat.Setter<C> setter;\n+\n+    private OtelSetter(final HttpTextFormat.Setter<C> setter) {\n+      this.setter = setter;\n+    }\n+\n+    @Override\n+    public void set(final C carrier, final String key, final String value) {\n+      setter.set(carrier, key, value);\n+    }\n+  }\n+\n+  private static class OtelGetter<C> implements AgentPropagation.Getter<C> {\n+    private static final String DD_TRACE_ID_KEY = \"x-datadog-trace-id\";\n+    private static final String DD_SPAN_ID_KEY = \"x-datadog-parent-id\";\n+    private static final String DD_SAMPLING_PRIORITY_KEY = \"x-datadog-sampling-priority\";\n+    private static final String DD_ORIGIN_KEY = \"x-datadog-origin\";\n+\n+    private static final String B3_TRACE_ID_KEY = \"X-B3-TraceId\";\n+    private static final String B3_SPAN_ID_KEY = \"X-B3-SpanId\";\n+    private static final String B3_SAMPLING_PRIORITY_KEY = \"X-B3-Sampled\";\n+\n+    private static final String HAYSTACK_TRACE_ID_KEY = \"Trace-ID\";\n+    private static final String HAYSTACK_SPAN_ID_KEY = \"Span-ID\";\n+    private static final String HAYSTACK_PARENT_ID_KEY = \"Parent_ID\";\n+\n+    private static final List<String> KEYS =\n+        Arrays.asList(\n+            DD_TRACE_ID_KEY,\n+            DD_SPAN_ID_KEY,\n+            DD_SAMPLING_PRIORITY_KEY,\n+            DD_ORIGIN_KEY,\n+            B3_TRACE_ID_KEY,\n+            B3_SPAN_ID_KEY,\n+            B3_SAMPLING_PRIORITY_KEY,\n+            HAYSTACK_TRACE_ID_KEY,\n+            HAYSTACK_SPAN_ID_KEY,\n+            HAYSTACK_PARENT_ID_KEY);\n+\n+    private final HttpTextFormat.Getter<C> getter;\n+\n+    private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n+      this.getter = getter;\n+    }\n+\n+    @Override\n+    public Iterable<String> keys(final C carrier) {\n+      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTIwMA=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2ODE0Mw==", "bodyText": "Then that's a design flaw in the codec", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442968143", "createdAt": "2020-06-19T17:40:10Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class OtelContextPropagators implements ContextPropagators {\n+  public static final OtelContextPropagators INSTANCE = new OtelContextPropagators();\n+\n+  @Override\n+  public HttpTextFormat getHttpTextFormat() {\n+    return OtelHttpTextFormat.INSTANCE;\n+  }\n+\n+  private static class OtelHttpTextFormat implements HttpTextFormat {\n+    private static final OtelHttpTextFormat INSTANCE = new OtelHttpTextFormat();\n+\n+    private final AgentTracer.TracerAPI tracer = AgentTracer.get();\n+    private final TypeConverter converter = new TypeConverter();\n+\n+    @Override\n+    public List<String> fields() {\n+      return null;\n+    }\n+\n+    @Override\n+    public <C> void inject(final Context context, final C carrier, final Setter<C> setter) {\n+      final Span span = TracingContextUtils.getSpanWithoutDefault(context);\n+      if (span == null || !span.getContext().isValid()) {\n+        return;\n+      }\n+      tracer.inject(converter.toAgentSpan(span), carrier, new OtelSetter<>(setter));\n+    }\n+\n+    @Override\n+    public <C> Context extract(final Context context, final C carrier, final Getter<C> getter) {\n+      final AgentSpan.Context agentContext = tracer.extract(carrier, new OtelGetter<>(getter));\n+      return TracingContextUtils.withSpan(\n+          DefaultSpan.create(converter.toSpanContext(agentContext)), context);\n+    }\n+  }\n+\n+  private static class OtelSetter<C> implements AgentPropagation.Setter<C> {\n+    private final HttpTextFormat.Setter<C> setter;\n+\n+    private OtelSetter(final HttpTextFormat.Setter<C> setter) {\n+      this.setter = setter;\n+    }\n+\n+    @Override\n+    public void set(final C carrier, final String key, final String value) {\n+      setter.set(carrier, key, value);\n+    }\n+  }\n+\n+  private static class OtelGetter<C> implements AgentPropagation.Getter<C> {\n+    private static final String DD_TRACE_ID_KEY = \"x-datadog-trace-id\";\n+    private static final String DD_SPAN_ID_KEY = \"x-datadog-parent-id\";\n+    private static final String DD_SAMPLING_PRIORITY_KEY = \"x-datadog-sampling-priority\";\n+    private static final String DD_ORIGIN_KEY = \"x-datadog-origin\";\n+\n+    private static final String B3_TRACE_ID_KEY = \"X-B3-TraceId\";\n+    private static final String B3_SPAN_ID_KEY = \"X-B3-SpanId\";\n+    private static final String B3_SAMPLING_PRIORITY_KEY = \"X-B3-Sampled\";\n+\n+    private static final String HAYSTACK_TRACE_ID_KEY = \"Trace-ID\";\n+    private static final String HAYSTACK_SPAN_ID_KEY = \"Span-ID\";\n+    private static final String HAYSTACK_PARENT_ID_KEY = \"Parent_ID\";\n+\n+    private static final List<String> KEYS =\n+        Arrays.asList(\n+            DD_TRACE_ID_KEY,\n+            DD_SPAN_ID_KEY,\n+            DD_SAMPLING_PRIORITY_KEY,\n+            DD_ORIGIN_KEY,\n+            B3_TRACE_ID_KEY,\n+            B3_SPAN_ID_KEY,\n+            B3_SAMPLING_PRIORITY_KEY,\n+            HAYSTACK_TRACE_ID_KEY,\n+            HAYSTACK_SPAN_ID_KEY,\n+            HAYSTACK_PARENT_ID_KEY);\n+\n+    private final HttpTextFormat.Getter<C> getter;\n+\n+    private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n+      this.getter = getter;\n+    }\n+\n+    @Override\n+    public Iterable<String> keys(final C carrier) {\n+      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTIwMA=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODEzMjQzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyNTozMVrOGmMmNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyNTozMVrOGmMmNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTQ2MA==", "bodyText": "Perhaps we should be aiming to use this more since every HTTP API can do this quickly.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442705460", "createdAt": "2020-06-19T08:25:31Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.grpc.Context;\n+import io.opentelemetry.context.propagation.ContextPropagators;\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import io.opentelemetry.trace.DefaultSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.TracingContextUtils;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class OtelContextPropagators implements ContextPropagators {\n+  public static final OtelContextPropagators INSTANCE = new OtelContextPropagators();\n+\n+  @Override\n+  public HttpTextFormat getHttpTextFormat() {\n+    return OtelHttpTextFormat.INSTANCE;\n+  }\n+\n+  private static class OtelHttpTextFormat implements HttpTextFormat {\n+    private static final OtelHttpTextFormat INSTANCE = new OtelHttpTextFormat();\n+\n+    private final AgentTracer.TracerAPI tracer = AgentTracer.get();\n+    private final TypeConverter converter = new TypeConverter();\n+\n+    @Override\n+    public List<String> fields() {\n+      return null;\n+    }\n+\n+    @Override\n+    public <C> void inject(final Context context, final C carrier, final Setter<C> setter) {\n+      final Span span = TracingContextUtils.getSpanWithoutDefault(context);\n+      if (span == null || !span.getContext().isValid()) {\n+        return;\n+      }\n+      tracer.inject(converter.toAgentSpan(span), carrier, new OtelSetter<>(setter));\n+    }\n+\n+    @Override\n+    public <C> Context extract(final Context context, final C carrier, final Getter<C> getter) {\n+      final AgentSpan.Context agentContext = tracer.extract(carrier, new OtelGetter<>(getter));\n+      return TracingContextUtils.withSpan(\n+          DefaultSpan.create(converter.toSpanContext(agentContext)), context);\n+    }\n+  }\n+\n+  private static class OtelSetter<C> implements AgentPropagation.Setter<C> {\n+    private final HttpTextFormat.Setter<C> setter;\n+\n+    private OtelSetter(final HttpTextFormat.Setter<C> setter) {\n+      this.setter = setter;\n+    }\n+\n+    @Override\n+    public void set(final C carrier, final String key, final String value) {\n+      setter.set(carrier, key, value);\n+    }\n+  }\n+\n+  private static class OtelGetter<C> implements AgentPropagation.Getter<C> {\n+    private static final String DD_TRACE_ID_KEY = \"x-datadog-trace-id\";\n+    private static final String DD_SPAN_ID_KEY = \"x-datadog-parent-id\";\n+    private static final String DD_SAMPLING_PRIORITY_KEY = \"x-datadog-sampling-priority\";\n+    private static final String DD_ORIGIN_KEY = \"x-datadog-origin\";\n+\n+    private static final String B3_TRACE_ID_KEY = \"X-B3-TraceId\";\n+    private static final String B3_SPAN_ID_KEY = \"X-B3-SpanId\";\n+    private static final String B3_SAMPLING_PRIORITY_KEY = \"X-B3-Sampled\";\n+\n+    private static final String HAYSTACK_TRACE_ID_KEY = \"Trace-ID\";\n+    private static final String HAYSTACK_SPAN_ID_KEY = \"Span-ID\";\n+    private static final String HAYSTACK_PARENT_ID_KEY = \"Parent_ID\";\n+\n+    private static final List<String> KEYS =\n+        Arrays.asList(\n+            DD_TRACE_ID_KEY,\n+            DD_SPAN_ID_KEY,\n+            DD_SAMPLING_PRIORITY_KEY,\n+            DD_ORIGIN_KEY,\n+            B3_TRACE_ID_KEY,\n+            B3_SPAN_ID_KEY,\n+            B3_SAMPLING_PRIORITY_KEY,\n+            HAYSTACK_TRACE_ID_KEY,\n+            HAYSTACK_SPAN_ID_KEY,\n+            HAYSTACK_PARENT_ID_KEY);\n+\n+    private final HttpTextFormat.Getter<C> getter;\n+\n+    private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n+      this.getter = getter;\n+    }\n+\n+    @Override\n+    public Iterable<String> keys(final C carrier) {\n+      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.\n+      // https://github.com/open-telemetry/opentelemetry-specification/issues/433\n+      return KEYS;\n+    }\n+\n+    @Override\n+    public String get(final C carrier, final String key) {\n+      return getter.get(carrier, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODEzNDUyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyNjoxMlrOGmMnhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0OTo0NFrOGmbUbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTc5Ng==", "bodyText": "Scopes all the way down?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442705796", "createdAt": "2020-06-19T08:26:12Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+import io.opentelemetry.context.Scope;\n+\n+public class OtelScope implements Scope, TraceScope {\n+  private final AgentScope delegate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NjY3MQ==", "bodyText": "It's a wrapper/bridge class... similar to what is done in the opentracing instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442946671", "createdAt": "2020-06-19T16:49:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+import io.opentelemetry.context.Scope;\n+\n+public class OtelScope implements Scope, TraceScope {\n+  private final AgentScope delegate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNTc5Ng=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODEzOTg3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODoyNzo1NFrOGmMqxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzo0MTo1M1rOGmcrDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNjYzMA==", "bodyText": "Which timezone? Is there a guarantee it's UTC?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442706630", "createdAt": "2020-06-19T08:27:54Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.\n+    }\n+  }\n+\n+  @Override\n+  public void addEvent(final String name) {}\n+\n+  @Override\n+  public void addEvent(final String name, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final String name, final Map<String, AttributeValue> attributes) {}\n+\n+  @Override\n+  public void addEvent(\n+      final String name, final Map<String, AttributeValue> attributes, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final Event event) {}\n+\n+  @Override\n+  public void addEvent(final Event event, final long timestamp) {}\n+\n+  @Override\n+  public void setStatus(final Status status) {\n+    if (!status.isOk()) {\n+      delegate.setError(true);\n+      delegate.setTag(DDTags.ERROR_MSG, status.getDescription());\n+    }\n+  }\n+\n+  @Override\n+  public void updateName(final String name) {\n+    delegate.setResourceName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.finish();\n+  }\n+\n+  @Override\n+  public void end(final EndSpanOptions endOptions) {\n+    if (endOptions.getEndTimestamp() > 0) {\n+      delegate.finish(TimeUnit.NANOSECONDS.toMicros(endOptions.getEndTimestamp()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NzUyMA==", "bodyText": "I'm actually not sure... I think it fully depends on what the user provides which we can't control.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442947520", "createdAt": "2020-06-19T16:51:40Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.\n+    }\n+  }\n+\n+  @Override\n+  public void addEvent(final String name) {}\n+\n+  @Override\n+  public void addEvent(final String name, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final String name, final Map<String, AttributeValue> attributes) {}\n+\n+  @Override\n+  public void addEvent(\n+      final String name, final Map<String, AttributeValue> attributes, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final Event event) {}\n+\n+  @Override\n+  public void addEvent(final Event event, final long timestamp) {}\n+\n+  @Override\n+  public void setStatus(final Status status) {\n+    if (!status.isOk()) {\n+      delegate.setError(true);\n+      delegate.setTag(DDTags.ERROR_MSG, status.getDescription());\n+    }\n+  }\n+\n+  @Override\n+  public void updateName(final String name) {\n+    delegate.setResourceName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.finish();\n+  }\n+\n+  @Override\n+  public void end(final EndSpanOptions endOptions) {\n+    if (endOptions.getEndTimestamp() > 0) {\n+      delegate.finish(TimeUnit.NANOSECONDS.toMicros(endOptions.getEndTimestamp()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNjYzMA=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk2ODg0NA==", "bodyText": "It doesn't make sense to compare timestamps taken relative to different clocks, so whoever computes durations needs to be in control of the clocks.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442968844", "createdAt": "2020-06-19T17:41:53Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.\n+    }\n+  }\n+\n+  @Override\n+  public void addEvent(final String name) {}\n+\n+  @Override\n+  public void addEvent(final String name, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final String name, final Map<String, AttributeValue> attributes) {}\n+\n+  @Override\n+  public void addEvent(\n+      final String name, final Map<String, AttributeValue> attributes, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final Event event) {}\n+\n+  @Override\n+  public void addEvent(final Event event, final long timestamp) {}\n+\n+  @Override\n+  public void setStatus(final Status status) {\n+    if (!status.isOk()) {\n+      delegate.setError(true);\n+      delegate.setTag(DDTags.ERROR_MSG, status.getDescription());\n+    }\n+  }\n+\n+  @Override\n+  public void updateName(final String name) {\n+    delegate.setResourceName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.finish();\n+  }\n+\n+  @Override\n+  public void end(final EndSpanOptions endOptions) {\n+    if (endOptions.getEndTimestamp() > 0) {\n+      delegate.finish(TimeUnit.NANOSECONDS.toMicros(endOptions.getEndTimestamp()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwNjYzMA=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODE1MTgzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozMTozN1rOGmMyXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozMTozN1rOGmMyXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwODU3NA==", "bodyText": "if (span instanceof OtelSpan) {\n      return ((OtelSpan) span).getDelegate();\n    }\n    return null == span ? null : AgentTracer.NoopAgentSpan.INSTANCE;", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442708574", "createdAt": "2020-06-19T08:31:37Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/TypeConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+\n+// Centralized place to do conversions\n+public class TypeConverter {\n+  // TODO maybe add caching to reduce new objects being created\n+\n+  public AgentSpan toAgentSpan(final Span span) {\n+    if (span == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODE1NzI2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozMzoyN1rOGmM2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozMzoyN1rOGmM2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwOTUwOQ==", "bodyText": "if (spanContext instanceof OtelSpanContext) {\n      return ((OtelSpanContext) spanContext).getDelegate();\n    } \n    return null == spanContext ? null : AgentTracer.NoopContext.INSTANCE;", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442709509", "createdAt": "2020-06-19T08:33:27Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/TypeConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+\n+// Centralized place to do conversions\n+public class TypeConverter {\n+  // TODO maybe add caching to reduce new objects being created\n+\n+  public AgentSpan toAgentSpan(final Span span) {\n+    if (span == null) {\n+      return null;\n+    } else if (span instanceof OtelSpan) {\n+      return ((OtelSpan) span).getDelegate();\n+    } else {\n+      // NOOP Span, otherwise arbitrary spans aren't supported.\n+      return AgentTracer.NoopAgentSpan.INSTANCE;\n+    }\n+  }\n+\n+  public Span toSpan(final AgentSpan agentSpan) {\n+    if (agentSpan == null) {\n+      return null;\n+    }\n+    return new OtelSpan(agentSpan, this);\n+  }\n+\n+  public Scope toScope(final AgentScope scope) {\n+    if (scope == null) {\n+      return null;\n+    }\n+    return new OtelScope(scope);\n+  }\n+\n+  public SpanContext toSpanContext(final AgentSpan.Context context) {\n+    if (context == null) {\n+      return null;\n+    }\n+    return new OtelSpanContext(context);\n+  }\n+\n+  public AgentSpan.Context toContext(final SpanContext spanContext) {\n+    if (spanContext == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODE2MDkxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/test/groovy/OpenTelemetryTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozNDo0N1rOGmM4eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjo1MDo0NVrOGnTg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMDEzNg==", "bodyText": "Since this can leak to other tests, is it a time bomb? Do we need a much easier way of controlling environmental conditions?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442710136", "createdAt": "2020-06-19T08:34:47Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/test/groovy/OpenTelemetryTest.groovy", "diffHunk": "@@ -0,0 +1,212 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.api.DDId\n+import datadog.trace.api.DDTags\n+import datadog.trace.api.interceptor.MutableSpan\n+import datadog.trace.api.sampling.PrioritySampling\n+import datadog.trace.context.TraceScope\n+import datadog.trace.core.propagation.ExtractedContext\n+import io.grpc.Context\n+import io.opentelemetry.OpenTelemetry\n+import io.opentelemetry.context.propagation.HttpTextFormat\n+import io.opentelemetry.trace.Status\n+import io.opentelemetry.trace.TracingContextUtils\n+import spock.lang.Subject\n+\n+class OpenTelemetryTest extends AgentTestRunner {\n+  static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NzM2MA==", "bodyText": "I tried clearing this and other similar tests out in cleanup, but it caused other test problems, likely because of a race condition with other tests.  Not sure though.  Either way, I don't want to deal with this problem here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r443867360", "createdAt": "2020-06-22T22:50:45Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/test/groovy/OpenTelemetryTest.groovy", "diffHunk": "@@ -0,0 +1,212 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.api.DDId\n+import datadog.trace.api.DDTags\n+import datadog.trace.api.interceptor.MutableSpan\n+import datadog.trace.api.sampling.PrioritySampling\n+import datadog.trace.context.TraceScope\n+import datadog.trace.core.propagation.ExtractedContext\n+import io.grpc.Context\n+import io.opentelemetry.OpenTelemetry\n+import io.opentelemetry.context.propagation.HttpTextFormat\n+import io.opentelemetry.trace.Status\n+import io.opentelemetry.trace.TracingContextUtils\n+import spock.lang.Subject\n+\n+class OpenTelemetryTest extends AgentTestRunner {\n+  static {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMDEzNg=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODE2MjI4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/test/groovy/OpenTelemetryTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozNToxOFrOGmM5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjo1MToxOFrOGnThgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMDM3MA==", "bodyText": "I'm not sure how I feel about this much logic in tests. I haven't encountered it in other code bases.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r442710370", "createdAt": "2020-06-19T08:35:18Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/test/groovy/OpenTelemetryTest.groovy", "diffHunk": "@@ -0,0 +1,212 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.api.DDId\n+import datadog.trace.api.DDTags\n+import datadog.trace.api.interceptor.MutableSpan\n+import datadog.trace.api.sampling.PrioritySampling\n+import datadog.trace.context.TraceScope\n+import datadog.trace.core.propagation.ExtractedContext\n+import io.grpc.Context\n+import io.opentelemetry.OpenTelemetry\n+import io.opentelemetry.context.propagation.HttpTextFormat\n+import io.opentelemetry.trace.Status\n+import io.opentelemetry.trace.TracingContextUtils\n+import spock.lang.Subject\n+\n+class OpenTelemetryTest extends AgentTestRunner {\n+  static {\n+    System.setProperty(\"dd.integration.opentelemetry-beta.enabled\", \"true\")\n+  }\n+\n+  @Subject\n+  def tracer = OpenTelemetry.tracerProvider.get(\"test-inst\")\n+  def httpPropagator = OpenTelemetry.getPropagators().httpTextFormat\n+\n+  def \"test span\"() {\n+    setup:\n+    def builder = tracer.spanBuilder(\"some name\")\n+    if (tagBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NzUyMw==", "bodyText": "Does this look better now?", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r443867523", "createdAt": "2020-06-22T22:51:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/test/groovy/OpenTelemetryTest.groovy", "diffHunk": "@@ -0,0 +1,212 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.api.DDId\n+import datadog.trace.api.DDTags\n+import datadog.trace.api.interceptor.MutableSpan\n+import datadog.trace.api.sampling.PrioritySampling\n+import datadog.trace.context.TraceScope\n+import datadog.trace.core.propagation.ExtractedContext\n+import io.grpc.Context\n+import io.opentelemetry.OpenTelemetry\n+import io.opentelemetry.context.propagation.HttpTextFormat\n+import io.opentelemetry.trace.Status\n+import io.opentelemetry.trace.TracingContextUtils\n+import spock.lang.Subject\n+\n+class OpenTelemetryTest extends AgentTestRunner {\n+  static {\n+    System.setProperty(\"dd.integration.opentelemetry-beta.enabled\", \"true\")\n+  }\n+\n+  @Subject\n+  def tracer = OpenTelemetry.tracerProvider.get(\"test-inst\")\n+  def httpPropagator = OpenTelemetry.getPropagators().httpTextFormat\n+\n+  def \"test span\"() {\n+    setup:\n+    def builder = tracer.spanBuilder(\"some name\")\n+    if (tagBuilder) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMDM3MA=="}, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUwNTM0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowOTozMVrOGrImtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowOTozMVrOGrImtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MjkzNQ==", "bodyText": "I wouldn't expect our Otel objects to implement our objects -- just the Otel objects.\nI'm curious why we're implementing both interfaces.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447882935", "createdAt": "2020-06-30T18:09:31Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+import io.opentelemetry.context.Scope;\n+\n+public class OtelScope implements Scope, TraceScope {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUwODA3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMDoyM1rOGrIobg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMDoyM1rOGrIobg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MzM3NA==", "bodyText": "I'm surprised to see the async propagation methods on this class.  I realize it follows from implementing datadog's TraceScope, but wonder why we need to do that.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447883374", "createdAt": "2020-06-30T18:10:23Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelScope.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+import io.opentelemetry.context.Scope;\n+\n+public class OtelScope implements Scope, TraceScope {\n+  private final AgentScope delegate;\n+\n+  public OtelScope(final AgentScope delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public Continuation capture() {\n+    return delegate.capture();\n+  }\n+\n+  @Override\n+  public void close() {\n+    delegate.close();\n+  }\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUxMzEzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMTo1M1rOGrIriw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMTo1M1rOGrIriw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4NDE3MQ==", "bodyText": "I wonder if the unsupported methods / cases should an option to raise UnsupportedOperationException.\nNot raising an exception bit us in another situation recently.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447884171", "createdAt": "2020-06-30T18:11:53Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUxNTU2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMjozNlrOGrItCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxMjozNlrOGrItCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4NDU1Mw==", "bodyText": "As with Scope, I wouldn't expect this to implement MutableSpan.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447884553", "createdAt": "2020-06-30T18:12:36Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUyNjAyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxNDo1M1rOGrIzAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxNDo1M1rOGrIzAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4NjA4Mg==", "bodyText": "This looks wrong to me.\nI would expect the setters to return \"this\" -- not unwrap the delegate.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447886082", "createdAt": "2020-06-30T18:14:53Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpan.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.interceptor.MutableSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.trace.EndSpanOptions;\n+import io.opentelemetry.trace.Event;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelSpan implements Span, MutableSpan {\n+  private final AgentSpan delegate;\n+  private final TypeConverter converter;\n+\n+  public OtelSpan(final AgentSpan agentSpan, final TypeConverter typeConverter) {\n+    delegate = agentSpan;\n+    converter = typeConverter;\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final String value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final long value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final double value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final boolean value) {\n+    delegate.setTag(key, value);\n+  }\n+\n+  @Override\n+  public void setAttribute(final String key, final AttributeValue value) {\n+    switch (value.getType()) {\n+      case LONG:\n+        delegate.setTag(key, value.getLongValue());\n+        break;\n+      case DOUBLE:\n+        delegate.setTag(key, value.getDoubleValue());\n+        break;\n+      case STRING:\n+        delegate.setTag(key, value.getStringValue());\n+        break;\n+      case BOOLEAN:\n+        delegate.setTag(key, value.getBooleanValue());\n+        break;\n+      default:\n+        // Unsupported.... Ignoring.\n+    }\n+  }\n+\n+  @Override\n+  public void addEvent(final String name) {}\n+\n+  @Override\n+  public void addEvent(final String name, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final String name, final Map<String, AttributeValue> attributes) {}\n+\n+  @Override\n+  public void addEvent(\n+      final String name, final Map<String, AttributeValue> attributes, final long timestamp) {}\n+\n+  @Override\n+  public void addEvent(final Event event) {}\n+\n+  @Override\n+  public void addEvent(final Event event, final long timestamp) {}\n+\n+  @Override\n+  public void setStatus(final Status status) {\n+    if (!status.isOk()) {\n+      delegate.setError(true);\n+      delegate.setTag(DDTags.ERROR_MSG, status.getDescription());\n+    }\n+  }\n+\n+  @Override\n+  public void updateName(final String name) {\n+    delegate.setResourceName(name);\n+  }\n+\n+  @Override\n+  public void end() {\n+    delegate.finish();\n+  }\n+\n+  @Override\n+  public void end(final EndSpanOptions endOptions) {\n+    if (endOptions.getEndTimestamp() > 0) {\n+      delegate.finish(TimeUnit.NANOSECONDS.toMicros(endOptions.getEndTimestamp()));\n+    } else {\n+      delegate.finish();\n+    }\n+  }\n+\n+  @Override\n+  public SpanContext getContext() {\n+    return converter.toSpanContext(delegate.context());\n+  }\n+\n+  @Override\n+  public boolean isRecording() {\n+    return delegate.getTraceId().toLong() != 0;\n+  }\n+\n+  public AgentSpan getDelegate() {\n+    return delegate;\n+  }\n+\n+  @Override\n+  public long getStartTime() {\n+    return delegate.getStartTime();\n+  }\n+\n+  @Override\n+  public long getDurationNano() {\n+    return delegate.getDurationNano();\n+  }\n+\n+  @Override\n+  public String getOperationName() {\n+    return delegate.getOperationName();\n+  }\n+\n+  @Override\n+  public MutableSpan setOperationName(final String serviceName) {\n+    return delegate.setOperationName(serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e90dd6b636c73f437731cafb2c1c13e7805c82"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTUzOTU3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpanContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxODoyM1rOGrI7Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxODoyM1rOGrI7Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4ODE5MQ==", "bodyText": "This doesn't implement AgentSpan.Context?  I generally don't think we should implement our interfaces here, but the inconsistency confuses me.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447888191", "createdAt": "2020-06-30T18:18:23Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelSpanContext.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+\n+public class OtelSpanContext extends SpanContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f9bbbc3bdcb89d34392d3b7bcb06ad005a6ee6c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU0MzQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelTracer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxOTowOFrOGrI9YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoxOTowOFrOGrI9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4ODczNw==", "bodyText": "I'd like if we could push the information down into our tracers, too, but that can be another PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447888737", "createdAt": "2020-06-30T18:19:08Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelTracer.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OtelTracer implements Tracer {\n+  private final String tracerName;\n+  private final AgentTracer.TracerAPI tracer;\n+  private final TypeConverter converter;\n+\n+  OtelTracer(\n+      final String tracerName, final AgentTracer.TracerAPI tracer, final TypeConverter converter) {\n+    this.tracerName = tracerName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f9bbbc3bdcb89d34392d3b7bcb06ad005a6ee6c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU3NjY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/TypeConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNzo1OVrOGrJR4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNzo1OVrOGrJR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5Mzk4Ng==", "bodyText": "I feel like this might be making things more complicated than they need to be.\nI don't see much value in centralizing this logic given that the conversion to / from should be a 1-liner.\nI'm also worried by the addition of more instanceof checks which we should avoid, but also just seem unnecessary in this case.", "url": "https://github.com/DataDog/dd-trace-java/pull/1605#discussion_r447893986", "createdAt": "2020-06-30T18:27:59Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/TypeConverter.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.opentelemetry;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.opentelemetry.context.Scope;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.SpanContext;\n+\n+// Centralized place to do conversions\n+public class TypeConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f9bbbc3bdcb89d34392d3b7bcb06ad005a6ee6c"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 85, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}