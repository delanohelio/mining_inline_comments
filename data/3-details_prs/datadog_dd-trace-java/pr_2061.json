{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODE3NDM1", "number": 2061, "title": "Aerospike 4 instrumentation", "bodyText": "", "createdAt": "2020-11-09T14:50:06Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2061", "merged": true, "mergeCommit": {"oid": "d69c337f3c1c455e91dd356c9f7b038a1662a4a3"}, "closed": true, "closedAt": "2020-11-16T12:35:29Z", "author": {"login": "mcculls"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda19TwABqjM5NzQxNTA3OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddDkAcgH2gAyNTE3ODE3NDM1OmM2OWQwNDY1MGEwODg0ZDU4MWViOWI0NjI3Y2VlZmQ1NTZhODQzYWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "039d7c2ca4dfdf93d88151f2fc3dc364d747000c", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/039d7c2ca4dfdf93d88151f2fc3dc364d747000c", "committedDate": "2020-11-09T14:41:45Z", "message": "Aerospike direct NioEventLoop instrumentation"}, "afterCommit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d279f880a180dec6d39c666af1ce3f172abf3b7a", "committedDate": "2020-11-09T14:51:02Z", "message": "Aerospike direct NioEventLoop instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzQ0ODMz", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-526344833", "createdAt": "2020-11-09T15:03:34Z", "commit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMzozNFrOHvy-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMzozNFrOHvy-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDMzNQ==", "bodyText": "Is injecting Runnable absolutely necessary? We're trying to migrate away from doing this at all.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r519880335", "createdAt": "2020-11-09T15:03:34Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/NioEventLoopInstrumentation.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExecutorInstrumentationUtils;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.RunnableFuture;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class NioEventLoopInstrumentation extends Instrumenter.Default {\n+  public NioEventLoopInstrumentation() {\n+    super(\"aerospike\", \"java_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"com.aerospike.client.async.NioEventLoop\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStoreForAll() {\n+    return singletonMap(Runnable.class.getName(), State.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzQ3Mzg5", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-526347389", "createdAt": "2020-11-09T15:06:07Z", "commit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNjowN1rOHvzF1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNjowN1rOHvzF1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MjE5Ng==", "bodyText": "How do we know this is safe to do? Is there a strict natural limit imposed elsewhere?", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r519882196", "createdAt": "2020-11-09T15:06:07Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/TracingListenerHelper.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import com.aerospike.client.listener.BatchListListener;\n+import com.aerospike.client.listener.BatchSequenceListener;\n+import com.aerospike.client.listener.DeleteListener;\n+import com.aerospike.client.listener.ExecuteListener;\n+import com.aerospike.client.listener.ExistsArrayListener;\n+import com.aerospike.client.listener.ExistsListener;\n+import com.aerospike.client.listener.ExistsSequenceListener;\n+import com.aerospike.client.listener.RecordArrayListener;\n+import com.aerospike.client.listener.RecordListener;\n+import com.aerospike.client.listener.RecordSequenceListener;\n+import com.aerospike.client.listener.WriteListener;\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+\n+public final class TracingListenerHelper implements Function<String, String> {\n+  public static final TracingListenerHelper INSTANCE = new TracingListenerHelper();\n+\n+  private static final String LISTENER_PKG_PREFIX = \"com.aerospike.client.listener.\";\n+\n+  private static final DDCache<String, String> LISTENER_NAME_CACHE = DDCaches.newUnboundedCache(16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzUyNjU1", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-526352655", "createdAt": "2020-11-09T15:11:27Z", "commit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxMToyOFrOHvzVMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxMToyOFrOHvzVMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4NjEzMQ==", "bodyText": "Just an idea. I like giving the advice class a verb name which I find makes reading this method a bit easier. On the left hand side you have the constraints for what this will match, and on the right a description of what it will do when it matches, rather than just the name of the class the code sits in.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r519886131", "createdAt": "2020-11-09T15:11:28Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/NodeInstrumentation.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.instrumentation.aerospike4.AerospikeClientDecorator.DECORATE;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.aerospike.client.cluster.Node;\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class NodeInstrumentation extends Instrumenter.Default {\n+  public NodeInstrumentation() {\n+    super(\"aerospike\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"com.aerospike.client.cluster.Node\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".AerospikeClientDecorator\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isMethod().and(named(\"getConnection\")), getClass().getName() + \"$ConnectionAdvice\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MzU0Nzk5", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-526354799", "createdAt": "2020-11-09T15:13:39Z", "commit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxMzo0MFrOHvzbVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNToxMzo0MFrOHvzbVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4NzcwMA==", "bodyText": "Why is this instrumentation necessary? Custom executor? If so, shouldn't com.aerospike.client.async.NioEventLoop be whitelisted in the Java executor instrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r519887700", "createdAt": "2020-11-09T15:13:40Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/NioEventLoopInstrumentation.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExecutorInstrumentationUtils;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.RunnableWrapper;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Map;\n+import java.util.concurrent.RunnableFuture;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class NioEventLoopInstrumentation extends Instrumenter.Default {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d279f880a180dec6d39c666af1ce3f172abf3b7a", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d279f880a180dec6d39c666af1ce3f172abf3b7a", "committedDate": "2020-11-09T14:51:02Z", "message": "Aerospike direct NioEventLoop instrumentation"}, "afterCommit": {"oid": "ec5f0bae731cd65904375e674bc686c6b4ba50b9", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ec5f0bae731cd65904375e674bc686c6b4ba50b9", "committedDate": "2020-11-09T17:36:42Z", "message": "Aerospike direct NioEventLoop instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec5f0bae731cd65904375e674bc686c6b4ba50b9", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ec5f0bae731cd65904375e674bc686c6b4ba50b9", "committedDate": "2020-11-09T17:36:42Z", "message": "Aerospike direct NioEventLoop instrumentation"}, "afterCommit": {"oid": "652e4f6cce1d66ceed472b9004a701257d988764", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/652e4f6cce1d66ceed472b9004a701257d988764", "committedDate": "2020-11-09T17:52:00Z", "message": "Aerospike direct NioEventLoop instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "652e4f6cce1d66ceed472b9004a701257d988764", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/652e4f6cce1d66ceed472b9004a701257d988764", "committedDate": "2020-11-09T17:52:00Z", "message": "Aerospike direct NioEventLoop instrumentation"}, "afterCommit": {"oid": "8265c8daea8a8b8f4edfac080e60f96ee38a4f6e", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8265c8daea8a8b8f4edfac080e60f96ee38a4f6e", "committedDate": "2020-11-09T17:58:27Z", "message": "Aerospike direct NioEventLoop instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8265c8daea8a8b8f4edfac080e60f96ee38a4f6e", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8265c8daea8a8b8f4edfac080e60f96ee38a4f6e", "committedDate": "2020-11-09T17:58:27Z", "message": "Aerospike direct NioEventLoop instrumentation"}, "afterCommit": {"oid": "64af5c7875fd2b18817f78ace16e6e7695b7114b", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/64af5c7875fd2b18817f78ace16e6e7695b7114b", "committedDate": "2020-11-11T14:34:57Z", "message": "Initial Aerospike tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64af5c7875fd2b18817f78ace16e6e7695b7114b", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/64af5c7875fd2b18817f78ace16e6e7695b7114b", "committedDate": "2020-11-11T14:34:57Z", "message": "Initial Aerospike tests"}, "afterCommit": {"oid": "0c5b0871601bd2c5c4f8401c49bceef7362c17ce", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0c5b0871601bd2c5c4f8401c49bceef7362c17ce", "committedDate": "2020-11-11T15:11:58Z", "message": "Initial Aerospike tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c5b0871601bd2c5c4f8401c49bceef7362c17ce", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0c5b0871601bd2c5c4f8401c49bceef7362c17ce", "committedDate": "2020-11-11T15:11:58Z", "message": "Initial Aerospike tests"}, "afterCommit": {"oid": "7ce8eb40a6f3688f5a8c274d1a5b1f3236ebd923", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7ce8eb40a6f3688f5a8c274d1a5b1f3236ebd923", "committedDate": "2020-11-11T16:52:23Z", "message": "Aerospike client tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae30aaf27d619242b6124c4a4b2c4fc6d49b842e", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ae30aaf27d619242b6124c4a4b2c4fc6d49b842e", "committedDate": "2020-11-11T17:17:46Z", "message": "Add aerospike image to CI"}, "afterCommit": {"oid": "e828acb8079ca41afc32980d4fa906943bff83c8", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e828acb8079ca41afc32980d4fa906943bff83c8", "committedDate": "2020-11-11T17:36:21Z", "message": "Aerospike client tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e828acb8079ca41afc32980d4fa906943bff83c8", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e828acb8079ca41afc32980d4fa906943bff83c8", "committedDate": "2020-11-11T17:36:21Z", "message": "Aerospike client tests"}, "afterCommit": {"oid": "8126ab4d967ae761fc2a4f164c0755d1a1c38e2f", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8126ab4d967ae761fc2a4f164c0755d1a1c38e2f", "committedDate": "2020-11-11T17:54:55Z", "message": "Aerospike client tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTg4ODI0", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528988824", "createdAt": "2020-11-12T11:19:41Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxOTo0MVrOHx2PQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToxOTo0MVrOHx2PQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMDkxMg==", "bodyText": "DDSpanTypes.AEROSPIKE? (I know they're reversed, but I'm questioning why)", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522030912", "createdAt": "2020-11-12T11:19:41Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/AerospikeClientDecorator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+\n+import com.aerospike.client.AerospikeClient;\n+import com.aerospike.client.cluster.Cluster;\n+import com.aerospike.client.cluster.Node;\n+import com.aerospike.client.cluster.Partition;\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AerospikeClientDecorator extends DBTypeProcessingDatabaseClientDecorator<Node> {\n+  public static final UTF8BytesString AEROSPIKE_JAVA =\n+      UTF8BytesString.createConstant(\"aerospike-java\");\n+\n+  public static final AerospikeClientDecorator DECORATE = new AerospikeClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"aerospike\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"java-aerospike\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTkwMzcw", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528990370", "createdAt": "2020-11-12T11:21:48Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyMTo0OFrOHx2UQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyMTo0OFrOHx2UQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMjE5NA==", "bodyText": "How big a string does this allocate?", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522032194", "createdAt": "2020-11-12T11:21:48Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/AerospikeClientDecorator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+\n+import com.aerospike.client.AerospikeClient;\n+import com.aerospike.client.cluster.Cluster;\n+import com.aerospike.client.cluster.Node;\n+import com.aerospike.client.cluster.Partition;\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AerospikeClientDecorator extends DBTypeProcessingDatabaseClientDecorator<Node> {\n+  public static final UTF8BytesString AEROSPIKE_JAVA =\n+      UTF8BytesString.createConstant(\"aerospike-java\");\n+\n+  public static final AerospikeClientDecorator DECORATE = new AerospikeClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"aerospike\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"java-aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return DDSpanTypes.AEROSPIKE;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final Node node) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final Node node) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbHostname(final Node node) {\n+    return null;\n+  }\n+\n+  public AgentSpan onConnection(\n+      final AgentSpan span, final Node node, final Cluster cluster, final Partition partition) {\n+\n+    final InetSocketAddress socketAddress = node.getAddress();\n+    span.setTag(Tags.PEER_HOSTNAME, socketAddress.getHostName());\n+    span.setTag(Tags.PEER_PORT, socketAddress.getPort());\n+    final InetAddress remoteAddress = socketAddress.getAddress();\n+    if (remoteAddress instanceof Inet4Address) {\n+      span.setTag(Tags.PEER_HOST_IPV4, remoteAddress.getHostAddress());\n+    } else if (remoteAddress instanceof Inet6Address) {\n+      span.setTag(Tags.PEER_HOST_IPV6, remoteAddress.getHostAddress());\n+    }\n+\n+    if (cluster != null && cluster.getUser() != null) {\n+      span.setTag(Tags.DB_USER, new String(cluster.getUser(), StandardCharsets.UTF_8));\n+    }\n+\n+    if (partition != null) {\n+      String instanceName = partition.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTkyMTMy", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528992132", "createdAt": "2020-11-12T11:24:22Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNDoyMlrOHx2aEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNDoyMlrOHx2aEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzMzY4MQ==", "bodyText": "Does Cluster.getUser() return a byte[]? If so that's exactly what we'd want for serialisation later. Maybe we could wrap this in UTF8ByteString (which would need some modifications to support constructing from a byte[], but this would pay dividends for long ASCII strings like URLs if we did).", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522033681", "createdAt": "2020-11-12T11:24:22Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/AerospikeClientDecorator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+\n+import com.aerospike.client.AerospikeClient;\n+import com.aerospike.client.cluster.Cluster;\n+import com.aerospike.client.cluster.Node;\n+import com.aerospike.client.cluster.Partition;\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AerospikeClientDecorator extends DBTypeProcessingDatabaseClientDecorator<Node> {\n+  public static final UTF8BytesString AEROSPIKE_JAVA =\n+      UTF8BytesString.createConstant(\"aerospike-java\");\n+\n+  public static final AerospikeClientDecorator DECORATE = new AerospikeClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"aerospike\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"java-aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return DDSpanTypes.AEROSPIKE;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final Node node) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final Node node) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbHostname(final Node node) {\n+    return null;\n+  }\n+\n+  public AgentSpan onConnection(\n+      final AgentSpan span, final Node node, final Cluster cluster, final Partition partition) {\n+\n+    final InetSocketAddress socketAddress = node.getAddress();\n+    span.setTag(Tags.PEER_HOSTNAME, socketAddress.getHostName());\n+    span.setTag(Tags.PEER_PORT, socketAddress.getPort());\n+    final InetAddress remoteAddress = socketAddress.getAddress();\n+    if (remoteAddress instanceof Inet4Address) {\n+      span.setTag(Tags.PEER_HOST_IPV4, remoteAddress.getHostAddress());\n+    } else if (remoteAddress instanceof Inet6Address) {\n+      span.setTag(Tags.PEER_HOST_IPV6, remoteAddress.getHostAddress());\n+    }\n+\n+    if (cluster != null && cluster.getUser() != null) {\n+      span.setTag(Tags.DB_USER, new String(cluster.getUser(), StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTkzMTgy", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528993182", "createdAt": "2020-11-12T11:25:52Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNTo1MlrOHx2deg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMToyNTo1MlrOHx2deg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNDU1NA==", "bodyText": "I feel like I've seen this code before, and this PR doesn't add significantly to the number of times I have seen it, so it's harsh to pick on this PR, but could this be moved into a utility method taking a span and an InetSocketAddress?", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522034554", "createdAt": "2020-11-12T11:25:52Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/AerospikeClientDecorator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+\n+import com.aerospike.client.AerospikeClient;\n+import com.aerospike.client.cluster.Cluster;\n+import com.aerospike.client.cluster.Node;\n+import com.aerospike.client.cluster.Partition;\n+import datadog.trace.api.Config;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+\n+public class AerospikeClientDecorator extends DBTypeProcessingDatabaseClientDecorator<Node> {\n+  public static final UTF8BytesString AEROSPIKE_JAVA =\n+      UTF8BytesString.createConstant(\"aerospike-java\");\n+\n+  public static final AerospikeClientDecorator DECORATE = new AerospikeClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"aerospike\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"java-aerospike\";\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return DDSpanTypes.AEROSPIKE;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"aerospike\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final Node node) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final Node node) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbHostname(final Node node) {\n+    return null;\n+  }\n+\n+  public AgentSpan onConnection(\n+      final AgentSpan span, final Node node, final Cluster cluster, final Partition partition) {\n+\n+    final InetSocketAddress socketAddress = node.getAddress();\n+    span.setTag(Tags.PEER_HOSTNAME, socketAddress.getHostName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTk2OTYy", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528996962", "createdAt": "2020-11-12T11:31:17Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozMToxOFrOHx2pkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozMToxOFrOHx2pkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzNzY0OQ==", "bodyText": "I don't think you need the activeScope() != null check. Either wrapping in FutureTask is safe or it isn't - it doesn't depend on whether there is an active scope - and FutureTask's constructor is instrumented to do this check already", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522037649", "createdAt": "2020-11-12T11:31:18Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/NioEventLoopInstrumentation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType.RUNNABLE;\n+import static datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.exclude;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RunnableFuture;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class NioEventLoopInstrumentation extends Instrumenter.Default {\n+  public NioEventLoopInstrumentation() {\n+    super(\"aerospike\", \"java_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"com.aerospike.client.async.NioEventLoop\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"execute\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, Runnable.class)),\n+        getClass().getName() + \"$WrapAsFutureTaskAdvice\");\n+  }\n+\n+  public static final class WrapAsFutureTaskAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void enterExecute(@Advice.Argument(value = 0, readOnly = false) Runnable task) {\n+      if (activeScope() != null && !(task instanceof RunnableFuture) && !exclude(RUNNABLE, task)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTk3NTA0", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528997504", "createdAt": "2020-11-12T11:32:01Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozMjowMVrOHx2rKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozMjowMVrOHx2rKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzODA1Nw==", "bodyText": "You can use NameMatchers.namedOneOf(\"getNodeRead\", \"getNodeWrite\") here.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522038057", "createdAt": "2020-11-12T11:32:01Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/PartitionInstrumentation.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.instrumentation.aerospike4.AerospikeClientDecorator.DECORATE;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.returns;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.aerospike.client.cluster.Cluster;\n+import com.aerospike.client.cluster.Node;\n+import com.aerospike.client.cluster.Partition;\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class PartitionInstrumentation extends Instrumenter.Default {\n+  public PartitionInstrumentation() {\n+    super(\"aerospike\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"com.aerospike.client.cluster.Partition\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".AerospikeClientDecorator\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(named(\"getNodeRead\").or(named(\"getNodeWrite\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTk5MTM4", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-528999138", "createdAt": "2020-11-12T11:34:17Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozNDoxN1rOHx2v-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTozNDoxN1rOHx2v-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAzOTI4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522039289", "createdAt": "2020-11-12T11:34:17Z", "author": {"login": "richardstartin"}, "path": ".circleci/config.yml", "diffHunk": "@@ -129,6 +129,8 @@ jobs:\n       - image: memcached\n         # This is used by rabbitmq instrumentation tests\n       - image: rabbitmq\n+        # This is used by aerospike instrumentation tests\n+      - image: aerospike", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDAzNzg1", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-529003785", "createdAt": "2020-11-12T11:40:49Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MDo0OVrOHx2-HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MDo0OVrOHx2-HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MjkwOA==", "bodyText": "I'm going to check this out to play with it a bit, but I'm fairly sure this could all be simplified a lot by doing a type check in AbstractTracingListener and making that class concrete.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522042908", "createdAt": "2020-11-12T11:40:49Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/TracingListenerHelper.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import com.aerospike.client.listener.BatchListListener;\n+import com.aerospike.client.listener.BatchSequenceListener;\n+import com.aerospike.client.listener.DeleteListener;\n+import com.aerospike.client.listener.ExecuteListener;\n+import com.aerospike.client.listener.ExistsArrayListener;\n+import com.aerospike.client.listener.ExistsListener;\n+import com.aerospike.client.listener.ExistsSequenceListener;\n+import com.aerospike.client.listener.RecordArrayListener;\n+import com.aerospike.client.listener.RecordListener;\n+import com.aerospike.client.listener.RecordSequenceListener;\n+import com.aerospike.client.listener.WriteListener;\n+import datadog.trace.api.Function;\n+import datadog.trace.api.cache.DDCache;\n+import datadog.trace.api.cache.DDCaches;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+\n+public final class TracingListenerHelper implements Function<String, String> {\n+  public static final TracingListenerHelper INSTANCE = new TracingListenerHelper();\n+\n+  // won't grow more than the number of AerospikeClient methods that use a listener\n+  private static final DDCache<String, String> SIGNATURE_TO_LISTENER_NAME =\n+      DDCaches.newUnboundedCache(16);\n+\n+  private static final String LISTENER_PKG_PREFIX = \"com.aerospike.client.listener.\";\n+\n+  public Object traceListener(\n+      final String signature, final AgentScope scope, final Object listener) {\n+\n+    final String listenerName = SIGNATURE_TO_LISTENER_NAME.computeIfAbsent(signature, this);\n+\n+    switch (listenerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDA0NDE5", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-529004419", "createdAt": "2020-11-12T11:41:42Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MTo0MlrOHx3ACA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTo0MTo0MlrOHx3ACA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0MzQwMA==", "bodyText": "How does this differ from https://github.com/DataDog/dd-trace-java/pull/2061/files#diff-cd1e92d8edc4b34d91cc8baec6b82010a916939e45d29d746cabaf5dc6064873R17-R27 ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522043400", "createdAt": "2020-11-12T11:41:42Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/TracingExistsSequenceListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import com.aerospike.client.AerospikeException;\n+import com.aerospike.client.Key;\n+import com.aerospike.client.listener.ExistsSequenceListener;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+\n+public final class TracingExistsSequenceListener\n+    extends AbstractTracingListener<ExistsSequenceListener> implements ExistsSequenceListener {\n+\n+  public TracingExistsSequenceListener(\n+      final AgentScope clientScope, final ExistsSequenceListener listener) {\n+    super(clientScope, listener);\n+  }\n+\n+  @Override\n+  public void onExists(final Key key, final boolean exists) {\n+    listener.onExists(key, exists);\n+  }\n+\n+  @Override\n+  public void onSuccess() {\n+    super.onSuccess();\n+\n+    if (listener != null) {\n+      try (final TraceScope scope = continuation.activate()) {\n+        listener.onSuccess();\n+      }\n+    } else {\n+      continuation.cancel();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDc2NzQw", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-529076740", "createdAt": "2020-11-12T13:18:52Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjEzNjIx", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-529213621", "createdAt": "2020-11-12T15:38:36Z", "commit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTozODozNlrOHyAoQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNTo0ODozMVrOHyBHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMTE1Mg==", "bodyText": "Just to be safe and ensure the scope isn't being passed around where it shouldn't, I'd prefer if this took the AgentSpan directly.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522201152", "createdAt": "2020-11-12T15:38:36Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/AbstractTracingListener.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.instrumentation.aerospike4.AerospikeClientDecorator.DECORATE;\n+\n+import com.aerospike.client.AerospikeException;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.context.TraceScope.Continuation;\n+\n+public abstract class AbstractTracingListener<L> {\n+  protected final AgentSpan clientSpan;\n+  protected final Continuation continuation;\n+  protected final L listener;\n+\n+  public AbstractTracingListener(final AgentScope clientScope, final L listener) {\n+    this.clientSpan = clientScope.span();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzg5Ng==", "bodyText": "Many of these Listeners look the same.  What's the difference?  Can the duplication be reduced?", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522207896", "createdAt": "2020-11-12T15:47:01Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/TracingExecuteListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import com.aerospike.client.AerospikeException;\n+import com.aerospike.client.Key;\n+import com.aerospike.client.listener.ExecuteListener;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+\n+public final class TracingExecuteListener extends AbstractTracingListener<ExecuteListener>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwOTE2OA==", "bodyText": "Looks like Richard already brought this up.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r522209168", "createdAt": "2020-11-12T15:48:31Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/TracingExecuteListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import com.aerospike.client.AerospikeException;\n+import com.aerospike.client.Key;\n+import com.aerospike.client.listener.ExecuteListener;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.context.TraceScope;\n+\n+public final class TracingExecuteListener extends AbstractTracingListener<ExecuteListener>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzg5Ng=="}, "originalCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ba105851a80d130edad2de91fb86ddab62af62", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f2ba105851a80d130edad2de91fb86ddab62af62", "committedDate": "2020-11-13T16:14:23Z", "message": "Aerospike4 instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d77965f23646c69423b3943af2eeabc46231348", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3d77965f23646c69423b3943af2eeabc46231348", "committedDate": "2020-11-13T16:14:23Z", "message": "Aerospike direct NioEventLoop instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fe34cb41ad828176761ed433c0003392a9f7245", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1fe34cb41ad828176761ed433c0003392a9f7245", "committedDate": "2020-11-13T16:14:23Z", "message": "Move DB detail instrumentation from Node to Command/Partition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fc2014f29d8e691dc294b1d8acf5d2962f80115", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5fc2014f29d8e691dc294b1d8acf5d2962f80115", "committedDate": "2020-11-13T16:14:23Z", "message": "Aerospike client tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62267c4a15849c2da23f586ce122909c0ebf3da8", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/62267c4a15849c2da23f586ce122909c0ebf3da8", "committedDate": "2020-11-13T16:14:23Z", "message": "abstract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e4577dfdea6b89501722aebbc192d1094cbf8b9", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0e4577dfdea6b89501722aebbc192d1094cbf8b9", "committedDate": "2020-11-13T16:20:21Z", "message": "Wrap cluster.getUser byte array as UTF8BytesString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba42b31d3829f743b2f979038b5141d777c02ea", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4ba42b31d3829f743b2f979038b5141d777c02ea", "committedDate": "2020-11-13T16:23:07Z", "message": "Use BaseDecorator.onPeerConnection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a5101eaa090d32ee6622206ea4d6fdd6a86d50", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f4a5101eaa090d32ee6622206ea4d6fdd6a86d50", "committedDate": "2020-11-13T16:54:43Z", "message": "Prefer namedOneOf"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1229e925a95b27ba179240fc371553199ab3c3c0", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1229e925a95b27ba179240fc371553199ab3c3c0", "committedDate": "2020-11-12T11:06:57Z", "message": "abstract"}, "afterCommit": {"oid": "b0bf3692d121c3d1430bc728ccef97e40861681b", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b0bf3692d121c3d1430bc728ccef97e40861681b", "committedDate": "2020-11-13T17:37:17Z", "message": "Cleanup aerospike strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d755f42337531ca8b4a34ab23d3e047a77e19d5", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8d755f42337531ca8b4a34ab23d3e047a77e19d5", "committedDate": "2020-11-13T17:46:19Z", "message": "Cleanup aerospike strings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0bf3692d121c3d1430bc728ccef97e40861681b", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b0bf3692d121c3d1430bc728ccef97e40861681b", "committedDate": "2020-11-13T17:37:17Z", "message": "Cleanup aerospike strings"}, "afterCommit": {"oid": "8d755f42337531ca8b4a34ab23d3e047a77e19d5", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8d755f42337531ca8b4a34ab23d3e047a77e19d5", "committedDate": "2020-11-13T17:46:19Z", "message": "Cleanup aerospike strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03509a9c9cd2a90d78614c395d911d57d5387f7c", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/03509a9c9cd2a90d78614c395d911d57d5387f7c", "committedDate": "2020-11-13T23:04:48Z", "message": "Merge and simplify listener tracing wrappers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee09845ac971c57c19304d839d7956be139b591", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4ee09845ac971c57c19304d839d7956be139b591", "committedDate": "2020-11-13T23:52:44Z", "message": "Further listener simplification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b6242dfe86aa38946a13e03472c5b53e7658c5", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e5b6242dfe86aa38946a13e03472c5b53e7658c5", "committedDate": "2020-11-14T00:00:52Z", "message": "Remove redundant check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTY5NDY3", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-531169467", "createdAt": "2020-11-16T09:58:47Z", "commit": {"oid": "e5b6242dfe86aa38946a13e03472c5b53e7658c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1ODo0OFrOHzx0mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTo1ODo0OFrOHzx0mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1NTcwNQ==", "bodyText": "I would be tempted not to do this, despite the obvious opportunity for code deduplication.\n\nWe still instrument Runnable, so context will be captured twice, which may be confusing, and doubles work done.\nIt allocates to capture the parameters.\n\nAs painful as it is, I would consider duplicating what's below into each onSuccess overload.\n  DECORATE.beforeFinish(clientSpan);\n    clientSpan.finish();\n\n    if (listener != null) {\n      try (final TraceScope scope = continuation.activate()) {\n        // action\n      }\n    } else {\n      continuation.cancel();\n    }\nAll of this is much easier to follow now it's all centralised in a single class, and it's much easier to see what's common and what differs between each case, so thanks for simplifying this.", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#discussion_r524055705", "createdAt": "2020-11-16T09:58:48Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/aerospike-4/src/main/java/datadog/trace/instrumentation/aerospike4/TracingListener.java", "diffHunk": "@@ -0,0 +1,217 @@\n+package datadog.trace.instrumentation.aerospike4;\n+\n+import static datadog.trace.instrumentation.aerospike4.AerospikeClientDecorator.DECORATE;\n+\n+import com.aerospike.client.AerospikeException;\n+import com.aerospike.client.BatchRead;\n+import com.aerospike.client.Key;\n+import com.aerospike.client.Record;\n+import com.aerospike.client.listener.BatchListListener;\n+import com.aerospike.client.listener.BatchSequenceListener;\n+import com.aerospike.client.listener.DeleteListener;\n+import com.aerospike.client.listener.ExecuteListener;\n+import com.aerospike.client.listener.ExistsArrayListener;\n+import com.aerospike.client.listener.ExistsListener;\n+import com.aerospike.client.listener.ExistsSequenceListener;\n+import com.aerospike.client.listener.RecordArrayListener;\n+import com.aerospike.client.listener.RecordListener;\n+import com.aerospike.client.listener.RecordSequenceListener;\n+import com.aerospike.client.listener.WriteListener;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.context.TraceScope;\n+import datadog.trace.context.TraceScope.Continuation;\n+import java.util.List;\n+\n+public final class TracingListener\n+    implements ExistsListener,\n+        ExistsSequenceListener,\n+        ExistsArrayListener,\n+        RecordListener,\n+        RecordSequenceListener,\n+        RecordArrayListener,\n+        BatchSequenceListener,\n+        BatchListListener,\n+        WriteListener,\n+        ExecuteListener,\n+        DeleteListener {\n+\n+  private final AgentSpan clientSpan;\n+  private final Continuation continuation;\n+  private final Object listener;\n+\n+  public TracingListener(\n+      final AgentSpan clientSpan, final Continuation continuation, final Object listener) {\n+    this.clientSpan = clientSpan;\n+    this.continuation = continuation;\n+    this.listener = listener;\n+  }\n+\n+  @Override\n+  public void onExists(final Key key, final boolean exists) {\n+    if (listener != null) {\n+      ((ExistsSequenceListener) listener).onExists(key, exists);\n+    }\n+  }\n+\n+  @Override\n+  public void onRecord(final Key key, final Record record) throws AerospikeException {\n+    if (listener != null) {\n+      ((RecordSequenceListener) listener).onRecord(key, record);\n+    }\n+  }\n+\n+  @Override\n+  public void onRecord(final BatchRead record) {\n+    if (listener != null) {\n+      ((BatchSequenceListener) listener).onRecord(record);\n+    }\n+  }\n+\n+  @Override\n+  public void onSuccess(final Key key, final boolean exists) {\n+    onSuccess(\n+        new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5b6242dfe86aa38946a13e03472c5b53e7658c5"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff12cb840b04af2da62c4fb60b20f899874d63aa", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ff12cb840b04af2da62c4fb60b20f899874d63aa", "committedDate": "2020-11-16T10:01:41Z", "message": "Revert \"Further listener simplification\" to avoid creating extra runnables\n\nThis reverts commit 4ee09845ac971c57c19304d839d7956be139b591."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTc5MTcw", "url": "https://github.com/DataDog/dd-trace-java/pull/2061#pullrequestreview-531179170", "createdAt": "2020-11-16T10:10:45Z", "commit": {"oid": "ff12cb840b04af2da62c4fb60b20f899874d63aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c69d04650a0884d581eb9b4627ceefd556a843ad", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c69d04650a0884d581eb9b4627ceefd556a843ad", "committedDate": "2020-11-16T11:50:05Z", "message": "Don't wrap Runnables belonging to NioEventLoop(s) as they want to propagate CloseException\noutside of the event loop on close() and wrapping them in FutureTask interferes with that"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2816, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}