{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MzQ3NDQ0", "number": 1717, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozMzo0OVrOESsExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozMzo0OVrOESsExA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDMxOTQwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpringSchedulingRunnableWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozMzo0OVrOG4APBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzozMzo0OVrOG4APBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM3NzI4NA==", "bodyText": "So this comment is completely unrelated AFAICS, and just utterly confusing.", "url": "https://github.com/DataDog/dd-trace-java/pull/1717#discussion_r461377284", "createdAt": "2020-07-28T07:33:49Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/spring-scheduling-3.1/src/main/java/datadog/trace/instrumentation/springscheduling/SpringSchedulingRunnableWrapper.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package datadog.trace.instrumentation.springscheduling;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.springscheduling.SpringSchedulingDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+public class SpringSchedulingRunnableWrapper implements Runnable {\n+  private final Runnable runnable;\n+\n+  private SpringSchedulingRunnableWrapper(final Runnable runnable) {\n+    this.runnable = runnable;\n+  }\n+\n+  @Override\n+  public void run() {\n+    final AgentSpan span = startSpan(\"scheduled.call\");\n+    DECORATE.afterStart(span);\n+\n+    try (final AgentScope scope = activateSpan(span)) {\n+      DECORATE.onRun(span, runnable);\n+      scope.setAsyncPropagation(true);\n+\n+      try {\n+        runnable.run();\n+      } catch (final Throwable throwable) {\n+        DECORATE.onError(span, throwable);\n+        throw throwable;\n+      }\n+    } finally {\n+      DECORATE.beforeFinish(span);\n+      span.finish();\n+    }\n+  }\n+\n+  public static Runnable wrapIfNeeded(final Runnable task) {\n+    // We wrap only lambdas' anonymous classes and if given object has not already been wrapped.\n+    // Anonymous classes have '/' in class name which is not allowed in 'normal' classes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf7c5f882359d8d0bcce5e3c4b18ab34d68c88e"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4962, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}