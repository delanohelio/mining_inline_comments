{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Mzg0Mjkx", "number": 1468, "title": "JMX implementation of Profiling Session", "bodyText": "", "createdAt": "2020-05-18T09:44:37Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1468", "merged": true, "mergeCommit": {"oid": "137e4f63dea78a71b7ed2bb87fca61f2a782e23e"}, "closed": true, "closedAt": "2020-05-21T13:14:11Z", "author": {"login": "jpbempel"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcilNsSgFqTQxMzg4NzA2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjQmvvABqjMzNTg1MTUzODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODg3MDY5", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#pullrequestreview-413887069", "createdAt": "2020-05-18T19:40:57Z", "commit": {"oid": "9fc63de32e53c669b760de43b57f93ac36ff7324"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fc63de32e53c669b760de43b57f93ac36ff7324", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9fc63de32e53c669b760de43b57f93ac36ff7324", "committedDate": "2020-05-18T15:07:53Z", "message": "formatting"}, "afterCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c", "committedDate": "2020-05-19T14:35:41Z", "message": "draft wiring with SamplerWriter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NTE0Njc3", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#pullrequestreview-414514677", "createdAt": "2020-05-19T14:38:35Z", "commit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozODozNVrOGXjrVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjowNzo1M1rOGXnyVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDk2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n          \n          \n            \n              private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427354966", "createdAt": "2020-05-19T14:38:35Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTk0NQ==", "bodyText": "This looks quite suspicious - force creating an array when the session is always bound to a single thread.\nI know that it is used in the sample() method but it would feel more appropriate to have a sampler class factored out which would maintain a set of thread IDs which are supposed to be sampled (maybe wrapped as Session instances if that makes sense).", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427409945", "createdAt": "2020-05-19T15:50:42Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMDc5NQ==", "bodyText": "Passing around a map which is essentially an internal state of the JMXSessionFactory does not look really nice.\nCan't this be resolved with a session having active flag for true when refCount > 0 and a callback to the instantiating factory to notify that a session has become inactive when the flag is flipped. The factory would then do a concurrent update of the map depending on the current value of the active flag, thus preventing data race when a session is brought back to life.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427420795", "createdAt": "2020-05-19T16:05:47Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMTA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");\n          \n          \n            \n                  log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427421075", "createdAt": "2020-05-19T16:06:08Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };\n+    this.sink = sinkSupplier.get();\n+    this.sessions = sessions;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMjI5Mw==", "bodyText": "A bit of bike-shedding but a name less bound to the actual implementation would be nice - something like activate or use?", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427422293", "createdAt": "2020-05-19T16:07:53Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };\n+    this.sink = sinkSupplier.get();\n+    this.sessions = sessions;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");\n+    }\n+    start();\n+  }\n+\n+  public void close() {\n+    sessions.computeIfPresent(threadIds[0], this::closeSession);\n+  }\n+\n+  private JMXSession closeSession(Long key, JMXSession jmxSession) {\n+    int current = jmxSession.decRefCount();\n+    if (current == 0) {\n+      executor.shutdown();\n+      byte[] buffer = sink.flush();\n+      log.info(\"Closing session, flushing {} bytes\", buffer.length);\n+      return null;\n+    }\n+    return jmxSession;\n+  }\n+\n+  void incRefCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDIzNzU5", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#pullrequestreview-415423759", "createdAt": "2020-05-20T14:55:55Z", "commit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1NTo1NVrOGYP7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowMDoyOVrOGYQKUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDA1MQ==", "bodyText": "Please, package private only. I guess this class should not be used outside of MLT directly.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428080051", "createdAt": "2020-05-20T14:55:55Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import java.lang.management.ThreadInfo;\n+import java.util.Arrays;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSampler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDk3MQ==", "bodyText": "Can you add some comments about pre/post-conditions? Like that a thread ID will always be added so calling it multiple time will result in multiple occurrences of the same ID etc.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428080971", "createdAt": "2020-05-20T14:57:06Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import java.lang.management.ThreadInfo;\n+import java.util.Arrays;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSampler {\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+  private long samplingCount;\n+  private AtomicReference<long[]> threadIds = new AtomicReference<>();\n+\n+  public JMXSampler(StackTraceSink sink) {\n+    this.sink = sink;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");\n+    }\n+    // TODO period as parameter\n+    executor.scheduleAtFixedRate(this::sample, 0, 10, TimeUnit.MILLISECONDS);\n+  }\n+\n+  public void shutdown() {\n+    executor.shutdown();\n+    byte[] buffer = sink.flush();\n+    log.info(\"Flushing remaining {} bytes\", buffer.length);\n+  }\n+\n+  public void addThreadId(long threadId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4Mzc5Mg==", "bodyText": "I think that the interplay between closeSession() and createSession in regards of thread safety should be documented here.\nIf I am not missing something the code is data-race free thanks to closeSession being run as the ConcurrentHashMap computation which is guaranteed to run at most once and atomically. Unfortunately, this is not a general characteristic of all ConcurrentMap types so it would be good to have it documented for future maintenance.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428083792", "createdAt": "2020-05-20T15:00:29Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.profiling.Session;\n+import datadog.trace.profiling.SessionFactory;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSessionFactory implements SessionFactory {\n+  private final Map<Long, JMXSession> jmxSessions = new ConcurrentHashMap<>();\n+  private final JMXSampler sampler;\n+\n+  public JMXSessionFactory(StackTraceSink sink) {\n+    this.sampler = new JMXSampler(sink);\n+  }\n+\n+  @Override\n+  public Session createSession(String id, Thread thread) {\n+    long threadId = thread.getId();\n+    JMXSession session =\n+        jmxSessions.computeIfAbsent(threadId, key -> createNewSession(id, threadId));\n+    session.activate();\n+    return session;\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    sampler.shutdown();\n+  }\n+\n+  private JMXSession createNewSession(String id, long threadId) {\n+    sampler.addThreadId(threadId);\n+    return new JMXSession(id, threadId, this::cleanup);\n+  }\n+\n+  private void cleanup(JMXSession session) {\n+    jmxSessions.computeIfPresent(session.getThreadId(), this::closeSession);\n+  }\n+\n+  private JMXSession closeSession(Long key, JMXSession jmxSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0408a6bb6c6c471e179906c7bab81363ff0cbd46", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0408a6bb6c6c471e179906c7bab81363ff0cbd46", "committedDate": "2020-05-20T22:14:04Z", "message": "JMX implementation of Profiling Session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b11f0b35a24792b396f0c746d182b95da4ba24e", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3b11f0b35a24792b396f0c746d182b95da4ba24e", "committedDate": "2020-05-20T22:14:04Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cb76a8e62691cf3f9ae264b69c7ee1e36e98c8d", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4cb76a8e62691cf3f9ae264b69c7ee1e36e98c8d", "committedDate": "2020-05-20T22:14:04Z", "message": "Wire with SamplerWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd25b19872fe0fdef1902a3bed8698fe9d7d1cdd", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cd25b19872fe0fdef1902a3bed8698fe9d7d1cdd", "committedDate": "2020-05-20T22:14:04Z", "message": "draft wiring with SamplerWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb2e1a7e7b82b3edfb5fb635df1b5311c51ee11c", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bb2e1a7e7b82b3edfb5fb635df1b5311c51ee11c", "committedDate": "2020-05-20T22:14:04Z", "message": "Move sampling executor to the factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe3da5657f84da994ccd2572b4083e7f1b828c4", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fbe3da5657f84da994ccd2572b4083e7f1b828c4", "committedDate": "2020-05-20T22:14:04Z", "message": "move Sampling logic to JMXSampler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c648cc3395ca016dae45bea36a5c9fd890c431", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c8c648cc3395ca016dae45bea36a5c9fd890c431", "committedDate": "2020-05-20T22:14:04Z", "message": "add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "498d64fe777a7bf164e4ac18d11152cbb2412ef8", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/498d64fe777a7bf164e4ac18d11152cbb2412ef8", "committedDate": "2020-05-20T22:14:04Z", "message": "add test for Sampler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "973e8978c4bcc0a5566aad2e4a5b18b7d39d7139", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/973e8978c4bcc0a5566aad2e4a5b18b7d39d7139", "committedDate": "2020-05-20T22:14:04Z", "message": "fix package name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ea49ef2b9b879c33aaebe1da9eb6404672469c5", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5ea49ef2b9b879c33aaebe1da9eb6404672469c5", "committedDate": "2020-05-20T22:14:04Z", "message": "add DaemonThreadFactory for sampler thread\n\nAdd comments regarding concurrenty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46ff114904419dbd99c8a0f00b248f8b4fd152a", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a46ff114904419dbd99c8a0f00b248f8b4fd152a", "committedDate": "2020-05-20T22:14:04Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d71eec14bc13667f71f385610a68f9d2cf6bbd", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/89d71eec14bc13667f71f385610a68f9d2cf6bbd", "committedDate": "2020-05-20T22:14:04Z", "message": "increase test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b53f2c31fc382802beb5d90e961ae69e6da34f39", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b53f2c31fc382802beb5d90e961ae69e6da34f39", "committedDate": "2020-05-20T22:14:04Z", "message": "improve test coverage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13a0d5351313c22e6c1df7bdb54e35bb86dbfd7e", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/13a0d5351313c22e6c1df7bdb54e35bb86dbfd7e", "committedDate": "2020-05-20T21:17:09Z", "message": "improve test coverage"}, "afterCommit": {"oid": "b53f2c31fc382802beb5d90e961ae69e6da34f39", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b53f2c31fc382802beb5d90e961ae69e6da34f39", "committedDate": "2020-05-20T22:14:04Z", "message": "improve test coverage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2510, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}