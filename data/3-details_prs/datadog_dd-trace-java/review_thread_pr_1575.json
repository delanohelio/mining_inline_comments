{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTc5ODEw", "number": 1575, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTowOFrOEEwO6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzowNzo0MFrOEExeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDIwMDA5OnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTowOFrOGikqmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzowNjowNFrOGimrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTQ5OA==", "bodyText": "Imho this is a good idea but you may want to make it available for all AbstractSmokeTest - they all use same approach to write logs", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438905498", "createdAt": "2020-06-11T16:11:08Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {\n+      if (it.contains(\"ERROR\") || it.contains(\"WARN\") || it.contains(\"ASSERTION FAILED\")) {\n+        println it\n+        logHasErrors = true\n+      }\n+      checker(it)\n+    }\n+  }\n+\n+  def checkLog() {\n+    checkLog {}\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzQ5Mw==", "bodyText": "I also think you can drop version with custom Closure unless you have uses for it...", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438907493", "createdAt": "2020-06-11T16:14:12Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {\n+      if (it.contains(\"ERROR\") || it.contains(\"WARN\") || it.contains(\"ASSERTION FAILED\")) {\n+        println it\n+        logHasErrors = true\n+      }\n+      checker(it)\n+    }\n+  }\n+\n+  def checkLog() {\n+    checkLog {}\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTQ5OA=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMTMxMA==", "bodyText": "Yeah, I have a usage for it in MLT branch - so if I drop it now I will have to re-introduce it later.", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438911310", "createdAt": "2020-06-11T16:19:51Z", "author": {"login": "jbachorik"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {\n+      if (it.contains(\"ERROR\") || it.contains(\"WARN\") || it.contains(\"ASSERTION FAILED\")) {\n+        println it\n+        logHasErrors = true\n+      }\n+      checker(it)\n+    }\n+  }\n+\n+  def checkLog() {\n+    checkLog {}\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTQ5OA=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzODM3Nw==", "bodyText": "sure, if you have a use for it", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438938377", "createdAt": "2020-06-11T17:06:04Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {\n+      if (it.contains(\"ERROR\") || it.contains(\"WARN\") || it.contains(\"ASSERTION FAILED\")) {\n+        println it\n+        logHasErrors = true\n+      }\n+      checker(it)\n+    }\n+  }\n+\n+  def checkLog() {\n+    checkLog {}\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTQ5OA=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDIwMjAwOnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/profiling-integration-tests/profiling-integration-tests.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTozN1rOGikr1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMTozNlrOGim2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTgxNQ==", "bodyText": "Could you please explain what this does?", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438905815", "createdAt": "2020-06-11T16:11:37Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/profiling-integration-tests.gradle", "diffHunk": "@@ -34,3 +34,9 @@ tasks.withType(Test).configureEach {\n \n   jvmArgs \"-Ddatadog.smoketest.profiling.shadowJar.path=${tasks.shadowJar.archivePath}\"\n }\n+\n+shadowJar {\n+  dependencies {\n+    include(dependency('org.slf4j::'))\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMDkxOQ==", "bodyText": "It is leaving out all the tracing and agent classes which are otherwise referenced through dependencies. If we keep these classes in the shadow jar they will mess up the class path in a way that makes detecting class loading issues in the agent jar impossible.", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438910919", "createdAt": "2020-06-11T16:19:14Z", "author": {"login": "jbachorik"}, "path": "dd-smoke-tests/profiling-integration-tests/profiling-integration-tests.gradle", "diffHunk": "@@ -34,3 +34,9 @@ tasks.withType(Test).configureEach {\n \n   jvmArgs \"-Ddatadog.smoketest.profiling.shadowJar.path=${tasks.shadowJar.archivePath}\"\n }\n+\n+shadowJar {\n+  dependencies {\n+    include(dependency('org.slf4j::'))\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTgxNQ=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MTM3NA==", "bodyText": "Looks like this is not really necessary and the real 'fix' was parsing and asserting the test app log contents.", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438941374", "createdAt": "2020-06-11T17:11:36Z", "author": {"login": "jbachorik"}, "path": "dd-smoke-tests/profiling-integration-tests/profiling-integration-tests.gradle", "diffHunk": "@@ -34,3 +34,9 @@ tasks.withType(Test).configureEach {\n \n   jvmArgs \"-Ddatadog.smoketest.profiling.shadowJar.path=${tasks.shadowJar.archivePath}\"\n }\n+\n+shadowJar {\n+  dependencies {\n+    include(dependency('org.slf4j::'))\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTgxNQ=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDIwODA3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzowNlrOGikvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMTowNVrOGim1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjgxOA==", "bodyText": "Would be great to have a comment explaining what this protects against in detail... this is useful info since it is very non trivial", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438906818", "createdAt": "2020-06-11T16:13:06Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MTA2MA==", "bodyText": "Done", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438941060", "createdAt": "2020-06-11T17:11:05Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjgxOA=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDIxMDA2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMzo0MlrOGikxIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMDo1N1rOGim1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzE3MQ==", "bodyText": "Maybe a comment here explaining what it guards against (as described in the PR comment).", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438907171", "createdAt": "2020-06-11T16:13:42Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MDk3OA==", "bodyText": "Done", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438940978", "createdAt": "2020-06-11T17:10:57Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNzE3MQ=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDM2ODczOnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1NzowM1rOGimXVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1NzowM1rOGimXVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMzMzMw==", "bodyText": "you you please add a print out something like 'See full run logs in {filename}` if there are errors?", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438933333", "createdAt": "2020-06-11T16:57:03Z", "author": {"login": "mar-kolya"}, "path": "dd-smoke-tests/profiling-integration-tests/src/test/groovy/datadog/smoketest/AbstractProfilingIntegrationTest.groovy", "diffHunk": "@@ -39,4 +43,18 @@ abstract class AbstractProfilingIntegrationTest extends AbstractSmokeTest {\n   def getExitDelay() {\n     return -1\n   }\n+\n+  def checkLog(Closure checker) {\n+    new File(\"${buildDirectory}/reports/testProcess.${this.getClass().getName()}.log\").eachLine {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDQwMjkzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzowNzo0MFrOGimuag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMDozMlrOGim0PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzOTI0Mg==", "bodyText": "FWIW: if you move the reentrace check into ExceptionProfiling.getInstance().process you would actually be able to unit test this since you can call process with some special exception that calls process again...", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438939242", "createdAt": "2020-06-11T17:07:40Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {\n+      try {\n+        /*\n+         * We may get into a situation when this is called before ExceptionProfiling had a chance\n+         * to fully initialize. So despite the fact that this returns static singleton this may\n+         * return null sometimes.\n+         */\n+        if (ExceptionProfiling.getInstance() == null) {\n+          return;\n+        }\n+        /*\n+         * JFR will assign the stacktrace depending on the place where the event is committed.\n+         * Therefore we need to commit the event here, right in the 'Exception' constructor\n+         */\n+        final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MDczMw==", "bodyText": "Yes, I was thinking about this. But - this logic seems to be really related to the advice handler and not ExceptionProfiling.\nBut I can unit test ThrowableInstanceAdviceHelper quite easily and it will give the same level of confidence since it is that class doing the heavy lifting.", "url": "https://github.com/DataDog/dd-trace-java/pull/1575#discussion_r438940733", "createdAt": "2020-06-11T17:10:32Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java11/datadog/exceptions/instrumentation/ThrowableInstanceAdvice.java", "diffHunk": "@@ -7,21 +7,27 @@\n public class ThrowableInstanceAdvice {\n   @Advice.OnMethodExit(suppress = Throwable.class)\n   public static void onExit(@Advice.This final Throwable t) {\n-    /*\n-     * We may get into a situation when this is called before ExceptionProfiling had a chance\n-     * to fully initialize. So despite the fact that this returns static singleton this may\n-     * return null sometimes.\n-     */\n-    if (ExceptionProfiling.getInstance() == null) {\n-      return;\n-    }\n-    /*\n-     * JFR will assign the stacktrace depending on the place where the event is committed.\n-     * Therefore we need to commit the event here, right in the 'Exception' constructor\n-     */\n-    final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);\n-    if (event != null && event.shouldCommit()) {\n-      event.commit();\n+    if (ThrowableInstanceAdviceHelper.enterHandler()) {\n+      try {\n+        /*\n+         * We may get into a situation when this is called before ExceptionProfiling had a chance\n+         * to fully initialize. So despite the fact that this returns static singleton this may\n+         * return null sometimes.\n+         */\n+        if (ExceptionProfiling.getInstance() == null) {\n+          return;\n+        }\n+        /*\n+         * JFR will assign the stacktrace depending on the place where the event is committed.\n+         * Therefore we need to commit the event here, right in the 'Exception' constructor\n+         */\n+        final ExceptionSampleEvent event = ExceptionProfiling.getInstance().process(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzOTI0Mg=="}, "originalCommit": {"oid": "862cb5ed16828fa2fc3104728c445c3d5f9c9509"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 236, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}