{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTUwMjE2", "number": 1933, "title": "Scala Promise and Java CompletableFuture instrumentation", "bodyText": "Instrumentation and tests for Scala Promise/Future and Java CompletableFuture.", "createdAt": "2020-09-30T14:25:03Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1933", "merged": true, "mergeCommit": {"oid": "adc3e4c7139d6db047d4bc7dc0810a38084891aa"}, "closed": true, "closedAt": "2020-10-06T09:55:24Z", "author": {"login": "bantonsson"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN9qysAFqTQ5OTQ5MzczNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUGyL3AFqTUxMTk0NjYxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDkzNzM3", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499493737", "createdAt": "2020-09-30T14:29:12Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyOToxMlrOHagaLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoyOToxMlrOHagaLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NjAxNA==", "bodyText": "There was a memory saving in making these changes, but not a significant improvement in the time to load our classes. I think there is also potential for deadlock. If this is causing problems, I suggest either synchronizing on getClassLoadingLock(name), or completely abandoning the package based classloading logic.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497556014", "createdAt": "2020-09-30T14:29:12Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/DatadogClassLoader.java", "diffHunk": "@@ -67,11 +67,16 @@ public boolean hasLoadedClass(final String className) {\n   }\n \n   Class<?> loadFromPackage(String packageName, String name) throws ClassNotFoundException {\n-    Object packageLock = internalJarURLHandler.getPackageLock(packageName);\n+    InternalJarURLHandler.Lock packageLock = internalJarURLHandler.getPackageLock(packageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDk1NTE3", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499495517", "createdAt": "2020-09-30T14:30:51Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMDo1MVrOHagfcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMDo1MVrOHagfcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzM2MA==", "bodyText": "I think the changes made to State were an improvement here, and the assert I added previously was incorrect. I.e. it's better to control which thread gets to set the continuation than try, fail, and then assert/log that something bad happened, when it's a race anyway and the important detail is that there is only one winner.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497557360", "createdAt": "2020-09-30T14:30:51Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ConcurrentState.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public final class ConcurrentState {\n+\n+  public static ContextStore.Factory<ConcurrentState> FACTORY =\n+      new ContextStore.Factory<ConcurrentState>() {\n+        @Override\n+        public ConcurrentState create() {\n+          return new ConcurrentState();\n+        }\n+      };\n+\n+  private final AtomicReference<TraceScope.Continuation> continuationRef =\n+      new AtomicReference<>(null);\n+\n+  private ConcurrentState() {}\n+\n+  public static <K> void captureActiveScope(ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final TraceScope scope = activeScope();\n+    captureScope(contextStore, key, scope);\n+  }\n+\n+  public static <K> void captureScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope) {\n+    final ConcurrentState state = contextStore.putIfAbsent(key, FACTORY);\n+    if (scope != null) {\n+      final TraceScope.Continuation continuation = scope.captureConcurrent();\n+      if (continuation != null) {\n+        state.setContinuation(continuation);\n+      }\n+    }\n+  }\n+\n+  public static <K> TraceScope activateAndContinueContinuation(\n+      ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (state == null) {\n+      return null;\n+    }\n+    return state.activateAndContinueContinuation();\n+  }\n+\n+  public static <K> void closeScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope, Throwable throwable) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (scope != null) {\n+      scope.close();\n+      return;\n+    }\n+    if (state == null) {\n+      return;\n+    }\n+    if (throwable != null) {\n+      // This might lead to the continuation being consumed early, but it's better to be safe if we\n+      // threw an Exception on entry\n+      state.closeContinuation();\n+    }\n+  }\n+\n+  public static <K> void closeAndClearContinuation(\n+      ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (state == null) {\n+      return;\n+    }\n+    state.closeAndClearContinuation();\n+  }\n+\n+  boolean setContinuation(TraceScope.Continuation continuation) {\n+    final boolean result = continuationRef.compareAndSet(null, continuation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDk5NDkz", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499499493", "createdAt": "2020-09-30T14:34:40Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNDo0MFrOHagq7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNDo0MFrOHagq7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MDMwMw==", "bodyText": "Pet peeve - SkipType.values() allocates every time. I'd prefer an EnumSet or SkipType[] VALUES = values() inside the enum.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497560303", "createdAt": "2020-09-30T14:34:40Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;\n+  }\n+\n+  public static boolean skip(SkipType type, String className) {\n+    return blockedClasses.get(type.ordinal()).contains(className);\n+  }\n+\n+  private static final ClassValue<Integer> SKIP =\n+      new ClassValue<Integer>() {\n+        @Override\n+        protected Integer computeValue(Class<?> clazz) {\n+          int result = 0;\n+          String name = clazz.getName();\n+          for (SkipType type : SkipType.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTAwNTg0", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499500584", "createdAt": "2020-09-30T14:35:44Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNTo0NFrOHaguGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNTo0NFrOHaguGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MTExMw==", "bodyText": "Isn't this mask basically an EnumSet<SkipType>?", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497561113", "createdAt": "2020-09-30T14:35:44Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;\n+  }\n+\n+  public static boolean skip(SkipType type, String className) {\n+    return blockedClasses.get(type.ordinal()).contains(className);\n+  }\n+\n+  private static final ClassValue<Integer> SKIP =\n+      new ClassValue<Integer>() {\n+        @Override\n+        protected Integer computeValue(Class<?> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTAxNDcx", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499501471", "createdAt": "2020-09-30T14:36:37Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNjozN1rOHagwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNjozN1rOHagwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MTc5NA==", "bodyText": "Could be EnumSet.contains(type) which reduces to bitwise operations too.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497561794", "createdAt": "2020-09-30T14:36:37Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTAyNTA4", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499502508", "createdAt": "2020-09-30T14:37:34Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNzozNFrOHagzwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozNzozNFrOHagzwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MjU2MA==", "bodyText": "This could be an EnumMap<SkipType, Set<String>", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497562560", "createdAt": "2020-09-30T14:37:34Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/SkipFilter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class SkipFilter {\n+\n+  public enum SkipType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static SkipType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;\n+      }\n+    }\n+\n+    private final int mask;\n+\n+    private int getMask() {\n+      return mask;\n+    }\n+\n+    SkipType() {\n+      this.mask = 1 << this.ordinal();\n+    }\n+  }\n+\n+  public static boolean skip(SkipType type, Object instance) {\n+    return (SKIP.get(instance.getClass()) & type.getMask()) != 0;\n+  }\n+\n+  public static boolean skip(SkipType type, String className) {\n+    return blockedClasses.get(type.ordinal()).contains(className);\n+  }\n+\n+  private static final ClassValue<Integer> SKIP =\n+      new ClassValue<Integer>() {\n+        @Override\n+        protected Integer computeValue(Class<?> clazz) {\n+          int result = 0;\n+          String name = clazz.getName();\n+          for (SkipType type : SkipType.values()) {\n+            if (skip(type, name)) {\n+              result |= type.getMask();\n+            }\n+          }\n+          return result;\n+        }\n+      };\n+\n+  private static final ArrayList<Set<String>> blockedClasses =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTA0MTMx", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499504131", "createdAt": "2020-09-30T14:39:08Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozOTowOFrOHag4jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozOTowOFrOHag4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2Mzc5MA==", "bodyText": "\ud83e\udd47", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497563790", "createdAt": "2020-09-30T14:39:08Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/guava-10/src/test/groovy/ListenableFutureTest.groovy", "diffHunk": "@@ -32,7 +32,7 @@ class ListenableFutureTest extends AbstractPromiseTest<SettableFuture<Boolean>,\n   }\n \n   @Override\n-  Boolean get(SettableFuture<Boolean> promise) {\n+  boolean get(SettableFuture<Boolean> promise) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTA1NTYy", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499505562", "createdAt": "2020-09-30T14:40:25Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0MDoyNVrOHag8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0MDoyNVrOHag8pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NDgzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void afterInit(@Advice.This UniCompletion thiz) {\n          \n          \n            \n                public static void afterInit(@Advice.This UniCompletion zis) {", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497564838", "createdAt": "2020-09-30T14:40:25Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/java-completablefuture/src/main/java8/java/util/concurrent/CompletableFutureAdvice.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package java.util.concurrent;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static java.util.concurrent.CompletableFuture.ASYNC;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ConcurrentState;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.CompletableFuture.UniCompletion;\n+import net.bytebuddy.asm.Advice;\n+\n+// This class is put into java.util.concurrent to allow access to package private classes.\n+public final class CompletableFutureAdvice {\n+\n+  public static final class UniConstructor {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void afterInit(@Advice.This UniCompletion thiz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTA2Njg3", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-499506687", "createdAt": "2020-09-30T14:41:27Z", "commit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0MToyN1rOHahAFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0MToyN1rOHahAFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NTcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                value << (0..((1 << 3) - 1))\n          \n          \n            \n                value << (0..7)", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r497565716", "createdAt": "2020-09-30T14:41:27Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/java-completablefuture/src/test/groovy/CompletableFutureTest.groovy", "diffHunk": "@@ -178,26 +232,47 @@ class CompletableFutureTest extends AgentTestRunner {\n         basicSpan(it, \"child\", span(0))\n       }\n     }\n+\n+    where:\n+    value << (0..((1 << 3) - 1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80"}, "originalPosition": 152}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c8cb24fb5e8d7c91fb12878403e850ecb5373d80", "committedDate": "2020-09-30T13:59:11Z", "message": "CompletableFuture Completion instrumentation"}, "afterCommit": {"oid": "5fbaf0493160c589bc4b086315d0065560a9fd99", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5fbaf0493160c589bc4b086315d0065560a9fd99", "committedDate": "2020-10-01T08:37:14Z", "message": "CompletableFuture Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fbaf0493160c589bc4b086315d0065560a9fd99", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5fbaf0493160c589bc4b086315d0065560a9fd99", "committedDate": "2020-10-01T08:37:14Z", "message": "CompletableFuture Completion instrumentation"}, "afterCommit": {"oid": "4141a5a27dd4625db8c1f1316bc0b3a0e6bbe2e4", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4141a5a27dd4625db8c1f1316bc0b3a0e6bbe2e4", "committedDate": "2020-10-01T09:03:12Z", "message": "CompletableFuture Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4141a5a27dd4625db8c1f1316bc0b3a0e6bbe2e4", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4141a5a27dd4625db8c1f1316bc0b3a0e6bbe2e4", "committedDate": "2020-10-01T09:03:12Z", "message": "CompletableFuture Completion instrumentation"}, "afterCommit": {"oid": "a6b3a1587ba4de747b30c5f94727b94e6bae142b", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a6b3a1587ba4de747b30c5f94727b94e6bae142b", "committedDate": "2020-10-01T10:01:15Z", "message": "CompletableFuture Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6b3a1587ba4de747b30c5f94727b94e6bae142b", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a6b3a1587ba4de747b30c5f94727b94e6bae142b", "committedDate": "2020-10-01T10:01:15Z", "message": "CompletableFuture Completion instrumentation"}, "afterCommit": {"oid": "9b1b4e951a33fe3e78141fe513deeddff535f091", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9b1b4e951a33fe3e78141fe513deeddff535f091", "committedDate": "2020-10-01T12:12:32Z", "message": "CompletableFuture Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b1b4e951a33fe3e78141fe513deeddff535f091", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9b1b4e951a33fe3e78141fe513deeddff535f091", "committedDate": "2020-10-01T12:12:32Z", "message": "CompletableFuture Completion instrumentation"}, "afterCommit": {"oid": "9d90c8951c3cffc7227cba0dbbf795fee41ad63d", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9d90c8951c3cffc7227cba0dbbf795fee41ad63d", "committedDate": "2020-10-01T14:07:45Z", "message": "CompletableFuture Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d90c8951c3cffc7227cba0dbbf795fee41ad63d", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9d90c8951c3cffc7227cba0dbbf795fee41ad63d", "committedDate": "2020-10-01T14:07:45Z", "message": "CompletableFuture Completion instrumentation"}, "afterCommit": {"oid": "af157e2e0ed629cc4fd3b3df402dac94dfffb3b1", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/af157e2e0ed629cc4fd3b3df402dac94dfffb3b1", "committedDate": "2020-10-02T14:54:10Z", "message": "CompletableFuture.Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af157e2e0ed629cc4fd3b3df402dac94dfffb3b1", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/af157e2e0ed629cc4fd3b3df402dac94dfffb3b1", "committedDate": "2020-10-02T14:54:10Z", "message": "CompletableFuture.Completion instrumentation"}, "afterCommit": {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9eac612bc566d5051e276092772e1dc2a44296ab", "committedDate": "2020-10-02T15:24:55Z", "message": "CompletableFuture.Completion instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9eac612bc566d5051e276092772e1dc2a44296ab", "committedDate": "2020-10-02T15:24:55Z", "message": "CompletableFuture.Completion instrumentation"}, "afterCommit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "committedDate": "2020-10-05T06:25:00Z", "message": "CompletableFuture.Completion instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTUxNTIy", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-501951522", "createdAt": "2020-10-05T11:14:55Z", "commit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzMwMjc4", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-501330278", "createdAt": "2020-10-02T17:46:25Z", "commit": {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo0NjoyNVrOHb2RrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoxNjoxMFrOHb6bQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2Mjg2MQ==", "bodyText": "Could you update the description explaining why the classloader changes are needed in this PR?", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r498962861", "createdAt": "2020-10-02T17:46:25Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/DatadogClassLoader.java", "diffHunk": "@@ -159,11 +164,16 @@ public DelegateClassLoader(\n     @Override\n     protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n       String packageName = shared.getPackageName(name);\n-      Object packageLock = internalJarURLHandler.getPackageLock(packageName);\n+      InternalJarURLHandler.Lock packageLock = internalJarURLHandler.getPackageLock(packageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyOTg1MA==", "bodyText": "and only to... ?", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499029850", "createdAt": "2020-10-02T20:13:40Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ExcludeFilterProvider.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package datadog.trace.agent.tooling;\n+\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter.ExcludeType;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Used to allow an {@link Instrumenter} to opt out of broad instrumentations like {@link Runnable}.\n+ *\n+ * <p>These are looked up in a separate pass before the {@link Instrumenter} is allowed to add\n+ * instrumentations. Note, it is up to the {@link ExcludeFilterProvider} to check if it is enabled\n+ * and only to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzMDg0OQ==", "bodyText": "I don't follow why this needed in this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499030849", "createdAt": "2020-10-02T20:16:10Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class ExcludeFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9eac612bc566d5051e276092772e1dc2a44296ab"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDU4NjUw", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-502058650", "createdAt": "2020-10-05T13:32:01Z", "commit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozMjowMVrOHcdNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzozMjowMVrOHcdNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwMDc0Mw==", "bodyText": "Could you add a comment on why this should be a separate iteration loop.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499600743", "createdAt": "2020-10-05T13:32:01Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/AgentInstaller.java", "diffHunk": "@@ -95,8 +96,23 @@ public static ResettableClassFileTransformer installBytebuddyAgent(\n       agentBuilder = agentBuilder.with(listener);\n     }\n     int numInstrumenters = 0;\n-    for (final Instrumenter instrumenter :\n-        ServiceLoader.load(Instrumenter.class, AgentInstaller.class.getClassLoader())) {\n+    ServiceLoader<Instrumenter> loader =\n+        ServiceLoader.load(Instrumenter.class, AgentInstaller.class.getClassLoader());\n+    for (final Instrumenter instrumenter : loader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDg1NDcz", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-502085473", "createdAt": "2020-10-05T13:59:37Z", "commit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1OTozN1rOHceZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo1OTozN1rOHceZEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMDExNA==", "bodyText": "Why is this needed in addition to State?", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499620114", "createdAt": "2020-10-05T13:59:37Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ConcurrentState.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public final class ConcurrentState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDg3MzQw", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-502087340", "createdAt": "2020-10-05T14:01:32Z", "commit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowMTozMlrOHceeVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowMTozMlrOHceeVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMTQ2Mw==", "bodyText": "If there's no scope we should check that first, in case ContextStore is backed by something expensive", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r499621463", "createdAt": "2020-10-05T14:01:32Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ConcurrentState.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.context.TraceScope;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public final class ConcurrentState {\n+\n+  private static final class ContinuationClaim implements TraceScope.Continuation {\n+\n+    @Override\n+    public TraceScope activate() {\n+      throw new IllegalStateException();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+      throw new IllegalStateException();\n+    }\n+  }\n+\n+  private static final TraceScope.Continuation CLAIMED = new ContinuationClaim();\n+\n+  public static ContextStore.Factory<ConcurrentState> FACTORY =\n+      new ContextStore.Factory<ConcurrentState>() {\n+        @Override\n+        public ConcurrentState create() {\n+          return new ConcurrentState();\n+        }\n+      };\n+\n+  private final AtomicReference<TraceScope.Continuation> continuationRef =\n+      new AtomicReference<>(null);\n+\n+  private ConcurrentState() {}\n+\n+  public static <K> void captureScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope) {\n+    final ConcurrentState state = contextStore.putIfAbsent(key, FACTORY);\n+    if (scope != null) {\n+      if (!state.captureAndSetContinuation(scope) && log.isDebugEnabled()) {\n+        log.debug(\n+            \"continuation was already set for {} in scope {}, no continuation captured.\",\n+            key,\n+            scope);\n+      }\n+    }\n+  }\n+\n+  public static <K> TraceScope activateAndContinueContinuation(\n+      ContextStore<K, ConcurrentState> contextStore, K key) {\n+    final ConcurrentState state = contextStore.get(key);\n+    if (state == null) {\n+      return null;\n+    }\n+    return state.activateAndContinueContinuation();\n+  }\n+\n+  public static <K> void closeScope(\n+      ContextStore<K, ConcurrentState> contextStore, K key, TraceScope scope, Throwable throwable) {\n+    final ConcurrentState state = contextStore.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTMyMjI2", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-502132226", "createdAt": "2020-10-05T14:45:54Z", "commit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d12dea0479840d58c43ec3009a4bb9d43d22ea6a", "committedDate": "2020-10-05T06:25:00Z", "message": "CompletableFuture.Completion instrumentation"}, "afterCommit": {"oid": "14fe46352ba4b39d231c73a8df2b588213d06ed7", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/14fe46352ba4b39d231c73a8df2b588213d06ed7", "committedDate": "2020-10-05T16:02:43Z", "message": "CompletableFuture.Completion instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8034edf556fc0ca5c02fd013d2b1a5f6aea1ae", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ee8034edf556fc0ca5c02fd013d2b1a5f6aea1ae", "committedDate": "2020-10-06T05:55:04Z", "message": "Add instrumentation to propagate across scala promises properly\n\nThere were significant changes in 2.13, so that required completely separate instrumentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7145d31f7297c50decdc792e221cc85168b28be", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f7145d31f7297c50decdc792e221cc85168b28be", "committedDate": "2020-10-06T05:55:04Z", "message": "Add scala promise instrumentation to various projects\n\nTo verify compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3467f4edad50fb6b7badc420de88b6f1135a49b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f3467f4edad50fb6b7badc420de88b6f1135a49b", "committedDate": "2020-10-06T05:55:04Z", "message": "Add instrumentation to ensure that the play 2.3 test doesn't hang on the first request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "695f3e9a4e4fc8160b6e6263670d5cd453c68d23", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/695f3e9a4e4fc8160b6e6263670d5cd453c68d23", "committedDate": "2020-10-06T05:55:04Z", "message": "Add promise test for completable future."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694d6cf1b64a3389c714bcc6296550920763a4fd", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/694d6cf1b64a3389c714bcc6296550920763a4fd", "committedDate": "2020-10-06T05:55:04Z", "message": "Add instrumentation to CompletableFuture to support proper context propagation.\n\nTODO: CompletableFutureTest still needs to be updated since several tests fail with this new instrumentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "debd9d76ee0eb50c6cf842a961a751f09151af75", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/debd9d76ee0eb50c6cf842a961a751f09151af75", "committedDate": "2020-10-06T05:55:04Z", "message": "Make CodeNarc happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0630fa8e4935b0b56c2f811638f2fe18d2abc4f", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c0630fa8e4935b0b56c2f811638f2fe18d2abc4f", "committedDate": "2020-10-06T05:55:04Z", "message": "Some more tests for CompletableFuture.Completion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0cdee938b68ee80dd76bf1d0695715e97fff7a9", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c0cdee938b68ee80dd76bf1d0695715e97fff7a9", "committedDate": "2020-10-06T05:55:04Z", "message": "Ask the right class loader for classes in the java package that we don't have\n\nSince we now inject classes into to `java.*` pacakge we need to delegate\nall the classes that we don't find in those packages to the `super.loadClass`\nmethod to not fail loading regular classes from the `java.*` packages."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "608683084888d77fc654dd2b15e4f83afcba0b30", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/608683084888d77fc654dd2b15e4f83afcba0b30", "committedDate": "2020-10-06T05:55:04Z", "message": "Enable force rerun of tests with property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14fe46352ba4b39d231c73a8df2b588213d06ed7", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/14fe46352ba4b39d231c73a8df2b588213d06ed7", "committedDate": "2020-10-05T16:02:43Z", "message": "CompletableFuture.Completion instrumentation"}, "afterCommit": {"oid": "9ddc777ef2a529066cb0f4771417048533d9b676", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9ddc777ef2a529066cb0f4771417048533d9b676", "committedDate": "2020-10-06T06:13:17Z", "message": "Allow Instrumenter to disable field injection and wrapping for types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028bf039f0e56142de2846e82598bd4e7a8baf44", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/028bf039f0e56142de2846e82598bd4e7a8baf44", "committedDate": "2020-10-06T08:40:32Z", "message": "Allow Instrumenter to disable field injection and wrapping for types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4fecdad13216d480ecc6720c5eca7c488c636e", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ee4fecdad13216d480ecc6720c5eca7c488c636e", "committedDate": "2020-10-06T08:43:03Z", "message": "CompletableFuture.Completion Instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ddc777ef2a529066cb0f4771417048533d9b676", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9ddc777ef2a529066cb0f4771417048533d9b676", "committedDate": "2020-10-06T06:13:17Z", "message": "Allow Instrumenter to disable field injection and wrapping for types"}, "afterCommit": {"oid": "ee4fecdad13216d480ecc6720c5eca7c488c636e", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ee4fecdad13216d480ecc6720c5eca7c488c636e", "committedDate": "2020-10-06T08:43:03Z", "message": "CompletableFuture.Completion Instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39c15a78f849ece1c0c0ca43c7128b889166f51f", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/39c15a78f849ece1c0c0ca43c7128b889166f51f", "committedDate": "2020-10-06T09:09:42Z", "message": "Exclude otel 0.9.0 that started failing muzzle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQ0OTk2", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-511944996", "createdAt": "2020-10-19T16:28:04Z", "commit": {"oid": "39c15a78f849ece1c0c0ca43c7128b889166f51f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyODowNVrOHkXGAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyODowNVrOHkXGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4OTE1Mw==", "bodyText": "returning null here is very weird and seems like it could be particularly troublesome in the future.", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r507889153", "createdAt": "2020-10-19T16:28:05Z", "author": {"login": "BurgersMcSlopshot"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.bootstrap.instrumentation.java.concurrent;\n+\n+import java.util.EnumMap;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Enables types to opt out of being wrapped and/or having fields injected for a number of the broad\n+ * instrumentations, i.e. {@code Executor} and {@code Runnable}.\n+ */\n+public class ExcludeFilter {\n+\n+  public enum ExcludeType {\n+    RUNNABLE,\n+    CALLABLE,\n+    FUTURE,\n+    FORK_JOIN_TASK,\n+    EXECUTOR;\n+\n+    public static ExcludeType fromFieldType(String typeName) {\n+      switch (typeName) {\n+        case \"java.lang.Runnable\":\n+          return RUNNABLE;\n+        case \"java.util.concurrent.Callable\":\n+          return CALLABLE;\n+        case \"java.util.concurrent.Future\":\n+          return FUTURE;\n+        case \"java.util.concurrent.ForkJoinTask\":\n+          return FORK_JOIN_TASK;\n+        default:\n+          return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c15a78f849ece1c0c0ca43c7128b889166f51f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQ2NjE0", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#pullrequestreview-511946614", "createdAt": "2020-10-19T16:29:58Z", "commit": {"oid": "39c15a78f849ece1c0c0ca43c7128b889166f51f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyOTo1OFrOHkXK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoyOTo1OFrOHkXK4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5MDQwMA==", "bodyText": "to pair with the comment in the ExcludeFilter regarding potentially coercing a string to a null enum value, why not pass keyType directly into the filter and skip the null check here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1933#discussion_r507890400", "createdAt": "2020-10-19T16:29:58Z", "author": {"login": "BurgersMcSlopshot"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldBackedProvider.java", "diffHunk": "@@ -461,13 +453,27 @@ public static void resetContextMatchers() {\n   private static AgentBuilder.RawMatcher safeToInjectFieldsMatcher(\n       final String keyType, final String valueType) {\n     return new AgentBuilder.RawMatcher() {\n+      private final ExcludeType skipType = ExcludeType.fromFieldType(keyType);\n+\n       @Override\n       public boolean matches(\n           final TypeDescription typeDescription,\n           final ClassLoader classLoader,\n           final JavaModule module,\n           final Class<?> classBeingRedefined,\n           final ProtectionDomain protectionDomain) {\n+\n+        // First check if we should skip injecting the field based on the key type\n+        if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c15a78f849ece1c0c0ca43c7128b889166f51f"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3185, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}