{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTM1MzM2", "number": 1552, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0MDoyOFrOEEOF1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0Mzo0N1rOEEOK_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODYwNjI5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0MDoyOFrOGhtHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzozNjo1NlrOGh1Lcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw==", "bodyText": "compute() does not seem to be strictly necessary here - simple jmxSessions.put(threadId, createNewSession(id, threadId, scopeStackCollector) should be enough and would avoid creating a lambda capture.", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r437995387", "createdAt": "2020-06-10T09:40:28Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -20,11 +20,9 @@ public JMXSessionFactory() {\n   public Session createSession(String id, Thread thread) {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n-\n     long threadId = thread.getId();\n-    JMXSession session = createNewSession(id, threadId, scopeStackCollector);\n-    jmxSessions.put(threadId, session);\n-    return session;\n+    return jmxSessions.compute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNTA3Mw==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438025073", "createdAt": "2020-06-10T10:33:12Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -20,11 +20,9 @@ public JMXSessionFactory() {\n   public Session createSession(String id, Thread thread) {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n-\n     long threadId = thread.getId();\n-    JMXSession session = createNewSession(id, threadId, scopeStackCollector);\n-    jmxSessions.put(threadId, session);\n-    return session;\n+    return jmxSessions.compute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAzMzEzMw==", "bodyText": "in fact compute returns me directly the created session that happened under atomic operation which I can't do with put which returns me the old value", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438033133", "createdAt": "2020-06-10T10:49:48Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -20,11 +20,9 @@ public JMXSessionFactory() {\n   public Session createSession(String id, Thread thread) {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n-\n     long threadId = thread.getId();\n-    JMXSession session = createNewSession(id, threadId, scopeStackCollector);\n-    jmxSessions.put(threadId, session);\n-    return session;\n+    return jmxSessions.compute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDAxNw==", "bodyText": "You would have the new value precomputed, right? No need to get the value back from the map operation. I'm a bit concerned that we may end up calling createNewSession() multiple times during compute() (if CAS fails the value is recomputed).\nSo this leaves piggybacking on the concurrent map CAS synchronization for createNewSession() the only reason why compute should be used instead of put. Can you, please, put a comment there so someone does not 'optimize' the code by calling put in the future?", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438074017", "createdAt": "2020-06-10T12:13:14Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -20,11 +20,9 @@ public JMXSessionFactory() {\n   public Session createSession(String id, Thread thread) {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n-\n     long threadId = thread.getId();\n-    JMXSession session = createNewSession(id, threadId, scopeStackCollector);\n-    jmxSessions.put(threadId, session);\n-    return session;\n+    return jmxSessions.compute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNzQ3NQ==", "bodyText": "compute() method will not call createNewSession multiple times: there is no CAS loop in compute.\nI added a comment for justifying the usage of compute", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438127475", "createdAt": "2020-06-10T13:36:56Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -20,11 +20,9 @@ public JMXSessionFactory() {\n   public Session createSession(String id, Thread thread) {\n     ScopeManager scopeManager = threadScopeMapper.forThread(thread);\n     ScopeStackCollector scopeStackCollector = scopeManager.startScope(id);\n-\n     long threadId = thread.getId();\n-    JMXSession session = createNewSession(id, threadId, scopeStackCollector);\n-    jmxSessions.put(threadId, session);\n-    return session;\n+    return jmxSessions.compute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NTM4Nw=="}, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODYxOTUwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOTo0Mzo0N1rOGhtPpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDozMzoyMFrOGhu7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzQ3Nw==", "bodyText": "What about using Arrays.binarySearch() instead - and if the key is not present inserting it at the position indicated by binarySearch() result to maintain sorted array. Would be beneficial for >10 tracked threads.", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r437997477", "createdAt": "2020-06-10T09:43:47Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -48,6 +47,10 @@ public void addThreadId(long threadId) {\n     }\n     do {\n       prev = threadIds.get();\n+      // check if already exists\n+      for (int i = 0; i < prev.length; i++) {\n+        if (prev[i] == threadId) return;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNTE1NQ==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1552#discussion_r438025155", "createdAt": "2020-06-10T10:33:20Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -48,6 +47,10 @@ public void addThreadId(long threadId) {\n     }\n     do {\n       prev = threadIds.get();\n+      // check if already exists\n+      for (int i = 0; i < prev.length; i++) {\n+        if (prev[i] == threadId) return;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5NzQ3Nw=="}, "originalCommit": {"oid": "5dea4833816133c16df89932525e4065bbea558c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 214, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}