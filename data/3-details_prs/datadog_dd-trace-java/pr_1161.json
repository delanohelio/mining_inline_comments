{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzE2MTI3", "number": 1161, "title": "Split TraceConsumer into two different disruptors", "bodyText": "First disruptor (TraceProcessingDisruptor) does processing, which is currently limited to serialization, but in the future can do other processing such as TraceInterceptor invocation.\nSecond disruptor (BatchWritingDisruptor) takes serialized traces and batches them into groups and flushes them periodically based on size and time.", "createdAt": "2020-01-06T21:13:14Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1161", "merged": true, "mergeCommit": {"oid": "406b324a82b482d7d8ad3faa5f9ccdd307c72308"}, "closed": true, "closedAt": "2020-01-31T20:41:15Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3z9NpgBqjI5MjU4MDEzMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_0V9AAFqTM1MTcyNzc1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88baa9e07f33077c5d916671070d673b20669b7f", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/88baa9e07f33077c5d916671070d673b20669b7f", "committedDate": "2020-01-06T21:12:01Z", "message": "Split TraceConsumer into two different disruptors\n\nFirst disruptor (TraceProcessingDisruptor) does processing, which is currently limited to serialization, but in the future can do other processing such as TraceInterceptor invocation.\nSecond disruptor (BatchWritingDisruptor) takes serialized traces and batches them into groups and flushes them periodically based on size and time."}, "afterCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e3054cb6cfe645bd189417c5d3be479beec08ea1", "committedDate": "2020-01-06T22:32:26Z", "message": "Split TraceConsumer into two different disruptors\n\nFirst disruptor (TraceProcessingDisruptor) does processing, which is currently limited to serialization, but in the future can do other processing such as TraceInterceptor invocation.\nSecond disruptor (BatchWritingDisruptor) takes serialized traces and batches them into groups and flushes them periodically based on size and time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjc1MTQ0", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339275144", "createdAt": "2020-01-07T14:39:00Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozOTowMVrOFa7N3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDozOTowMVrOFa7N3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3NzUwMw==", "bodyText": "Should we just remove the coverage testing?\nI don't think it is adding much and we keep skipping it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363777503", "createdAt": "2020-01-07T14:39:01Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/dd-trace-ot.gradle", "diffHunk": "@@ -12,6 +12,8 @@ minimumInstructionCoverage = 0.6\n excludedClassesCoverage += [\n   'datadog.trace.common.writer.ListWriter',\n   'datadog.trace.common.writer.LoggingWriter',\n+  'datadog.trace.common.writer.DDAgentWriter.Spec',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjc2MDU0", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339276054", "createdAt": "2020-01-07T14:40:26Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MDoyNlrOFa7Qbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MDoyNlrOFa7Qbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODE1OA==", "bodyText": "Yes, this is the direction of having per class Config objects.\nI think that's a good idea, but I'm not entirely sold on Lombok for this purpose.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363778158", "createdAt": "2020-01-07T14:40:26Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -29,86 +24,65 @@\n  */\n @Slf4j\n public class DDAgentWriter implements Writer {\n-  private static final int DISRUPTOR_BUFFER_SIZE = 1024;\n-  private static final int SENDER_QUEUE_SIZE = 16;\n-  private static final int FLUSH_PAYLOAD_DELAY = 1; // 1/second\n+  @Value\n+  @lombok.Builder\n+  public static class Spec {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjc2MzA1", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339276305", "createdAt": "2020-01-07T14:40:51Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MDo1MVrOFa7RJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MDo1MVrOFa7RJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODM0Mw==", "bodyText": "Why are these public?", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363778343", "createdAt": "2020-01-07T14:40:51Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -29,86 +24,65 @@\n  */\n @Slf4j\n public class DDAgentWriter implements Writer {\n-  private static final int DISRUPTOR_BUFFER_SIZE = 1024;\n-  private static final int SENDER_QUEUE_SIZE = 16;\n-  private static final int FLUSH_PAYLOAD_DELAY = 1; // 1/second\n+  @Value\n+  @lombok.Builder\n+  public static class Spec {\n+    @lombok.Builder.Default public String agentHost = DEFAULT_AGENT_HOST;\n+    @lombok.Builder.Default public int traceAgentPort = DEFAULT_TRACE_AGENT_PORT;\n+    @lombok.Builder.Default public String unixDomainSocket = DEFAULT_AGENT_UNIX_DOMAIN_SOCKET;\n+    @lombok.Builder.Default public int traceBufferSize = DISRUPTOR_BUFFER_SIZE;\n+    @lombok.Builder.Default public Monitor monitor = new Monitor.Noop();\n+    @lombok.Builder.Default public int flushFrequencySeconds = 1;\n+  }\n \n-  private static final ThreadFactory SCHEDULED_FLUSH_THREAD_FACTORY =\n-      new DaemonThreadFactory(\"dd-trace-writer\");\n+  private static final int DISRUPTOR_BUFFER_SIZE = 1024;\n \n   private final DDAgentApi api;\n-  public final int flushFrequencySeconds;\n-  public final TraceSerializingDisruptor disruptor;\n+  public final TraceProcessingDisruptor traceProcessingDisruptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjc2Njk4", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339276698", "createdAt": "2020-01-07T14:41:28Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MToyOVrOFa7SZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MToyOVrOFa7SZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3ODY2MQ==", "bodyText": "I'd like to add a comment that explains how the publishing pipeline works.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363778661", "createdAt": "2020-01-07T14:41:29Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -29,86 +24,65 @@\n  */\n @Slf4j\n public class DDAgentWriter implements Writer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjc3MzMz", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339277333", "createdAt": "2020-01-07T14:42:28Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MjoyOFrOFa7UOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0MjoyOFrOFa7UOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc3OTEyOA==", "bodyText": "I think it would be fine to pass the Spec object done to the disruptors.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363779128", "createdAt": "2020-01-07T14:42:28Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -29,86 +24,65 @@\n  */\n @Slf4j\n public class DDAgentWriter implements Writer {\n-  private static final int DISRUPTOR_BUFFER_SIZE = 1024;\n-  private static final int SENDER_QUEUE_SIZE = 16;\n-  private static final int FLUSH_PAYLOAD_DELAY = 1; // 1/second\n+  @Value\n+  @lombok.Builder\n+  public static class Spec {\n+    @lombok.Builder.Default public String agentHost = DEFAULT_AGENT_HOST;\n+    @lombok.Builder.Default public int traceAgentPort = DEFAULT_TRACE_AGENT_PORT;\n+    @lombok.Builder.Default public String unixDomainSocket = DEFAULT_AGENT_UNIX_DOMAIN_SOCKET;\n+    @lombok.Builder.Default public int traceBufferSize = DISRUPTOR_BUFFER_SIZE;\n+    @lombok.Builder.Default public Monitor monitor = new Monitor.Noop();\n+    @lombok.Builder.Default public int flushFrequencySeconds = 1;\n+  }\n \n-  private static final ThreadFactory SCHEDULED_FLUSH_THREAD_FACTORY =\n-      new DaemonThreadFactory(\"dd-trace-writer\");\n+  private static final int DISRUPTOR_BUFFER_SIZE = 1024;\n \n   private final DDAgentApi api;\n-  public final int flushFrequencySeconds;\n-  public final TraceSerializingDisruptor disruptor;\n+  public final TraceProcessingDisruptor traceProcessingDisruptor;\n+  public final BatchWritingDisruptor batchWritingDisruptor;\n \n-  public final ScheduledExecutorService scheduledWriterExecutor;\n   private final AtomicInteger traceCount = new AtomicInteger(0);\n-  public final Phaser apiPhaser = new Phaser(); // Ensure API calls are completed when flushing;\n \n   public final Monitor monitor;\n \n   public DDAgentWriter() {\n-    this(\n-        new DDAgentApi(\n-            DEFAULT_AGENT_HOST, DEFAULT_TRACE_AGENT_PORT, DEFAULT_AGENT_UNIX_DOMAIN_SOCKET),\n-        new Monitor.Noop());\n+    this(Spec.builder().build());\n   }\n \n-  public DDAgentWriter(final DDAgentApi api, final Monitor monitor) {\n-    this(api, monitor, DISRUPTOR_BUFFER_SIZE, SENDER_QUEUE_SIZE, FLUSH_PAYLOAD_DELAY);\n-  }\n+  public DDAgentWriter(final Spec spec) {\n+    api = new DDAgentApi(spec.agentHost, spec.traceAgentPort, spec.unixDomainSocket);\n+    monitor = spec.monitor;\n \n-  /** Old signature (pre-Monitor) used in tests */\n-  private DDAgentWriter(final DDAgentApi api) {\n-    this(api, new Monitor.Noop());\n+    batchWritingDisruptor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjgxMTA1", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339281105", "createdAt": "2020-01-07T14:48:01Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODowMVrOFa7fnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo0ODowMVrOFa7fnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4MjA0NA==", "bodyText": "I'm not crazy about adding an extra executor for this.\nThe requesting flush on time out seen cleaner and lighter weight to me.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363782044", "createdAt": "2020-01-07T14:48:01Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import com.lmax.disruptor.EventHandler;\n+import datadog.trace.common.util.DaemonThreadFactory;\n+import datadog.trace.common.writer.DDAgentWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class BatchWritingDisruptor extends AbstractDisruptor<byte[]> {\n+  private static final int FLUSH_PAYLOAD_BYTES = 5_000_000; // 5 MB\n+\n+  private final ScheduledExecutorService heartbeatExecutor =\n+      Executors.newScheduledThreadPool(1, new DaemonThreadFactory(\"dd-trace-heartbeat\"));\n+\n+  private final DisruptorEvent.HeartbeatTranslator<byte[]> heartbeatTranslator =\n+      new DisruptorEvent.HeartbeatTranslator();\n+\n+  public BatchWritingDisruptor(\n+      final int disruptorSize,\n+      final int flushFrequencySeconds,\n+      final DDAgentApi api,\n+      final Monitor monitor,\n+      final DDAgentWriter writer) {\n+    super(disruptorSize, new BatchWritingHandler(flushFrequencySeconds, api, monitor, writer));\n+\n+    if (0 < flushFrequencySeconds) {\n+      // This provides a steady stream of events to enable flushing with a low throughput.\n+      final Runnable heartbeat =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjgzMzk0", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339283394", "createdAt": "2020-01-07T14:51:17Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MToxOFrOFa7mZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MToxOFrOFa7mZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4Mzc4Mw==", "bodyText": "I think having a latch per batch is a big improvement in the flush semantics.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363783783", "createdAt": "2020-01-07T14:51:18Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/DisruptorEvent.java", "diffHunk": "@@ -2,13 +2,19 @@\n \n import com.lmax.disruptor.EventFactory;\n import com.lmax.disruptor.EventTranslator;\n-import com.lmax.disruptor.EventTranslatorOneArg;\n-import datadog.opentracing.DDSpan;\n-import java.util.List;\n+import com.lmax.disruptor.EventTranslatorTwoArg;\n+import java.util.concurrent.CountDownLatch;\n \n class DisruptorEvent<T> {\n-  public volatile boolean shouldFlush = false;\n   public volatile T data = null;\n+  public volatile int representativeCount = 0;\n+  public volatile CountDownLatch flushLatch = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MjgzODQ3", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339283847", "createdAt": "2020-01-07T14:52:03Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MjowM1rOFa7n0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MjowM1rOFa7n0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4NDE0Ng==", "bodyText": "It seems to me that is still probably two separate classes -- one per disruptor, but admittedly, I haven't studied the code carefully.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363784146", "createdAt": "2020-01-07T14:52:03Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/DisruptorEvent.java", "diffHunk": "@@ -2,13 +2,19 @@\n \n import com.lmax.disruptor.EventFactory;\n import com.lmax.disruptor.EventTranslator;\n-import com.lmax.disruptor.EventTranslatorOneArg;\n-import datadog.opentracing.DDSpan;\n-import java.util.List;\n+import com.lmax.disruptor.EventTranslatorTwoArg;\n+import java.util.concurrent.CountDownLatch;\n \n class DisruptorEvent<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjg0NTk5", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339284599", "createdAt": "2020-01-07T14:53:14Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MzoxNFrOFa7qBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1MzoxNFrOFa7qBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4NDcxMA==", "bodyText": "Can these be package visible instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363784710", "createdAt": "2020-01-07T14:53:14Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/DisruptorEvent.java", "diffHunk": "@@ -2,13 +2,19 @@\n \n import com.lmax.disruptor.EventFactory;\n import com.lmax.disruptor.EventTranslator;\n-import com.lmax.disruptor.EventTranslatorOneArg;\n-import datadog.opentracing.DDSpan;\n-import java.util.List;\n+import com.lmax.disruptor.EventTranslatorTwoArg;\n+import java.util.concurrent.CountDownLatch;\n \n class DisruptorEvent<T> {\n-  public volatile boolean shouldFlush = false;\n   public volatile T data = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjg1Mzk4", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339285398", "createdAt": "2020-01-07T14:54:25Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1NDoyNVrOFa7saQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1NDoyNVrOFa7saQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4NTMyMQ==", "bodyText": "I think there's a bug here.  We shouldn't be calling onSerialize before we know if the publishing was successful.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363785321", "createdAt": "2020-01-07T14:54:25Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.lmax.disruptor.EventHandler;\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.util.DaemonThreadFactory;\n+import datadog.trace.common.writer.DDAgentWriter;\n+import java.util.List;\n+import java.util.concurrent.ThreadFactory;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessingDisruptor extends AbstractDisruptor<List<DDSpan>> {\n+\n+  public TraceProcessingDisruptor(\n+      final int disruptorSize,\n+      final DDAgentApi api,\n+      final BatchWritingDisruptor batchWritingDisruptor,\n+      final Monitor monitor,\n+      final DDAgentWriter writer) {\n+    // TODO: add config to enable control over serialization overhead.\n+    super(disruptorSize, new TraceSerializingHandler(api, batchWritingDisruptor, monitor, writer));\n+  }\n+\n+  @Override\n+  protected ThreadFactory getThreadFactory() {\n+    return new DaemonThreadFactory(\"dd-trace-processor\");\n+  }\n+\n+  @Override\n+  public boolean publish(final List<DDSpan> data, final int representativeCount) {\n+    return disruptor.getRingBuffer().tryPublishEvent(dataTranslator, data, representativeCount);\n+  }\n+\n+  // This class is threadsafe if we want to enable more processors.\n+  public static class TraceSerializingHandler\n+      implements EventHandler<DisruptorEvent<List<DDSpan>>> {\n+    private final DDAgentApi api;\n+    private final BatchWritingDisruptor batchWritingDisruptor;\n+    private final Monitor monitor;\n+    private final DDAgentWriter writer;\n+\n+    public TraceSerializingHandler(\n+        final DDAgentApi api,\n+        final BatchWritingDisruptor batchWritingDisruptor,\n+        final Monitor monitor,\n+        final DDAgentWriter writer) {\n+      this.api = api;\n+      this.batchWritingDisruptor = batchWritingDisruptor;\n+      this.monitor = monitor;\n+      this.writer = writer;\n+    }\n+\n+    @Override\n+    public void onEvent(\n+        final DisruptorEvent<List<DDSpan>> event, final long sequence, final boolean endOfBatch) {\n+      try {\n+        if (event.data != null) {\n+          try {\n+            final byte[] serializedTrace = api.serializeTrace(event.data);\n+            monitor.onSerialize(writer, event.data, serializedTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjg3MzIx", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339287321", "createdAt": "2020-01-07T14:57:02Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1NzowMlrOFa7x3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNDo1NzowMlrOFa7x3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4NjcxNg==", "bodyText": "It could track not just traces but also spans.  We wanted to include in health metrics, but that wasn't terribly easy in the prior design.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363786716", "createdAt": "2020-01-07T14:57:02Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import com.lmax.disruptor.EventHandler;\n+import datadog.trace.common.util.DaemonThreadFactory;\n+import datadog.trace.common.writer.DDAgentWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class BatchWritingDisruptor extends AbstractDisruptor<byte[]> {\n+  private static final int FLUSH_PAYLOAD_BYTES = 5_000_000; // 5 MB\n+\n+  private final ScheduledExecutorService heartbeatExecutor =\n+      Executors.newScheduledThreadPool(1, new DaemonThreadFactory(\"dd-trace-heartbeat\"));\n+\n+  private final DisruptorEvent.HeartbeatTranslator<byte[]> heartbeatTranslator =\n+      new DisruptorEvent.HeartbeatTranslator();\n+\n+  public BatchWritingDisruptor(\n+      final int disruptorSize,\n+      final int flushFrequencySeconds,\n+      final DDAgentApi api,\n+      final Monitor monitor,\n+      final DDAgentWriter writer) {\n+    super(disruptorSize, new BatchWritingHandler(flushFrequencySeconds, api, monitor, writer));\n+\n+    if (0 < flushFrequencySeconds) {\n+      // This provides a steady stream of events to enable flushing with a low throughput.\n+      final Runnable heartbeat =\n+          new Runnable() {\n+            @Override\n+            public void run() {\n+              // Only add if the buffer is empty.\n+              if (running && getCurrentCount() == 0) {\n+                disruptor.getRingBuffer().tryPublishEvent(heartbeatTranslator);\n+              }\n+            }\n+          };\n+      heartbeatExecutor.scheduleAtFixedRate(heartbeat, 100, 100, TimeUnit.MILLISECONDS);\n+    }\n+  }\n+\n+  @Override\n+  protected ThreadFactory getThreadFactory() {\n+    return new DaemonThreadFactory(\"dd-trace-writer\");\n+  }\n+\n+  @Override\n+  public boolean publish(final byte[] data, final int representativeCount) {\n+    disruptor.getRingBuffer().publishEvent(dataTranslator, data, representativeCount);\n+    return true;\n+  }\n+\n+  // Intentionally not thread safe.\n+  private static class BatchWritingHandler implements EventHandler<DisruptorEvent<byte[]>> {\n+\n+    private final long flushFrequencyNanos;\n+    private final DDAgentApi api;\n+    private final Monitor monitor;\n+    private final DDAgentWriter writer;\n+    private final List<byte[]> serializedTraces = new ArrayList<>();\n+    private int representativeCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjg5NTEx", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339289511", "createdAt": "2020-01-07T15:00:11Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTowMDoxMVrOFa74XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTowMDoxMVrOFa74XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc4ODM4MQ==", "bodyText": "I have some concerns with this.  I'd actually like to see us get away from producing many tiny byte[].\nI'd prefer to see us build up one big byte[] instead to reduce the amount of allocation.\nDDApi.Request from the experimental branch was built with that in mind.  I don't quite see how we do that with this design.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363788381", "createdAt": "2020-01-07T15:00:11Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import com.lmax.disruptor.EventHandler;\n+import datadog.trace.common.util.DaemonThreadFactory;\n+import datadog.trace.common.writer.DDAgentWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class BatchWritingDisruptor extends AbstractDisruptor<byte[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzAxNzI1", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339301725", "createdAt": "2020-01-07T15:17:39Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxNzozOVrOFa8bEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxNzozOVrOFa8bEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NzI2Ng==", "bodyText": "This should probably be in a finally block in the event that prior close fails.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363797266", "createdAt": "2020-01-07T15:17:39Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -161,32 +140,16 @@ public DDAgentApi getApi() {\n \n   @Override\n   public void start() {\n-    disruptor.start();\n-\n+    batchWritingDisruptor.start();\n+    traceProcessingDisruptor.start();\n     monitor.onStart(this);\n   }\n \n   @Override\n   public void close() {\n-\n-    boolean flushSuccess = true;\n-\n-    // We have to shutdown scheduled executor first to make sure no flush events issued after\n-    // disruptor has been shutdown.\n-    // Otherwise those events will never be processed and flush call will wait forever.\n-    scheduledWriterExecutor.shutdown();\n-    try {\n-      scheduledWriterExecutor.awaitTermination(flushFrequencySeconds, SECONDS);\n-    } catch (final InterruptedException e) {\n-      log.warn(\"Waiting for flush executor shutdown interrupted.\", e);\n-\n-      flushSuccess = false;\n-    }\n-    flushSuccess |= disruptor.flush();\n-\n-    disruptor.close();\n-\n-    monitor.onShutdown(this, flushSuccess);\n+    monitor.onShutdown(this, traceProcessingDisruptor.flush(traceCount.getAndSet(0)));\n+    traceProcessingDisruptor.close();\n+    batchWritingDisruptor.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzAxOTQ4", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339301948", "createdAt": "2020-01-07T15:17:59Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxNzo1OVrOFa8bxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxNzo1OVrOFa8bxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5NzQ0NQ==", "bodyText": "I think the call should be after the close.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363797445", "createdAt": "2020-01-07T15:17:59Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -161,32 +140,16 @@ public DDAgentApi getApi() {\n \n   @Override\n   public void start() {\n-    disruptor.start();\n-\n+    batchWritingDisruptor.start();\n+    traceProcessingDisruptor.start();\n     monitor.onStart(this);\n   }\n \n   @Override\n   public void close() {\n-\n-    boolean flushSuccess = true;\n-\n-    // We have to shutdown scheduled executor first to make sure no flush events issued after\n-    // disruptor has been shutdown.\n-    // Otherwise those events will never be processed and flush call will wait forever.\n-    scheduledWriterExecutor.shutdown();\n-    try {\n-      scheduledWriterExecutor.awaitTermination(flushFrequencySeconds, SECONDS);\n-    } catch (final InterruptedException e) {\n-      log.warn(\"Waiting for flush executor shutdown interrupted.\", e);\n-\n-      flushSuccess = false;\n-    }\n-    flushSuccess |= disruptor.flush();\n-\n-    disruptor.close();\n-\n-    monitor.onShutdown(this, flushSuccess);\n+    monitor.onShutdown(this, traceProcessingDisruptor.flush(traceCount.getAndSet(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzAzMTg2", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-339303186", "createdAt": "2020-01-07T15:19:43Z", "commit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxOTo0M1rOFa8few==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNToxOTo0M1rOFa8few==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc5ODM5NQ==", "bodyText": "To have more meaningful back-pressure, we probably also need to able to back-off on the rate that we are sending.  How would that work with the heartbeatExecutor?", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r363798395", "createdAt": "2020-01-07T15:19:43Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import com.lmax.disruptor.EventHandler;\n+import datadog.trace.common.util.DaemonThreadFactory;\n+import datadog.trace.common.writer.DDAgentWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class BatchWritingDisruptor extends AbstractDisruptor<byte[]> {\n+  private static final int FLUSH_PAYLOAD_BYTES = 5_000_000; // 5 MB\n+\n+  private final ScheduledExecutorService heartbeatExecutor =\n+      Executors.newScheduledThreadPool(1, new DaemonThreadFactory(\"dd-trace-heartbeat\"));\n+\n+  private final DisruptorEvent.HeartbeatTranslator<byte[]> heartbeatTranslator =\n+      new DisruptorEvent.HeartbeatTranslator();\n+\n+  public BatchWritingDisruptor(\n+      final int disruptorSize,\n+      final int flushFrequencySeconds,\n+      final DDAgentApi api,\n+      final Monitor monitor,\n+      final DDAgentWriter writer) {\n+    super(disruptorSize, new BatchWritingHandler(flushFrequencySeconds, api, monitor, writer));\n+\n+    if (0 < flushFrequencySeconds) {\n+      // This provides a steady stream of events to enable flushing with a low throughput.\n+      final Runnable heartbeat =\n+          new Runnable() {\n+            @Override\n+            public void run() {\n+              // Only add if the buffer is empty.\n+              if (running && getCurrentCount() == 0) {\n+                disruptor.getRingBuffer().tryPublishEvent(heartbeatTranslator);\n+              }\n+            }\n+          };\n+      heartbeatExecutor.scheduleAtFixedRate(heartbeat, 100, 100, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3054cb6cfe645bd189417c5d3be479beec08ea1", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e3054cb6cfe645bd189417c5d3be479beec08ea1", "committedDate": "2020-01-06T22:32:26Z", "message": "Split TraceConsumer into two different disruptors\n\nFirst disruptor (TraceProcessingDisruptor) does processing, which is currently limited to serialization, but in the future can do other processing such as TraceInterceptor invocation.\nSecond disruptor (BatchWritingDisruptor) takes serialized traces and batches them into groups and flushes them periodically based on size and time."}, "afterCommit": {"oid": "a5b7705dd7d9a44f045edbea2d8f2f4a9c35d6c4", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a5b7705dd7d9a44f045edbea2d8f2f4a9c35d6c4", "committedDate": "2020-01-13T23:44:51Z", "message": "Apply `_sample_rate` metric to allow dd-agent to do proper scaling of metrics when traces are sampled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "451fba256a5068b3b40871dea630b5ede4213823", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/451fba256a5068b3b40871dea630b5ede4213823", "committedDate": "2020-01-16T00:13:44Z", "message": "Split TraceConsumer into two different disruptors\n\nFirst disruptor (TraceProcessingDisruptor) does processing, which is currently limited to serialization, but in the future can do other processing such as TraceInterceptor invocation.\nSecond disruptor (BatchWritingDisruptor) takes serialized traces and batches them into groups and flushes them periodically based on size and time."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff855737b4fca280519f5fee0750a075b94f052", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5ff855737b4fca280519f5fee0750a075b94f052", "committedDate": "2020-01-16T00:13:44Z", "message": "Add documentation, remove volatile/public, improve test reliability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4db31cf79a4fc8ec5bf1ad7ba9d44988daf7383", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a4db31cf79a4fc8ec5bf1ad7ba9d44988daf7383", "committedDate": "2020-01-16T00:13:44Z", "message": "Apply `_sample_rate` metric to allow dd-agent to do proper scaling of metrics when traces are sampled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aea763769557b2f75da901cf34af1308927495f", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3aea763769557b2f75da901cf34af1308927495f", "committedDate": "2020-01-16T00:13:44Z", "message": "Remove test race condition"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "090c9cba01f69184fc266126b94c1ce549d37be4", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/090c9cba01f69184fc266126b94c1ce549d37be4", "committedDate": "2020-01-14T00:21:37Z", "message": "Remove test race condition"}, "afterCommit": {"oid": "66928ae28294a95d2ae691ad20995eda2184d25c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/66928ae28294a95d2ae691ad20995eda2184d25c", "committedDate": "2020-01-17T00:43:01Z", "message": "Replace DDAgentWriter.Spec with a proper Builder.\n\nAlso rename the builder class on DDTracer to default name generated by Lombok."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzA2ODk4", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-344306898", "createdAt": "2020-01-17T00:45:02Z", "commit": {"oid": "a4db31cf79a4fc8ec5bf1ad7ba9d44988daf7383"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDo0NTowMlrOFer7Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDo0NTowMlrOFer7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMTIyNw==", "bodyText": "@gbbr does this look like a legit way of getting our _sample_rate scaling done by the agent to be accurate?", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r367721227", "createdAt": "2020-01-17T00:45:02Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -63,6 +63,12 @@ public void onEvent(\n         final DisruptorEvent<List<DDSpan>> event, final long sequence, final boolean endOfBatch) {\n       try {\n         if (event.data != null) {\n+          if (1 < event.representativeCount && !event.data.isEmpty()) {\n+            // attempt to have agent scale the metrics properly\n+            ((DDSpan) event.data.get(0).getLocalRootSpan())\n+                .context()\n+                .setMetric(\"_sample_rate\", 1d / event.representativeCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4db31cf79a4fc8ec5bf1ad7ba9d44988daf7383"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzIwODQ1", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-344320845", "createdAt": "2020-01-17T01:35:47Z", "commit": {"oid": "a4db31cf79a4fc8ec5bf1ad7ba9d44988daf7383"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozNTo0N1rOFespIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMTozNTo0N1rOFespIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzczMzAyNg==", "bodyText": "This might not work if the last span reported isn't the root span.  This might be an issue for async traces and for partial flush traces.  Any better ideas?", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r367733026", "createdAt": "2020-01-17T01:35:47Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/DDAgentWriter.java", "diffHunk": "@@ -113,7 +113,13 @@ public final long getDisruptorRemainingCapacity() {\n   public void write(final List<DDSpan> trace) {\n     // We can't add events after shutdown otherwise it will never complete shutting down.\n     if (traceProcessingDisruptor.running) {\n-      final int representativeCount = traceCount.getAndSet(0) + 1;\n+      final int representativeCount;\n+      if (trace.isEmpty() || !(trace.get(0).isRootSpan())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4db31cf79a4fc8ec5bf1ad7ba9d44988daf7383"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cce4cb783edb1b766f6c22be4b1701739dcc9ae", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5cce4cb783edb1b766f6c22be4b1701739dcc9ae", "committedDate": "2020-01-17T19:10:11Z", "message": "Replace DDAgentWriter.Spec with a proper Builder.\n\nAlso rename the builder class on DDTracer to default name generated by Lombok."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66928ae28294a95d2ae691ad20995eda2184d25c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/66928ae28294a95d2ae691ad20995eda2184d25c", "committedDate": "2020-01-17T00:43:01Z", "message": "Replace DDAgentWriter.Spec with a proper Builder.\n\nAlso rename the builder class on DDTracer to default name generated by Lombok."}, "afterCommit": {"oid": "5cce4cb783edb1b766f6c22be4b1701739dcc9ae", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5cce4cb783edb1b766f6c22be4b1701739dcc9ae", "committedDate": "2020-01-17T19:10:11Z", "message": "Replace DDAgentWriter.Spec with a proper Builder.\n\nAlso rename the builder class on DDTracer to default name generated by Lombok."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODQyNTk4", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-344842598", "createdAt": "2020-01-17T21:09:00Z", "commit": {"oid": "5cce4cb783edb1b766f6c22be4b1701739dcc9ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMTowOTowMFrOFfFUPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMTowOTowMFrOFfFUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEzNzI3OA==", "bodyText": "So reducing byte[] remains to be done, I think that's fine for now.  We can revisit that after ripping out Jackson.", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#discussion_r368137278", "createdAt": "2020-01-17T21:09:00Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package datadog.trace.common.writer.ddagent;\n+\n+import com.lmax.disruptor.EventHandler;\n+import datadog.trace.common.util.DaemonThreadFactory;\n+import datadog.trace.common.writer.DDAgentWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Disruptor that takes serialized traces and batches them into appropriately sized requests.\n+ *\n+ * <p>publishing to the buffer will block if the buffer is full.\n+ */\n+@Slf4j\n+public class BatchWritingDisruptor extends AbstractDisruptor<byte[]> {\n+  private static final int FLUSH_PAYLOAD_BYTES = 5_000_000; // 5 MB\n+\n+  // TODO: move executor to tracer for sharing with other tasks.\n+  private final ScheduledExecutorService heartbeatExecutor =\n+      Executors.newScheduledThreadPool(1, new DaemonThreadFactory(\"dd-trace-heartbeat\"));\n+\n+  private final DisruptorEvent.HeartbeatTranslator<byte[]> heartbeatTranslator =\n+      new DisruptorEvent.HeartbeatTranslator();\n+\n+  public BatchWritingDisruptor(\n+      final int disruptorSize,\n+      final int flushFrequencySeconds,\n+      final DDAgentApi api,\n+      final Monitor monitor,\n+      final DDAgentWriter writer) {\n+    super(disruptorSize, new BatchWritingHandler(flushFrequencySeconds, api, monitor, writer));\n+\n+    if (0 < flushFrequencySeconds) {\n+      // This provides a steady stream of events to enable flushing with a low throughput.\n+      final Runnable heartbeat =\n+          new Runnable() {\n+            @Override\n+            public void run() {\n+              // Only add if the buffer is empty.\n+              if (running && getCurrentCount() == 0) {\n+                disruptor.getRingBuffer().tryPublishEvent(heartbeatTranslator);\n+              }\n+            }\n+          };\n+      heartbeatExecutor.scheduleAtFixedRate(heartbeat, 100, 100, TimeUnit.MILLISECONDS);\n+    }\n+  }\n+\n+  @Override\n+  protected ThreadFactory getThreadFactory() {\n+    return new DaemonThreadFactory(\"dd-trace-writer\");\n+  }\n+\n+  @Override\n+  public boolean publish(final byte[] data, final int representativeCount) {\n+    // blocking call to ensure serialized traces aren't discarded and apply back pressure.\n+    disruptor.getRingBuffer().publishEvent(dataTranslator, data, representativeCount);\n+    return true;\n+  }\n+\n+  // Intentionally not thread safe.\n+  private static class BatchWritingHandler implements EventHandler<DisruptorEvent<byte[]>> {\n+\n+    private final long flushFrequencyNanos;\n+    private final DDAgentApi api;\n+    private final Monitor monitor;\n+    private final DDAgentWriter writer;\n+    private final List<byte[]> serializedTraces = new ArrayList<>();\n+    private int representativeCount = 0;\n+    private int sizeInBytes = 0;\n+    private long nextScheduledFlush;\n+\n+    private BatchWritingHandler(\n+        final int flushFrequencySeconds,\n+        final DDAgentApi api,\n+        final Monitor monitor,\n+        final DDAgentWriter writer) {\n+      flushFrequencyNanos = TimeUnit.SECONDS.toNanos(flushFrequencySeconds);\n+      scheduleNextFlush();\n+      this.api = api;\n+      this.monitor = monitor;\n+      this.writer = writer;\n+    }\n+\n+    // TODO: reduce byte[] garbage by keeping the byte[] on the event and copy before returning.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cce4cb783edb1b766f6c22be4b1701739dcc9ae"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzI3NzUz", "url": "https://github.com/DataDog/dd-trace-java/pull/1161#pullrequestreview-351727753", "createdAt": "2020-01-31T19:31:12Z", "commit": {"oid": "5cce4cb783edb1b766f6c22be4b1701739dcc9ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2659, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}