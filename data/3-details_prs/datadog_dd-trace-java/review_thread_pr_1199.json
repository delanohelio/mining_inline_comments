{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTMzMzgw", "number": 1199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoxNzo1NFrODc-SXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMToxNToxN1rODeMS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzA3MjI5OnYy", "diffSide": "RIGHT", "path": "gradle/dependencies.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoxNzo1NFrOFlTplg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDoyMDowMlrOFoXsog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzU3NA==", "bodyText": "This seems to be a lot of manual dependency management that is very easy to get wrong. Instead maybe you would consider just somehow including jmxfetch into existing agent jar?", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r374663574", "createdAt": "2020-02-04T13:17:54Z", "author": {"login": "mar-kolya"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -60,5 +60,31 @@ ext {\n     scala          : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: \"${versions.scala}\"),\n     kotlin         : dependencies.create(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: \"${versions.kotlin}\"),\n     coroutines     : dependencies.create(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: \"${versions.coroutines}\"),\n+\n+    // Shared between agent tooling and instrumentation and JMXFetch\n+    shared         : [\n+      dependencies.create(group: 'com.datadoghq', name: 'java-dogstatsd-client', version: '2.8'),\n+      // \"Explicit override jnr version because .22 caused issues\" - mar-kolya\n+      dependencies.create(group: 'com.github.jnr', name: 'jnr-unixsocket', version: '0.23'),\n+      dependencies.create(group: 'com.google.guava', name: 'guava', version: \"${versions.guava}\")\n+    ],\n+\n+    // Inverse of \"shared\".  These exclude directives are part of shadowJar's DSL\n+    // which is similar but not exactly the same as the regular gradle dependency{} block\n+    // Also, transitive dependencies have to be explicitly listed\n+    sharedInverse  : (Closure) {\n+      // dogstatsd and its transitives\n+      exclude(dependency('com.datadoghq:java-dogstatsd-client'))\n+      exclude(dependency('com.github.jnr::'))\n+      exclude(dependency('org.ow2.asm::'))\n+\n+      // Guava and its transitives\n+      exclude(dependency('com.google.guava::'))\n+      exclude(dependency('com.google.code.findbugs::'))\n+      exclude(dependency('com.google.errorprone::'))\n+      exclude(dependency('com.google.j2objc::'))\n+      exclude(dependency('org.codehaus.mojo::'))\n+      exclude(dependency('org.checkerframework::'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fb30385b3d3627766d4790940baa762ba012a0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NTYxOA==", "bodyText": "Yes, it is worth thinking about automating a bit more.  However, I suspect it will have to be semi-manual as we upgrade different components.\nI think it is mostly going to effect us when we upgrade jmxfetch, since I don't believe dogstatsd has many dependencies.", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r377875618", "createdAt": "2020-02-11T20:20:02Z", "author": {"login": "dougqh"}, "path": "gradle/dependencies.gradle", "diffHunk": "@@ -60,5 +60,31 @@ ext {\n     scala          : dependencies.create(group: 'org.scala-lang', name: 'scala-library', version: \"${versions.scala}\"),\n     kotlin         : dependencies.create(group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: \"${versions.kotlin}\"),\n     coroutines     : dependencies.create(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: \"${versions.coroutines}\"),\n+\n+    // Shared between agent tooling and instrumentation and JMXFetch\n+    shared         : [\n+      dependencies.create(group: 'com.datadoghq', name: 'java-dogstatsd-client', version: '2.8'),\n+      // \"Explicit override jnr version because .22 caused issues\" - mar-kolya\n+      dependencies.create(group: 'com.github.jnr', name: 'jnr-unixsocket', version: '0.23'),\n+      dependencies.create(group: 'com.google.guava', name: 'guava', version: \"${versions.guava}\")\n+    ],\n+\n+    // Inverse of \"shared\".  These exclude directives are part of shadowJar's DSL\n+    // which is similar but not exactly the same as the regular gradle dependency{} block\n+    // Also, transitive dependencies have to be explicitly listed\n+    sharedInverse  : (Closure) {\n+      // dogstatsd and its transitives\n+      exclude(dependency('com.datadoghq:java-dogstatsd-client'))\n+      exclude(dependency('com.github.jnr::'))\n+      exclude(dependency('org.ow2.asm::'))\n+\n+      // Guava and its transitives\n+      exclude(dependency('com.google.guava::'))\n+      exclude(dependency('com.google.code.findbugs::'))\n+      exclude(dependency('com.google.errorprone::'))\n+      exclude(dependency('com.google.j2objc::'))\n+      exclude(dependency('org.codehaus.mojo::'))\n+      exclude(dependency('org.checkerframework::'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzU3NA=="}, "originalCommit": {"oid": "42fb30385b3d3627766d4790940baa762ba012a0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTM4OTc5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1MzowNFrOFnJ-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1MzowNFrOFnJ-NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMjE2NA==", "bodyText": "I've merged change #1204 in this method to master. Will be small merge conflict :)", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r376602164", "createdAt": "2020-02-07T20:53:04Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -160,13 +163,38 @@ public void execute() {\n     }\n   }\n \n+  private static synchronized void createParentClassloader(final URL bootstrapURL) {\n+    if (PARENT_CLASSLOADER == null) {\n+      try {\n+        final Class<?> bootstrapProxyClass =\n+            ClassLoader.getSystemClassLoader()\n+                .loadClass(\"datadog.trace.bootstrap.DatadogClassLoader$BootstrapClassLoaderProxy\");\n+        final Constructor constructor = bootstrapProxyClass.getDeclaredConstructor(URL.class);\n+        BOOTSTRAP_PROXY = (ClassLoader) constructor.newInstance(bootstrapURL);\n+\n+        final ClassLoader grandParent;\n+        if (isJavaBefore9()) {\n+          grandParent = null; // bootstrap\n+        } else {\n+          // platform classloader is parent of system in java 9+\n+          grandParent = getPlatformClassLoader();\n+        }\n+\n+        PARENT_CLASSLOADER = createDatadogClassLoader(\"shared.isolated\", bootstrapURL, grandParent);\n+      } catch (final Throwable ex) {\n+        log.error(\"Throwable thrown creating parent classloader\", ex);\n+      }\n+    }\n+  }\n+\n   private static synchronized void startDatadogAgent(\n       final Instrumentation inst, final URL bootstrapURL) {\n     if (AGENT_CLASSLOADER == null) {\n       final ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fb30385b3d3627766d4790940baa762ba012a0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTg1MzAyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwMToxNToxN1rOFnOVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMDoyNjoyN1rOFoX5Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3MzU1OQ==", "bodyText": "Is synchronized needed for this method ? And AGENT_CLASSLOADER not volatile at the same time?", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r376673559", "createdAt": "2020-02-08T01:15:17Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -160,13 +163,38 @@ public void execute() {\n     }\n   }\n \n+  private static synchronized void createParentClassloader(final URL bootstrapURL) {\n+    if (PARENT_CLASSLOADER == null) {\n+      try {\n+        final Class<?> bootstrapProxyClass =\n+            ClassLoader.getSystemClassLoader()\n+                .loadClass(\"datadog.trace.bootstrap.DatadogClassLoader$BootstrapClassLoaderProxy\");\n+        final Constructor constructor = bootstrapProxyClass.getDeclaredConstructor(URL.class);\n+        BOOTSTRAP_PROXY = (ClassLoader) constructor.newInstance(bootstrapURL);\n+\n+        final ClassLoader grandParent;\n+        if (isJavaBefore9()) {\n+          grandParent = null; // bootstrap\n+        } else {\n+          // platform classloader is parent of system in java 9+\n+          grandParent = getPlatformClassLoader();\n+        }\n+\n+        PARENT_CLASSLOADER = createDatadogClassLoader(\"shared.isolated\", bootstrapURL, grandParent);\n+      } catch (final Throwable ex) {\n+        log.error(\"Throwable thrown creating parent classloader\", ex);\n+      }\n+    }\n+  }\n+\n   private static synchronized void startDatadogAgent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fb30385b3d3627766d4790940baa762ba012a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1Njk2NA==", "bodyText": "I'm not sure.  Just following the comments in the class that said access to the classloader fields need to be synchronized.  I know at one point startDatadogAgent() and similar methods could have been called by multiple thread because of weird classloading situations.\nI think that might have been fixed with #1084 but the synchronized attributes were never removed so I don't know.", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r377756964", "createdAt": "2020-02-11T16:41:57Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -160,13 +163,38 @@ public void execute() {\n     }\n   }\n \n+  private static synchronized void createParentClassloader(final URL bootstrapURL) {\n+    if (PARENT_CLASSLOADER == null) {\n+      try {\n+        final Class<?> bootstrapProxyClass =\n+            ClassLoader.getSystemClassLoader()\n+                .loadClass(\"datadog.trace.bootstrap.DatadogClassLoader$BootstrapClassLoaderProxy\");\n+        final Constructor constructor = bootstrapProxyClass.getDeclaredConstructor(URL.class);\n+        BOOTSTRAP_PROXY = (ClassLoader) constructor.newInstance(bootstrapURL);\n+\n+        final ClassLoader grandParent;\n+        if (isJavaBefore9()) {\n+          grandParent = null; // bootstrap\n+        } else {\n+          // platform classloader is parent of system in java 9+\n+          grandParent = getPlatformClassLoader();\n+        }\n+\n+        PARENT_CLASSLOADER = createDatadogClassLoader(\"shared.isolated\", bootstrapURL, grandParent);\n+      } catch (final Throwable ex) {\n+        log.error(\"Throwable thrown creating parent classloader\", ex);\n+      }\n+    }\n+  }\n+\n   private static synchronized void startDatadogAgent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3MzU1OQ=="}, "originalCommit": {"oid": "42fb30385b3d3627766d4790940baa762ba012a0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3ODc4Ng==", "bodyText": "Yes, in this case, I think synchronized or some other lock is the right choice.\nIf we had any reads outside, the synchronized block we also need to make the field volatile, but I don't think we do.\nSince this is effectively a lazy singleton, the one other approach we could take is a holder class - like...\nclass AgentClassLoaderHolder {\nstatic final DatadogClassLoader loader = ...\n}\nThe main benefit of that approach is that the locking is handled implicitly through the JVM class init checking and gets optimized away once JIT-ted.  However, we're not accessing these fields enough for that to be a significant issue.\nAnd if there's any context that needs to be captured by the Holder class, this approach doesn't really work.\nIn short - for now, I think this is probably the right solution.", "url": "https://github.com/DataDog/dd-trace-java/pull/1199#discussion_r377878786", "createdAt": "2020-02-11T20:26:27Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -160,13 +163,38 @@ public void execute() {\n     }\n   }\n \n+  private static synchronized void createParentClassloader(final URL bootstrapURL) {\n+    if (PARENT_CLASSLOADER == null) {\n+      try {\n+        final Class<?> bootstrapProxyClass =\n+            ClassLoader.getSystemClassLoader()\n+                .loadClass(\"datadog.trace.bootstrap.DatadogClassLoader$BootstrapClassLoaderProxy\");\n+        final Constructor constructor = bootstrapProxyClass.getDeclaredConstructor(URL.class);\n+        BOOTSTRAP_PROXY = (ClassLoader) constructor.newInstance(bootstrapURL);\n+\n+        final ClassLoader grandParent;\n+        if (isJavaBefore9()) {\n+          grandParent = null; // bootstrap\n+        } else {\n+          // platform classloader is parent of system in java 9+\n+          grandParent = getPlatformClassLoader();\n+        }\n+\n+        PARENT_CLASSLOADER = createDatadogClassLoader(\"shared.isolated\", bootstrapURL, grandParent);\n+      } catch (final Throwable ex) {\n+        log.error(\"Throwable thrown creating parent classloader\", ex);\n+      }\n+    }\n+  }\n+\n   private static synchronized void startDatadogAgent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY3MzU1OQ=="}, "originalCommit": {"oid": "42fb30385b3d3627766d4790940baa762ba012a0"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 493, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}