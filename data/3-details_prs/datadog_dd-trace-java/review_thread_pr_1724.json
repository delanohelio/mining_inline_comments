{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MTg4ODA0", "number": 1724, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTozNDo1MFrOFWlXtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxNDo0MToyNFrOFmAdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjI1MjY4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTozNDo1MFrOIfqmSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjozMjo0N1rOIf8c7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NDY5Ng==", "bodyText": "This doesn't look correct. Should there be an if (null != throwable) { ... } else { ... } here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570074696", "createdAt": "2021-02-04T09:34:50Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_REQUEST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+public class HTTPPluginAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.This final Object stateInstance,\n+      @Advice.Argument(value = 2) final Object serverTransaction) {\n+    final AgentSpan span = startSpan(AXWAY_REQUEST);\n+    final AgentScope scope = activateSpan(span);\n+    span.setMeasured(true);\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, serverTransaction);\n+    DECORATE.onRequest(span, serverTransaction);\n+    return scope;\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void onExit(\n+      @Advice.Enter final AgentScope scope,\n+      @Advice.Argument(value = 2) final Object serverTransaction,\n+      @Advice.This final Object httpPlugin,\n+      // @Advice.Local(\"responseCode\") Integer responseCode,\n+      @Advice.Thrown final Throwable throwable) {\n+    if (scope == null) {\n+      return;\n+    }\n+    final AgentSpan span = scope.span();\n+    try {\n+      // manual DECORATE.onResponse(span, serverTransaction):\n+      // span.setTag(Tags.HTTP_STATUS, responseCode); //TODO\n+      DECORATE.onError(span, throwable);\n+      DECORATE.beforeFinish(span);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2NzIxNQ==", "bodyText": "Yes, it doesn't look correct, but it works. Check if (throwable != null) is here happening inside onError:\n\n  \n    \n      dd-trace-java/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/BaseDecorator.java\n    \n    \n         Line 104\n      in\n      38968b0\n    \n    \n    \n    \n\n        \n          \n           if (throwable != null) { \n        \n    \n  \n\n\nthis pattern used in other places with the assumption that null-check will be done inside onError. But I will add explicit check here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570367215", "createdAt": "2021-02-04T16:32:47Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_REQUEST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+public class HTTPPluginAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.This final Object stateInstance,\n+      @Advice.Argument(value = 2) final Object serverTransaction) {\n+    final AgentSpan span = startSpan(AXWAY_REQUEST);\n+    final AgentScope scope = activateSpan(span);\n+    span.setMeasured(true);\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, serverTransaction);\n+    DECORATE.onRequest(span, serverTransaction);\n+    return scope;\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void onExit(\n+      @Advice.Enter final AgentScope scope,\n+      @Advice.Argument(value = 2) final Object serverTransaction,\n+      @Advice.This final Object httpPlugin,\n+      // @Advice.Local(\"responseCode\") Integer responseCode,\n+      @Advice.Thrown final Throwable throwable) {\n+    if (scope == null) {\n+      return;\n+    }\n+    final AgentSpan span = scope.span();\n+    try {\n+      // manual DECORATE.onResponse(span, serverTransaction):\n+      // span.setTag(Tags.HTTP_STATUS, responseCode); //TODO\n+      DECORATE.onError(span, throwable);\n+      DECORATE.beforeFinish(span);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NDY5Ng=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjI1NTkxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTozNTozN1rOIfqoSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxOTo1MToxOVrOIgEpcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTIxMQ==", "bodyText": "Is it worth doing this with method handles?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570075211", "createdAt": "2021-02-04T09:35:37Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQzOTc4OA==", "bodyText": "since class \"com.vordel.dwe.http.ServerTransaction\" only available at runtime and I have to call private methods, I'm not sure it will worth it. I will have to use reflection + MethodHandles.lookup().unreflect() to call private method", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570439788", "createdAt": "2021-02-04T18:11:29Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTIxMQ=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUwMTQ4OQ==", "bodyText": "I've changed it to method handles.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570501489", "createdAt": "2021-02-04T19:51:19Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTIxMQ=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA0MTUzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoxNzo1MFrOIf7wAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoxNzo1MFrOIf7wAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM1NTcxMw==", "bodyText": "I don't think we need this since we can't actually verify the axway jars.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570355713", "createdAt": "2021-02-04T16:17:50Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "diffHunk": "@@ -0,0 +1,16 @@\n+muzzle {\n+  pass {\n+    coreJdk()\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA0ODkzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoxOToyM1rOIf70yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMDo0NzozN1rOIgGkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM1NjkzNw==", "bodyText": "I think this warrants a bigger comment.  If we need to revisit the instrumentation, how do we go about obtaining the jars and making it so we can verify the behavior?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570356937", "createdAt": "2021-02-04T16:19:23Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "diffHunk": "@@ -0,0 +1,16 @@\n+muzzle {\n+  pass {\n+    coreJdk()\n+  }\n+}\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+dependencies {\n+  //// Can't split jars from axway apigateway monolith:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3OTU3MQ==", "bodyText": "I was trying to do this at the beginning, but it didn't work.\nJars are are mostly frontend to native code and this native code doesn't run separately without licence. Moreover there is no component which you can run java -jar ... nor add to your classpath. If try to load any axway class it will be segmentation fault.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570379571", "createdAt": "2021-02-04T16:48:21Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "diffHunk": "@@ -0,0 +1,16 @@\n+muzzle {\n+  pass {\n+    coreJdk()\n+  }\n+}\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+dependencies {\n+  //// Can't split jars from axway apigateway monolith:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM1NjkzNw=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5NjE2Nw==", "bodyText": "please document the process as much as possible.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570396167", "createdAt": "2021-02-04T17:10:02Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "diffHunk": "@@ -0,0 +1,16 @@\n+muzzle {\n+  pass {\n+    coreJdk()\n+  }\n+}\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+dependencies {\n+  //// Can't split jars from axway apigateway monolith:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM1NjkzNw=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUzMzA2Mw==", "bodyText": "please review doc", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570533063", "createdAt": "2021-02-04T20:47:37Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/axway-api.gradle", "diffHunk": "@@ -0,0 +1,16 @@\n+muzzle {\n+  pass {\n+    coreJdk()\n+  }\n+}\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+dependencies {\n+  //// Can't split jars from axway apigateway monolith:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM1NjkzNw=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA2Mzc3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/test/groovy/datadog/trace/instrumentation/axway/AxwayAPITest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyMjoyOFrOIf79_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyMjoyOFrOIf79_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM1OTI5NQ==", "bodyText": "since this test is ignored and looks incomplete, I'd be OK with just dropping it from this initial PR", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570359295", "createdAt": "2021-02-04T16:22:28Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/test/groovy/datadog/trace/instrumentation/axway/AxwayAPITest.groovy", "diffHunk": "@@ -0,0 +1,34 @@\n+package datadog.trace.instrumentation.axway\n+\n+import datadog.trace.agent.test.base.HttpClientTest\n+import org.junit.Ignore\n+import spock.lang.Shared\n+import spock.lang.Timeout\n+\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA3Nzc1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyNTozM1rOIf8HKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMDoxMzoxOVrOIgFa-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2MTY0MQ==", "bodyText": "This doesn't seem to be reading incoming headers to propagate the trace?  Is this an acceptable tradeoff?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570361641", "createdAt": "2021-02-04T16:25:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_REQUEST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+public class HTTPPluginAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.This final Object stateInstance,\n+      @Advice.Argument(value = 2) final Object serverTransaction) {\n+    final AgentSpan span = startSpan(AXWAY_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUxNDE3MA==", "bodyText": "yes for now. I might need to change it in next PR", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570514170", "createdAt": "2021-02-04T20:13:19Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_REQUEST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+public class HTTPPluginAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.This final Object stateInstance,\n+      @Advice.Argument(value = 2) final Object serverTransaction) {\n+    final AgentSpan span = startSpan(AXWAY_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2MTY0MQ=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA4NjAxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyNzoxNFrOIf8MVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMDoxMDozOFrOIgFVcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2Mjk2Ng==", "bodyText": "What's the reason for using the super-super-class to get the method? Is this a static or instance method?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570362966", "createdAt": "2021-02-04T16:27:14Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5MDE2OA==", "bodyText": "Instance method:\npublic class Transaction implements IMetricsTransaction {\n  public native InetSocketAddress getLocalAddr();\n  public native InetSocketAddress getRemoteAddr();\n}\npublic abstract class HTTPTransaction extends Transaction {}\npublic class ServerTransaction extends HTTPTransaction {}\n\nI have instance of ServerTransaction and need to call getRemoteAddr from Transaction.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570390168", "createdAt": "2021-02-04T17:01:53Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2Mjk2Ng=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5NDczMA==", "bodyText": "OK, you don't need to access the superclass in that case - obj.getClass().getMethod(methodName) will work just as well because getMethod will consider all superclasses and superinterfaces when looking for the public method:\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getMethod-java.lang.String-java.lang.Class...-\n(this is different to getDeclaredMethod which only considers methods declared by the given class.)", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570394730", "createdAt": "2021-02-04T17:08:01Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2Mjk2Ng=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUxMjc1NQ==", "bodyText": "Yes.\nAnyway, I've changed it to method handles:)", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570512755", "createdAt": "2021-02-04T20:10:38Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually\n+    return 0;\n+  }\n+\n+  public static Object invokeNoArgDeclaredMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getDeclaredMethod(methodName);\n+      m.setAccessible(true);\n+      Object v = m.invoke(obj);\n+      log.debug(\"{}(): {}\", methodName, v);\n+      return v;\n+    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+      log.debug(\"Can't find method '\" + methodName + \"' in object \" + obj, e);\n+    }\n+    return \"\";\n+  }\n+\n+  public static Object invokeNoArgsSuperSuperClassMethod(Object obj, String methodName) {\n+    try {\n+      Method m = obj.getClass().getSuperclass().getSuperclass().getMethod(methodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2Mjk2Ng=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA4ODEwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyNzozNlrOIf8NnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyNzozNlrOIf8NnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2MzI5Mw==", "bodyText": "constant?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570363293", "createdAt": "2021-02-04T16:27:36Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.HOST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.PORT;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import net.bytebuddy.asm.Advice;\n+import org.slf4j.Logger;\n+\n+public class StateAdvice {\n+  public static final Logger log = org.slf4j.LoggerFactory.getLogger(StateAdvice.class);\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(@Advice.This final Object stateInstance) {\n+    final AgentSpan span = startSpan(\"axway.trytransaction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDA5OTUyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyOTo1MlrOIf8Uug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjoyOTo1MlrOIf8Uug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2NTExNA==", "bodyText": "Advice classes shouldn't have fields, nor should they be logging like this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570365114", "createdAt": "2021-02-04T16:29:52Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.HOST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.PORT;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import net.bytebuddy.asm.Advice;\n+import org.slf4j.Logger;\n+\n+public class StateAdvice {\n+  public static final Logger log = org.slf4j.LoggerFactory.getLogger(StateAdvice.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDEwOTI2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjozMjowMVrOIf8a4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxNDo0MzowOFrOI23HDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2NjY4OQ==", "bodyText": "Please add a comment (for someone that is unfamiliar with axway) indicating what this advice is for and why it's useful to the user.  The HTTPPluginAdvice seems fairly straightforward, but I don't understand how this relates to it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570366689", "createdAt": "2021-02-04T16:32:01Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.HOST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.PORT;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import net.bytebuddy.asm.Advice;\n+import org.slf4j.Logger;\n+\n+public class StateAdvice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUyNzMyMg==", "bodyText": "Added above^, please reveiw", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570527322", "createdAt": "2021-02-04T20:37:01Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.HOST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.PORT;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import net.bytebuddy.asm.Advice;\n+import org.slf4j.Logger;\n+\n+public class StateAdvice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2NjY4OQ=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5Njk0MQ==", "bodyText": "Yes, I think adding the comment was a good idea.  Although, I honestly think it applies to all instrumentation not just axway.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594396941", "createdAt": "2021-03-15T14:43:08Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.HOST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.PORT;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import java.lang.reflect.Field;\n+import net.bytebuddy.asm.Advice;\n+import org.slf4j.Logger;\n+\n+public class StateAdvice {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2NjY4OQ=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDEyMTQxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/test/groovy/datadog/trace/instrumentation/axway/AxwayAPITest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjozNDo0MlrOIf8ikA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzo0NDoyNVrOIf_tWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2ODY1Ng==", "bodyText": "this class doesn't seem useful.  delete?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570368656", "createdAt": "2021-02-04T16:34:42Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/axway-api/src/test/groovy/datadog/trace/instrumentation/axway/AxwayAPITest.groovy", "diffHunk": "@@ -0,0 +1,34 @@\n+package datadog.trace.instrumentation.axway\n+\n+import datadog.trace.agent.test.base.HttpClientTest\n+import org.junit.Ignore\n+import spock.lang.Shared\n+import spock.lang.Timeout\n+\n+@Ignore\n+@Timeout(5)\n+class AxwayAPITest extends HttpClientTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQyMDU3MA==", "bodyText": "ok", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570420570", "createdAt": "2021-02-04T17:44:25Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/test/groovy/datadog/trace/instrumentation/axway/AxwayAPITest.groovy", "diffHunk": "@@ -0,0 +1,34 @@\n+package datadog.trace.instrumentation.axway\n+\n+import datadog.trace.agent.test.base.HttpClientTest\n+import org.junit.Ignore\n+import spock.lang.Shared\n+import spock.lang.Timeout\n+\n+@Ignore\n+@Timeout(5)\n+class AxwayAPITest extends HttpClientTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM2ODY1Ng=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDE0MTA1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjozODoyMFrOIf8uVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODoyNjoxMFrOIgBdHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3MTY3MQ==", "bodyText": "where is the status set? - the manual line in the advice appears commented out", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570371671", "createdAt": "2021-02-04T16:38:20Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ0OTE4MQ==", "bodyText": "This will be done in next PR.\ngetting local variable by name doesn't work for axway by some reason reason", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570449181", "createdAt": "2021-02-04T18:26:10Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    return invokeNoArgDeclaredMethod(serverTransaction, \"getMethod\").toString();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter((URI) invokeNoArgDeclaredMethod(serverTransaction, \"getURI\"));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return ((InetSocketAddress)\n+            invokeNoArgsSuperSuperClassMethod(serverTransaction, \"getLocalAddr\"))\n+        .getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // done manually", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3MTY3MQ=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDE0NjkzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjozOTozOVrOIf8yJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxODozNTo0NFrOIgB01g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3MjY0NA==", "bodyText": "if you put @Slf4j on the class then lombok will add this for you", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570372644", "createdAt": "2021-02-04T16:39:39Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQ1NTI1NA==", "bodyText": "I used it, because I was logging from Advice class, but i will change it", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570455254", "createdAt": "2021-02-04T18:35:44Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import org.slf4j.Logger;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final String METHOD = \"method\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final Logger log =\n+      org.slf4j.LoggerFactory.getLogger(AxwayHTTPPluginDecorator.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3MjY0NA=="}, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NDE1Njc1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjo0MTo0N1rOIf84bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjo0MTo0N1rOIf84bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3NDI1Mg==", "bodyText": "this parameter appears unused and could be removed", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570374252", "createdAt": "2021-02-04T16:41:47Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_REQUEST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+public class HTTPPluginAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(\n+      @Advice.This final Object stateInstance,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38968b0cf420914302634985addba97663e524a4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzI4OTAwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwOTo1ODo1M1rOIgaDUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQwOTo1ODo1M1rOIgaDUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg1MjE3Ng==", "bodyText": "minor typo, should be AXWAY_TRY_TRANSACTION", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570852176", "createdAt": "2021-02-05T09:58:53Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzMwMzg4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowMjo0MlrOIgaMdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowMjo0MlrOIgaMdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg1NDUxNg==", "bodyText": "make private since it's only used by this class", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570854516", "createdAt": "2021-02-05T10:02:42Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzMwNjc2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowMzozM1rOIgaONw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowMzozM1rOIgaONw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg1NDk2Nw==", "bodyText": "make private since it's only used by this class", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570854967", "createdAt": "2021-02-05T10:03:33Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);\n+    }\n+    return URI.create(\"\");\n+  }\n+\n+  private static InetSocketAddress getRemoteAddr(Object obj) {\n+    try {\n+      return (InetSocketAddress) getRemoteAddr_mh.invoke(obj);\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't com.vordel.dwe.http.ServerTransaction::getRemoteAddr() : \", throwable);\n+    }\n+    return new InetSocketAddress(0);\n+  }\n+\n+  public static void setTagFromField(AgentSpan span, String tag, Object obj, String field) {\n+    span.setTag(tag, getFieldValue(obj, field).toString());\n+  }\n+\n+  public static Object getFieldValue(Object obj, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzMxMjAxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowNDo1OFrOIgaRgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowNDo1OFrOIgaRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg1NTgwOQ==", "bodyText": "Missing invoke in log text?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570855809", "createdAt": "2021-02-05T10:04:58Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);\n+    }\n+    return URI.create(\"\");\n+  }\n+\n+  private static InetSocketAddress getRemoteAddr(Object obj) {\n+    try {\n+      return (InetSocketAddress) getRemoteAddr_mh.invoke(obj);\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't com.vordel.dwe.http.ServerTransaction::getRemoteAddr() : \", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzMyMDkxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDowNzoxMVrOIgaW3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNTo1OTo1NFrOIgndMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg1NzE4Mg==", "bodyText": "log.debug(\"Can't invoke 'getUri' in object {}\", obj, e);  would be better", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570857182", "createdAt": "2021-02-05T10:07:11Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA3MTc5NQ==", "bodyText": "I thought that will call debug(String format, Object... arguments); instead of `debug(String msg, Throwable t);, but you are right:  it still prints stack trace.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r571071795", "createdAt": "2021-02-05T15:59:54Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg1NzE4Mg=="}, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzM0MzIwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDoxMjo0MVrOIgaj0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMzo1OToxNFrOIgiMrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg2MDQ5Ng==", "bodyText": "Looking up the field handle on every call will be expensive, because it involves various checks - could these field handles be cached? If we know which classes are involved then we could always do this in the static initializer like we're doing with the method handles.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570860496", "createdAt": "2021-02-05T10:12:41Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);\n+    }\n+    return URI.create(\"\");\n+  }\n+\n+  private static InetSocketAddress getRemoteAddr(Object obj) {\n+    try {\n+      return (InetSocketAddress) getRemoteAddr_mh.invoke(obj);\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't com.vordel.dwe.http.ServerTransaction::getRemoteAddr() : \", throwable);\n+    }\n+    return new InetSocketAddress(0);\n+  }\n+\n+  public static void setTagFromField(AgentSpan span, String tag, Object obj, String field) {\n+    span.setTag(tag, getFieldValue(obj, field).toString());\n+  }\n+\n+  public static Object getFieldValue(Object obj, String fieldName) {\n+    try {\n+      Field field = obj.getClass().getDeclaredField(fieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk4NTY0Ng==", "bodyText": "Yes, caching the field would be preferable.  That will also help performance wise, since a Field object that is used repeatedly will have a de-reflection class generated to make the reflection fast.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570985646", "createdAt": "2021-02-05T13:59:14Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);\n+    }\n+    return URI.create(\"\");\n+  }\n+\n+  private static InetSocketAddress getRemoteAddr(Object obj) {\n+    try {\n+      return (InetSocketAddress) getRemoteAddr_mh.invoke(obj);\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't com.vordel.dwe.http.ServerTransaction::getRemoteAddr() : \", throwable);\n+    }\n+    return new InetSocketAddress(0);\n+  }\n+\n+  public static void setTagFromField(AgentSpan span, String tag, Object obj, String field) {\n+    span.setTag(tag, getFieldValue(obj, field).toString());\n+  }\n+\n+  public static Object getFieldValue(Object obj, String fieldName) {\n+    try {\n+      Field field = obj.getClass().getDeclaredField(fieldName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg2MDQ5Ng=="}, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzM1NTc0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDoxNjowNVrOIgarjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDoxNjowNVrOIgarjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg2MjQ3Ng==", "bodyText": "log.debug(\"Can't find field '{}': \", fieldName, e);\n... maybe also mention the class we were looking in?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570862476", "createdAt": "2021-02-05T10:16:05Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't invoke com.vordel.dwe.http.ServerTransaction::getMethod(): \", throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    return new DefaultURIDataAdapter(getUri(serverTransaction));\n+  }\n+\n+  @Override\n+  protected String peerHostIP(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getHostString();\n+  }\n+\n+  @Override\n+  protected int peerPort(Object serverTransaction) {\n+    return getRemoteAddr(serverTransaction).getPort();\n+  }\n+\n+  @Override\n+  protected int status(final Object serverTransaction) {\n+    // TODO will be done manually\n+    return 0;\n+  }\n+\n+  public static URI getUri(Object obj) {\n+    try {\n+      return (URI) getURI_mh.invoke(obj);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke 'getUri' in object \" + obj, e);\n+    }\n+    return URI.create(\"\");\n+  }\n+\n+  private static InetSocketAddress getRemoteAddr(Object obj) {\n+    try {\n+      return (InetSocketAddress) getRemoteAddr_mh.invoke(obj);\n+    } catch (Throwable throwable) {\n+      log.debug(\"Can't com.vordel.dwe.http.ServerTransaction::getRemoteAddr() : \", throwable);\n+    }\n+    return new InetSocketAddress(0);\n+  }\n+\n+  public static void setTagFromField(AgentSpan span, String tag, Object obj, String field) {\n+    span.setTag(tag, getFieldValue(obj, field).toString());\n+  }\n+\n+  public static Object getFieldValue(Object obj, String fieldName) {\n+    try {\n+      Field field = obj.getClass().getDeclaredField(fieldName);\n+      field.setAccessible(true);\n+      Object v = field.get(obj);\n+      log.debug(\"field '{}': {}\", fieldName, v);\n+      return v;\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      log.debug(\"Can't find field '\" + fieldName + \"': \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzM3MDkyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDoxOTo0OFrOIga0ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMDoxOTo0OFrOIga0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg2NDc5OA==", "bodyText": "These 4 methods could be moved into a DECORATE.onTransaction method in the decorator - then you could keep the setTagFromField method private.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570864798", "createdAt": "2021-02-05T10:19:48Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/StateAdvice.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_TRY_TRAMSACTION;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.HOST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.PORT;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.setTagFromField;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import net.bytebuddy.asm.Advice;\n+\n+/**\n+ * Axway apigateway server gathers responses from 1 or more services, aggregates them and sends\n+ * response(s) to client(s). Apigateway is just reverse proxy. com.vordel.circuit.net.State class\n+ * represents connection(s) and \"state\" of communication to one or more of the services from which\n+ * axway apigateway needs to get reply to prepare aggregates response to customer. This\n+ * instrumentation intends to see to which services apigateway goes to prepare it response.\n+ */\n+public class StateAdvice {\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(@Advice.This final Object stateInstance) {\n+    final AgentSpan span = startSpan(AXWAY_TRY_TRAMSACTION);\n+    final AgentScope scope = activateSpan(span);\n+    span.setMeasured(true);\n+    // manually DECORATE.onRequest(span, stateInstance) :\n+    setTagFromField(span, Tags.HTTP_METHOD, stateInstance, \"verb\");\n+    setTagFromField(span, Tags.HTTP_URL, stateInstance, \"uri\");\n+    setTagFromField(span, Tags.PEER_HOSTNAME, stateInstance, HOST);\n+    setTagFromField(span, Tags.PEER_PORT, stateInstance, PORT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODE2MjYwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNDowMDozOFrOIgiQRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNDowMDozOFrOIgiQRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk4NjU2Nw==", "bodyText": "It would be to make these all final -- then the JIT will be able to constant propagate the MH and might have easier time inlining through it as well.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570986567", "createdAt": "2021-02-05T14:00:38Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODE4NTQ4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNDowNjo0NVrOIgie6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNzowNToyMlrOIgqJ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk5MDMxNQ==", "bodyText": "I believe the preferred way to do this with a MethodHandle is...\nreturn (String)methodHandle.invoke(serverTransaction);\nThe MethodHandle.invoke and invokeExact are magic signature polymorphic methods, so they adapt to accept the type of their arguments and return the type specified by the cast of the return type.\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/invoke/MethodHandle.html#invokeExact-java.lang.Object...-\nIn this case, since we cannot statically reference the arg type, you probably do need invoke rather than invokeExact, but I believe it is still safe to cast the return.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570990315", "createdAt": "2021-02-05T14:06:45Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTExNjAyMQ==", "bodyText": "Yes, I think there is no way to use invokeExact without having an exact type at compile time or is it still possible ?\nthis doesn't work(also return compile time generic which I can't narrow to required type at compile time):\n(String) getMethod_mh.invokeExact(Class.forName(\"com.vordel.dwe.http.ServerTransaction\")\n    .cast(serverTransaction));", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r571116021", "createdAt": "2021-02-05T17:05:22Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final String HOST = \"host\";\n+  public static final String PORT = \"port\";\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.createConstant(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRAMSACTION =\n+      UTF8BytesString.createConstant(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+  private static MethodHandle getRemoteAddr_mh;\n+  private static MethodHandle getMethod_mh;\n+  private static MethodHandle getURI_mh;\n+\n+  static {\n+    try {\n+      Class<?> classServerTransaction = Class.forName(\"com.vordel.dwe.http.ServerTransaction\");\n+      getRemoteAddr_mh =\n+          lookup.findVirtual(\n+              classServerTransaction, \"getRemoteAddr\", methodType(InetSocketAddress.class));\n+      getMethod_mh =\n+          lookup.findVirtual(classServerTransaction, \"getMethod\", methodType(String.class));\n+\n+      Method m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      getURI_mh = lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find 'com.vordel.dwe.http.ServerTransaction::getRemoteAddr' method: \", e);\n+    }\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-api\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-api\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return getMethod_mh.invoke(serverTransaction).toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk5MDMxNQ=="}, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODE5MTkwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNDowODoxOFrOIgiirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNDowODoxOFrOIgiirA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDk5MTI3Ng==", "bodyText": "If / when, we responseCode working we should make sure to use the Http code boxing cache.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r570991276", "createdAt": "2021-02-05T14:08:18Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/HTTPPluginAdvice.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.AXWAY_REQUEST;\n+import static datadog.trace.instrumentation.axway.AxwayHTTPPluginDecorator.DECORATE;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import net.bytebuddy.asm.Advice;\n+\n+public class HTTPPluginAdvice {\n+\n+  @Advice.OnMethodEnter(suppress = Throwable.class)\n+  public static AgentScope onEnter(@Advice.Argument(value = 2) final Object serverTransaction) {\n+    final AgentSpan span = startSpan(AXWAY_REQUEST);\n+    final AgentScope scope = activateSpan(span);\n+    span.setMeasured(true);\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, serverTransaction);\n+    DECORATE.onRequest(span, serverTransaction);\n+    return scope;\n+  }\n+\n+  @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)\n+  public static void onExit(\n+      @Advice.Enter final AgentScope scope,\n+      // TODO getting local variable by name doens't work for axway\n+      // @Advice.Local(\"responseCode\") Integer responseCode,\n+      @Advice.Thrown final Throwable throwable) {\n+    if (scope == null) {\n+      return;\n+    }\n+    final AgentSpan span = scope.span();\n+    try {\n+      // manual DECORATE.onResponse(span, serverTransaction):\n+      // span.setTag(Tags.HTTP_STATUS, responseCode); //TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f76e569463724da273b663b635ebebde0d3a3de"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1Mzk2Mjc2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxNDozODo0NlrOI224NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQyMDoxNToxOFrOI3GuKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5MzE0MA==", "bodyText": "This form of forName will initialize the class.  It is safer to use the other forName(name, initialized, ClassLoader) instead with initialized=false.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594393140", "createdAt": "2021-03-15T14:38:46Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.create(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRANSACTION =\n+      UTF8BytesString.create(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+  private static final String SERVERTRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  private static final Class<?> classServerTransaction;\n+  private static final MethodHandle getRemoteAddr_mh;\n+  private static final MethodHandle getMethod_mh;\n+  private static final MethodHandle getURI_mh;\n+\n+  private static final String STATE_CLASSNAME = \"com.vordel.circuit.net.State\";\n+  private static final Class<?> classState;\n+  private static final MethodHandle hostField_mh;\n+  private static final MethodHandle portField_mh;\n+  private static final MethodHandle methodField_mh;\n+  private static final MethodHandle uriField_mh;\n+\n+  static final String SERVER_TRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  static final Class<Object> SERVER_TRANSACTION_CLASS = getServerTransactionClass();\n+\n+  private static Class<Object> getServerTransactionClass() {\n+    try {\n+      return (Class<Object>) Class.forName(SERVER_TRANSACTION_CLASSNAME);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\"Can't get ServerTransaction class name\", e);\n+    }\n+    return null;\n+  }\n+\n+  static {\n+    classServerTransaction = initClass(SERVERTRANSACTION_CLASSNAME);\n+    getRemoteAddr_mh =\n+        initNoArgServerTransactionMethodHandle(\"getRemoteAddr\", InetSocketAddress.class);\n+    getMethod_mh = initNoArgServerTransactionMethodHandle(\"getMethod\", String.class);\n+    getURI_mh = initGetURI();\n+\n+    classState = initClass(STATE_CLASSNAME);\n+    hostField_mh = initStateFieldGetter(\"host\");\n+    portField_mh = initStateFieldGetter(\"port\");\n+    methodField_mh = initStateFieldGetter(\"verb\");\n+    uriField_mh = initStateFieldGetter(\"uri\");\n+  }\n+\n+  private static Class<?> initClass(final String name) {\n+    try {\n+      return Class.forName(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994c629b375cf0745a13100a1722a2d237af3900"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY1MjcxNQ==", "bodyText": "Thx. Updated", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594652715", "createdAt": "2021-03-15T20:15:18Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.create(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRANSACTION =\n+      UTF8BytesString.create(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+  private static final String SERVERTRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  private static final Class<?> classServerTransaction;\n+  private static final MethodHandle getRemoteAddr_mh;\n+  private static final MethodHandle getMethod_mh;\n+  private static final MethodHandle getURI_mh;\n+\n+  private static final String STATE_CLASSNAME = \"com.vordel.circuit.net.State\";\n+  private static final Class<?> classState;\n+  private static final MethodHandle hostField_mh;\n+  private static final MethodHandle portField_mh;\n+  private static final MethodHandle methodField_mh;\n+  private static final MethodHandle uriField_mh;\n+\n+  static final String SERVER_TRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  static final Class<Object> SERVER_TRANSACTION_CLASS = getServerTransactionClass();\n+\n+  private static Class<Object> getServerTransactionClass() {\n+    try {\n+      return (Class<Object>) Class.forName(SERVER_TRANSACTION_CLASSNAME);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\"Can't get ServerTransaction class name\", e);\n+    }\n+    return null;\n+  }\n+\n+  static {\n+    classServerTransaction = initClass(SERVERTRANSACTION_CLASSNAME);\n+    getRemoteAddr_mh =\n+        initNoArgServerTransactionMethodHandle(\"getRemoteAddr\", InetSocketAddress.class);\n+    getMethod_mh = initNoArgServerTransactionMethodHandle(\"getMethod\", String.class);\n+    getURI_mh = initGetURI();\n+\n+    classState = initClass(STATE_CLASSNAME);\n+    hostField_mh = initStateFieldGetter(\"host\");\n+    portField_mh = initStateFieldGetter(\"port\");\n+    methodField_mh = initStateFieldGetter(\"verb\");\n+    uriField_mh = initStateFieldGetter(\"uri\");\n+  }\n+\n+  private static Class<?> initClass(final String name) {\n+    try {\n+      return Class.forName(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5MzE0MA=="}, "originalCommit": {"oid": "994c629b375cf0745a13100a1722a2d237af3900"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1Mzk3NDk4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxNDo0MDo1NVrOI22_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxOTo0ODowNVrOI3FtuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5NTA2Nw==", "bodyText": "Can we not just return null?  Or does, the caller not support that?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594395067", "createdAt": "2021-03-15T14:40:55Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.create(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRANSACTION =\n+      UTF8BytesString.create(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+  private static final String SERVERTRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  private static final Class<?> classServerTransaction;\n+  private static final MethodHandle getRemoteAddr_mh;\n+  private static final MethodHandle getMethod_mh;\n+  private static final MethodHandle getURI_mh;\n+\n+  private static final String STATE_CLASSNAME = \"com.vordel.circuit.net.State\";\n+  private static final Class<?> classState;\n+  private static final MethodHandle hostField_mh;\n+  private static final MethodHandle portField_mh;\n+  private static final MethodHandle methodField_mh;\n+  private static final MethodHandle uriField_mh;\n+\n+  static final String SERVER_TRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  static final Class<Object> SERVER_TRANSACTION_CLASS = getServerTransactionClass();\n+\n+  private static Class<Object> getServerTransactionClass() {\n+    try {\n+      return (Class<Object>) Class.forName(SERVER_TRANSACTION_CLASSNAME);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\"Can't get ServerTransaction class name\", e);\n+    }\n+    return null;\n+  }\n+\n+  static {\n+    classServerTransaction = initClass(SERVERTRANSACTION_CLASSNAME);\n+    getRemoteAddr_mh =\n+        initNoArgServerTransactionMethodHandle(\"getRemoteAddr\", InetSocketAddress.class);\n+    getMethod_mh = initNoArgServerTransactionMethodHandle(\"getMethod\", String.class);\n+    getURI_mh = initGetURI();\n+\n+    classState = initClass(STATE_CLASSNAME);\n+    hostField_mh = initStateFieldGetter(\"host\");\n+    portField_mh = initStateFieldGetter(\"port\");\n+    methodField_mh = initStateFieldGetter(\"verb\");\n+    uriField_mh = initStateFieldGetter(\"uri\");\n+  }\n+\n+  private static Class<?> initClass(final String name) {\n+    try {\n+      return Class.forName(name);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\n+          \"Can't find class '{}': Axaway integration failed. \", SERVERTRANSACTION_CLASSNAME, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initNoArgServerTransactionMethodHandle(String name, Class<?> rtype) {\n+    try {\n+      return lookup.findVirtual(classServerTransaction, name, methodType(rtype));\n+    } catch (NoSuchMethodException | IllegalAccessException e) {\n+      log.debug(\"Can't find method handler '{}' \", name, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initGetURI() {\n+    Method m = null;\n+    try {\n+      m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      return lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't unreflect method '{}': \", m, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initStateFieldGetter(String fieldName) {\n+    Field field = null;\n+    MethodHandle mh = null;\n+    try {\n+      field = classState.getDeclaredField(fieldName);\n+      field.setAccessible(true);\n+      mh = lookup.unreflectGetter(field);\n+      log.debug(\n+          \"Initialized field '{}' of class '{}' unreflected to {}\", fieldName, classState, mh);\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      log.debug(\n+          \"Can't find and unreflect declared field '{}' with name '{}' for class '{}' to mh: '{}'\",\n+          field,\n+          fieldName,\n+          classState,\n+          mh,\n+          e);\n+    }\n+    return mh;\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-http\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-http\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return (String) getMethod_mh.invoke(serverTransaction);\n+    } catch (Throwable throwable) {\n+      log.debug(\n+          \"Can't invoke invoke '{}' on instance '{}' of class '{}'\",\n+          getMethod_mh,\n+          serverTransaction,\n+          serverTransaction.getClass(),\n+          throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    try {\n+      return new DefaultURIDataAdapter((URI) getURI_mh.invoke(serverTransaction));\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke '{}}' on '{}': \", getURI_mh, serverTransaction, e);\n+    }\n+    return new DefaultURIDataAdapter(URI.create(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994c629b375cf0745a13100a1722a2d237af3900"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYzNjIxNw==", "bodyText": "yes: https://github.com/DataDog/dd-trace-java/blob/master/dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/HttpServerDecorator.java#L64", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594636217", "createdAt": "2021-03-15T19:48:05Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.create(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRANSACTION =\n+      UTF8BytesString.create(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+  private static final String SERVERTRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  private static final Class<?> classServerTransaction;\n+  private static final MethodHandle getRemoteAddr_mh;\n+  private static final MethodHandle getMethod_mh;\n+  private static final MethodHandle getURI_mh;\n+\n+  private static final String STATE_CLASSNAME = \"com.vordel.circuit.net.State\";\n+  private static final Class<?> classState;\n+  private static final MethodHandle hostField_mh;\n+  private static final MethodHandle portField_mh;\n+  private static final MethodHandle methodField_mh;\n+  private static final MethodHandle uriField_mh;\n+\n+  static final String SERVER_TRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  static final Class<Object> SERVER_TRANSACTION_CLASS = getServerTransactionClass();\n+\n+  private static Class<Object> getServerTransactionClass() {\n+    try {\n+      return (Class<Object>) Class.forName(SERVER_TRANSACTION_CLASSNAME);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\"Can't get ServerTransaction class name\", e);\n+    }\n+    return null;\n+  }\n+\n+  static {\n+    classServerTransaction = initClass(SERVERTRANSACTION_CLASSNAME);\n+    getRemoteAddr_mh =\n+        initNoArgServerTransactionMethodHandle(\"getRemoteAddr\", InetSocketAddress.class);\n+    getMethod_mh = initNoArgServerTransactionMethodHandle(\"getMethod\", String.class);\n+    getURI_mh = initGetURI();\n+\n+    classState = initClass(STATE_CLASSNAME);\n+    hostField_mh = initStateFieldGetter(\"host\");\n+    portField_mh = initStateFieldGetter(\"port\");\n+    methodField_mh = initStateFieldGetter(\"verb\");\n+    uriField_mh = initStateFieldGetter(\"uri\");\n+  }\n+\n+  private static Class<?> initClass(final String name) {\n+    try {\n+      return Class.forName(name);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\n+          \"Can't find class '{}': Axaway integration failed. \", SERVERTRANSACTION_CLASSNAME, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initNoArgServerTransactionMethodHandle(String name, Class<?> rtype) {\n+    try {\n+      return lookup.findVirtual(classServerTransaction, name, methodType(rtype));\n+    } catch (NoSuchMethodException | IllegalAccessException e) {\n+      log.debug(\"Can't find method handler '{}' \", name, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initGetURI() {\n+    Method m = null;\n+    try {\n+      m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      return lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't unreflect method '{}': \", m, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initStateFieldGetter(String fieldName) {\n+    Field field = null;\n+    MethodHandle mh = null;\n+    try {\n+      field = classState.getDeclaredField(fieldName);\n+      field.setAccessible(true);\n+      mh = lookup.unreflectGetter(field);\n+      log.debug(\n+          \"Initialized field '{}' of class '{}' unreflected to {}\", fieldName, classState, mh);\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      log.debug(\n+          \"Can't find and unreflect declared field '{}' with name '{}' for class '{}' to mh: '{}'\",\n+          field,\n+          fieldName,\n+          classState,\n+          mh,\n+          e);\n+    }\n+    return mh;\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-http\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-http\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return (String) getMethod_mh.invoke(serverTransaction);\n+    } catch (Throwable throwable) {\n+      log.debug(\n+          \"Can't invoke invoke '{}' on instance '{}' of class '{}'\",\n+          getMethod_mh,\n+          serverTransaction,\n+          serverTransaction.getClass(),\n+          throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    try {\n+      return new DefaultURIDataAdapter((URI) getURI_mh.invoke(serverTransaction));\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke '{}}' on '{}': \", getURI_mh, serverTransaction, e);\n+    }\n+    return new DefaultURIDataAdapter(URI.create(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5NTA2Nw=="}, "originalCommit": {"oid": "994c629b375cf0745a13100a1722a2d237af3900"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc1Mzk3NzgxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxNDo0MToyNFrOI23BXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xNVQxOTo1Nzo1MVrOI3GGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5NTQ4Ng==", "bodyText": "If this happens, should we stop trying to the URL extraction?", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594395486", "createdAt": "2021-03-15T14:41:24Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.create(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRANSACTION =\n+      UTF8BytesString.create(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+  private static final String SERVERTRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  private static final Class<?> classServerTransaction;\n+  private static final MethodHandle getRemoteAddr_mh;\n+  private static final MethodHandle getMethod_mh;\n+  private static final MethodHandle getURI_mh;\n+\n+  private static final String STATE_CLASSNAME = \"com.vordel.circuit.net.State\";\n+  private static final Class<?> classState;\n+  private static final MethodHandle hostField_mh;\n+  private static final MethodHandle portField_mh;\n+  private static final MethodHandle methodField_mh;\n+  private static final MethodHandle uriField_mh;\n+\n+  static final String SERVER_TRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  static final Class<Object> SERVER_TRANSACTION_CLASS = getServerTransactionClass();\n+\n+  private static Class<Object> getServerTransactionClass() {\n+    try {\n+      return (Class<Object>) Class.forName(SERVER_TRANSACTION_CLASSNAME);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\"Can't get ServerTransaction class name\", e);\n+    }\n+    return null;\n+  }\n+\n+  static {\n+    classServerTransaction = initClass(SERVERTRANSACTION_CLASSNAME);\n+    getRemoteAddr_mh =\n+        initNoArgServerTransactionMethodHandle(\"getRemoteAddr\", InetSocketAddress.class);\n+    getMethod_mh = initNoArgServerTransactionMethodHandle(\"getMethod\", String.class);\n+    getURI_mh = initGetURI();\n+\n+    classState = initClass(STATE_CLASSNAME);\n+    hostField_mh = initStateFieldGetter(\"host\");\n+    portField_mh = initStateFieldGetter(\"port\");\n+    methodField_mh = initStateFieldGetter(\"verb\");\n+    uriField_mh = initStateFieldGetter(\"uri\");\n+  }\n+\n+  private static Class<?> initClass(final String name) {\n+    try {\n+      return Class.forName(name);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\n+          \"Can't find class '{}': Axaway integration failed. \", SERVERTRANSACTION_CLASSNAME, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initNoArgServerTransactionMethodHandle(String name, Class<?> rtype) {\n+    try {\n+      return lookup.findVirtual(classServerTransaction, name, methodType(rtype));\n+    } catch (NoSuchMethodException | IllegalAccessException e) {\n+      log.debug(\"Can't find method handler '{}' \", name, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initGetURI() {\n+    Method m = null;\n+    try {\n+      m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      return lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't unreflect method '{}': \", m, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initStateFieldGetter(String fieldName) {\n+    Field field = null;\n+    MethodHandle mh = null;\n+    try {\n+      field = classState.getDeclaredField(fieldName);\n+      field.setAccessible(true);\n+      mh = lookup.unreflectGetter(field);\n+      log.debug(\n+          \"Initialized field '{}' of class '{}' unreflected to {}\", fieldName, classState, mh);\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      log.debug(\n+          \"Can't find and unreflect declared field '{}' with name '{}' for class '{}' to mh: '{}'\",\n+          field,\n+          fieldName,\n+          classState,\n+          mh,\n+          e);\n+    }\n+    return mh;\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-http\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-http\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return (String) getMethod_mh.invoke(serverTransaction);\n+    } catch (Throwable throwable) {\n+      log.debug(\n+          \"Can't invoke invoke '{}' on instance '{}' of class '{}'\",\n+          getMethod_mh,\n+          serverTransaction,\n+          serverTransaction.getClass(),\n+          throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    try {\n+      return new DefaultURIDataAdapter((URI) getURI_mh.invoke(serverTransaction));\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke '{}}' on '{}': \", getURI_mh, serverTransaction, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "994c629b375cf0745a13100a1722a2d237af3900"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY0MjQ2MA==", "bodyText": "I think this exception should never happen. At the point we instrumenting ServerTransaction it should have some valid URI behind it: otherwise it wouldn't be able to reach the server where we instrumenting it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1724#discussion_r594642460", "createdAt": "2021-03-15T19:57:51Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/axway-api/src/main/java/datadog/trace/instrumentation/axway/AxwayHTTPPluginDecorator.java", "diffHunk": "@@ -0,0 +1,236 @@\n+package datadog.trace.instrumentation.axway;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.DefaultURIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import lombok.extern.slf4j.Slf4j;\n+\n+// request = is com.vordel.circuit.net.State,  connection = com.vordel.dwe.http.ServerTransaction\n+@Slf4j\n+public class AxwayHTTPPluginDecorator extends HttpServerDecorator<Object, Object, Object> {\n+  public static final CharSequence AXWAY_REQUEST = UTF8BytesString.create(\"axway.request\");\n+  public static final CharSequence AXWAY_TRY_TRANSACTION =\n+      UTF8BytesString.create(\"axway.trytransaction\");\n+\n+  public static final AxwayHTTPPluginDecorator DECORATE = new AxwayHTTPPluginDecorator();\n+\n+  private static final MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n+  private static final String SERVERTRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  private static final Class<?> classServerTransaction;\n+  private static final MethodHandle getRemoteAddr_mh;\n+  private static final MethodHandle getMethod_mh;\n+  private static final MethodHandle getURI_mh;\n+\n+  private static final String STATE_CLASSNAME = \"com.vordel.circuit.net.State\";\n+  private static final Class<?> classState;\n+  private static final MethodHandle hostField_mh;\n+  private static final MethodHandle portField_mh;\n+  private static final MethodHandle methodField_mh;\n+  private static final MethodHandle uriField_mh;\n+\n+  static final String SERVER_TRANSACTION_CLASSNAME = \"com.vordel.dwe.http.ServerTransaction\";\n+  static final Class<Object> SERVER_TRANSACTION_CLASS = getServerTransactionClass();\n+\n+  private static Class<Object> getServerTransactionClass() {\n+    try {\n+      return (Class<Object>) Class.forName(SERVER_TRANSACTION_CLASSNAME);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\"Can't get ServerTransaction class name\", e);\n+    }\n+    return null;\n+  }\n+\n+  static {\n+    classServerTransaction = initClass(SERVERTRANSACTION_CLASSNAME);\n+    getRemoteAddr_mh =\n+        initNoArgServerTransactionMethodHandle(\"getRemoteAddr\", InetSocketAddress.class);\n+    getMethod_mh = initNoArgServerTransactionMethodHandle(\"getMethod\", String.class);\n+    getURI_mh = initGetURI();\n+\n+    classState = initClass(STATE_CLASSNAME);\n+    hostField_mh = initStateFieldGetter(\"host\");\n+    portField_mh = initStateFieldGetter(\"port\");\n+    methodField_mh = initStateFieldGetter(\"verb\");\n+    uriField_mh = initStateFieldGetter(\"uri\");\n+  }\n+\n+  private static Class<?> initClass(final String name) {\n+    try {\n+      return Class.forName(name);\n+    } catch (ClassNotFoundException e) {\n+      log.debug(\n+          \"Can't find class '{}': Axaway integration failed. \", SERVERTRANSACTION_CLASSNAME, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initNoArgServerTransactionMethodHandle(String name, Class<?> rtype) {\n+    try {\n+      return lookup.findVirtual(classServerTransaction, name, methodType(rtype));\n+    } catch (NoSuchMethodException | IllegalAccessException e) {\n+      log.debug(\"Can't find method handler '{}' \", name, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initGetURI() {\n+    Method m = null;\n+    try {\n+      m = classServerTransaction.getDeclaredMethod(\"getURI\"); // private method\n+      m.setAccessible(true);\n+      return lookup.unreflect(m);\n+    } catch (Throwable e) {\n+      log.debug(\"Can't unreflect method '{}': \", m, e);\n+    }\n+    return null;\n+  }\n+\n+  private static MethodHandle initStateFieldGetter(String fieldName) {\n+    Field field = null;\n+    MethodHandle mh = null;\n+    try {\n+      field = classState.getDeclaredField(fieldName);\n+      field.setAccessible(true);\n+      mh = lookup.unreflectGetter(field);\n+      log.debug(\n+          \"Initialized field '{}' of class '{}' unreflected to {}\", fieldName, classState, mh);\n+    } catch (NoSuchFieldException | IllegalAccessException e) {\n+      log.debug(\n+          \"Can't find and unreflect declared field '{}' with name '{}' for class '{}' to mh: '{}'\",\n+          field,\n+          fieldName,\n+          classState,\n+          mh,\n+          e);\n+    }\n+    return mh;\n+  }\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"axway-http\"};\n+  }\n+\n+  @Override\n+  protected String component() {\n+    return \"axway-http\";\n+  }\n+\n+  @Override\n+  protected String method(final Object serverTransaction) {\n+    try {\n+      return (String) getMethod_mh.invoke(serverTransaction);\n+    } catch (Throwable throwable) {\n+      log.debug(\n+          \"Can't invoke invoke '{}' on instance '{}' of class '{}'\",\n+          getMethod_mh,\n+          serverTransaction,\n+          serverTransaction.getClass(),\n+          throwable);\n+    }\n+    return \"UNKNOWN\";\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Object serverTransaction) {\n+    try {\n+      return new DefaultURIDataAdapter((URI) getURI_mh.invoke(serverTransaction));\n+    } catch (Throwable e) {\n+      log.debug(\"Can't find invoke '{}}' on '{}': \", getURI_mh, serverTransaction, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDM5NTQ4Ng=="}, "originalCommit": {"oid": "994c629b375cf0745a13100a1722a2d237af3900"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4966, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}