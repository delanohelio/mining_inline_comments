{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNDAyNjM5", "number": 2142, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxMjoyNlrOE_OlrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowODozOVrOE_Vyiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM0NzY1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxMjoyNlrOH80fkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjozMzozNFrOH9Y1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY1Ng==", "bodyText": "Why are we filtering after shuffling?", "url": "https://github.com/DataDog/dd-trace-java/pull/2142#discussion_r533536656", "createdAt": "2020-12-01T16:12:26Z", "author": {"login": "richardstartin"}, "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "diffHunk": "@@ -292,18 +292,25 @@ class MuzzlePlugin implements Plugin<Project> {\n   }\n \n   private static Set<Version> limitLargeRanges(VersionRangeResult result, Set<Version> versions, Set<String> skipVersions) {\n+    if (versions.size() <= 1) {\n+      return versions\n+    }\n+\n     List<Version> versionsCopy = new ArrayList<>(versions)\n-    Set<String> skipCopy = new HashSet<>(skipVersions)\n+    def beforeSize = versionsCopy.size()\n     versionsCopy.removeAll(skipVersions)\n+    VersionSet versionSet = new VersionSet(versionsCopy)\n+    versionsCopy = versionSet.lowAndHighForMajorMinor.toList()\n     Collections.shuffle(versionsCopy)\n     while (RANGE_COUNT_LIMIT <= versionsCopy.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721704482297c319eda7a649782ed437166ae2f8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzOTAwOA==", "bodyText": "To not get the same selection of RANGE_COUNT_LIMIT versions every time. Was probably more important when it selected random versions from the whole range.", "url": "https://github.com/DataDog/dd-trace-java/pull/2142#discussion_r533539008", "createdAt": "2020-12-01T16:15:22Z", "author": {"login": "bantonsson"}, "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "diffHunk": "@@ -292,18 +292,25 @@ class MuzzlePlugin implements Plugin<Project> {\n   }\n \n   private static Set<Version> limitLargeRanges(VersionRangeResult result, Set<Version> versions, Set<String> skipVersions) {\n+    if (versions.size() <= 1) {\n+      return versions\n+    }\n+\n     List<Version> versionsCopy = new ArrayList<>(versions)\n-    Set<String> skipCopy = new HashSet<>(skipVersions)\n+    def beforeSize = versionsCopy.size()\n     versionsCopy.removeAll(skipVersions)\n+    VersionSet versionSet = new VersionSet(versionsCopy)\n+    versionsCopy = versionSet.lowAndHighForMajorMinor.toList()\n     Collections.shuffle(versionsCopy)\n     while (RANGE_COUNT_LIMIT <= versionsCopy.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY1Ng=="}, "originalCommit": {"oid": "721704482297c319eda7a649782ed437166ae2f8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1NzUxMQ==", "bodyText": "Do we have an idea of how long this takes?", "url": "https://github.com/DataDog/dd-trace-java/pull/2142#discussion_r533557511", "createdAt": "2020-12-01T16:40:00Z", "author": {"login": "richardstartin"}, "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "diffHunk": "@@ -292,18 +292,25 @@ class MuzzlePlugin implements Plugin<Project> {\n   }\n \n   private static Set<Version> limitLargeRanges(VersionRangeResult result, Set<Version> versions, Set<String> skipVersions) {\n+    if (versions.size() <= 1) {\n+      return versions\n+    }\n+\n     List<Version> versionsCopy = new ArrayList<>(versions)\n-    Set<String> skipCopy = new HashSet<>(skipVersions)\n+    def beforeSize = versionsCopy.size()\n     versionsCopy.removeAll(skipVersions)\n+    VersionSet versionSet = new VersionSet(versionsCopy)\n+    versionsCopy = versionSet.lowAndHighForMajorMinor.toList()\n     Collections.shuffle(versionsCopy)\n     while (RANGE_COUNT_LIMIT <= versionsCopy.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY1Ng=="}, "originalCommit": {"oid": "721704482297c319eda7a649782ed437166ae2f8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk2MTA5Nw==", "bodyText": "Which part of this are you wondering about? The shuffling or the size call or the removing of elements?", "url": "https://github.com/DataDog/dd-trace-java/pull/2142#discussion_r533961097", "createdAt": "2020-12-02T07:55:49Z", "author": {"login": "bantonsson"}, "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "diffHunk": "@@ -292,18 +292,25 @@ class MuzzlePlugin implements Plugin<Project> {\n   }\n \n   private static Set<Version> limitLargeRanges(VersionRangeResult result, Set<Version> versions, Set<String> skipVersions) {\n+    if (versions.size() <= 1) {\n+      return versions\n+    }\n+\n     List<Version> versionsCopy = new ArrayList<>(versions)\n-    Set<String> skipCopy = new HashSet<>(skipVersions)\n+    def beforeSize = versionsCopy.size()\n     versionsCopy.removeAll(skipVersions)\n+    VersionSet versionSet = new VersionSet(versionsCopy)\n+    versionsCopy = versionSet.lowAndHighForMajorMinor.toList()\n     Collections.shuffle(versionsCopy)\n     while (RANGE_COUNT_LIMIT <= versionsCopy.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY1Ng=="}, "originalCommit": {"oid": "721704482297c319eda7a649782ed437166ae2f8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEzMjA1NA==", "bodyText": "the whole thing - this can be done a lot better with an algorithm related to reservoir sampling called algorithm D devised in the 80s for taking random samples from tapes (can't go backwards)", "url": "https://github.com/DataDog/dd-trace-java/pull/2142#discussion_r534132054", "createdAt": "2020-12-02T12:33:34Z", "author": {"login": "richardstartin"}, "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "diffHunk": "@@ -292,18 +292,25 @@ class MuzzlePlugin implements Plugin<Project> {\n   }\n \n   private static Set<Version> limitLargeRanges(VersionRangeResult result, Set<Version> versions, Set<String> skipVersions) {\n+    if (versions.size() <= 1) {\n+      return versions\n+    }\n+\n     List<Version> versionsCopy = new ArrayList<>(versions)\n-    Set<String> skipCopy = new HashSet<>(skipVersions)\n+    def beforeSize = versionsCopy.size()\n     versionsCopy.removeAll(skipVersions)\n+    VersionSet versionSet = new VersionSet(versionsCopy)\n+    versionsCopy = versionSet.lowAndHighForMajorMinor.toList()\n     Collections.shuffle(versionsCopy)\n     while (RANGE_COUNT_LIMIT <= versionsCopy.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY1Ng=="}, "originalCommit": {"oid": "721704482297c319eda7a649782ed437166ae2f8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODUyNzQ3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/test/groovy/VersionSetTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowODozOVrOH8_1QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowODozOVrOH8_1QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMjQzMg==", "bodyText": "Thanks for adding some tests!", "url": "https://github.com/DataDog/dd-trace-java/pull/2142#discussion_r533722432", "createdAt": "2020-12-01T21:08:39Z", "author": {"login": "tylerbenson"}, "path": "buildSrc/src/test/groovy/VersionSetTest.groovy", "diffHunk": "@@ -0,0 +1,90 @@\n+import org.eclipse.aether.version.Version\n+import spock.lang.Specification\n+\n+import static VersionSet.ParsedVersion\n+\n+class VersionSetTest extends Specification {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721704482297c319eda7a649782ed437166ae2f8"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4645, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}