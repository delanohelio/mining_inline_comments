{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjM0OTg4", "number": 1703, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo1MzoxNVrOERIlUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NTowNVrOETSeSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDAxODc0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentracing/src/main/java/datadog/trace/instrumentation/opentracing/DefaultLogHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo1MzoxNVrOG1rfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo1MzoxNVrOG1rfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MDM0NA==", "bodyText": "Can we assign map.get(EVENT) to a local and check span.isError() first please?", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r458940344", "createdAt": "2020-07-22T16:53:15Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentracing/src/main/java/datadog/trace/instrumentation/opentracing/DefaultLogHandler.java", "diffHunk": "@@ -34,11 +35,15 @@ public void log(final long timestampMicroseconds, final String event, final Agen\n     log.debug(\"`log` method is not implemented. Provided log: {}\", event);\n   }\n \n+  private boolean isErrorSpan(final Map<String, ?> map, final AgentSpan span) {\n+    return (map.get(EVENT) instanceof String && map.get(EVENT).equals(\"error\")) || span.isError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf542a773a72db77254581f26272baa407de27d7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjYxMDY0OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/DefaultLogHandlerTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NTowNVrOG47-ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NzoxOVrOG48E8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjA3NA==", "bodyText": "pro tip:\nGroovy allows for inline declaration of maps: [(Fields.EVENT): \"error, (Fields.MESSAGE): errorMessage]\nConsider updating?", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r462356074", "createdAt": "2020-07-29T14:45:05Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/DefaultLogHandlerTest.groovy", "diffHunk": "@@ -61,16 +61,80 @@ class DefaultLogHandlerTest extends DDSpecification {\n     when:\n     underTest.log(fields, span)\n \n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp but the span is not an error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the event is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.EVENT, \"error\")\n+    fields.put(Fields.MESSAGE, errorMessage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48eafc0a6548ff2250867621083a225755d8e237"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1Nzc0NA==", "bodyText": "actually, I just realized this is also the case in the other test methods so never mind.", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r462357744", "createdAt": "2020-07-29T14:47:19Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/DefaultLogHandlerTest.groovy", "diffHunk": "@@ -61,16 +61,80 @@ class DefaultLogHandlerTest extends DDSpecification {\n     when:\n     underTest.log(fields, span)\n \n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp but the span is not an error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the event is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.EVENT, \"error\")\n+    fields.put(Fields.MESSAGE, errorMessage)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjA3NA=="}, "originalCommit": {"oid": "48eafc0a6548ff2250867621083a225755d8e237"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4950, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}