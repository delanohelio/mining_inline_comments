{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTA3NTg1", "number": 1854, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNzo0NVrOEiO85g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NTozM1rOEibGjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzMyMDA2OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/test/groovy/datadog/trace/common/writer/PayloadDispatcherTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODowNzo0NVrOHP_z6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyMzo1M1rOHQAfWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNjE2OA==", "bodyText": "I think you need a name change for monitor here and several other places in this PR... I won't repeat the comment over again.", "url": "https://github.com/DataDog/dd-trace-java/pull/1854#discussion_r486536168", "createdAt": "2020-09-10T18:07:45Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/common/writer/PayloadDispatcherTest.groovy", "diffHunk": "@@ -10,19 +11,25 @@ import datadog.trace.core.CoreTracer\n import datadog.trace.core.DDSpan\n import datadog.trace.core.DDSpanContext\n import datadog.trace.core.PendingTrace\n-import datadog.trace.core.monitor.Monitor\n+import datadog.trace.core.monitor.HealthMetrics\n+import datadog.trace.core.monitor.Monitoring\n import datadog.trace.util.test.DDSpecification\n+import spock.lang.Shared\n import spock.lang.Timeout\n \n+import java.util.concurrent.TimeUnit\n import java.util.concurrent.atomic.AtomicBoolean\n \n class PayloadDispatcherTest extends DDSpecification {\n \n+  @Shared\n+  Monitoring monitoring = new Monitoring(new NoOpStatsDClient(), 1, TimeUnit.SECONDS)\n+\n   def \"dropped traces should be reported in the representativeCount\"() {\n     setup:\n-    Monitor monitor = Mock(Monitor)\n+    HealthMetrics monitor = Mock(HealthMetrics)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f70e42c0f0dd39e40f7fc2da68ba21c43f220986"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NzI4OA==", "bodyText": "yep - groovy is a second class citizen in IDE refactoring, unless I'm missing something", "url": "https://github.com/DataDog/dd-trace-java/pull/1854#discussion_r486547288", "createdAt": "2020-09-10T18:23:53Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/common/writer/PayloadDispatcherTest.groovy", "diffHunk": "@@ -10,19 +11,25 @@ import datadog.trace.core.CoreTracer\n import datadog.trace.core.DDSpan\n import datadog.trace.core.DDSpanContext\n import datadog.trace.core.PendingTrace\n-import datadog.trace.core.monitor.Monitor\n+import datadog.trace.core.monitor.HealthMetrics\n+import datadog.trace.core.monitor.Monitoring\n import datadog.trace.util.test.DDSpecification\n+import spock.lang.Shared\n import spock.lang.Timeout\n \n+import java.util.concurrent.TimeUnit\n import java.util.concurrent.atomic.AtomicBoolean\n \n class PayloadDispatcherTest extends DDSpecification {\n \n+  @Shared\n+  Monitoring monitoring = new Monitoring(new NoOpStatsDClient(), 1, TimeUnit.SECONDS)\n+\n   def \"dropped traces should be reported in the representativeCount\"() {\n     setup:\n-    Monitor monitor = Mock(Monitor)\n+    HealthMetrics monitor = Mock(HealthMetrics)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzNjE2OA=="}, "originalCommit": {"oid": "f70e42c0f0dd39e40f7fc2da68ba21c43f220986"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTI3NzY5OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/monitor/Timer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo0NTo1OFrOHQSD4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODoxNToyNVrOHQTAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNTE2OA==", "bodyText": "So how does this compare in the backend as opposed to a normal histogram that the agent has computed? I would love for statsd/dogstatsd to have a way to send a histogram in a compact way as one metric.", "url": "https://github.com/DataDog/dd-trace-java/pull/1854#discussion_r486835168", "createdAt": "2020-09-11T07:45:58Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/monitor/Timer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package datadog.trace.core.monitor;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+import com.timgroup.statsd.StatsDClient;\n+import java.util.Arrays;\n+import org.HdrHistogram.PackedHistogram;\n+\n+/**\n+ * A timer which records times in a histogram, and flushes stats from the histogram after a\n+ * configurable period of time.\n+ */\n+public class Timer extends Recording {\n+\n+  private static final long THIRTY_SECONDS_AS_NANOS = SECONDS.toNanos(30);\n+\n+  private static final String[] MEAN = new String[] {\"stat:avg\"};\n+  private static final String[] P_50 = new String[] {\"stat:p50\"};\n+  private static final String[] P_99 = new String[] {\"stat:p99\"};\n+  private static final String[] MAX = new String[] {\"stat:max\"};\n+\n+  private final String name;\n+  private final StatsDClient statsd;\n+  private final PackedHistogram histogram;\n+  private final long flushAfterNanos;\n+\n+  private final String[] meanTags;\n+  private final String[] p50Tags;\n+  private final String[] p99Tags;\n+  private final String[] maxTags;\n+\n+  private long start;\n+  private long lastFlush = 0;\n+\n+  Timer(final String name, final String[] tags, final StatsDClient statsd, long flushAfterNanos) {\n+    this.name = name;\n+    this.statsd = statsd;\n+    this.flushAfterNanos = flushAfterNanos;\n+    this.histogram = new PackedHistogram(THIRTY_SECONDS_AS_NANOS, 3);\n+    this.meanTags = mergeTags(MEAN, tags);\n+    this.p50Tags = mergeTags(P_50, tags);\n+    this.p99Tags = mergeTags(P_99, tags);\n+    this.maxTags = mergeTags(MAX, tags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2035bc10c18949be275d951361bd3562d10c6f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg1MDY4MQ==", "bodyText": "I looked at it, and it looks far too heavyweight for some of the things I want to get information about. It wouldn't make sense to build a histogram from from quantiles.", "url": "https://github.com/DataDog/dd-trace-java/pull/1854#discussion_r486850681", "createdAt": "2020-09-11T08:15:25Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/monitor/Timer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package datadog.trace.core.monitor;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+\n+import com.timgroup.statsd.StatsDClient;\n+import java.util.Arrays;\n+import org.HdrHistogram.PackedHistogram;\n+\n+/**\n+ * A timer which records times in a histogram, and flushes stats from the histogram after a\n+ * configurable period of time.\n+ */\n+public class Timer extends Recording {\n+\n+  private static final long THIRTY_SECONDS_AS_NANOS = SECONDS.toNanos(30);\n+\n+  private static final String[] MEAN = new String[] {\"stat:avg\"};\n+  private static final String[] P_50 = new String[] {\"stat:p50\"};\n+  private static final String[] P_99 = new String[] {\"stat:p99\"};\n+  private static final String[] MAX = new String[] {\"stat:max\"};\n+\n+  private final String name;\n+  private final StatsDClient statsd;\n+  private final PackedHistogram histogram;\n+  private final long flushAfterNanos;\n+\n+  private final String[] meanTags;\n+  private final String[] p50Tags;\n+  private final String[] p99Tags;\n+  private final String[] maxTags;\n+\n+  private long start;\n+  private long lastFlush = 0;\n+\n+  Timer(final String name, final String[] tags, final StatsDClient statsd, long flushAfterNanos) {\n+    this.name = name;\n+    this.statsd = statsd;\n+    this.flushAfterNanos = flushAfterNanos;\n+    this.histogram = new PackedHistogram(THIRTY_SECONDS_AS_NANOS, 3);\n+    this.meanTags = mergeTags(MEAN, tags);\n+    this.p50Tags = mergeTags(P_50, tags);\n+    this.p99Tags = mergeTags(P_99, tags);\n+    this.maxTags = mergeTags(MAX, tags);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgzNTE2OA=="}, "originalCommit": {"oid": "2b2035bc10c18949be275d951361bd3562d10c6f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTMxMDg0OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/monitor/Recording.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NTozM1rOHQSX8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNzo1NTozM1rOHQSX8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MDMwNg==", "bodyText": "This is nice. Using AutoCloseable makes the code less cluttered.", "url": "https://github.com/DataDog/dd-trace-java/pull/1854#discussion_r486840306", "createdAt": "2020-09-11T07:55:33Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/monitor/Recording.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package datadog.trace.core.monitor;\n+\n+public abstract class Recording implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2035bc10c18949be275d951361bd3562d10c6f"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4800, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}