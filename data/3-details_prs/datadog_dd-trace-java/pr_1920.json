{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTQ3Njkx", "number": 1920, "title": "Make FieldBackedProvider respect class loader matchers", "bodyText": "This made field injection not work in cases where a class loader matcher that didn't match declared a context store on a type that was needed by another class loader matcher.", "createdAt": "2020-09-28T13:35:38Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1920", "merged": true, "mergeCommit": {"oid": "bc0c36b3a640374468419e655b0f840e0f831924"}, "closed": true, "closedAt": "2020-09-29T15:56:47Z", "author": {"login": "bantonsson"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNTwHSAFqTQ5NzUyMDg3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNphh_gBqjM4MjAxMTI5Njk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTIwODcz", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-497520873", "createdAt": "2020-09-28T13:39:00Z", "commit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozOTowMFrOHY-Jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzozOTowMFrOHY-Jaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0NjA5MQ==", "bodyText": "This can be written correctly following the usual double checked locking idiom in fewer lines of code.", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495946091", "createdAt": "2020-09-28T13:39:00Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/ClassLoaderMatcher.java", "diffHunk": "@@ -127,6 +128,20 @@ private ClassLoaderHasClassesNamedMatcher(final String... classNames) {\n       }\n     }\n \n+    private WeakCache<ClassLoader, Boolean> getCache() {\n+      WeakCache<ClassLoader, Boolean> cache = cacheHolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTI1NzEw", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-497525710", "createdAt": "2020-09-28T13:44:01Z", "commit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0NDowMVrOHY-XlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0NDowMVrOHY-XlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk0OTcxNw==", "bodyText": "Are we relying on doing this for equality semantics? i.e. is it now important that classLoaderMatcher() always returns the same instance? If so, violation of this kind of implicit requirement was what led to field injection being disabled in the first place. If not, please ignore this comment.", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495949717", "createdAt": "2020-09-28T13:44:01Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinTaskInstrumentation.java", "diffHunk": "@@ -39,14 +39,16 @@\n \n   static final String TASK_CLASS_NAME = \"akka.dispatch.forkjoin.ForkJoinTask\";\n \n+  static final ElementMatcher<ClassLoader> CLASS_LOADER_MATCHER = hasClassesNamed(TASK_CLASS_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTI5MzYx", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-497529361", "createdAt": "2020-09-28T13:47:47Z", "commit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0Nzo0N1rOHY-iZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo0Nzo0N1rOHY-iZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk1MjQ4NA==", "bodyText": "I don't think ElementMatcher<ClassLoader> can be assumed to have good enough equality semantics to do this.\nOne possible solution I would find amenable is that we create an abstract class implementing  ElementMatcher<ClassLoader> and we add abstract hashCode and equals, and require that type here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r495952484", "createdAt": "2020-09-28T13:47:47Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -67,11 +71,35 @@ public Default(final String instrumentationName, final String... additionalNames\n       instrumentationPrimaryName = instrumentationName;\n \n       enabled = Config.get().isIntegrationEnabled(instrumentationNames, defaultEnabled());\n-      Map<String, String> contextStore = contextStore();\n-      if (!contextStore.isEmpty()) {\n-        contextProvider = new FieldBackedProvider(this, contextStore);\n-      } else {\n-        contextProvider = NoopContextProvider.INSTANCE;\n+    }\n+\n+    // Since the super(...) call is first in the constructor, we can't really rely on things\n+    // being properly initialized in the Instrumentation until the super(...) call has finished\n+    // so do the rest of the initialization lazily\n+    private void lazyInit() {\n+      synchronized (this) {\n+        if (!initialized) {\n+          Map<ElementMatcher<ClassLoader>, Map<String, String>> contextStores;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5876ae8086b6046204ac2bd681927e03b753297", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a5876ae8086b6046204ac2bd681927e03b753297", "committedDate": "2020-09-28T13:32:31Z", "message": "Make FieldBackedProvider respect class loader matchers"}, "afterCommit": {"oid": "c573d3accaa504484fa440f5c465baa96bedc577", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c573d3accaa504484fa440f5c465baa96bedc577", "committedDate": "2020-09-28T14:57:53Z", "message": "Make FieldBackedProvider respect class loader matchers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c573d3accaa504484fa440f5c465baa96bedc577", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c573d3accaa504484fa440f5c465baa96bedc577", "committedDate": "2020-09-28T14:57:53Z", "message": "Make FieldBackedProvider respect class loader matchers"}, "afterCommit": {"oid": "8b2182ade1166c4b7f9459b6dbe47890e06bdad4", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8b2182ade1166c4b7f9459b6dbe47890e06bdad4", "committedDate": "2020-09-28T15:14:34Z", "message": "Make FieldBackedProvider respect class loader matchers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b2182ade1166c4b7f9459b6dbe47890e06bdad4", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8b2182ade1166c4b7f9459b6dbe47890e06bdad4", "committedDate": "2020-09-28T15:14:34Z", "message": "Make FieldBackedProvider respect class loader matchers"}, "afterCommit": {"oid": "76c9be5ba6ba82c3d3d6c21e525e7c61348a3b77", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/76c9be5ba6ba82c3d3d6c21e525e7c61348a3b77", "committedDate": "2020-09-29T08:22:21Z", "message": "Make FieldBackedProvider respect class loader matchers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76c9be5ba6ba82c3d3d6c21e525e7c61348a3b77", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/76c9be5ba6ba82c3d3d6c21e525e7c61348a3b77", "committedDate": "2020-09-29T08:22:21Z", "message": "Make FieldBackedProvider respect class loader matchers"}, "afterCommit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "committedDate": "2020-09-29T08:28:55Z", "message": "Make FieldBackedProvider respect class loader matchers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDE4MTE2", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-498418116", "createdAt": "2020-09-29T12:34:05Z", "commit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDk2NzI4", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-498496728", "createdAt": "2020-09-29T13:55:33Z", "commit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36646cea1aa26e5588e01aebf0b0215a5ec0bb6f", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/36646cea1aa26e5588e01aebf0b0215a5ec0bb6f", "committedDate": "2020-09-29T14:26:13Z", "message": "Make FieldBackedProvider respect class loader matchers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NTM0Mzk2", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-498534396", "createdAt": "2020-09-29T14:30:16Z", "commit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMDoxN1rOHZwLKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMDoxN1rOHZwLKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NTczNw==", "bodyText": "can allClassLoaderContextStores and contextStore() both be empty? if so should this branch also check contextStore() and if it's empty assign an empty map to contextStores?", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496765737", "createdAt": "2020-09-29T14:30:17Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -67,11 +71,35 @@ public Default(final String instrumentationName, final String... additionalNames\n       instrumentationPrimaryName = instrumentationName;\n \n       enabled = Config.get().isIntegrationEnabled(instrumentationNames, defaultEnabled());\n-      Map<String, String> contextStore = contextStore();\n-      if (!contextStore.isEmpty()) {\n-        contextProvider = new FieldBackedProvider(this, contextStore);\n-      } else {\n-        contextProvider = NoopContextProvider.INSTANCE;\n+    }\n+\n+    // Since the super(...) call is first in the constructor, we can't really rely on things\n+    // being properly initialized in the Instrumentation until the super(...) call has finished\n+    // so do the rest of the initialization lazily\n+    private void lazyInit() {\n+      synchronized (this) {\n+        if (!initialized) {\n+          Map<ElementMatcher<ClassLoader>, Map<String, String>> contextStores;\n+          Map<String, String> allClassLoaderContextStores = contextStoreForAll();\n+          Map<String, String> matchedContextStores = contextStore();\n+          if (!allClassLoaderContextStores.isEmpty()) {\n+            if (contextStore().isEmpty()) {\n+              contextStores = singletonMap(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            } else {\n+              contextStores = new HashMap<>();\n+              contextStores.put(classLoaderMatcher(), matchedContextStores);\n+              contextStores.put(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            }\n+          } else {\n+            contextStores = singletonMap(classLoaderMatcher(), matchedContextStores);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NTM2NTUx", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-498536551", "createdAt": "2020-09-29T14:32:16Z", "commit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMjoxNlrOHZwRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozMjoxNlrOHZwRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc2NzMwMA==", "bodyText": "AFAICT none of the above assignments leave contextStores as an empty map, so either there's a missing case above or this this check isn't needed...", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496767300", "createdAt": "2020-09-29T14:32:16Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -67,11 +71,35 @@ public Default(final String instrumentationName, final String... additionalNames\n       instrumentationPrimaryName = instrumentationName;\n \n       enabled = Config.get().isIntegrationEnabled(instrumentationNames, defaultEnabled());\n-      Map<String, String> contextStore = contextStore();\n-      if (!contextStore.isEmpty()) {\n-        contextProvider = new FieldBackedProvider(this, contextStore);\n-      } else {\n-        contextProvider = NoopContextProvider.INSTANCE;\n+    }\n+\n+    // Since the super(...) call is first in the constructor, we can't really rely on things\n+    // being properly initialized in the Instrumentation until the super(...) call has finished\n+    // so do the rest of the initialization lazily\n+    private void lazyInit() {\n+      synchronized (this) {\n+        if (!initialized) {\n+          Map<ElementMatcher<ClassLoader>, Map<String, String>> contextStores;\n+          Map<String, String> allClassLoaderContextStores = contextStoreForAll();\n+          Map<String, String> matchedContextStores = contextStore();\n+          if (!allClassLoaderContextStores.isEmpty()) {\n+            if (contextStore().isEmpty()) {\n+              contextStores = singletonMap(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            } else {\n+              contextStores = new HashMap<>();\n+              contextStores.put(classLoaderMatcher(), matchedContextStores);\n+              contextStores.put(ANY_CLASS_LOADER, allClassLoaderContextStores);\n+            }\n+          } else {\n+            contextStores = singletonMap(classLoaderMatcher(), matchedContextStores);\n+          }\n+          if (!contextStores.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NTQxOTUx", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#pullrequestreview-498541951", "createdAt": "2020-09-29T14:37:07Z", "commit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozNzowN1rOHZwgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNDozNzowN1rOHZwgrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc3MTI0NA==", "bodyText": "Could we call this HibernateMatchers or something similar as it's not common to all instrumentations", "url": "https://github.com/DataDog/dd-trace-java/pull/1920#discussion_r496771244", "createdAt": "2020-09-29T14:37:07Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/hibernate/src/main/java/datadog/trace/instrumentation/hibernate/CommonMatchers.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package datadog.trace.instrumentation.hibernate;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+public final class CommonMatchers {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "committedDate": "2020-09-29T15:00:48Z", "message": "Fixes according to PR review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/820c69f8e3b59d8a6be1ef7d9c9c359bb2fd47bc", "committedDate": "2020-09-29T08:28:55Z", "message": "Make FieldBackedProvider respect class loader matchers"}, "afterCommit": {"oid": "e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e6811fa54667f4e7f77223d6bdd87ae5639dbb76", "committedDate": "2020-09-29T15:00:48Z", "message": "Fixes according to PR review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3172, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}