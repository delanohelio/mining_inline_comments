{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NDI1Nzc3", "number": 2174, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo1NzozNVrOFCUSlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowMzoyNVrOFCmEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTczOTA4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo1NzozNVrOIBZgyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMDozOFrOIBbhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzNzQ4Mg==", "bodyText": "Shouldn't this be klass = classLoader.loadClass(className.replace('.', '/')); ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2174#discussion_r538337482", "createdAt": "2020-12-08T12:57:35Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -248,12 +256,52 @@ public void clear() {\n     }\n   }\n \n+  private static class CachingResolutionForMaybeLoadableType implements TypePool.Resolution {\n+    private final WeakReference<ClassLoader> loaderRef;\n+    private final String className;\n+    private volatile TypeDescription typeDescription = null;\n+    private volatile boolean isResolved = false;\n+\n+    public CachingResolutionForMaybeLoadableType(\n+        WeakReference<ClassLoader> loaderRef, String className) {\n+      this.loaderRef = loaderRef;\n+      this.className = className;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return isResolved;\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      // Intentionally not \"thread safe\". Duplicate work deemed an acceptable trade-off.\n+      if (!isResolved) {\n+        Class<?> klass = null;\n+        ClassLoader classLoader = loaderRef.get();\n+        if (classLoader != null) {\n+          try {\n+            klass = classLoader.loadClass(className.replace('.', '\\\\'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "591b430243fa6668cf3f1666c6bbda8faa864f3b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzOTc1NQ==", "bodyText": "Doh! Thanks, and the test is without a package name... \ud83d\ude14", "url": "https://github.com/DataDog/dd-trace-java/pull/2174#discussion_r538339755", "createdAt": "2020-12-08T12:59:55Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -248,12 +256,52 @@ public void clear() {\n     }\n   }\n \n+  private static class CachingResolutionForMaybeLoadableType implements TypePool.Resolution {\n+    private final WeakReference<ClassLoader> loaderRef;\n+    private final String className;\n+    private volatile TypeDescription typeDescription = null;\n+    private volatile boolean isResolved = false;\n+\n+    public CachingResolutionForMaybeLoadableType(\n+        WeakReference<ClassLoader> loaderRef, String className) {\n+      this.loaderRef = loaderRef;\n+      this.className = className;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return isResolved;\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      // Intentionally not \"thread safe\". Duplicate work deemed an acceptable trade-off.\n+      if (!isResolved) {\n+        Class<?> klass = null;\n+        ClassLoader classLoader = loaderRef.get();\n+        if (classLoader != null) {\n+          try {\n+            klass = classLoader.loadClass(className.replace('.', '\\\\'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzNzQ4Mg=="}, "originalCommit": {"oid": "591b430243fa6668cf3f1666c6bbda8faa864f3b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MDUwOA==", "bodyText": "There was even a double error, and there should be no replace.", "url": "https://github.com/DataDog/dd-trace-java/pull/2174#discussion_r538370508", "createdAt": "2020-12-08T13:30:38Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -248,12 +256,52 @@ public void clear() {\n     }\n   }\n \n+  private static class CachingResolutionForMaybeLoadableType implements TypePool.Resolution {\n+    private final WeakReference<ClassLoader> loaderRef;\n+    private final String className;\n+    private volatile TypeDescription typeDescription = null;\n+    private volatile boolean isResolved = false;\n+\n+    public CachingResolutionForMaybeLoadableType(\n+        WeakReference<ClassLoader> loaderRef, String className) {\n+      this.loaderRef = loaderRef;\n+      this.className = className;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return isResolved;\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      // Intentionally not \"thread safe\". Duplicate work deemed an acceptable trade-off.\n+      if (!isResolved) {\n+        Class<?> klass = null;\n+        ClassLoader classLoader = loaderRef.get();\n+        if (classLoader != null) {\n+          try {\n+            klass = classLoader.loadClass(className.replace('.', '\\\\'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzNzQ4Mg=="}, "originalCommit": {"oid": "591b430243fa6668cf3f1666c6bbda8faa864f3b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjY1MjkwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTowMzoyNVrOIB2GPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjo1MTowNVrOICFHrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNTgyMg==", "bodyText": "Should we log a debug message when this happens?", "url": "https://github.com/DataDog/dd-trace-java/pull/2174#discussion_r538805822", "createdAt": "2020-12-08T21:03:25Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -248,12 +256,52 @@ public void clear() {\n     }\n   }\n \n+  private static class CachingResolutionForMaybeLoadableType implements TypePool.Resolution {\n+    private final WeakReference<ClassLoader> loaderRef;\n+    private final String className;\n+    private volatile TypeDescription typeDescription = null;\n+    private volatile boolean isResolved = false;\n+\n+    public CachingResolutionForMaybeLoadableType(\n+        WeakReference<ClassLoader> loaderRef, String className) {\n+      this.loaderRef = loaderRef;\n+      this.className = className;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return isResolved;\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      // Intentionally not \"thread safe\". Duplicate work deemed an acceptable trade-off.\n+      if (!isResolved) {\n+        Class<?> klass = null;\n+        ClassLoader classLoader = loaderRef.get();\n+        if (classLoader != null) {\n+          try {\n+            klass = classLoader.loadClass(className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a880c7d3f1740509bfc8136ae8d929e94ea186"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1MTk0OA==", "bodyText": "Yes, we should definitely log when we are able to load the class. I'll add a comment as well.", "url": "https://github.com/DataDog/dd-trace-java/pull/2174#discussion_r539051948", "createdAt": "2020-12-09T06:51:05Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/DDCachingPoolStrategy.java", "diffHunk": "@@ -248,12 +256,52 @@ public void clear() {\n     }\n   }\n \n+  private static class CachingResolutionForMaybeLoadableType implements TypePool.Resolution {\n+    private final WeakReference<ClassLoader> loaderRef;\n+    private final String className;\n+    private volatile TypeDescription typeDescription = null;\n+    private volatile boolean isResolved = false;\n+\n+    public CachingResolutionForMaybeLoadableType(\n+        WeakReference<ClassLoader> loaderRef, String className) {\n+      this.loaderRef = loaderRef;\n+      this.className = className;\n+    }\n+\n+    @Override\n+    public boolean isResolved() {\n+      return isResolved;\n+    }\n+\n+    @Override\n+    public TypeDescription resolve() {\n+      // Intentionally not \"thread safe\". Duplicate work deemed an acceptable trade-off.\n+      if (!isResolved) {\n+        Class<?> klass = null;\n+        ClassLoader classLoader = loaderRef.get();\n+        if (classLoader != null) {\n+          try {\n+            klass = classLoader.loadClass(className);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwNTgyMg=="}, "originalCommit": {"oid": "97a880c7d3f1740509bfc8136ae8d929e94ea186"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4509, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}