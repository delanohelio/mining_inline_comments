{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTcxNTQx", "number": 2233, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTozMzozNVrOFOocEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxNDozNFrOFOpTnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODg2OTI5OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/api/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTozMzozNVrOITgv5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTozMzozNVrOITgv5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzMDQwNA==", "bodyText": "there are a few remaining references to SortedSet in Config which should be updated for consistency, but that can be done in a follow-up PR", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557330404", "createdAt": "2021-01-14T11:33:35Z", "author": {"login": "mcculls"}, "path": "internal-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -877,12 +877,12 @@ public String getFinalProfilingUrl() {\n   }\n \n   public boolean isIntegrationEnabled(\n-      final SortedSet<String> integrationNames, final boolean defaultEnabled) {\n+      final Iterable<String> integrationNames, final boolean defaultEnabled) {\n     return isEnabled(integrationNames, \"integration.\", \".enabled\", defaultEnabled);\n   }\n \n   public boolean isJmxFetchIntegrationEnabled(\n-      final SortedSet<String> integrationNames, final boolean defaultEnabled) {\n+      final Iterable<String> integrationNames, final boolean defaultEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODg3OTUwOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/opentracing/CustomScopeManagerWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTozNjozOFrOITg17g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTozNzo0OVrOITg4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzMTk1MA==", "bodyText": "could use try-with-resources for scope", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557331950", "createdAt": "2021-01-14T11:36:38Z", "author": {"login": "mcculls"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/CustomScopeManagerWrapper.java", "diffHunk": "@@ -63,6 +63,15 @@ public AgentSpan activeSpan() {\n     return converter.toAgentSpan(delegate.activeSpan());\n   }\n \n+  @Override\n+  public TraceScope.Continuation captureSpan(final AgentSpan span, ScopeSource source) {\n+    // I can't see a better way to do this, and I don't know if this even makes sense.\n+    AgentScope scope = this.activate(span, source);\n+    TraceScope.Continuation continuation = scope.capture();\n+    scope.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzMjYxNA==", "bodyText": "ie. perhaps\ntry (AgentScope scope = this.activate(span, source)) {\n  return scope.capture();\n}", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557332614", "createdAt": "2021-01-14T11:37:49Z", "author": {"login": "mcculls"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/CustomScopeManagerWrapper.java", "diffHunk": "@@ -63,6 +63,15 @@ public AgentSpan activeSpan() {\n     return converter.toAgentSpan(delegate.activeSpan());\n   }\n \n+  @Override\n+  public TraceScope.Continuation captureSpan(final AgentSpan span, ScopeSource source) {\n+    // I can't see a better way to do this, and I don't know if this even makes sense.\n+    AgentScope scope = this.activate(span, source);\n+    TraceScope.Continuation continuation = scope.capture();\n+    scope.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzMTk1MA=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODg5MzA3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/src/test/scala/PromiseUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0MDoyNFrOITg96g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0MDoyNFrOITg96g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzMzk5NA==", "bodyText": "maybe pull the 5s out into a constant so it's easier to maintain", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557333994", "createdAt": "2021-01-14T11:40:24Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/src/test/scala/PromiseUtils.scala", "diffHunk": "@@ -1,7 +1,12 @@\n import groovy.lang.Closure\n-import scala.concurrent.{ExecutionContext, Future, Promise}\n+import scala.concurrent.duration.Duration\n+import scala.concurrent.{Await, ExecutionContext, Future, Promise}\n \n class PromiseUtils(implicit ec: ExecutionContext) {\n+  // This code is only here to ensure that we in the unit promise tests do the\n+  // first apply inside a trace during the initialization of the PromiseUtils,\n+  // so that we initialize the unit field if it exists with a context\n+  Await.result(Future.apply(\"unused\"), Duration(\"5s\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODg5NTQyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/src/test/scala/PromiseUtils.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0MToxMlrOITg_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0MToxMlrOITg_ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzNDM3Mw==", "bodyText": "can re-use the 5s constant here", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557334373", "createdAt": "2021-01-14T11:41:12Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/src/test/scala/PromiseUtils.scala", "diffHunk": "@@ -12,4 +17,16 @@ class PromiseUtils(implicit ec: ExecutionContext) {\n   def onComplete[T](future: Future[T], callable: Closure[T]): Unit = {\n     future.onComplete(v => callable.call(v.get))\n   }\n+\n+  def apply[T](callable: Closure[T]): Future[T] = {\n+    Future(callable.call())\n+  }\n+\n+  def await[T](future: Future[T]): T = {\n+    Await.result(future, Duration(\"5s\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODkwNDY5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/src/main/java/datadog/trace/instrumentation/scala/PromiseHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NDoxN1rOIThFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo0NDoxN1rOIThFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMzNTg4OA==", "bodyText": "s/assoicated/associated/", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557335888", "createdAt": "2021-01-14T11:44:17Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/src/main/java/datadog/trace/instrumentation/scala/PromiseHelper.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package datadog.trace.instrumentation.scala;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.captureSpan;\n+\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.State;\n+import datadog.trace.context.TraceScope;\n+import java.util.Collections;\n+import scala.util.Failure;\n+import scala.util.Success;\n+import scala.util.Try;\n+\n+public class PromiseHelper {\n+  public static final boolean completionPriority =\n+      Config.get()\n+          .isIntegrationEnabled(\n+              Collections.singletonList(\"scala_promise_completion_priority\"), false);\n+\n+  /**\n+   * Get the {@code Span} that should be associated with the {@code Try} completing this {@code\n+   * Promise}.\n+   *\n+   * @return the Span or null\n+   */\n+  public static AgentSpan getSpan() {\n+    AgentSpan span = null;\n+    final TraceScope scope = activeScope();\n+    if (null != scope && scope.isAsyncPropagating()) {\n+      if (scope instanceof AgentScope) {\n+        span = ((AgentScope) scope).span();\n+      } else {\n+        span = activeSpan();\n+      }\n+    }\n+    return span;\n+  }\n+\n+  /**\n+   * Get the {@code Try} that should be associated with the {@code Span}. Will create a new copy of\n+   * the {@code Try} if the existing one already has a different {@code Span} associated.\n+   *\n+   * @param resolved the current Try\n+   * @param span the current Span\n+   * @param existing the currently stored Span for the Try\n+   * @return the Try that should be assoicated with the Span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODkzMzcwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation213.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo1Mjo0M1rOIThW4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoyMDo0MlrOITiSKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0MDM4Nw==", "bodyText": "is this dangling $ a quirk of scala?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557340387", "createdAt": "2021-01-14T11:52:43Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation213.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static scala.concurrent.impl.Promise.Transformation;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.util.Try;\n+\n+/**\n+ * A Scala {@code Promise} is always completed with a {@code Try}, so if we want the completing span\n+ * to take priority over any spans captured while adding computations to a {@code Future} associated\n+ * with a {@code Promise}, then we capture the active span when the {@code Try} is resolved.\n+ */\n+@AutoService(Instrumenter.class)\n+public class PromiseObjectInstrumentation213 extends Instrumenter.Tracing {\n+\n+  public PromiseObjectInstrumentation213() {\n+    super(\"scala_promise_resolve\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1NTU2Mw==", "bodyText": "Yes, the Promise$ is the Scala object for Promise, and not the trait or class. An object is a singleton.", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557355563", "createdAt": "2021-01-14T12:20:42Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation213.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static scala.concurrent.impl.Promise.Transformation;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.util.Try;\n+\n+/**\n+ * A Scala {@code Promise} is always completed with a {@code Try}, so if we want the completing span\n+ * to take priority over any spans captured while adding computations to a {@code Future} associated\n+ * with a {@code Promise}, then we capture the active span when the {@code Try} is resolved.\n+ */\n+@AutoService(Instrumenter.class)\n+public class PromiseObjectInstrumentation213 extends Instrumenter.Tracing {\n+\n+  public PromiseObjectInstrumentation213() {\n+    super(\"scala_promise_resolve\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0MDM4Nw=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODkzODQ5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation210.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo1NDowOFrOIThZyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoyOTowNlrOITijig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0MTEzMQ==", "bodyText": "same question - is this dangling $ a quirk of scala?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557341131", "createdAt": "2021-01-14T11:54:08Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation210.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.concurrent.impl.CallbackRunnable;\n+import scala.util.Try;\n+\n+/**\n+ * A Scala {@code Promise} is always completed with a {@code Try}, so if we want the completing span\n+ * to take priority over any spans captured while adding computations to a {@code Future} associated\n+ * with a {@code Promise}, then we capture the active span when the {@code Try} is resolved.\n+ */\n+@AutoService(Instrumenter.class)\n+public class PromiseObjectInstrumentation210 extends Instrumenter.Tracing {\n+\n+  public PromiseObjectInstrumentation210() {\n+    super(\"scala_promise_resolve\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MDAxMA==", "bodyText": "Yes again \ud83d\ude09 I'll add comments in the code.", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557360010", "createdAt": "2021-01-14T12:29:06Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation210.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.concurrent.impl.CallbackRunnable;\n+import scala.util.Try;\n+\n+/**\n+ * A Scala {@code Promise} is always completed with a {@code Try}, so if we want the completing span\n+ * to take priority over any spans captured while adding computations to a {@code Future} associated\n+ * with a {@code Promise}, then we capture the active span when the {@code Try} is resolved.\n+ */\n+@AutoService(Instrumenter.class)\n+public class PromiseObjectInstrumentation210 extends Instrumenter.Tracing {\n+\n+  public PromiseObjectInstrumentation210() {\n+    super(\"scala_promise_resolve\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0MTEzMQ=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk1NjQ3OnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMTo1OTowNlrOIThkeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoyMDo1N1rOITiSug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0Mzg2NQ==", "bodyText": "I assume these muzzle checks weren't needed because the instrumentation already refers to Promise.Transformation and will be muzzled when that's not available", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557343865", "createdAt": "2021-01-14T11:59:06Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "diffHunk": "@@ -111,34 +112,36 @@ private static void muzzleCheck(final Transformation callback) {\n         state.closeContinuation();\n       }\n     }\n-\n-    /** Promise.Transformation was introduced in scala 2.13 */\n-    private static void muzzleCheck(final Transformation callback) {\n-      callback.submitWithValue(null);\n-    }\n   }\n \n   public static final class SubmitWithValue {\n     @Advice.OnMethodEnter\n-    public static <F, T> void beforeExecute(@Advice.This Transformation<F, T> task) {\n+    public static <F, T> void beforeExecute(\n+        @Advice.This Transformation<F, T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(Transformation.class, State.class).get(task);\n+      ContextStore<Transformation, State> tStore =\n+          InstrumentationContext.get(Transformation.class, State.class);\n+      State state = tStore.get(task);\n+      if (PromiseHelper.completionPriority) {\n+        final AgentSpan span = InstrumentationContext.get(Try.class, AgentSpan.class).get(resolved);\n+        State oState = state;\n+        state = PromiseHelper.handleSpan(span, state);\n+        if (state != oState) {\n+          tStore.put(task, state);\n+        }\n+      }\n+      // If nothing else has been picked up, then try to pick up the current Scope\n       if (null == state) {\n         final TraceScope scope = activeScope();\n         if (scope != null) {\n           state = State.FACTORY.create();\n           state.captureAndSetContinuation(scope);\n-          InstrumentationContext.get(Transformation.class, State.class).put(task, state);\n+          tStore.put(task, state);\n         }\n       }\n     }\n-\n-    /** Promise.Transformation was introduced in scala 2.13 */\n-    private static void muzzleCheck(final Transformation callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1NTcwNg==", "bodyText": "Exactly", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557355706", "createdAt": "2021-01-14T12:20:57Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "diffHunk": "@@ -111,34 +112,36 @@ private static void muzzleCheck(final Transformation callback) {\n         state.closeContinuation();\n       }\n     }\n-\n-    /** Promise.Transformation was introduced in scala 2.13 */\n-    private static void muzzleCheck(final Transformation callback) {\n-      callback.submitWithValue(null);\n-    }\n   }\n \n   public static final class SubmitWithValue {\n     @Advice.OnMethodEnter\n-    public static <F, T> void beforeExecute(@Advice.This Transformation<F, T> task) {\n+    public static <F, T> void beforeExecute(\n+        @Advice.This Transformation<F, T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(Transformation.class, State.class).get(task);\n+      ContextStore<Transformation, State> tStore =\n+          InstrumentationContext.get(Transformation.class, State.class);\n+      State state = tStore.get(task);\n+      if (PromiseHelper.completionPriority) {\n+        final AgentSpan span = InstrumentationContext.get(Try.class, AgentSpan.class).get(resolved);\n+        State oState = state;\n+        state = PromiseHelper.handleSpan(span, state);\n+        if (state != oState) {\n+          tStore.put(task, state);\n+        }\n+      }\n+      // If nothing else has been picked up, then try to pick up the current Scope\n       if (null == state) {\n         final TraceScope scope = activeScope();\n         if (scope != null) {\n           state = State.FACTORY.create();\n           state.captureAndSetContinuation(scope);\n-          InstrumentationContext.get(Transformation.class, State.class).put(task, state);\n+          tStore.put(task, state);\n         }\n       }\n     }\n-\n-    /** Promise.Transformation was introduced in scala 2.13 */\n-    private static void muzzleCheck(final Transformation callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0Mzg2NQ=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk3OTk2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowNTozMVrOIThyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoyODowM1rOITihNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0NzM5MQ==", "bodyText": "I'm not sure about this change because it replaces something that was clear (enabled) with something less clear - ie. defaultEnabled is not the same as defaultEnabled() and is not actually the \"default\" , but a combination of the default with a configuration override.\nAFAICT this change is just so the scala instrumentations can see if the instrumentation is enabled from the POV of the base class - is there a reason they can't use super.enabled() to do that?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557347391", "createdAt": "2021-01-14T12:05:31Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -86,7 +86,7 @@\n     private final String instrumentationPrimaryName;\n     private InstrumentationContextProvider contextProvider;\n     private boolean initialized;\n-    private final boolean enabled;\n+    protected final boolean defaultEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1OTQxMw==", "bodyText": "Sure, I can change it back to enabled. I can see how confusing defaultEnabled is, even though enabled is a bit misleading as well.", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557359413", "createdAt": "2021-01-14T12:28:03Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -86,7 +86,7 @@\n     private final String instrumentationPrimaryName;\n     private InstrumentationContextProvider contextProvider;\n     private boolean initialized;\n-    private final boolean enabled;\n+    protected final boolean defaultEnabled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0NzM5MQ=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk5MDYyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowODoyMlrOITh4cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowODoyMlrOITh4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0ODk3Nw==", "bodyText": "this change is fine, but I think the other changes in this file are unnecessary given subclasses can call super.isEnabled() to get the enabled state of the base class which they can then override in their isEnabled method", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557348977", "createdAt": "2021-01-14T12:08:22Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Instrumenter.java", "diffHunk": "@@ -135,7 +135,7 @@ private void lazyInit() {\n \n     @Override\n     public final AgentBuilder instrument(final AgentBuilder parentAgentBuilder) {\n-      if (!enabled) {\n+      if (!isEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk5MzE1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation213.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowOTowM1rOITh56Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowOTowM1rOITh56Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0OTM1Mw==", "bodyText": "super.isEnabled() ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557349353", "createdAt": "2021-01-14T12:09:03Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation213.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static scala.concurrent.impl.Promise.Transformation;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.util.Try;\n+\n+/**\n+ * A Scala {@code Promise} is always completed with a {@code Try}, so if we want the completing span\n+ * to take priority over any spans captured while adding computations to a {@code Future} associated\n+ * with a {@code Promise}, then we capture the active span when the {@code Try} is resolved.\n+ */\n+@AutoService(Instrumenter.class)\n+public class PromiseObjectInstrumentation213 extends Instrumenter.Tracing {\n+\n+  public PromiseObjectInstrumentation213() {\n+    super(\"scala_promise_resolve\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"scala.util.Try\", AgentSpan.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod().and(named(\"scala$concurrent$impl$Promise$$resolve\")),\n+        getClass().getName() + \"$Resolve\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\"datadog.trace.instrumentation.scala.PromiseHelper\"};\n+  }\n+\n+  @Override\n+  public boolean isEnabled() {\n+    // Only enable this if integrations have been enabled and the extra \"integration\"\n+    // scala_promise_completion_priority has been enabled specifically\n+    return defaultEnabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk5NTI0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowOTozOVrOITh7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowOTozOVrOITh7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0OTcwNA==", "bodyText": "contextStore ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557349704", "createdAt": "2021-01-14T12:09:39Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "diffHunk": "@@ -111,34 +112,36 @@ private static void muzzleCheck(final Transformation callback) {\n         state.closeContinuation();\n       }\n     }\n-\n-    /** Promise.Transformation was introduced in scala 2.13 */\n-    private static void muzzleCheck(final Transformation callback) {\n-      callback.submitWithValue(null);\n-    }\n   }\n \n   public static final class SubmitWithValue {\n     @Advice.OnMethodEnter\n-    public static <F, T> void beforeExecute(@Advice.This Transformation<F, T> task) {\n+    public static <F, T> void beforeExecute(\n+        @Advice.This Transformation<F, T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(Transformation.class, State.class).get(task);\n+      ContextStore<Transformation, State> tStore =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODk5NjIyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowOTo1M1rOITh70w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjowOTo1M1rOITh70w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM0OTg0Mw==", "bodyText": "oldState ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557349843", "createdAt": "2021-01-14T12:09:53Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "diffHunk": "@@ -111,34 +112,36 @@ private static void muzzleCheck(final Transformation callback) {\n         state.closeContinuation();\n       }\n     }\n-\n-    /** Promise.Transformation was introduced in scala 2.13 */\n-    private static void muzzleCheck(final Transformation callback) {\n-      callback.submitWithValue(null);\n-    }\n   }\n \n   public static final class SubmitWithValue {\n     @Advice.OnMethodEnter\n-    public static <F, T> void beforeExecute(@Advice.This Transformation<F, T> task) {\n+    public static <F, T> void beforeExecute(\n+        @Advice.This Transformation<F, T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(Transformation.class, State.class).get(task);\n+      ContextStore<Transformation, State> tStore =\n+          InstrumentationContext.get(Transformation.class, State.class);\n+      State state = tStore.get(task);\n+      if (PromiseHelper.completionPriority) {\n+        final AgentSpan span = InstrumentationContext.get(Try.class, AgentSpan.class).get(resolved);\n+        State oState = state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTAwMjQzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/DefaultPromiseInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxMTo0M1rOITh_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxMTo0M1rOITh_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1MDgxOQ==", "bodyText": "super.isEnabled() ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557350819", "createdAt": "2021-01-14T12:11:43Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/DefaultPromiseInstrumentation.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static scala.concurrent.impl.Promise.Transformation;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.util.Try;\n+\n+/**\n+ * In Scala 2.13+ there is shortcut that bypass the call to {@code resolve} for a {@code Try} when\n+ * we know that the value is already resolved, i.e. for some transformations like {@code map}, so\n+ * only pick up the completing span if the resolved {@code Try} doesn't have a an existing span set\n+ * from the {@code resolve} method.\n+ */\n+@AutoService(Instrumenter.class)\n+public class DefaultPromiseInstrumentation extends Instrumenter.Tracing {\n+\n+  public DefaultPromiseInstrumentation() {\n+    super(\"scala_promise_complete\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$DefaultPromise\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"scala.util.Try\", AgentSpan.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod().and(named(\"tryComplete0\")), getClass().getName() + \"$TryComplete\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\"datadog.trace.instrumentation.scala.PromiseHelper\"};\n+  }\n+\n+  @Override\n+  public boolean isEnabled() {\n+    // Only enable this if integrations have been enabled and the extra \"integration\"\n+    // scala_promise_completion_priority has been enabled specifically\n+    return defaultEnabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTAwNTEyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation210.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxMjozNlrOITiBVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxMjozNlrOITiBVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1MTI1NQ==", "bodyText": "super.isEnabled() ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557351255", "createdAt": "2021-01-14T12:12:36Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseObjectInstrumentation210.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package datadog.trace.instrumentation.scala.concurrent;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.bootstrap.ContextStore;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.instrumentation.scala.PromiseHelper;\n+import java.util.Collections;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import scala.concurrent.impl.CallbackRunnable;\n+import scala.util.Try;\n+\n+/**\n+ * A Scala {@code Promise} is always completed with a {@code Try}, so if we want the completing span\n+ * to take priority over any spans captured while adding computations to a {@code Future} associated\n+ * with a {@code Promise}, then we capture the active span when the {@code Try} is resolved.\n+ */\n+@AutoService(Instrumenter.class)\n+public class PromiseObjectInstrumentation210 extends Instrumenter.Tracing {\n+\n+  public PromiseObjectInstrumentation210() {\n+    super(\"scala_promise_resolve\", \"scala_concurrent\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"scala.concurrent.impl.Promise$\");\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"scala.util.Try\", AgentSpan.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return Collections.singletonMap(\n+        isMethod().and(named(\"scala$concurrent$impl$Promise$$resolveTry\")),\n+        getClass().getName() + \"$ResolveTry\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\"datadog.trace.instrumentation.scala.PromiseHelper\"};\n+  }\n+\n+  @Override\n+  public boolean isEnabled() {\n+    // Only enable this if integrations have been enabled and the extra \"integration\"\n+    // scala_promise_completion_priority has been enabled specifically\n+    return defaultEnabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTAwOTQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/CallbackRunnableInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxMzo1N1rOITiEDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjozMjo0N1rOITirRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1MTk1MA==", "bodyText": "contextStore ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557351950", "createdAt": "2021-01-14T12:13:57Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/CallbackRunnableInstrumentation.java", "diffHunk": "@@ -93,18 +104,30 @@ public static void after(@Advice.Enter TraceScope scope) {\n \n   public static final class ExecuteWithValue {\n     @Advice.OnMethodEnter\n-    public static <T> void beforeExecute(@Advice.This CallbackRunnable<T> task) {\n+    public static <T> void beforeExecute(\n+        @Advice.This CallbackRunnable<T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(CallbackRunnable.class, State.class).get(task);\n+      ContextStore<CallbackRunnable, State> rStore =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1NzU3Nw==", "bodyText": "I have different names here for tStore and rStore to separate them. Having two named contextStore would just be confusing to me.", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557357577", "createdAt": "2021-01-14T12:24:39Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/CallbackRunnableInstrumentation.java", "diffHunk": "@@ -93,18 +104,30 @@ public static void after(@Advice.Enter TraceScope scope) {\n \n   public static final class ExecuteWithValue {\n     @Advice.OnMethodEnter\n-    public static <T> void beforeExecute(@Advice.This CallbackRunnable<T> task) {\n+    public static <T> void beforeExecute(\n+        @Advice.This CallbackRunnable<T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(CallbackRunnable.class, State.class).get(task);\n+      ContextStore<CallbackRunnable, State> rStore =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1MTk1MA=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MTk4OQ==", "bodyText": "Ignore that comment. I see now that refactoring has removed that. I'll change it to contextStore", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557361989", "createdAt": "2021-01-14T12:32:47Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/CallbackRunnableInstrumentation.java", "diffHunk": "@@ -93,18 +104,30 @@ public static void after(@Advice.Enter TraceScope scope) {\n \n   public static final class ExecuteWithValue {\n     @Advice.OnMethodEnter\n-    public static <T> void beforeExecute(@Advice.This CallbackRunnable<T> task) {\n+    public static <T> void beforeExecute(\n+        @Advice.This CallbackRunnable<T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(CallbackRunnable.class, State.class).get(task);\n+      ContextStore<CallbackRunnable, State> rStore =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1MTk1MA=="}, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwOTAxMTQ4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/CallbackRunnableInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxNDozNFrOITiFQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjoxNDozNFrOITiFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM1MjI1Ng==", "bodyText": "oldState ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2233#discussion_r557352256", "createdAt": "2021-01-14T12:14:34Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise/scala-promise-2.10/src/main/java/datadog/trace/instrumentation/scala/concurrent/CallbackRunnableInstrumentation.java", "diffHunk": "@@ -93,18 +104,30 @@ public static void after(@Advice.Enter TraceScope scope) {\n \n   public static final class ExecuteWithValue {\n     @Advice.OnMethodEnter\n-    public static <T> void beforeExecute(@Advice.This CallbackRunnable<T> task) {\n+    public static <T> void beforeExecute(\n+        @Advice.This CallbackRunnable<T> task, @Advice.Argument(value = 0) Try<T> resolved) {\n       // about to enter an ExecutionContext so capture the scope if necessary\n       // (this used to happen automatically when the RunnableInstrumentation\n       // was relied on, and happens anyway if the ExecutionContext is backed\n       // by a wrapping Executor (e.g. FJP, ScheduledThreadPoolExecutor)\n-      State state = InstrumentationContext.get(CallbackRunnable.class, State.class).get(task);\n+      ContextStore<CallbackRunnable, State> rStore =\n+          InstrumentationContext.get(CallbackRunnable.class, State.class);\n+      State state = rStore.get(task);\n+      if (PromiseHelper.completionPriority) {\n+        final AgentSpan span = InstrumentationContext.get(Try.class, AgentSpan.class).get(resolved);\n+        State oState = state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a8c43af3fe4924294e6e7fdee9849ffbc35879"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4570, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}