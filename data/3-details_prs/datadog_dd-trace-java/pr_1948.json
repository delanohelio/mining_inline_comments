{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3Nzc1MzE2", "number": 1948, "title": "fix akka/scala FJP internal push context propagation", "bodyText": "Our tests for FJP context propagation only ever test the case where the work gets stolen by the pushing thread, i.e. whenever tasks were invoked on another thread, context would fail to propagate.\nThis fixes this by instrumenting ForkJoinTask's lifecycle, and instrumenting ForkJoinPool.externalPush, and not attempting to handle FJPs with executor instrumentation.\nThis PR currently breaks a CompletableFuture test (thenComposeAsyc) but I expect this should be fixed by correct CF instrumentation.", "createdAt": "2020-10-05T11:09:47Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1948", "merged": true, "mergeCommit": {"oid": "6c70c44223c087e423516245615e429230c53480"}, "closed": true, "closedAt": "2020-10-05T19:00:10Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPh1RMgBqjM4Mzk4NjU3MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP7q0WAFqTUwMzE5MDI4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8db647e20ddc7202669a0e8b8723a0891a8bedd7", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8db647e20ddc7202669a0e8b8723a0891a8bedd7", "committedDate": "2020-10-05T11:05:56Z", "message": "fix context propagation with internal push in Scala FJP"}, "afterCommit": {"oid": "1f80a9c58e95f48f20cec115e036b77aa44b093d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1f80a9c58e95f48f20cec115e036b77aa44b093d", "committedDate": "2020-10-05T11:10:58Z", "message": "fix context propagation with internal push in Scala FJP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTgyNzgz", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#pullrequestreview-501982783", "createdAt": "2020-10-05T11:59:40Z", "commit": {"oid": "1f80a9c58e95f48f20cec115e036b77aa44b093d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTEwMjE5", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#pullrequestreview-502110219", "createdAt": "2020-10-05T14:24:35Z", "commit": {"oid": "1f80a9c58e95f48f20cec115e036b77aa44b093d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f80a9c58e95f48f20cec115e036b77aa44b093d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1f80a9c58e95f48f20cec115e036b77aa44b093d", "committedDate": "2020-10-05T11:10:58Z", "message": "fix context propagation with internal push in Scala FJP"}, "afterCommit": {"oid": "3a26d79fab1177baceccc8477a1905f1f5d14c13", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3a26d79fab1177baceccc8477a1905f1f5d14c13", "committedDate": "2020-10-05T16:22:12Z", "message": "fix context propagation with internal push in Scala FJP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a26d79fab1177baceccc8477a1905f1f5d14c13", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3a26d79fab1177baceccc8477a1905f1f5d14c13", "committedDate": "2020-10-05T16:22:12Z", "message": "fix context propagation with internal push in Scala FJP"}, "afterCommit": {"oid": "af753130d6b953f34fe1582716cc8d6d535129fd", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/af753130d6b953f34fe1582716cc8d6d535129fd", "committedDate": "2020-10-05T16:48:13Z", "message": "fix context propagation with internal push in Scala FJP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af753130d6b953f34fe1582716cc8d6d535129fd", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/af753130d6b953f34fe1582716cc8d6d535129fd", "committedDate": "2020-10-05T16:48:13Z", "message": "fix context propagation with internal push in Scala FJP"}, "afterCommit": {"oid": "6d9f43aca0eda438826eff65d85c9f8d0786ba4c", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6d9f43aca0eda438826eff65d85c9f8d0786ba4c", "committedDate": "2020-10-05T17:06:07Z", "message": "fix context propagation with internal push in Scala FJP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245fef70eeabf6f494583a1a60bc71b103e430e8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/245fef70eeabf6f494583a1a60bc71b103e430e8", "committedDate": "2020-10-05T17:18:43Z", "message": "demonstrate that context does not propagate with FJP internal pushes (Akka)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "930ad009e832c9486428c75a01b3c065d547dae1", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/930ad009e832c9486428c75a01b3c065d547dae1", "committedDate": "2020-10-05T17:18:43Z", "message": "demonstrate that context does not propagate with FJP internal pushes (Scala)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a10a93ca91ab82cf4dab3ab85533c8bbda838710", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a10a93ca91ab82cf4dab3ab85533c8bbda838710", "committedDate": "2020-10-05T17:18:43Z", "message": "fix context propagation with internal push in Akka FJP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7402cb0e3d94b359edf994061eaaea9fca0844b8", "committedDate": "2020-10-05T17:18:43Z", "message": "fix context propagation with internal push in Scala FJP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d9f43aca0eda438826eff65d85c9f8d0786ba4c", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6d9f43aca0eda438826eff65d85c9f8d0786ba4c", "committedDate": "2020-10-05T17:06:07Z", "message": "fix context propagation with internal push in Scala FJP"}, "afterCommit": {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7402cb0e3d94b359edf994061eaaea9fca0844b8", "committedDate": "2020-10-05T17:18:43Z", "message": "fix context propagation with internal push in Scala FJP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc1NzA1", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#pullrequestreview-502275705", "createdAt": "2020-10-05T17:35:43Z", "commit": {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozNTo0M1rOHcnF2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozNTo0M1rOHcnF2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2MjY1MA==", "bodyText": "I don't recall for sure, but I think ByteBuddy might not call this when there's an exception and you don't have an onThrowable declaration.", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r499762650", "createdAt": "2020-10-05T17:35:43Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/main/java/datadog/trace/instrumentation/akka/concurrent/AkkaForkJoinTaskInstrumentation.java", "diffHunk": "@@ -37,90 +29,69 @@\n @AutoService(Instrumenter.class)\n public final class AkkaForkJoinTaskInstrumentation extends Instrumenter.Default {\n \n-  static final String TASK_CLASS_NAME = \"akka.dispatch.forkjoin.ForkJoinTask\";\n-\n-  static final ElementMatcher<ClassLoader> CLASS_LOADER_MATCHER = hasClassesNamed(TASK_CLASS_NAME);\n-\n   public AkkaForkJoinTaskInstrumentation() {\n     super(\"java_concurrent\", \"akka_concurrent\");\n   }\n \n-  @Override\n-  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n-    // Optimization for expensive typeMatcher.\n-    return CLASS_LOADER_MATCHER;\n-  }\n-\n-  @Override\n-  public ElementMatcher<TypeDescription> typeMatcher() {\n-    return extendsClass(named(TASK_CLASS_NAME));\n-  }\n-\n   @Override\n   public Map<String, String> contextStore() {\n-    return singletonMap(TASK_CLASS_NAME, State.class.getName());\n+    return singletonMap(\"akka.dispatch.forkjoin.ForkJoinTask\", State.class.getName());\n   }\n \n   @Override\n-  public Map<String, String> contextStoreForAll() {\n-    final Map<String, String> map = new HashMap<>();\n-    map.put(Runnable.class.getName(), State.class.getName());\n-    map.put(Callable.class.getName(), State.class.getName());\n-    return Collections.unmodifiableMap(map);\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return named(\"akka.dispatch.forkjoin.ForkJoinTask\");\n   }\n \n   @Override\n   public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n-    return singletonMap(\n-        named(\"exec\").and(takesArguments(0)).and(not(isAbstract())),\n-        AkkaForkJoinTaskInstrumentation.class.getName() + \"$ForkJoinTaskAdvice\");\n+    Map<ElementMatcher<MethodDescription>, String> transformers = new HashMap<>(4);\n+    transformers.put(isMethod().and(named(\"doExec\")), getClass().getName() + \"$DoExec\");\n+    transformers.put(isMethod().and(named(\"fork\")), getClass().getName() + \"$Fork\");\n+    transformers.put(isMethod().and(named(\"cancel\")), getClass().getName() + \"$Cancel\");\n+    return transformers;\n   }\n \n-  public static class ForkJoinTaskAdvice {\n-\n-    /**\n-     * When {@link ForkJoinTask} object is submitted to {@link ForkJoinPool} as {@link Runnable} or\n-     * {@link Callable} it will not get wrapped, instead it will be casted to {@code ForkJoinTask}\n-     * directly. This means state is still stored in {@code Runnable} or {@code Callable} and we\n-     * need to use that state.\n-     */\n-    @Advice.OnMethodEnter(suppress = Throwable.class)\n-    public static TraceScope enter(@Advice.This final ForkJoinTask thiz) {\n-      final ContextStore<ForkJoinTask, State> contextStore =\n-          InstrumentationContext.get(ForkJoinTask.class, State.class);\n-      TraceScope scope = AdviceUtils.startTaskScope(contextStore, thiz);\n-      if (thiz instanceof Runnable) {\n-        final ContextStore<Runnable, State> runnableContextStore =\n-            InstrumentationContext.get(Runnable.class, State.class);\n-        final TraceScope newScope =\n-            AdviceUtils.startTaskScope(runnableContextStore, (Runnable) thiz);\n-        if (null != newScope) {\n-          if (null != scope) {\n-            newScope.close();\n-          } else {\n-            scope = newScope;\n-          }\n+  public static final class DoExec {\n+    @Advice.OnMethodEnter\n+    public static <T> TraceScope before(@Advice.This ForkJoinTask<T> task) {\n+      State state = InstrumentationContext.get(ForkJoinTask.class, State.class).get(task);\n+      if (null != state) {\n+        TraceScope.Continuation continuation = state.getAndResetContinuation();\n+        if (null != continuation) {\n+          return continuation.activate();\n         }\n       }\n-      if (thiz instanceof Callable) {\n-        final ContextStore<Callable, State> callableContextStore =\n-            InstrumentationContext.get(Callable.class, State.class);\n-        final TraceScope newScope =\n-            AdviceUtils.startTaskScope(callableContextStore, (Callable) thiz);\n-        if (null != newScope) {\n-          if (null != scope) {\n-            newScope.close();\n-          } else {\n-            scope = newScope;\n-          }\n-        }\n+      return null;\n+    }\n+\n+    @Advice.OnMethodExit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjc2ODc0", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#pullrequestreview-502276874", "createdAt": "2020-10-05T17:37:25Z", "commit": {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjgxMDYy", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#pullrequestreview-502281062", "createdAt": "2020-10-05T17:43:23Z", "commit": {"oid": "7402cb0e3d94b359edf994061eaaea9fca0844b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43c504c36d2d27a86d931f11a50deed3ef62beba", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/43c504c36d2d27a86d931f11a50deed3ef62beba", "committedDate": "2020-10-05T18:28:51Z", "message": "make sure exit blocks always execute"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTkwMjg1", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#pullrequestreview-503190285", "createdAt": "2020-10-06T17:17:16Z", "commit": {"oid": "43c504c36d2d27a86d931f11a50deed3ef62beba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxNzoxNlrOHdSBIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxNzoxNlrOHdSBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NTk1Mg==", "bodyText": "Nice, I was going to ask how to test this.  Glad to see that we've already thought about it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1948#discussion_r500465952", "createdAt": "2020-10-06T17:17:16Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/akka-concurrent/src/test/java/LinearTask.java", "diffHunk": "@@ -0,0 +1,45 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+\n+import akka.dispatch.forkjoin.RecursiveTask;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+\n+public class LinearTask extends RecursiveTask<Integer> {\n+  private final int depth;\n+  private final int parent;\n+\n+  public LinearTask(int depth) {\n+    this(0, depth);\n+  }\n+\n+  private LinearTask(int parent, int depth) {\n+    this.parent = parent;\n+    this.depth = depth;\n+  }\n+\n+  @Override\n+  protected Integer compute() {\n+    try {\n+      // introduces delay to encourage parallelism\n+      // which will expose problems with context propagation\n+      Thread.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43c504c36d2d27a86d931f11a50deed3ef62beba"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}