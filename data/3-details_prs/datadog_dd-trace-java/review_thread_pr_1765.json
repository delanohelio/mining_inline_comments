{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjM5ODIx", "number": 1765, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0NDoxMlrOEXkm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTowMjo1MVrOEXk9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTUyNDczOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakMapSuppliers.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDo0NDoxMlrOG_b1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1NDo1NlrOG_f9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2OTQ0Mg==", "bodyText": "Spreading the synchronized. Nice.\nMaybe a comment about the & only working as expected since locks.length is a power of 2.\nOh, and looking at the WeakConcurrentMap it uses System.identityHashCode(key) and not key.hashCode(). I don't think that should cause any issues, since equality is also reference equality.", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469169442", "createdAt": "2020-08-12T10:44:12Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakMapSuppliers.java", "diffHunk": "@@ -92,36 +100,28 @@ public void putIfAbsent(final K key, final V value) {\n \n       @Override\n       public V computeIfAbsent(final K key, final ValueSupplier<? super K, ? extends V> supplier) {\n-        if (map.containsKey(key)) {\n-          return map.get(key);\n-        }\n-\n-        synchronized (this) {\n-          if (map.containsKey(key)) {\n-            return map.get(key);\n-          } else {\n-            final V value = supplier.get(key);\n-\n-            map.put(key, value);\n-            return value;\n+        // We can't use computeIfAbsent since it was added in 1.8.\n+        V value = map.get(key);\n+        if (null == value) {\n+          int bucket = key.hashCode() & (locks.length - 1);\n+          synchronized (locks[bucket]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4ODEzOA==", "bodyText": "The aim here is to linearise a sequence of non-atomic operations on the same key, so which hash code is used shouldn't matter, even though the object's hash code is coarser than its identity hash code (also, an identity hash code won't spread well modulo 16 since I believe it's derived from an aligned native address), and this just happens to be less coarse than synchronized(this) except in degenerate cases.", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469188138", "createdAt": "2020-08-12T11:24:21Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakMapSuppliers.java", "diffHunk": "@@ -92,36 +100,28 @@ public void putIfAbsent(final K key, final V value) {\n \n       @Override\n       public V computeIfAbsent(final K key, final ValueSupplier<? super K, ? extends V> supplier) {\n-        if (map.containsKey(key)) {\n-          return map.get(key);\n-        }\n-\n-        synchronized (this) {\n-          if (map.containsKey(key)) {\n-            return map.get(key);\n-          } else {\n-            final V value = supplier.get(key);\n-\n-            map.put(key, value);\n-            return value;\n+        // We can't use computeIfAbsent since it was added in 1.8.\n+        V value = map.get(key);\n+        if (null == value) {\n+          int bucket = key.hashCode() & (locks.length - 1);\n+          synchronized (locks[bucket]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2OTQ0Mg=="}, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNDU2Mg==", "bodyText": "I am investigating if this is causing the test failures.", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469224562", "createdAt": "2020-08-12T12:32:21Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakMapSuppliers.java", "diffHunk": "@@ -92,36 +100,28 @@ public void putIfAbsent(final K key, final V value) {\n \n       @Override\n       public V computeIfAbsent(final K key, final ValueSupplier<? super K, ? extends V> supplier) {\n-        if (map.containsKey(key)) {\n-          return map.get(key);\n-        }\n-\n-        synchronized (this) {\n-          if (map.containsKey(key)) {\n-            return map.get(key);\n-          } else {\n-            final V value = supplier.get(key);\n-\n-            map.put(key, value);\n-            return value;\n+        // We can't use computeIfAbsent since it was added in 1.8.\n+        V value = map.get(key);\n+        if (null == value) {\n+          int bucket = key.hashCode() & (locks.length - 1);\n+          synchronized (locks[bucket]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2OTQ0Mg=="}, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNzE1MQ==", "bodyText": "I don't think the error came from the lock striping but possibly from the semantics of WeakMap. Will put the striping back in now.", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469237151", "createdAt": "2020-08-12T12:54:56Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/WeakMapSuppliers.java", "diffHunk": "@@ -92,36 +100,28 @@ public void putIfAbsent(final K key, final V value) {\n \n       @Override\n       public V computeIfAbsent(final K key, final ValueSupplier<? super K, ? extends V> supplier) {\n-        if (map.containsKey(key)) {\n-          return map.get(key);\n-        }\n-\n-        synchronized (this) {\n-          if (map.containsKey(key)) {\n-            return map.get(key);\n-          } else {\n-            final V value = supplier.get(key);\n-\n-            map.put(key, value);\n-            return value;\n+        // We can't use computeIfAbsent since it was added in 1.8.\n+        V value = map.get(key);\n+        if (null == value) {\n+          int bucket = key.hashCode() & (locks.length - 1);\n+          synchronized (locks[bucket]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2OTQ0Mg=="}, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTU4MTc1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/netty-4.0/src/main/java/datadog/trace/instrumentation/netty40/AttributeKeys.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTowMjo1MVrOG_cYDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoxNzoyM1rOG_ejFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3ODM4MQ==", "bodyText": "I'm not sure that I follow this comment. This is a WeakMap from ClassLoader to ConcurrentHashMap. What is synchronized in this?", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469178381", "createdAt": "2020-08-12T11:02:51Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/main/java/datadog/trace/instrumentation/netty40/AttributeKeys.java", "diffHunk": "@@ -10,8 +10,9 @@\n import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n+  // TODO why are we using what is essentially a synchronized hashmap here?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4NTUzNQ==", "bodyText": "If you look at the implementation, it's not what you might have hoped for:\n  interface Implementation {\n    <K, V> WeakMap<K, V> get();\n\n    Implementation DEFAULT = new Default();\n\n    @Slf4j\n    class Default implements Implementation {\n\n      @Override\n      public <K, V> WeakMap<K, V> get() {\n        log.debug(\"WeakMap.Supplier not registered. Returning a synchronized WeakHashMap.\");\n        return new MapAdapter<>(Collections.synchronizedMap(new WeakHashMap<K, V>()));\n      }\n    }\n  }", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469185535", "createdAt": "2020-08-12T11:18:45Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/main/java/datadog/trace/instrumentation/netty40/AttributeKeys.java", "diffHunk": "@@ -10,8 +10,9 @@\n import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n+  // TODO why are we using what is essentially a synchronized hashmap here?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3ODM4MQ=="}, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMzk3NQ==", "bodyText": "Doh! I missed that it was using WeakMap.Implementation.DEFAULT.get()", "url": "https://github.com/DataDog/dd-trace-java/pull/1765#discussion_r469213975", "createdAt": "2020-08-12T12:17:23Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/main/java/datadog/trace/instrumentation/netty40/AttributeKeys.java", "diffHunk": "@@ -10,8 +10,9 @@\n import java.util.concurrent.ConcurrentMap;\n \n public class AttributeKeys {\n+  // TODO why are we using what is essentially a synchronized hashmap here?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE3ODM4MQ=="}, "originalCommit": {"oid": "32f29a4c2214934be76975b41a2d702c53fb6ec4"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 18, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}