{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTI1ODg2", "number": 1578, "title": "Iterate type interfaces without materialising a list during super type matching", "bodyText": "reduces allocation during type matching at startup.\nEvaluation:\nrun spring pet-clinic with -XX:+UnlockExperimentalVMOptions -XX:+UseEpsilonGC -mx1G -XX:+HeapDumpOnOutOfMemoryError to capture every allocated object in the first GB allocated. Results in reduction in ArrayList allocations by 1% of total (4th most commonly allocated object during startup)\nbefore:\njava.util.ArrayList           636,997 (4.1%)     20,383,904 B (1.6%)\nafter:\njava.util.ArrayList           484,917   (3%)     15,517,344 B (1.2%)\n\nSome tests weren't actually testing handling of an exception thrown during iteration, but simulated this by throwing on the getInterfaces() call - I fixed those.", "createdAt": "2020-06-12T07:56:27Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1578", "merged": true, "mergeCommit": {"oid": "0b935ed63cbeaf21dd0408a8fabe2ab1cd8751ca"}, "closed": true, "closedAt": "2020-06-12T16:33:07Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqeX0OABqjM0Mzc0MDA3NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqksjigBqjM0Mzg5MzE3NzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ae4e0a4f6854b5110fafbe93d8d6167356b4868", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4ae4e0a4f6854b5110fafbe93d8d6167356b4868", "committedDate": "2020-06-12T07:20:54Z", "message": "reduce allocation during type matching"}, "afterCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a550113bc25280eab7c48a1f10fe7e8b755d0676", "committedDate": "2020-06-12T08:13:53Z", "message": "reduce allocation during type matching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTQ5Nzk1", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#pullrequestreview-429549795", "createdAt": "2020-06-12T08:17:42Z", "commit": {"oid": "4ae4e0a4f6854b5110fafbe93d8d6167356b4868"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxODowMlrOGi7TUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyNTowM1rOGi7g0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NjM2OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439276369", "createdAt": "2020-06-12T08:18:02Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/HasSuperMethodMatcher.java", "diffHunk": "@@ -48,8 +49,7 @@ private boolean matchesInterface(\n       final Junction<MethodDescription> signatureMatcher,\n       final Set<TypeDefinition> checkedInterfaces) {\n     for (final TypeDefinition type : interfaces) {\n-      if (!checkedInterfaces.contains(type)) {\n-        checkedInterfaces.add(type);\n+      if (checkedInterfaces.add(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODEzMw==", "bodyText": "This looks suspicious - IINM it is valid to call it.next(); it.next(); it.next(); and expect to get the next value on each invocation (or get an exception). But here calling next() without hasNext() being called first will return still the same element.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439278133", "createdAt": "2020-06-12T08:21:40Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODQ4Mw==", "bodyText": "What about throwing UnsupportedOperationException to make it totally clear that this method is not supposed to be called at all.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439278483", "createdAt": "2020-06-12T08:22:22Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;\n+        } catch (Exception e) {\n+          if (log.isDebugEnabled()) {\n+            log.debug(\n+                \"{} trying to get interfaces for target {}: {}\",\n+                e.getClass().getSimpleName(),\n+                safeTypeDefinitionName(typeDefinition),\n+                e.getMessage());\n+          }\n+          return false;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public TypeDefinition next() {\n+      return next;\n+    }\n+\n+    @Override\n+    public void remove() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODk2Mw==", "bodyText": "Nit: maybe final to discourage brave souls extending this class?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439278963", "createdAt": "2020-06-12T08:23:18Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public class TypeComparators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTMzNw==", "bodyText": "Is it ok not to do null check?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439279337", "createdAt": "2020-06-12T08:24:00Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTgyNg==", "bodyText": "Nit: Can this be extracted to a custom iterator type?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439279826", "createdAt": "2020-06-12T08:25:03Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/test/groovy/datadog/trace/agent/tooling/bytebuddy/matcher/HasInterfaceMatcherTest.groovy", "diffHunk": "@@ -46,6 +47,20 @@ class HasInterfaceMatcherTest extends DDSpecification {\n     def type = Mock(TypeDescription)\n     def typeGeneric = Mock(TypeDescription.Generic)\n     def matcher = implementsInterface(named(Object.name))\n+    def interfaces = Mock(TypeList.Generic)\n+    def it = new Iterator() {\n+      int i = 0\n+\n+      @Override\n+      boolean hasNext() {\n+        return i++ < 1\n+      }\n+\n+      @Override\n+      Object next() {\n+        throw new Exception(\"iteration exception\")\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a550113bc25280eab7c48a1f10fe7e8b755d0676", "committedDate": "2020-06-12T08:13:53Z", "message": "reduce allocation during type matching"}, "afterCommit": {"oid": "6801e71d1c2d2abb24e9396ef1be754831b5db5a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6801e71d1c2d2abb24e9396ef1be754831b5db5a", "committedDate": "2020-06-12T08:53:59Z", "message": "reduce allocation during type matching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTc5ODA2", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#pullrequestreview-429579806", "createdAt": "2020-06-12T09:03:14Z", "commit": {"oid": "6801e71d1c2d2abb24e9396ef1be754831b5db5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6801e71d1c2d2abb24e9396ef1be754831b5db5a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6801e71d1c2d2abb24e9396ef1be754831b5db5a", "committedDate": "2020-06-12T08:53:59Z", "message": "reduce allocation during type matching"}, "afterCommit": {"oid": "b2bd5e1639603e5ee01a1fd5974d3f61206b31f2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b2bd5e1639603e5ee01a1fd5974d3f61206b31f2", "committedDate": "2020-06-12T09:08:44Z", "message": "reduce allocation during type matching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjMzNDE5", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#pullrequestreview-429633419", "createdAt": "2020-06-12T10:29:27Z", "commit": {"oid": "b2bd5e1639603e5ee01a1fd5974d3f61206b31f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyOToyN1rOGi_Gdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyOToyN1rOGi_Gdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzODYxNQ==", "bodyText": "I know that this comment and behavior is the same as the old one, but maybe clarify that it stops at the first exception.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439338615", "createdAt": "2020-06-12T10:29:27Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,67 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>The caller MUST call hasNext() before calling next().\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2bd5e1639603e5ee01a1fd5974d3f61206b31f2"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjMzNjkz", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#pullrequestreview-429633693", "createdAt": "2020-06-12T10:29:54Z", "commit": {"oid": "b2bd5e1639603e5ee01a1fd5974d3f61206b31f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2bd5e1639603e5ee01a1fd5974d3f61206b31f2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b2bd5e1639603e5ee01a1fd5974d3f61206b31f2", "committedDate": "2020-06-12T09:08:44Z", "message": "reduce allocation during type matching"}, "afterCommit": {"oid": "b5ca36bab7628a4a126fd5439f1741d762cb8d35", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b5ca36bab7628a4a126fd5439f1741d762cb8d35", "committedDate": "2020-06-12T11:59:11Z", "message": "reduce allocation during type matching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODAwMTAx", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#pullrequestreview-429800101", "createdAt": "2020-06-12T14:43:52Z", "commit": {"oid": "b5ca36bab7628a4a126fd5439f1741d762cb8d35"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0Mzo1MlrOGjGp3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0Mzo1MlrOGjGp3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MjM2NA==", "bodyText": "I switched to getName and the :dd-java-agent:instrumentation:netty-4.1:testJava11Generated succeeded locally, while getSimpleName fails.\n    public int compare(TypeDescription o1, TypeDescription o2) {\n      if (o1 == o2) {\n        return 0;\n      }\n\n      return o1.getName().compareTo(o2.getName());\n    }", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439462364", "createdAt": "2020-06-12T14:43:52Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public final class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ca36bab7628a4a126fd5439f1741d762cb8d35"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODIzNDA0", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#pullrequestreview-429823404", "createdAt": "2020-06-12T15:12:19Z", "commit": {"oid": "bf43a0703200cb0f327418c56b249fc97df5715f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf43a0703200cb0f327418c56b249fc97df5715f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bf43a0703200cb0f327418c56b249fc97df5715f", "committedDate": "2020-06-12T14:50:25Z", "message": "try using TypeDescription.getName for comparisons"}, "afterCommit": {"oid": "e8302efc759dc1d811ca22309e4de8d01c7b2418", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e8302efc759dc1d811ca22309e4de8d01c7b2418", "committedDate": "2020-06-12T15:13:23Z", "message": "reduce allocation during type matching"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9527c7742ef1c46bf0e8bf1ede9786f51b0408f9", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9527c7742ef1c46bf0e8bf1ede9786f51b0408f9", "committedDate": "2020-06-12T15:36:01Z", "message": "reduce allocation during type matching"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8302efc759dc1d811ca22309e4de8d01c7b2418", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e8302efc759dc1d811ca22309e4de8d01c7b2418", "committedDate": "2020-06-12T15:13:23Z", "message": "reduce allocation during type matching"}, "afterCommit": {"oid": "9527c7742ef1c46bf0e8bf1ede9786f51b0408f9", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9527c7742ef1c46bf0e8bf1ede9786f51b0408f9", "committedDate": "2020-06-12T15:36:01Z", "message": "reduce allocation during type matching"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2410, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}