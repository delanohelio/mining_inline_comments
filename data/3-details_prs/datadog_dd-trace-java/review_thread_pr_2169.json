{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzE0NjE1", "number": 2169, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNzoxOFrOFEFZOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODozMDowMVrOFGEUsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI3MDAzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/resources/jfr/dd.jfp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNzoxOFrOIECO4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoyMzoxMFrOIECcsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMTc5NQ==", "bodyText": "What's the rationale for changing this threshold?", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r541101795", "createdAt": "2020-12-11T17:17:18Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/resources/jfr/dd.jfp", "diffHunk": "@@ -152,9 +152,9 @@ jdk.TenuringDistribution#enabled=true\n jdk.G1HeapRegionInformation#enabled=false\n jdk.G1HeapRegionInformation#period=everyChunk\n jdk.G1HeapRegionTypeChange#enabled=false\n-jdk.OldObjectSample#enabled=true\n+jdk.OldObjectSample#enabled=false\n jdk.OldObjectSample#stackTrace=true\n-jdk.OldObjectSample#cutoff=0 ms\n+jdk.OldObjectSample#cutoff=100 ms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd6a758cf6b0ab36ea4798c43425764476bdae8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwNTMyOA==", "bodyText": "None. Just copy-paste error. This event is disabled anyway. Will fix.", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r541105328", "createdAt": "2020-12-11T17:23:10Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/resources/jfr/dd.jfp", "diffHunk": "@@ -152,9 +152,9 @@ jdk.TenuringDistribution#enabled=true\n jdk.G1HeapRegionInformation#enabled=false\n jdk.G1HeapRegionInformation#period=everyChunk\n jdk.G1HeapRegionTypeChange#enabled=false\n-jdk.OldObjectSample#enabled=true\n+jdk.OldObjectSample#enabled=false\n jdk.OldObjectSample#stackTrace=true\n-jdk.OldObjectSample#cutoff=0 ms\n+jdk.OldObjectSample#cutoff=100 ms", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMTc5NQ=="}, "originalCommit": {"oid": "8fd6a758cf6b0ab36ea4798c43425764476bdae8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI3MjUyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/resources/jfr/overrides/comprehensive.jfp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNzo1MlrOIECQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoyMzo1NVrOIECeaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMjEzMw==", "bodyText": "intended to be 510?\n500 or 10?", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r541102133", "createdAt": "2020-12-11T17:17:52Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/resources/jfr/overrides/comprehensive.jfp", "diffHunk": "@@ -0,0 +1,18 @@\n+jdk.ThreadSleep#enabled=true\n+jdk.ThreadSleep#stackTrace=true\n+jdk.ThreadSleep#threshold=10 ms\n+jdk.ThreadPark#enabled=true\n+jdk.ThreadPark#stackTrace=true\n+jdk.ThreadPark#threshold=510 ms", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd6a758cf6b0ab36ea4798c43425764476bdae8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwNTc2OA==", "bodyText": "Typing error :/", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r541105768", "createdAt": "2020-12-11T17:23:55Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/resources/jfr/overrides/comprehensive.jfp", "diffHunk": "@@ -0,0 +1,18 @@\n+jdk.ThreadSleep#enabled=true\n+jdk.ThreadSleep#stackTrace=true\n+jdk.ThreadSleep#threshold=10 ms\n+jdk.ThreadPark#enabled=true\n+jdk.ThreadPark#stackTrace=true\n+jdk.ThreadPark#threshold=510 ms", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMjEzMw=="}, "originalCommit": {"oid": "8fd6a758cf6b0ab36ea4798c43425764476bdae8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTAwOTIxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoxNzowOFrOIG4_sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo0ODoyOVrOIG6MOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5NjE3OQ==", "bodyText": "forget to delete ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544096179", "createdAt": "2020-12-16T08:17:08Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java", "diffHunk": "@@ -22,12 +22,14 @@\n import java.time.Duration;\n import java.util.Map;\n import jdk.jfr.Recording;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * This is the implementation of the controller for OpenJDK. It should work for JDK 11+ today, and\n  * unmodified for JDK 8+ once JFR has been back-ported. The Oracle JDK implementation will be far\n  * messier... ;)\n  */\n+@Slf4j", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDExNTc3MA==", "bodyText": "Right. Will remove.", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544115770", "createdAt": "2020-12-16T08:48:29Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/OpenJdkController.java", "diffHunk": "@@ -22,12 +22,14 @@\n import java.time.Duration;\n import java.util.Map;\n import jdk.jfr.Recording;\n+import lombok.extern.slf4j.Slf4j;\n \n /**\n  * This is the implementation of the controller for OpenJDK. It should work for JDK 11+ today, and\n  * unmodified for JDK 8+ once JFR has been back-ported. The Oracle JDK implementation will be far\n  * messier... ;)\n  */\n+@Slf4j", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5NjE3OQ=="}, "originalCommit": {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTAyNzQyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/test/java/com/datadog/profiling/controller/openjdk/JfpUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODoyMToyNFrOIG5KBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo1NTo0NlrOIG6fiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5ODgyMA==", "bodyText": "I can suggest to test {\"minimal\", \"minimal\"} to cover path where you add .jfp", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544098820", "createdAt": "2020-12-16T08:21:24Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/test/java/com/datadog/profiling/controller/openjdk/JfpUtilsTest.java", "diffHunk": "@@ -29,4 +40,22 @@ public void testLoadingContinuousConfigWithOverride() throws IOException {\n     assertEquals(\"true\", config.get(CONFIG_ENTRY));\n     assertEquals(\"200\", config.get(CONFIG_OVERRIDE_ENTRY));\n   }\n+\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"minimal\", \"minimal.jfp\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMDcxNQ==", "bodyText": "This is actually testing that - the parameter values are there exactly to check both fully specified and with no extension.", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544120715", "createdAt": "2020-12-16T08:55:46Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/test/java/com/datadog/profiling/controller/openjdk/JfpUtilsTest.java", "diffHunk": "@@ -29,4 +40,22 @@ public void testLoadingContinuousConfigWithOverride() throws IOException {\n     assertEquals(\"true\", config.get(CONFIG_ENTRY));\n     assertEquals(\"200\", config.get(CONFIG_OVERRIDE_ENTRY));\n   }\n+\n+  @ParameterizedTest\n+  @ValueSource(strings = {\"minimal\", \"minimal.jfp\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA5ODgyMA=="}, "originalCommit": {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxOTA2NjA5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODozMDowMVrOIG5ftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwODo1NzoyNVrOIG6kGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDM3Mw==", "bodyText": "These lines don't deal with closable resources, so they can be moved outside/before try {} block and maybe use try-with:\n      if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n        overridesFileName = overridesFileName + JFP_EXTENSION;\n      }\n      File override = new File(overridesFileName);\n      try (InputStream overrideStream =\n          override.exists()\n              ? new FileInputStream(override)\n              : getNamedResource(OVERRIDES_PATH + overridesFileName)) {\n        result.putAll(readJfpFile(overrideStream));  // `readJfpFile` already has a null check\n      }", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544104373", "createdAt": "2020-12-16T08:30:01Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java", "diffHunk": "@@ -53,15 +57,37 @@ private static InputStream getNamedResource(final String name) {\n   }\n \n   public static Map<String, String> readNamedJfpResource(\n-      final String name, final String overridesFile) throws IOException {\n-    final Map<String, String> result;\n+      final String name, String overridesFileName) throws IOException {\n+    final Map<String, String> result = new HashMap<>();\n+\n     try (final InputStream stream = getNamedResource(name)) {\n-      result = readJfpFile(stream);\n+      result.putAll(readJfpFile(stream));\n     }\n \n-    if (overridesFile != null) {\n-      try (final InputStream stream = new FileInputStream(overridesFile)) {\n-        result.putAll(readJfpFile(stream));\n+    if (overridesFileName != null) {\n+      InputStream overrideStream = null;\n+      try {\n+        if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n+          overridesFileName = overridesFileName + JFP_EXTENSION;\n+        }\n+        File override = new File(overridesFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEyMTg4MQ==", "bodyText": "Yep. It can be simplified. Will take a look.", "url": "https://github.com/DataDog/dd-trace-java/pull/2169#discussion_r544121881", "createdAt": "2020-12-16T08:57:25Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller-openjdk/src/main/java/com/datadog/profiling/controller/openjdk/JfpUtils.java", "diffHunk": "@@ -53,15 +57,37 @@ private static InputStream getNamedResource(final String name) {\n   }\n \n   public static Map<String, String> readNamedJfpResource(\n-      final String name, final String overridesFile) throws IOException {\n-    final Map<String, String> result;\n+      final String name, String overridesFileName) throws IOException {\n+    final Map<String, String> result = new HashMap<>();\n+\n     try (final InputStream stream = getNamedResource(name)) {\n-      result = readJfpFile(stream);\n+      result.putAll(readJfpFile(stream));\n     }\n \n-    if (overridesFile != null) {\n-      try (final InputStream stream = new FileInputStream(overridesFile)) {\n-        result.putAll(readJfpFile(stream));\n+    if (overridesFileName != null) {\n+      InputStream overrideStream = null;\n+      try {\n+        if (!overridesFileName.toLowerCase().endsWith(JFP_EXTENSION)) {\n+          overridesFileName = overridesFileName + JFP_EXTENSION;\n+        }\n+        File override = new File(overridesFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDM3Mw=="}, "originalCommit": {"oid": "d5aaf6c9f0dc4519d6d83940c3bcb001b1fc41e8"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4502, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}