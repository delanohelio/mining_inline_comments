{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyODEyODQ5", "number": 1366, "title": "Make `CommonTaskExecutor` periodic tasks safe", "bodyText": "Verify that we can schedule task and catch exceptions.\nThis should help to avoid additional exceptions on app crash during\nstartup.\nAvoid holding strong references from within executor to make sure\nthat things can get GCed.", "createdAt": "2020-04-13T19:59:18Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1366", "merged": true, "mergeCommit": {"oid": "11035e4c439c15c5ec505c8d2d5f95c45c373d3d"}, "closed": true, "closedAt": "2020-04-13T23:23:00Z", "author": {"login": "mar-kolya"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXUksJgH2gAyNDAyODEyODQ5OjFmYjg0NGFiNWZlOTMwYWI2NjczMWJiYzNiMzBhZmE2MmZiYjk5Zjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXW2-dAH2gAyNDAyODEyODQ5OmJlZjg0OGVjMmRmNWJhNmI1MDgzZGIwMjc2NjM2YzRhZDViOWU4Y2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "committedDate": "2020-04-13T20:04:31Z", "message": "Make `CommonTaskExecutor` periodic tasks safe\n\n* Verify that we can schedule task and catch exceptions.\nThis should help to avoid additional exceptions on app crash during\n  startup.\n\n* Avoid holding strong references from within executor to make sure\n  that things can get GCed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d25596955e959547534d89b4a7c469674d21a86", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3d25596955e959547534d89b4a7c469674d21a86", "committedDate": "2020-04-13T19:57:01Z", "message": "Make `CommonTaskExecutor` periodic tasks safe\n\n* Verify that we can schedule task and catch exceptions.\n  This should help to avoid additional exceptions on app crash during\n  startup.\n* Avoid holding strong references from within executor to make sure\n  that things can get GCed."}, "afterCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1fb844ab5fe930ab66731bbc3b30afa62fbb99f7", "committedDate": "2020-04-13T20:04:31Z", "message": "Make `CommonTaskExecutor` periodic tasks safe\n\n* Verify that we can schedule task and catch exceptions.\nThis should help to avoid additional exceptions on app crash during\n  startup.\n\n* Avoid holding strong references from within executor to make sure\n  that things can get GCed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDAxMDMw", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#pullrequestreview-392401030", "createdAt": "2020-04-13T20:05:49Z", "commit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDoxMToxMFrOGEzjRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDoyNDoxM1rOGEz-Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5MjEwMA==", "bodyText": "This should be private.", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407692100", "createdAt": "2020-04-13T20:11:10Z", "author": {"login": "tylerbenson"}, "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -82,4 +124,79 @@ public void run() {\n       }\n     }\n   }\n+\n+  public interface Task<T> {\n+    void run(T target);\n+  }\n+\n+  public static class PeriodicTask<T> implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NDE1MQ==", "bodyText": "Should we remove this class and have WeakMap use the CommonTaskExecutor directly?  Seems like the extra abstraction is unnecessary now.", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407694151", "createdAt": "2020-04-13T20:15:08Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/Cleaner.java", "diffHunk": "@@ -12,47 +10,25 @@\n \n   <T> void scheduleCleaning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5NjA3NQ==", "bodyText": "Consider removing SpanCleaner and have this accept the list of pendingTraces instead. (Implement the run logic above directly.)", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407696075", "createdAt": "2020-04-13T20:18:47Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/PendingTrace.java", "diffHunk": "@@ -312,4 +319,17 @@ public void close() {\n       run();\n     }\n   }\n+\n+  /*\n+   * Important to use explicit class to avoid implicit hard references to cleaners from within executor.\n+   */\n+  private static class SpanCleanerTask implements Task<SpanCleaner> {\n+\n+    static final SpanCleanerTask INSTANCE = new SpanCleanerTask();\n+\n+    @Override\n+    public void run(final SpanCleaner target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5ODI5Mw==", "bodyText": "Add a comment explaining why we're returning this, though I think it might be better to explicitly return after each case instead of at the bottom.", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407698293", "createdAt": "2020-04-13T20:22:57Z", "author": {"login": "tylerbenson"}, "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -25,9 +28,48 @@ private CommonTaskExecutor() {\n     }\n   }\n \n-  public ScheduledFuture<?> scheduleAtFixedRate(\n-      final Runnable command, final long initialDelay, final long period, final TimeUnit unit) {\n-    return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);\n+  /**\n+   * Run {@code task} periodically providing it with {@code target}\n+   *\n+   * <p>Important implementation detail here is that internally we do not hold any strong references\n+   * to {@code target} which means it can be GCed even while periodic task is still scheduled.\n+   *\n+   * <p>If {@code target} is GCed periodic task is canceled.\n+   *\n+   * @param task task to run. Important: must not hold any strong references to target (or anything\n+   *     else non static)\n+   * @param target target object to pass to task\n+   * @param initialDelay initialDelay, see {@link\n+   *     ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long, TimeUnit)}\n+   * @param period period, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long,\n+   *     long, TimeUnit)}\n+   * @param unit unit, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long,\n+   *     TimeUnit)}\n+   * @param name name to use in logs when task cannot be scheduled\n+   * @return future that can be canceled\n+   */\n+  public <T> ScheduledFuture<?> scheduleAtFixedRate(\n+      final Task<T> task,\n+      final T target,\n+      final long initialDelay,\n+      final long period,\n+      final TimeUnit unit,\n+      final String name) {\n+    if (CommonTaskExecutor.INSTANCE.isShutdown()) {\n+      log.warn(\"Periodic task scheduler is shutdown. Will not run: {}\", name);\n+    } else {\n+      try {\n+        final PeriodicTask<T> periodicTask = new PeriodicTask<>(task, target);\n+        final ScheduledFuture<?> future =\n+            executorService.scheduleAtFixedRate(\n+                new PeriodicTask<>(task, target), initialDelay, period, unit);\n+        periodicTask.setFuture(future);\n+        return future;\n+      } catch (final RejectedExecutionException e) {\n+        log.warn(\"Cleaning task rejected. Will not run: {}\", name);\n+      }\n+    }\n+    return new UnscheduledFuture(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5ODYzNw==", "bodyText": "No longer just Cleaning task.", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407698637", "createdAt": "2020-04-13T20:23:32Z", "author": {"login": "tylerbenson"}, "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -25,9 +28,48 @@ private CommonTaskExecutor() {\n     }\n   }\n \n-  public ScheduledFuture<?> scheduleAtFixedRate(\n-      final Runnable command, final long initialDelay, final long period, final TimeUnit unit) {\n-    return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);\n+  /**\n+   * Run {@code task} periodically providing it with {@code target}\n+   *\n+   * <p>Important implementation detail here is that internally we do not hold any strong references\n+   * to {@code target} which means it can be GCed even while periodic task is still scheduled.\n+   *\n+   * <p>If {@code target} is GCed periodic task is canceled.\n+   *\n+   * @param task task to run. Important: must not hold any strong references to target (or anything\n+   *     else non static)\n+   * @param target target object to pass to task\n+   * @param initialDelay initialDelay, see {@link\n+   *     ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long, TimeUnit)}\n+   * @param period period, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long,\n+   *     long, TimeUnit)}\n+   * @param unit unit, see {@link ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long,\n+   *     TimeUnit)}\n+   * @param name name to use in logs when task cannot be scheduled\n+   * @return future that can be canceled\n+   */\n+  public <T> ScheduledFuture<?> scheduleAtFixedRate(\n+      final Task<T> task,\n+      final T target,\n+      final long initialDelay,\n+      final long period,\n+      final TimeUnit unit,\n+      final String name) {\n+    if (CommonTaskExecutor.INSTANCE.isShutdown()) {\n+      log.warn(\"Periodic task scheduler is shutdown. Will not run: {}\", name);\n+    } else {\n+      try {\n+        final PeriodicTask<T> periodicTask = new PeriodicTask<>(task, target);\n+        final ScheduledFuture<?> future =\n+            executorService.scheduleAtFixedRate(\n+                new PeriodicTask<>(task, target), initialDelay, period, unit);\n+        periodicTask.setFuture(future);\n+        return future;\n+      } catch (final RejectedExecutionException e) {\n+        log.warn(\"Cleaning task rejected. Will not run: {}\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY5OTAyNw==", "bodyText": "not really...", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407699027", "createdAt": "2020-04-13T20:24:13Z", "author": {"login": "tylerbenson"}, "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -82,4 +124,79 @@ public void run() {\n       }\n     }\n   }\n+\n+  public interface Task<T> {\n+    void run(T target);\n+  }\n+\n+  public static class PeriodicTask<T> implements Runnable {\n+    private final WeakReference<T> target;\n+    private final Task<T> task;\n+    private volatile ScheduledFuture<?> future = null;\n+\n+    private PeriodicTask(final Task<T> task, final T target) {\n+      this.target = new WeakReference<>(target);\n+      this.task = task;\n+    }\n+\n+    @Override\n+    public void run() {\n+      final T t = target.get();\n+      if (t != null) {\n+        task.run(t);\n+      } else if (future != null) {\n+        future.cancel(false);\n+      }\n+    }\n+\n+    public void setFuture(final ScheduledFuture<?> future) {\n+      this.future = future;\n+    }\n+  }\n+\n+  // Unscheduled future\n+  @Slf4j\n+  public static class UnscheduledFuture implements ScheduledFuture<Object> {\n+    private final String name;\n+\n+    public UnscheduledFuture(final String name) {\n+      this.name = name;\n+    }\n+\n+    @Override\n+    public long getDelay(final TimeUnit unit) {\n+      return 0;\n+    }\n+\n+    @Override\n+    public int compareTo(final Delayed o) {\n+      return 0;\n+    }\n+\n+    @Override\n+    public boolean cancel(final boolean mayInterruptIfRunning) {\n+      log.debug(\"Cancelling future for: {}\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDE1OTEw", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#pullrequestreview-392415910", "createdAt": "2020-04-13T20:29:11Z", "commit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDoyOToxMlrOGE0Iyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDoyOToxMlrOGE0Iyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMTcwNg==", "bodyText": "Also private...", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#discussion_r407701706", "createdAt": "2020-04-13T20:29:12Z", "author": {"login": "tylerbenson"}, "path": "utils/thread-utils/src/main/java/datadog/common/exec/CommonTaskExecutor.java", "diffHunk": "@@ -82,4 +124,79 @@ public void run() {\n       }\n     }\n   }\n+\n+  public interface Task<T> {\n+    void run(T target);\n+  }\n+\n+  public static class PeriodicTask<T> implements Runnable {\n+    private final WeakReference<T> target;\n+    private final Task<T> task;\n+    private volatile ScheduledFuture<?> future = null;\n+\n+    private PeriodicTask(final Task<T> task, final T target) {\n+      this.target = new WeakReference<>(target);\n+      this.task = task;\n+    }\n+\n+    @Override\n+    public void run() {\n+      final T t = target.get();\n+      if (t != null) {\n+        task.run(t);\n+      } else if (future != null) {\n+        future.cancel(false);\n+      }\n+    }\n+\n+    public void setFuture(final ScheduledFuture<?> future) {\n+      this.future = future;\n+    }\n+  }\n+\n+  // Unscheduled future\n+  @Slf4j\n+  public static class UnscheduledFuture implements ScheduledFuture<Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb844ab5fe930ab66731bbc3b30afa62fbb99f7"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d86093c4741d819c86a8f94880de380721e2a994", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d86093c4741d819c86a8f94880de380721e2a994", "committedDate": "2020-04-13T21:05:30Z", "message": "Minor CR fixes and some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "683477bd601d689149f4d6c96b7003df3037c486", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/683477bd601d689149f4d6c96b7003df3037c486", "committedDate": "2020-04-13T21:30:31Z", "message": "Simplify WeakMapSuppliers\n\nAlso move CleanerTest to PeriodicSchedulingTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee11f5ce0f7fc29bf41e06ca0b763f8b4aa4474", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/eee11f5ce0f7fc29bf41e06ca0b763f8b4aa4474", "committedDate": "2020-04-13T21:34:31Z", "message": "Remove Cleaner class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96fcb278b67904e6975e15fcd0acab5eaab6b8be", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/96fcb278b67904e6975e15fcd0acab5eaab6b8be", "committedDate": "2020-04-13T21:41:25Z", "message": "Add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1589c38199ea84c47dcd7099bf53866bc1b75ee", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b1589c38199ea84c47dcd7099bf53866bc1b75ee", "committedDate": "2020-04-13T21:51:20Z", "message": "Fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDY3MjE0", "url": "https://github.com/DataDog/dd-trace-java/pull/1366#pullrequestreview-392467214", "createdAt": "2020-04-13T21:55:10Z", "commit": {"oid": "b1589c38199ea84c47dcd7099bf53866bc1b75ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bef848ec2df5ba6b5083db0276636c4ad5b9e8cb", "author": {"user": {"login": "mar-kolya", "name": "Nikolay Martynov"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bef848ec2df5ba6b5083db0276636c4ad5b9e8cb", "committedDate": "2020-04-13T22:44:18Z", "message": "Disable coverage and add TODO"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2414, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}