{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTEwNjY0", "number": 1251, "title": "Fail fast in the matcher, let the debug outputs use the cache", "bodyText": "Minimal CPU improvement unfortunately but does at least help some.\n\nMemory stats should be treated as grain of salt. The test app results in 5:1 cache hit:miss ratio and 2 total mismatches (scala concurrent classes). So doesn't really exercise this cache.", "createdAt": "2020-02-24T17:22:46Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1251", "merged": true, "mergeCommit": {"oid": "55276148b931f3b34ec5ac44dc968b19211bc9ca"}, "closed": true, "closedAt": "2020-02-28T17:56:46Z", "author": {"login": "devinsba"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHhg4WAFqTM2MzU5MTA2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIgSC-gFqTM2NTkyNzQ5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTkxMDY3", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#pullrequestreview-363591067", "createdAt": "2020-02-24T18:06:20Z", "commit": {"oid": "34fdfd10b1a5a9cc3fef6af021c0315f67f9796e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e65177a143bc75e1015cdf6f241465a6679fe4b4", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e65177a143bc75e1015cdf6f241465a6679fe4b4", "committedDate": "2020-02-24T19:39:17Z", "message": "Fail fast in the matcher, let the debug outputs use the cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75af71584c5abf2ddca9139d52083f862bc2b1d9", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/75af71584c5abf2ddca9139d52083f862bc2b1d9", "committedDate": "2020-02-24T19:39:17Z", "message": "Refactor an agent usage, and fix logic issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af67dfa72034ed4b4f4daa605380be5654e534e2", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/af67dfa72034ed4b4f4daa605380be5654e534e2", "committedDate": "2020-02-24T19:39:17Z", "message": "Need to cache the boolean. The list can be taken later as debug is expected to be slower"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d010f0b9d289675ee2aecacb8b6b1f279388f38", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0d010f0b9d289675ee2aecacb8b6b1f279388f38", "committedDate": "2020-02-24T19:38:10Z", "message": "Need to cache the boolean. The list can be taken later as debug is expected to be slower"}, "afterCommit": {"oid": "af67dfa72034ed4b4f4daa605380be5654e534e2", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/af67dfa72034ed4b4f4daa605380be5654e534e2", "committedDate": "2020-02-24T19:39:17Z", "message": "Need to cache the boolean. The list can be taken later as debug is expected to be slower"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5ebc13cafa89038fb3d7bf388124d98ceff133ca", "committedDate": "2020-02-24T22:10:41Z", "message": "Increase performance on java 8"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTc4MzM4", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#pullrequestreview-364178338", "createdAt": "2020-02-25T14:23:43Z", "commit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0M1rOFuH9BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyMzo0M1rOFuH9BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTEyNA==", "bodyText": "I know this was pre-existing and I'm being nit-picky, but I'd prefer isEmpty.\nFor some collections, size is actually O(n).  For lazily filtered collection, isEmpty might also be O(n) but isEmpty is never worse.\nThat said since it was pre-existing, I don't really mind if we leave this as is.", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383909124", "createdAt": "2020-02-25T14:23:43Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTc5MjEy", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#pullrequestreview-364179212", "createdAt": "2020-02-25T14:24:46Z", "commit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyNDo0NlrOFuH_gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoyNDo0NlrOFuH_gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwOTc2MQ==", "bodyText": "My original thought was that we'd short-circuit here as well; however...\nWe seem like we're already reaching a point of diminishing returns here and that will definitely make the code more complicated.", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r383909761", "createdAt": "2020-02-25T14:24:46Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -42,14 +41,40 @@ public ReferenceMatcher(final String[] helperClassNames, final Reference[] refer\n   }\n \n   /**\n+   * Matcher used by ByteBuddy. Fails fast and only caches empty results, or complete results\n+   *\n    * @param loader Classloader to validate against (or null for bootstrap)\n    * @return true if all references match the classpath of loader\n    */\n-  public boolean matches(final ClassLoader loader) {\n-    return getMismatchedReferenceSources(loader).isEmpty();\n+  public boolean matches(ClassLoader loader) {\n+    if (loader == BOOTSTRAP_LOADER) {\n+      loader = Utils.getBootstrapProxy();\n+    }\n+\n+    return mismatchCache.computeIfAbsent(loader, this);\n+  }\n+\n+  @Override\n+  public Boolean get(final ClassLoader loader) {\n+    final List<Mismatch> mismatches = new ArrayList<>();\n+\n+    for (final Reference reference : references) {\n+      if (mismatches.size() > 0) {\n+        return false;\n+      }\n+      // Don't reference-check helper classes.\n+      // They will be injected by the instrumentation's HelperInjector.\n+      if (!helperClassNames.contains(reference.getClassName())) {\n+        mismatches.addAll(checkMatch(reference, loader));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc13cafa89038fb3d7bf388124d98ceff133ca"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b78d4593fbf559b50369a360f078bd0cebfa8fa", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3b78d4593fbf559b50369a360f078bd0cebfa8fa", "committedDate": "2020-02-25T14:36:00Z", "message": "Don't need to collect mismatches in the critical path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2441ca3332cf856d69599642c1decb85811bb49b", "committedDate": "2020-02-25T15:02:53Z", "message": "No more arraylist(0)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815bd0e9f65e5ddc7a3c4acfb2f9f11f85bc159c", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/815bd0e9f65e5ddc7a3c4acfb2f9f11f85bc159c", "committedDate": "2020-02-25T15:31:52Z", "message": "Fix comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDU4NTU2", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#pullrequestreview-364458556", "createdAt": "2020-02-25T21:24:20Z", "commit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMToyNDoyMFrOFuVt-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozMjo0NlrOFuV99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDY1MA==", "bodyText": "final", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384134650", "createdAt": "2020-02-25T21:24:20Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNzA4NA==", "bodyText": "isn't this field always empty set ? where do we add elements to it ?", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384137084", "createdAt": "2020-02-25T21:29:21Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -22,9 +22,8 @@\n \n /** Matches a set of references against a classloader. */\n @Slf4j\n-public class ReferenceMatcher\n-    implements WeakMap.ValueSupplier<ClassLoader, List<Reference.Mismatch>> {\n-  private final WeakMap<ClassLoader, List<Reference.Mismatch>> mismatchCache = newWeakMap();\n+public class ReferenceMatcher implements WeakMap.ValueSupplier<ClassLoader, Boolean> {\n+  private final WeakMap<ClassLoader, Boolean> mismatchCache = newWeakMap();\n   private final Reference[] references;\n   private final Set<String> helperClassNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzODc0MA==", "bodyText": "private ?", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#discussion_r384138740", "createdAt": "2020-02-25T21:32:46Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceMatcher.java", "diffHunk": "@@ -82,11 +99,12 @@ public boolean matches(final ClassLoader loader) {\n    * @param loader\n    * @return A list of mismatched sources. A list of size 0 means the reference matches the class.\n    */\n-  public static List<Reference.Mismatch> checkMatch(Reference reference, ClassLoader loader) {\n+  public static List<Reference.Mismatch> checkMatch(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjAyMDE3", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#pullrequestreview-364602017", "createdAt": "2020-02-26T03:26:33Z", "commit": {"oid": "2441ca3332cf856d69599642c1decb85811bb49b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e1d56023dc49634a6e3eb664922d66713801d0", "author": {"user": {"login": "devinsba", "name": "Brian Devins-Suresh"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/30e1d56023dc49634a6e3eb664922d66713801d0", "committedDate": "2020-02-26T14:14:49Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTI3NDk2", "url": "https://github.com/DataDog/dd-trace-java/pull/1251#pullrequestreview-365927496", "createdAt": "2020-02-27T19:14:09Z", "commit": {"oid": "30e1d56023dc49634a6e3eb664922d66713801d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2753, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}