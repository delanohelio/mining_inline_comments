{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDI3NzA0", "number": 1573, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozNzowM1rOEEvQvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozNzowM1rOEEvQvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDA0MDkzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozNzowM1rOGijEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0NToxNVrOGil8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ==", "bodyText": "Do we want this to be span_end - trace_start?", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438879325", "createdAt": "2020-06-11T15:37:03Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8162821606018c9db07a1edb672dec24d58bd68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4MzkwMg==", "bodyText": "Yes, we do, thanks for querying this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438883902", "createdAt": "2020-06-11T15:42:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, "originalCommit": {"oid": "b8162821606018c9db07a1edb672dec24d58bd68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NTExOA==", "bodyText": "I originally suggested the responsibility of setting the tag be done in a TraceInterceptor, so it could use the span end time and so they could be in control of it.  If we want to do it without requiring a TraceInterceptor, we might not have an option.", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438885118", "createdAt": "2020-06-11T15:43:48Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, "originalCommit": {"oid": "b8162821606018c9db07a1edb672dec24d58bd68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NTQwNw==", "bodyText": "One more. Given that this is a number, do they want this exposed as a metric instead of a tag?", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438885407", "createdAt": "2020-06-11T15:44:15Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, "originalCommit": {"oid": "b8162821606018c9db07a1edb672dec24d58bd68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMTE3Mg==", "bodyText": "I think this issue is orthogonal to the TraceInterceptor interface, and it's hard to tell how that would help, but this was a good catch.\nRegarding tag vs metric, it doesn't make much difference, but I have an abandoned PR to move numeric tags to metrics for efficiency reasons which might be worth revisiting.", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438911172", "createdAt": "2020-06-11T16:19:37Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, "originalCommit": {"oid": "b8162821606018c9db07a1edb672dec24d58bd68"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNjUzNw==", "bodyText": "From our conversations, I don't think we're ready to tackle adding a TraceInterceptor concept yet.  While I think we might eventually want a plug-in mechanism for out-of-tree additions, I think that's something requires careful design and is too large to be in scope for this particular change.\nIf at some point, we design a suitable TraceInterceptor, we can refactor this code to leverage that mechanism at a later time.  Although, in general, I'm still not keen on trace/span post-processing for core functionality because I think it obscures what's happening and likely harms performance as well.", "url": "https://github.com/DataDog/dd-trace-java/pull/1573#discussion_r438926537", "createdAt": "2020-06-11T16:45:15Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -69,11 +65,21 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(PARTITION, record.partition());\n       span.setTag(OFFSET, record.offset());\n       span.setTag(InstrumentationTags.DD_MEASURED, true);\n-      // don't record a duration if the message was sent from an old Kafka client\n+      long spanStartTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n+      if (endToEndDurationsEnabled) {\n+        String traceStartTime = span.getBaggageItem(DDTags.TRACE_START_TIME);\n+        if (null != traceStartTime) {\n+          // not being defensive here because we own the lifecycle of this value\n+          span.setTag(\n+              RECORD_END_TO_END_DURATION_MS,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3OTMyNQ=="}, "originalCommit": {"oid": "b8162821606018c9db07a1edb672dec24d58bd68"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 234, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}