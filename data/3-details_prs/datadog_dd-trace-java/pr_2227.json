{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzAxNDUw", "number": 2227, "title": "Split Jetty instrumentation out and enable by default", "bodyText": "Prior jetty instrumentation used a different operation name (jetty.request), but this would impact metrics if enabled when servlet.request was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\nNote the odd overlap in supported versions:\n\nJetty 8.0 is instrumented by 7.0 instrumentation\nJetty 8.1-8.2 is instrumented by 7.6 instrumentation\n\n(The release notes should indicate that this is a pretty significant change in instrumentation for anyone using jetty and to be aware when upgrading. Including possible impact to duration metrics due to an increased measurement scope.)", "createdAt": "2020-12-18T18:18:14Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2227", "merged": true, "mergeCommit": {"oid": "0567633c0561825c9c26951e3449af69f94f6489"}, "closed": true, "closedAt": "2021-01-06T15:27:26Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnecZXgBqjQxMzE0MjE5Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtQfaQgBqjQxNzE2ODUwNzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebe12d1502f2604be0c458e99955909d0c8f8009", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ebe12d1502f2604be0c458e99955909d0c8f8009", "committedDate": "2020-12-18T18:16:05Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}, "afterCommit": {"oid": "6d6ce17ebb0df39e8fac6297f4cf61e65bb6de6b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6d6ce17ebb0df39e8fac6297f4cf61e65bb6de6b", "committedDate": "2020-12-18T19:59:08Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation\n\n[skip ci]"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d6ce17ebb0df39e8fac6297f4cf61e65bb6de6b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6d6ce17ebb0df39e8fac6297f4cf61e65bb6de6b", "committedDate": "2020-12-18T19:59:08Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation\n\n[skip ci]"}, "afterCommit": {"oid": "f79ee45fc414957a5fd91aa4630edb26ed54076d", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f79ee45fc414957a5fd91aa4630edb26ed54076d", "committedDate": "2020-12-30T21:38:00Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f79ee45fc414957a5fd91aa4630edb26ed54076d", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f79ee45fc414957a5fd91aa4630edb26ed54076d", "committedDate": "2020-12-30T21:38:00Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}, "afterCommit": {"oid": "1cfdf9af5af0c3598b3ff143bb5d0b34a053827f", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1cfdf9af5af0c3598b3ff143bb5d0b34a053827f", "committedDate": "2021-01-04T16:36:48Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cfdf9af5af0c3598b3ff143bb5d0b34a053827f", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1cfdf9af5af0c3598b3ff143bb5d0b34a053827f", "committedDate": "2021-01-04T16:36:48Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}, "afterCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f72f57d7cc9f8b007d908b25628d5a0a69198156", "committedDate": "2021-01-04T17:41:10Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjY5NzA0", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561269704", "createdAt": "2021-01-04T19:07:41Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowNzo0MVrOIN9deQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowNzo0MVrOIN9deQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwOTM2OQ==", "bodyText": "Out of interest is there something better than this we could use at this level of specificity?", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551509369", "createdAt": "2021-01-04T19:07:41Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-7.0/src/main/java/datadog/trace/instrumentation/jetty70/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package datadog.trace.instrumentation.jetty70;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import java.util.Enumeration;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class HttpServletRequestExtractAdapter\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n+\n+  public static final HttpServletRequestExtractAdapter GETTER =\n+      new HttpServletRequestExtractAdapter();\n+\n+  @Override\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjcwNzQ0", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561270744", "createdAt": "2021-01-04T19:09:15Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowOToxNVrOIN9hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowOToxNVrOIN9hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxMDQwMg==", "bodyText": "Not sure how those PascalCase parameter names got through, seems we're using the wrong conventions. This makes instance calls look like static calls.", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551510402", "createdAt": "2021-01-04T19:09:15Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-7.0/src/main/java/datadog/trace/instrumentation/jetty70/JettyDecorator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package datadog.trace.instrumentation.jetty70;\n+\n+import datadog.trace.bootstrap.instrumentation.api.URIDataAdapter;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.Response;\n+\n+public class JettyDecorator extends HttpServerDecorator<Request, Request, Response> {\n+  public static final CharSequence SERVLET_REQUEST = UTF8BytesString.create(\"servlet.request\");\n+  public static final CharSequence JETTY_SERVER = UTF8BytesString.create(\"jetty-server\");\n+  public static final JettyDecorator DECORATE = new JettyDecorator();\n+  public static final String DD_CONTEXT_PATH_ATTRIBUTE = \"datadog.context.path\";\n+  public static final String DD_SERVLET_PATH_ATTRIBUTE = \"datadog.servlet.path\";\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"jetty\"};\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return JETTY_SERVER;\n+  }\n+\n+  @Override\n+  protected String method(final Request Request) {\n+    return Request.getMethod();\n+  }\n+\n+  @Override\n+  protected URIDataAdapter url(final Request Request) {\n+    return new RequestURIDataAdapter(Request);\n+  }\n+\n+  @Override\n+  protected String peerHostIP(final Request Request) {\n+    return Request.getRemoteAddr();\n+  }\n+\n+  @Override\n+  protected int peerPort(final Request Request) {\n+    return Request.getRemotePort();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjcxODk3", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561271897", "createdAt": "2021-01-04T19:10:55Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxMDo1NlrOIN9k6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxMDo1NlrOIN9k6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxMTI3Mw==", "bodyText": "I thought there was some consensus against hooking the status code being set like this? Am I mistaken?", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551511273", "createdAt": "2021-01-04T19:10:56Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-7.0/src/main/java/datadog/trace/instrumentation/jetty70/JettyGeneratorInstrumentation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.instrumentation.jetty70;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.eclipse.jetty.http.Generator;\n+import org.eclipse.jetty.server.HttpConnection;\n+import org.eclipse.jetty.server.Response;\n+\n+@AutoService(Instrumenter.class)\n+public final class JettyGeneratorInstrumentation extends Instrumenter.Tracing {\n+\n+  public JettyGeneratorInstrumentation() {\n+    super(\"jetty\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.eclipse.jetty.http.Generator\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    // The lifecycle of these objects are aligned, and are recycled by jetty, minimizing leak risk.\n+    return singletonMap(\"org.eclipse.jetty.http.Generator\", \"org.eclipse.jetty.server.Response\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        named(\"setResponse\").and(takesArgument(0, int.class)),\n+        JettyGeneratorInstrumentation.class.getName() + \"$SetResponseAdvice\");\n+  }\n+\n+  // This advice ensures that the right status is updated on the response.\n+  public static class SetResponseAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static void updateResponse(\n+        @Advice.This final Generator generator, @Advice.Argument(0) final int status) {\n+      Response response =\n+          InstrumentationContext.get(Generator.class, Response.class).get(generator);\n+      if (response != null) {\n+        response.setStatus(status);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjczMTMy", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561273132", "createdAt": "2021-01-04T19:12:50Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxMjo1MFrOIN9ocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxMjo1MFrOIN9ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxMjE3OQ==", "bodyText": "I have to ask - what happens if this assumption is violated? I think the consequences should be included in a comment like this.", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551512179", "createdAt": "2021-01-04T19:12:50Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-7.0/src/main/java/datadog/trace/instrumentation/jetty70/JettyServerInstrumentation.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package datadog.trace.instrumentation.jetty70;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.jetty70.HttpServletRequestExtractAdapter.GETTER;\n+import static datadog.trace.instrumentation.jetty70.JettyDecorator.DECORATE;\n+import static datadog.trace.instrumentation.jetty70.JettyDecorator.SERVLET_REQUEST;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.api.CorrelationIdentifier;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.GlobalTracer;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.eclipse.jetty.http.Generator;\n+import org.eclipse.jetty.server.HttpConnection;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.Response;\n+\n+@AutoService(Instrumenter.class)\n+public final class JettyServerInstrumentation extends Instrumenter.Tracing {\n+\n+  public JettyServerInstrumentation() {\n+    super(\"jetty\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.eclipse.jetty.server.HttpConnection\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".JettyDecorator\",\n+      packageName + \".HttpServletRequestExtractAdapter\",\n+      packageName + \".RequestURIDataAdapter\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    // The lifecycle of these objects are aligned, and are recycled by jetty, minimizing leak risk.\n+    return singletonMap(\"org.eclipse.jetty.http.Generator\", \"org.eclipse.jetty.server.Response\");\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        isConstructor(), JettyServerInstrumentation.class.getName() + \"$ConstructorAdvice\");\n+    transformers.put(\n+        named(\"handleRequest\").and(takesNoArguments()),\n+        JettyServerInstrumentation.class.getName() + \"$HandleRequestAdvice\");\n+    transformers.put(\n+        named(\"reset\").and(takesArgument(0, boolean.class)),\n+        JettyServerInstrumentation.class.getName() + \"$ResetAdvice\");\n+    return transformers;\n+  }\n+\n+  // This advice is needed to link the Generator with the Response so we can get the right status\n+  public static class ConstructorAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void link(\n+        @Advice.FieldValue(\"_generator\") final Generator generator,\n+        @Advice.FieldValue(\"_response\") final Response response) {\n+      InstrumentationContext.get(Generator.class, Response.class).put(generator, response);\n+    }\n+  }\n+\n+  // handleRequest is used instead of handle to allow the incoming request to be fully parsed.\n+  public static class HandleRequestAdvice {\n+\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope onEnter(@Advice.This final HttpConnection connection) {\n+      Request req = connection.getRequest();\n+\n+      Object existingSpan = req.getAttribute(DD_SPAN_ATTRIBUTE);\n+      if (existingSpan instanceof AgentSpan) {\n+        // Request already gone through initial processing.\n+        return activateSpan((AgentSpan) existingSpan);\n+      }\n+\n+      final AgentSpan.Context extractedContext = propagate().extract(req, GETTER);\n+\n+      final AgentSpan span = startSpan(SERVLET_REQUEST, extractedContext).setMeasured(true);\n+      DECORATE.afterStart(span);\n+      DECORATE.onConnection(span, req);\n+      DECORATE.onRequest(span, req);\n+\n+      final AgentScope scope = activateSpan(span);\n+      scope.setAsyncPropagation(true);\n+      req.setAttribute(DD_SPAN_ATTRIBUTE, span);\n+      req.setAttribute(CorrelationIdentifier.getTraceIdKey(), GlobalTracer.get().getTraceId());\n+      req.setAttribute(CorrelationIdentifier.getSpanIdKey(), GlobalTracer.get().getSpanId());\n+      return scope;\n+    }\n+\n+    @Advice.OnMethodExit(suppress = Throwable.class, onThrowable = Throwable.class)\n+    public static void closeScope(@Advice.Enter final AgentScope scope) {\n+      scope.close();\n+    }\n+  }\n+\n+  // Working assumption is that all channels get reset rather than GC'd.\n+  // This should give us the final status code and the broadest span time measurement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjc2MTg1", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561276185", "createdAt": "2021-01-04T19:17:32Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxNzozMlrOIN9x_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxNzozMlrOIN9x_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxNDYyMA==", "bodyText": "Again, since we're being really specific can we target a container specific carrier with better APIs here?", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551514620", "createdAt": "2021-01-04T19:17:32Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-7.6/src/main/java/datadog/trace/instrumentation/jetty76/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package datadog.trace.instrumentation.jetty76;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n+import java.util.Enumeration;\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class HttpServletRequestExtractAdapter\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n+\n+  public static final HttpServletRequestExtractAdapter GETTER =\n+      new HttpServletRequestExtractAdapter();\n+\n+  @Override\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjc5NDM0", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561279434", "createdAt": "2021-01-04T19:22:33Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToyMjozM1rOIN97sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToyMjozM1rOIN97sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxNzEwNw==", "bodyText": "org.eclipse.jetty.http.Generator is an interface, but it seems to have a fairly stable implementation hierarchy. Could we match on named(\"org.eclipse.jetty.http.HttpGenerator\") but create a context store as above instead? Does the comment above necessarily hold if the implementation of Generator is user supplied? Can it be user supplied?", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551517107", "createdAt": "2021-01-04T19:22:33Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-7.6/src/main/java/datadog/trace/instrumentation/jetty76/JettyGeneratorInstrumentation.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package datadog.trace.instrumentation.jetty76;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.eclipse.jetty.http.Generator;\n+import org.eclipse.jetty.server.AbstractHttpConnection;\n+import org.eclipse.jetty.server.Response;\n+\n+@AutoService(Instrumenter.class)\n+public final class JettyGeneratorInstrumentation extends Instrumenter.Tracing {\n+\n+  public JettyGeneratorInstrumentation() {\n+    super(\"jetty\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.eclipse.jetty.http.Generator\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    // The lifecycle of these objects are aligned, and are recycled by jetty, minimizing leak risk.\n+    return singletonMap(\"org.eclipse.jetty.http.Generator\", \"org.eclipse.jetty.server.Response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjgwNzk3", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561280797", "createdAt": "2021-01-04T19:24:35Z", "commit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToyNDozNVrOIN9_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToyNDozNVrOIN9_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxODIwMA==", "bodyText": "We're using namedOneOf elsewhere.", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#discussion_r551518200", "createdAt": "2021-01-04T19:24:35Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jetty-9/src/main/java/datadog/trace/instrumentation/jetty9/JettyServerInstrumentation.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package datadog.trace.instrumentation.jetty9;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.propagate;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.bootstrap.instrumentation.decorator.HttpServerDecorator.DD_SPAN_ATTRIBUTE;\n+import static datadog.trace.instrumentation.jetty9.HttpServletRequestExtractAdapter.GETTER;\n+import static datadog.trace.instrumentation.jetty9.JettyDecorator.DECORATE;\n+import static datadog.trace.instrumentation.jetty9.JettyDecorator.SERVLET_REQUEST;\n+import static net.bytebuddy.matcher.ElementMatchers.declaresMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesNoArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.api.Config;\n+import datadog.trace.api.CorrelationIdentifier;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.api.GlobalTracer;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.eclipse.jetty.server.HttpChannel;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.Response;\n+\n+@AutoService(Instrumenter.class)\n+public final class JettyServerInstrumentation extends Instrumenter.Tracing {\n+\n+  public JettyServerInstrumentation() {\n+    super(\"jetty\", \"jetty-9\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"org.eclipse.jetty.server.HttpChannel\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".JettyDecorator\",\n+      packageName + \".HttpServletRequestExtractAdapter\",\n+      packageName + \".RequestURIDataAdapter\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(\n+        takesNoArguments()\n+            .and(\n+                named(\"handle\")\n+                    .or(\n+                        // In 9.0.3 the handle logic was extracted out to \"handle\"\n+                        // but we still want to instrument run in case handle is missing\n+                        // (without the risk of double instrumenting).\n+                        named(\"run\")\n+                            .and(\n+                                new ElementMatcher.Junction.AbstractBase<MethodDescription>() {\n+                                  @Override\n+                                  public boolean matches(MethodDescription target) {\n+                                    // TODO this could probably be made into a nicer matcher.\n+                                    return !declaresMethod(named(\"handle\"))\n+                                        .matches(target.getDeclaringType().asErasure());\n+                                  }\n+                                }))),\n+        JettyServerInstrumentation.class.getName() + \"$HandleAdvice\");\n+    transformers.put(\n+        // name changed to recycle in 9.3.0\n+        named(\"reset\").or(named(\"recycle\")).and(takesNoArguments()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72f57d7cc9f8b007d908b25628d5a0a69198156"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ff5cac5e77783f080311aa3c1bdc7851a216a33", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7ff5cac5e77783f080311aa3c1bdc7851a216a33", "committedDate": "2021-01-04T21:46:38Z", "message": "Code Review Fixes"}, "afterCommit": {"oid": "6eddfcdcacc31be091c71f2806c920d8242ca87c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6eddfcdcacc31be091c71f2806c920d8242ca87c", "committedDate": "2021-01-04T22:49:20Z", "message": "Code Review Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNjIxNzA3", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-561621707", "createdAt": "2021-01-05T09:10:40Z", "commit": {"oid": "6eddfcdcacc31be091c71f2806c920d8242ca87c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDg1MTIz", "url": "https://github.com/DataDog/dd-trace-java/pull/2227#pullrequestreview-562085123", "createdAt": "2021-01-05T19:52:01Z", "commit": {"oid": "6e32aa53d3e4bb0ac2df4acff171f1146622ba07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c44e6f49e9dcdf4e8dc2badd299120e334efd521", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c44e6f49e9dcdf4e8dc2badd299120e334efd521", "committedDate": "2021-01-05T19:53:18Z", "message": "Split Jetty instrumentation out and enable by default\n\nPrior jetty instrumentation used a different operation name (`jetty.request`), but this would impact metrics if enabled when `servlet.request` was previously expected. Since it was disabled by default and considered \"beta\", this is deemed an acceptable change.\n\nCurrent instrumentation should work with Jetty 7-10 (though 10 isn't explicitly tested because it wasn't compiled for Java 8).  Jetty 11 is still not supported since it requires Servlet 4.\n\nNote the odd overlap in supported versions:\n* Jetty 8.0 is instrumented by 7.0 instrumentation\n* Jetty 8.1-8.2 is instrumented by 7.6 instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5381ae584ce321567837e6b8d9030f7eeaea493a", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5381ae584ce321567837e6b8d9030f7eeaea493a", "committedDate": "2021-01-05T19:56:00Z", "message": "Code Review Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943ecf0b1ad1dc07989902c4a7320b9c551f279c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/943ecf0b1ad1dc07989902c4a7320b9c551f279c", "committedDate": "2021-01-05T19:56:00Z", "message": "Improve comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e32aa53d3e4bb0ac2df4acff171f1146622ba07", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6e32aa53d3e4bb0ac2df4acff171f1146622ba07", "committedDate": "2021-01-05T17:40:45Z", "message": "Improve comments"}, "afterCommit": {"oid": "943ecf0b1ad1dc07989902c4a7320b9c551f279c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/943ecf0b1ad1dc07989902c4a7320b9c551f279c", "committedDate": "2021-01-05T19:56:00Z", "message": "Improve comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}