{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NzU0OTcw", "number": 1437, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNToyMjoxMlrOD6TLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozNTo0M1rOD7VnHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDU4MTY1OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNToyMjoxMlrOGSDzHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1Njo1MVrOGTTDVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4OTc5MA==", "bodyText": "This is where the primary benefit is, right?  Perhaps you could update the PR description to describe how this change achieves its' benefits.", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r421589790", "createdAt": "2020-05-07T15:22:12Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -141,14 +145,18 @@ public long contentLength() {\n \n             @Override\n             public void writeTo(final BufferedSink sink) throws IOException {\n-              final OutputStream out = sink.outputStream();\n-              final MessagePacker packer = MessagePack.newDefaultPacker(out);\n-              packer.packArrayHeader(traces.size());\n-              for (final byte[] trace : traces) {\n-                packer.writePayload(trace);\n+              if (traces.size() < 16) {\n+                sink.writeByte((byte) (traces.size() | FIXARRAY_PREFIX));\n+              } else if (traces.size() < 0x10000) {\n+                sink.writeByte(ARRAY16);\n+                sink.writeShort(traces.size());\n+              } else {\n+                sink.writeByte(ARRAY32);\n+                sink.writeInt(traces.size());\n+              }\n+              for (ByteBuffer trace : traces) {\n+                sink.write(trace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844be383d19af7fd6314b811cfe14e77c86a35ec"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4ODI3Ng==", "bodyText": "There may be some benefit here, especially once the buffers get large, but the motivation is that slicing as a ByteBuffer might not reallocate/copy the buffer. In any case, I have moved this on from here, to adaptively size the buffers to avoid needing to copy.", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r422888276", "createdAt": "2020-05-11T08:56:51Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -141,14 +145,18 @@ public long contentLength() {\n \n             @Override\n             public void writeTo(final BufferedSink sink) throws IOException {\n-              final OutputStream out = sink.outputStream();\n-              final MessagePacker packer = MessagePack.newDefaultPacker(out);\n-              packer.packArrayHeader(traces.size());\n-              for (final byte[] trace : traces) {\n-                packer.writePayload(trace);\n+              if (traces.size() < 16) {\n+                sink.writeByte((byte) (traces.size() | FIXARRAY_PREFIX));\n+              } else if (traces.size() < 0x10000) {\n+                sink.writeByte(ARRAY16);\n+                sink.writeShort(traces.size());\n+              } else {\n+                sink.writeByte(ARRAY32);\n+                sink.writeInt(traces.size());\n+              }\n+              for (ByteBuffer trace : traces) {\n+                sink.write(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4OTc5MA=="}, "originalCommit": {"oid": "844be383d19af7fd6314b811cfe14e77c86a35ec"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDU4OTg0OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNToyNDowNVrOGSD4ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNToyNDowNVrOGSD4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU5MTE0MQ==", "bodyText": "Perhaps a comment here that you are inlining the MessagePacker.packArrayHeader behavior?", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r421591141", "createdAt": "2020-05-07T15:24:05Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -141,14 +145,18 @@ public long contentLength() {\n \n             @Override\n             public void writeTo(final BufferedSink sink) throws IOException {\n-              final OutputStream out = sink.outputStream();\n-              final MessagePacker packer = MessagePack.newDefaultPacker(out);\n-              packer.packArrayHeader(traces.size());\n-              for (final byte[] trace : traces) {\n-                packer.writePayload(trace);\n+              if (traces.size() < 16) {\n+                sink.writeByte((byte) (traces.size() | FIXARRAY_PREFIX));\n+              } else if (traces.size() < 0x10000) {\n+                sink.writeByte(ARRAY16);\n+                sink.writeShort(traces.size());\n+              } else {\n+                sink.writeByte(ARRAY32);\n+                sink.writeInt(traces.size());\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "844be383d19af7fd6314b811cfe14e77c86a35ec"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODM0NTM4OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDoyMzoyNFrOGSnXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1NDo1MlrOGTS-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MjQ0OQ==", "bodyText": "For the sake of seeing the difference between this and the next check, it might make sense to change the 16 to 0x100", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r422172449", "createdAt": "2020-05-08T14:23:24Z", "author": {"login": "devinsba"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -147,14 +151,18 @@ public long contentLength() {\n \n             @Override\n             public void writeTo(final BufferedSink sink) throws IOException {\n-              final OutputStream out = sink.outputStream();\n-              final MessagePacker packer = MessagePack.newDefaultPacker(out);\n-              packer.packArrayHeader(traces.size());\n-              for (final byte[] trace : traces) {\n-                packer.writePayload(trace);\n+              if (traces.size() < 16) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7da77bc24e2fbf245f9c1dbeaa3bd02c0236aeb"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NzAzMQ==", "bodyText": "It's been inlined from MessagePacker so I will leave it exactly as it is there, I just don't like numbers written as shifts.", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r422887031", "createdAt": "2020-05-11T08:54:52Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -147,14 +151,18 @@ public long contentLength() {\n \n             @Override\n             public void writeTo(final BufferedSink sink) throws IOException {\n-              final OutputStream out = sink.outputStream();\n-              final MessagePacker packer = MessagePack.newDefaultPacker(out);\n-              packer.packArrayHeader(traces.size());\n-              for (final byte[] trace : traces) {\n-                packer.writePayload(trace);\n+              if (traces.size() < 16) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MjQ0OQ=="}, "originalCommit": {"oid": "a7da77bc24e2fbf245f9c1dbeaa3bd02c0236aeb"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTM4NTIzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoxMzo0MVrOGTlnrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToxNjoyMFrOGTp2sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MjQ5Mg==", "bodyText": "Can you add a comment here giving insight on the future direction of this?", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r423192492", "createdAt": "2020-05-11T17:13:41Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -83,10 +84,11 @@ private BatchWritingHandler(\n     // TODO: reduce byte[] garbage by keeping the byte[] on the event and copy before returning.\n     @Override\n     public void onEvent(\n-        final DisruptorEvent<byte[]> event, final long sequence, final boolean endOfBatch) {\n+        final DisruptorEvent<TraceBuffer> event, final long sequence, final boolean endOfBatch) {\n       try {\n         if (event.data != null) {\n-          sizeInBytes += event.data.length;\n+          sizeInBytes += event.data.sizeInBytes();\n+          traceCount += event.data.traceCount();\n           serializedTraces.add(event.data);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310fae50d50422fa7c0df6c8ba65eb6aa3cd5cc6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2MTg3NA==", "bodyText": "Done.", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r423261874", "createdAt": "2020-05-11T19:16:20Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/BatchWritingDisruptor.java", "diffHunk": "@@ -83,10 +84,11 @@ private BatchWritingHandler(\n     // TODO: reduce byte[] garbage by keeping the byte[] on the event and copy before returning.\n     @Override\n     public void onEvent(\n-        final DisruptorEvent<byte[]> event, final long sequence, final boolean endOfBatch) {\n+        final DisruptorEvent<TraceBuffer> event, final long sequence, final boolean endOfBatch) {\n       try {\n         if (event.data != null) {\n-          sizeInBytes += event.data.length;\n+          sizeInBytes += event.data.sizeInBytes();\n+          traceCount += event.data.traceCount();\n           serializedTraces.add(event.data);\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5MjQ5Mg=="}, "originalCommit": {"oid": "310fae50d50422fa7c0df6c8ba65eb6aa3cd5cc6"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTQ2NjUzOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozNTo0M1rOGTmbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToxNjoyN1rOGTp25w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTgwMw==", "bodyText": "A little insight on future direction would also be nice here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r423205803", "createdAt": "2020-05-11T17:35:43Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -66,9 +68,11 @@ public void onEvent(\n           // TODO populate `_sample_rate` metric in a way that accounts for lost/dropped traces\n           try {\n             event.data = processor.onTraceComplete(event.data);\n-            final byte[] serializedTrace = api.serializeTrace(event.data);\n+            serializer.serialize(event.data);\n+            TraceBuffer serializedTrace = serializer.getBuffer();\n+            int sizeInBytes = serializedTrace.sizeInBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310fae50d50422fa7c0df6c8ba65eb6aa3cd5cc6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2MTkyNw==", "bodyText": "Done", "url": "https://github.com/DataDog/dd-trace-java/pull/1437#discussion_r423261927", "createdAt": "2020-05-11T19:16:27Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingDisruptor.java", "diffHunk": "@@ -66,9 +68,11 @@ public void onEvent(\n           // TODO populate `_sample_rate` metric in a way that accounts for lost/dropped traces\n           try {\n             event.data = processor.onTraceComplete(event.data);\n-            final byte[] serializedTrace = api.serializeTrace(event.data);\n+            serializer.serialize(event.data);\n+            TraceBuffer serializedTrace = serializer.getBuffer();\n+            int sizeInBytes = serializedTrace.sizeInBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTgwMw=="}, "originalCommit": {"oid": "310fae50d50422fa7c0df6c8ba65eb6aa3cd5cc6"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 303, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}