{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTI1ODg2", "number": 1578, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxODowMlrOEE-URg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0Mzo1MlrOEFFZ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUwNzU4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/HasSuperMethodMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxODowMlrOGi7TUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxODowMlrOGi7TUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NjM2OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439276369", "createdAt": "2020-06-12T08:18:02Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/HasSuperMethodMatcher.java", "diffHunk": "@@ -48,8 +49,7 @@ private boolean matchesInterface(\n       final Junction<MethodDescription> signatureMatcher,\n       final Set<TypeDefinition> checkedInterfaces) {\n     for (final TypeDefinition type : interfaces) {\n-      if (!checkedInterfaces.contains(type)) {\n-        checkedInterfaces.add(type);\n+      if (checkedInterfaces.add(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUxODc5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyMTo0MFrOGi7aNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODo1MDoxMVrOGi8SKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODEzMw==", "bodyText": "This looks suspicious - IINM it is valid to call it.next(); it.next(); it.next(); and expect to get the next value on each invocation (or get an exception). But here calling next() without hasNext() being called first will return still the same element.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439278133", "createdAt": "2020-06-12T08:21:40Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4MjgxNg==", "bodyText": "It's a private static class intended for local usage only, I would prefer to add a comment than change this", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439282816", "createdAt": "2020-06-12T08:30:56Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODEzMw=="}, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI4NDI5Mw==", "bodyText": "Ok. Out of curiosity - why is it important that you cache the next value? To avoid the interfaces set check?\nSorry for bikesheding - does it need to be an actual Iterator implementation?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439284293", "createdAt": "2020-06-12T08:33:59Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODEzMw=="}, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5MjQ1OA==", "bodyText": "I want to halt the iteration as soon as an exception is thrown. I don't want to check if there is another element, catch an exception in the call to next() and then handle it elsewhere. In fact, this peculiarity is the reason for returning Iterable - to force orderly iteration.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439292458", "createdAt": "2020-06-12T08:50:11Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODEzMw=="}, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUyMDk0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyMjoyMlrOGi7bkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNzo0M1rOGi_Dng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODQ4Mw==", "bodyText": "What about throwing UnsupportedOperationException to make it totally clear that this method is not supposed to be called at all.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439278483", "createdAt": "2020-06-12T08:22:22Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;\n+        } catch (Exception e) {\n+          if (log.isDebugEnabled()) {\n+            log.debug(\n+                \"{} trying to get interfaces for target {}: {}\",\n+                e.getClass().getSimpleName(),\n+                safeTypeDefinitionName(typeDefinition),\n+                e.getMessage());\n+          }\n+          return false;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public TypeDefinition next() {\n+      return next;\n+    }\n+\n+    @Override\n+    public void remove() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNzg4Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439337886", "createdAt": "2020-06-12T10:27:43Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,55 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.\n+   */\n+  private static class SafeInterfaceIterator\n+      implements Iterator<TypeDefinition>, Iterable<TypeDefinition> {\n+    private final TypeDefinition typeDefinition;\n+    private final Iterator<TypeDescription.Generic> it;\n+    private TypeDefinition next;\n+\n+    private SafeInterfaceIterator(TypeDefinition typeDefinition) {\n+      this.typeDefinition = typeDefinition;\n+      this.it = typeDefinition.getInterfaces().iterator();\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+      if (it.hasNext()) {\n+        try {\n+          this.next = it.next();\n+          return true;\n+        } catch (Exception e) {\n+          if (log.isDebugEnabled()) {\n+            log.debug(\n+                \"{} trying to get interfaces for target {}: {}\",\n+                e.getClass().getSimpleName(),\n+                safeTypeDefinitionName(typeDefinition),\n+                e.getMessage());\n+          }\n+          return false;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    @Override\n+    public TypeDefinition next() {\n+      return next;\n+    }\n+\n+    @Override\n+    public void remove() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODQ4Mw=="}, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUyNDE3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyMzoxOFrOGi7dcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyMzoxOFrOGi7dcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3ODk2Mw==", "bodyText": "Nit: maybe final to discourage brave souls extending this class?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439278963", "createdAt": "2020-06-12T08:23:18Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public class TypeComparators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUyNjUwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyNDowMFrOGi7e6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjo1NDoxMVrOGjC4Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTMzNw==", "bodyText": "Is it ok not to do null check?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439279337", "createdAt": "2020-06-12T08:24:00Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI5ODM5OA==", "bodyText": "These are bytebuddy types. As far as I'm aware, the library will throw exceptions rather than produce null values.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439298398", "createdAt": "2020-06-12T09:01:26Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTMzNw=="}, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwMDUyNg==", "bodyText": "So I'm wondering if this has something to do with the Netty failure. From digging into ByteBuddy a bit it seems like the default equals for those types work on getName and not getSimpleName", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439400526", "createdAt": "2020-06-12T12:54:11Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTMzNw=="}, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjUyOTYzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/test/groovy/datadog/trace/agent/tooling/bytebuddy/matcher/HasInterfaceMatcherTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyNTowM1rOGi7g0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyNTowM1rOGi7g0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTgyNg==", "bodyText": "Nit: Can this be extracted to a custom iterator type?", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439279826", "createdAt": "2020-06-12T08:25:03Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-tooling/src/test/groovy/datadog/trace/agent/tooling/bytebuddy/matcher/HasInterfaceMatcherTest.groovy", "diffHunk": "@@ -46,6 +47,20 @@ class HasInterfaceMatcherTest extends DDSpecification {\n     def type = Mock(TypeDescription)\n     def typeGeneric = Mock(TypeDescription.Generic)\n     def matcher = implementsInterface(named(Object.name))\n+    def interfaces = Mock(TypeList.Generic)\n+    def it = new Iterator() {\n+      int i = 0\n+\n+      @Override\n+      boolean hasNext() {\n+        return i++ < 1\n+      }\n+\n+      @Override\n+      Object next() {\n+        throw new Exception(\"iteration exception\")\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a550113bc25280eab7c48a1f10fe7e8b755d0676"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjg5MjA4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyOToyN1rOGi_Gdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyOToyN1rOGi_Gdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzODYxNQ==", "bodyText": "I know that this comment and behavior is the same as the old one, but maybe clarify that it stops at the first exception.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439338615", "createdAt": "2020-06-12T10:29:27Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/SafeHasSuperTypeMatcher.java", "diffHunk": "@@ -152,4 +129,67 @@ public boolean equals(final Object other) {\n   public int hashCode() {\n     return 17 * 31 + matcher.hashCode();\n   }\n+\n+  /**\n+   * TypeDefinition#getInterfaces() produces an iterator which may throw an exception during\n+   * iteration if an interface is absent from the classpath.\n+   *\n+   * <p>The caller MUST call hasNext() before calling next().\n+   *\n+   * <p>This wrapper exists to allow getting interfaces even if the lookup on one fails.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2bd5e1639603e5ee01a1fd5974d3f61206b31f2"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzY2ODg2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0Mzo1MlrOGjGp3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxMDo0MVrOGjHpqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MjM2NA==", "bodyText": "I switched to getName and the :dd-java-agent:instrumentation:netty-4.1:testJava11Generated succeeded locally, while getSimpleName fails.\n    public int compare(TypeDescription o1, TypeDescription o2) {\n      if (o1 == o2) {\n        return 0;\n      }\n\n      return o1.getName().compareTo(o2.getName());\n    }", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439462364", "createdAt": "2020-06-12T14:43:52Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public final class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5ca36bab7628a4a126fd5439f1741d762cb8d35"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MDQ2Mg==", "bodyText": "Is name sufficient here?  We have to be a bit carefully about duplicates being loaded across different ClassLoaders, but in a limited context, name should work.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439470462", "createdAt": "2020-06-12T14:56:29Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public final class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MjM2NA=="}, "originalCommit": {"oid": "b5ca36bab7628a4a126fd5439f1741d762cb8d35"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3ODY5Nw==", "bodyText": "I think I'll just change this back to HashSet to avoid edge cases.", "url": "https://github.com/DataDog/dd-trace-java/pull/1578#discussion_r439478697", "createdAt": "2020-06-12T15:10:41Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/TypeComparators.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package datadog.trace.agent.tooling.bytebuddy.matcher;\n+\n+import java.util.Comparator;\n+import net.bytebuddy.description.type.TypeDefinition;\n+import net.bytebuddy.description.type.TypeDescription;\n+\n+public final class TypeComparators {\n+\n+  public static final Comparator<TypeDescription> TYPE_DESCRIPTION =\n+      new TypeDescriptionComparator();\n+  public static final Comparator<TypeDefinition> TYPE_DEFINITION = new TypeDefinitionComparator();\n+\n+  private static class TypeDescriptionComparator implements Comparator<TypeDescription> {\n+\n+    @Override\n+    public int compare(TypeDescription o1, TypeDescription o2) {\n+      return o1.getSimpleName().compareTo(o2.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MjM2NA=="}, "originalCommit": {"oid": "b5ca36bab7628a4a126fd5439f1741d762cb8d35"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 244, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}