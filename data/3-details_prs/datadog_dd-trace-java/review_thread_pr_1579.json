{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNjI1MDE4", "number": 1579, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoyNTowNVrOEFCjRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNjoyM1rOEKiJWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzIwMTMyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/LogContextScopeListener.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMjoyNTowNVrOGjCDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToyNDo1NVrOGjIIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NjkyOQ==", "bodyText": "It's better not to separate Map.containsKey from Map.get because it involves two lookups. Instead it's better to get the value and check if it's not null. If this happens quite a lot the difference will add up - how often will this get called? If once per span, please make the change, otherwise don't worry about it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r439386929", "createdAt": "2020-06-12T12:25:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/LogContextScopeListener.java", "diffHunk": "@@ -50,4 +54,22 @@ public void afterScopeClosed() {\n       log.debug(\"Exception removing log context context\", e);\n     }\n   }\n+\n+  public static void addDDTagsToMDC(final Method putMethod)\n+      throws InvocationTargetException, IllegalAccessException {\n+    putMethod.invoke(null, Tags.DD_SERVICE, Config.get().getServiceName());\n+    {\n+      final Map<String, String> mergedSpanTags = Config.get().getMergedSpanTags();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf327f8784cceb657f9df6899f0bc815840e7ded"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4Mjc5MQ==", "bodyText": "It happens 1 time per instrumentation. 3 times total during agent startup. But I've changed it", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r439482791", "createdAt": "2020-06-12T15:18:00Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/LogContextScopeListener.java", "diffHunk": "@@ -50,4 +54,22 @@ public void afterScopeClosed() {\n       log.debug(\"Exception removing log context context\", e);\n     }\n   }\n+\n+  public static void addDDTagsToMDC(final Method putMethod)\n+      throws InvocationTargetException, IllegalAccessException {\n+    putMethod.invoke(null, Tags.DD_SERVICE, Config.get().getServiceName());\n+    {\n+      final Map<String, String> mergedSpanTags = Config.get().getMergedSpanTags();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NjkyOQ=="}, "originalCommit": {"oid": "cf327f8784cceb657f9df6899f0bc815840e7ded"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4NjU4OQ==", "bodyText": "Sure, sorry, didn't get the full context from the PR alone.", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r439486589", "createdAt": "2020-06-12T15:24:55Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/LogContextScopeListener.java", "diffHunk": "@@ -50,4 +54,22 @@ public void afterScopeClosed() {\n       log.debug(\"Exception removing log context context\", e);\n     }\n   }\n+\n+  public static void addDDTagsToMDC(final Method putMethod)\n+      throws InvocationTargetException, IllegalAccessException {\n+    putMethod.invoke(null, Tags.DD_SERVICE, Config.get().getServiceName());\n+    {\n+      final Map<String, String> mergedSpanTags = Config.get().getMergedSpanTags();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4NjkyOQ=="}, "originalCommit": {"oid": "cf327f8784cceb657f9df6899f0bc815840e7ded"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc0MzU4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/slf4j-mdc/src/main/java/datadog/trace/instrumentation/slf4j/mdc/MDCInjectionInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDozMzoyNlrOGl_O9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzoyOTowOFrOGmDVZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NjUxOA==", "bodyText": "It would be nice if we could avoid all this reflection, but I don't think we can because of our shadow rename for SLF4j.", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r442486518", "createdAt": "2020-06-18T20:33:26Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/slf4j-mdc/src/main/java/datadog/trace/instrumentation/slf4j/mdc/MDCInjectionInstrumentation.java", "diffHunk": "@@ -70,17 +73,28 @@ public boolean matches(final MethodDescription target) {\n \n   @Override\n   public String[] helperClassNames() {\n-    return new String[] {LogContextScopeListener.class.getName()};\n+    return new String[] {\n+      LogContextScopeListener.class.getName(), ThreadLocalWithDDTagsInitValue.class.getName(),\n+    };\n   }\n \n   public static class MDCAdvice {\n     @Advice.OnMethodExit(suppress = Throwable.class)\n-    public static void mdcClassInitialized(@Advice.Origin final Class mdcClass) {\n+    public static void mdcClassInitialized(@Advice.Origin final Class<?> mdcClass) {\n       try {\n         final Method putMethod = mdcClass.getMethod(\"put\", String.class, String.class);\n         final Method removeMethod = mdcClass.getMethod(\"remove\", String.class);\n         GlobalTracer.get().addScopeListener(new LogContextScopeListener(putMethod, removeMethod));\n-      } catch (final NoSuchMethodException e) {\n+\n+        final Field mdcAdapterField = mdcClass.getDeclaredField(\"mdcAdapter\");\n+        mdcAdapterField.setAccessible(true);\n+        final MDCAdapter mdcAdapterInstance = (MDCAdapter) mdcAdapterField.get(null);\n+        final Field copyOnThreadLocalField =\n+            mdcAdapterInstance.getClass().getDeclaredField(\"copyOnThreadLocal\");\n+        copyOnThreadLocalField.setAccessible(true);\n+        copyOnThreadLocalField.set(mdcAdapterInstance, new ThreadLocalWithDDTagsInitValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b30bf72889adb9349c3869385f1edd75ca810a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1MzcwMw==", "bodyText": "I was trying several ways, how to do it more beautiful, but found nothing better than this\nIf they rename private field, test should fail.", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r442553703", "createdAt": "2020-06-18T23:29:08Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/slf4j-mdc/src/main/java/datadog/trace/instrumentation/slf4j/mdc/MDCInjectionInstrumentation.java", "diffHunk": "@@ -70,17 +73,28 @@ public boolean matches(final MethodDescription target) {\n \n   @Override\n   public String[] helperClassNames() {\n-    return new String[] {LogContextScopeListener.class.getName()};\n+    return new String[] {\n+      LogContextScopeListener.class.getName(), ThreadLocalWithDDTagsInitValue.class.getName(),\n+    };\n   }\n \n   public static class MDCAdvice {\n     @Advice.OnMethodExit(suppress = Throwable.class)\n-    public static void mdcClassInitialized(@Advice.Origin final Class mdcClass) {\n+    public static void mdcClassInitialized(@Advice.Origin final Class<?> mdcClass) {\n       try {\n         final Method putMethod = mdcClass.getMethod(\"put\", String.class, String.class);\n         final Method removeMethod = mdcClass.getMethod(\"remove\", String.class);\n         GlobalTracer.get().addScopeListener(new LogContextScopeListener(putMethod, removeMethod));\n-      } catch (final NoSuchMethodException e) {\n+\n+        final Field mdcAdapterField = mdcClass.getDeclaredField(\"mdcAdapter\");\n+        mdcAdapterField.setAccessible(true);\n+        final MDCAdapter mdcAdapterInstance = (MDCAdapter) mdcAdapterField.get(null);\n+        final Field copyOnThreadLocalField =\n+            mdcAdapterInstance.getClass().getDeclaredField(\"copyOnThreadLocal\");\n+        copyOnThreadLocalField.setAccessible(true);\n+        copyOnThreadLocalField.set(mdcAdapterInstance, new ThreadLocalWithDDTagsInitValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NjUxOA=="}, "originalCommit": {"oid": "14b30bf72889adb9349c3869385f1edd75ca810a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDc3MDk1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/log4j2/src/main/java/datadog/trace/instrumentation/log4j2/ThreadContextInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNzo1OFrOGrn5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoxNzo1OFrOGrn5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM5NTY5OQ==", "bodyText": "This creates extra class loads that we don't need.\nWhile annoying it is better to do \"foo.bar.QuuxClass\" instead of QuuxClass.class.getName()", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r448395699", "createdAt": "2020-07-01T14:17:58Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/log4j2/src/main/java/datadog/trace/instrumentation/log4j2/ThreadContextInstrumentation.java", "diffHunk": "@@ -42,18 +44,30 @@ protected boolean defaultEnabled() {\n \n   @Override\n   public String[] helperClassNames() {\n-    return new String[] {LogContextScopeListener.class.getName()};\n+    return new String[] {\n+      LogContextScopeListener.class.getName(), ThreadLocalWithDDTagsInitValue.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b30bf72889adb9349c3869385f1edd75ca810a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDgwNjY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDoyNjoyM1rOGroQJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowODoxMlrOGyyEJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTQ0Nw==", "bodyText": "I noticed this Map is immutable.  Do we end up injecting this Map directly into the MDC?\nIf so, how does this work if the MDC is modified?", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r448401447", "createdAt": "2020-07-01T14:26:23Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package datadog.trace.agent.tooling.log;\n+\n+import java.util.Map;\n+\n+public class ThreadLocalWithDDTagsInitValue extends ThreadLocal<Map<String, String>> {\n+  @Override\n+  protected Map<String, String> initialValue() {\n+    return LogContextScopeListener.LOG_CONTEXT_DD_TAGS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b30bf72889adb9349c3869385f1edd75ca810a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMjI0Nw==", "bodyText": "It results in throwing an exception like this:\n\tat java.util.Collections$UnmodifiableMap.put(Collections.java:1457)\n\tat ch.qos.logback.classic.util.LogbackMDCAdapter.put(LogbackMDCAdapter.java:110)\n\tat org.slf4j.MDC.put(MDC.java:147)\n\tat org.apache.log4j.MDC.put(MDC.java:25)\n\tat com.xxx.application.code(...)```", "url": "https://github.com/DataDog/dd-trace-java/pull/1579#discussion_r455902247", "createdAt": "2020-07-16T16:08:12Z", "author": {"login": "aantono"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/log/ThreadLocalWithDDTagsInitValue.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package datadog.trace.agent.tooling.log;\n+\n+import java.util.Map;\n+\n+public class ThreadLocalWithDDTagsInitValue extends ThreadLocal<Map<String, String>> {\n+  @Override\n+  protected Map<String, String> initialValue() {\n+    return LogContextScopeListener.LOG_CONTEXT_DD_TAGS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwMTQ0Nw=="}, "originalCommit": {"oid": "14b30bf72889adb9349c3869385f1edd75ca810a"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 52, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}