{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODU0MTE5", "number": 2014, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MTo1MVrOEv0PNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NDo1MVrOEv6KXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTc0MzkwOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MTo1MVrOHlAlUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NDoxN1rOHlKLUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkxMw==", "bodyText": "I think there is value in having all the expected threads enumerated in a single place...", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508568913", "createdAt": "2020-10-20T14:41:51Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "diffHunk": "@@ -74,7 +74,7 @@ public TraceProcessingWorker(\n             dispatcher,\n             flushInterval,\n             timeUnit);\n-    this.serializerThread = DaemonThreadFactory.TRACE_PROCESSOR.newThread(serializingHandler);\n+    this.serializerThread = newAgentThread(\"dd-trace-processor\", serializingHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ef57dbd294d1393f18eeec8f1df4898bebd439"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU3NjgzNQ==", "bodyText": "sure, I can add string constants for them", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508576835", "createdAt": "2020-10-20T14:50:58Z", "author": {"login": "mcculls"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "diffHunk": "@@ -74,7 +74,7 @@ public TraceProcessingWorker(\n             dispatcher,\n             flushInterval,\n             timeUnit);\n-    this.serializerThread = DaemonThreadFactory.TRACE_PROCESSOR.newThread(serializingHandler);\n+    this.serializerThread = newAgentThread(\"dd-trace-processor\", serializingHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkxMw=="}, "originalCommit": {"oid": "c1ef57dbd294d1393f18eeec8f1df4898bebd439"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4ODA2Mg==", "bodyText": "How bout an enum with a strongly typed argument for the method?", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508588062", "createdAt": "2020-10-20T15:04:16Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "diffHunk": "@@ -74,7 +74,7 @@ public TraceProcessingWorker(\n             dispatcher,\n             flushInterval,\n             timeUnit);\n-    this.serializerThread = DaemonThreadFactory.TRACE_PROCESSOR.newThread(serializingHandler);\n+    this.serializerThread = newAgentThread(\"dd-trace-processor\", serializingHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkxMw=="}, "originalCommit": {"oid": "c1ef57dbd294d1393f18eeec8f1df4898bebd439"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxODE2Mw==", "bodyText": "There are a couple of places like ClassLoadCallBack which use a computed thread name (ie. prefix plus class name) - but I think that's still doable because we only allow callbacks for specific classes. I'll see what it looks like with an enum.", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508618163", "createdAt": "2020-10-20T15:35:04Z", "author": {"login": "mcculls"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "diffHunk": "@@ -74,7 +74,7 @@ public TraceProcessingWorker(\n             dispatcher,\n             flushInterval,\n             timeUnit);\n-    this.serializerThread = DaemonThreadFactory.TRACE_PROCESSOR.newThread(serializingHandler);\n+    this.serializerThread = newAgentThread(\"dd-trace-processor\", serializingHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkxMw=="}, "originalCommit": {"oid": "c1ef57dbd294d1393f18eeec8f1df4898bebd439"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY5OTY1OQ==", "bodyText": "@tylerbenson 388f95d - WDYT?", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508699659", "createdAt": "2020-10-20T17:11:27Z", "author": {"login": "mcculls"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "diffHunk": "@@ -74,7 +74,7 @@ public TraceProcessingWorker(\n             dispatcher,\n             flushInterval,\n             timeUnit);\n-    this.serializerThread = DaemonThreadFactory.TRACE_PROCESSOR.newThread(serializingHandler);\n+    this.serializerThread = newAgentThread(\"dd-trace-processor\", serializingHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkxMw=="}, "originalCommit": {"oid": "c1ef57dbd294d1393f18eeec8f1df4898bebd439"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjA5Ng==", "bodyText": "I like it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508726096", "createdAt": "2020-10-20T17:54:17Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/TraceProcessingWorker.java", "diffHunk": "@@ -74,7 +74,7 @@ public TraceProcessingWorker(\n             dispatcher,\n             flushInterval,\n             timeUnit);\n-    this.serializerThread = DaemonThreadFactory.TRACE_PROCESSOR.newThread(serializingHandler);\n+    this.serializerThread = newAgentThread(\"dd-trace-processor\", serializingHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2ODkxMw=="}, "originalCommit": {"oid": "c1ef57dbd294d1393f18eeec8f1df4898bebd439"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjcxNDUyOnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/util/AgentThreadFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNzo1NDo1MVrOHlKM1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODowNDoxOFrOHlKkhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjQ4Nw==", "bodyText": "Does this result in any new/different thread names from previous releases?", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508726487", "createdAt": "2020-10-20T17:54:51Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/util/AgentThreadFactory.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package datadog.trace.util;\n+\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+/** A {@link ThreadFactory} implementation that starts all agent {@link Thread}s as daemons. */\n+public final class AgentThreadFactory implements ThreadFactory {\n+  public static final ThreadGroup AGENT_THREAD_GROUP = new ThreadGroup(\"dd-trace-java\");\n+\n+  // known agent threads\n+  public enum AgentThread {\n+    TASK_SCHEDULER,\n+    TRACE_STARTUP,\n+    TRACE_MONITOR,\n+    TRACE_PROCESSOR,\n+    TRACE_CASSANDRA_ASYNC_SESSION,\n+    JMX_STARTUP,\n+    JMX_COLLECTOR,\n+    PROFILER_STARTUP,\n+    PROFILER_RECORDING_STARTUP,\n+    PROFILER_RECORDING_SCHEDULER,\n+    PROFILER_HTTP_DISPATCHER;\n+\n+    public String threadName() {\n+      return \"dd-\" + name().toLowerCase().replace('_', '-');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "388f95dad0036eaaaaf533ec2094a320e6eaa312"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczMjU0OQ==", "bodyText": "Yes, fixing that atm", "url": "https://github.com/DataDog/dd-trace-java/pull/2014#discussion_r508732549", "createdAt": "2020-10-20T18:04:18Z", "author": {"login": "mcculls"}, "path": "internal-api/src/main/java/datadog/trace/util/AgentThreadFactory.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package datadog.trace.util;\n+\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+/** A {@link ThreadFactory} implementation that starts all agent {@link Thread}s as daemons. */\n+public final class AgentThreadFactory implements ThreadFactory {\n+  public static final ThreadGroup AGENT_THREAD_GROUP = new ThreadGroup(\"dd-trace-java\");\n+\n+  // known agent threads\n+  public enum AgentThread {\n+    TASK_SCHEDULER,\n+    TRACE_STARTUP,\n+    TRACE_MONITOR,\n+    TRACE_PROCESSOR,\n+    TRACE_CASSANDRA_ASYNC_SESSION,\n+    JMX_STARTUP,\n+    JMX_COLLECTOR,\n+    PROFILER_STARTUP,\n+    PROFILER_RECORDING_STARTUP,\n+    PROFILER_RECORDING_SCHEDULER,\n+    PROFILER_HTTP_DISPATCHER;\n+\n+    public String threadName() {\n+      return \"dd-\" + name().toLowerCase().replace('_', '-');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODcyNjQ4Nw=="}, "originalCommit": {"oid": "388f95dad0036eaaaaf533ec2094a320e6eaa312"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4734, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}