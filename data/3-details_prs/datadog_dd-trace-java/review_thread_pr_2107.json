{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NjIzOTU0", "number": 2107, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyMjo0OVrOE817gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoyNDo1MFrOE83gdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjMzNjAwOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/metrics/AggregateMetric.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyMjo0OVrOH5NTrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzoyMjo0OVrOH5NTrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc0ODkwOQ==", "bodyText": "Maybe \u2018hitLatencies\u2019 ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529748909", "createdAt": "2020-11-24T17:22:49Z", "author": {"login": "lpriima"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/metrics/AggregateMetric.java", "diffHunk": "@@ -1,11 +1,25 @@\n package datadog.trace.common.metrics;\n \n+import datadog.trace.core.histogram.Histogram;\n+import datadog.trace.core.histogram.HistogramFactory;\n+import datadog.trace.core.histogram.Histograms;\n+\n /** Not thread-safe. Accumulates counts and durations. */\n public final class AggregateMetric {\n+\n+  private static final HistogramFactory HISTOGRAM_FACTORY = Histograms.newHistogramFactory();\n+\n+  private Histogram latencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM4NDc1OnYy", "diffSide": "RIGHT", "path": "utils/histograms/src/main/java/datadog/trace/core/histogram/Histogram.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozNDoxN1rOH5NxrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0Mzo1OFrOH5OJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NjU4OA==", "bodyText": "I thought you spent some time ago to cleanup all serialization APIs based on java array length. And now it\u2019s back", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529756588", "createdAt": "2020-11-24T17:34:17Z", "author": {"login": "lpriima"}, "path": "utils/histograms/src/main/java/datadog/trace/core/histogram/Histogram.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.histogram;\n+\n+public interface Histogram {\n+\n+  void accept(long value);\n+\n+  byte[] serialize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MjczMw==", "bodyText": "I'm less concerned here because there will be at most 1000 of these once every 10 seconds, but once this is finished I will be able to get rid of this and serialise into the output buffer.", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529762733", "createdAt": "2020-11-24T17:43:58Z", "author": {"login": "richardstartin"}, "path": "utils/histograms/src/main/java/datadog/trace/core/histogram/Histogram.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package datadog.trace.core.histogram;\n+\n+public interface Histogram {\n+\n+  void accept(long value);\n+\n+  byte[] serialize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NjU4OA=="}, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjM5MzA5OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/Writable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozNjoxOVrOH5N2zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozNjoxOVrOH5N2zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1NzkwMQ==", "bodyText": "I thought you spent some time ago to cleanup all serialization APIs based on java array length(mostly to reuse the buffers). And now this API is back", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529757901", "createdAt": "2020-11-24T17:36:19Z", "author": {"login": "lpriima"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/serialization/Writable.java", "diffHunk": "@@ -21,6 +21,8 @@\n \n   void writeUTF8(UTF8BytesString string);\n \n+  void writeBinary(byte[] binary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjQwMTM4OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/test/groovy/datadog/trace/common/metrics/AgentIntegrationTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzozODoyMVrOH5N74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0MjoyOFrOH5OGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1OTIwMw==", "bodyText": "Is there a way to keep running existing tests on java7 as well?", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529759203", "createdAt": "2020-11-24T17:38:21Z", "author": {"login": "lpriima"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/common/metrics/AgentIntegrationTest.groovy", "diffHunk": "@@ -5,10 +5,11 @@ import datadog.trace.test.util.DDSpecification\n import spock.lang.Ignore\n import spock.lang.Requires\n \n+import static datadog.trace.api.Platform.isJavaVersionAtLeast\n import static java.util.concurrent.TimeUnit.SECONDS\n \n @Ignore(\"requires an upgrade to an as yet unreleased agent to run\")\n-@Requires({ \"true\" == System.getenv(\"CI\") })\n+@Requires({ \"true\" == System.getenv(\"CI\") && isJavaVersionAtLeast(8) })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MTgwNw==", "bodyText": "No - the feature is completely disabled on JDK7", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529761807", "createdAt": "2020-11-24T17:42:28Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/test/groovy/datadog/trace/common/metrics/AgentIntegrationTest.groovy", "diffHunk": "@@ -5,10 +5,11 @@ import datadog.trace.test.util.DDSpecification\n import spock.lang.Ignore\n import spock.lang.Requires\n \n+import static datadog.trace.api.Platform.isJavaVersionAtLeast\n import static java.util.concurrent.TimeUnit.SECONDS\n \n @Ignore(\"requires an upgrade to an as yet unreleased agent to run\")\n-@Requires({ \"true\" == System.getenv(\"CI\") })\n+@Requires({ \"true\" == System.getenv(\"CI\") && isJavaVersionAtLeast(8) })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1OTIwMw=="}, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjU5NDQ0OnYy", "diffSide": "RIGHT", "path": "utils/histograms/histograms.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoyNDo1MFrOH5Pvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0NDoyOFrOH5QdYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4ODg0Nw==", "bodyText": "do we want to bundle these in the dd-trace-ot jar or leave them as external dependencies?", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529788847", "createdAt": "2020-11-24T18:24:50Z", "author": {"login": "mcculls"}, "path": "utils/histograms/histograms.gradle", "diffHunk": "@@ -0,0 +1,21 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+minimumBranchCoverage = 0.7\n+minimumInstructionCoverage = 0.7\n+\n+sourceCompatibility = JavaVersion.VERSION_1_8\n+targetCompatibility = JavaVersion.VERSION_1_8\n+\n+dependencies {\n+  compile deps.slf4j\n+  compile project(':internal-api')\n+\n+  // currently required to serialize DDSketch\n+  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.14.0'\n+  compile group: 'com.datadoghq', name: 'sketches-java', version: '0.4.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMDU0Ng==", "bodyText": "could you elaborate?", "url": "https://github.com/DataDog/dd-trace-java/pull/2107#discussion_r529800546", "createdAt": "2020-11-24T18:44:28Z", "author": {"login": "richardstartin"}, "path": "utils/histograms/histograms.gradle", "diffHunk": "@@ -0,0 +1,21 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+apply from: \"$rootDir/gradle/java.gradle\"\n+\n+minimumBranchCoverage = 0.7\n+minimumInstructionCoverage = 0.7\n+\n+sourceCompatibility = JavaVersion.VERSION_1_8\n+targetCompatibility = JavaVersion.VERSION_1_8\n+\n+dependencies {\n+  compile deps.slf4j\n+  compile project(':internal-api')\n+\n+  // currently required to serialize DDSketch\n+  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.14.0'\n+  compile group: 'com.datadoghq', name: 'sketches-java', version: '0.4.1'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4ODg0Nw=="}, "originalCommit": {"oid": "a63740b9c7fd0b9be8b47f35dddb0c2ccce275d7"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4615, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}