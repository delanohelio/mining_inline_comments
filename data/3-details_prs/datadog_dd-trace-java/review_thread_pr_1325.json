{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDgzODky", "number": 1325, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0MDoxNVrODqjBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTozNjoxMlrODrRUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQwNTI3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0MDoxNVrOF6XQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0MDoxNVrOF6XQsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0MjgzNA==", "bodyText": "just MUZZLE_REPOS = Arrays.asList(central, typesafe) ?", "url": "https://github.com/DataDog/dd-trace-java/pull/1325#discussion_r396742834", "createdAt": "2020-03-23T20:40:15Z", "author": {"login": "lpriima"}, "path": "buildSrc/src/main/groovy/MuzzlePlugin.groovy", "diffHunk": "@@ -36,7 +37,8 @@ class MuzzlePlugin implements Plugin<Project> {\n   private static final AtomicReference<ClassLoader> TOOLING_LOADER = new AtomicReference<>()\n   static {\n     RemoteRepository central = new RemoteRepository.Builder(\"central\", \"default\", \"https://repo1.maven.org/maven2/\").build()\n-    MUZZLE_REPOS = new ArrayList<RemoteRepository>(Arrays.asList(central))\n+    RemoteRepository typesafe = new RemoteRepository.Builder(\"typesafe\", \"default\", \"https://repo.typesafe.com/typesafe/releases\").build()\n+    MUZZLE_REPOS = new ArrayList<RemoteRepository>(Arrays.asList(central, typesafe))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "548d450771046ff2bf62039b17cf3a6e38115e99"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njk5MTczOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/play-2.3/src/test/scala/server/SyncServer.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTozNjoxM1rOF7hFFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo1Njo0NlrOF7k5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1MjI3Ng==", "bodyText": "Hmmm. This test shouldn\u2019t be passing\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  HttpServerTest.controller(QUERY_PARAM, new ControllerClosureAdapter(Results.Status(ERROR.getStatus).apply(ERROR.getBody)))\n          \n          \n            \n                  HttpServerTest.controller(ERROR, new ControllerClosureAdapter(Results.Status(ERROR.getStatus).apply(ERROR.getBody)))", "url": "https://github.com/DataDog/dd-trace-java/pull/1325#discussion_r397952276", "createdAt": "2020-03-25T15:36:13Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/play-2.3/src/test/scala/server/SyncServer.scala", "diffHunk": "@@ -0,0 +1,32 @@\n+package server\n+\n+import datadog.trace.agent.test.base.HttpServerTest\n+import datadog.trace.agent.test.base.HttpServerTest.ServerEndpoint._\n+import play.api.mvc.{Action, Handler, Results}\n+import play.api.test.{FakeApplication, TestServer}\n+\n+object SyncServer {\n+  val routes: PartialFunction[(String, String), Handler] = {\n+    case (\"GET\", \"/success\") => Action { request =>\n+      HttpServerTest.controller(SUCCESS, new ControllerClosureAdapter(Results.Status(SUCCESS.getStatus).apply(SUCCESS.getBody)))\n+    }\n+    case (\"GET\", \"/redirect\") => Action { request =>\n+      HttpServerTest.controller(REDIRECT, new ControllerClosureAdapter(Results.Redirect(REDIRECT.getBody, REDIRECT.getStatus)))\n+    }\n+    case (\"GET\", \"/query\") => Action { request =>\n+      HttpServerTest.controller(QUERY_PARAM, new ControllerClosureAdapter(Results.Status(QUERY_PARAM.getStatus).apply(QUERY_PARAM.getBody)))\n+    }\n+    case (\"GET\", \"/error-status\") => Action { request =>\n+      HttpServerTest.controller(QUERY_PARAM, new ControllerClosureAdapter(Results.Status(ERROR.getStatus).apply(ERROR.getBody)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "548d450771046ff2bf62039b17cf3a6e38115e99"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNDc4Nw==", "bodyText": "eh, it only matters for NOT_FOUND", "url": "https://github.com/DataDog/dd-trace-java/pull/1325#discussion_r398014787", "createdAt": "2020-03-25T16:56:46Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/play-2.3/src/test/scala/server/SyncServer.scala", "diffHunk": "@@ -0,0 +1,32 @@\n+package server\n+\n+import datadog.trace.agent.test.base.HttpServerTest\n+import datadog.trace.agent.test.base.HttpServerTest.ServerEndpoint._\n+import play.api.mvc.{Action, Handler, Results}\n+import play.api.test.{FakeApplication, TestServer}\n+\n+object SyncServer {\n+  val routes: PartialFunction[(String, String), Handler] = {\n+    case (\"GET\", \"/success\") => Action { request =>\n+      HttpServerTest.controller(SUCCESS, new ControllerClosureAdapter(Results.Status(SUCCESS.getStatus).apply(SUCCESS.getBody)))\n+    }\n+    case (\"GET\", \"/redirect\") => Action { request =>\n+      HttpServerTest.controller(REDIRECT, new ControllerClosureAdapter(Results.Redirect(REDIRECT.getBody, REDIRECT.getStatus)))\n+    }\n+    case (\"GET\", \"/query\") => Action { request =>\n+      HttpServerTest.controller(QUERY_PARAM, new ControllerClosureAdapter(Results.Status(QUERY_PARAM.getStatus).apply(QUERY_PARAM.getBody)))\n+    }\n+    case (\"GET\", \"/error-status\") => Action { request =>\n+      HttpServerTest.controller(QUERY_PARAM, new ControllerClosureAdapter(Results.Status(ERROR.getStatus).apply(ERROR.getBody)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1MjI3Ng=="}, "originalCommit": {"oid": "548d450771046ff2bf62039b17cf3a6e38115e99"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 405, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}