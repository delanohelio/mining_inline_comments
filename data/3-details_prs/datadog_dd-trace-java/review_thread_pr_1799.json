{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMDY5MDU2", "number": 1799, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1Nzo1N1rOEdIIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1Nzo1N1rOEdIIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTc3MzcxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODo1Nzo1N1rOHIG9PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDowNDo0MlrOHIJW-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw==", "bodyText": "Have you considered introducing a \"CISpanDecorator\" interface or similar which has method(s) this decorator could call to add CI tags to a span? Then you could have Jenkins and Gitlab implementations of that interface (and a shared abstract class with common code) and select the appropriate implementation in the TestDecorator constructor. It should also let you re-use the selected span decorator in TestFrameworkTest rather than have to repeat all those methods and constants everywhere.\nThis would avoid mixing all these different constants and methods in the same class and make clear which are specific to Jenkins/Gitlab. Also makes it easier to add other CI pipelines in the future.", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478264637", "createdAt": "2020-08-27T08:57:57Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -2,19 +2,68 @@\n \n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.api.DDTags;\n+import datadog.trace.api.sampling.PrioritySampling;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-  public static final String TEST_PASS = \"PASS\";\n-  public static final String TEST_FAIL = \"FAIL\";\n-  public static final String TEST_SKIP = \"SKIP\";\n+\n+  public static final String TEST_PASS = \"pass\";\n+  public static final String TEST_FAIL = \"fail\";\n+  public static final String TEST_SKIP = \"skip\";\n+\n+  public static final String JENKINS = \"JENKINS_URL\";\n+  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n+  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n+  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n+  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n+  static final String JENKINS_JOB_URL = \"JOB_URL\";\n+  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n+  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n+  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n+  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d7ea796685f958598b4ee571430619261c7bfc0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI3NDY0Mw==", "bodyText": "Good point. Yes, I considered that option, but I realized that all implemented decorators have a reused hierarchy. In this case, the hypothetical CIDecorator is inseparable from the TestDecorator, so that's why I chose not to separate it. Apart from that, I didn't want to \"pollute\" the span decorators package with decorators that cannot be reused. I preferred to have it encapsulated in the TestDecorator class.", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478274643", "createdAt": "2020-08-27T09:15:02Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -2,19 +2,68 @@\n \n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.api.DDTags;\n+import datadog.trace.api.sampling.PrioritySampling;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-  public static final String TEST_PASS = \"PASS\";\n-  public static final String TEST_FAIL = \"FAIL\";\n-  public static final String TEST_SKIP = \"SKIP\";\n+\n+  public static final String TEST_PASS = \"pass\";\n+  public static final String TEST_FAIL = \"fail\";\n+  public static final String TEST_SKIP = \"skip\";\n+\n+  public static final String JENKINS = \"JENKINS_URL\";\n+  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n+  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n+  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n+  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n+  static final String JENKINS_JOB_URL = \"JOB_URL\";\n+  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n+  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n+  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n+  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, "originalCommit": {"oid": "7d7ea796685f958598b4ee571430619261c7bfc0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4NTg0OQ==", "bodyText": "Separating it would make this PR much smaller though - because you could then pass that span decorator through JUnit4Decorator.DECORATE and TestNGDecorator.DECORATE and simply call the method to decorate the span instead of having to duplicate all those methods across the two test hierarchies.\nIt also makes it easier for someone else to add a CI specific tag, since they just need to add it in one place and they don't have to remember to also add it to the JUnit4 and TestNG base types.", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478285849", "createdAt": "2020-08-27T09:33:50Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -2,19 +2,68 @@\n \n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.api.DDTags;\n+import datadog.trace.api.sampling.PrioritySampling;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-  public static final String TEST_PASS = \"PASS\";\n-  public static final String TEST_FAIL = \"FAIL\";\n-  public static final String TEST_SKIP = \"SKIP\";\n+\n+  public static final String TEST_PASS = \"pass\";\n+  public static final String TEST_FAIL = \"fail\";\n+  public static final String TEST_SKIP = \"skip\";\n+\n+  public static final String JENKINS = \"JENKINS_URL\";\n+  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n+  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n+  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n+  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n+  static final String JENKINS_JOB_URL = \"JOB_URL\";\n+  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n+  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n+  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n+  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, "originalCommit": {"oid": "7d7ea796685f958598b4ee571430619261c7bfc0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI4NzQ3MQ==", "bodyText": "Note it doesn't have to be in the \"span decorators\" package - just extracting the code that adds CI tags to a separate type (with Jenkins and Gitlab implementations) so it can be passed around using composition is enough.", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478287471", "createdAt": "2020-08-27T09:36:38Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -2,19 +2,68 @@\n \n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.api.DDTags;\n+import datadog.trace.api.sampling.PrioritySampling;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-  public static final String TEST_PASS = \"PASS\";\n-  public static final String TEST_FAIL = \"FAIL\";\n-  public static final String TEST_SKIP = \"SKIP\";\n+\n+  public static final String TEST_PASS = \"pass\";\n+  public static final String TEST_FAIL = \"fail\";\n+  public static final String TEST_SKIP = \"skip\";\n+\n+  public static final String JENKINS = \"JENKINS_URL\";\n+  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n+  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n+  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n+  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n+  static final String JENKINS_JOB_URL = \"JOB_URL\";\n+  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n+  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n+  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n+  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, "originalCommit": {"oid": "7d7ea796685f958598b4ee571430619261c7bfc0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMwMzk5Mg==", "bodyText": "As we talked offline, totally agree with the benefits you mention, but I'm not totally sure if we want those not-reusable decorators as separate classes. Note that this PR has only 2 CI implementations, but the number will grow to more than 10. If we're comfortable with having this level of granularity for those decorators, I'll change it \ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1799#discussion_r478303992", "createdAt": "2020-08-27T10:04:42Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -2,19 +2,68 @@\n \n import datadog.trace.api.DDSpanTypes;\n import datadog.trace.api.DDTags;\n+import datadog.trace.api.sampling.PrioritySampling;\n import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n import datadog.trace.bootstrap.instrumentation.api.Tags;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n+import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n public abstract class TestDecorator extends BaseDecorator {\n-  public static final String TEST_PASS = \"PASS\";\n-  public static final String TEST_FAIL = \"FAIL\";\n-  public static final String TEST_SKIP = \"SKIP\";\n+\n+  public static final String TEST_PASS = \"pass\";\n+  public static final String TEST_FAIL = \"fail\";\n+  public static final String TEST_SKIP = \"skip\";\n+\n+  public static final String JENKINS = \"JENKINS_URL\";\n+  static final String JENKINS_PROVIDER_NAME = \"jenkins\";\n+  static final String JENKINS_PIPELINE_ID = \"BUILD_TAG\";\n+  static final String JENKINS_PIPELINE_NUMBER = \"BUILD_NUMBER\";\n+  static final String JENKINS_PIPELINE_URL = \"BUILD_URL\";\n+  static final String JENKINS_JOB_URL = \"JOB_URL\";\n+  static final String JENKINS_WORKSPACE_PATH = \"WORKSPACE\";\n+  static final String JENKINS_GIT_REPOSITORY_URL = \"GIT_URL\";\n+  static final String JENKINS_GIT_COMMIT = \"GIT_COMMIT\";\n+  static final String JENKINS_GIT_BRANCH = \"GIT_BRANCH\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI2NDYzNw=="}, "originalCommit": {"oid": "7d7ea796685f958598b4ee571430619261c7bfc0"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4894, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}