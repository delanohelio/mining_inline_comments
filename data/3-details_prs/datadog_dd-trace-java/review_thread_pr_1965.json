{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjAxMzg4", "number": 1965, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo1NjowN1rOErzeyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOTozNFrOEskOEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzY3Njg4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMTo1NjowN1rOHexyGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjozMjoyMlrOHfQ9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDk2OQ==", "bodyText": "Could we use a MethodHandle instead here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502034969", "createdAt": "2020-10-08T21:56:07Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;\n+\n+  static {\n+    try {\n+      STATUS_CODE_METHOD = HttpServletResponse.class.getMethod(\"getStatus\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1MTMxOQ==", "bodyText": "Even better if you can provide a fallback no-op method handle to avoid the null check below.", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502051319", "createdAt": "2020-10-08T22:40:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;\n+\n+  static {\n+    try {\n+      STATUS_CODE_METHOD = HttpServletResponse.class.getMethod(\"getStatus\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDk2OQ=="}, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MjkzNg==", "bodyText": "is it?", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502342936", "createdAt": "2020-10-09T10:43:47Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;\n+\n+  static {\n+    try {\n+      STATUS_CODE_METHOD = HttpServletResponse.class.getMethod(\"getStatus\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDk2OQ=="}, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0Mzk4NQ==", "bodyText": "Done.  Still need to null check because we only want to set the tag if the value exists", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502543985", "createdAt": "2020-10-09T16:28:48Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;\n+\n+  static {\n+    try {\n+      STATUS_CODE_METHOD = HttpServletResponse.class.getMethod(\"getStatus\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDk2OQ=="}, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU0NTgyOQ==", "bodyText": "yeah, I think so since it would allow the removal of a branch below.", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502545829", "createdAt": "2020-10-09T16:32:22Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;\n+\n+  static {\n+    try {\n+      STATUS_CODE_METHOD = HttpServletResponse.class.getMethod(\"getStatus\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAzNDk2OQ=="}, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Mzc4MjAwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjozODo0N1rOHeywGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTozMTo1MlrOHfO3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1MDg0Mg==", "bodyText": "I think this can be final (assuming proper initialization below).", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502050842", "createdAt": "2020-10-08T22:38:47Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM1MDkzMQ==", "bodyText": "if you make this private static final and use a MethodHandle it will definitely be constant folded by the JIT compiler and it would be as good as calling the method itself.", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502350931", "createdAt": "2020-10-09T11:00:13Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1MDg0Mg=="}, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxMTUzNQ==", "bodyText": "Yes, I agree.  We should use MethodHandle whenever we can.  MethodHandles will tend to perform as well or better than reflection.  Both MethodHandles & reflection will generate classes, but MethodHandles do so without also requiring a ClassLoader and the generated class doesn't need to processed by instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502511535", "createdAt": "2020-10-09T15:31:52Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,32 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static Method STATUS_CODE_METHOD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA1MDg0Mg=="}, "originalCommit": {"oid": "bb687ed5ed9bcc47c397cc94ad72c277e7d13f20"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjgwODUwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/dropwizard/src/test/groovy/DropwizardTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0MDozOFrOHfPMiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNTo0MDozOFrOHfPMiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxNjg3Mg==", "bodyText": "I wish the DSL just let us embed child matchers inside of parents,  but until then, I think this is a reasonable step forward.", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r502516872", "createdAt": "2020-10-09T15:40:38Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/dropwizard/src/test/groovy/DropwizardTest.groovy", "diffHunk": "@@ -75,14 +74,14 @@ class DropwizardTest extends HttpServerTest<DropwizardTestSupport> {\n   }\n \n   @Override\n-  void handlerSpan(TraceAssert trace, Object parent, ServerEndpoint endpoint = SUCCESS) {\n+  void handlerSpan(TraceAssert trace, ServerEndpoint endpoint = SUCCESS) {\n     trace.span {\n       serviceName expectedServiceName()\n       operationName \"jax-rs.request\"\n       resourceName \"${testResource().simpleName}.${endpoint.name().toLowerCase()}\"\n       spanType DDSpanTypes.HTTP_SERVER\n       errored endpoint == EXCEPTION\n-      childOf(parent as DDSpan)\n+      childOfPrevious()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc25e2727f61449851ff989beab5462892d7cc8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTYyMDE2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1ODoyMFrOHf3vRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjo0ODoxNlrOHgwYOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTEyNw==", "bodyText": "what about other 2xx and 3xx non-error statuses - should they still be reported unchanged when there's an exception?", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r503181127", "createdAt": "2020-10-12T09:58:20Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -22,4 +50,35 @@ protected CharSequence spanType() {\n   protected CharSequence component() {\n     return JAVA_WEB_SERVLET_DISPATCHER;\n   }\n+\n+  @Override\n+  public AgentSpan onError(final AgentSpan span, final Throwable throwable) {\n+    if (throwable instanceof ServletException && throwable.getCause() != null) {\n+      super.onError(span, throwable.getCause());\n+    } else {\n+      super.onError(span, throwable);\n+    }\n+    return span;\n+  }\n+\n+  public AgentSpan onResponse(\n+      final AgentSpan span, final ServletResponse response, Throwable throwable) {\n+    if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n+      try {\n+        int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n+\n+        if (throwable != null && status == HttpServletResponse.SC_OK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b40843738144f87219fa3e85290e59f73483993"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEwOTExNA==", "bodyText": "This is copying the behavior of other there server instrumentations.  There are bigger questions around different statuses, the tracer setting 500 even when the exception is handled, and mapping exceptions to different statuses.", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r504109114", "createdAt": "2020-10-13T16:48:16Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -22,4 +50,35 @@ protected CharSequence spanType() {\n   protected CharSequence component() {\n     return JAVA_WEB_SERVLET_DISPATCHER;\n   }\n+\n+  @Override\n+  public AgentSpan onError(final AgentSpan span, final Throwable throwable) {\n+    if (throwable instanceof ServletException && throwable.getCause() != null) {\n+      super.onError(span, throwable.getCause());\n+    } else {\n+      super.onError(span, throwable);\n+    }\n+    return span;\n+  }\n+\n+  public AgentSpan onResponse(\n+      final AgentSpan span, final ServletResponse response, Throwable throwable) {\n+    if (response instanceof HttpServletResponse && STATUS_CODE_METHOD != null) {\n+      try {\n+        int status = (int) STATUS_CODE_METHOD.invokeExact((HttpServletResponse) response);\n+\n+        if (throwable != null && status == HttpServletResponse.SC_OK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTEyNw=="}, "originalCommit": {"oid": "1b40843738144f87219fa3e85290e59f73483993"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY2MjI0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOTozNFrOHf4JNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOTozNFrOHf4JNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4Nzc2NA==", "bodyText": "I sometimes widen catch blocks like this to Exception | LinkageError just to be absolutely sure...", "url": "https://github.com/DataDog/dd-trace-java/pull/1965#discussion_r503187764", "createdAt": "2020-10-12T10:09:34Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/servlet/src/main/java/datadog/trace/instrumentation/servlet/dispatcher/RequestDispatcherDecorator.java", "diffHunk": "@@ -1,13 +1,41 @@\n package datadog.trace.instrumentation.servlet.dispatcher;\n \n+import static datadog.trace.api.cache.RadixTreeCache.HTTP_STATUSES;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n \n public class RequestDispatcherDecorator extends BaseDecorator {\n   public static final RequestDispatcherDecorator DECORATE = new RequestDispatcherDecorator();\n   public static final CharSequence JAVA_WEB_SERVLET_DISPATCHER =\n       UTF8BytesString.createConstant(\"java-web-servlet-dispatcher\");\n \n+  private static final MethodHandle STATUS_CODE_METHOD;\n+\n+  static {\n+    // to satisfy the compiler that STATUS_CODE_METHOD is only assigned once\n+    // use a local variable\n+    MethodHandle local = null;\n+    try {\n+      local =\n+          MethodHandles.publicLookup()\n+              .findVirtual(\n+                  HttpServletResponse.class, \"getStatus\", MethodType.methodType(int.class));\n+    } catch (NoSuchMethodException | IllegalAccessException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b40843738144f87219fa3e85290e59f73483993"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4689, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}