{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTE1OTcx", "number": 1221, "title": "Add TraceProcessor and move some existing functionality to rules", "bodyText": "Specifically, the Status5XXRule, URLAsResourceNameRule, and Status404Rule.\nI tried moving some of the service name rules, but discovered that service name must be set eagerly because of the inheritance of name by child spans.", "createdAt": "2020-02-13T22:18:31Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1221", "merged": true, "mergeCommit": {"oid": "07f99a98d81a2ff4e0caffbdb6300fe76ec46736"}, "closed": true, "closedAt": "2020-04-14T17:33:47Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcECi89AFqTM1ODU5MzY1Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXl_MRgH2gAyMzc1MTE1OTcxOjExYzcxZTFkNWQwYTRmOTdkMTZhMDI1MDg1ZDE1YWU5NDFlMDhlYWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTkzNjU3", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-358593657", "createdAt": "2020-02-13T22:19:45Z", "commit": {"oid": "db8be071033d29562ba02b8b6efd041f0478a643"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxOTo0NlrOFpllLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxOTo0NlrOFpllLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MTY2Mw==", "bodyText": "Note, minor risk of a breaking change here in exchange for better consistency.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r379151663", "createdAt": "2020-02-13T22:19:46Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -86,11 +87,11 @@ private String normalizePath(final String path) {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final DDSpanContext context, String path) {\n+  private String addMethodIfAvailable(final Map<String, String> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = (String) context.getTags().get(Tags.HTTP_METHOD.getKey());\n+    final String verb = meta.get(Tags.HTTP_METHOD.getKey());\n     if (verb != null && !verb.isEmpty()) {\n-      path = verb + \" \" + path;\n+      path = verb.toUpperCase() + \" \" + path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db8be071033d29562ba02b8b6efd041f0478a643"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db8be071033d29562ba02b8b6efd041f0478a643", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/db8be071033d29562ba02b8b6efd041f0478a643", "committedDate": "2020-02-13T22:17:52Z", "message": "Add TraceProcessor and move some existing functionality to rules\n\nSpecifically, the Status5XXRule, URLAsResourceNameRule, and Status404Rule."}, "afterCommit": {"oid": "17c25f8f032327d6f474a486490eb82a559a7ea3", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/17c25f8f032327d6f474a486490eb82a559a7ea3", "committedDate": "2020-03-19T21:57:35Z", "message": "Stop setting error tag and update tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzExMDk5", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378711099", "createdAt": "2020-03-20T18:14:03Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxNDowM1rOF5edCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxNDowM1rOF5edCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjEwNg==", "bodyText": "This change seems unrelated; why are we making it?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395812106", "createdAt": "2020-03-20T18:14:03Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java", "diffHunk": "@@ -29,7 +29,7 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    final AgentSpan span = startSpan(\"aws.command\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzEzODU2", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378713856", "createdAt": "2020-03-20T18:18:17Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxODoxN1rOF5eluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxODoxN1rOF5eluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDMyOQ==", "bodyText": "I'm debating whether placing the list of Rules in the TraceProcessor is the right choice.\nAn alternative would be to associate a set of rules with a span as construction, but to defer execution until the end.\nI'm not sure if that's better or not in this case -- just suggesting an alternative.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395814329", "createdAt": "2020-03-20T18:18:17Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzE0NjU0", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378714654", "createdAt": "2020-03-20T18:19:33Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxOTozM1rOF5eoHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxOTozM1rOF5eoHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDk0Mw==", "bodyText": "The List + the loop in onTraceComplete effectively comprise a CompositeRule.\nI think it might be better to explicit introduce a CompositeRule class.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395814943", "createdAt": "2020-03-20T18:19:33Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =\n+      new Rule[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzE3OTU2", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378717956", "createdAt": "2020-03-20T18:24:32Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNDozMlrOF5eyTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNDozMlrOF5eyTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA==", "bodyText": "Mongo special case here for Mongo strikes me as problematic from both an encapsulation & maintenance standpoint.  This really makes me think that we might be better off attaching rules as each span construction -- or at least having an obvious way to override with a integration specific substitute rule.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395817548", "createdAt": "2020-03-20T18:24:32Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzE5MzUz", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378719353", "createdAt": "2020-03-20T18:26:41Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNjo0MVrOF5e2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNjo0MVrOF5e2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw==", "bodyText": "The instanceof checks here strike me as a bit messy as well.\nI've wondered for awhile whether we should have a Tags class rather than using Map<String, Object>.\nThe error prone checks here -- lead to think the answer is yes.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395818653", "createdAt": "2020-03-20T18:26:41Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzIwMTk1", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378720195", "createdAt": "2020-03-20T18:27:57Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNzo1OFrOF5e5Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNzo1OFrOF5e5Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTI3OA==", "bodyText": "containsKey followed by get is redundant -- unless we're expecting maps with null values.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395819278", "createdAt": "2020-03-20T18:27:58Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts span type tag to field */\n+public class SpanTypeRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"SpanTypeDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(DDTags.SPAN_TYPE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzIwNDU3", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378720457", "createdAt": "2020-03-20T18:28:22Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyODoyMlrOF5e52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyODoyMlrOF5e52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTQ4MA==", "bodyText": "I think I understand what is happening here, but this looks odd and error prone.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395819480", "createdAt": "2020-03-20T18:28:22Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts span type tag to field */\n+public class SpanTypeRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"SpanTypeDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(DDTags.SPAN_TYPE)) {\n+      span.setSpanType(tags.get(DDTags.SPAN_TYPE).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzIyNTIx", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378722521", "createdAt": "2020-03-20T18:31:39Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMTozOVrOF5fAEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMTozOVrOF5fAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTA3NQ==", "bodyText": "Not handling a NumberFormatException from parseInt.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395821075", "createdAt": "2020-03-20T18:31:39Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      final int responseCode =\n+          value instanceof Integer ? (int) value : Integer.parseInt(value.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzIyOTg4", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378722988", "createdAt": "2020-03-20T18:32:18Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMjoxOFrOF5fBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMjoxOFrOF5fBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ==", "bodyText": "This logic was repeated elsewhere.  I think we should find a better to encapsulate it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395821401", "createdAt": "2020-03-20T18:32:18Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -1,38 +1,40 @@\n-package datadog.opentracing.decorators;\n+package datadog.trace.common.processor.rule;\n \n+import datadog.opentracing.DDSpan;\n import datadog.opentracing.DDSpanContext;\n-import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.regex.Pattern;\n \n-public class URLAsResourceName extends AbstractDecorator {\n+public class URLAsResourceNameRule implements TraceProcessor.Rule {\n \n   // Matches any path segments with numbers in them. (exception for versioning: \"/v1/\")\n   public static final Pattern PATH_MIXED_ALPHANUMERICS =\n       Pattern.compile(\"(?<=/)(?![vV]\\\\d{1,2}/)(?:[^\\\\/\\\\d\\\\?]*[\\\\d]+[^\\\\/\\\\?]*)\");\n \n-  public URLAsResourceName() {\n-    super();\n-    setMatchingTag(Tags.HTTP_URL.getKey());\n-    setReplacementTag(DDTags.RESOURCE_NAME);\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"URLAsResourceName\"};\n   }\n \n   @Override\n-  public boolean shouldSetTag(final DDSpanContext context, final String tag, final Object value) {\n-    final String statusCode = String.valueOf(context.getTags().get(Tags.HTTP_STATUS.getKey()));\n-    // do nothing if the status code is already set and equals to 404.\n-    // TODO: it assumes that Status404Decorator is active. If it's not, it will lead to unexpected\n-    // behaviors\n-    if (value == null || statusCode != null && statusCode.equals(\"404\")) {\n-      return true;\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    final DDSpanContext context = span.context();\n+    final Object httpStatus = tags.get(Tags.HTTP_STATUS.getKey());\n+    if (context.isResourceNameSet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzI0MDU5", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-378724059", "createdAt": "2020-03-20T18:34:03Z", "commit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozNDowM1rOF5fEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozNDowM1rOF5fEjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw==", "bodyText": "I don't think this needs to be under the lock.  Any synchronization for each span should be handled elsewhere.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395822223", "createdAt": "2020-03-20T18:34:03Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c", "committedDate": "2020-03-20T17:38:49Z", "message": "Remove slow.stack from trace comparison"}, "afterCommit": {"oid": "b3a0b6d72a295494bf16f155f143aa4d08c46d51", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b3a0b6d72a295494bf16f155f143aa4d08c46d51", "committedDate": "2020-04-06T16:16:59Z", "message": "Fix test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3a0b6d72a295494bf16f155f143aa4d08c46d51", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b3a0b6d72a295494bf16f155f143aa4d08c46d51", "committedDate": "2020-04-06T16:16:59Z", "message": "Fix test"}, "afterCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bb7a77add08f42637e62b744b6fb8694592c4234", "committedDate": "2020-04-06T16:36:48Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTE1Mjk1", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-388515295", "createdAt": "2020-04-06T18:35:06Z", "commit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozNTowNlrOGBkzaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozNTowNlrOGBkzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNDc0NQ==", "bodyText": "Looks like you can remove these two lines now that you aren't doing a equals against the whole object", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404304745", "createdAt": "2020-04-06T18:35:06Z", "author": {"login": "devinsba"}, "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/decorators/SpanDecoratorTest.groovy", "diffHunk": "@@ -286,28 +276,29 @@ class SpanDecoratorTest extends DDSpecification {\n     // these 2 lines to avoid checking for {@code DDSpanContext.DD_MEASURED} for every metric:\n     span.context().setMetric(DDSpanContext.DD_MEASURED, 42)\n     span.metrics.remove(DDSpanContext.DD_MEASURED, 42)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTk1MDgx", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-388595081", "createdAt": "2020-04-06T20:32:57Z", "commit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMjo1N1rOGBoy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMjo1N1rOGBoy8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDE2MA==", "bodyText": "I know this is just a copy of Status5XXDecorator but how does this not break overriding the error range with dd.http.server.error.statuses?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404370160", "createdAt": "2020-04-06T20:32:57Z", "author": {"login": "randomanderson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      try {\n+        final int responseCode =\n+            value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n+        span.setError(500 <= responseCode && responseCode < 600);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDk3NjA2", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-389497606", "createdAt": "2020-04-07T21:18:05Z", "commit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxODowNVrOGCWftw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxODowNVrOGCWftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODkwMw==", "bodyText": "Doesn't this have the potential to raise an NPE?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405118903", "createdAt": "2020-04-07T21:18:05Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo\n+      // Skip the decorators\n+      if (tags.containsKey(Tags.COMPONENT.getKey())\n+          && \"java-mongo\".equals(tags.get(Tags.COMPONENT.getKey()))) {\n+        return;\n+      }\n+\n+      final String statement = tags.get(Tags.DB_STATEMENT.getKey()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTAzOTg5", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-389503989", "createdAt": "2020-04-07T21:28:33Z", "commit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyODozM1rOGCW0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyODozM1rOGCW0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDI2OA==", "bodyText": "This looks better than the prior version, but it would be nice to eliminate the second call to verb.toString()", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405124268", "createdAt": "2020-04-07T21:28:33Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -86,11 +88,11 @@ private String normalizePath(final String path) {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final DDSpanContext context, String path) {\n+  private String addMethodIfAvailable(final Map<String, Object> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = (String) context.getTags().get(Tags.HTTP_METHOD.getKey());\n-    if (verb != null && !verb.isEmpty()) {\n-      path = verb + \" \" + path;\n+    final Object verb = meta.get(Tags.HTTP_METHOD.getKey());\n+    if (verb != null && !verb.toString().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTExMTIy", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-389511122", "createdAt": "2020-04-07T21:41:29Z", "commit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0MToyOVrOGCXMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0MToyOVrOGCXMpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMDQwNQ==", "bodyText": "Are you still calling them decorators?\nI understanding supporting the old config, but maybe the method name should be changed.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405130405", "createdAt": "2020-04-07T21:41:29Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =\n+      new Rule[] {\n+        // Rules are applied in order.\n+        new DBStatementRule(),\n+        new ResourceNameRule(),\n+        new SpanTypeRule(),\n+        new Status5XXRule(),\n+        new ErrorRule(),\n+        new URLAsResourceNameRule(),\n+        new Status404Rule(),\n+        new AnalyticsSampleRateRule(),\n+      };\n+\n+  private final List<Rule> rules;\n+\n+  public TraceProcessor() {\n+\n+    rules = new ArrayList<>(DEFAULT_RULES.length);\n+    for (final Rule rule : DEFAULT_RULES) {\n+      if (isEnabled(rule)) {\n+        rules.add(rule);\n+      }\n+    }\n+  }\n+\n+  private static boolean isEnabled(final Rule rule) {\n+    boolean enabled = Config.get().isDecoratorEnabled(rule.getClass().getSimpleName());\n+    for (final String alias : rule.aliases()) {\n+      enabled &= Config.get().isDecoratorEnabled(alias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTEyNDE1", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-389512415", "createdAt": "2020-04-07T21:43:47Z", "commit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0Mzo0N1rOGCXRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0Mzo0N1rOGCXRCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMTUyOA==", "bodyText": "containsKey / get again.\nThis does raises a question about the thread safety.  What is the hand-off policy for the span between the creating thread and the processing thread?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405131528", "createdAt": "2020-04-07T21:43:47Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTYyMjUw", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#pullrequestreview-391562250", "createdAt": "2020-04-10T17:26:20Z", "commit": {"oid": "54ab10c165dac2327a259050267a460ace57b416"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73fb7aa2b68a5d8aced24eca7dce97ed43429216", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/73fb7aa2b68a5d8aced24eca7dce97ed43429216", "committedDate": "2020-04-13T17:59:11Z", "message": "Add TraceProcessor and move some existing functionality to rules\n\nSpecifically, the Status5XXRule, URLAsResourceNameRule, and Status404Rule."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97efa307d3e1a49393285f27df99922435e54a3f", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/97efa307d3e1a49393285f27df99922435e54a3f", "committedDate": "2020-04-13T17:59:11Z", "message": "Stop setting error tag and update tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2028b100098777cdabc883d14e21e05af655c9f8", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2028b100098777cdabc883d14e21e05af655c9f8", "committedDate": "2020-04-13T17:59:11Z", "message": "Move ErrorFlag to TraceProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329e79b8012b0c80e13fdf90d510d27cfcff1ad4", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/329e79b8012b0c80e13fdf90d510d27cfcff1ad4", "committedDate": "2020-04-13T17:59:11Z", "message": "Move SpanTypeDecorator to SpanTypeRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0eb73ef12b8e9dcb3d4b524e07779c0a98d33ee", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f0eb73ef12b8e9dcb3d4b524e07779c0a98d33ee", "committedDate": "2020-04-13T17:59:11Z", "message": "Use tags instead of meta\n\nwhich includes baggage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c288f69e645712d14267575367c94ec21f7e2026", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c288f69e645712d14267575367c94ec21f7e2026", "committedDate": "2020-04-13T17:59:11Z", "message": "Move ResourceNameDecorator to ResourceNameRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7650efe5ed8c4d332df621f0b1bae8017d47acc1", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7650efe5ed8c4d332df621f0b1bae8017d47acc1", "committedDate": "2020-04-13T19:54:51Z", "message": "Move AnalyticsSampleRateDecorator to AnalyticsSampleRateRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7614fa42e0fab5aecf9f7af9a740e30b265bca3e", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7614fa42e0fab5aecf9f7af9a740e30b265bca3e", "committedDate": "2020-04-13T19:54:52Z", "message": "Move DBStatementAsResourceName to DBStatementRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8170f7bc7b0d1392a0155fdd7df04a094a556387", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8170f7bc7b0d1392a0155fdd7df04a094a556387", "committedDate": "2020-04-13T19:55:37Z", "message": "Various fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df97f90fec692dd710312e6e5954b8cd855c14d9", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/df97f90fec692dd710312e6e5954b8cd855c14d9", "committedDate": "2020-04-13T19:55:37Z", "message": "Remove OperationDecorator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60226086c3a36ef5281d3e06af51e60d11f8c219", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/60226086c3a36ef5281d3e06af51e60d11f8c219", "committedDate": "2020-04-13T21:06:12Z", "message": "Catch NumberFormatException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1dc756b129efeb2dc36667e935610e97ee5905b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d1dc756b129efeb2dc36667e935610e97ee5905b", "committedDate": "2020-04-13T21:06:12Z", "message": "Fix issues from code reviews."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54ab10c165dac2327a259050267a460ace57b416", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/54ab10c165dac2327a259050267a460ace57b416", "committedDate": "2020-04-09T19:24:58Z", "message": "Fix issues from code reviews."}, "afterCommit": {"oid": "aa77bb7bf8b2cf0783ca54477c80218b78b8bdf0", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/aa77bb7bf8b2cf0783ca54477c80218b78b8bdf0", "committedDate": "2020-04-13T21:07:49Z", "message": "Fix tests.\n\nFix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa803489b250a8a6f78a85051e336bf2498a49b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3aa803489b250a8a6f78a85051e336bf2498a49b", "committedDate": "2020-04-13T22:03:53Z", "message": "Fix tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa77bb7bf8b2cf0783ca54477c80218b78b8bdf0", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/aa77bb7bf8b2cf0783ca54477c80218b78b8bdf0", "committedDate": "2020-04-13T21:07:49Z", "message": "Fix tests.\n\nFix tests."}, "afterCommit": {"oid": "3aa803489b250a8a6f78a85051e336bf2498a49b", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3aa803489b250a8a6f78a85051e336bf2498a49b", "committedDate": "2020-04-13T22:03:53Z", "message": "Fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c71e1d5d0a4f97d16a025085d15ae941e08eac", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/11c71e1d5d0a4f97d16a025085d15ae941e08eac", "committedDate": "2020-04-14T16:21:51Z", "message": "Avoid setting the error tag\n\nand test fixes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2714, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}