{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MzUzNTU4", "number": 1940, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOToxNjoyNlrOEpvykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo0Njo1NlrOEqLgdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjEwMDY3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOToxNjoyNlrOHbmwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToxMjowOVrOHcYSSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcwODU4NA==", "bodyText": "Do you want a hierarchy here instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r498708584", "createdAt": "2020-10-02T09:16:26Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -69,6 +170,20 @@ public TestDecorator() {\n       setJenkinsData();\n     } else if (System.getenv(GITLAB) != null) {\n       setGitLabData();\n+    } else if (System.getenv(TRAVIS) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjc0OA==", "bodyText": "I think it's fine to have it like this. A hierarchy for CI/Git decorators is too specific for the \"CiApp\" use case, and it will not be reusable for any other case. I'd not create a lot of decorators only for this case, IMHO.", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r498732748", "createdAt": "2020-10-02T10:08:36Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -69,6 +170,20 @@ public TestDecorator() {\n       setJenkinsData();\n     } else if (System.getenv(GITLAB) != null) {\n       setGitLabData();\n+    } else if (System.getenv(TRAVIS) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcwODU4NA=="}, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NDE1MA==", "bodyText": "I think the code would be easier to read if things were pulled apart a bit, so that you have one abstract CiInformation class that has all the methods that you need to implement, i.e. getProviderName(), getPipelineId et.c., and then have a specific subclass for each provider like gitlab, travis, et.c. As it's written right now, I can't really see if all the setter methods actually set all the fields they should.", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r499374150", "createdAt": "2020-10-05T06:46:25Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -69,6 +170,20 @@ public TestDecorator() {\n       setJenkinsData();\n     } else if (System.getenv(GITLAB) != null) {\n       setGitLabData();\n+    } else if (System.getenv(TRAVIS) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcwODU4NA=="}, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMDA3Mg==", "bodyText": "Refactored into different CIProviderInfo implementations.", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r499520072", "createdAt": "2020-10-05T11:12:09Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/decorator/TestDecorator.java", "diffHunk": "@@ -69,6 +170,20 @@ public TestDecorator() {\n       setJenkinsData();\n     } else if (System.getenv(GITLAB) != null) {\n       setGitLabData();\n+    } else if (System.getenv(TRAVIS) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcwODU4NA=="}, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjY0MTgxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/decorator/TestDecoratorTest.groovy", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNjo0Njo1NlrOHcPY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMToxMjozN1rOHcYTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NDMyOQ==", "bodyText": "Could this be a wildcard import?", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r499374329", "createdAt": "2020-10-05T06:46:56Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/decorator/TestDecoratorTest.groovy", "diffHunk": "@@ -6,7 +6,78 @@ import datadog.trace.bootstrap.instrumentation.api.AgentSpan\n import datadog.trace.bootstrap.instrumentation.api.Tags\n import org.junit.Rule\n import org.junit.contrib.java.lang.system.EnvironmentVariables\n+import spock.lang.Shared\n \n+import static datadog.trace.bootstrap.instrumentation.decorator.TestDecorator.APPVEYOR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NzYxNQ==", "bodyText": "I think we could do it, but setting a smaller number in the Imports configuration in the IDE.\nNow, following the CONTRIBUTING.md, is set to 9999.\n* Editor > Code Style > Java/Groovy > Imports\n  * Class count to use import with '*': `9999` (some number sufficiently large that is unlikely to matter)\n  * Names count to use static import with '*': `9999`", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r499377615", "createdAt": "2020-10-05T06:55:44Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/decorator/TestDecoratorTest.groovy", "diffHunk": "@@ -6,7 +6,78 @@ import datadog.trace.bootstrap.instrumentation.api.AgentSpan\n import datadog.trace.bootstrap.instrumentation.api.Tags\n import org.junit.Rule\n import org.junit.contrib.java.lang.system.EnvironmentVariables\n+import spock.lang.Shared\n \n+import static datadog.trace.bootstrap.instrumentation.decorator.TestDecorator.APPVEYOR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NDMyOQ=="}, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUyMDMzNQ==", "bodyText": "As TestDecoratorTest has been refactored, this comment has been resolved.", "url": "https://github.com/DataDog/dd-trace-java/pull/1940#discussion_r499520335", "createdAt": "2020-10-05T11:12:37Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/decorator/TestDecoratorTest.groovy", "diffHunk": "@@ -6,7 +6,78 @@ import datadog.trace.bootstrap.instrumentation.api.AgentSpan\n import datadog.trace.bootstrap.instrumentation.api.Tags\n import org.junit.Rule\n import org.junit.contrib.java.lang.system.EnvironmentVariables\n+import spock.lang.Shared\n \n+import static datadog.trace.bootstrap.instrumentation.decorator.TestDecorator.APPVEYOR", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM3NDMyOQ=="}, "originalCommit": {"oid": "582b2969cd4d016df09efa80571ac3a7ce453987"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4877, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}