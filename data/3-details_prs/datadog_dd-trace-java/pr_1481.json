{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDk5NjUw", "number": 1481, "title": "add time in queue", "bodyText": "Adds visibility on how long transactions spend in a kafka queue\nsubmits the time difference between the start of the consumer span and the record's timestamp to generate an estimation of time spent in queue", "createdAt": "2020-05-21T01:30:46Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1481", "merged": true, "mergeCommit": {"oid": "d964f18534e5f0ce8d5a5dea9b64b89cfbefd601"}, "closed": true, "closedAt": "2020-05-21T20:00:35Z", "author": {"login": "ziquanmiao"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjTYMLgH2gAyNDIxMDk5NjUwOmFjZmRlMzg0YTZhNzdlYmVjNjFhNGM5ODFhMjFlYTg0MjM5NzI3MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjjSByAFqTQxNjQ0OTA4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f", "author": {"user": null}, "url": "https://github.com/DataDog/dd-trace-java/commit/acfde384a6a77ebec61a4c981a21ea842397271f", "committedDate": "2020-05-21T01:28:03Z", "message": "add time in queue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDE2Nzk4", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#pullrequestreview-416016798", "createdAt": "2020-05-21T09:49:05Z", "commit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTo0OTowNVrOGYs4mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDowMDozOVrOGYtM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1NDM5Mw==", "bodyText": "Since both timestamps are wall clock based, this duration can be negative. If that would break things elsewhere, it should be guarded with a Math.max(consumeTime - produceTime, 0L)", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428554393", "createdAt": "2020-05-21T09:49:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1OTYxMg==", "bodyText": "If we add \"record.time_in_queue_milliseconds\" to DDTags we can avoid materialising its UTF-8 encoding during serialisation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428559612", "createdAt": "2020-05-21T10:00:39Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTgyMTk5", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#pullrequestreview-416182199", "createdAt": "2020-05-21T14:16:12Z", "commit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoxNjoxM1rOGY0fsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyMTozOFrOGY0s9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3OTA5MA==", "bodyText": "we haven't really done this to all the integrations...  for example, see line 62-63.  Let's not worry about it in this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428679090", "createdAt": "2020-05-21T14:16:13Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1OTYxMg=="}, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MjI1MQ==", "bodyText": "I agree with using max.  Also, can we rename to record.queue_time_ms? I think spelling it out is unnecessarily verbose.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428682251", "createdAt": "2020-05-21T14:21:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1NDM5Mw=="}, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MjQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n          \n          \n            \n                  final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n          \n      \n    \n    \n  \n\nSemantically, the span passed into the method is the one representing the consuming of the message.  Besides, it will always be the root span anyway.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428682484", "createdAt": "2020-05-21T14:21:38Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef11aa02f3f6746740ff4ddb177e4dab0fd94531", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ef11aa02f3f6746740ff4ddb177e4dab0fd94531", "committedDate": "2020-05-21T17:14:07Z", "message": "fix kafka client tests, floor duration at 0, move tag names to constants class so we can capture their encodings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4092c0685602eb0b9b3f9cfdd93f561161e3761", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c4092c0685602eb0b9b3f9cfdd93f561161e3761", "committedDate": "2020-05-21T18:06:26Z", "message": "fix dependent test in kafka streams"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2Mzk4MjEw", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#pullrequestreview-416398210", "createdAt": "2020-05-21T18:42:20Z", "commit": {"oid": "c4092c0685602eb0b9b3f9cfdd93f561161e3761"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDQ5MDg3", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#pullrequestreview-416449087", "createdAt": "2020-05-21T19:59:48Z", "commit": {"oid": "c4092c0685602eb0b9b3f9cfdd93f561161e3761"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2282, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}