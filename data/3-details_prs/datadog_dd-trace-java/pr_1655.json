{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MTA2NzMy", "number": 1655, "title": "Small tweaks to tags map in DDSpanContext", "bodyText": "This PR consists of three parts that are separate, but build on each other.\n\nDon't insert all tags into the CoreSpanBuilder tags hash map just to copy them out and insert them into the DDSpanContext tags map.\nSince the tags map in DDSpanContext in most cases is probably not accessed concurrently, change it to a normal HashMap that is guarded by synchronized access.\nMake sure that processing of tag interceptors and rules don't take the lock multiple times.\n\nThese three combined shaves off 25-45% of the time being spent in creating a span and adding tags to it.\n|                                                                          |      |     |   Master |         |       PR |         |       |\n|Benchmark                                                                 | Mode | Cnt |    Score |   Error |    Score |   Error | Units |\n|--------------------------------------------------------------------------|------|-----|----------|---------|----------|---------|-------|\n|StartSpanBenchmark.addTagAfterChildSpan                                   |   ss |  30 |    8.041 | \u00b1 0.784 |    4.658 | \u00b1 0.511 | ms/op |\n|StartSpanBenchmark.addTagAfterChildSpan:\u00b7gc.alloc.rate.norm               |   ss |  30 | 1115.891 | \u00b1 0.093 |  691.863 | \u00b1 0.086 |  B/op |\n|StartSpanBenchmark.addTagWitInterceptorAfterChildSpan                     |   ss |  30 |    6.878 | \u00b1 0.668 |    4.569 | \u00b1 0.248 | ms/op |\n|StartSpanBenchmark.addTagWitInterceptorAfterChildSpan:\u00b7gc.alloc.rate.norm |   ss |  30 | 1003.890 | \u00b1 0.094 |  659.862 | \u00b1 0.095 |  B/op |\n|StartSpanBenchmark.childSpan                                              |   ss |  30 |    6.780 | \u00b1 0.660 |    4.421 | \u00b1 0.245 | ms/op |\n|StartSpanBenchmark.childSpan:\u00b7gc.alloc.rate.norm                          |   ss |  30 | 1003.891 | \u00b1 0.094 |  659.862 | \u00b1 0.096 |  B/op |\n|StartSpanBenchmark.onTraceComplete                                        |   ss |  30 |    1.359 | \u00b1 0.163 |    1.233 | \u00b1 0.177 | ms/op |\n|StartSpanBenchmark.onTraceComplete:\u00b7gc.alloc.rate.norm                    |   ss |  30 |    0.252 | \u00b1 0.004 |    0.220 | \u00b1 0.005 |  B/op |\n|StartSpanBenchmark.onTraceCompleteWithTagMatchingRule                     |   ss |  30 |    8.701 | \u00b1 0.694 |    5.996 | \u00b1 0.666 | ms/op |\n|StartSpanBenchmark.onTraceCompleteWithTagMatchingRule:\u00b7gc.alloc.rate.norm |   ss |  30 | 1616.242 | \u00b1 0.004 | 1360.217 | \u00b1 0.005 |  B/op |\n|StartSpanBenchmark.rootSpan                                               |   ss |  30 |    6.828 | \u00b1 0.512 |    5.201 | \u00b1 0.522 | ms/op |\n|StartSpanBenchmark.rootSpan:\u00b7gc.alloc.rate.norm                           |   ss |  30 | 1560.242 | \u00b1 0.006 | 1304.216 | \u00b1 0.004 |  B/op |\n\nThis is the Bencmark:\npackage datadog.trace.core;\n\nimport datadog.trace.bootstrap.instrumentation.api.AgentSpan;\nimport datadog.trace.core.processor.TraceProcessor;\nimport java.util.Collections;\nimport java.util.List;\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.infra.Blackhole;\n\n@State(Scope.Benchmark)\n@OperationsPerInvocation(value = 10000)\n@BenchmarkMode(value = Mode.SingleShotTime)\n@Warmup(iterations = 100)\n@Measurement(iterations = 30)\npublic class StartSpanBenchmark {\n\n  private final int count = 10000;\n  private CoreTracer tracer;\n  private AgentSpan parentSpan;\n  private TraceProcessor processor = new TraceProcessor();\n  private List<DDSpan> trace;\n\n  @Setup(Level.Trial)\n  public void init() {\n    // TODO maybe add something more to this one\n    tracer = new CoreTracer.CoreTracerBuilder().build();\n    trace = Collections.singletonList((DDSpan) tracer.startSpan(\"processingTrace\"));\n  }\n\n  @Setup(Level.Iteration)\n  public void gc() {\n    parentSpan = tracer.startSpan(\"parentSpan\");\n    System.gc();\n  }\n\n  @Benchmark()\n  public void rootSpan(Blackhole bh) {\n    for (int i = 0; i < count; i++) {\n      bh.consume(tracer.startSpan(\"rootSpan\"));\n    }\n  }\n\n  @Benchmark()\n  public void childSpan(Blackhole bh) {\n    for (int i = 0; i < count; i++) {\n      bh.consume(tracer.startSpan(\"childSpan\", parentSpan.context()));\n    }\n  }\n\n  @Benchmark()\n  public void addTagAfterChildSpan(Blackhole bh) {\n    for (int i = 0; i < count; i++) {\n      bh.consume(tracer.startSpan(\"childSpan\", parentSpan.context()).setTag(\"foo\", \"bar\"));\n    }\n  }\n\n  @Benchmark()\n  public void addTagWitInterceptorAfterChildSpan(Blackhole bh) {\n    for (int i = 0; i < count; i++) {\n      bh.consume(tracer.startSpan(\"childSpan\", parentSpan.context()).setTag(\"service.name\", \"bar\"));\n    }\n  }\n\n  @Benchmark()\n  public void onTraceComplete(Blackhole bh) {\n    for (int i = 0; i < count; i++) {\n      bh.consume(processor.onTraceComplete(trace));\n    }\n  }\n\n  @Benchmark()\n  public void onTraceCompleteWithTagMatchinRule(Blackhole bh) {\n    for (int i = 0; i < count; i++) {\n      bh.consume(\n          processor.onTraceComplete(\n              Collections.singletonList(\n                  (DDSpan) tracer.startSpan(\"processingTrace\").setTag(\"resource.name\", \"bar\"))));\n    }\n  }\n}", "createdAt": "2020-07-03T15:18:02Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1655", "merged": true, "mergeCommit": {"oid": "86da39a5e4659c306ae95c70c61cf9f142e07fad"}, "closed": true, "closedAt": "2020-07-31T18:29:34Z", "author": {"login": "bantonsson"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxVV4ugFqTQ0MjQ4MzgyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6EWugAFqTQ1ODY3MzUyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDgzODI4", "url": "https://github.com/DataDog/dd-trace-java/pull/1655#pullrequestreview-442483828", "createdAt": "2020-07-03T15:40:16Z", "commit": {"oid": "183c78b7a50d6cc8becbb61a88b516778fc8775b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTo0MDoxN1rOGszxcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTo0MDoxN1rOGszxcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzODc2OQ==", "bodyText": "camelCase?", "url": "https://github.com/DataDog/dd-trace-java/pull/1655#discussion_r449638769", "createdAt": "2020-07-03T15:40:17Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -45,7 +47,7 @@\n   private final DDId parentId;\n \n   /** Tags are associated to the current span, they will not propagate to the children span */\n-  private final Map<String, Object> tags = new ConcurrentHashMap<>();\n+  private final Map<String, Object> unsafe_tags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "183c78b7a50d6cc8becbb61a88b516778fc8775b"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "183c78b7a50d6cc8becbb61a88b516778fc8775b", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/183c78b7a50d6cc8becbb61a88b516778fc8775b", "committedDate": "2020-07-03T13:26:26Z", "message": "Change tags map to a protected normal HashMap"}, "afterCommit": {"oid": "42bd262d16a549df21da698845914b6d2d73fbc0", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/42bd262d16a549df21da698845914b6d2d73fbc0", "committedDate": "2020-07-03T15:53:48Z", "message": "Change tags map to a protected normal HashMap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzE5MTAx", "url": "https://github.com/DataDog/dd-trace-java/pull/1655#pullrequestreview-443319101", "createdAt": "2020-07-06T18:36:44Z", "commit": {"oid": "42bd262d16a549df21da698845914b6d2d73fbc0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNjo0NFrOGtizQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNjo0NFrOGtizQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwOTI4Mw==", "bodyText": "Can you add a comment rationalizing why you went with HashMap + synchronization vs ConcurrentHashMap?", "url": "https://github.com/DataDog/dd-trace-java/pull/1655#discussion_r450409283", "createdAt": "2020-07-06T18:36:44Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/DDSpanContext.java", "diffHunk": "@@ -110,9 +108,10 @@ public DDSpanContext(\n       this.baggageItems = new ConcurrentHashMap<>(baggageItems);\n     }\n \n-    if (tags != null) {\n-      this.tags.putAll(tags);\n-    }\n+    // Three is the magic number from the tags below that we set at the end,\n+    // and \"* 4 / 3\" is to make sure that we don't resize immediately\n+    int capacity = ((tagsSize <= 0 ? 3 : tagsSize + 3) * 4) / 3;\n+    this.unsafeTags = new HashMap<>(capacity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42bd262d16a549df21da698845914b6d2d73fbc0"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349094b68b3e4e9cbc85e98c7bfaa32189d52563", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/349094b68b3e4e9cbc85e98c7bfaa32189d52563", "committedDate": "2020-07-30T11:31:49Z", "message": "Don't populate a map to populate the tags map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30f0cc5adca6f20a2d56d9ec8897cc624101e3a", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e30f0cc5adca6f20a2d56d9ec8897cc624101e3a", "committedDate": "2020-07-30T11:50:52Z", "message": "Change tags map to a protected normal HashMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58a437c60f178eace496801d51903223a12ffef3", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/58a437c60f178eace496801d51903223a12ffef3", "committedDate": "2020-07-30T11:51:06Z", "message": "Avoid repetetive locking for TraceProcessor and TagInterceptor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42bd262d16a549df21da698845914b6d2d73fbc0", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/42bd262d16a549df21da698845914b6d2d73fbc0", "committedDate": "2020-07-03T15:53:48Z", "message": "Change tags map to a protected normal HashMap"}, "afterCommit": {"oid": "58a437c60f178eace496801d51903223a12ffef3", "author": {"user": {"login": "bantonsson", "name": "Bj\u00f6rn Antonsson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/58a437c60f178eace496801d51903223a12ffef3", "committedDate": "2020-07-30T11:51:06Z", "message": "Avoid repetetive locking for TraceProcessor and TagInterceptor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDU1MjE5", "url": "https://github.com/DataDog/dd-trace-java/pull/1655#pullrequestreview-458455219", "createdAt": "2020-07-30T14:27:33Z", "commit": {"oid": "58a437c60f178eace496801d51903223a12ffef3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjczNTIz", "url": "https://github.com/DataDog/dd-trace-java/pull/1655#pullrequestreview-458673523", "createdAt": "2020-07-30T18:58:08Z", "commit": {"oid": "58a437c60f178eace496801d51903223a12ffef3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}