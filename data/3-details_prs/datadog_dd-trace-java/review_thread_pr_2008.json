{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjM0NDky", "number": 2008, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjowOTo0MlrOEvnNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowMDowM1rOEvy3Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYwOTI0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/elasticsearch/transport-2/src/latestDepTest/groovy/ElasticsearchBreakTraceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjowOTo0MlrOHksA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjowOTo0MlrOHksA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzMTkwNQ==", "bodyText": "Could you add a comment to explain why this is necessary?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508231905", "createdAt": "2020-10-20T06:09:42Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/elasticsearch/transport-2/src/latestDepTest/groovy/ElasticsearchBreakTraceInstrumentation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.Advice;\n+\n+@AutoService(Instrumenter.class)\n+public class ElasticsearchBreakTraceInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYxMDY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/elasticsearch/transport-2/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMDoxN1rOHksBrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMDoxN1rOHksBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzMjEwOQ==", "bodyText": "Could you add a comment to explain how this differs from the other ElasticsearchBreakTraceInstrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508232109", "createdAt": "2020-10-20T06:10:17Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/elasticsearch/transport-2/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.Advice;\n+\n+@AutoService(Instrumenter.class)\n+public class ElasticsearchBreakTraceInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYxMTU4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/elasticsearch/transport-5.3/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMDozOVrOHksCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMDozOVrOHksCPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzMjI1Mw==", "bodyText": "Could you add a comment to explain how this differs from the other ElasticsearchBreakTraceInstrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508232253", "createdAt": "2020-10-20T06:10:39Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/elasticsearch/transport-5.3/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.Advice;\n+\n+@AutoService(Instrumenter.class)\n+public class ElasticsearchBreakTraceInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYxMjEzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/elasticsearch/transport-5/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMDo1M1rOHksClQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMDo1M1rOHksClQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzMjM0MQ==", "bodyText": "Could you add a comment to explain how this differs from the other ElasticsearchBreakTraceInstrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508232341", "createdAt": "2020-10-20T06:10:53Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/elasticsearch/transport-5/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.Advice;\n+\n+@AutoService(Instrumenter.class)\n+public class ElasticsearchBreakTraceInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYxMjk3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/elasticsearch/transport-6/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMToxNVrOHksDFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxMToxNVrOHksDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzMjQ2OQ==", "bodyText": "Could you add a comment to explain how this differs from the other ElasticsearchBreakTraceInstrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508232469", "createdAt": "2020-10-20T06:11:15Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/elasticsearch/transport-6/src/test/groovy/ElasticsearchBreakTraceInstrumentation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.Advice;\n+\n+@AutoService(Instrumenter.class)\n+public class ElasticsearchBreakTraceInstrumentation implements Instrumenter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzY1NDQ2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/test/groovy/NettyExecutorInstrumentationTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyNzo0NVrOHksbsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyNzo0NVrOHksbsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzODc3MA==", "bodyText": "How do we avoid diffs like this? One option is for you to uninstall the plugin which edits code unrelated to the change you've made when you save files as I believe you are now in a minority in using it. If we want consistent formatting of test files, note that I run ./gradlew spotlessApply before I commit every time I commit, but reformatting of test files is disabled; I think it should have been enabled. The status quo is unsustainable.", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508238770", "createdAt": "2020-10-20T06:27:45Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/test/groovy/NettyExecutorInstrumentationTest.groovy", "diffHunk": "@@ -14,7 +14,6 @@ import java.util.concurrent.Future\n import java.util.concurrent.RejectedExecutionException\n import java.util.concurrent.TimeUnit\n \n-import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope\n import static org.junit.Assume.assumeTrue\n \n class NettyExecutorInstrumentationTest extends AgentTestRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzY2MDA1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/opentracing/api-0.31/src/test/groovy/OpenTracing31Test.groovy", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyOTo0NFrOHksfDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoxNjo1NFrOHlrT_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzOTYyOA==", "bodyText": "Hmm. Why is this necessary? Is this a new gotcha? This definitely needs a comment now.", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508239628", "createdAt": "2020-10-20T06:29:44Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentracing/api-0.31/src/test/groovy/OpenTracing31Test.groovy", "diffHunk": "@@ -131,6 +131,7 @@ class OpenTracing31Test extends AgentTestRunner {\n     setup:\n     def span = tracer.buildSpan(\"some name\").start()\n     def scope = tracer.scopeManager().activate(span, finishSpan)\n+    (scope as TraceScope).setAsyncPropagation(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3MzgzMg==", "bodyText": "This was not a new gotcha... it was returning the state to false so the rest of the test could remain the same.  I could just as easily invert the test.", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508673832", "createdAt": "2020-10-20T16:31:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentracing/api-0.31/src/test/groovy/OpenTracing31Test.groovy", "diffHunk": "@@ -131,6 +131,7 @@ class OpenTracing31Test extends AgentTestRunner {\n     setup:\n     def span = tracer.buildSpan(\"some name\").start()\n     def scope = tracer.scopeManager().activate(span, finishSpan)\n+    (scope as TraceScope).setAsyncPropagation(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzOTYyOA=="}, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1Njk4Mw==", "bodyText": "I'm picking up on why it's necessary to make this change at all - won't this break a lot of manually traced applications if it's strictly necessary to invert the flag?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r509156983", "createdAt": "2020-10-21T10:11:21Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentracing/api-0.31/src/test/groovy/OpenTracing31Test.groovy", "diffHunk": "@@ -131,6 +131,7 @@ class OpenTracing31Test extends AgentTestRunner {\n     setup:\n     def span = tracer.buildSpan(\"some name\").start()\n     def scope = tracer.scopeManager().activate(span, finishSpan)\n+    (scope as TraceScope).setAsyncPropagation(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzOTYyOA=="}, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI2ODk4OA==", "bodyText": "Previously we were relying on the implicit default state. In the expect block below, we are explicitly asserting:\n    !(scope as TraceScope).isAsyncPropagating()\n    (scope as TraceScope).capture() == null\n\nThis is not something a customer would likely be doing.\nChanging the default requires this test to change.  Would you prefer continuing to rely on the default and change the asserts or make the expected state implicit up front?", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r509268988", "createdAt": "2020-10-21T13:16:54Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentracing/api-0.31/src/test/groovy/OpenTracing31Test.groovy", "diffHunk": "@@ -131,6 +131,7 @@ class OpenTracing31Test extends AgentTestRunner {\n     setup:\n     def span = tracer.buildSpan(\"some name\").start()\n     def scope = tracer.scopeManager().activate(span, finishSpan)\n+    (scope as TraceScope).setAsyncPropagation(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzOTYyOA=="}, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTUxODk4OnYy", "diffSide": "LEFT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/AdviceUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowMDowM1rOHk-VEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDo0NTozOFrOHlQY3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzMTk4Nw==", "bodyText": "I wasn't expected the set to true blocks to be removed in this first step.\nI was assuming we just set async propagation will to true and that's it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508531987", "createdAt": "2020-10-20T14:00:03Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/AdviceUtils.java", "diffHunk": "@@ -22,9 +22,7 @@\n     if (state != null) {\n       final TraceScope.Continuation continuation = state.getAndResetContinuation();\n       if (continuation != null) {\n-        final TraceScope scope = continuation.activate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyNzg3MA==", "bodyText": "I've reverted those changes and added a flag we can flip to change the default again.", "url": "https://github.com/DataDog/dd-trace-java/pull/2008#discussion_r508827870", "createdAt": "2020-10-20T20:45:38Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/AdviceUtils.java", "diffHunk": "@@ -22,9 +22,7 @@\n     if (state != null) {\n       final TraceScope.Continuation continuation = state.getAndResetContinuation();\n       if (continuation != null) {\n-        final TraceScope scope = continuation.activate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzMTk4Nw=="}, "originalCommit": {"oid": "7e8807c870813e88b74c910550254a30f7897acf"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4732, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}