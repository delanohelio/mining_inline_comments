{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTM2MDk1", "number": 1240, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1Mjo1OFrODhvYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1Mjo1OFrODhvYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzA1OTU2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1Mjo1OVrOFspS-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo1NTowNVrOFspU3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODI2NQ==", "bodyText": "We might get a bit more from turning this into a string switch, but I suspect we've probably reached a point of diminishing returns.", "url": "https://github.com/DataDog/dd-trace-java/pull/1240#discussion_r382358265", "createdAt": "2020-02-21T01:52:59Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java", "diffHunk": "@@ -102,33 +102,34 @@ public AbstractExecutorInstrumentation(final String... additionalNames) {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    final ElementMatcher.Junction<TypeDescription> matcher =\n-        not(isInterface()).and(safeHasInterface(named(Executor.class.getName())));\n-    if (TRACE_ALL_EXECUTORS) {\n-      return matcher;\n+    ElementMatcher.Junction<TypeDescription> matcher = not(isInterface());\n+    if (!TRACE_ALL_EXECUTORS) {\n+      matcher =\n+          matcher.and(\n+              new ElementMatcher<TypeDescription>() {\n+                @Override\n+                public boolean matches(final TypeDescription target) {\n+                  boolean whitelisted = WHITELISTED_EXECUTORS.contains(target.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b80e9857d241bb25d3bf079517e1c5ede7ebd9db"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODc0OQ==", "bodyText": "Let's consider that in the future.", "url": "https://github.com/DataDog/dd-trace-java/pull/1240#discussion_r382358749", "createdAt": "2020-02-21T01:55:05Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/java-concurrent/src/main/java/datadog/trace/instrumentation/java/concurrent/AbstractExecutorInstrumentation.java", "diffHunk": "@@ -102,33 +102,34 @@ public AbstractExecutorInstrumentation(final String... additionalNames) {\n \n   @Override\n   public ElementMatcher<TypeDescription> typeMatcher() {\n-    final ElementMatcher.Junction<TypeDescription> matcher =\n-        not(isInterface()).and(safeHasInterface(named(Executor.class.getName())));\n-    if (TRACE_ALL_EXECUTORS) {\n-      return matcher;\n+    ElementMatcher.Junction<TypeDescription> matcher = not(isInterface());\n+    if (!TRACE_ALL_EXECUTORS) {\n+      matcher =\n+          matcher.and(\n+              new ElementMatcher<TypeDescription>() {\n+                @Override\n+                public boolean matches(final TypeDescription target) {\n+                  boolean whitelisted = WHITELISTED_EXECUTORS.contains(target.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1ODI2NQ=="}, "originalCommit": {"oid": "b80e9857d241bb25d3bf079517e1c5ede7ebd9db"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 530, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}