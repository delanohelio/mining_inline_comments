{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTc5Mzkx", "number": 1523, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNjo0NlrOEBv2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoxNTo1MlrOECDKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY3OTgyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/io/MLTReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNjo0NlrOGdx8HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo0ODowNFrOGd1Sqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDA5Mg==", "bodyText": "FAR: could be hoisted out of the loop and maybe into a constant", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r433880092", "createdAt": "2020-06-02T13:36:46Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/io/MLTReader.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.datadog.profiling.mlt.io;\n+\n+import static com.datadog.profiling.mlt.io.MLTConstants.MAGIC;\n+\n+import com.datadog.profiling.util.LEB128ByteArrayReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** The MLT binary format reader */\n+public final class MLTReader {\n+  /**\n+   * Read all subsequent MLT chunks from the given data\n+   *\n+   * @param data the MLT binary format data\n+   * @return the list of all chunks contained in the input data in order of appearance\n+   */\n+  public List<MLTChunk> readMLTChunks(byte[] data) {\n+    LEB128ByteArrayReader r = new LEB128ByteArrayReader(data);\n+    List<MLTChunk> chunks = new ArrayList<>();\n+    while (r.hasMore()) {\n+      chunks.add(readMLTChunk(r));\n+    }\n+    return chunks;\n+  }\n+\n+  private MLTChunk readMLTChunk(LEB128ByteArrayReader r) {\n+    int chunkBase = r.position();\n+    byte[] magic = r.readBytes(4);\n+    if (!Arrays.equals(MAGIC, magic)) {\n+      throw new IllegalStateException();\n+    }\n+\n+    byte version = r.readByte();\n+    int size = r.readIntRaw();\n+    int cpOffset = r.readIntRaw();\n+    long ts = r.readLong();\n+    long duration = r.readLong();\n+    long threadId = r.readLong();\n+\n+    int eventStart =\n+        r.getAndSetPos(cpOffset + chunkBase); // save the position and jump to constant pools\n+    ConstantPool<String> stringPool = readStringConstantPool(r);\n+    ConstantPool<FrameElement> framePool = readFrameConstantPool(r, stringPool);\n+    ConstantPool<FrameSequence> stackPool = readStackConstantPool(r, framePool);\n+\n+    // save the chunk end position and restore the event sequence position\n+    int endpos = r.getAndSetPos(eventStart);\n+    List<FrameSequence> stackElements = readStackEvents(r, stackPool);\n+\n+    MLTChunk chunk =\n+        new MLTChunk(\n+            version,\n+            size,\n+            ts,\n+            duration,\n+            threadId,\n+            stringPool.get(0),\n+            stringPool,\n+            framePool,\n+            stackPool,\n+            stackElements);\n+    r.getAndSetPos(endpos); // move to the end of chunk\n+    return chunk;\n+  }\n+\n+  private List<FrameSequence> readStackEvents(\n+      LEB128ByteArrayReader r, ConstantPool<FrameSequence> stackPool) {\n+    int eventCount = r.readInt();\n+    int ptr = 0;\n+    FrameSequence lastElement = null;\n+    List<FrameSequence> stackElements = new ArrayList<>(eventCount);\n+    for (int i = 0; i < eventCount; i++) {\n+      int cnt = 1;\n+      ptr = r.readInt();\n+      if ((ptr & MLTConstants.EVENT_REPEAT_FLAG) == MLTConstants.EVENT_REPEAT_FLAG) {\n+        if (lastElement == null) {\n+          throw new IllegalStateException();\n+        }\n+        cnt = (ptr & MLTConstants.EVENT_REPEAT_MASK);\n+      } else {\n+        lastElement = stackPool.get(ptr);\n+      }\n+      for (int j = 0; j < cnt; j++) {\n+        stackElements.add(lastElement);\n+      }\n+    }\n+    return stackElements;\n+  }\n+\n+  private ConstantPool<FrameSequence> readStackConstantPool(\n+      LEB128ByteArrayReader r, ConstantPool<FrameElement> framePool) {\n+    int cpSize;\n+    ConstantPool<FrameSequence> stackPool = new ConstantPool<>();\n+    cpSize = r.readInt();\n+    for (int i = 0; i < cpSize; i++) {\n+      int ptr = r.readInt();\n+      byte type = r.readByte();\n+      int[] framePtrs = new int[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c41476a8137e667c41597bdee73ab1fec7c42aa"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzNTAxOQ==", "bodyText": "Nice catch! Done!", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r433935019", "createdAt": "2020-06-02T14:48:04Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/io/MLTReader.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.datadog.profiling.mlt.io;\n+\n+import static com.datadog.profiling.mlt.io.MLTConstants.MAGIC;\n+\n+import com.datadog.profiling.util.LEB128ByteArrayReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** The MLT binary format reader */\n+public final class MLTReader {\n+  /**\n+   * Read all subsequent MLT chunks from the given data\n+   *\n+   * @param data the MLT binary format data\n+   * @return the list of all chunks contained in the input data in order of appearance\n+   */\n+  public List<MLTChunk> readMLTChunks(byte[] data) {\n+    LEB128ByteArrayReader r = new LEB128ByteArrayReader(data);\n+    List<MLTChunk> chunks = new ArrayList<>();\n+    while (r.hasMore()) {\n+      chunks.add(readMLTChunk(r));\n+    }\n+    return chunks;\n+  }\n+\n+  private MLTChunk readMLTChunk(LEB128ByteArrayReader r) {\n+    int chunkBase = r.position();\n+    byte[] magic = r.readBytes(4);\n+    if (!Arrays.equals(MAGIC, magic)) {\n+      throw new IllegalStateException();\n+    }\n+\n+    byte version = r.readByte();\n+    int size = r.readIntRaw();\n+    int cpOffset = r.readIntRaw();\n+    long ts = r.readLong();\n+    long duration = r.readLong();\n+    long threadId = r.readLong();\n+\n+    int eventStart =\n+        r.getAndSetPos(cpOffset + chunkBase); // save the position and jump to constant pools\n+    ConstantPool<String> stringPool = readStringConstantPool(r);\n+    ConstantPool<FrameElement> framePool = readFrameConstantPool(r, stringPool);\n+    ConstantPool<FrameSequence> stackPool = readStackConstantPool(r, framePool);\n+\n+    // save the chunk end position and restore the event sequence position\n+    int endpos = r.getAndSetPos(eventStart);\n+    List<FrameSequence> stackElements = readStackEvents(r, stackPool);\n+\n+    MLTChunk chunk =\n+        new MLTChunk(\n+            version,\n+            size,\n+            ts,\n+            duration,\n+            threadId,\n+            stringPool.get(0),\n+            stringPool,\n+            framePool,\n+            stackPool,\n+            stackElements);\n+    r.getAndSetPos(endpos); // move to the end of chunk\n+    return chunk;\n+  }\n+\n+  private List<FrameSequence> readStackEvents(\n+      LEB128ByteArrayReader r, ConstantPool<FrameSequence> stackPool) {\n+    int eventCount = r.readInt();\n+    int ptr = 0;\n+    FrameSequence lastElement = null;\n+    List<FrameSequence> stackElements = new ArrayList<>(eventCount);\n+    for (int i = 0; i < eventCount; i++) {\n+      int cnt = 1;\n+      ptr = r.readInt();\n+      if ((ptr & MLTConstants.EVENT_REPEAT_FLAG) == MLTConstants.EVENT_REPEAT_FLAG) {\n+        if (lastElement == null) {\n+          throw new IllegalStateException();\n+        }\n+        cnt = (ptr & MLTConstants.EVENT_REPEAT_MASK);\n+      } else {\n+        lastElement = stackPool.get(ptr);\n+      }\n+      for (int j = 0; j < cnt; j++) {\n+        stackElements.add(lastElement);\n+      }\n+    }\n+    return stackElements;\n+  }\n+\n+  private ConstantPool<FrameSequence> readStackConstantPool(\n+      LEB128ByteArrayReader r, ConstantPool<FrameElement> framePool) {\n+    int cpSize;\n+    ConstantPool<FrameSequence> stackPool = new ConstantPool<>();\n+    cpSize = r.readInt();\n+    for (int i = 0; i < cpSize; i++) {\n+      int ptr = r.readInt();\n+      byte type = r.readByte();\n+      int[] framePtrs = new int[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDA5Mg=="}, "originalCommit": {"oid": "8c41476a8137e667c41597bdee73ab1fec7c42aa"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTg0MzU3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/util/LEB128ByteArrayReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoxNTo1MlrOGeRBTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDoyMTo1MlrOGeVlyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4OTMyNA==", "bodyText": "Why do these methods read more data than they produce? Are the values 8 byte aligned? If so, it possible to read the 2 bytes you need and then skip the 6 you don't? Or the other way around depending on endianness.", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r434389324", "createdAt": "2020-06-03T08:15:52Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/util/LEB128ByteArrayReader.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.datadog.profiling.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+/** Byte-array writer with default support for LEB128 encoded integer types */\n+public final class LEB128ByteArrayReader {\n+  private static final int EXT_BIT = 0x80;\n+  private static final long COMPRESSED_INT_MASK = 0x7f;\n+  private final byte[] array;\n+  private int pointer = 0;\n+\n+  public LEB128ByteArrayReader(byte[] data) {\n+    array = Arrays.copyOf(data, data.length);\n+  }\n+\n+  /** Reset the reader - set the reading position back to 0 */\n+  public void reset() {\n+    pointer = 0;\n+  }\n+\n+  /**\n+   * Check whether there is more data to read\n+   *\n+   * @return {@literal true} if there is more data to read\n+   */\n+  public boolean hasMore() {\n+    return pointer < array.length;\n+  }\n+\n+  /**\n+   * Get the current position and set the new one\n+   *\n+   * @param pos the new position\n+   * @return the previous position\n+   */\n+  public int getAndSetPos(int pos) {\n+    if (pos > array.length) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+    int current = pointer;\n+    pointer = pos;\n+    return current;\n+  }\n+\n+  public char readChar() {\n+    return (char) (readLong() & 0xffff);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQwMTQ2Mw==", "bodyText": "Well... readLong() reads LEB128 packed integer number (perhaps the name is slightly misleading but I shamelessly copied it from the JFR code) which will have the necessary number of bytes required to hold that particular value. So, for char it will be 1-2 bytes, assuming that the reader is actually reading something that was written as a packed char.\nI admit, the parser is not totally robust and can read in junk if the read order does not correspond to the writer order. Should improve that once we know we are going to use this parser in production - for now it is used only in controlled test env so I didn't want to spend more time on hardening it.\nAs for reading char as 'long' - we are using unsigned LEB128 packing but in java all integer types are signed. So the type must be widened first and then masked :/", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r434401463", "createdAt": "2020-06-03T08:36:06Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/util/LEB128ByteArrayReader.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.datadog.profiling.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+/** Byte-array writer with default support for LEB128 encoded integer types */\n+public final class LEB128ByteArrayReader {\n+  private static final int EXT_BIT = 0x80;\n+  private static final long COMPRESSED_INT_MASK = 0x7f;\n+  private final byte[] array;\n+  private int pointer = 0;\n+\n+  public LEB128ByteArrayReader(byte[] data) {\n+    array = Arrays.copyOf(data, data.length);\n+  }\n+\n+  /** Reset the reader - set the reading position back to 0 */\n+  public void reset() {\n+    pointer = 0;\n+  }\n+\n+  /**\n+   * Check whether there is more data to read\n+   *\n+   * @return {@literal true} if there is more data to read\n+   */\n+  public boolean hasMore() {\n+    return pointer < array.length;\n+  }\n+\n+  /**\n+   * Get the current position and set the new one\n+   *\n+   * @param pos the new position\n+   * @return the previous position\n+   */\n+  public int getAndSetPos(int pos) {\n+    if (pos > array.length) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+    int current = pointer;\n+    pointer = pos;\n+    return current;\n+  }\n+\n+  public char readChar() {\n+    return (char) (readLong() & 0xffff);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4OTMyNA=="}, "originalCommit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MTI1Mw==", "bodyText": "OK I see, I didn't read the readLong() method carefully, I see it terminates when it finds the MSB is unset, so it's a form or varint coding.\nNote that char is unsigned, but I see your point for short and int.", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r434441253", "createdAt": "2020-06-03T09:41:20Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/util/LEB128ByteArrayReader.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.datadog.profiling.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+/** Byte-array writer with default support for LEB128 encoded integer types */\n+public final class LEB128ByteArrayReader {\n+  private static final int EXT_BIT = 0x80;\n+  private static final long COMPRESSED_INT_MASK = 0x7f;\n+  private final byte[] array;\n+  private int pointer = 0;\n+\n+  public LEB128ByteArrayReader(byte[] data) {\n+    array = Arrays.copyOf(data, data.length);\n+  }\n+\n+  /** Reset the reader - set the reading position back to 0 */\n+  public void reset() {\n+    pointer = 0;\n+  }\n+\n+  /**\n+   * Check whether there is more data to read\n+   *\n+   * @return {@literal true} if there is more data to read\n+   */\n+  public boolean hasMore() {\n+    return pointer < array.length;\n+  }\n+\n+  /**\n+   * Get the current position and set the new one\n+   *\n+   * @param pos the new position\n+   * @return the previous position\n+   */\n+  public int getAndSetPos(int pos) {\n+    if (pos > array.length) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+    int current = pointer;\n+    pointer = pos;\n+    return current;\n+  }\n+\n+  public char readChar() {\n+    return (char) (readLong() & 0xffff);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4OTMyNA=="}, "originalCommit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ2NDIwMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r434464200", "createdAt": "2020-06-03T10:21:52Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/util/LEB128ByteArrayReader.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.datadog.profiling.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+/** Byte-array writer with default support for LEB128 encoded integer types */\n+public final class LEB128ByteArrayReader {\n+  private static final int EXT_BIT = 0x80;\n+  private static final long COMPRESSED_INT_MASK = 0x7f;\n+  private final byte[] array;\n+  private int pointer = 0;\n+\n+  public LEB128ByteArrayReader(byte[] data) {\n+    array = Arrays.copyOf(data, data.length);\n+  }\n+\n+  /** Reset the reader - set the reading position back to 0 */\n+  public void reset() {\n+    pointer = 0;\n+  }\n+\n+  /**\n+   * Check whether there is more data to read\n+   *\n+   * @return {@literal true} if there is more data to read\n+   */\n+  public boolean hasMore() {\n+    return pointer < array.length;\n+  }\n+\n+  /**\n+   * Get the current position and set the new one\n+   *\n+   * @param pos the new position\n+   * @return the previous position\n+   */\n+  public int getAndSetPos(int pos) {\n+    if (pos > array.length) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+    int current = pointer;\n+    pointer = pos;\n+    return current;\n+  }\n+\n+  public char readChar() {\n+    return (char) (readLong() & 0xffff);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4OTMyNA=="}, "originalCommit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 194, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}