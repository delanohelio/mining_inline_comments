{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NTA1OTA1", "number": 1812, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1Nzo1NlrOEeV-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1Nzo1NlrOEeV-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjUyNjg5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1Nzo1NlrOHJ8VNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMjoxMjo0M1rOHKK_5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw==", "bodyText": "I believe that WeakHashMap is still doing expungeStaleEntries() inline.  If that's the case, is it still better to use that instead of WeakConcurrentMap?", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480187703", "createdAt": "2020-08-31T14:57:56Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNTU3NQ==", "bodyText": "Yes, it does, whenever getTable() is called.\nHowever, this question suggests that you may not have understood what I'm trying to achieve here. We have hundreds of background tasks executed once per second, because we use a WeakMap implementation with a \"background\" cleanup policy. These background tasks continue until the application shuts down, but the injectedClassLoaders map may never actually be used, and even if it is, its usefulness is short-lived and concentrated at the start of the application's life. To reduce the total cost of these maps' existence, increasing the costs of access (if the map is ever used) would make sense, but there's no evidence a synchronized wrapper around a WeakHashMap incurs significant (any?) cost over WeakConcurrentMap.", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480305575", "createdAt": "2020-08-31T18:20:40Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw=="}, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2ODM5NQ==", "bodyText": "I understand what you're trying to achieve here.  I just didn't understand why you chose this option vs the inline WeakConcurrentMap.  That said, I don't disagree with your choice.\nAs for why the tests are failing, I'm not sure.  I can look into it.  Is it easy to reproduce if I run locally?", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480368395", "createdAt": "2020-08-31T20:03:23Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw=="}, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM3OTkyMQ==", "bodyText": "The motivation is for this to be completely independent of the (quite complex) provision mechanism. I don't expect there to be any contention on injectedClassLoaders and the wrapper is there as an insurance policy against multithreaded use, so I don't expect to get anything in return for using WeakConcurrentMap here. I found the changes necessary to support multiple WeakMap implementations broke the test suite mysteriously, in exactly the same way this commit does. (This is my second attempt at getting rid of these background tasks).\nTo reproduce, run\n./gradlew :dd-java-agent:test --stacktrace\n\nIt will time out after 120s and probably give you as much information about why as can be seen here: none whatsoever :(", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480379921", "createdAt": "2020-08-31T20:26:36Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw=="}, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5NTcyNw==", "bodyText": "I was reduced to putting System.err.printlns into CoreTracer's constructor - PendingTrace.initialize() hangs. It seems PendingTrace relies on HelperInjector to initialise the background clean up, I'd need to take a thread dump to check if it's deadlocked somehow, but that's a task for tomorrow.\nI wonder why the author of this comment in CoreTracer  just before initializing PendingTrace wrote this comment:\n    // Ensure that PendingTrace.SPAN_CLEANER is initialized in this thread:\n    // FIXME: add test to verify the span cleaner thread is started with this call.\n    PendingTrace.initialize();", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480395727", "createdAt": "2020-08-31T20:59:10Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw=="}, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwNjcxNg==", "bodyText": "Check out my latest commit", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480406716", "createdAt": "2020-08-31T21:23:10Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw=="}, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQyODAwNA==", "bodyText": "Hmm, seems like we have a lot of brittleness in our initialization order.\nI'd expect the first job to always start-up the background thread regardless of which job it is & order.  From a maintenance perspective, it seems like a pretty serious design flaw to be relying on something else to start the pool.\nThis looks a nice improvement.  Although, I'm wondering if we don't need to just take a hard look at our initialization in general.", "url": "https://github.com/DataDog/dd-trace-java/pull/1812#discussion_r480428004", "createdAt": "2020-08-31T22:12:43Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/HelperInjector.java", "diffHunk": "@@ -44,7 +43,8 @@ public String toString() {\n   private final Set<String> helperClassNames;\n   private final Map<String, byte[]> dynamicTypeMap = new LinkedHashMap<>();\n \n-  private final WeakMap<ClassLoader, Boolean> injectedClassLoaders = newWeakMap();\n+  private final Map<ClassLoader, Boolean> injectedClassLoaders =\n+      Collections.synchronizedMap(new WeakHashMap<ClassLoader, Boolean>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzcwMw=="}, "originalCommit": {"oid": "ead09a55a1964520bafd96b1892ed49e31ea3ee0"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4911, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}