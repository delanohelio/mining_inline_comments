{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTc5Mzkx", "number": 1523, "title": "MLT binary format support", "bodyText": "This PR adds read/write support for MLT compact binary format.\nIt is the first iteration with some parts clearly being candidates for optimization but I would recommend doing that in later iterations when this approach is confirmed as something we want to spend more time on.\nThe constant pools implementation is using primitive eclipse collections FastUtils in order to avoid excessive allocation and boxing/unboxing. All unused parts of eclipse collections FastUtils library is excluded from the final jar using shadow plugin minimize() directive.", "createdAt": "2020-06-02T13:19:37Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1523", "merged": true, "mergeCommit": {"oid": "6637de94f2fe9f9ef665740244837a9b6487f833"}, "closed": true, "closedAt": "2020-06-03T10:28:28Z", "author": {"login": "jbachorik"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnRx6dAH2gAyNDI2NTc5MzkxOjUyNjcyOGViYzUxZDEzOGZiOTIxNGU4YmFlNjkzNzI0ZmM2NGVjMWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnm192AFqTQyMzQxODg3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "526728ebc51d138fb9214e8bae693724fc64ec1f", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/526728ebc51d138fb9214e8bae693724fc64ec1f", "committedDate": "2020-06-02T09:52:02Z", "message": "MLT specfic stacktrace collector prototype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a78f18f10a9757ba8d776142b06a1e382ad4c8f", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6a78f18f10a9757ba8d776142b06a1e382ad4c8f", "committedDate": "2020-06-02T09:52:02Z", "message": "Include duration info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392791ebd01441b5553410c49e03b81f5924842c", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/392791ebd01441b5553410c49e03b81f5924842c", "committedDate": "2020-06-02T09:52:02Z", "message": "Small adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fee54b1b6b4f08941ef5a4dd387143280344c9bb", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fee54b1b6b4f08941ef5a4dd387143280344c9bb", "committedDate": "2020-06-02T09:52:02Z", "message": "Fix hash code computation not to allocate byte array on hot path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "638dd0a860b15873c54df1004f256631b9e9fb29", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/638dd0a860b15873c54df1004f256631b9e9fb29", "committedDate": "2020-06-02T09:52:02Z", "message": "Global tracer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1247029d6f045851b0fbde874355bc568e9447", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8f1247029d6f045851b0fbde874355bc568e9447", "committedDate": "2020-06-02T09:52:02Z", "message": "Fix string constant pool handling for thread name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2b0996a41169a48746dc8bc789a9494467285d", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3d2b0996a41169a48746dc8bc789a9494467285d", "committedDate": "2020-06-02T09:52:02Z", "message": "Scope wiring\n\nrename\nwire to Sampler and session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b31c6d390ad1b88cbb49e76b9f7abf11b672d0", "author": {"user": {"login": "jpbempel", "name": "Jean-Philippe Bempel"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a1b31c6d390ad1b88cbb49e76b9f7abf11b672d0", "committedDate": "2020-06-02T09:52:02Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fba5d64e39848ddba892ee1d9fc136bd7e2b11f8", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fba5d64e39848ddba892ee1d9fc136bd7e2b11f8", "committedDate": "2020-06-02T09:52:02Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6df54611cca624d2ce5333287c79132f765030", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7f6df54611cca624d2ce5333287c79132f765030", "committedDate": "2020-06-02T09:52:28Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c41476a8137e667c41597bdee73ab1fec7c42aa", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8c41476a8137e667c41597bdee73ab1fec7c42aa", "committedDate": "2020-06-02T09:52:28Z", "message": "Add comments and final cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjgyNTc3", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#pullrequestreview-422682577", "createdAt": "2020-06-02T13:36:45Z", "commit": {"oid": "8c41476a8137e667c41597bdee73ab1fec7c42aa"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNjo0NlrOGdx8HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNjo0NlrOGdx8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MDA5Mg==", "bodyText": "FAR: could be hoisted out of the loop and maybe into a constant", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r433880092", "createdAt": "2020-06-02T13:36:46Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/io/MLTReader.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.datadog.profiling.mlt.io;\n+\n+import static com.datadog.profiling.mlt.io.MLTConstants.MAGIC;\n+\n+import com.datadog.profiling.util.LEB128ByteArrayReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/** The MLT binary format reader */\n+public final class MLTReader {\n+  /**\n+   * Read all subsequent MLT chunks from the given data\n+   *\n+   * @param data the MLT binary format data\n+   * @return the list of all chunks contained in the input data in order of appearance\n+   */\n+  public List<MLTChunk> readMLTChunks(byte[] data) {\n+    LEB128ByteArrayReader r = new LEB128ByteArrayReader(data);\n+    List<MLTChunk> chunks = new ArrayList<>();\n+    while (r.hasMore()) {\n+      chunks.add(readMLTChunk(r));\n+    }\n+    return chunks;\n+  }\n+\n+  private MLTChunk readMLTChunk(LEB128ByteArrayReader r) {\n+    int chunkBase = r.position();\n+    byte[] magic = r.readBytes(4);\n+    if (!Arrays.equals(MAGIC, magic)) {\n+      throw new IllegalStateException();\n+    }\n+\n+    byte version = r.readByte();\n+    int size = r.readIntRaw();\n+    int cpOffset = r.readIntRaw();\n+    long ts = r.readLong();\n+    long duration = r.readLong();\n+    long threadId = r.readLong();\n+\n+    int eventStart =\n+        r.getAndSetPos(cpOffset + chunkBase); // save the position and jump to constant pools\n+    ConstantPool<String> stringPool = readStringConstantPool(r);\n+    ConstantPool<FrameElement> framePool = readFrameConstantPool(r, stringPool);\n+    ConstantPool<FrameSequence> stackPool = readStackConstantPool(r, framePool);\n+\n+    // save the chunk end position and restore the event sequence position\n+    int endpos = r.getAndSetPos(eventStart);\n+    List<FrameSequence> stackElements = readStackEvents(r, stackPool);\n+\n+    MLTChunk chunk =\n+        new MLTChunk(\n+            version,\n+            size,\n+            ts,\n+            duration,\n+            threadId,\n+            stringPool.get(0),\n+            stringPool,\n+            framePool,\n+            stackPool,\n+            stackElements);\n+    r.getAndSetPos(endpos); // move to the end of chunk\n+    return chunk;\n+  }\n+\n+  private List<FrameSequence> readStackEvents(\n+      LEB128ByteArrayReader r, ConstantPool<FrameSequence> stackPool) {\n+    int eventCount = r.readInt();\n+    int ptr = 0;\n+    FrameSequence lastElement = null;\n+    List<FrameSequence> stackElements = new ArrayList<>(eventCount);\n+    for (int i = 0; i < eventCount; i++) {\n+      int cnt = 1;\n+      ptr = r.readInt();\n+      if ((ptr & MLTConstants.EVENT_REPEAT_FLAG) == MLTConstants.EVENT_REPEAT_FLAG) {\n+        if (lastElement == null) {\n+          throw new IllegalStateException();\n+        }\n+        cnt = (ptr & MLTConstants.EVENT_REPEAT_MASK);\n+      } else {\n+        lastElement = stackPool.get(ptr);\n+      }\n+      for (int j = 0; j < cnt; j++) {\n+        stackElements.add(lastElement);\n+      }\n+    }\n+    return stackElements;\n+  }\n+\n+  private ConstantPool<FrameSequence> readStackConstantPool(\n+      LEB128ByteArrayReader r, ConstantPool<FrameElement> framePool) {\n+    int cpSize;\n+    ConstantPool<FrameSequence> stackPool = new ConstantPool<>();\n+    cpSize = r.readInt();\n+    for (int i = 0; i < cpSize; i++) {\n+      int ptr = r.readInt();\n+      byte type = r.readByte();\n+      int[] framePtrs = new int[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c41476a8137e667c41597bdee73ab1fec7c42aa"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a77beac7de4b71925184e1bcab544753d93239e", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1a77beac7de4b71925184e1bcab544753d93239e", "committedDate": "2020-06-02T14:33:06Z", "message": "Switch primitive collection library.\nFastUtils have much smaller impact on the final agent size than eclipse-collections and offer pretty much the same performance."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "510678482109960e77bb6fe93415ef99875dca24", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/510678482109960e77bb6fe93415ef99875dca24", "committedDate": "2020-06-02T14:33:35Z", "message": "Minimize the agent shadow jar - no need to include full JMC client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79daa896fc97a4a46e31d31b2721cfeeca95cd83", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/79daa896fc97a4a46e31d31b2721cfeeca95cd83", "committedDate": "2020-06-02T14:44:08Z", "message": "Add a 'smokey' smoke test for MLT being enabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3978c9bf44e5eef87237d12791929763b198f2ab", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3978c9bf44e5eef87237d12791929763b198f2ab", "committedDate": "2020-06-02T14:47:48Z", "message": "Hoist the array allocation out of the main loop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNzU5NDI0", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#pullrequestreview-422759424", "createdAt": "2020-06-02T14:51:56Z", "commit": {"oid": "3978c9bf44e5eef87237d12791929763b198f2ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fdc9dcc0bb75a9db8e31ded84fd2defc08f01a3", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7fdc9dcc0bb75a9db8e31ded84fd2defc08f01a3", "committedDate": "2020-06-02T17:24:34Z", "message": "Make formatter happy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8", "author": {"user": {"login": "jbachorik", "name": "Jaroslav Bachorik"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/274eaea7c0988a11630ff07134d241d200840fc8", "committedDate": "2020-06-03T08:11:59Z", "message": "Unbreak the agent broken due to 'miminization'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzIwNTc5", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#pullrequestreview-423320579", "createdAt": "2020-06-03T08:15:52Z", "commit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoxNTo1MlrOGeRBTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODoxNTo1MlrOGeRBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4OTMyNA==", "bodyText": "Why do these methods read more data than they produce? Are the values 8 byte aligned? If so, it possible to read the 2 bytes you need and then skip the 6 you don't? Or the other way around depending on endianness.", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#discussion_r434389324", "createdAt": "2020-06-03T08:15:52Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/util/LEB128ByteArrayReader.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.datadog.profiling.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+\n+/** Byte-array writer with default support for LEB128 encoded integer types */\n+public final class LEB128ByteArrayReader {\n+  private static final int EXT_BIT = 0x80;\n+  private static final long COMPRESSED_INT_MASK = 0x7f;\n+  private final byte[] array;\n+  private int pointer = 0;\n+\n+  public LEB128ByteArrayReader(byte[] data) {\n+    array = Arrays.copyOf(data, data.length);\n+  }\n+\n+  /** Reset the reader - set the reading position back to 0 */\n+  public void reset() {\n+    pointer = 0;\n+  }\n+\n+  /**\n+   * Check whether there is more data to read\n+   *\n+   * @return {@literal true} if there is more data to read\n+   */\n+  public boolean hasMore() {\n+    return pointer < array.length;\n+  }\n+\n+  /**\n+   * Get the current position and set the new one\n+   *\n+   * @param pos the new position\n+   * @return the previous position\n+   */\n+  public int getAndSetPos(int pos) {\n+    if (pos > array.length) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+    int current = pointer;\n+    pointer = pos;\n+    return current;\n+  }\n+\n+  public char readChar() {\n+    return (char) (readLong() & 0xffff);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDE4ODcx", "url": "https://github.com/DataDog/dd-trace-java/pull/1523#pullrequestreview-423418871", "createdAt": "2020-06-03T10:24:28Z", "commit": {"oid": "274eaea7c0988a11630ff07134d241d200840fc8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2338, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}