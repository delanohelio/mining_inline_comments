{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTE1OTcx", "number": 1221, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxOTo0NlrODft9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0Mzo0N1rODvwMMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg1NDM3OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxOTo0NlrOFpllLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxOTo0NlrOFpllLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MTY2Mw==", "bodyText": "Note, minor risk of a breaking change here in exchange for better consistency.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r379151663", "createdAt": "2020-02-13T22:19:46Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -86,11 +87,11 @@ private String normalizePath(final String path) {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final DDSpanContext context, String path) {\n+  private String addMethodIfAvailable(final Map<String, String> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = (String) context.getTags().get(Tags.HTTP_METHOD.getKey());\n+    final String verb = meta.get(Tags.HTTP_METHOD.getKey());\n     if (verb != null && !verb.isEmpty()) {\n-      path = verb + \" \" + path;\n+      path = verb.toUpperCase() + \" \" + path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db8be071033d29562ba02b8b6efd041f0478a643"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM0NzIxOnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxNDowM1rOF5edCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxNjo1M1rOF_80ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjEwNg==", "bodyText": "This change seems unrelated; why are we making it?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395812106", "createdAt": "2020-03-20T18:14:03Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java", "diffHunk": "@@ -29,7 +29,7 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    final AgentSpan span = startSpan(\"aws.command\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMTA4Mw==", "bodyText": "This is related to the removal of OperationDecorator.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402601083", "createdAt": "2020-04-02T21:16:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/aws-java-sdk-1.11.0/src/main/java/datadog/trace/instrumentation/aws/v0/TracingRequestHandler.java", "diffHunk": "@@ -29,7 +29,7 @@ public AmazonWebServiceRequest beforeMarshalling(final AmazonWebServiceRequest r\n \n   @Override\n   public void beforeRequest(final Request<?> request) {\n-    final AgentSpan span = startSpan(\"aws.command\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMjEwNg=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM2MTIyOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxODoxN1rOF5eluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyMDo1NFrOF_88WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDMyOQ==", "bodyText": "I'm debating whether placing the list of Rules in the TraceProcessor is the right choice.\nAn alternative would be to associate a set of rules with a span as construction, but to defer execution until the end.\nI'm not sure if that's better or not in this case -- just suggesting an alternative.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395814329", "createdAt": "2020-03-20T18:18:17Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMzA5Ng==", "bodyText": "I see how that could work, but not sure if it would offer significant benefit.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402603096", "createdAt": "2020-04-02T21:20:54Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDMyOQ=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM2NDgyOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxOTozM1rOF5eoHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoxOTozM1rOF5eoHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNDk0Mw==", "bodyText": "The List + the loop in onTraceComplete effectively comprise a CompositeRule.\nI think it might be better to explicit introduce a CompositeRule class.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395814943", "createdAt": "2020-03-20T18:19:33Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =\n+      new Rule[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM4MDg5OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNDozMlrOF5eyTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxNToyNlrOGCWauQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA==", "bodyText": "Mongo special case here for Mongo strikes me as problematic from both an encapsulation & maintenance standpoint.  This really makes me think that we might be better off attaching rules as each span construction -- or at least having an obvious way to override with a integration specific substitute rule.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395817548", "createdAt": "2020-03-20T18:24:32Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNTM5MQ==", "bodyText": "This was a carry over from DBStatementAsResourceName that I didn't want to unwind.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402605391", "createdAt": "2020-04-02T21:25:43Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNzYyNQ==", "bodyText": "Understandable, but if we're going to undertake a new design, I'd like the new design to have the ability to unwind that mess.  Right now, it isn't clear to me that there's a way to do so.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405117625", "createdAt": "2020-04-07T21:15:26Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxNzU0OA=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM4NzMyOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNjo0MVrOF5e2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyMDoxN1rOGCWkDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw==", "bodyText": "The instanceof checks here strike me as a bit messy as well.\nI've wondered for awhile whether we should have a Tags class rather than using Map<String, Object>.\nThe error prone checks here -- lead to think the answer is yes.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395818653", "createdAt": "2020-03-20T18:26:41Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNjY0NQ==", "bodyText": "I'm not opposed to this, but prob not in this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402606645", "createdAt": "2020-04-02T21:28:22Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMDAxNA==", "bodyText": "Okay", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405120014", "createdAt": "2020-04-07T21:20:17Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxODY1Mw=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM5MTE0OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNzo1OFrOF5e5Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyNzo1OFrOF5e5Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTI3OA==", "bodyText": "containsKey followed by get is redundant -- unless we're expecting maps with null values.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395819278", "createdAt": "2020-03-20T18:27:58Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts span type tag to field */\n+public class SpanTypeRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"SpanTypeDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(DDTags.SPAN_TYPE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzM5MjM2OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyODoyMlrOF5e52A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODoyODoyMlrOF5e52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxOTQ4MA==", "bodyText": "I think I understand what is happening here, but this looks odd and error prone.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395819480", "createdAt": "2020-03-20T18:28:22Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/SpanTypeRule.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts span type tag to field */\n+public class SpanTypeRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"SpanTypeDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(DDTags.SPAN_TYPE)) {\n+      span.setSpanType(tags.get(DDTags.SPAN_TYPE).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQwMTg3OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMTozOVrOF5fAEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMTozOVrOF5fAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTA3NQ==", "bodyText": "Not handling a NumberFormatException from parseInt.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395821075", "createdAt": "2020-03-20T18:31:39Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      final int responseCode =\n+          value instanceof Integer ? (int) value : Integer.parseInt(value.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQwMzcyOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMjoxOFrOF5fBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyNjo1N1rOGCWxkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ==", "bodyText": "This logic was repeated elsewhere.  I think we should find a better to encapsulate it.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395821401", "createdAt": "2020-03-20T18:32:18Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -1,38 +1,40 @@\n-package datadog.opentracing.decorators;\n+package datadog.trace.common.processor.rule;\n \n+import datadog.opentracing.DDSpan;\n import datadog.opentracing.DDSpanContext;\n-import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.regex.Pattern;\n \n-public class URLAsResourceName extends AbstractDecorator {\n+public class URLAsResourceNameRule implements TraceProcessor.Rule {\n \n   // Matches any path segments with numbers in them. (exception for versioning: \"/v1/\")\n   public static final Pattern PATH_MIXED_ALPHANUMERICS =\n       Pattern.compile(\"(?<=/)(?![vV]\\\\d{1,2}/)(?:[^\\\\/\\\\d\\\\?]*[\\\\d]+[^\\\\/\\\\?]*)\");\n \n-  public URLAsResourceName() {\n-    super();\n-    setMatchingTag(Tags.HTTP_URL.getKey());\n-    setReplacementTag(DDTags.RESOURCE_NAME);\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"URLAsResourceName\"};\n   }\n \n   @Override\n-  public boolean shouldSetTag(final DDSpanContext context, final String tag, final Object value) {\n-    final String statusCode = String.valueOf(context.getTags().get(Tags.HTTP_STATUS.getKey()));\n-    // do nothing if the status code is already set and equals to 404.\n-    // TODO: it assumes that Status404Decorator is active. If it's not, it will lead to unexpected\n-    // behaviors\n-    if (value == null || statusCode != null && statusCode.equals(\"404\")) {\n-      return true;\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    final DDSpanContext context = span.context();\n+    final Object httpStatus = tags.get(Tags.HTTP_STATUS.getKey());\n+    if (context.isResourceNameSet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNDcwMw==", "bodyText": "This logic is similar, but not the same as Status404Rule", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402614703", "createdAt": "2020-04-02T21:46:26Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -1,38 +1,40 @@\n-package datadog.opentracing.decorators;\n+package datadog.trace.common.processor.rule;\n \n+import datadog.opentracing.DDSpan;\n import datadog.opentracing.DDSpanContext;\n-import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.regex.Pattern;\n \n-public class URLAsResourceName extends AbstractDecorator {\n+public class URLAsResourceNameRule implements TraceProcessor.Rule {\n \n   // Matches any path segments with numbers in them. (exception for versioning: \"/v1/\")\n   public static final Pattern PATH_MIXED_ALPHANUMERICS =\n       Pattern.compile(\"(?<=/)(?![vV]\\\\d{1,2}/)(?:[^\\\\/\\\\d\\\\?]*[\\\\d]+[^\\\\/\\\\?]*)\");\n \n-  public URLAsResourceName() {\n-    super();\n-    setMatchingTag(Tags.HTTP_URL.getKey());\n-    setReplacementTag(DDTags.RESOURCE_NAME);\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"URLAsResourceName\"};\n   }\n \n   @Override\n-  public boolean shouldSetTag(final DDSpanContext context, final String tag, final Object value) {\n-    final String statusCode = String.valueOf(context.getTags().get(Tags.HTTP_STATUS.getKey()));\n-    // do nothing if the status code is already set and equals to 404.\n-    // TODO: it assumes that Status404Decorator is active. If it's not, it will lead to unexpected\n-    // behaviors\n-    if (value == null || statusCode != null && statusCode.equals(\"404\")) {\n-      return true;\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    final DDSpanContext context = span.context();\n+    final Object httpStatus = tags.get(Tags.HTTP_STATUS.getKey());\n+    if (context.isResourceNameSet()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMzQ3Mg==", "bodyText": "Yes, there are slight differences, but I think some sharing is possible.\nisResourceNameSet() and statusCode checks are the same.\nHowever if there was a helper class to handle the int conversion and comparisons, I think the repetition would be smaller and less problematic.\nI'm okay with not fixing this now, but I think there is a problem here.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405123472", "createdAt": "2020-04-07T21:26:57Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -1,38 +1,40 @@\n-package datadog.opentracing.decorators;\n+package datadog.trace.common.processor.rule;\n \n+import datadog.opentracing.DDSpan;\n import datadog.opentracing.DDSpanContext;\n-import datadog.trace.api.DDTags;\n+import datadog.trace.common.processor.TraceProcessor;\n import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n import java.util.regex.Pattern;\n \n-public class URLAsResourceName extends AbstractDecorator {\n+public class URLAsResourceNameRule implements TraceProcessor.Rule {\n \n   // Matches any path segments with numbers in them. (exception for versioning: \"/v1/\")\n   public static final Pattern PATH_MIXED_ALPHANUMERICS =\n       Pattern.compile(\"(?<=/)(?![vV]\\\\d{1,2}/)(?:[^\\\\/\\\\d\\\\?]*[\\\\d]+[^\\\\/\\\\?]*)\");\n \n-  public URLAsResourceName() {\n-    super();\n-    setMatchingTag(Tags.HTTP_URL.getKey());\n-    setReplacementTag(DDTags.RESOURCE_NAME);\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"URLAsResourceName\"};\n   }\n \n   @Override\n-  public boolean shouldSetTag(final DDSpanContext context, final String tag, final Object value) {\n-    final String statusCode = String.valueOf(context.getTags().get(Tags.HTTP_STATUS.getKey()));\n-    // do nothing if the status code is already set and equals to 404.\n-    // TODO: it assumes that Status404Decorator is active. If it's not, it will lead to unexpected\n-    // behaviors\n-    if (value == null || statusCode != null && statusCode.equals(\"404\")) {\n-      return true;\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    final DDSpanContext context = span.context();\n+    final Object httpStatus = tags.get(Tags.HTTP_STATUS.getKey());\n+    if (context.isResourceNameSet()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTQwMQ=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQwODY3OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozNDowM1rOF5fEjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyMzozMlrOGEAnjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw==", "bodyText": "I don't think this needs to be under the lock.  Any synchronization for each span should be handled elsewhere.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r395822223", "createdAt": "2020-03-20T18:34:03Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYxNTU0Ng==", "bodyText": "Are you suggesting moving it outside the lock? Does it make much difference either way?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r402615546", "createdAt": "2020-04-02T21:48:16Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNzYzNA==", "bodyText": "Right, this shouldn't be under the lock.\nThe extra work will increase the lock hold time -- and that can actually have quite the impact.\nFor instance, adaptive spinning could cause the lock to be promoted from a spin lock to full lock.\nBut more importantly, the synchronization here needs to come from the spans not this lock.\nAny additional synchronization isn't helping and just increases the likelihood of a deadlock.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405127634", "createdAt": "2020-04-07T21:35:43Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyNzIzMA==", "bodyText": "ListWriter is primarily used for unit tests.  I'm not so sure it will make a big difference either way.  I can move it outside though if you really want me to.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r406427230", "createdAt": "2020-04-09T19:27:21Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzYxNA==", "bodyText": "Fair enough.\nWe've got a bit of problem using very coarse grained locking -- even around concurrent collections, so this jumped out at me, but I suppose in this instance, it is okay.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r406857614", "createdAt": "2020-04-10T17:23:32Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/writer/ListWriter.java", "diffHunk": "@@ -10,15 +11,17 @@\n \n /** List writer used by tests mostly */\n public class ListWriter extends CopyOnWriteArrayList<List<DDSpan>> implements Writer {\n+  private final TraceProcessor processor = new TraceProcessor();\n   private final List<CountDownLatch> latches = new ArrayList<>();\n \n   public List<DDSpan> firstTrace() {\n     return get(0);\n   }\n \n   @Override\n-  public void write(final List<DDSpan> trace) {\n+  public void write(List<DDSpan> trace) {\n     synchronized (latches) {\n+      trace = processor.onTraceComplete(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMjIyMw=="}, "originalCommit": {"oid": "86e0fc1135a9a58eeac5bc2a1a73bc79b13ca07c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODc3Mjg1OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/decorators/SpanDecoratorTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozNTowNlrOGBkzaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODozNTowNlrOGBkzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMwNDc0NQ==", "bodyText": "Looks like you can remove these two lines now that you aren't doing a equals against the whole object", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404304745", "createdAt": "2020-04-06T18:35:06Z", "author": {"login": "devinsba"}, "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/decorators/SpanDecoratorTest.groovy", "diffHunk": "@@ -286,28 +276,29 @@ class SpanDecoratorTest extends DDSpecification {\n     // these 2 lines to avoid checking for {@code DDSpanContext.DD_MEASURED} for every metric:\n     span.context().setMetric(DDSpanContext.DD_MEASURED, 42)\n     span.metrics.remove(DDSpanContext.DD_MEASURED, 42)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTE4MzEyOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMjo1N1rOGBoy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTozNToyOFrOGBqzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDE2MA==", "bodyText": "I know this is just a copy of Status5XXDecorator but how does this not break overriding the error range with dd.http.server.error.statuses?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404370160", "createdAt": "2020-04-06T20:32:57Z", "author": {"login": "randomanderson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      try {\n+        final int responseCode =\n+            value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n+        span.setError(500 <= responseCode && responseCode < 600);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMzA3MQ==", "bodyText": "Good question... I'll have to investigate that further.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r404403071", "createdAt": "2020-04-06T21:35:28Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/Status5XXRule.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Mark all 5xx status codes as an error */\n+public class Status5XXRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"Status5XXDecorator\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (!span.context().getErrorFlag() && tags.containsKey(Tags.HTTP_STATUS.getKey())) {\n+      final Object value = tags.get(Tags.HTTP_STATUS.getKey());\n+      try {\n+        final int responseCode =\n+            value instanceof Integer ? (int) value : Integer.parseInt(value.toString());\n+        span.setError(500 <= responseCode && responseCode < 600);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM3MDE2MA=="}, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzkxMTI0OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxODowNVrOGCWftw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxODowNVrOGCWftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExODkwMw==", "bodyText": "Doesn't this have the potential to raise an NPE?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405118903", "createdAt": "2020-04-07T21:18:05Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/DBStatementRule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/**\n+ * Converts db.statement tag to resource name. This is later set to sql.query by the datadog agent\n+ * after obfuscation.\n+ */\n+public class DBStatementRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"DBStatementAsResourceName\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.DB_STATEMENT.getKey())) {\n+      // Special case: Mongo\n+      // Skip the decorators\n+      if (tags.containsKey(Tags.COMPONENT.getKey())\n+          && \"java-mongo\".equals(tags.get(Tags.COMPONENT.getKey()))) {\n+        return;\n+      }\n+\n+      final String statement = tags.get(Tags.DB_STATEMENT.getKey()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk0NTg3OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyODozM1rOGCW0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyODozM1rOGCW0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDI2OA==", "bodyText": "This looks better than the prior version, but it would be nice to eliminate the second call to verb.toString()", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405124268", "createdAt": "2020-04-07T21:28:33Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/URLAsResourceNameRule.java", "diffHunk": "@@ -86,11 +88,11 @@ private String normalizePath(final String path) {\n     return PATH_MIXED_ALPHANUMERICS.matcher(path).replaceAll(\"?\");\n   }\n \n-  private String addMethodIfAvailable(final DDSpanContext context, String path) {\n+  private String addMethodIfAvailable(final Map<String, Object> meta, String path) {\n     // if the verb (GET, POST ...) is present, add it\n-    final String verb = (String) context.getTags().get(Tags.HTTP_METHOD.getKey());\n-    if (verb != null && !verb.isEmpty()) {\n-      path = verb + \" \" + path;\n+    final Object verb = meta.get(Tags.HTTP_METHOD.getKey());\n+    if (verb != null && !verb.toString().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk4NDc5OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0MToyOVrOGCXMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0MToyOVrOGCXMpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMDQwNQ==", "bodyText": "Are you still calling them decorators?\nI understanding supporting the old config, but maybe the method name should be changed.", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405130405", "createdAt": "2020-04-07T21:41:29Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/TraceProcessor.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package datadog.trace.common.processor;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.api.Config;\n+import datadog.trace.common.processor.rule.AnalyticsSampleRateRule;\n+import datadog.trace.common.processor.rule.DBStatementRule;\n+import datadog.trace.common.processor.rule.ErrorRule;\n+import datadog.trace.common.processor.rule.ResourceNameRule;\n+import datadog.trace.common.processor.rule.SpanTypeRule;\n+import datadog.trace.common.processor.rule.Status404Rule;\n+import datadog.trace.common.processor.rule.Status5XXRule;\n+import datadog.trace.common.processor.rule.URLAsResourceNameRule;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class TraceProcessor {\n+  final Rule[] DEFAULT_RULES =\n+      new Rule[] {\n+        // Rules are applied in order.\n+        new DBStatementRule(),\n+        new ResourceNameRule(),\n+        new SpanTypeRule(),\n+        new Status5XXRule(),\n+        new ErrorRule(),\n+        new URLAsResourceNameRule(),\n+        new Status404Rule(),\n+        new AnalyticsSampleRateRule(),\n+      };\n+\n+  private final List<Rule> rules;\n+\n+  public TraceProcessor() {\n+\n+    rules = new ArrayList<>(DEFAULT_RULES.length);\n+    for (final Rule rule : DEFAULT_RULES) {\n+      if (isEnabled(rule)) {\n+        rules.add(rule);\n+      }\n+    }\n+  }\n+\n+  private static boolean isEnabled(final Rule rule) {\n+    boolean enabled = Config.get().isDecoratorEnabled(rule.getClass().getSimpleName());\n+    for (final String alias : rule.aliases()) {\n+      enabled &= Config.get().isDecoratorEnabled(alias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk5MjE2OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0Mzo0N1rOGCXRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0Mzo0N1rOGCXRCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMTUyOA==", "bodyText": "containsKey / get again.\nThis does raises a question about the thread safety.  What is the hand-off policy for the span between the creating thread and the processing thread?", "url": "https://github.com/DataDog/dd-trace-java/pull/1221#discussion_r405131528", "createdAt": "2020-04-07T21:43:47Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/trace/common/processor/rule/ErrorRule.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.common.processor.rule;\n+\n+import datadog.opentracing.DDSpan;\n+import datadog.trace.common.processor.TraceProcessor;\n+import io.opentracing.tag.Tags;\n+import java.util.Collection;\n+import java.util.Map;\n+\n+/** Converts error tag to field */\n+public class ErrorRule implements TraceProcessor.Rule {\n+  @Override\n+  public String[] aliases() {\n+    return new String[] {\"ErrorFlag\"};\n+  }\n+\n+  @Override\n+  public void processSpan(\n+      final DDSpan span, final Map<String, Object> tags, final Collection<DDSpan> trace) {\n+    if (tags.containsKey(Tags.ERROR.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7a77add08f42637e62b744b6fb8694592c4234"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 512, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}