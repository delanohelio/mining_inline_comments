{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjM0OTg4", "number": 1703, "title": "Check for error condition before setting ERROR_MSG", "bodyText": "Fixes #1696", "createdAt": "2020-07-22T16:46:16Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1703", "merged": true, "mergeCommit": {"oid": "7e7d71ebca569cf358b23cfaefe779d4028d8038"}, "closed": true, "closedAt": "2020-07-30T07:52:39Z", "author": {"login": "jfklingler"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3dmNfAH2gAyNDU1MjM0OTg4OmNmNTQyYTc3M2E3MmRiNzcyNTQ1ODFmMjYyNzJiYWE0MDdkZTI3ZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5sIsWgFqTQ1NzU5NTg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cf542a773a72db77254581f26272baa407de27d7", "author": {"user": {"login": "jfklingler", "name": "John Klingler"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cf542a773a72db77254581f26272baa407de27d7", "committedDate": "2020-07-22T16:40:54Z", "message": "Check for error condition before setting ERROR_MSG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTA1OTM3", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#pullrequestreview-453505937", "createdAt": "2020-07-22T16:52:01Z", "commit": {"oid": "cf542a773a72db77254581f26272baa407de27d7"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTA2OTAz", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#pullrequestreview-453506903", "createdAt": "2020-07-22T16:53:15Z", "commit": {"oid": "cf542a773a72db77254581f26272baa407de27d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo1MzoxNVrOG1rfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjo1MzoxNVrOG1rfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk0MDM0NA==", "bodyText": "Can we assign map.get(EVENT) to a local and check span.isError() first please?", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r458940344", "createdAt": "2020-07-22T16:53:15Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/opentracing/src/main/java/datadog/trace/instrumentation/opentracing/DefaultLogHandler.java", "diffHunk": "@@ -34,11 +35,15 @@ public void log(final long timestampMicroseconds, final String event, final Agen\n     log.debug(\"`log` method is not implemented. Provided log: {}\", event);\n   }\n \n+  private boolean isErrorSpan(final Map<String, ?> map, final AgentSpan span) {\n+    return (map.get(EVENT) instanceof String && map.get(EVENT).equals(\"error\")) || span.isError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf542a773a72db77254581f26272baa407de27d7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da544690a46e75feb51727321d12253ad7aa50c7", "author": {"user": {"login": "jfklingler", "name": "John Klingler"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/da544690a46e75feb51727321d12253ad7aa50c7", "committedDate": "2020-07-22T20:00:28Z", "message": "Reverse order of short circuit logic\n\nAlso assign map value to a local variable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3775aa563b5eb3e58c5130398489717b0079ca85", "author": {"user": {"login": "jfklingler", "name": "John Klingler"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3775aa563b5eb3e58c5130398489717b0079ca85", "committedDate": "2020-07-28T19:57:31Z", "message": "Update the other DefaultLogHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36a15d75eeebb28cf6d614bc4c1e34ae6460703", "author": {"user": {"login": "jfklingler", "name": "John Klingler"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c36a15d75eeebb28cf6d614bc4c1e34ae6460703", "committedDate": "2020-07-28T19:57:58Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48eafc0a6548ff2250867621083a225755d8e237", "author": {"user": {"login": "jfklingler", "name": "John Klingler"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/48eafc0a6548ff2250867621083a225755d8e237", "committedDate": "2020-07-28T20:02:12Z", "message": "Make test names  more descriptive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTkzNDU5", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#pullrequestreview-457593459", "createdAt": "2020-07-29T14:42:41Z", "commit": {"oid": "48eafc0a6548ff2250867621083a225755d8e237"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTk1ODc2", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#pullrequestreview-457595876", "createdAt": "2020-07-29T14:45:05Z", "commit": {"oid": "48eafc0a6548ff2250867621083a225755d8e237"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NTowNVrOG47-ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NTowNVrOG47-ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjA3NA==", "bodyText": "pro tip:\nGroovy allows for inline declaration of maps: [(Fields.EVENT): \"error, (Fields.MESSAGE): errorMessage]\nConsider updating?", "url": "https://github.com/DataDog/dd-trace-java/pull/1703#discussion_r462356074", "createdAt": "2020-07-29T14:45:05Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/test/groovy/datadog/opentracing/DefaultLogHandlerTest.groovy", "diffHunk": "@@ -61,16 +61,80 @@ class DefaultLogHandlerTest extends DDSpecification {\n     when:\n     underTest.log(fields, span)\n \n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp but the span is not an error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) is null\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when called with timestamp when the span is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    span.setError(true)\n+    fields.put(Fields.MESSAGE, errorMessage)\n+\n+    when:\n+    underTest.log(System.currentTimeMillis(), fields, span)\n+\n+    then:\n+    span.getTags().get(DDTags.ERROR_MSG) == errorMessage\n+  }\n+\n+  def \"handles correctly the message passed in the fields when the event is error\"() {\n+    setup:\n+    final LogHandler underTest = new DefaultLogHandler()\n+    final DDSpan span = tracer.buildSpan(\"op name\").withServiceName(\"foo\").start()\n+    final String errorMessage = \"errorMessage\"\n+    final Map<String, ?> fields = new HashMap<>()\n+    fields.put(Fields.EVENT, \"error\")\n+    fields.put(Fields.MESSAGE, errorMessage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48eafc0a6548ff2250867621083a225755d8e237"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2025, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}