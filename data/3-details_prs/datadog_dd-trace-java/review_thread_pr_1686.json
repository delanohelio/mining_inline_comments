{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjI0ODA1", "number": 1686, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozODo0NVrOEQOJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNzo1OVrOEQR3Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ0NDg5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozODo0NVrOG0QZpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo0NDoyMFrOG0UFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0Nzg0NA==", "bodyText": "Indentation here is rather weird... made it rather confusing at first glance.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457447844", "createdAt": "2020-07-20T14:38:45Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "diffHunk": "@@ -305,7 +306,15 @@ class GrpcTest extends AgentTestRunner {\n     meta.put(Metadata.Key.<byte[]> of(\"test-bin\", Metadata.BINARY_BYTE_MARSHALLER), \"bin-val\".bytes)\n \n     when:\n-    def keys = GrpcExtractAdapter.GETTER.keys(meta)\n+    def keys = new ArrayList()\n+      GrpcExtractAdapter.GETTER.forEachKey(meta, new AgentPropagation.KeyClassifier() {\n+\n+        @Override\n+        boolean accept(String key, String value) {\n+          keys.add(key.toLowerCase())\n+          return true\n+        }\n+      })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwNTA2Mw==", "bodyText": "Are you being serious?", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457505063", "createdAt": "2020-07-20T15:40:13Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "diffHunk": "@@ -305,7 +306,15 @@ class GrpcTest extends AgentTestRunner {\n     meta.put(Metadata.Key.<byte[]> of(\"test-bin\", Metadata.BINARY_BYTE_MARSHALLER), \"bin-val\".bytes)\n \n     when:\n-    def keys = GrpcExtractAdapter.GETTER.keys(meta)\n+    def keys = new ArrayList()\n+      GrpcExtractAdapter.GETTER.forEachKey(meta, new AgentPropagation.KeyClassifier() {\n+\n+        @Override\n+        boolean accept(String key, String value) {\n+          keys.add(key.toLowerCase())\n+          return true\n+        }\n+      })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0Nzg0NA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwODI3OA==", "bodyText": "Yes... why is the rest of that indented differently from the first line?  Seems like they should all be the same indentation, right?  Was this the result of an auto formatter?", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457508278", "createdAt": "2020-07-20T15:44:20Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "diffHunk": "@@ -305,7 +306,15 @@ class GrpcTest extends AgentTestRunner {\n     meta.put(Metadata.Key.<byte[]> of(\"test-bin\", Metadata.BINARY_BYTE_MARSHALLER), \"bin-val\".bytes)\n \n     when:\n-    def keys = GrpcExtractAdapter.GETTER.keys(meta)\n+    def keys = new ArrayList()\n+      GrpcExtractAdapter.GETTER.forEachKey(meta, new AgentPropagation.KeyClassifier() {\n+\n+        @Override\n+        boolean accept(String key, String value) {\n+          keys.add(key.toLowerCase())\n+          return true\n+        }\n+      })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0Nzg0NA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ2NDQxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MTo0NFrOG0Qk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0MTo0NFrOG0Qk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDcxNw==", "bodyText": "We need to call this out in the release notes.  Please update the PR description with verbiage.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457450717", "createdAt": "2020-07-20T14:41:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQ4MTMwOnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NDo0NlrOG0QuwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NDo0NlrOG0QuwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MzI0OQ==", "bodyText": "Maybe this was intentional, but I think this is a useful comment.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457453249", "createdAt": "2020-07-20T14:44:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -97,15 +97,12 @@ private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n     }\n \n     @Override\n-    public Iterable<String> keys(final C carrier) {\n-      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.\n-      // https://github.com/open-telemetry/opentelemetry-specification/issues/433", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDUyNDYxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1MTozOVrOG0RIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1MTozOVrOG0RIQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1OTc3Ng==", "bodyText": "I assume the attributes below should replace/overwrite the values from the headers, but what happens if this is hit?  Perhaps this should be a break instead of return?  Either way, it could probably use a comment clarifying the intention. (Previous comment was removed.)", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457459776", "createdAt": "2020-07-20T14:51:39Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU1NzM1OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1Njo0MlrOG0RbDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoxMzo1OVrOG0Xozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA==", "bodyText": "Why is datadog.trace.bootstrap.instrumentation.api.FixedSizeCache duplicated here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457464588", "createdAt": "2020-07-20T14:56:42Z", "author": {"login": "randomanderson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NDMyNg==", "bodyText": "To not depend on the agent-bootstrap module.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457544326", "createdAt": "2020-07-20T16:36:05Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NTk0Mg==", "bodyText": "Consider commenting in each copy that the code is a duplicate elsewhere with a TODO to consolidate.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457545942", "createdAt": "2020-07-20T16:38:45Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MDc2MQ==", "bodyText": "I don't want to seem defensive but I feel the same way when I encounter duplicated code. In fact making these changes I encountered a lot of duplication, whether it's open tracing or servlet or play or the N implementations we had for getting values out of a Map by key. Perhaps we should track the causes of duplication, what is it about the structure of this project which seems to encourage it?", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457550761", "createdAt": "2020-07-20T16:46:42Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1ODQxMw==", "bodyText": "I'm fine with a comment.  I think we need to have a larger discussion about project structure before we proliferate more of container-utils, test-utils, thread-utils, and internal-api", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457558413", "createdAt": "2020-07-20T16:59:31Z", "author": {"login": "randomanderson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2NjQxNA==", "bodyText": "Done.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457566414", "createdAt": "2020-07-20T17:13:59Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDgyMDk1OnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozODoxMVrOG0Tyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozODoxMVrOG0Tyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzQxOQ==", "bodyText": "We should keep a comment to this effect, but it should be updated to reference ServletRequestSetter since that seems to be the new name.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457503419", "createdAt": "2020-07-20T15:38:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDk3MzMyOnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjowODoxMFrOG0VNgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjozNToyN1rOG0WQ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjY1OQ==", "bodyText": "This swaps the precedence.  In the previous version of the code, the attribute is considered before the header.  Also applies to servlet2/HttpServletRequestExtractAdapter", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457526659", "createdAt": "2020-07-20T16:08:10Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;\n+      }\n+    }\n+    // TODO collapse these into one method with a lambda when JDK7 is dropped\n+    Enumeration<String> attributeNames = carrier.getAttributeNames();\n+    while (attributeNames.hasMoreElements()) {\n+      String name = attributeNames.nextElement();\n+      Object attribute = carrier.getAttribute(name);\n+      if (attribute instanceof String && !classifier.accept(name, (String) attribute)) {\n+        return;\n+      }\n     }\n-    return carrier.getHeader(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MzkyNQ==", "bodyText": "No, the last one takes precedence here. So the attribute, as opposed to the header, if present, just as before.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457543925", "createdAt": "2020-07-20T16:35:27Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;\n+      }\n+    }\n+    // TODO collapse these into one method with a lambda when JDK7 is dropped\n+    Enumeration<String> attributeNames = carrier.getAttributeNames();\n+    while (attributeNames.hasMoreElements()) {\n+      String name = attributeNames.nextElement();\n+      Object attribute = carrier.getAttribute(name);\n+      if (attribute instanceof String && !classifier.accept(name, (String) attribute)) {\n+        return;\n+      }\n     }\n-    return carrier.getHeader(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjY1OQ=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTA1MzExOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNzo1OVrOG0V-wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo1MDo0NVrOG0W1qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng==", "bodyText": "This breaks JMS propagation to save ~70 bytes per message.  I'm not sure if its worth it.  There will be a flood of support requests as users upgrade producers before consumers.\nMy suggestion is to move this change into a separate pull request.  That way there can be proper discussion about how to go about this change: feature flags, supporting both versions, isolation of the performance difference, etc.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457539266", "createdAt": "2020-07-20T16:27:59Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NTI0NQ==", "bodyText": "I agree that this should be addressed another way, but it should be addressed. I will remove the change from this PR, but leave the check for '$' in, to make it more likely that a consumer has upgraded by the time the publisher change is made.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457545245", "createdAt": "2020-07-20T16:37:33Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MzMyMw==", "bodyText": "The change has been removed from the publisher in the last commit.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457553323", "createdAt": "2020-07-20T16:50:45Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng=="}, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}