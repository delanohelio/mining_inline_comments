{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDk5NjUw", "number": 1481, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTo0OTowNVrOD-ihAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyMTozOFrOD-nYmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTAzODExOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTo0OTowNVrOGYs4mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyMToxNlrOGY0sCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1NDM5Mw==", "bodyText": "Since both timestamps are wall clock based, this duration can be negative. If that would break things elsewhere, it should be guarded with a Math.max(consumeTime - produceTime, 0L)", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428554393", "createdAt": "2020-05-21T09:49:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MjI1MQ==", "bodyText": "I agree with using max.  Also, can we rename to record.queue_time_ms? I think spelling it out is unnecessarily verbose.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428682251", "createdAt": "2020-05-21T14:21:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1NDM5Mw=="}, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTA2OTQyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDowMDozOVrOGYtM_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoxNjoxM1rOGY0fsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1OTYxMg==", "bodyText": "If we add \"record.time_in_queue_milliseconds\" to DDTags we can avoid materialising its UTF-8 encoding during serialisation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428559612", "createdAt": "2020-05-21T10:00:39Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3OTA5MA==", "bodyText": "we haven't really done this to all the integrations...  for example, see line 62-63.  Let's not worry about it in this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428679090", "createdAt": "2020-05-21T14:16:13Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n+      span.setTag(\"record.time_in_queue_milliseconds\", consumeTime - produceTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU1OTYxMg=="}, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTgzNTc3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyMTozOFrOGY0s9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyMTozOFrOGY0s9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4MjQ4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());\n          \n          \n            \n                  final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getStartTime());\n          \n      \n    \n    \n  \n\nSemantically, the span passed into the method is the one representing the consuming of the message.  Besides, it will always be the root span anyway.", "url": "https://github.com/DataDog/dd-trace-java/pull/1481#discussion_r428682484", "createdAt": "2020-05-21T14:21:38Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/kafka-clients-0.11/src/main/java/datadog/trace/instrumentation/kafka_clients/KafkaDecorator.java", "diffHunk": "@@ -59,6 +61,10 @@ public void onConsume(final AgentSpan span, final ConsumerRecord record) {\n       span.setTag(DDTags.RESOURCE_NAME, \"Consume Topic \" + topic);\n       span.setTag(\"partition\", record.partition());\n       span.setTag(\"offset\", record.offset());\n+\n+      final long produceTime = record.timestamp();\n+      final long consumeTime = TimeUnit.NANOSECONDS.toMillis(span.getLocalRootSpan().getStartTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acfde384a6a77ebec61a4c981a21ea842397271f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 157, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}