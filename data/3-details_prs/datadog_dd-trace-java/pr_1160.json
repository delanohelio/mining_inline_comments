{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODQ4MzUw", "number": 1160, "title": "Add config to capture stacktrace when a span duration exceeds threshold", "bodyText": "(But only when span is not errored or finished on a different thread.)\nUse the following config:\n-Ddd.trace.span.duration-above-average.stacktrace.millis=1000\n\n(One second is the default, 0 disables.)", "createdAt": "2020-01-03T01:40:10Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1160", "merged": true, "mergeCommit": {"oid": "060c05671e3100f0b2497a9bc2b3d2f560634a00"}, "closed": true, "closedAt": "2020-03-12T17:45:21Z", "author": {"login": "tylerbenson"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2l2BaABqjI5MTkzMzE0ODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMZ965ABqjMxMTY2MjQ4MDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b20902a046c8f27b90bc4c3ed4f3300c8cf17a2", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5b20902a046c8f27b90bc4c3ed4f3300c8cf17a2", "committedDate": "2020-01-03T01:37:29Z", "message": "Add config to capture stacktrace when a span duration exceeds threshold\n\n(But only when span is not errored or finished on a different thread.)\n\nUse the following config:\n```\n-Ddd.trace.span.duration.stacktrace.millis=1000\n```\n(One second is the default.)"}, "afterCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ca4c27253d72584e06dbff28aeaf4e8c6324866c", "committedDate": "2020-01-03T03:32:01Z", "message": "Add config to capture stacktrace when a span duration exceeds threshold\n\n(But only when span is not errored or finished on a different thread.)\n\nUse the following config:\n```\n-Ddd.trace.span.duration.stacktrace.millis=1000\n```\n(One second is the default, 0 disables.)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTI1MTE3", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#pullrequestreview-338125117", "createdAt": "2020-01-03T15:15:13Z", "commit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToxNToxM1rOFaCQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNToyMjoxOFrOFaCbJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NDM3Ng==", "bodyText": "Long term, I'd like to get away from the use of Singletons like Config -- but for now, I think this is fine.", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#discussion_r362844376", "createdAt": "2020-01-03T15:15:13Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpan.java", "diffHunk": "@@ -86,12 +89,112 @@ private void finishAndAddToTrace(final long durationNano) {\n     // ensure a min duration of 1\n     if (this.durationNano.compareAndSet(0, Math.max(1, durationNano))) {\n       log.debug(\"Finished: {}\", this);\n+      addStacktraceIfThresholdExceeded();\n       context.getTrace().addSpan(this);\n     } else {\n       log.debug(\"{} - already finished!\", this);\n     }\n   }\n \n+  private void addStacktraceIfThresholdExceeded() {\n+    final long spanDurationStacktraceNanos = Config.get().getSpanDurationStacktraceNanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NTE2MQ==", "bodyText": "Why not call Thread.getStackTraceElement[] instead?\nIdeally, we also use the frame walking API on newer versions of Java, but that can wait until later.", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#discussion_r362845161", "createdAt": "2020-01-03T15:17:23Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpan.java", "diffHunk": "@@ -86,12 +89,112 @@ private void finishAndAddToTrace(final long durationNano) {\n     // ensure a min duration of 1\n     if (this.durationNano.compareAndSet(0, Math.max(1, durationNano))) {\n       log.debug(\"Finished: {}\", this);\n+      addStacktraceIfThresholdExceeded();\n       context.getTrace().addSpan(this);\n     } else {\n       log.debug(\"{} - already finished!\", this);\n     }\n   }\n \n+  private void addStacktraceIfThresholdExceeded() {\n+    final long spanDurationStacktraceNanos = Config.get().getSpanDurationStacktraceNanos();\n+    if (!isError()\n+        && spanDurationStacktraceNanos > 0\n+        && durationNano.get() > spanDurationStacktraceNanos\n+        // If this span was finished async, then the stacktrace will be less meaningful.\n+        && context.threadId == Thread.currentThread().getId()) {\n+      final Exception stacktrace = new Exception();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NTU4NQ==", "bodyText": "I'd like to see a health metric for anomalous situations as well.", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#discussion_r362845585", "createdAt": "2020-01-03T15:18:25Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpan.java", "diffHunk": "@@ -86,12 +89,112 @@ private void finishAndAddToTrace(final long durationNano) {\n     // ensure a min duration of 1\n     if (this.durationNano.compareAndSet(0, Math.max(1, durationNano))) {\n       log.debug(\"Finished: {}\", this);\n+      addStacktraceIfThresholdExceeded();\n       context.getTrace().addSpan(this);\n     } else {\n       log.debug(\"{} - already finished!\", this);\n     }\n   }\n \n+  private void addStacktraceIfThresholdExceeded() {\n+    final long spanDurationStacktraceNanos = Config.get().getSpanDurationStacktraceNanos();\n+    if (!isError()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NjE3OQ==", "bodyText": "This feels like an optional behavior that might be better handled through a Listener mechanism.\nHowever, I'm fine with deferring that to a later PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#discussion_r362846179", "createdAt": "2020-01-03T15:20:03Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpan.java", "diffHunk": "@@ -86,12 +89,112 @@ private void finishAndAddToTrace(final long durationNano) {\n     // ensure a min duration of 1\n     if (this.durationNano.compareAndSet(0, Math.max(1, durationNano))) {\n       log.debug(\"Finished: {}\", this);\n+      addStacktraceIfThresholdExceeded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NzAxMw==", "bodyText": "I think requesting and traversing the StackTraceElement[] would be easier to follow that filtering Writer.", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#discussion_r362847013", "createdAt": "2020-01-03T15:22:18Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDSpan.java", "diffHunk": "@@ -86,12 +89,112 @@ private void finishAndAddToTrace(final long durationNano) {\n     // ensure a min duration of 1\n     if (this.durationNano.compareAndSet(0, Math.max(1, durationNano))) {\n       log.debug(\"Finished: {}\", this);\n+      addStacktraceIfThresholdExceeded();\n       context.getTrace().addSpan(this);\n     } else {\n       log.debug(\"{} - already finished!\", this);\n     }\n   }\n \n+  private void addStacktraceIfThresholdExceeded() {\n+    final long spanDurationStacktraceNanos = Config.get().getSpanDurationStacktraceNanos();\n+    if (!isError()\n+        && spanDurationStacktraceNanos > 0\n+        && durationNano.get() > spanDurationStacktraceNanos\n+        // If this span was finished async, then the stacktrace will be less meaningful.\n+        && context.threadId == Thread.currentThread().getId()) {\n+      final Exception stacktrace = new Exception();\n+      final Writer stackString = new FilteredStringWriter();\n+      stacktrace.printStackTrace(new PrintWriter(stackString));\n+      setTag(\"slow.stack\", stackString.toString());\n+    }\n+  }\n+\n+  // Writer that skips the first line and lines until FILTER doesn't match.\n+  private static final class FilteredStringWriter extends Writer {\n+    private static final char[] FILTER = \"\\tat datadog.opentracing.\".toCharArray();\n+\n+    private final StringWriter writer = new StringWriter();\n+\n+    private State state = State.SKIP_LINE; // Skip the exception type and message\n+    private StringBuilder buffer = new StringBuilder();\n+    private int lineIndex = 0;\n+\n+    @Override\n+    public void write(final char[] cbuf, final int off, final int len) throws IOException {\n+      if ((off < 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MjY1NTU3", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#pullrequestreview-338265557", "createdAt": "2020-01-03T20:40:17Z", "commit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDo0MDoxOFrOFaI9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMDo0MDoxOFrOFaI9LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk1NDAyOA==", "bodyText": "Depending on a use-case of course, but for regular web applications 1 second is a strict setting, and many users can be flooded.", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#discussion_r362954028", "createdAt": "2020-01-03T20:40:18Z", "author": {"login": "jkubrynski"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/Config.java", "diffHunk": "@@ -129,6 +132,8 @@\n   private static final boolean DEFAULT_DB_CLIENT_HOST_SPLIT_BY_INSTANCE = false;\n   private static final String DEFAULT_SPLIT_BY_TAGS = \"\";\n   private static final int DEFAULT_PARTIAL_FLUSH_MIN_SPANS = 1000;\n+  private static final int DEFAULT_SPAN_DURATION_STACKTRACE_MILLIS =\n+      (int) TimeUnit.SECONDS.toMillis(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca4c27253d72584e06dbff28aeaf4e8c6324866c", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ca4c27253d72584e06dbff28aeaf4e8c6324866c", "committedDate": "2020-01-03T03:32:01Z", "message": "Add config to capture stacktrace when a span duration exceeds threshold\n\n(But only when span is not errored or finished on a different thread.)\n\nUse the following config:\n```\n-Ddd.trace.span.duration.stacktrace.millis=1000\n```\n(One second is the default, 0 disables.)"}, "afterCommit": {"oid": "77b22327908ea67485a935187738c2e3e6b1f772", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/77b22327908ea67485a935187738c2e3e6b1f772", "committedDate": "2020-01-17T23:14:18Z", "message": "Replace FilteredStringWriter with direct StackTraceElement usage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjM4ODU5", "url": "https://github.com/DataDog/dd-trace-java/pull/1160#pullrequestreview-372238859", "createdAt": "2020-03-10T19:00:30Z", "commit": {"oid": "3d0370b418b408c8b85e56a41666549dbfe18083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b74487ed664b61c695f17dc96d10b332d726d36", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2b74487ed664b61c695f17dc96d10b332d726d36", "committedDate": "2020-03-10T20:18:22Z", "message": "Add config to capture stacktrace when a span duration exceeds threshold\n\n(But only when span is not errored or finished on a different thread.)\n\nUse the following config:\n```\n-Ddd.trace.span.duration.stacktrace.millis=1000\n```\n(One second is the default, 0 disables.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cbb874c7ccaf224c2def90db614b3c3791466cb", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1cbb874c7ccaf224c2def90db614b3c3791466cb", "committedDate": "2020-03-10T20:18:22Z", "message": "Replace FilteredStringWriter with direct StackTraceElement usage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f64edaea43ebf7feeed5a40494547da4efc29d6", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2f64edaea43ebf7feeed5a40494547da4efc29d6", "committedDate": "2020-03-10T22:08:12Z", "message": "Make threshold based on average duration\n\nThis should help avoid too frequent of stacktraces when the configured threshold is a normal duration.\nAlternatively, we could make it a percentage above the average."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d0370b418b408c8b85e56a41666549dbfe18083", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/3d0370b418b408c8b85e56a41666549dbfe18083", "committedDate": "2020-01-21T16:29:48Z", "message": "Set timeouts on individual tests and increase overall test timeout."}, "afterCommit": {"oid": "2f64edaea43ebf7feeed5a40494547da4efc29d6", "author": {"user": {"login": "tylerbenson", "name": "Tyler Benson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2f64edaea43ebf7feeed5a40494547da4efc29d6", "committedDate": "2020-03-10T22:08:12Z", "message": "Make threshold based on average duration\n\nThis should help avoid too frequent of stacktraces when the configured threshold is a normal duration.\nAlternatively, we could make it a percentage above the average."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2655, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}