{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODE3NTc3", "number": 1308, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzo1NVrODnMU_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNjozMVrOD3UW2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzMDM5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxMzo1NVrOF1DGpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoxMDoyOVrOF2FGXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMw==", "bodyText": "Might make more sense for this test to be in the lettuce project.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391169703", "createdAt": "2020-03-11T18:13:55Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "diffHunk": "@@ -0,0 +1,109 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.PortUtils\n+import datadog.trace.agent.test.utils.TraceUtils\n+import io.lettuce.core.ClientOptions\n+import io.lettuce.core.RedisClient\n+import io.lettuce.core.api.StatefulConnection\n+import io.lettuce.core.api.reactive.RedisReactiveCommands\n+import reactor.core.scheduler.Schedulers\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+class LettuceReactiveTest extends AgentTestRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25616139f7a522e80176496eb3dfb63e39896592"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1MDk3NA==", "bodyText": "I considered that. I rationale was that this is more of an integration test for reactor behaving appropriately, than lettuce", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r392250974", "createdAt": "2020-03-13T14:10:29Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "diffHunk": "@@ -0,0 +1,109 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.PortUtils\n+import datadog.trace.agent.test.utils.TraceUtils\n+import io.lettuce.core.ClientOptions\n+import io.lettuce.core.RedisClient\n+import io.lettuce.core.api.StatefulConnection\n+import io.lettuce.core.api.reactive.RedisReactiveCommands\n+import reactor.core.scheduler.Schedulers\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+class LettuceReactiveTest extends AgentTestRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE2OTcwMw=="}, "originalCommit": {"oid": "25616139f7a522e80176496eb3dfb63e39896592"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDIzMjM1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNDozMVrOF1DIBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNDozMVrOF1DIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MDA1NA==", "bodyText": "I usually static import this...", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391170054", "createdAt": "2020-03-11T18:14:31Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/lettuceTest/groovy/LettuceReactiveTest.groovy", "diffHunk": "@@ -0,0 +1,109 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.utils.PortUtils\n+import datadog.trace.agent.test.utils.TraceUtils\n+import io.lettuce.core.ClientOptions\n+import io.lettuce.core.RedisClient\n+import io.lettuce.core.api.StatefulConnection\n+import io.lettuce.core.api.reactive.RedisReactiveCommands\n+import reactor.core.scheduler.Schedulers\n+import redis.embedded.RedisServer\n+import spock.lang.Shared\n+\n+class LettuceReactiveTest extends AgentTestRunner {\n+  public static final String HOST = \"127.0.0.1\"\n+  public static final int DB_INDEX = 0\n+  // Disable autoreconnect so we do not get stray traces popping up on server shutdown\n+  public static final ClientOptions CLIENT_OPTIONS = ClientOptions.builder().autoReconnect(false).build()\n+\n+  @Shared\n+  String embeddedDbUri\n+\n+  @Shared\n+  RedisServer redisServer\n+\n+  RedisClient redisClient\n+  StatefulConnection connection\n+  RedisReactiveCommands<String, ?> reactive\n+\n+  def setupSpec() {\n+    int port = PortUtils.randomOpenPort()\n+    String dbAddr = HOST + \":\" + port + \"/\" + DB_INDEX\n+    embeddedDbUri = \"redis://\" + dbAddr\n+\n+    redisServer = RedisServer.builder()\n+    // bind to localhost to avoid firewall popup\n+      .setting(\"bind \" + HOST)\n+    // set max memory to avoid problems in CI\n+      .setting(\"maxmemory 128M\")\n+      .port(port).build()\n+  }\n+\n+  def setup() {\n+    redisClient = RedisClient.create(embeddedDbUri)\n+\n+    println \"Using redis: $redisServer.args\"\n+    redisServer.start()\n+    redisClient.setOptions(CLIENT_OPTIONS)\n+    connection = redisClient.connect()\n+\n+    reactive = connection.reactive()\n+    reactive.set(\"test\", \"test\").block()\n+\n+    TEST_WRITER.waitForTraces(2)\n+    TEST_WRITER.clear()\n+  }\n+\n+  def cleanup() {\n+    connection.close()\n+    redisServer.stop()\n+  }\n+\n+  def \"blocking subscriber\"() {\n+    when:\n+    TraceUtils.runUnderTrace(\"test-parent\") {\n+      reactive.set(\"a\", \"1\")\n+        .then(reactive.get(\"a\")) // The get here is ending up in another trace\n+        .block()\n+    }\n+    TEST_WRITER.waitForTraces(1)\n+\n+    def traces = TEST_WRITER.collect()\n+\n+    then:\n+    traces.size() == 1\n+    traces.get(0).size() == 3\n+  }\n+\n+  def \"async subscriber\"() {\n+    when:\n+    TraceUtils.runUnderTrace(\"test-parent\") {\n+      reactive.set(\"a\", \"1\")\n+        .then(reactive.get(\"a\")) // The get here is ending up in another trace\n+        .subscribe()\n+    }\n+    TEST_WRITER.waitForTraces(1)\n+\n+    def traces = TEST_WRITER.collect()\n+\n+    then:\n+    traces.size() == 1\n+    traces.get(0).size() == 3\n+  }\n+\n+  def \"async subscriber with specific thread pool\"() {\n+    when:\n+    TraceUtils.runUnderTrace(\"test-parent\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25616139f7a522e80176496eb3dfb63e39896592"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDI0MjQ0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/ReactorHooksAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNzowNlrOF1DOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOToxNzoyMVrOF1r6iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTY3NA==", "bodyText": "These methods should be in a separate class... Advice classes should only be used for instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391171674", "createdAt": "2020-03-11T18:17:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/ReactorHooksAdvice.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopTraceScope;\n+import datadog.trace.context.TraceScope;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.asm.Advice;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+import reactor.util.context.Context;\n+\n+public class ReactorHooksAdvice {\n+  @Advice.OnMethodExit(suppress = Throwable.class)\n+  public static void postInit() {\n+    Hooks.onEachOperator(ReactorHooksAdvice.class.getName(), tracingOperator());\n+  }\n+\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingOperator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac7d215ee33faa0149aa178683a29f249019a0d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzODM0NA==", "bodyText": "Done, pushing up now", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391838344", "createdAt": "2020-03-12T19:17:21Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/ReactorHooksAdvice.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeScope;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer.NoopTraceScope;\n+import datadog.trace.context.TraceScope;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Function;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.asm.Advice;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Fuseable;\n+import reactor.core.Scannable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.DirectProcessor;\n+import reactor.core.publisher.Hooks;\n+import reactor.core.publisher.Operators;\n+import reactor.util.context.Context;\n+\n+public class ReactorHooksAdvice {\n+  @Advice.OnMethodExit(suppress = Throwable.class)\n+  public static void postInit() {\n+    Hooks.onEachOperator(ReactorHooksAdvice.class.getName(), tracingOperator());\n+  }\n+\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> tracingOperator() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTY3NA=="}, "originalCommit": {"oid": "cac7d215ee33faa0149aa178683a29f249019a0d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk5MjQzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1NDo0NFrOF1KcqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1NDo0NFrOF1KcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MDAyNQ==", "bodyText": "I'm a little concerned by this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391290025", "createdAt": "2020-03-11T21:54:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -28,10 +37,19 @@ class SpringWebfluxHttpClientTest extends HttpClientTest<SpringWebfluxHttpClient\n       .exchange()\n       .doOnSuccessOrError { success, error ->\n         blockUntilChildSpansFinished(1)\n-        callback?.call()\n+        // The callback span is expected to be detached from the client trace, this however means we either have\n+        // to have the reactor instrumentation not work in this case, breaking the lettuce flow expectations, or\n+        // we can make this code conditional here to make the test pass\n+        if (hasParent) {\n+          callback?.call()\n+        }\n       }\n       .block()\n \n+    if (!hasParent) {\n+      callback?.call()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2ad0496861bcdff3bcf133bffb55f306767d37"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk5NzMzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/SpringWebfluxTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1NjozNVrOF1KfuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1NjozNVrOF1KfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MDgwOQ==", "bodyText": "Would it be better to sort by trace start time instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391290809", "createdAt": "2020-03-11T21:56:35Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/SpringWebfluxTest.groovy", "diffHunk": "@@ -524,4 +534,23 @@ class SpringWebfluxTest extends AgentTestRunner {\n     \"functional API delayed response\" | \"/greet-delayed\" | \"/greet-delayed\"     | null            | SpringWebFluxTestApplication.GreetingHandler.DEFAULT_RESPONSE\n     \"annotation API delayed response\" | \"/foo-delayed\"   | \"/foo-delayed\"       | \"getFooDelayed\" | new FooModel(3L, \"delayed\").toString()\n   }\n+\n+  void sortAndAssertTraces(\n+    final int size,\n+    @ClosureParams(value = SimpleType, options = \"datadog.trace.agent.test.asserts.ListWriterAssert\")\n+    @DelegatesTo(value = ListWriterAssert, strategy = Closure.DELEGATE_FIRST)\n+    final Closure spec) {\n+\n+    TEST_WRITER.waitForTraces(size)\n+\n+    TEST_WRITER.each {\n+      it.sort({\n+        a, b ->\n+          // Intentionally backward because asserts are sorted that way already\n+          return b.resourceName <=> a.resourceName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTAwNjQxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjowMDoxNVrOF1KlVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0ODoxM1rOF2Ggew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MjI0NQ==", "bodyText": "This also concerns me...  Semantically, if I were using reactor independently, wouldn't I expect the exception to be captured here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391292245", "createdAt": "2020-03-11T22:00:15Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -102,11 +107,13 @@ class ReactorCoreTest extends AgentTestRunner {\n           resourceName \"publisher-parent\"\n           operationName \"publisher-parent\"\n           childOf(span(0))\n-          errored true\n-          tags {\n-            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n-            defaultTags()\n-          }\n+          // MonoError and FluxError are both Fuseable.ScalarCallable which we cannot wrap without\n+          // causing a lot of problems in other places where we integrate with reactor, like webflux\n+          //          errored true\n+          //          tags {\n+          //            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n+          //            defaultTags()\n+          //          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1NTI0Ng==", "bodyText": "I'll see what I can do but I wouldn't expect these two ways of emitting an error to a subscriber to be the common case. The test below this is the one I would expect to be the more common case, that one works", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r392255246", "createdAt": "2020-03-13T14:17:48Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -102,11 +107,13 @@ class ReactorCoreTest extends AgentTestRunner {\n           resourceName \"publisher-parent\"\n           operationName \"publisher-parent\"\n           childOf(span(0))\n-          errored true\n-          tags {\n-            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n-            defaultTags()\n-          }\n+          // MonoError and FluxError are both Fuseable.ScalarCallable which we cannot wrap without\n+          // causing a lot of problems in other places where we integrate with reactor, like webflux\n+          //          errored true\n+          //          tags {\n+          //            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n+          //            defaultTags()\n+          //          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MjI0NQ=="}, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NDA0Mw==", "bodyText": "Seems like I fixed it. I feel like this definitely didn't work before. I'm worried theres a gremlin in here", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r392274043", "createdAt": "2020-03-13T14:48:13Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -102,11 +107,13 @@ class ReactorCoreTest extends AgentTestRunner {\n           resourceName \"publisher-parent\"\n           operationName \"publisher-parent\"\n           childOf(span(0))\n-          errored true\n-          tags {\n-            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n-            defaultTags()\n-          }\n+          // MonoError and FluxError are both Fuseable.ScalarCallable which we cannot wrap without\n+          // causing a lot of problems in other places where we integrate with reactor, like webflux\n+          //          errored true\n+          //          tags {\n+          //            errorTags(RuntimeException, EXCEPTION_MESSAGE)\n+          //            defaultTags()\n+          //          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MjI0NQ=="}, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTA3NjE1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMDoxOVrOF1LRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMDoxOVrOF1LRpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMzU5MQ==", "bodyText": "This should prob be extendsClass now.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391303591", "createdAt": "2020-03-11T22:20:19Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -42,21 +35,19 @@ public DefaultWebClientInstrumentation() {\n       \"datadog.trace.agent.decorator.HttpClientDecorator\",\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTA4MjAzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/ReactorHttpClientInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMjo0NFrOF1LVFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjoyMjo0NFrOF1LVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDQ2OA==", "bodyText": "Try to avoid safeHasSuperType now... only use it if you don't know whether the argument is a class or an interface.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r391304468", "createdAt": "2020-03-11T22:22:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/ReactorHttpClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package datadog.trace.instrumentation.springwebflux.client;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class ReactorHttpClientInstrumentation extends Instrumenter.Default {\n+  public ReactorHttpClientInstrumentation() {\n+    super(\"spring-webflux\", \"spring-webflux-client\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return hasClassesNamed(\"reactor.ipc.netty.http.client.HttpClient\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".ReactorHttpClientAdvice$Handler\"};\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"reactor.ipc.netty.http.client.HttpClient\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f662c795fc19ccc7ccd17a580cf22df31eada5cc"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjcxMjkxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/reactor-core-3.1.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMDozM1rOF2U_Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyMDozM1rOF2U_Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMTI1OQ==", "bodyText": "You can remove this now.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r392511259", "createdAt": "2020-03-13T22:20:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/reactor-core-3.1.gradle", "diffHunk": "@@ -21,6 +21,8 @@ testSets {\n   latestDepTest {\n     dirName = 'test'\n   }\n+\n+  lettuceTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb1cdecea93bf69f6aa4ed7b91dfd2cec37880a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODQzNTQ1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/netty-4.0/src/test/groovy/Netty40ClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMDo0OFrOGLjzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMDo0OFrOGLjzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NDA4Ng==", "bodyText": "Will undo before merge", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414774086", "createdAt": "2020-04-24T18:20:48Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/test/groovy/Netty40ClientTest.groovy", "diffHunk": "@@ -67,6 +68,7 @@ class Netty40ClientTest extends HttpClientTest {\n     return false\n   }\n \n+  @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc051465f569d3a52c1d5965c830f33229cb0f4b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODQ0NzcxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMzo1MVrOGLj6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoyMzo1MVrOGLj6Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NTkwNg==", "bodyText": "Will undo before merge", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414775906", "createdAt": "2020-04-24T18:23:51Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "diffHunk": "@@ -77,6 +78,7 @@ class Netty41ClientTest extends HttpClientTest {\n     return false\n   }\n \n+  @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32aa51afa2e11fe8a8155414079374c3d5134499"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODY5MjQ5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyOTozN1rOGLmJmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOToyOTozN1rOGLmJmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxMjU2OQ==", "bodyText": "class names like this remind me that the way I feel about reactive, other people feel about java in general.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414812569", "createdAt": "2020-04-24T19:29:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHooksInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHooksInstrumentation() {\n+    super(\"reactor-core\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.core.publisher.Hooks\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingPublishers\",\n+      packageName + \".TracingPublishers$MonoTracingPublisher\",\n+      packageName + \".TracingPublishers$ParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$ConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$GroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableMonoTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableGroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableFluxTracingPublisher\",\n+      packageName + \".TracingSubscriber\",\n+      packageName + \".TracingSubscriber$UnifiedScope\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODcwNjczOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozMzozM1rOGLmRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozMzozM1rOGLmRtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNDY0NQ==", "bodyText": "nice.... isTypeInitializer()!  I've never used that one.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414814645", "createdAt": "2020-04-24T19:33:33Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java/datadog/trace/instrumentation/reactor/core/ReactorHooksInstrumentation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isTypeInitializer;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class ReactorHooksInstrumentation extends Instrumenter.Default {\n+\n+  public ReactorHooksInstrumentation() {\n+    super(\"reactor-core\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"reactor.core.publisher.Hooks\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingPublishers\",\n+      packageName + \".TracingPublishers$MonoTracingPublisher\",\n+      packageName + \".TracingPublishers$ParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$ConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$GroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableMonoTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableParallelFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableConnectableFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableGroupedFluxTracingPublisher\",\n+      packageName + \".TracingPublishers$FuseableFluxTracingPublisher\",\n+      packageName + \".TracingSubscriber\",\n+      packageName + \".TracingSubscriber$UnifiedScope\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(isTypeInitializer(), packageName + \".ReactorHooksAdvice\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODcxMTU0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNDo0NlrOGLmUPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNDo0NlrOGLmUPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTI5NQ==", "bodyText": "Nice comment!", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414815295", "createdAt": "2020-04-24T19:34:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODcxMjgxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNToxMVrOGLmU_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzo1MTo1M1rOGMkSeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTQ4NA==", "bodyText": "How noisy will this be when we have debug enabled?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414815484", "createdAt": "2020-04-24T19:35:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzMDY0OA==", "bodyText": "Ah, I missed this one when I went through and removed log statements. This one isn't actually that noisy", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415830648", "createdAt": "2020-04-27T13:51:53Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNTQ4NA=="}, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODczNDU0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MDo1NlrOGLmhVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0MDo1NlrOGLmhVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxODY0Nw==", "bodyText": "suggestion:  change this to a wrapSubscriber that does the instanceof check and returns either a newly or already wrapped instance.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414818647", "createdAt": "2020-04-24T19:40:56Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/main/java8/datadog/trace/instrumentation/reactor/core/TracingPublishers.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package datadog.trace.instrumentation.reactor.core;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.noopSpan;\n+\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.function.Consumer;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Disposable;\n+import reactor.core.Fuseable;\n+import reactor.core.publisher.ConnectableFlux;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.GroupedFlux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.publisher.ParallelFlux;\n+\n+public class TracingPublishers {\n+  private static final Logger log = LoggerFactory.getLogger(TracingPublishers.class);\n+\n+  /**\n+   * Instead of using {@link reactor.core.publisher.Operators#lift} (available in reactor 3.1) or\n+   * {@link reactor.core.publisher.Operators#liftPublisher} (available in reactor 3.3) we create our\n+   * own version of {@link reactor.core.publisher.Operators#liftPublisher} that allows us to run\n+   * code at assembly time. The built in reactor functions handle all of the assembly time actions\n+   * internally so we are unable to attach spans to a Publisher context at the points where it would\n+   * make sense for us.\n+   *\n+   * <p>By doing this ourselves we will want to keep this in line with the {@link\n+   * reactor.core.publisher.Operators.LiftFunction} implementation in order to ensure greatest\n+   * compatibility\n+   */\n+  public static <T> Publisher<T> wrap(final Publisher<T> delegate) {\n+    AgentSpan span = activeSpan();\n+    if (span == null) {\n+      span = noopSpan();\n+    }\n+    log.debug(\"Lifting {} - {}\", delegate.getClass().getName(), delegate.toString());\n+\n+    // based on Operators.LiftFunction.apply in reactor 3.3.4\n+    if (delegate instanceof Fuseable) {\n+      if (delegate instanceof Mono) {\n+        return new FuseableMonoTracingPublisher<>(span, (Mono<T>) delegate);\n+      }\n+      if (delegate instanceof ParallelFlux) {\n+        return new FuseableParallelFluxTracingPublisher<>(span, (ParallelFlux<T>) delegate);\n+      }\n+      if (delegate instanceof ConnectableFlux) {\n+        return new FuseableConnectableFluxTracingPublisher<>(span, (ConnectableFlux<T>) delegate);\n+      }\n+      if (delegate instanceof GroupedFlux) {\n+        return new FuseableGroupedFluxTracingPublisher<>(span, (GroupedFlux<?, T>) delegate);\n+      }\n+      return new FuseableFluxTracingPublisher<>(span, (Flux<T>) delegate);\n+    } else {\n+      if (delegate instanceof Mono) {\n+        return new MonoTracingPublisher<>(span, (Mono<T>) delegate);\n+      }\n+      if (delegate instanceof ParallelFlux) {\n+        return new ParallelFluxTracingPublisher<>(span, (ParallelFlux<T>) delegate);\n+      }\n+      if (delegate instanceof ConnectableFlux) {\n+        return new ConnectableFluxTracingPublisher<>(span, (ConnectableFlux<T>) delegate);\n+      }\n+      if (delegate instanceof GroupedFlux) {\n+        return new GroupedFluxTracingPublisher<>(span, (GroupedFlux<?, T>) delegate);\n+      }\n+      return new FluxTracingPublisher<>(span, (Flux<T>) delegate);\n+    }\n+  }\n+\n+  static <T> boolean shouldWrapSubscriber(final CoreSubscriber<? super T> actual) {\n+    return !(actual instanceof TracingSubscriber);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODc1MzIxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0NTo1N1rOGLmsPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo0NTo1N1rOGLmsPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyMTQzOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414821439", "createdAt": "2020-04-24T19:45:57Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -102,32 +118,34 @@ class ReactorCoreTest extends AgentTestRunner {\n           resourceName \"publisher-parent\"\n           operationName \"publisher-parent\"\n           childOf(span(0))\n-          errored true\n+          // It's important that we don't attach errors at the Reactor level so that we don't\n+          // impact the spans on reactor integrations such as netty and lettuce, as reactor is\n+          // more of a context propagation mechanism than something we would be tracking for\n+          // errors this is ok.\n+          errored false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODc3OTk1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo1MzoxOFrOGLm7WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTo1MzoxOFrOGLm7WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgyNTMwNQ==", "bodyText": "You can simplify this a lot with TraceUtils.basicSpan", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414825305", "createdAt": "2020-04-24T19:53:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/reactor-core-3.1/src/test/groovy/ReactorCoreTest.groovy", "diffHunk": "@@ -193,41 +308,136 @@ class ReactorCoreTest extends AgentTestRunner {\n             defaultTags()\n           }\n         }\n+        span(2) {\n+          resourceName \"intermediate\"\n+          operationName \"intermediate\"\n+          childOf(span(1))\n+          tags {\n+            defaultTags()\n+          }\n+        }\n+        for (int i = 0; i < workItems * 2; i++) {\n+          span(i + 3) {\n+            resourceName \"addOne\"\n+            operationName \"addOne\"\n+            childOf(span(i % 2 == 0 ? 1 : 2))\n+            tags {\n+              \"$Tags.COMPONENT\" \"trace\"\n+              defaultTags()\n+            }\n+          }\n+        }\n       }\n     }\n \n     where:\n-    name         | publisher\n-    \"basic mono\" | Mono.just(1)\n-    \"basic flux\" | Flux.fromIterable([5, 6])\n+    name         | workItems | publisherSupplier\n+    \"basic mono\" | 1         | { -> Mono.just(1).map(addOne) }\n+    \"basic flux\" | 2         | { -> Flux.fromIterable([1, 2]).map(addOne) }\n+  }\n+\n+  def \"Publisher chain spans can have the parent removed at assembly time '#name'\"() {\n+    when:\n+    runUnderTrace {\n+      // The operations in the publisher created here all end up children of the publisher-parent\n+      Publisher<Integer> publisher = publisherSupplier()\n+\n+      // After this activation, all additions to the assembly will create new traces\n+      AgentScope scope = activateSpan(AgentTracer.noopSpan(), true)\n+      try {\n+        if (publisher instanceof Mono) {\n+          return ((Mono) publisher).map(addOne)\n+        } else if (publisher instanceof Flux) {\n+          return ((Flux) publisher).map(addOne)\n+        }\n+        throw new IllegalStateException(\"Unknown publisher type\")\n+      } finally {\n+        scope.close()\n+      }\n+    }\n+\n+    then:\n+    sortAndAssertTraces(1 + workItems) {\n+      trace(0, 2 + workItems) {\n+        span(0) {\n+          resourceName \"trace-parent\"\n+          operationName \"trace-parent\"\n+          parent()\n+          tags {\n+            \"$Tags.COMPONENT\" \"trace\"\n+            defaultTags()\n+          }\n+        }\n+        span(1) {\n+          resourceName \"publisher-parent\"\n+          operationName \"publisher-parent\"\n+          childOf(span(0))\n+          tags {\n+            defaultTags()\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a5b481cdb5b4f5e935ba51698319cd8d6d9d231"}, "originalPosition": 402}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODgxODYwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDowMzo0NVrOGLnRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyMTozMVrOGMlwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA==", "bodyText": "I assume there's no way to construct without the builder that might bypass the instrumentation?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414830924", "createdAt": "2020-04-24T20:03:45Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -16,44 +15,36 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultWebClientInstrumentation extends Instrumenter.Default {\n+public class WebClientFilterInstrumentation extends Instrumenter.Default {\n \n-  public DefaultWebClientInstrumentation() {\n+  public WebClientFilterInstrumentation() {\n     super(\"spring-webflux\", \"spring-webflux-client\");\n   }\n \n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n     // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.reactive.function.client.ExchangeFunction\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(\n-        named(\"org.springframework.web.reactive.function.client.ExchangeFunction\"));\n+    return hasClassesNamed(\"org.springframework.web.reactive.function.client.WebClient\");\n   }\n \n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(\n+        named(\"org.springframework.web.reactive.function.client.WebClient$Builder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzNjAzNg==", "bodyText": "The constructor of the concrete implementation is package-private and takes the builder as an argument, and that constructor is called from build inside the concrete implementation of the builder. I guess to be more sure we would wrap it I could make this a method exit advice on the builder constructor. Though Spring has hidden these classes so it would be extremely unusual for someone to do this without the builder", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415836036", "createdAt": "2020-04-27T13:58:25Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -16,44 +15,36 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultWebClientInstrumentation extends Instrumenter.Default {\n+public class WebClientFilterInstrumentation extends Instrumenter.Default {\n \n-  public DefaultWebClientInstrumentation() {\n+  public WebClientFilterInstrumentation() {\n     super(\"spring-webflux\", \"spring-webflux-client\");\n   }\n \n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n     // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.reactive.function.client.ExchangeFunction\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(\n-        named(\"org.springframework.web.reactive.function.client.ExchangeFunction\"));\n+    return hasClassesNamed(\"org.springframework.web.reactive.function.client.WebClient\");\n   }\n \n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(\n+        named(\"org.springframework.web.reactive.function.client.WebClient$Builder\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA=="}, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1NDc5OQ==", "bodyText": "So there isn't a way to set filters on a WebClient except through the builder so I'd say this is as safe as we can get", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415854799", "createdAt": "2020-04-27T14:21:31Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java/datadog/trace/instrumentation/springwebflux/client/WebClientFilterInstrumentation.java", "diffHunk": "@@ -16,44 +15,36 @@\n import net.bytebuddy.matcher.ElementMatcher;\n \n @AutoService(Instrumenter.class)\n-public class DefaultWebClientInstrumentation extends Instrumenter.Default {\n+public class WebClientFilterInstrumentation extends Instrumenter.Default {\n \n-  public DefaultWebClientInstrumentation() {\n+  public WebClientFilterInstrumentation() {\n     super(\"spring-webflux\", \"spring-webflux-client\");\n   }\n \n   @Override\n   public ElementMatcher<ClassLoader> classLoaderMatcher() {\n     // Optimization for expensive typeMatcher.\n-    return hasClassesNamed(\"org.springframework.web.reactive.function.client.ExchangeFunction\");\n-  }\n-\n-  @Override\n-  public ElementMatcher<? super TypeDescription> typeMatcher() {\n-    return implementsInterface(\n-        named(\"org.springframework.web.reactive.function.client.ExchangeFunction\"));\n+    return hasClassesNamed(\"org.springframework.web.reactive.function.client.WebClient\");\n   }\n \n   @Override\n   public String[] helperClassNames() {\n     return new String[] {\n       packageName + \".SpringWebfluxHttpClientDecorator\",\n       packageName + \".HttpHeadersInjectAdapter\",\n-      packageName + \".TracingClientResponseSubscriber\",\n-      packageName + \".TracingClientResponseSubscriber$1\",\n-      packageName + \".TracingClientResponseMono\",\n+      packageName + \".WebClientTracingFilter\",\n     };\n   }\n \n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return extendsClass(\n+        named(\"org.springframework.web.reactive.function.client.WebClient$Builder\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMDkyNA=="}, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODgzMDg5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDowNzowN1rOGLnYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDowNzowN1rOGLnYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMjcxNA==", "bodyText": "lifted \ud83e\udd41", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414832714", "createdAt": "2020-04-24T20:07:07Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODgzODg2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDowOToyMlrOGLncvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozMToxM1rOGMmRCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMzg1NA==", "bodyText": "Do we need to put anything back into scope here?  Maybe the span's parent?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414833854", "createdAt": "2020-04-24T20:09:22Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer\n+   * versions of reactor-core have easier way to access context but we want to support older\n+   * versions.\n+   */\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> finishSpanNextOrError(\n+      final AgentSpan span) {\n+    return Operators.lift(\n+        (scannable, subscriber) -> new SpanFinishingSubscriber<>(subscriber, span));\n+  }\n+\n   public static void finishSpanIfPresent(\n       final ServerWebExchange exchange, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) exchange.getAttributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (exchange != null) {\n+      finishSpanIfPresentInAttributes(exchange.getAttributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ServerRequest serverRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) serverRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (serverRequest != null) {\n+      finishSpanIfPresentInAttributes(serverRequest.attributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ClientRequest clientRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) clientRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (clientRequest != null) {\n+      finishSpanIfPresentInAttributes(clientRequest.attributes(), throwable);\n+    }\n+  }\n+\n+  private static void finishSpanIfPresentInAttributes(\n+      final Map<String, Object> attributes, final Throwable throwable) {\n+\n+    final AgentSpan span = (AgentSpan) attributes.remove(SPAN_ATTRIBUTE);\n+    finishSpanIfPresent(span, throwable);\n+  }\n+\n+  static void finishSpanIfPresent(final AgentSpan span, final Throwable throwable) {\n+    if (span != null) {\n+      if (throwable != null) {\n+        span.setError(true);\n+        span.addThrowable(throwable);\n+      }\n+      span.finish();\n+    }\n+  }\n+\n+  public static class SpanFinishingSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+    private final AgentSpan span;\n+    private final Context context;\n+\n+    public SpanFinishingSubscriber(\n+        final CoreSubscriber<? super T> subscriber, final AgentSpan span) {\n+      this.subscriber = subscriber;\n+      this.span = span;\n+      context = subscriber.currentContext().put(AgentSpan.class, span);\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription s) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onSubscribe(s);\n+      }\n+    }\n+\n+    @Override\n+    public void onNext(final T t) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onNext(t);\n+      }\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+      finishSpanIfPresent(span, t);\n+      subscriber.onError(t);\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+      finishSpanIfPresent(span, null);\n+      subscriber.onComplete();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MzA0OA==", "bodyText": "This code already existed, I just moved it. I feel like it should be working as expected since the onComplete() will very likely just be calling a TracingSubscriber instance which will change the scope", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415863048", "createdAt": "2020-04-27T14:31:13Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/main/java8/datadog/trace/instrumentation/springwebflux/server/AdviceUtils.java", "diffHunk": "@@ -29,21 +38,103 @@ public static String parseOperationName(final Object handler) {\n     return operationName;\n   }\n \n+  public static <T> Mono<T> setPublisherSpan(final Mono<T> mono, final AgentSpan span) {\n+    return mono.<T>transform(finishSpanNextOrError(span));\n+  }\n+\n+  /**\n+   * Idea for this has been lifted from https://github.com/reactor/reactor-core/issues/947. Newer\n+   * versions of reactor-core have easier way to access context but we want to support older\n+   * versions.\n+   */\n+  public static <T> Function<? super Publisher<T>, ? extends Publisher<T>> finishSpanNextOrError(\n+      final AgentSpan span) {\n+    return Operators.lift(\n+        (scannable, subscriber) -> new SpanFinishingSubscriber<>(subscriber, span));\n+  }\n+\n   public static void finishSpanIfPresent(\n       final ServerWebExchange exchange, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) exchange.getAttributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (exchange != null) {\n+      finishSpanIfPresentInAttributes(exchange.getAttributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ServerRequest serverRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) serverRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (serverRequest != null) {\n+      finishSpanIfPresentInAttributes(serverRequest.attributes(), throwable);\n+    }\n   }\n \n   public static void finishSpanIfPresent(\n       final ClientRequest clientRequest, final Throwable throwable) {\n-    ReactorCoreAdviceUtils.finishSpanIfPresent(\n-        (AgentSpan) clientRequest.attributes().remove(SPAN_ATTRIBUTE), throwable);\n+    if (clientRequest != null) {\n+      finishSpanIfPresentInAttributes(clientRequest.attributes(), throwable);\n+    }\n+  }\n+\n+  private static void finishSpanIfPresentInAttributes(\n+      final Map<String, Object> attributes, final Throwable throwable) {\n+\n+    final AgentSpan span = (AgentSpan) attributes.remove(SPAN_ATTRIBUTE);\n+    finishSpanIfPresent(span, throwable);\n+  }\n+\n+  static void finishSpanIfPresent(final AgentSpan span, final Throwable throwable) {\n+    if (span != null) {\n+      if (throwable != null) {\n+        span.setError(true);\n+        span.addThrowable(throwable);\n+      }\n+      span.finish();\n+    }\n+  }\n+\n+  public static class SpanFinishingSubscriber<T> implements CoreSubscriber<T> {\n+\n+    private final CoreSubscriber<? super T> subscriber;\n+    private final AgentSpan span;\n+    private final Context context;\n+\n+    public SpanFinishingSubscriber(\n+        final CoreSubscriber<? super T> subscriber, final AgentSpan span) {\n+      this.subscriber = subscriber;\n+      this.span = span;\n+      context = subscriber.currentContext().put(AgentSpan.class, span);\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription s) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onSubscribe(s);\n+      }\n+    }\n+\n+    @Override\n+    public void onNext(final T t) {\n+      try (final AgentScope scope = activateSpan(span, false)) {\n+        scope.setAsyncPropagation(true);\n+        subscriber.onNext(t);\n+      }\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+      finishSpanIfPresent(span, t);\n+      subscriber.onError(t);\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+      finishSpanIfPresent(span, null);\n+      subscriber.onComplete();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMzg1NA=="}, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODg0NTM5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMToxNlrOGLnggg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyMDoxMlrOGMlsWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNDgxOA==", "bodyText": "isn't this cheating? seems like this should be reverted so you exercise the instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414834818", "createdAt": "2020-04-24T20:11:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -19,17 +22,22 @@ import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan\n class SpringWebfluxHttpClientTest extends HttpClientTest {\n \n   @Shared\n-  def client = WebClient.builder().build()\n+  WebClient client = WebClient.builder().filter(new WebClientTracingFilter()).build()\n+\n+  @Override\n+  void setupBeforeTests() {\n+    super.setupBeforeTests()\n+    Hooks.onEachOperator(TracingPublishers.getName(), { p -> TracingPublishers.wrap(p) })\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg1MzY1Ng==", "bodyText": "Whoops, I missed this (and a couple other fixes) in my rebasing. Fix in my next commit", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r415853656", "createdAt": "2020-04-27T14:20:12Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -19,17 +22,22 @@ import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activeSpan\n class SpringWebfluxHttpClientTest extends HttpClientTest {\n \n   @Shared\n-  def client = WebClient.builder().build()\n+  WebClient client = WebClient.builder().filter(new WebClientTracingFilter()).build()\n+\n+  @Override\n+  void setupBeforeTests() {\n+    super.setupBeforeTests()\n+    Hooks.onEachOperator(TracingPublishers.getName(), { p -> TracingPublishers.wrap(p) })\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNDgxOA=="}, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODg0NzM3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMTo0NlrOGLnhkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMTo0NlrOGLnhkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNTA5MA==", "bodyText": "why?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414835090", "createdAt": "2020-04-24T20:11:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/spring-webflux-5/src/test/groovy/dd/trace/instrumentation/springwebflux/client/SpringWebfluxHttpClientTest.groovy", "diffHunk": "@@ -95,8 +103,14 @@ class SpringWebfluxHttpClientTest extends HttpClientTest {\n     false\n   }\n \n+\n   boolean testRemoteConnection() {\n     // FIXME: figure out how to configure timeouts.\n     false\n   }\n+\n+  @Override\n+  boolean testCallbackWithoutParent() {\n+    false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODg1MDM4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMjozN1rOGLnjRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDoxMjozN1rOGLnjRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNTUyNw==", "bodyText": "Let's see if we can resolve this...", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r414835527", "createdAt": "2020-04-24T20:12:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -450,4 +453,10 @@ abstract class HttpClientTest extends AgentTestRunner {\n     // function is used.  There is no way to stop a test from a derived class hence the flag\n     true\n   }\n+\n+  boolean testCallbackWithoutParent() {\n+    // FIXME: This is a hack to allow disabling the callback without parent test in Spring Webflux\n+    // The problem is that the traces get reported in an inconsistent order depending on the version of webflux in use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb7ee308b71163fe24bdba1685cb48d74bb23a4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODc0NDU4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyNzo1NVrOGM2REQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowNTozMFrOGNboYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ==", "bodyText": "Not sure how I feel about this...", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416125201", "createdAt": "2020-04-27T20:27:55Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NDg3MA==", "bodyText": "I could put this behind a flag so it's intentional but different versions of webflux report at different times because the reactive stream is constructed differently so I really don't know where to go from here. I don't see a way out within the instrumentation", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416154870", "createdAt": "2020-04-27T21:16:56Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NTIxMg==", "bodyText": "To be clear, in webflux the spans get finished in the correct order, they just don't report in the expected order due to reference counting.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416165212", "createdAt": "2020-04-27T21:34:42Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NjAxNg==", "bodyText": "If we want to decide across the board to reorder spans based on start time, I could get behind that.  I'm also not opposed to the way you handled it here...  I understand the challenge.  I mainly wanted to voice concern.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416196016", "createdAt": "2020-04-27T22:36:03Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyNjc3Nw==", "bodyText": "fwiw, I found it helpful (reduced sporadic failures) to order by parent/child, and then by start order among siblings (but not using timestamp)", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416226777", "createdAt": "2020-04-27T23:51:12Z", "author": {"login": "trask"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwODgxNw==", "bodyText": "Ok, so here is my proposal to ease concerns: I'll add an assertion that the spans in the client trace both finish before the span in the callback trace. Would that help?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416608817", "createdAt": "2020-04-28T13:23:39Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyOTE4Ng==", "bodyText": "So commited it here: 779dff3\nbut.... the apache and httpurlconnection tests both break with this change", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416629186", "createdAt": "2020-04-28T13:50:23Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNzM3OA==", "bodyText": "Ok, so considering there are clients that actually don't behave the way we expect I think this might be good to merge for now with the understanding that the test should be updated and the clients/tests that don't work correctly fixed", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416737378", "createdAt": "2020-04-28T16:05:30Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -191,17 +191,15 @@ abstract class HttpClientTest extends AgentTestRunner {\n   }\n \n   def \"trace request with callback and no parent\"() {\n-    given:\n-    assumeTrue(testCallbackWithoutParent())\n-\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n-      runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n-      }\n+      runUnderTrace(\"callback\") {}\n     }\n \n+    TEST_WRITER.sort({ t1, t2 ->\n+      return t1[0].startTime <=> t2[0].startTime\n+    })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyNTIwMQ=="}, "originalCommit": {"oid": "67f9c5d6e544738f0e71b9a49c747c000d2f9f67"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjA2MDM1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNTo1NFrOGNUWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozNTo1NFrOGNUWaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxODA4OA==", "bodyText": "I suspect this might be causing the netty client test failure but I'm not sure why", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416618088", "createdAt": "2020-04-28T13:35:54Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/OpenTracing32.java", "diffHunk": "@@ -85,7 +86,7 @@ public TraceScope activeScope() {\n     if (scope instanceof TraceScope) {\n       return (TraceScope) scope;\n     } else {\n-      return null;\n+      return AgentTracer.noopTraceScope();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64127a6542dd05398fd788561d83a38aaf8289f6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzI5OTY2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/netty-4.0/src/test/groovy/Netty40ClientTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowMTo0M1rOGNgZ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowMTo0M1rOGNgZ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNTU3NA==", "bodyText": "revert?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416815574", "createdAt": "2020-04-28T18:01:43Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/netty-4.0/src/test/groovy/Netty40ClientTest.groovy", "diffHunk": "@@ -66,7 +66,7 @@ class Netty40ClientTest extends HttpClientTest {\n   boolean testRemoteConnection() {\n     return false\n   }\n-\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMwMDA1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowMTo1MVrOGNgaFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODoxNTo0NVrOGNg69Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNTYzOQ==", "bodyText": "revert?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416815639", "createdAt": "2020-04-28T18:01:51Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "diffHunk": "@@ -76,7 +76,7 @@ class Netty41ClientTest extends HttpClientTest {\n   boolean testRemoteConnection() {\n     return false\n   }\n-\n+  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMjAwNw==", "bodyText": "My local copy doesn't have the tabs. I don't know where they came from", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416822007", "createdAt": "2020-04-28T18:12:17Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "diffHunk": "@@ -76,7 +76,7 @@ class Netty41ClientTest extends HttpClientTest {\n   boolean testRemoteConnection() {\n     return false\n   }\n-\n+  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNTYzOQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyNDA1Mw==", "bodyText": "Ignore me. I had checked out master to start my next work", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416824053", "createdAt": "2020-04-28T18:15:45Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/netty-4.1/src/test/groovy/Netty41ClientTest.groovy", "diffHunk": "@@ -76,7 +76,7 @@ class Netty41ClientTest extends HttpClientTest {\n   boolean testRemoteConnection() {\n     return false\n   }\n-\n+  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNTYzOQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMxMjg0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNToxNFrOGNgiSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODoxODozMlrOGNhBag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzczNg==", "bodyText": "please no sleep...  Maybe try blockUntilChildSpansFinished(1) instead?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416817736", "createdAt": "2020-04-28T18:05:14Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyNTcwNg==", "bodyText": "This isn't needed anymore anyway", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416825706", "createdAt": "2020-04-28T18:18:32Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzczNg=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMxNjM0OnYy", "diffSide": "LEFT", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNjoxMVrOGNgkdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTo0MDowOFrOGNj-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA==", "bodyText": "Why can't this stay?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416818294", "createdAt": "2020-04-28T18:06:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyNDkwMQ==", "bodyText": "Because webflux doesn't report until after all references are gone, and the callback is run in the same reactive stream so the references don't clear up until after the callback runs", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416824901", "createdAt": "2020-04-28T18:17:11Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjcxOA==", "bodyText": "then that is a problem for that instrumentation... it suggests the timing of the client span is incorrect.  The client span should be finished before the callback executes.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416842718", "createdAt": "2020-04-28T18:46:08Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MzM3Ng==", "bodyText": "It is finished, but it hasn't reported because of reference counting", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416843376", "createdAt": "2020-04-28T18:47:08Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTY3NA==", "bodyText": "On some level, it makes sense to me that lazy eval & call backs might delay certain things finishing, so it isn't immediately obvious to me that...\n\nThe client span should be finished before the callback executes.\n\nIn this case, it sounds like it is in sort of half-finished waiting for the ref count to reach zero.\nI'm curious at what point does the ref count reach zero again.\nI'm also curious this is mostly a problem for the test -- or is it a problem in regular use as well.\nI wouldn't be super surprised if what works well for testing simple synchronous stuff doesn't work so for complicated async stuff.", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416871674", "createdAt": "2020-04-28T19:36:04Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3NDAwOA==", "bodyText": "It's a problem in regular usage as well. There have been customers who have noticed this behavior", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416874008", "createdAt": "2020-04-28T19:40:08Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODI5NA=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzMxODAzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNjozMVrOGNglcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0OTo0OFrOGNiMYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ==", "bodyText": "still needed?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416818545", "createdAt": "2020-04-28T18:06:31Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMDEyMQ==", "bodyText": "We should do it to cover the uncertainty around spans finishing when they should. That's the purpose of the FIXME", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416820121", "createdAt": "2020-04-28T18:09:14Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyMzk0Mw==", "bodyText": "shouldn't a blockUntilChildSpansFinished as suggested above fix that though?", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416823943", "createdAt": "2020-04-28T18:15:35Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgyNzc0NA==", "bodyText": "I don't follow, the callback is in a different trace. The intent was the verify the callback doesn't start until after the client span(s) were all finished", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416827744", "createdAt": "2020-04-28T18:21:42Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0Mzk1Mw==", "bodyText": "oh, right... I forgot it was the \"no parent\" test.  I still think it should have the TEST_WRITER.waitForTraces(1).", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416843953", "createdAt": "2020-04-28T18:48:10Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0NDg5OQ==", "bodyText": "Theres a waitForTraces(2) ~15 lines above to cover that", "url": "https://github.com/DataDog/dd-trace-java/pull/1308#discussion_r416844899", "createdAt": "2020-04-28T18:49:48Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/base/HttpClientTest.groovy", "diffHunk": "@@ -194,12 +194,29 @@ abstract class HttpClientTest extends AgentTestRunner {\n     when:\n     def status = doRequest(method, server.address.resolve(\"/success\"), [\"is-dd-server\": \"false\"]) {\n       runUnderTrace(\"callback\") {\n-        // Ensure consistent ordering of traces for assertion.\n-        TEST_WRITER.waitForTraces(1)\n+        sleep(10)\n       }\n     }\n \n+    TEST_WRITER.waitForTraces(2)\n+\n+    // Java 7 CopyOnWrite lists cannot be sorted in place\n+    List<List<DDSpan>> traces = TEST_WRITER.toList()\n+    traces.sort({ t1, t2 ->\n+      return t1[0].startTimeNano <=> t2[0].startTimeNano\n+    })\n+    for (int i = 0; i < traces.size(); i++) {\n+      TEST_WRITER.set(i, traces.get(i))\n+    }\n+\n     then:\n+    // FIXME some client tests don't pass with these assertions when they should\n+//    TEST_WRITER.get(0).findAll { span ->\n+//      def callbackSpan = TEST_WRITER.get(1)[0]\n+//      // client span ending after callback\n+//      span.startTimeNano + span.durationNano > callbackSpan.startTimeNano\n+//    }.isEmpty()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODU0NQ=="}, "originalCommit": {"oid": "d206d3be83e1fb4041798736aca3b279f19417bc"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 396, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}