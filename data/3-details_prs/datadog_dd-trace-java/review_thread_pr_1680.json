{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTM5OTUx", "number": 1680, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1NjowMFrOEOUoUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozMjoxNVrOEQN5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDUzNTIwOnYy", "diffSide": "RIGHT", "path": "utils/test-utils/src/main/groovy/datadog/trace/util/test/DDSpecification.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1NjowMFrOGxaN4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1NjowMFrOGxaN4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2Mjk0NA==", "bodyText": "Not sure if load this class using this.getClassLoader() is the best approach.", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r454462944", "createdAt": "2020-07-14T15:56:00Z", "author": {"login": "drodriguezhdez"}, "path": "utils/test-utils/src/main/groovy/datadog/trace/util/test/DDSpecification.groovy", "diffHunk": "@@ -51,4 +53,19 @@ abstract class DDSpecification extends Specification {\n       .installOn(instrumentation)\n     isConfigInstanceModifiable = true\n   }\n+\n+  //Clean captured environment to avoid affecting Config settings with platform dependant properties.\n+  static void cleanCapturedEnvironment() {\n+    try {\n+      def capturedEnvClass = this.getClassLoader().loadClass(CAPTURED_ENV)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e74f342027827ddaba40103dfd7caae99b65718d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDM0MjU3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/akka-http-10.0/src/lagomTest/groovy/LagomTest.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyMjo1NFrOG0PdnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjozODowOVrOG0qIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMjQ3Nw==", "bodyText": "What will the new value of this be?", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r457432477", "createdAt": "2020-07-20T14:22:54Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/akka-http-10.0/src/lagomTest/groovy/LagomTest.groovy", "diffHunk": "@@ -59,7 +59,7 @@ class LagomTest extends AgentTestRunner {\n     assertTraces(1) {\n       trace(0, 2) {\n         span(0) {\n-          serviceName \"unnamed-java-app\"\n+          hasServiceName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2OTM3NA==", "bodyText": "The new value is something like worker.org.gradle.process.internal.worker.GradleWorkerMain or similar. This is something totally environment dependant, so we cannot assert a concrete serviceName if we don't configure one.", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r457869374", "createdAt": "2020-07-21T06:38:09Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/instrumentation/akka-http-10.0/src/lagomTest/groovy/LagomTest.groovy", "diffHunk": "@@ -59,7 +59,7 @@ class LagomTest extends AgentTestRunner {\n     assertTraces(1) {\n       trace(0, 2) {\n         span(0) {\n-          serviceName \"unnamed-java-app\"\n+          hasServiceName()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMjQ3Nw=="}, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDM1Nzk5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/asserts/SpanAssert.groovy", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNTowNlrOG0PmPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowNjoyOFrOG1Vc2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDY4Nw==", "bodyText": "When would this ever not be the case?", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r457434687", "createdAt": "2020-07-20T14:25:06Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/asserts/SpanAssert.groovy", "diffHunk": "@@ -41,6 +41,10 @@ class SpanAssert {\n     }\n   }\n \n+  def hasServiceName() {\n+    assert span.serviceName != null && !span.serviceName.isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2OTg0Mw==", "bodyText": "Probably never, and that's exactly what I'd like to assert. That the service name is never \"empty\".", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r457869843", "createdAt": "2020-07-21T06:39:25Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/asserts/SpanAssert.groovy", "diffHunk": "@@ -41,6 +41,10 @@ class SpanAssert {\n     }\n   }\n \n+  def hasServiceName() {\n+    assert span.serviceName != null && !span.serviceName.isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDY4Nw=="}, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzMTc4OA==", "bodyText": "Can we have that done automatically in SpanAssert instead of relying on this method being called in the test?", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r458131788", "createdAt": "2020-07-21T14:16:50Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/asserts/SpanAssert.groovy", "diffHunk": "@@ -41,6 +41,10 @@ class SpanAssert {\n     }\n   }\n \n+  def hasServiceName() {\n+    assert span.serviceName != null && !span.serviceName.isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDY4Nw=="}, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3OTE2Mw==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r458579163", "createdAt": "2020-07-22T07:06:28Z", "author": {"login": "drodriguezhdez"}, "path": "dd-java-agent/testing/src/main/groovy/datadog/trace/agent/test/asserts/SpanAssert.groovy", "diffHunk": "@@ -41,6 +41,10 @@ class SpanAssert {\n     }\n   }\n \n+  def hasServiceName() {\n+    assert span.serviceName != null && !span.serviceName.isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDY4Nw=="}, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDQwMzQ1OnYy", "diffSide": "RIGHT", "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozMjoxNVrOG0QBXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo0Mjo0MVrOG0qPiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0MTYyOA==", "bodyText": "Could we add a comment to indicate this class should be considered internal, and not depended on directly?  I'd like to avoid adding more classes we have to maintain in the public API.", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r457441628", "createdAt": "2020-07-20T14:32:15Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package datadog.trace.api.env;\n+\n+import datadog.trace.api.config.GeneralConfig;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * The {@code CapturedEnvironment} instance keeps those {@code Config} values which are platform\n+ * dependant.\n+ */\n+@Slf4j\n+public class CapturedEnvironment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTI0MA==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/1680#discussion_r457871240", "createdAt": "2020-07-21T06:42:41Z", "author": {"login": "drodriguezhdez"}, "path": "dd-trace-api/src/main/java/datadog/trace/api/env/CapturedEnvironment.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package datadog.trace.api.env;\n+\n+import datadog.trace.api.config.GeneralConfig;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * The {@code CapturedEnvironment} instance keeps those {@code Config} values which are platform\n+ * dependant.\n+ */\n+@Slf4j\n+public class CapturedEnvironment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0MTYyOA=="}, "originalCommit": {"oid": "6b4e8c047ec4b9301d1906bc7910ebbf15b0bc08"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 136, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}