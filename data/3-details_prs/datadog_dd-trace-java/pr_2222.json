{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMTYxMjM1", "number": 2222, "title": "Extend Tracer to Instrument Quartz", "bodyText": "Adds instrumentation support for Quartz", "createdAt": "2020-12-17T22:05:20Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2222", "merged": true, "mergeCommit": {"oid": "cc11729835ee9f0533619e6bfac94dc0e245ca30"}, "closed": true, "closedAt": "2021-01-26T15:04:23Z", "author": {"login": "ziquanmiao"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdv04uhAH2gAyNTQyMTYxMjM1Ojg1NDM1MWE4NGI1Y2M1NWJmODY0NWFmMmI0NDdhOWE1ZGE5MDUxNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdzxiirgH2gAyNTQyMTYxMjM1OjJkZmJiNzE5ZmJlMTBiOWNkODg5ZWI3MjIyZmY4YjY1YTU2YTBmNjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "854351a84b5cc55bf8645af2b447a9a5da905177", "author": {"user": null}, "url": "https://github.com/DataDog/dd-trace-java/commit/854351a84b5cc55bf8645af2b447a9a5da905177", "committedDate": "2021-01-13T19:28:42Z", "message": "add initial quartz instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4fc5f75702bbbb23371191eb0e162fde780d71", "author": {"user": null}, "url": "https://github.com/DataDog/dd-trace-java/commit/0d4fc5f75702bbbb23371191eb0e162fde780d71", "committedDate": "2021-01-13T19:28:43Z", "message": "remove relics from springscheduler copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5b5265c7ab26a73cb7b30a6f0362602a0d89da0", "author": {"user": null}, "url": "https://github.com/DataDog/dd-trace-java/commit/a5b5265c7ab26a73cb7b30a6f0362602a0d89da0", "committedDate": "2021-01-13T19:28:43Z", "message": "add muzzle reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8965f56ab8f208cfa2eee656864bfcbab18cad43", "author": {"user": null}, "url": "https://github.com/DataDog/dd-trace-java/commit/8965f56ab8f208cfa2eee656864bfcbab18cad43", "committedDate": "2021-01-13T19:28:43Z", "message": "wrap up quartz instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bac432716050a9258621be8a28f5ec7e557c6211", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/bac432716050a9258621be8a28f5ec7e557c6211", "committedDate": "2021-01-13T19:28:43Z", "message": "[APMJAVA-468] added unit tests for Quartz instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5cb624126645c35a2b347854e252ccc473289c", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cb5cb624126645c35a2b347854e252ccc473289c", "committedDate": "2021-01-13T19:28:43Z", "message": "[JAVAAPM-468] Refactored Quartz instrumentation to remove unnecessary tags"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c998bf4ad87027bf08237c4806c917100ec1738", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7c998bf4ad87027bf08237c4806c917100ec1738", "committedDate": "2021-01-13T19:08:22Z", "message": "[JAVAAPM-468] Refactored Quartz instrumentation to remove unnecessary tags"}, "afterCommit": {"oid": "cb5cb624126645c35a2b347854e252ccc473289c", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/cb5cb624126645c35a2b347854e252ccc473289c", "committedDate": "2021-01-13T19:28:43Z", "message": "[JAVAAPM-468] Refactored Quartz instrumentation to remove unnecessary tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347f52e0fea1d7bd9889cc5733c3928cec4a77b1", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/347f52e0fea1d7bd9889cc5733c3928cec4a77b1", "committedDate": "2021-01-13T21:34:56Z", "message": "[JAVAAPM-468] Rollback wrong changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27eff794597a3db9b03763e043dcbbd675b74741", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/27eff794597a3db9b03763e043dcbbd675b74741", "committedDate": "2021-01-13T21:56:14Z", "message": "[JAVAAPM-468] change Quartz to compile only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aadf6cceef0f0980cabd58dc87921cec5a5f3e4", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6aadf6cceef0f0980cabd58dc87921cec5a5f3e4", "committedDate": "2021-01-13T23:31:51Z", "message": "Change Quartz module name to reflect lowest version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6660ae2ae955a754f29e7862a22d312fbb08b8d8", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6660ae2ae955a754f29e7862a22d312fbb08b8d8", "committedDate": "2021-01-14T00:41:17Z", "message": "Fixed codenarc errors in ci"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47c19e86992b6487b83812aa5fc9fb22c4001439", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/47c19e86992b6487b83812aa5fc9fb22c4001439", "committedDate": "2021-01-14T01:44:20Z", "message": "Fixed quartz directory naming, added spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c0403bafb6a75ff92bcb385f78b2a4fe37444c", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c8c0403bafb6a75ff92bcb385f78b2a4fe37444c", "committedDate": "2021-01-14T03:22:13Z", "message": "Remove service name verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457507bb1666402cde1f235340edff0690d018b4", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/457507bb1666402cde1f235340edff0690d018b4", "committedDate": "2021-01-14T03:34:41Z", "message": "removed unnecessary tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587", "committedDate": "2021-01-14T16:11:05Z", "message": "increased test limit for string table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDg4NjA5", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-568488609", "createdAt": "2021-01-14T18:00:59Z", "commit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODowMDo1OVrOITwcTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODowMDo1OVrOITwcTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4NzUzNA==", "bodyText": "If there is already a trace in progress when the job gets scheduled, does it get propagated? (I'm not suggesting it should behave one way or another, but rather wanting to understand the behavior.)", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r557587534", "createdAt": "2021-01-14T18:00:59Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/test/groovy/QuartzTest.groovy", "diffHunk": "@@ -0,0 +1,106 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.asserts.TraceAssert\n+import datadog.trace.bootstrap.instrumentation.api.Tags\n+import org.quartz.CronScheduleBuilder\n+import org.quartz.JobBuilder\n+import org.quartz.JobDetail\n+import org.quartz.Scheduler\n+import org.quartz.Trigger\n+import org.quartz.TriggerBuilder\n+import org.quartz.impl.StdSchedulerFactory\n+import spock.lang.Shared\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME\n+\n+class QuartzTest extends AgentTestRunner {\n+  public static final String JOB_NAME = \"job\"\n+  public static final String GROUP_NAME = \"group\"\n+  public static final String TRIGGER_NAME = \"trigger\"\n+\n+  @Shared\n+  Scheduler scheduler\n+\n+  def \"Test simple trigger scheduling\" () {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+\n+    JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+    jobDetail.getJobDataMap().put(\"latch\", latch)\n+\n+    Trigger trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_NAME, GROUP_NAME).startNow().build()\n+    scheduler.scheduleJob(jobDetail, trigger)\n+\n+    when:\n+    scheduler.start()\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+    assertTraces(1) {\n+      trace(1) {\n+          jobSpan(it, scheduler.getSchedulerName())\n+      }\n+    }\n+\n+    cleanup:\n+    scheduler.shutdown()\n+  }\n+\n+  def \"Test cron trigger scheduling\"() {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+\n+    JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+    jobDetail.getJobDataMap().put(\"latch\", latch)\n+\n+    Trigger cronTrigger = TriggerBuilder.newTrigger()\n+      .withIdentity(TRIGGER_NAME, GROUP_NAME)\n+      .forJob(jobDetail)\n+      .withSchedule(CronScheduleBuilder.cronSchedule(\"* * * ? * *\")).build() // run every second\n+    scheduler.scheduleJob(jobDetail, cronTrigger)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDkwNTEy", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-568490512", "createdAt": "2021-01-14T18:03:31Z", "commit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODowMzozMVrOITwh9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODowMzozMVrOITwh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4ODk4Mw==", "bodyText": "Are there common ways to use quartz that would bypass this mechanism? (For example, is a job still created if quartz is configured via xml.)", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r557588983", "createdAt": "2021-01-14T18:03:31Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.DECORATE;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.JOB_INSTANCE;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.*;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.quartz.JobExecutionContext;\n+\n+@AutoService(Instrumenter.class)\n+public final class QuartzSchedulingInstrumentation extends Instrumenter.Tracing {\n+\n+  public QuartzSchedulingInstrumentation() {\n+    super(\"quartz\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.quartz.Job\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4NDkxMzkw", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-568491390", "createdAt": "2021-01-14T18:04:41Z", "commit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODowNDo0MVrOITwkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxODowNDo0MVrOITwkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4OTY2NA==", "bodyText": "Can this instead be +?", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r557589664", "createdAt": "2021-01-14T18:04:41Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/quartz-2.gradle", "diffHunk": "@@ -0,0 +1,27 @@\n+ext {\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = 'org.quartz-scheduler'\n+    module = 'quartz'\n+    versions = \"[2.0.0,)\"\n+    assertInverse = true\n+  }\n+}\n+\n+apply from: \"$rootDir/gradle/java.gradle\"\n+apply plugin: 'org.unbroken-dome.test-sets'\n+\n+testSets {\n+  latestDepTest {\n+    dirName = 'test'\n+  }\n+}\n+\n+dependencies {\n+  compileOnly group: 'org.quartz-scheduler', name: 'quartz', version: '2.0.0'\n+  testCompile group: 'org.quartz-scheduler', name: 'quartz', version: '2.0.0'\n+  latestDepTestCompile group: 'org.quartz-scheduler', name: 'quartz', version: '2.+'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80864f151c126c27492a7208a3cf0059934fca31", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/80864f151c126c27492a7208a3cf0059934fca31", "committedDate": "2021-01-15T03:33:13Z", "message": "added test for XML config, fixed latestDepTest version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MzU4NTEx", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-569358511", "createdAt": "2021-01-15T15:27:31Z", "commit": {"oid": "80864f151c126c27492a7208a3cf0059934fca31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNToyNzozMlrOIUg3jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNToyNzozMlrOIUg3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM4MDk0Mw==", "bodyText": "If the test runs on a slow machine and takes longer than a few seconds to finish the test, there is risk of producing multiple traces which would cause the test to fail. If possible, configure it to run the first job immediately, but delay the subsequent jobs much longer to reduce that risk.", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r558380943", "createdAt": "2021-01-15T15:27:32Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/test/resources/testConfig.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<job-scheduling-data\n+  xmlns=\"http://www.quartz-scheduler.org/xml/JobSchedulingData\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://www.quartz-scheduler.org/xml/JobSchedulingData\n+        http://www.quartz-scheduler.org/xml/job_scheduling_data_1_8.xsd\"\n+  version=\"1.8\">\n+  <schedule>\n+    <job>\n+      <name>job</name>\n+      <group>group</group>\n+      <job-class>QuartzTestJob</job-class>\n+    </job>\n+    <trigger>\n+      <cron>\n+        <name>trigger</name>\n+        <group>group</group>\n+        <job-name>job</job-name>\n+        <job-group>group</job-group>\n+        <!-- It will run every second -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80864f151c126c27492a7208a3cf0059934fca31"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a840e2488ee5d82b5a4dcd6e8749995daa0a265a", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a840e2488ee5d82b5a4dcd6e8749995daa0a265a", "committedDate": "2021-01-15T18:31:37Z", "message": "added test for propagation, increased time interval between jobs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ba9b493b3942f649c361d7c0487abe79252dd84b", "committedDate": "2021-01-19T17:56:39Z", "message": "add job scheduling to run under trace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMzI2MTQz", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-572326143", "createdAt": "2021-01-20T15:15:07Z", "commit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNToxNTowOFrOIXDTiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNToyNToxNVrOIXD1UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0MjMxMg==", "bodyText": "this can instead be basicSpan(it, \"root\")", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561042312", "createdAt": "2021-01-20T15:15:08Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/test/groovy/QuartzTest.groovy", "diffHunk": "@@ -105,6 +105,38 @@ class QuartzTest extends AgentTestRunner {\n     scheduler.shutdown()\n   }\n \n+  def \"Test creating a new trace when starting a job\"() {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+    scheduler.getContext().put(\"latch\", latch)\n+\n+    when:\n+    runUnderTrace(\"root\") {\n+      JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+      Trigger trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_NAME, GROUP_NAME).startNow().build()\n+      scheduler.scheduleJob(jobDetail, trigger)\n+      scheduler.start()\n+    }\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+    assertTraces(2) {\n+      trace(1) {\n+        span {\n+          resourceName \"root\"\n+          operationName \"root\"\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0MzQxOA==", "bodyText": "What does this new schedule mean? please update the comments (here and elsewhere with the new meaning).", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561043418", "createdAt": "2021-01-20T15:16:16Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/test/resources/testConfig.xml", "diffHunk": "@@ -18,7 +18,7 @@\n         <job-name>job</job-name>\n         <job-group>group</job-group>\n         <!-- It will run every second -->\n-        <cron-expression>* * * ? * *</cron-expression>\n+        <cron-expression>0/5 * * ? * *</cron-expression>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0NzQ1OA==", "bodyText": "@andrewsouthard1 do you have opinions on what the operation name for this should be?  I'm thinking quartz.execute, job.execute, or scheduled.execute might be better.", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561047458", "createdAt": "2021-01-20T15:20:51Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.SchedulerException;\n+\n+@Slf4j\n+public class QuartzDecorator extends BaseDecorator {\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA0ODIzMw==", "bodyText": "Do we need to associate it with a method name too or will it always be just execute?", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561048233", "createdAt": "2021-01-20T15:21:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.SchedulerException;\n+\n+@Slf4j\n+public class QuartzDecorator extends BaseDecorator {\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");\n+  public static final QuartzDecorator DECORATE = new QuartzDecorator();\n+\n+  private QuartzDecorator() {}\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"quartz\"};\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"quartz\";\n+  }\n+\n+  public AgentSpan onExecute(final AgentSpan span, JobExecutionContext context) {\n+    if (context != null) {\n+      span.setTag(DDTags.RESOURCE_NAME, context.getJobInstance().getClass()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTA1MDk2MQ==", "bodyText": "Some of these might not be all that useful.  I would suggest pare it down to the minimum, and comment out the rest and they can be easily added back later if we wish. For example, the scheduler and the execution times are prob not super useful.", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561050961", "createdAt": "2021-01-20T15:25:15Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/test/groovy/QuartzTest.groovy", "diffHunk": "@@ -0,0 +1,159 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.asserts.TraceAssert\n+import datadog.trace.bootstrap.instrumentation.api.Tags\n+import org.quartz.CronScheduleBuilder\n+import org.quartz.JobBuilder\n+import org.quartz.JobDetail\n+import org.quartz.Scheduler\n+import org.quartz.Trigger\n+import org.quartz.TriggerBuilder\n+import org.quartz.impl.StdSchedulerFactory\n+import spock.lang.Shared\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME\n+import static datadog.trace.agent.test.utils.TraceUtils.runUnderTrace\n+\n+class QuartzTest extends AgentTestRunner {\n+  public static final String JOB_NAME = \"job\"\n+  public static final String GROUP_NAME = \"group\"\n+  public static final String TRIGGER_NAME = \"trigger\"\n+\n+  @Shared\n+  Scheduler scheduler\n+\n+  def \"Test simple trigger scheduling\" () {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+    scheduler.getContext().put(\"latch\", latch)\n+\n+    JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+    Trigger trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_NAME, GROUP_NAME).startNow().build()\n+    scheduler.scheduleJob(jobDetail, trigger)\n+\n+    when:\n+    scheduler.start()\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+    assertTraces(1) {\n+      trace(1) {\n+          jobSpan(it, scheduler.getSchedulerName())\n+      }\n+    }\n+\n+    cleanup:\n+    scheduler.shutdown()\n+  }\n+\n+  def \"Test cron trigger scheduling\"() {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+    scheduler.getContext().put(\"latch\", latch)\n+\n+    JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+\n+    Trigger cronTrigger = TriggerBuilder.newTrigger()\n+      .withIdentity(TRIGGER_NAME, GROUP_NAME)\n+      .forJob(jobDetail)\n+      .withSchedule(CronScheduleBuilder.cronSchedule(\"0/5 * * ? * *\")).build() // run every second\n+    scheduler.scheduleJob(jobDetail, cronTrigger)\n+\n+    when:\n+    scheduler.start()\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+    assertTraces(1) {\n+      trace(1) {\n+        jobSpan(it, scheduler.getSchedulerName())\n+      }\n+    }\n+\n+    cleanup:\n+    scheduler.shutdown()\n+  }\n+\n+  def \"Test XML job and trigger configuration\"() {\n+    setup:\n+    scheduler = new StdSchedulerFactory(\"testConfig.properties\").getScheduler()\n+    def latch = new CountDownLatch(1)\n+    scheduler.getContext().put(\"latch\", latch)\n+\n+    when:\n+    scheduler.start()\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+\n+    assertTraces(1) {\n+      trace(1) {\n+        jobSpan(it, scheduler.getSchedulerName())\n+      }\n+    }\n+\n+    cleanup:\n+    scheduler.shutdown()\n+  }\n+\n+  def \"Test creating a new trace when starting a job\"() {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+    scheduler.getContext().put(\"latch\", latch)\n+\n+    when:\n+    runUnderTrace(\"root\") {\n+      JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+      Trigger trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_NAME, GROUP_NAME).startNow().build()\n+      scheduler.scheduleJob(jobDetail, trigger)\n+      scheduler.start()\n+    }\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+    assertTraces(2) {\n+      trace(1) {\n+        span {\n+          resourceName \"root\"\n+          operationName \"root\"\n+        }\n+      }\n+      trace(1) {\n+        jobSpan(it, scheduler.getSchedulerName())\n+      }\n+    }\n+\n+    cleanup:\n+    scheduler.shutdown()\n+  }\n+\n+  void jobSpan(TraceAssert trace, String schedulerName) {\n+    trace.span {\n+      operationName \"job.instance\"\n+      resourceName QuartzTestJob.toString()\n+      errored false\n+\n+      tags {\n+        \"$Tags.COMPONENT\" \"quartz\"\n+        \"$QUARTZ_SCHEDULER\" schedulerName\n+        \"$QUARTZ_TRIGGER_NAME\" TRIGGER_NAME\n+        \"$QUARTZ_TRIGGER_GROUP\" GROUP_NAME\n+        \"$QUARTZ_JOB_NAME\" JOB_NAME\n+        \"$QUARTZ_JOB_GROUP\" GROUP_NAME\n+        \"$QUARTZ_SCHEDULER_FIRED_TIME\" String\n+        \"$QUARTZ_SCHEDULER_ACTUAL_TIME\" String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9b493b3942f649c361d7c0487abe79252dd84b"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/73e07f603a8e3e88c2debf39e366d3e9ae0d5d84", "committedDate": "2021-01-20T18:47:19Z", "message": "Fixed issues regarding PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNTQ1MDQw", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-572545040", "createdAt": "2021-01-20T19:12:25Z", "commit": {"oid": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOToxMjoyNVrOIXNhIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOToxMjoyNVrOIXNhIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIwOTYzNQ==", "bodyText": "Update the field name too please...", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561209635", "createdAt": "2021-01-20T19:12:25Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n @Slf4j\n public class QuartzDecorator extends BaseDecorator {\n-  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"job.instance\");\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNTQ1OTEz", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-572545913", "createdAt": "2021-01-20T19:13:37Z", "commit": {"oid": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOToxMzozN1rOIXNjjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOToxMzozN1rOIXNjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIxMDI1NQ==", "bodyText": "Do you think this will be useful to users?", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561210255", "createdAt": "2021-01-20T19:13:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzDecorator.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP;\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME;\n+\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.BaseDecorator;\n+import lombok.extern.slf4j.Slf4j;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.SchedulerException;\n+\n+@Slf4j\n+public class QuartzDecorator extends BaseDecorator {\n+  public static final CharSequence JOB_INSTANCE = UTF8BytesString.createConstant(\"scheduled.call\");\n+  public static final QuartzDecorator DECORATE = new QuartzDecorator();\n+\n+  private QuartzDecorator() {}\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"quartz\"};\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return null;\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"quartz\";\n+  }\n+\n+  public AgentSpan onExecute(final AgentSpan span, JobExecutionContext context) {\n+    if (context != null) {\n+      span.setTag(DDTags.RESOURCE_NAME, context.getJobInstance().getClass()).toString();\n+      try {\n+        span.setTag(QUARTZ_SCHEDULER, context.getScheduler().getSchedulerName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e07f603a8e3e88c2debf39e366d3e9ae0d5d84"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a519dd07d0761ca50caf9e5c446d511045522219", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a519dd07d0761ca50caf9e5c446d511045522219", "committedDate": "2021-01-20T19:31:36Z", "message": "Fixed PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/dc41aef62c99f47ce201aeb71bf101ded974bd50", "committedDate": "2021-01-21T01:54:19Z", "message": "applied spotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNDU2ODA1", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-573456805", "createdAt": "2021-01-21T15:37:39Z", "commit": {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNDU4MTI5", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-573458129", "createdAt": "2021-01-21T15:38:50Z", "commit": {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNTozODo1MVrOIX8hiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNTozODo1MVrOIX8hiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk3OTc4Nw==", "bodyText": "I'm not sure this comment is accurate.", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561979787", "createdAt": "2021-01-21T15:38:51Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/main/java/datadog/trace/instrumentation/quartz/QuartzSchedulingInstrumentation.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package datadog.trace.instrumentation.quartz;\n+\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.DECORATE;\n+import static datadog.trace.instrumentation.quartz.QuartzDecorator.SCHEDULED_CALL;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.*;\n+import static net.bytebuddy.matcher.ElementMatchers.isPublic;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.quartz.JobExecutionContext;\n+\n+@AutoService(Instrumenter.class)\n+public final class QuartzSchedulingInstrumentation extends Instrumenter.Tracing {\n+\n+  public QuartzSchedulingInstrumentation() {\n+    super(\"quartz\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return implementsInterface(named(\"org.quartz.Job\"));\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod()\n+            .and(isPublic())\n+            .and(named(\"execute\"))\n+            .and(takesArgument(0, named(\"org.quartz.JobExecutionContext\"))),\n+        QuartzSchedulingInstrumentation.class.getName() + \"$QuartzSchedulingAdvice\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {packageName + \".QuartzDecorator\"};\n+  }\n+\n+  public static class QuartzSchedulingAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope enter(@Advice.Argument(0) JobExecutionContext context) {\n+      //      ignore active span", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNDU5NDY4", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-573459468", "createdAt": "2021-01-21T15:40:05Z", "commit": {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNTo0MDowNlrOIX8loA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNTo0MDowNlrOIX8loA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTk4MDgzMg==", "bodyText": "I think these should be removed.", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r561980832", "createdAt": "2021-01-21T15:40:06Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/bootstrap/instrumentation/api/InstrumentationTags.java", "diffHunk": "@@ -69,6 +69,14 @@\n   public static final String EVENT = \"event\";\n   public static final String MESSAGE = \"message\";\n   public static final String HANDLER_TYPE = \"handler.type\";\n+  public static final String QUARTZ_JOB_DETAIL = \"quartz.job.detail\";\n+  public static final String QUARTZ_JOB_NAME = \"quartz.job.name\";\n+  public static final String QUARTZ_JOB_GROUP = \"quartz.job.group\";\n+  public static final String QUARTZ_SCHEDULER_ACTUAL_TIME = \"quartz.time.actualFireTime\";\n+  public static final String QUARTZ_SCHEDULER_FIRED_TIME = \"quartz.time.scheduledFireTime\";\n+  public static final String QUARTZ_SCHEDULER = \"quartz.scheduler\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc41aef62c99f47ce201aeb71bf101ded974bd50"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581422e1986d47ce3bedb99fbfd22b1b8c452d9b", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/581422e1986d47ce3bedb99fbfd22b1b8c452d9b", "committedDate": "2021-01-21T15:46:59Z", "message": "Remove unnecessary comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTUzODUz", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#pullrequestreview-573553853", "createdAt": "2021-01-21T17:13:05Z", "commit": {"oid": "581422e1986d47ce3bedb99fbfd22b1b8c452d9b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzoxMzowNVrOIYBAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzoxMzowNVrOIYBAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA1MzIxNw==", "bodyText": "I don't think it should get propagated.  If it does, you can end up with the job span being part of a trace that started a long time ago.  I would go so far as to say you should ignore the parent explicitly with:\nstartSpan(SCHEDULED_CALL, null)", "url": "https://github.com/DataDog/dd-trace-java/pull/2222#discussion_r562053217", "createdAt": "2021-01-21T17:13:05Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/quartz-2/src/test/groovy/QuartzTest.groovy", "diffHunk": "@@ -0,0 +1,106 @@\n+import datadog.trace.agent.test.AgentTestRunner\n+import datadog.trace.agent.test.asserts.TraceAssert\n+import datadog.trace.bootstrap.instrumentation.api.Tags\n+import org.quartz.CronScheduleBuilder\n+import org.quartz.JobBuilder\n+import org.quartz.JobDetail\n+import org.quartz.Scheduler\n+import org.quartz.Trigger\n+import org.quartz.TriggerBuilder\n+import org.quartz.impl.StdSchedulerFactory\n+import spock.lang.Shared\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_GROUP\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_JOB_NAME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_ACTUAL_TIME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_SCHEDULER_FIRED_TIME\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_GROUP\n+import static datadog.trace.bootstrap.instrumentation.api.InstrumentationTags.QUARTZ_TRIGGER_NAME\n+\n+class QuartzTest extends AgentTestRunner {\n+  public static final String JOB_NAME = \"job\"\n+  public static final String GROUP_NAME = \"group\"\n+  public static final String TRIGGER_NAME = \"trigger\"\n+\n+  @Shared\n+  Scheduler scheduler\n+\n+  def \"Test simple trigger scheduling\" () {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+\n+    JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+    jobDetail.getJobDataMap().put(\"latch\", latch)\n+\n+    Trigger trigger = TriggerBuilder.newTrigger().withIdentity(TRIGGER_NAME, GROUP_NAME).startNow().build()\n+    scheduler.scheduleJob(jobDetail, trigger)\n+\n+    when:\n+    scheduler.start()\n+\n+    then:\n+    latch.await(10L, TimeUnit.SECONDS)\n+    assertTraces(1) {\n+      trace(1) {\n+          jobSpan(it, scheduler.getSchedulerName())\n+      }\n+    }\n+\n+    cleanup:\n+    scheduler.shutdown()\n+  }\n+\n+  def \"Test cron trigger scheduling\"() {\n+    setup:\n+    scheduler = new StdSchedulerFactory().getScheduler()\n+    def latch = new CountDownLatch(1)\n+\n+    JobDetail jobDetail = JobBuilder.newJob(QuartzTestJob).withIdentity(JOB_NAME, GROUP_NAME).build()\n+    jobDetail.getJobDataMap().put(\"latch\", latch)\n+\n+    Trigger cronTrigger = TriggerBuilder.newTrigger()\n+      .withIdentity(TRIGGER_NAME, GROUP_NAME)\n+      .forJob(jobDetail)\n+      .withSchedule(CronScheduleBuilder.cronSchedule(\"* * * ? * *\")).build() // run every second\n+    scheduler.scheduleJob(jobDetail, cronTrigger)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU4NzUzNA=="}, "originalCommit": {"oid": "fe0e707bcc6ffaad697cf2179ab89d9e7c8cb587"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "284d8ca03832e937e86cbd2d0b4faf295a23e3a4", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/284d8ca03832e937e86cbd2d0b4faf295a23e3a4", "committedDate": "2021-01-22T04:46:02Z", "message": "ensure a new trace is created per job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfbb719fbe10b9cd889eb7222ff8b65a56a0f63", "author": {"user": {"login": "kevinfwl", "name": "Kevin Feng"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2dfbb719fbe10b9cd889eb7222ff8b65a56a0f63", "committedDate": "2021-01-26T01:50:27Z", "message": "fixed spotlessapply"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2788, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}