{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzg5NDgx", "number": 2141, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjowODo1NFrOE_OeqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowMTozOFrOE_VpWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzMyOTY4OnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjowODo1NFrOH80UuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo1Mjo0OFrOH82WDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzMzg4MA==", "bodyText": "Feels weird that this formatting would change.", "url": "https://github.com/DataDog/dd-trace-java/pull/2141#discussion_r533533880", "createdAt": "2020-12-01T16:08:54Z", "author": {"login": "bantonsson"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -200,41 +189,20 @@ private void countAndLogFailedSend(\n     this.failedTraces += traceCount;\n     // these are used to catch and log if there is a failure in debug logging the response body\n     String agentError = getResponseBody(response);\n-    if (log.isDebugEnabled()) {\n-      String sendErrorString =\n-          createSendLogMessage(\n-              traceCount, sizeInBytes, agentError.isEmpty() ? \"Error\" : agentError);\n-      if (response != null) {\n-        log.debug(\n-            \"{} Status: {}, Response: {}, Body: {}\",\n-            sendErrorString,\n-            response.code(),\n-            response.message(),\n-            agentError);\n-      } else if (outer != null) {\n-        log.debug(sendErrorString, outer);\n-      } else {\n-        log.debug(sendErrorString);\n-      }\n-      return;\n-    }\n     String sendErrorString =\n-        createSendLogMessage(traceCount, sizeInBytes, agentError.isEmpty() ? \"Error\" : agentError);\n-    boolean hasLogged;\n-    if (response != null) {\n-      hasLogged =\n-          ratelimitedLogger.warn(\n-              \"{} Status: {} {}\", sendErrorString, response.code(), response.message());\n-    } else if (outer != null) {\n-      hasLogged =\n-          ratelimitedLogger.warn(\n-              \"{} {}: {}\", sendErrorString, outer.getClass().getName(), outer.getMessage());\n-    } else {\n-      hasLogged = ratelimitedLogger.warn(sendErrorString);\n-    }\n-    if (hasLogged) {\n-      this.logNextSuccess = true;\n+      createSendLogMessage(\n+        traceCount,\n+        sizeInBytes,\n+        agentError.isEmpty() ? \"Error\" : agentError);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a7c59f3367ec830b70afbf42da8d3f8ee741e4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU2Njk4OA==", "bodyText": "Yeah I seem to have committed a stale version of these files, before spotlessApply \ud83d\ude1e Fixed!", "url": "https://github.com/DataDog/dd-trace-java/pull/2141#discussion_r533566988", "createdAt": "2020-12-01T16:52:48Z", "author": {"login": "AlexJF"}, "path": "dd-trace-core/src/main/java/datadog/trace/common/writer/ddagent/DDAgentApi.java", "diffHunk": "@@ -200,41 +189,20 @@ private void countAndLogFailedSend(\n     this.failedTraces += traceCount;\n     // these are used to catch and log if there is a failure in debug logging the response body\n     String agentError = getResponseBody(response);\n-    if (log.isDebugEnabled()) {\n-      String sendErrorString =\n-          createSendLogMessage(\n-              traceCount, sizeInBytes, agentError.isEmpty() ? \"Error\" : agentError);\n-      if (response != null) {\n-        log.debug(\n-            \"{} Status: {}, Response: {}, Body: {}\",\n-            sendErrorString,\n-            response.code(),\n-            response.message(),\n-            agentError);\n-      } else if (outer != null) {\n-        log.debug(sendErrorString, outer);\n-      } else {\n-        log.debug(sendErrorString);\n-      }\n-      return;\n-    }\n     String sendErrorString =\n-        createSendLogMessage(traceCount, sizeInBytes, agentError.isEmpty() ? \"Error\" : agentError);\n-    boolean hasLogged;\n-    if (response != null) {\n-      hasLogged =\n-          ratelimitedLogger.warn(\n-              \"{} Status: {} {}\", sendErrorString, response.code(), response.message());\n-    } else if (outer != null) {\n-      hasLogged =\n-          ratelimitedLogger.warn(\n-              \"{} {}: {}\", sendErrorString, outer.getClass().getName(), outer.getMessage());\n-    } else {\n-      hasLogged = ratelimitedLogger.warn(sendErrorString);\n-    }\n-    if (hasLogged) {\n-      this.logNextSuccess = true;\n+      createSendLogMessage(\n+        traceCount,\n+        sizeInBytes,\n+        agentError.isEmpty() ? \"Error\" : agentError);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzMzg4MA=="}, "originalCommit": {"oid": "69a7c59f3367ec830b70afbf42da8d3f8ee741e4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODUwMzk1OnYy", "diffSide": "RIGHT", "path": "internal-api/src/main/java/datadog/trace/api/UploadLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowMTozOFrOH8_nUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowMTozOFrOH8_nUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxODg2Ng==", "bodyText": "Perhaps IOLogger instead?  We don't really deem writing traces to the agent as \"uploading\".", "url": "https://github.com/DataDog/dd-trace-java/pull/2141#discussion_r533718866", "createdAt": "2020-12-01T21:01:38Z", "author": {"login": "tylerbenson"}, "path": "internal-api/src/main/java/datadog/trace/api/UploadLogger.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package datadog.trace.api;\n+\n+import java.util.concurrent.TimeUnit;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.ToString;\n+import org.slf4j.Logger;\n+\n+/** Logger specialized on logging upload-related activity */\n+public class UploadLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0a8829acaa21a3aa35e503d7e10575331346f9f"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4644, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}