{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjMyOTU0", "number": 2007, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo0Njo1M1rOEvemgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoyOTowMlrOEvz0Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjE5OTA1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo0Njo1M1rOHkfDSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxOTo1MDoxMVrOHkfJ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAxOTUyOA==", "bodyText": "Are the fields accessed directly or are there generated accessor methods added?", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508019528", "createdAt": "2020-10-19T19:46:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "diffHunk": "@@ -123,7 +123,7 @@ public void visitEnd() {\n         if (!foundField) {\n           cv.visitField(\n               // Field should be transient to avoid being serialized with the object.\n-              Opcodes.ACC_PRIVATE | Opcodes.ACC_TRANSIENT,\n+              Opcodes.ACC_PROTECTED | Opcodes.ACC_TRANSIENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32bb658d71cc3c68ea15878c24a313ce2bbd5336"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMTI0Mw==", "bodyText": "public accessors are generated so this shouldn't be necessary", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508021243", "createdAt": "2020-10-19T19:50:11Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "diffHunk": "@@ -123,7 +123,7 @@ public void visitEnd() {\n         if (!foundField) {\n           cv.visitField(\n               // Field should be transient to avoid being serialized with the object.\n-              Opcodes.ACC_PRIVATE | Opcodes.ACC_TRANSIENT,\n+              Opcodes.ACC_PROTECTED | Opcodes.ACC_TRANSIENT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAxOTUyOA=="}, "originalCommit": {"oid": "32bb658d71cc3c68ea15878c24a313ce2bbd5336"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjcxMjAxOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyNjozN1rOHkj3tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjo1MTo0OVrOHktGzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5ODQ4NQ==", "bodyText": "It's a bit difficult for me to understand how this method is able to identify the correct classes to instrument. Perhaps a comment would help?", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508098485", "createdAt": "2020-10-19T22:26:37Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -76,6 +103,32 @@ public boolean matches(\n             valueType);\n       }\n     }\n-    return result;\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f0783f63ae169a1cd089d9a26cfeb12cd25bbe"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0OTgwNw==", "bodyText": "I don't think the logic is particularly complicated", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508249807", "createdAt": "2020-10-20T06:51:49Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -76,6 +103,32 @@ public boolean matches(\n             valueType);\n       }\n     }\n-    return result;\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5ODQ4NQ=="}, "originalCommit": {"oid": "30f0783f63ae169a1cd089d9a26cfeb12cd25bbe"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDM1MjMwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOToyNTo1NFrOHkzFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTozNDowMlrOHkza1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0Nzc1Ng==", "bodyText": "I'm not sure we can short-circuit the search here if you want to get the closest class to Object that implements the key interface. If ByteBuddy's getInterfaces method behaves like reflection then it will only tell you what the class declared as its interfaces at that level, and not all the interfaces it implements.\nFor example:\nclass A implements Runnable {\n  public void run() {}\n}\n\nclass B extends A {}\n\nclass C extends B {}\n\nclass D extends C {}\n\nWith the above code we'd field-inject D, C, and A.\nThere are also cases where sub-classes re-declare the interfaces they implement:\nclass A implements Runnable {\n  public void run() {}\n}\n\nclass B extends A {}\n\nclass C extends B {}\n\nclass D extends C implements Runnable {}\n\nNot to mention cases where an interface extends another interface:\ninterface R extends Runnable {}\n\nclass A implements R {\n  public void run() {}\n}\n\nclass B extends A {}\n\nclass C extends B {}\n\nclass D extends C implements Runnable {}\n\nSince this is an optimization then we don't need to do an exhaustive search - but I think it's worth checking against a few frameworks to see if we miss any chances to skip field injection.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508347756", "createdAt": "2020-10-20T09:25:54Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      boolean implementsInterface = false;\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {\n+        String interfaceName = iface.asRawType().getTypeName();\n+        if (keyType.equals(interfaceName)) {\n+          // then the key type must be an interface\n+          if (null == keyTypeIsClass) {\n+            KEY_TYPE_IS_CLASS.put(keyType, false);\n+            keyTypeIsClass = false;\n+          }\n+          implementingClass = superClassName;\n+          implementsInterface = true;\n+          break;\n+        }\n+      }\n+      if (!implementsInterface) {\n+        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e27cda53b9cd015d6960f21d7654becc22dbea"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MzIzNg==", "bodyText": "Yes, you're right (the first paragraph was clear enough but thanks for the example) - I added a test for this and removed the short circuit.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508353236", "createdAt": "2020-10-20T09:34:02Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      boolean implementsInterface = false;\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {\n+        String interfaceName = iface.asRawType().getTypeName();\n+        if (keyType.equals(interfaceName)) {\n+          // then the key type must be an interface\n+          if (null == keyTypeIsClass) {\n+            KEY_TYPE_IS_CLASS.put(keyType, false);\n+            keyTypeIsClass = false;\n+          }\n+          implementingClass = superClassName;\n+          implementsInterface = true;\n+          break;\n+        }\n+      }\n+      if (!implementsInterface) {\n+        break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0Nzc1Ng=="}, "originalCommit": {"oid": "72e27cda53b9cd015d6960f21d7654becc22dbea"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDUyMjQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDowNjo1MVrOHk0vDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxNDozMFrOHk7xGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDc5Nw==", "bodyText": "We'll still miss a chance to optimize if the class hierarchy implements an interface that extends the key type and doesn't implement the key type directly (since this only checks directly declared interfaces, and not the interfaces they extend) but I think that's OK as widening the search to include transitive interfaces could be expensive.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508374797", "createdAt": "2020-10-20T10:06:51Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3ODg3OQ==", "bodyText": "You're right, but this should work for all the types we're interested in injecting (we need to stop doing this for Runnable for other reasons). This kind of matching is done repetitively, and I think the structure of the types we care about, at least for the purpose of field injection, could be memoized cheaply so we don't need to do so many traversals. The result is also correct no matter what, it's just a missed optimisation opportunity (both in space and transformation time).", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508378879", "createdAt": "2020-10-20T10:13:18Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDc5Nw=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5ODYxNA==", "bodyText": "Having said that, I would be amazed if traversing the hierarchy when we already know there's a subtype relationship outweighs the cost of unnecessary transformation, or the long term cost of carrying extra fields around.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508398614", "createdAt": "2020-10-20T10:46:01Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDc5Nw=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMDg4MA==", "bodyText": "true - if you do extend the search to cover transitive interfaces then you might want to consider a local cache to track which interfaces you've seen", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508400880", "createdAt": "2020-10-20T10:49:31Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDc5Nw=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ5MDAxMA==", "bodyText": "For more context to anyone else reviewing, the single case that I considered making this for is ForkJoinTask. Whether you're using the streams API or RecursiveAction etc.  the API depends on being able fork lots of tiny objects but there are often at least two levels of class inheritance. This won't make much difference to wide interface inheritance hierarchies.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508490010", "createdAt": "2020-10-20T13:14:30Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDc5Nw=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDc2ODg3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToxMTowMFrOHk3Fmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoxMzoxNlrOHk5PBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMzMzOA==", "bodyText": "I think that the javadoc is very clear:\n\nReturns the interfaces directly implemented by the class or interface represented by this object.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508413338", "createdAt": "2020-10-20T11:11:00Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzODQyMA==", "bodyText": "This is an existing comment", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508438420", "createdAt": "2020-10-20T11:55:45Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMzMzOA=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0NDMzOA==", "bodyText": "It's still broken...", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508444338", "createdAt": "2020-10-20T12:06:17Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMzMzOA=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0ODUxOA==", "bodyText": "Yes, I agree. There are also a few missing articles which certainly justifies a cleanup.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508448518", "createdAt": "2020-10-20T12:13:16Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQxMzMzOA=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgyMDE4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNTowMVrOHk3kdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjowNjo0NVrOHk4_pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMTIzNg==", "bodyText": "Do we think that it's common to have a sub-class that is re-implementing and interface? This looks like it will try super-classes even though it found a direct implementation of an interface in the current class.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508421236", "createdAt": "2020-10-20T11:25:01Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {\n+        String interfaceName = iface.asRawType().getTypeName();\n+        if (keyType.equals(interfaceName)) {\n+          // then the key type must be an interface\n+          if (null == keyTypeIsClass) {\n+            KEY_TYPE_IS_CLASS.put(keyType, false);\n+            keyTypeIsClass = false;\n+          }\n+          implementingClass = superClassName;\n+          break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzOTUzOQ==", "bodyText": "It's looking for the class closest to java.lang.Object to inject the field in to, so it will go up the hierarchy, but remember that this class implements the interface.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508439539", "createdAt": "2020-10-20T11:57:48Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {\n+        String interfaceName = iface.asRawType().getTypeName();\n+        if (keyType.equals(interfaceName)) {\n+          // then the key type must be an interface\n+          if (null == keyTypeIsClass) {\n+            KEY_TYPE_IS_CLASS.put(keyType, false);\n+            keyTypeIsClass = false;\n+          }\n+          implementingClass = superClassName;\n+          break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMTIzNg=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0NDU4Mg==", "bodyText": "Yes, I can see now that you discussed this with @mcculls and it's fine if we assume that it's common enough.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508444582", "createdAt": "2020-10-20T12:06:45Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();\n+      if (null == keyTypeIsClass && keyType.equals(superClassName)) {\n+        // short circuit the search with this key type next time\n+        KEY_TYPE_IS_CLASS.put(keyType, true);\n+        return keyType;\n+      }\n+      for (TypeDescription.Generic iface : superClass.getInterfaces()) {\n+        String interfaceName = iface.asRawType().getTypeName();\n+        if (keyType.equals(interfaceName)) {\n+          // then the key type must be an interface\n+          if (null == keyTypeIsClass) {\n+            KEY_TYPE_IS_CLASS.put(keyType, false);\n+            keyTypeIsClass = false;\n+          }\n+          implementingClass = superClassName;\n+          break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMTIzNg=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDgzMDM1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMToyNzo0N1rOHk3qoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjowNzoxNlrOHk5A6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjgxNw==", "bodyText": "It feels like we are missing to check the typeDescription for interface implementations. This code jumps straight to the superClass.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508422817", "createdAt": "2020-10-20T11:27:47Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQzODc1OA==", "bodyText": "This is discussed above.\nWe already know there is a sub type relationship, so if there is no super class or no super class is found to inject the field in to, we end up injecting into this class (we return implementingClass which was initialised to the type description's name, without overwriting it.)", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508438758", "createdAt": "2020-10-20T11:56:20Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjgxNw=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ0NDkwNQ==", "bodyText": "Ah yes, the other matcher before this one.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508444905", "createdAt": "2020-10-20T12:07:16Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);\n+    if (null != keyTypeIsClass && keyTypeIsClass) {\n+      // if we already know the key type is a class,\n+      // we must inject into that class.\n+      return keyType;\n+    }\n+    // then we don't know it's a class so need to\n+    // follow the type's ancestry to find out\n+    TypeDescription.Generic superClass = typeDescription.getSuperClass();\n+    String implementingClass = typeDescription.getName();\n+    while (null != superClass) {\n+      String superClassName = superClass.asRawType().getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyMjgxNw=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTY3NTAzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoyOTowMlrOHk_6Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo0MzowNVrOHlApbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1Nzg5NQ==", "bodyText": "Very slim edge case that is probably not worth considering:  It is possible for this result to be different on different classloaders within a single jvm.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508557895", "createdAt": "2020-10-20T14:29:02Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2OTk2Nw==", "bodyText": "I'm fairly sure there would be a ClassCastException in any instrumentation using a context store if your edge case existed in practice.", "url": "https://github.com/DataDog/dd-trace-java/pull/2007#discussion_r508569967", "createdAt": "2020-10-20T14:43:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ShouldInjectFieldsMatcher.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import datadog.trace.bootstrap.FieldBackedContextStoreAppliedMarker;\n+import datadog.trace.bootstrap.instrumentation.java.concurrent.ExcludeFilter;\n+import java.security.ProtectionDomain;\n+import java.util.Arrays;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.utility.JavaModule;\n+\n+@Slf4j\n+final class ShouldInjectFieldsMatcher implements AgentBuilder.RawMatcher {\n+\n+  // this map will contain as many entries as there are unique\n+  // context store keys, so can't get very big\n+  private static final ConcurrentHashMap<String, Boolean> KEY_TYPE_IS_CLASS =\n+      new ConcurrentHashMap<>();\n+\n+  public static AgentBuilder.RawMatcher of(String keyType, String valueType) {\n+    return new ShouldInjectFieldsMatcher(keyType, valueType);\n+  }\n+\n+  private final String keyType;\n+  private final String valueType;\n+  private final ExcludeFilter.ExcludeType skipType;\n+\n+  private ShouldInjectFieldsMatcher(String keyType, String valueType) {\n+    this.keyType = keyType;\n+    this.valueType = valueType;\n+    this.skipType = ExcludeFilter.ExcludeType.fromFieldType(keyType);\n+  }\n+\n+  @Override\n+  public boolean matches(\n+      final TypeDescription typeDescription,\n+      final ClassLoader classLoader,\n+      final JavaModule module,\n+      final Class<?> classBeingRedefined,\n+      final ProtectionDomain protectionDomain) {\n+\n+    // First check if we should skip injecting the field based on the key type\n+    if (skipType != null && ExcludeFilter.exclude(skipType, typeDescription.getName())) {\n+      if (log.isDebugEnabled()) {\n+        log.debug(\n+            \"Skipping context-store field for {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+      return false;\n+    }\n+    /*\n+     * The idea here is that we can add fields if class is just being loaded\n+     * (classBeingRedefined == null) and we have to add same fields again if class we added\n+     * fields before is being transformed again. Note: here we assume that Class#getInterfaces()\n+     * returns list of interfaces defined immediately on a given class, not inherited from its\n+     * parents. It looks like current JVM implementation does exactly this but javadoc is not\n+     * explicit about that.\n+     */\n+    boolean shouldInject =\n+        classBeingRedefined == null\n+            || Arrays.asList(classBeingRedefined.getInterfaces())\n+                .contains(FieldBackedContextStoreAppliedMarker.class);\n+    String injectionTarget = null;\n+    if (shouldInject) {\n+      // will always inject the key type if it's a class,\n+      // if this isn't the key class, we need to find the\n+      // last super class that implements the key type,\n+      // if it is an interface. This could be streamlined\n+      // slightly if we knew whether the key type were an\n+      // interface or a class, but can be figured out as\n+      // we go along\n+      if (!keyType.equals(typeDescription.getName())) {\n+        injectionTarget = getInjectionTarget(typeDescription);\n+        shouldInject &= typeDescription.getName().equals(injectionTarget);\n+      }\n+    }\n+    if (log.isDebugEnabled()) {\n+      if (shouldInject) {\n+        // Only log success the first time we add it to the class\n+        if (classBeingRedefined == null) {\n+          log.debug(\n+              \"Added context-store field to {}: {} -> {}\",\n+              typeDescription.getName(),\n+              keyType,\n+              valueType);\n+        }\n+      } else if (null != injectionTarget) {\n+        log.debug(\n+            \"Will not add context-store field to {}: {} -> {}, because it will be added to {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType,\n+            injectionTarget);\n+      } else {\n+        // This will log for every failed redefine\n+        log.debug(\n+            \"Failed to add context-store field to {}: {} -> {}\",\n+            typeDescription.getName(),\n+            keyType,\n+            valueType);\n+      }\n+    }\n+    return shouldInject;\n+  }\n+\n+  private String getInjectionTarget(TypeDescription typeDescription) {\n+    // precondition: typeDescription must be a sub type of the key class\n+    // verifying this isn't free so the caller (in the same package) is trusted\n+\n+    // The flag takes 3 values:\n+    // true: the key type is a class, so should be the injection target\n+    // false: the key type is an interface, so we need to find the class\n+    // closes to java.lang.Object which implements the key type\n+    // null: we don't know yet because we haven't seen the key type before\n+    Boolean keyTypeIsClass = KEY_TYPE_IS_CLASS.get(keyType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU1Nzg5NQ=="}, "originalCommit": {"oid": "99dac885e302dd53dc8fdc14db3a396656ead9a2"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4730, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}