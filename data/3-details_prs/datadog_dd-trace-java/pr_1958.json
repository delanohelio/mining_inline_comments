{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTk1OTI1", "number": 1958, "title": "Delay starting JMXFetch when there's a custom JMX builder", "bodyText": "This takes a similar approach to how we deal with custom log managers, however unlike the logging case there is no clear activating class with a static initialization block. Instead we wait for the MBeanServerBuilder class to be loaded and use that as an indication that we can go ahead and access JMX.\nThis is acceptable because MBeanServerBuilder is the base class for all custom JMX builders and is only used in MBeanServerFactory which creates the custom builder instance. Note JMX doesn't let you supply an actual builder instance - it only lets you specify the class name which MBeanServerFactory attempts to load, first by the current thread's context classloader, then falling back to Class.forName.\nThe place where MBeanServerBuilder is loaded should be where MBeanServerFactory is looking up the custom builder, unless the application is using MBeanServerBuilder itself before starting JMX. But that would be unusual because its only use is to create MBean servers and delegates for JMX. Even in that case though we should be OK because at the time the application loads MBeanServerBuilder the current thread's context classloader should be able to see the custom JMX builder. And since the classload hook thread inherits that context classloader then it too should be able to see that custom JMX builder. Therefore it doesn't matter if the classload hook or the application win the race to start JMX. Either one should be able to see the custom builder class at that point. (We just need to make sure we make a call to JMX before we change the classload hook thread's context classloader when starting JMXFetch.)\nThe only other classes loaded after MBeanServerBuilder would be the internal JMX classes, whose names could vary between JDKs. Alternatively we could wait for the custom JMX builder class, but there's a chance that the initial value is overridden later on and the initially named class is never loaded.", "createdAt": "2020-10-07T11:58:25Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1958", "merged": true, "mergeCommit": {"oid": "ca17f11b03b20f76754717cc472bc396ac29927f"}, "closed": true, "closedAt": "2020-10-12T13:27:19Z", "author": {"login": "mcculls"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQNuYZgFqTUwMzkzMTg0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRzhE1AFqTUwNjU5MzM4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzOTMxODQw", "url": "https://github.com/DataDog/dd-trace-java/pull/1958#pullrequestreview-503931840", "createdAt": "2020-10-07T14:19:27Z", "commit": {"oid": "7a17c064bfa69ee55479574fff9406ca733e03a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxOToyN1rOHd1waQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxOToyN1rOHd1waQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1MTQ5Nw==", "bodyText": "Is this late enough?  By the time this class is loaded, are you sure the custom server is defined?  Since this is the builder class, it seems when this is loaded the custom server is being initialized, but not fully defined.\nWith log manager we picked the activating class that ensured a correct state (where the static field with the log manager is initialized).", "url": "https://github.com/DataDog/dd-trace-java/pull/1958#discussion_r501051497", "createdAt": "2020-10-07T14:19:27Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -114,6 +123,18 @@ private static void registerLogManagerCallback(final ClassLoadCallBack callback)\n     }\n   }\n \n+  private static void registerMBeanServerBuilderCallback(final ClassLoadCallBack callback) {\n+    try {\n+      final Class<?> agentInstallerClass =\n+          AGENT_CLASSLOADER.loadClass(\"datadog.trace.agent.tooling.AgentInstaller\");\n+      final Method registerCallbackMethod =\n+          agentInstallerClass.getMethod(\"registerClassLoadCallback\", String.class, Runnable.class);\n+      registerCallbackMethod.invoke(null, \"javax.management.MBeanServerBuilder\", callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a17c064bfa69ee55479574fff9406ca733e03a2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e07b3d42b6b2ee8fcce8b39ac20a4ee606f9592", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1e07b3d42b6b2ee8fcce8b39ac20a4ee606f9592", "committedDate": "2020-10-09T11:10:47Z", "message": "Delay starting JMXFetch when there's a custom JMX builder that's not on the system classpath (ie. it will be provisioned later)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42ea301689d1a32b05535aa0e15bf5b5bf9c52d5", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/42ea301689d1a32b05535aa0e15bf5b5bf9c52d5", "committedDate": "2020-10-09T11:10:47Z", "message": "Make sure we load core JMX using the deferred callback's inherited thread-context-classloader (TCCL)\n\nThis handles a situation where the app thread triggering JMX has a special thread-context-classloader\nset that can see the custom JMX builder class. The callback thread inherits this TCCL so we just need\nto make sure to load core JMX using this before starting JMXFetch (which needs a different TCCL set.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f919ffd130c9af489a834b0741cb3bd5020861ef", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f919ffd130c9af489a834b0741cb3bd5020861ef", "committedDate": "2020-10-09T11:10:47Z", "message": "Run test with profiling on"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8675809706d52cbc33351709f17fe7958388ce7", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/e8675809706d52cbc33351709f17fe7958388ce7", "committedDate": "2020-10-07T17:16:58Z", "message": "Make sure we load core JMX using the deferred callback's inherited thread-context-classloader (TCCL)\n\nThis handles a situation where the app thread triggering JMX has a special thread-context-classloader\nset that can see the custom JMX builder class. The callback thread inherits this TCCL so we just need\nto make sure to load core JMX using this before starting JMXFetch (which needs a different TCCL set.)"}, "afterCommit": {"oid": "f919ffd130c9af489a834b0741cb3bd5020861ef", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f919ffd130c9af489a834b0741cb3bd5020861ef", "committedDate": "2020-10-09T11:10:47Z", "message": "Run test with profiling on"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MzgyOTg5", "url": "https://github.com/DataDog/dd-trace-java/pull/1958#pullrequestreview-506382989", "createdAt": "2020-10-12T08:04:28Z", "commit": {"oid": "f919ffd130c9af489a834b0741cb3bd5020861ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTkzMzg2", "url": "https://github.com/DataDog/dd-trace-java/pull/1958#pullrequestreview-506593386", "createdAt": "2020-10-12T12:55:14Z", "commit": {"oid": "f919ffd130c9af489a834b0741cb3bd5020861ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2936, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}