{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTI1OTEx", "number": 2053, "title": "rxJava 2 instrumentation", "bodyText": "This instrumentation takes roughly the same approach as the latest reactor instrumentation:\n\nactive parent spans are captured when observables are created\ncaptured parent spans are activated when the observable sends events to observers\nno spans are created for the observables themselves\n\nThe general idea is to propagate context so that spans resulting from reactive work created under an active span use that span as their parent, even if the reactive work is triggered later on in the application.\nIn the future it would be nice to store some kind of continuation structure in the context store rather than the parent span. I did look into using State/ConcurrentState but ran into activation issues when an observable sends multiple events or has multiple observers - so I'd prefer to get this initial approach merged first (with tests) and then iterate on it.", "createdAt": "2020-11-05T15:02:49Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2053", "merged": true, "mergeCommit": {"oid": "4e4023eb4d020879d1effdfa2b73877cedd16452"}, "closed": true, "closedAt": "2020-11-16T09:19:46Z", "author": {"login": "mcculls"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ6DN6gFqTUyNTMzNTYwNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcJq_WgFqTUzMDIwMzY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzM1NjA1", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#pullrequestreview-525335605", "createdAt": "2020-11-06T17:03:21Z", "commit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMzoyMVrOHu2KMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowMzoyMVrOHu2KMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4Mzg5MQ==", "bodyText": "I'm not sure about this pattern. Especially given that the spans are being null checked anyway elsewhere, I think it's better to ensure that we always use the same span type.", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#discussion_r518883891", "createdAt": "2020-11-06T17:03:21Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/rxjava-2/src/main/java/datadog/trace/instrumentation/rxjava2/FlowableInstrumentation.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package datadog.trace.instrumentation.rxjava2;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.reactivex.Flowable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.reactivestreams.Subscriber;\n+\n+@AutoService(Instrumenter.class)\n+public final class FlowableInstrumentation extends Instrumenter.Default {\n+  public FlowableInstrumentation() {\n+    super(\"rxjava\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.reactivex.Flowable\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingSubscriber\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"io.reactivex.Flowable\", AgentSpan.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(isConstructor(), packageName + \".FlowableInstrumentation$FlowableAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"subscribe\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.reactivestreams.Subscriber\"))),\n+        packageName + \".FlowableInstrumentation$SubscribeAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class FlowableAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onConstruct(@Advice.This final Flowable<?> thiz) {\n+      AgentSpan span = AgentTracer.activeSpan();\n+      if (span == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzM2NTQ1", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#pullrequestreview-525336545", "createdAt": "2020-11-06T17:04:38Z", "commit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNDozOFrOHu2M1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNDozOFrOHu2M1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NDU2Nw==", "bodyText": "e.g. this really be an instanceof NoopSpan check, but I think it's much better to do a null check and use just one span type.", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#discussion_r518884567", "createdAt": "2020-11-06T17:04:38Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/rxjava-2/src/main/java/datadog/trace/instrumentation/rxjava2/FlowableInstrumentation.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package datadog.trace.instrumentation.rxjava2;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.reactivex.Flowable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.reactivestreams.Subscriber;\n+\n+@AutoService(Instrumenter.class)\n+public final class FlowableInstrumentation extends Instrumenter.Default {\n+  public FlowableInstrumentation() {\n+    super(\"rxjava\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.reactivex.Flowable\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingSubscriber\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"io.reactivex.Flowable\", AgentSpan.class.getName());\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    final Map<ElementMatcher<? super MethodDescription>, String> transformers = new HashMap<>();\n+    transformers.put(isConstructor(), packageName + \".FlowableInstrumentation$FlowableAdvice\");\n+    transformers.put(\n+        isMethod()\n+            .and(named(\"subscribe\"))\n+            .and(takesArguments(1))\n+            .and(takesArgument(0, named(\"org.reactivestreams.Subscriber\"))),\n+        packageName + \".FlowableInstrumentation$SubscribeAdvice\");\n+    return transformers;\n+  }\n+\n+  public static class FlowableAdvice {\n+    @Advice.OnMethodExit(suppress = Throwable.class)\n+    public static void onConstruct(@Advice.This final Flowable<?> thiz) {\n+      AgentSpan span = AgentTracer.activeSpan();\n+      if (span == null) {\n+        span = AgentTracer.noopSpan();\n+      }\n+      InstrumentationContext.get(Flowable.class, AgentSpan.class).put(thiz, span);\n+    }\n+  }\n+\n+  public static class SubscribeAdvice {\n+    @Advice.OnMethodEnter(suppress = Throwable.class)\n+    public static AgentScope openScope(\n+        @Advice.This final Flowable<?> thiz,\n+        @Advice.Argument(value = 0, readOnly = false) Subscriber<?> observer) {\n+      if (observer != null) {\n+        AgentSpan span = InstrumentationContext.get(Flowable.class, AgentSpan.class).get(thiz);\n+        if (span != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzM3MzA2", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#pullrequestreview-525337306", "createdAt": "2020-11-06T17:05:37Z", "commit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNTozN1rOHu2PAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzowNTozN1rOHu2PAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4NTEyMg==", "bodyText": "Rather than injecting the span, I would prefer for this to be State or ConcurrentState holding a Continuation, which at the very least makes it possible to write deterministic tests", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#discussion_r518885122", "createdAt": "2020-11-06T17:05:37Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/rxjava-2/src/main/java/datadog/trace/instrumentation/rxjava2/FlowableInstrumentation.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package datadog.trace.instrumentation.rxjava2;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import datadog.trace.bootstrap.InstrumentationContext;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.AgentTracer;\n+import io.reactivex.Flowable;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.reactivestreams.Subscriber;\n+\n+@AutoService(Instrumenter.class)\n+public final class FlowableInstrumentation extends Instrumenter.Default {\n+  public FlowableInstrumentation() {\n+    super(\"rxjava\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"io.reactivex.Flowable\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".TracingSubscriber\",\n+    };\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\"io.reactivex.Flowable\", AgentSpan.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/ec6566d2e45ac0c7c12b4e2c764acfc01b2df4b2", "committedDate": "2020-11-05T15:34:12Z", "message": "cleanup project"}, "afterCommit": {"oid": "7b23907e9844ee467061dc75a69464406629fa8c", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7b23907e9844ee467061dc75a69464406629fa8c", "committedDate": "2020-11-12T14:38:11Z", "message": "Remove use of noopSpan"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9cfaa69eb5b4e0bb349a7d60260f05e4a390e27", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d9cfaa69eb5b4e0bb349a7d60260f05e4a390e27", "committedDate": "2020-11-12T17:58:45Z", "message": "Move boilerplate to utility class"}, "afterCommit": {"oid": "099a571bb27d92f2376d0ae3d125f1583f3adcb2", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/099a571bb27d92f2376d0ae3d125f1583f3adcb2", "committedDate": "2020-11-12T20:03:10Z", "message": "Instrumentation cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45895be044cc65846e3edd2e822d2c323b38610b", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/45895be044cc65846e3edd2e822d2c323b38610b", "committedDate": "2020-11-13T12:33:45Z", "message": "rxJava propagation spike"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2851ab3d55f068813d788ddf48dd521ed3c54814", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/2851ab3d55f068813d788ddf48dd521ed3c54814", "committedDate": "2020-11-13T12:33:45Z", "message": "Remove use of noopSpan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b705f6ddf2da5dee2c5624090e4d06bbf9734d07", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b705f6ddf2da5dee2c5624090e4d06bbf9734d07", "committedDate": "2020-11-13T12:33:45Z", "message": "Cleanup wrappers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "083c5bd909f2fbe61be8317ab9014b82c04d14aa", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/083c5bd909f2fbe61be8317ab9014b82c04d14aa", "committedDate": "2020-11-13T12:33:45Z", "message": "Instrumentation cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9d2417fb6ed9d0e26d95044d47700d0a075dd2e", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a9d2417fb6ed9d0e26d95044d47700d0a075dd2e", "committedDate": "2020-11-13T12:33:45Z", "message": "Documentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "099a571bb27d92f2376d0ae3d125f1583f3adcb2", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/099a571bb27d92f2376d0ae3d125f1583f3adcb2", "committedDate": "2020-11-12T20:03:10Z", "message": "Instrumentation cleanup"}, "afterCommit": {"oid": "b926501047396aa8b0f4ed99de8d8715fc7d3d09", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b926501047396aa8b0f4ed99de8d8715fc7d3d09", "committedDate": "2020-11-13T12:33:46Z", "message": "m"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1866354cf3c681052f302a3b5df3ea630798c773", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1866354cf3c681052f302a3b5df3ea630798c773", "committedDate": "2020-11-13T12:43:10Z", "message": "RxJava2 tests (based on reactor tests)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b926501047396aa8b0f4ed99de8d8715fc7d3d09", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/b926501047396aa8b0f4ed99de8d8715fc7d3d09", "committedDate": "2020-11-13T12:33:46Z", "message": "m"}, "afterCommit": {"oid": "1866354cf3c681052f302a3b5df3ea630798c773", "author": {"user": {"login": "mcculls", "name": "Stuart McCulloch"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1866354cf3c681052f302a3b5df3ea630798c773", "committedDate": "2020-11-13T12:43:10Z", "message": "RxJava2 tests (based on reactor tests)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTI0ODY1", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#pullrequestreview-530124865", "createdAt": "2020-11-13T14:51:03Z", "commit": {"oid": "1866354cf3c681052f302a3b5df3ea630798c773"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTQyNzMz", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#pullrequestreview-530142733", "createdAt": "2020-11-13T15:11:14Z", "commit": {"oid": "1866354cf3c681052f302a3b5df3ea630798c773"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjAzNjY0", "url": "https://github.com/DataDog/dd-trace-java/pull/2053#pullrequestreview-530203664", "createdAt": "2020-11-13T16:23:13Z", "commit": {"oid": "1866354cf3c681052f302a3b5df3ea630798c773"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3084, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}