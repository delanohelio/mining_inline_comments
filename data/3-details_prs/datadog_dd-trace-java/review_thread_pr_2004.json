{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDQ0MzI1", "number": 2004, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMzowMFrOEvXKhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1NDowOFrOEvaPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDk4MDUzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMzowMFrOHkTQ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMzowMFrOHkTQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjM4OA==", "bodyText": "typo?", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507826388", "createdAt": "2020-10-19T15:03:00Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/scala-promise-2.13/src/main/java/datadog/trace/instrumentation/scala/concurrent/PromiseTransformationInstrumentation.java", "diffHunk": "@@ -41,7 +41,7 @@ public PromiseTransformationInstrumentation() {\n \n   @Override\n   public Map<String, String> contextStore() {\n-    return singletonMap(\"scala.concurrent.impl.Promise$Transformation\", State.class.getName());\n+    return singletonMap(\"s ocala.concurrent.impl.Promise$Transformation\", State.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37eb0200ceadd052956d7faa0b575a324a84b63"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTIwODkzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo0OToyMFrOHkVcxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTo0OToyMFrOHkVcxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg2MjIxNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507862215", "createdAt": "2020-10-19T15:49:20Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/java/concurrent/ExcludeFilter.java", "diffHunk": "@@ -78,11 +79,11 @@ public static boolean exclude(ExcludeType type, String className) {\n    *\n    * @param excludeTypes the types to exclude\n    */\n-  public static void add(Map<ExcludeType, Set<String>> excludeTypes) {\n+  public static void add(Map<ExcludeType, ? extends Collection<String>> excludeTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221515cca9e913dd4eebf0e5bbd78ceaff67ee5a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTQ4MzU4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo1NDowOFrOHkYF9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxODo0OFrOHkZCkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNTUyNQ==", "bodyText": "This doesn't have the effect I had hoped for - I looked in to making SafeToInectFieldsMatcher remember class hierarchies, relying on class load order guarantees, but the matcher is invoked in a different order.", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507905525", "createdAt": "2020-10-19T16:54:08Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "diffHunk": "@@ -123,7 +123,7 @@ public void visitEnd() {\n         if (!foundField) {\n           cv.visitField(\n               // Field should be transient to avoid being serialized with the object.\n-              Opcodes.ACC_PRIVATE | Opcodes.ACC_TRANSIENT,\n+              Opcodes.ACC_PROTECTED | Opcodes.ACC_TRANSIENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7da0d0f5967651c49185bbcc7a1c5aa3eed35acf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyMTA0MQ==", "bodyText": "I wonder if we could get the matcher to add the field to only a specific class (if declared type is a class) or only classes that directly implement the declared interface.  I think we'd have to change the logic to be more specific on if the type is a class/interface.", "url": "https://github.com/DataDog/dd-trace-java/pull/2004#discussion_r507921041", "createdAt": "2020-10-19T17:18:48Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/FieldInjectionVisitor.java", "diffHunk": "@@ -123,7 +123,7 @@ public void visitEnd() {\n         if (!foundField) {\n           cv.visitField(\n               // Field should be transient to avoid being serialized with the object.\n-              Opcodes.ACC_PRIVATE | Opcodes.ACC_TRANSIENT,\n+              Opcodes.ACC_PROTECTED | Opcodes.ACC_TRANSIENT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwNTUyNQ=="}, "originalCommit": {"oid": "7da0d0f5967651c49185bbcc7a1c5aa3eed35acf"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4728, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}