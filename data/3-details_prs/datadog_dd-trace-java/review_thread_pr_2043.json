{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDA0NTA5", "number": 2043, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo1NToyNlrOEz2txA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoxNjowNFrOEz4qpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODA5Mjg0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/mongo/driver-4/src/main/java/datadog/trace/instrumentation/mongo4/Mongo4ClientDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo1NToyNlrOHrVdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTo1NzoxMlrOHrVhtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwMjM2MA==", "bodyText": "I know we do this elsewhere, but I know from experience with this driver  thatBsonDocument (having maintained a private fork) is quite heavy - every value is wrapped in a BsonValue. What we could be doing here is piping the document into a BsonWriter which writes the scrubbed value into a StringBuilder:\nScrubbingBsonWriter scrubber = new ScrubbingBsonWriter(new StringBuilder()); // implements org.bson.BsonWriter\nscrubber.pipe(new BsonDocumentReader(statement));\nCharSequence scrubbed = scrubber.getOutput()\nI have an example of how to do this sort of thing (which just prints out the attributed weight of a BSON document) here. This will be quite handy for getting the overhead of this instrumentation down.", "url": "https://github.com/DataDog/dd-trace-java/pull/2043#discussion_r515202360", "createdAt": "2020-10-30T15:55:26Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/src/main/java/datadog/trace/instrumentation/mongo4/Mongo4ClientDecorator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package datadog.trace.instrumentation.mongo4;\n+\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.event.CommandStartedEvent;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.bson.BsonArray;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.BsonValue;\n+\n+public class Mongo4ClientDecorator\n+    extends DBTypeProcessingDatabaseClientDecorator<CommandStartedEvent> {\n+\n+  public static final UTF8BytesString MONGO_QUERY = UTF8BytesString.createConstant(\"mongo.query\");\n+\n+  public static final Mongo4ClientDecorator DECORATE = new Mongo4ClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"mongo\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"mongo\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"java-mongo\";\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return DDSpanTypes.MONGO;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"mongo\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final CommandStartedEvent event) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final CommandStartedEvent event) {\n+    return event.getDatabaseName();\n+  }\n+\n+  @Override\n+  protected String dbHostname(CommandStartedEvent event) {\n+    final ConnectionDescription connectionDescription = event.getConnectionDescription();\n+    if (connectionDescription != null) {\n+      return connectionDescription.getServerAddress().getHost();\n+    }\n+\n+    return null;\n+  }\n+\n+  public AgentSpan onStatement(final AgentSpan span, final BsonDocument statement) {\n+\n+    // scrub the Mongo command so that parameters are removed from the string\n+    final BsonDocument scrubbed = scrub(statement);\n+    final String mongoCmd = scrubbed.toString();\n+\n+    span.setTag(DDTags.RESOURCE_NAME, mongoCmd);\n+    return onStatement(span, mongoCmd);\n+  }\n+\n+  /**\n+   * The values of these mongo fields will not be scrubbed out. This allows the non-sensitive\n+   * collection names to be captured.\n+   */\n+  private static final List<String> UNSCRUBBED_FIELDS =\n+      Arrays.asList(\"ordered\", \"insert\", \"count\", \"find\", \"create\");\n+\n+  private static final BsonValue HIDDEN_CHAR = new BsonString(\"?\");\n+\n+  private static BsonDocument scrub(final BsonDocument origin) {\n+    final BsonDocument scrub = new BsonDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f53b31723cf1d70bec9966330955d63bb06ec09"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwMzUwOA==", "bodyText": "cool - yes, this approach comes from the old MongoDB 3 instrumentation - thanks for the link", "url": "https://github.com/DataDog/dd-trace-java/pull/2043#discussion_r515203508", "createdAt": "2020-10-30T15:57:12Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/src/main/java/datadog/trace/instrumentation/mongo4/Mongo4ClientDecorator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package datadog.trace.instrumentation.mongo4;\n+\n+import com.mongodb.connection.ConnectionDescription;\n+import com.mongodb.event.CommandStartedEvent;\n+import datadog.trace.api.DDSpanTypes;\n+import datadog.trace.api.DDTags;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import org.bson.BsonArray;\n+import org.bson.BsonDocument;\n+import org.bson.BsonString;\n+import org.bson.BsonValue;\n+\n+public class Mongo4ClientDecorator\n+    extends DBTypeProcessingDatabaseClientDecorator<CommandStartedEvent> {\n+\n+  public static final UTF8BytesString MONGO_QUERY = UTF8BytesString.createConstant(\"mongo.query\");\n+\n+  public static final Mongo4ClientDecorator DECORATE = new Mongo4ClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"mongo\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"mongo\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return \"java-mongo\";\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return DDSpanTypes.MONGO;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"mongo\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final CommandStartedEvent event) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final CommandStartedEvent event) {\n+    return event.getDatabaseName();\n+  }\n+\n+  @Override\n+  protected String dbHostname(CommandStartedEvent event) {\n+    final ConnectionDescription connectionDescription = event.getConnectionDescription();\n+    if (connectionDescription != null) {\n+      return connectionDescription.getServerAddress().getHost();\n+    }\n+\n+    return null;\n+  }\n+\n+  public AgentSpan onStatement(final AgentSpan span, final BsonDocument statement) {\n+\n+    // scrub the Mongo command so that parameters are removed from the string\n+    final BsonDocument scrubbed = scrub(statement);\n+    final String mongoCmd = scrubbed.toString();\n+\n+    span.setTag(DDTags.RESOURCE_NAME, mongoCmd);\n+    return onStatement(span, mongoCmd);\n+  }\n+\n+  /**\n+   * The values of these mongo fields will not be scrubbed out. This allows the non-sensitive\n+   * collection names to be captured.\n+   */\n+  private static final List<String> UNSCRUBBED_FIELDS =\n+      Arrays.asList(\"ordered\", \"insert\", \"count\", \"find\", \"create\");\n+\n+  private static final BsonValue HIDDEN_CHAR = new BsonString(\"?\");\n+\n+  private static BsonDocument scrub(final BsonDocument origin) {\n+    final BsonDocument scrub = new BsonDocument();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwMjM2MA=="}, "originalCommit": {"oid": "1f53b31723cf1d70bec9966330955d63bb06ec09"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODQxMjU1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/mongo/driver-4/driver-4.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoxNjowNFrOHrYjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoxNjowNVrOHs4yMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MzE4MQ==", "bodyText": "This version number ideally should align with the project name.  Any reason for the mismatch?", "url": "https://github.com/DataDog/dd-trace-java/pull/2043#discussion_r515253181", "createdAt": "2020-10-30T17:16:04Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/driver-4.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // Mongo4 driver requires Java 8 minimum\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.mongodb\"\n+    module = \"mongodb-driver-core\"\n+    versions = \"[3.7,)\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4f768654ad23eaf6ebd5bb448440d1f47e5007"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2MDY2Nw==", "bodyText": "Comes down to how MongoDB evolved MongoClientOptions into MongoClientSettings - the v3 instrumentation works with early v3 drivers and the latest legacy drivers (both v3 and v4) that use MongoClientOptions. Whereas the v4 instrumentation works with the newer sync and reactivestreams drivers that use MongoClientSettings - but is also compatible with early releases of those drivers back to 3.7.\nSince v3 based applications tend to use the legacy driver, and v4 based applications typically use the sync or reactivestreams drivers I decided it was simpler to mark the new instrumentation as v4, but declare in the muzzle spec that this will also work with earlier releases (when using the newer client API that uses MongoClientSettings).\nAlso because no Mongo client uses both MongoClientOptions and MongoClientSettings there's no risk of double instrumentation.", "url": "https://github.com/DataDog/dd-trace-java/pull/2043#discussion_r515260667", "createdAt": "2020-10-30T17:28:08Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/driver-4.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // Mongo4 driver requires Java 8 minimum\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.mongodb\"\n+    module = \"mongodb-driver-core\"\n+    versions = \"[3.7,)\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MzE4MQ=="}, "originalCommit": {"oid": "0f4f768654ad23eaf6ebd5bb448440d1f47e5007"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5NTQ2Mw==", "bodyText": "@mcculls would you mind adding a comment in the gradle file describing your reasoning here?", "url": "https://github.com/DataDog/dd-trace-java/pull/2043#discussion_r515995463", "createdAt": "2020-11-02T14:09:13Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/driver-4.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // Mongo4 driver requires Java 8 minimum\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.mongodb\"\n+    module = \"mongodb-driver-core\"\n+    versions = \"[3.7,)\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MzE4MQ=="}, "originalCommit": {"oid": "0f4f768654ad23eaf6ebd5bb448440d1f47e5007"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyOTc0NA==", "bodyText": "#2048", "url": "https://github.com/DataDog/dd-trace-java/pull/2043#discussion_r516829744", "createdAt": "2020-11-03T17:16:05Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/mongo/driver-4/driver-4.gradle", "diffHunk": "@@ -0,0 +1,36 @@\n+// Set properties before any plugins get loaded\n+ext {\n+  // Mongo4 driver requires Java 8 minimum\n+  minJavaVersionForTests = JavaVersion.VERSION_1_8\n+}\n+\n+muzzle {\n+  pass {\n+    group = \"org.mongodb\"\n+    module = \"mongodb-driver-core\"\n+    versions = \"[3.7,)\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1MzE4MQ=="}, "originalCommit": {"oid": "0f4f768654ad23eaf6ebd5bb448440d1f47e5007"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4772, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}