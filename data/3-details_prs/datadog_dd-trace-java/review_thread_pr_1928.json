{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTU3MDIz", "number": 1928, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyODo0OVrOEopacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMTowMVrOEo5QkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU3MDA5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyODo0OVrOHZ2-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyODo0OVrOHZ2-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NzE0MQ==", "bodyText": "we must initialize JMX system access for the profiling classloader as it now requires access to some JMX functionality: reading JVM options, setting JFR stackdepth.", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496877141", "createdAt": "2020-09-29T16:28:49Z", "author": {"login": "pmbauer"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/Agent.java", "diffHunk": "@@ -261,14 +261,24 @@ private static synchronized void installDatadogTracer() {\n \n   private static synchronized void startJmx(final URL bootstrapURL) {\n     startJmxFetch(bootstrapURL);\n-    initializeJmxSystemAccessProvider();\n+\n+    if (AGENT_CLASSLOADER == null) {\n+      throw new IllegalStateException(\"Datadog agent should have been started already\");\n+    }\n+    initializeJmxSystemAccessProvider(AGENT_CLASSLOADER);\n+\n+    if (PROFILING_CLASSLOADER == null) {\n+      throw new IllegalStateException(\"Datadog profiling agent should have been started already\");\n+    }\n+    initializeJmxSystemAccessProvider(PROFILING_CLASSLOADER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU3Mjc5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyOToyNVrOHZ3ABQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyOToyNVrOHZ3ABQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NzU3Mw==", "bodyText": "where best to document this?", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496877573", "createdAt": "2020-09-29T16:29:25Z", "author": {"login": "pmbauer"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "diffHunk": "@@ -16,20 +16,25 @@\n package com.datadog.profiling.controller;\n \n import com.datadog.profiling.util.ProfilingThreadFactory;\n+import datadog.trace.core.util.SystemAccess;\n+import lombok.extern.slf4j.Slf4j;\n+\n import java.time.Duration;\n import java.time.Instant;\n+import java.util.Optional;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ThreadLocalRandom;\n import java.util.concurrent.TimeUnit;\n-import lombok.extern.slf4j.Slf4j;\n \n /** Sets up the profiling strategy and schedules the profiling recordings. */\n @Slf4j\n public final class ProfilingSystem {\n   static final String RECORDING_NAME = \"dd-profiling\";\n \n   private static final long TERMINATION_TIMEOUT = 10;\n+  public static final int DEFAULT_STACK_DEPTH = 256;\n+  public static final int MAX_STACK_DEPTH = 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU3NDY2OnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/src/main/groovy/datadog/smoketest/AbstractSmokeTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyOTo1NFrOHZ3BIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyOTo1NFrOHZ3BIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3Nzg1OQ==", "bodyText": "drive-by typo", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496877859", "createdAt": "2020-09-29T16:29:54Z", "author": {"login": "pmbauer"}, "path": "dd-smoke-tests/src/main/groovy/datadog/smoketest/AbstractSmokeTest.groovy", "diffHunk": "@@ -36,7 +36,7 @@ abstract class AbstractSmokeTest extends Specification {\n   protected BlockingQueue<TestHttpServer.HandlerApi.RequestApi> traceRequests = new LinkedBlockingQueue<>()\n \n   /**\n-   * Will be initialized after calling {@linkplain AbstractSomeTest#checkLog} and hold {@literal true}\n+   * Will be initialized after calling {@linkplain AbstractSmokeTest#checkLog} and hold {@literal true}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU3NjgyOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxSystemAccessProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMDoxOVrOHZ3Cdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMDoxOVrOHZ3Cdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3ODE5OQ==", "bodyText": "add two methods to JMX interface", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496878199", "createdAt": "2020-09-29T16:30:19Z", "author": {"login": "pmbauer"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/JmxSystemAccessProvider.java", "diffHunk": "@@ -26,15 +32,49 @@ public long getThreadCpuTime() {\n    */\n   @Override\n   public int getCurrentPid() {\n-    String name = runtimeMXBean.getName();\n+    final String name = runtimeMXBean.getName();\n     if (name == null) {\n       return 0;\n     }\n-    int idx = name.indexOf('@');\n+    final int idx = name.indexOf('@');\n     if (idx == -1) {\n       return 0;\n     }\n-    String pid = name.substring(0, idx);\n+    final String pid = name.substring(0, idx);\n     return Integer.parseInt(pid);\n   }\n+\n+  /** */\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU4NzAyOnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/wildfly/src/test/groovy/datadog/smoketest/JFRStackDepthTest.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMjo0NVrOHZ3Itg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozMjo0NVrOHZ3Itg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3OTc5OA==", "bodyText": "inheriting directly from Specification rather than AbstractServerSmokeTest or AbstractProfilingIntegrationTest; the machinery in those base classes assumes a shared server, which is not the case.  We are iterating on JVM startup options and need a unique server process per test. It was cleaner to make this test stand-alone rather than retrofit those base classes", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496879798", "createdAt": "2020-09-29T16:32:45Z", "author": {"login": "pmbauer"}, "path": "dd-smoke-tests/wildfly/src/test/groovy/datadog/smoketest/JFRStackDepthTest.groovy", "diffHunk": "@@ -0,0 +1,131 @@\n+package datadog.smoketest\n+\n+import datadog.trace.agent.test.server.http.TestHttpServer\n+import datadog.trace.agent.test.utils.PortUtils\n+import spock.lang.AutoCleanup\n+import spock.lang.Retry\n+import spock.lang.Shared\n+import spock.lang.Specification\n+import spock.util.concurrent.PollingConditions\n+\n+import java.util.concurrent.BlockingQueue\n+import java.util.concurrent.LinkedBlockingQueue\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.agent.test.server.http.TestHttpServer.httpServer\n+\n+@Retry(delay = 2000)\n+class JFRStackDepthTest extends Specification {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU5OTE5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozNToyN1rOHZ3QHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0ODowNlrOHZ3wfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTY5Mg==", "bodyText": "you may have stackdepth as second option like:\n-XX:FlightRecorderOptions=dumponexit=true,stackdepth=128", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496881692", "createdAt": "2020-09-29T16:35:27Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "diffHunk": "@@ -126,9 +131,53 @@ public final void start() {\n     }\n   }\n \n+  private static void setMaxStackDepth() {\n+    final String JFR_STACK_DEPTH_ARG = \"-XX:FlightRecorderOptions=stackdepth=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4OTk4Mg==", "bodyText": "good point, will fix", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r496889982", "createdAt": "2020-09-29T16:48:06Z", "author": {"login": "pmbauer"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "diffHunk": "@@ -126,9 +131,53 @@ public final void start() {\n     }\n   }\n \n+  private static void setMaxStackDepth() {\n+    final String JFR_STACK_DEPTH_ARG = \"-XX:FlightRecorderOptions=stackdepth=\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4MTY5Mg=="}, "originalCommit": {"oid": "96af86377430da9a615a574e577aec1ee342c967"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTQzODUxOnYy", "diffSide": "RIGHT", "path": "dd-smoke-tests/wildfly/src/test/groovy/datadog/smoketest/JFRStackDepthTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDowNjo1N1rOHZ_Piw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMDowNjo1N1rOHZ_Piw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAxMjYxOQ==", "bodyText": "is there a better way to do this with gradle?", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r497012619", "createdAt": "2020-09-29T20:06:57Z", "author": {"login": "pmbauer"}, "path": "dd-smoke-tests/wildfly/src/test/groovy/datadog/smoketest/JFRStackDepthTest.groovy", "diffHunk": "@@ -0,0 +1,130 @@\n+package datadog.smoketest\n+\n+import datadog.trace.agent.test.server.http.TestHttpServer\n+import datadog.trace.agent.test.utils.PortUtils\n+import org.junit.Assume\n+import spock.lang.AutoCleanup\n+import spock.lang.Retry\n+import spock.lang.Shared\n+import spock.lang.Specification\n+import spock.util.concurrent.PollingConditions\n+\n+import java.util.concurrent.BlockingQueue\n+import java.util.concurrent.LinkedBlockingQueue\n+import java.util.concurrent.TimeUnit\n+\n+import static datadog.trace.agent.test.server.http.TestHttpServer.httpServer\n+\n+@Retry(delay = 2000)\n+class JFRStackDepthTest extends Specification {\n+  public static final PROFILING_START_DELAY_SECONDS = 1\n+  public static final int PROFILING_RECORDING_UPLOAD_PERIOD_SECONDS = 5\n+\n+  @Shared\n+  def wildflyDirectory = new File(System.getProperty(\"datadog.smoketest.wildflyDir\"))\n+  @Shared\n+  def buildDirectory = System.getProperty(\"datadog.smoketest.builddir\")\n+  @Shared\n+  def shadowJarPath = System.getProperty(\"datadog.smoketest.agent.shadowJar.path\")\n+\n+  @AutoCleanup\n+  TestHttpServer server = httpServer {\n+    handlers {\n+      all {\n+        requests.add(request)\n+        response.status(200).send()\n+      }\n+    }\n+  }\n+\n+  @Shared\n+  BlockingQueue<TestHttpServer.HandlerApi.RequestApi> requests = new LinkedBlockingQueue<>()\n+\n+  def httpsPort = PortUtils.randomOpenPort()\n+  def httpPort = PortUtils.randomOpenPort()\n+  def managementPort = PortUtils.randomOpenPort()\n+  Process testedProcess\n+\n+  def setup() {\n+    requests.clear()\n+    server.start()\n+  }\n+\n+  def cleanup() {\n+    ProcessBuilder processBuilder = new ProcessBuilder(\n+      \"${wildflyDirectory}/bin/jboss-cli.sh\",\n+      \"--connect\",\n+      \"--controller=localhost:${managementPort}\",\n+      \"command=:shutdown\")\n+    processBuilder.directory(wildflyDirectory)\n+    Process process = processBuilder.start()\n+    process.waitFor()\n+  }\n+\n+  long startWildfly(String extraOpts) {\n+    def logFilePath = \"${buildDirectory}/reports/testProcess.${specificationContext.currentIteration.name}.log\"\n+    String[] javaOpts = [\n+      \"-javaagent:${shadowJarPath}\",\n+      \"-Ddd.trace.agent.port=${server.address.port}\",\n+      \"-Ddd.service.name=smoke-test-java-app\",\n+      \"-Ddd.profiling.enabled=true\",\n+      \"-Ddd.profiling.start-delay=${PROFILING_START_DELAY_SECONDS}\",\n+      \"-Ddd.profiling.upload.period=${PROFILING_RECORDING_UPLOAD_PERIOD_SECONDS}\",\n+      \"-Ddd.profiling.url=http://localhost:${server.address.port}\",\n+      \"-Ddatadog.slf4j.simpleLogger.defaultLogLevel=debug\",\n+      \"-Dorg.slf4j.simpleLogger.defaultLogLevel=debug\",\n+      \" -Djboss.http.port=${httpPort} -Djboss.https.port=${httpsPort}\",\n+      \" -Djboss.management.http.port=${managementPort}\",\n+      extraOpts,\n+    ]\n+\n+    ProcessBuilder processBuilder =\n+      new ProcessBuilder(\"${wildflyDirectory}/bin/standalone.sh\")\n+    processBuilder.directory(wildflyDirectory)\n+    processBuilder.environment().put(\"JAVA_OPTS\", javaOpts.join(\" \"))\n+    processBuilder.environment().put(\"JAVA_HOME\", System.getProperty(\"java.home\"))\n+    processBuilder.environment().put(\"DD_API_KEY\", \"01234567890abcdef123456789ABCDEF\")\n+    processBuilder.redirectErrorStream(true)\n+    processBuilder.redirectOutput(ProcessBuilder.Redirect.to(new File(logFilePath)))\n+    testedProcess = processBuilder.start()\n+\n+    PortUtils.waitForPortToOpen(httpPort, 240, TimeUnit.SECONDS, testedProcess)\n+\n+    // This test can't run on Java 1.8, requires Process::children and Process::pid only present since 1.9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f73292dc5e87600885e4d431988fe677e1385d9f"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE2NjI0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMTowMVrOHaPyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMDozMVrOHageRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4MzYxNg==", "bodyText": "Can we detect in one way or another that JMX is not yet initialized when we performed the call?\nto help diganostic when it does not work.\nreturn of the method is null = meaning this is the NoOp?", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r497283616", "createdAt": "2020-09-30T07:01:01Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "diffHunk": "@@ -126,9 +132,73 @@ public final void start() {\n     }\n   }\n \n+  protected static int stackDepthFromClient(final String userSpecifiedDepth) {\n+    try {\n+      final int stackDepth = Integer.parseInt(userSpecifiedDepth);\n+\n+      // client specified a value considered safe\n+      if (stackDepth < MAX_STACK_DEPTH) {\n+        log.info(\"skip setting JFR.configure stackdepth, using \" + userSpecifiedDepth);\n+        return stackDepth;\n+      }\n+\n+      // limit how deep a stack depth we'll collect\n+      log.warn(userSpecifiedDepth + \" exceeds maximum value allowed by Datadog agent\");\n+      return MAX_STACK_DEPTH;\n+    } catch (final NumberFormatException e) { // \"this should never happen\"\n+      log.warn(\"malformed arg: \" + userSpecifiedDepth);\n+    }\n+\n+    return DEFAULT_STACK_DEPTH;\n+  }\n+\n+  private static void setMaxStackDepth() {\n+    int maxFrames = ProfilingSystem.DEFAULT_STACK_DEPTH;\n+\n+    // don't set stackdepth if the client has explicitly set it\n+    final Optional<String> userSpecifiedStackDepth =\n+        readJFRStackDepth(SystemAccess.getVMArguments());\n+    if (userSpecifiedStackDepth.isPresent()) {\n+      maxFrames = stackDepthFromClient(userSpecifiedStackDepth.get());\n+    }\n+\n+    log.info(\"setting JFR.configure stackdepth=\" + maxFrames);\n+    SystemAccess.executeDiagnosticCommand(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c835ed5228ea6a70a3bfdc32872380f2877a485"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1NzA2Mw==", "bodyText": "fixed, reporting results df41df5", "url": "https://github.com/DataDog/dd-trace-java/pull/1928#discussion_r497557063", "createdAt": "2020-09-30T14:30:31Z", "author": {"login": "pmbauer"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/controller/ProfilingSystem.java", "diffHunk": "@@ -126,9 +132,73 @@ public final void start() {\n     }\n   }\n \n+  protected static int stackDepthFromClient(final String userSpecifiedDepth) {\n+    try {\n+      final int stackDepth = Integer.parseInt(userSpecifiedDepth);\n+\n+      // client specified a value considered safe\n+      if (stackDepth < MAX_STACK_DEPTH) {\n+        log.info(\"skip setting JFR.configure stackdepth, using \" + userSpecifiedDepth);\n+        return stackDepth;\n+      }\n+\n+      // limit how deep a stack depth we'll collect\n+      log.warn(userSpecifiedDepth + \" exceeds maximum value allowed by Datadog agent\");\n+      return MAX_STACK_DEPTH;\n+    } catch (final NumberFormatException e) { // \"this should never happen\"\n+      log.warn(\"malformed arg: \" + userSpecifiedDepth);\n+    }\n+\n+    return DEFAULT_STACK_DEPTH;\n+  }\n+\n+  private static void setMaxStackDepth() {\n+    int maxFrames = ProfilingSystem.DEFAULT_STACK_DEPTH;\n+\n+    // don't set stackdepth if the client has explicitly set it\n+    final Optional<String> userSpecifiedStackDepth =\n+        readJFRStackDepth(SystemAccess.getVMArguments());\n+    if (userSpecifiedStackDepth.isPresent()) {\n+      maxFrames = stackDepthFromClient(userSpecifiedStackDepth.get());\n+    }\n+\n+    log.info(\"setting JFR.configure stackdepth=\" + maxFrames);\n+    SystemAccess.executeDiagnosticCommand(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4MzYxNg=="}, "originalCommit": {"oid": "7c835ed5228ea6a70a3bfdc32872380f2877a485"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4868, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}