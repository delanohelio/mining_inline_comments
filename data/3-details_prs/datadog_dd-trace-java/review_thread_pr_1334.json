{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjYzNzY0", "number": 1334, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1MjoxN1rODqt3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjoxOTo0M1rODrL-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTE4MjEwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1MjoxN1rOF6ohag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTowMDo1NVrOF6rCHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNTY0Mg==", "bodyText": "This is for tests only. Should be at most package private.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397025642", "createdAt": "2020-03-24T09:52:17Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -11,39 +11,22 @@\n \n @Slf4j\n public class ExceptionHistogram {\n-  private final Map<String, AtomicLong> histoMap = new ConcurrentHashMap<>();\n-  private final EventType exceptionCountEventType;\n+  private final Map<String, AtomicLong> histogram = new ConcurrentHashMap<>();\n   private final int maxTopItems;\n-  private final boolean forceEnabled;\n-\n-  @FunctionalInterface\n-  interface ValueVisitor {\n-    void visit(String key, long value);\n-  }\n+  private final int maxSize;\n+  private final EventType exceptionCountEventType;\n+  private final Runnable eventHook;\n \n   ExceptionHistogram(final Config config) {\n-    this(config.getProfilingExceptionHistoMax(), false);\n-  }\n-\n-  ExceptionHistogram(final int maxTopItems, final boolean forceEnabled) {\n-    this.maxTopItems = maxTopItems;\n+    maxTopItems = config.getProfilingExceptionHistogramTopItems();\n+    maxSize = config.getProfilingExceptionHistogramMaxCollectionSize();\n     exceptionCountEventType = EventType.getEventType(ExceptionCountEvent.class);\n-    this.forceEnabled = forceEnabled;\n-\n-    FlightRecorder.addPeriodicEvent(ExceptionCountEvent.class, this::emit);\n-  }\n-\n-  private void emit() {\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n-      processAndReset(this::newExceptionCountEvent);\n-    }\n+    eventHook = this::emit;\n+    FlightRecorder.addPeriodicEvent(ExceptionCountEvent.class, eventHook);\n   }\n \n-  private void newExceptionCountEvent(final String type, final long count) {\n-    final ExceptionCountEvent event = new ExceptionCountEvent(type, count);\n-    if (event.shouldCommit()) {\n-      event.commit();\n-    }\n+  public void deregister() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2Njc4MA==", "bodyText": "fixed", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397066780", "createdAt": "2020-03-24T11:00:55Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -11,39 +11,22 @@\n \n @Slf4j\n public class ExceptionHistogram {\n-  private final Map<String, AtomicLong> histoMap = new ConcurrentHashMap<>();\n-  private final EventType exceptionCountEventType;\n+  private final Map<String, AtomicLong> histogram = new ConcurrentHashMap<>();\n   private final int maxTopItems;\n-  private final boolean forceEnabled;\n-\n-  @FunctionalInterface\n-  interface ValueVisitor {\n-    void visit(String key, long value);\n-  }\n+  private final int maxSize;\n+  private final EventType exceptionCountEventType;\n+  private final Runnable eventHook;\n \n   ExceptionHistogram(final Config config) {\n-    this(config.getProfilingExceptionHistoMax(), false);\n-  }\n-\n-  ExceptionHistogram(final int maxTopItems, final boolean forceEnabled) {\n-    this.maxTopItems = maxTopItems;\n+    maxTopItems = config.getProfilingExceptionHistogramTopItems();\n+    maxSize = config.getProfilingExceptionHistogramMaxCollectionSize();\n     exceptionCountEventType = EventType.getEventType(ExceptionCountEvent.class);\n-    this.forceEnabled = forceEnabled;\n-\n-    FlightRecorder.addPeriodicEvent(ExceptionCountEvent.class, this::emit);\n-  }\n-\n-  private void emit() {\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n-      processAndReset(this::newExceptionCountEvent);\n-    }\n+    eventHook = this::emit;\n+    FlightRecorder.addPeriodicEvent(ExceptionCountEvent.class, eventHook);\n   }\n \n-  private void newExceptionCountEvent(final String type, final long count) {\n-    final ExceptionCountEvent event = new ExceptionCountEvent(type, count);\n-    if (event.shouldCommit()) {\n-      event.commit();\n-    }\n+  public void deregister() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNTY0Mg=="}, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTIxMTgzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1OTozM1rOF6o0EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMDo0OFrOF6rXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMDQxNw==", "bodyText": "size() on concurrent structures can be rather expensive as it needs to merge data from all thread-local buckets.\nAdditionally, this check is not thread safe but in the worst case it will add extra N items where N is the number of concurrently accessing threads - so the overflow should not be too severe.\nWhat makes me nervous about this histogram size clipping is that it may produce incorrect data once new items are refused. To make things worse the information about clipping will be available only in the customer logs so our analysis operating on JFR only will have no clue that the histogram may be garbage.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397030417", "createdAt": "2020-03-24T09:59:33Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -53,13 +36,19 @@ public boolean record(final Exception exception) {\n     return record(exception.getClass().getCanonicalName());\n   }\n \n-  boolean record(final String typeName) {\n-    if (typeName == null) {\n-      return false;\n-    }\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n+  private boolean record(final String typeName) {\n+    if (exceptionCountEventType.isEnabled()) {\n+      if (histogram.size() >= maxSize && !histogram.containsKey(typeName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NTkyNg==", "bodyText": "I guess we could have special even when size clipping occurs - in fact we do not need 'special' event, we can have same even with special class name.\nAs far as size's cost goes - I'm not sure specifically concurrent hash map suffers from that problem.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397065926", "createdAt": "2020-03-24T10:59:29Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -53,13 +36,19 @@ public boolean record(final Exception exception) {\n     return record(exception.getClass().getCanonicalName());\n   }\n \n-  boolean record(final String typeName) {\n-    if (typeName == null) {\n-      return false;\n-    }\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n+  private boolean record(final String typeName) {\n+    if (exceptionCountEventType.isEnabled()) {\n+      if (histogram.size() >= maxSize && !histogram.containsKey(typeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMDQxNw=="}, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MTkxOA==", "bodyText": "So I've added two things:\n\nI've swapped containsKey check with with size - this makes calls to size less often\nI've added another event to count number of clipped exceptions - this way the problem will be visible in the histogram", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397071918", "createdAt": "2020-03-24T11:10:25Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -53,13 +36,19 @@ public boolean record(final Exception exception) {\n     return record(exception.getClass().getCanonicalName());\n   }\n \n-  boolean record(final String typeName) {\n-    if (typeName == null) {\n-      return false;\n-    }\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n+  private boolean record(final String typeName) {\n+    if (exceptionCountEventType.isEnabled()) {\n+      if (histogram.size() >= maxSize && !histogram.containsKey(typeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMDQxNw=="}, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MjE0MQ==", "bodyText": "We can not emit event for each refused entry - I think we are trying to prevent situation when we have few hundreds of thousands of different exception types being created all the time (I think this is almost impossible, but ok) and if we start emitting events for all refused exception types because crossing the histo limit we blow up the recording instead. So we will have to send only one event at the chunk end, signaling that the limit has been crossed some time during the event and the histo may contain garbage, statistically speaking.\nAs for the ConcurrentHashMap size implementation -\nhttps://opengrok.us1.staging.dog/xref/jdk11/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java?r=50762%3A3c3ff151c75e#2562", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397072141", "createdAt": "2020-03-24T11:10:48Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -53,13 +36,19 @@ public boolean record(final Exception exception) {\n     return record(exception.getClass().getCanonicalName());\n   }\n \n-  boolean record(final String typeName) {\n-    if (typeName == null) {\n-      return false;\n-    }\n-    if (forceEnabled || exceptionCountEventType.isEnabled()) {\n+  private boolean record(final String typeName) {\n+    if (exceptionCountEventType.isEnabled()) {\n+      if (histogram.size() >= maxSize && !histogram.containsKey(typeName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMDQxNw=="}, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTIyMjA4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowMjowNVrOF6o6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo1Njo1OFrOF6q5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjA1MA==", "bodyText": "Well, with the size clipping it is totally confusing and basically can not be used since you can be getting quite random results depending on the histogram size limit and the number of unique type names of exceptions emitted during one chunk. Eg. all exception types which will not be added to the histogram will not be sampled on their first occurrence.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397032050", "createdAt": "2020-03-24T10:02:05Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -71,24 +60,41 @@ boolean record(final String typeName) {\n               })\n           .incrementAndGet();\n \n+      // FIXME: this 'first hit' logic is confusing and untested", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NDQ2MA==", "bodyText": "It was confusing even before size clipping.\n'First hit once per run' - this seems odd, especially for long running processes. With introduction of old entries clean up it became 'first entry after previous one was cleaned up' which is not less confusing.\nIn fact I do not see how size clipping changes much.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397064460", "createdAt": "2020-03-24T10:56:58Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/main/java/com/datadog/profiling/exceptions/ExceptionHistogram.java", "diffHunk": "@@ -71,24 +60,41 @@ boolean record(final String typeName) {\n               })\n           .incrementAndGet();\n \n+      // FIXME: this 'first hit' logic is confusing and untested", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMjA1MA=="}, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTIyOTU5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/test/java/com/datadog/profiling/exceptions/ExceptionHistogramTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowNDowMlrOF6o_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo1ODoyMVrOF6q8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMzIzMA==", "bodyText": "IMO a unit test should not require all this JFR machinery to test just a simple in-memory data structure.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397033230", "createdAt": "2020-03-24T10:04:02Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/test/java/com/datadog/profiling/exceptions/ExceptionHistogramTest.java", "diffHunk": "@@ -1,70 +1,259 @@\n package com.datadog.profiling.exceptions;\n \n-import java.util.Arrays;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Assert;\n-import org.junit.jupiter.api.Assertions;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import com.google.common.collect.ImmutableSortedMap;\n+import datadog.trace.api.Config;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.Properties;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Recording;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.Attribute;\n+import org.openjdk.jmc.common.item.IAttribute;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n \n public class ExceptionHistogramTest {\n+\n+  private static final IAttribute<String> TYPE =\n+      Attribute.attr(\"type\", \"type\", \"Exception type\", UnitLookup.PLAIN_TEXT);\n+  private static final IAttribute<IQuantity> COUNT =\n+      Attribute.attr(\"count\", \"count\", \"Exception count\", UnitLookup.NUMBER);\n+\n+  private static final Comparator<Exception> EXCEPTION_COMPARATOR =\n+      new Comparator<>() {\n+        @Override\n+        public int compare(final Exception e1, final Exception e2) {\n+          return e1.getClass().getCanonicalName().compareTo(e2.getClass().getCanonicalName());\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+          return this == obj;\n+        }\n+      };\n+\n   private static final int MAX_ITEMS = 2;\n+  private static final int MAX_SIZE = 2;\n+\n+  private Recording recording;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NTI5Nw==", "bodyText": "I would agree in general. In practice this turns out not to be a 'simple data structure' - this also creates and commits events due to JFR APIs are organized.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397065297", "createdAt": "2020-03-24T10:58:21Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/agent-profiling/profiling-exceptions/src/test/java/com/datadog/profiling/exceptions/ExceptionHistogramTest.java", "diffHunk": "@@ -1,70 +1,259 @@\n package com.datadog.profiling.exceptions;\n \n-import java.util.Arrays;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Assert;\n-import org.junit.jupiter.api.Assertions;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import com.google.common.collect.ImmutableSortedMap;\n+import datadog.trace.api.Config;\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.Properties;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Recording;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.Attribute;\n+import org.openjdk.jmc.common.item.IAttribute;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n \n public class ExceptionHistogramTest {\n+\n+  private static final IAttribute<String> TYPE =\n+      Attribute.attr(\"type\", \"type\", \"Exception type\", UnitLookup.PLAIN_TEXT);\n+  private static final IAttribute<IQuantity> COUNT =\n+      Attribute.attr(\"count\", \"count\", \"Exception count\", UnitLookup.NUMBER);\n+\n+  private static final Comparator<Exception> EXCEPTION_COMPARATOR =\n+      new Comparator<>() {\n+        @Override\n+        public int compare(final Exception e1, final Exception e2) {\n+          return e1.getClass().getCanonicalName().compareTo(e2.getClass().getCanonicalName());\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+          return this == obj;\n+        }\n+      };\n+\n   private static final int MAX_ITEMS = 2;\n+  private static final int MAX_SIZE = 2;\n+\n+  private Recording recording;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMzIzMA=="}, "originalCommit": {"oid": "dd06ebd4e6cd7af210d51e71667d6db6db95a43b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjExNjU2OnYy", "diffSide": "LEFT", "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjoxOTo0M1rOF7Yc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1NzoyMVrOF7ZusA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA==", "bodyText": "Is this correct? When you remove this override the exception instrumentation will be enabled only if 'integrations' are enabled. IMO, exception profiling is not an integration, like netty or elasticsearch.\nMaybe I am missing something but this does not seem right.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397810930", "createdAt": "2020-03-25T12:19:43Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxNzA0NQ==", "bodyText": "I think this is correct.\nIf APM is disabled then whole BB agent will be disabled and nothing will get applied - so from that perspective this would be subject to same rules as APM.\nAlso per-integration enable-disable works the same as for other integrations...\nSo even though this may not seem like integration - in fact it is... And I'd also say potentially quite risky one since we mess with deep jdk guts... So I'd prefer it to be driven by same controls as the rest of integrations - mainly to avoid confusion.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397817045", "createdAt": "2020-03-25T12:31:13Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxODAzMw==", "bodyText": "Ok", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397818033", "createdAt": "2020-03-25T12:32:56Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxOTA3MQ==", "bodyText": "We can revisit it if it causes problems/confusion - but overall it seems nice to have a universal 'kill switch' for messing up with the byte code", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397819071", "createdAt": "2020-03-25T12:34:52Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyODI2Mg==", "bodyText": "Yes, that seems right to me.  For this integration, both ByteBuddy and JFR need to be available.\nMy concern is more how we're checking for JFR.  The Class.forName is problematic for a couple reasons.\n1 - It unnecessarily triggers class initialization.\n2 - It is effectively repeating the logic that the type of check typically performed by muzzle and ClassLoaderMatchers.\nUnless there's a good reason not to use the existing mechanisms, I think this code should do so.", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397828262", "createdAt": "2020-03-25T12:51:19Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMDExNg==", "bodyText": "1 - It unnecessarily triggers class initialization.\n\nThis class will be loaded anyway when integration is applied... or am I missing something?", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397830116", "createdAt": "2020-03-25T12:54:25Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMTc2Nw==", "bodyText": "But classloader matcher seems like a good point, @jbachorik any reason not to use it?", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397831767", "createdAt": "2020-03-25T12:57:11Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzMTg1Ng==", "bodyText": "(probably in main PR)", "url": "https://github.com/DataDog/dd-trace-java/pull/1334#discussion_r397831856", "createdAt": "2020-03-25T12:57:21Z", "author": {"login": "mar-kolya"}, "path": "dd-java-agent/instrumentation/exception-profiling/src/main/java/datadog/exceptions/instrumentation/ExceptionInstrumentation.java", "diffHunk": "@@ -38,11 +36,6 @@ public ExceptionInstrumentation() {\n     hasJfr = jfr;\n   }\n \n-  @Override\n-  protected boolean defaultEnabled() {\n-    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgxMDkzMA=="}, "originalCommit": {"oid": "e05d10a2f2529768d01aaef953db85fae6a3e453"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 416, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}