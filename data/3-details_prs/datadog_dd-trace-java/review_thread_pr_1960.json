{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NDk4NTc4", "number": 1960, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzowNzoyNlrOEreaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzowNzoyNlrOEreaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDIyNDM5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzowNzoyNlrOHeQsgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzowNzoyNlrOHeQsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5Mjg2Ng==", "bodyText": "Sneaky...", "url": "https://github.com/DataDog/dd-trace-java/pull/1960#discussion_r501492866", "createdAt": "2020-10-08T07:07:26Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package datadog.trace.agent.tooling.context;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.BOOTSTRAP_CLASSLOADER;\n+\n+import datadog.trace.agent.tooling.HelperInjector;\n+import datadog.trace.agent.tooling.Utils;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.agent.builder.AgentBuilder;\n+import net.bytebuddy.asm.AsmVisitorWrapper;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import net.bytebuddy.utility.JavaModule;\n+\n+final class ContextStoreUtils {\n+\n+  static AgentBuilder.Transformer wrapVisitor(final AsmVisitorWrapper visitor) {\n+    return new AgentBuilder.Transformer() {\n+      @Override\n+      public DynamicType.Builder<?> transform(\n+          final DynamicType.Builder<?> builder,\n+          final TypeDescription typeDescription,\n+          final ClassLoader classLoader,\n+          final JavaModule module) {\n+        return builder.visit(visitor);\n+      }\n+    };\n+  }\n+\n+  static Map<String, String> unpackContextStore(\n+      Map<ElementMatcher<ClassLoader>, Map<String, String>> matchedContextStores) {\n+    if (matchedContextStores.isEmpty()) {\n+      return Collections.emptyMap();\n+    } else if (matchedContextStores.size() == 1) {\n+      return matchedContextStores.entrySet().iterator().next().getValue();\n+    } else {\n+      Map<String, String> contextStore = new HashMap<>();\n+      for (Map.Entry<ElementMatcher<ClassLoader>, Map<String, String>> matcherAndStores :\n+          matchedContextStores.entrySet()) {\n+        contextStore.putAll(matcherAndStores.getValue());\n+      }\n+      return contextStore;\n+    }\n+  }\n+\n+  /** Get transformer that forces helper injection onto bootstrap classloader. */\n+  static AgentBuilder.Transformer bootstrapHelperInjector(\n+      final Collection<DynamicType.Unloaded<?>> types) {\n+    // TODO: Better to pass through the context of the Instrumenter\n+    return new AgentBuilder.Transformer() {\n+      // historical quirk - this used to be an anonymous class\n+      // in FieldBackedProvider and was called with getClass().getSimpleName()\n+      // which (unintentionally?) evaluated to an empty string - maintain this\n+      // behaviour", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc01a446939b0c5094662744edb1d47361acbed6"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4681, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}