{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Mzg0Mjkx", "number": 1468, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozODozNVrOD91Ejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowMDoyOVrOD-Qsug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU5MjQ2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozODozNVrOGXjrVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMDoyNFrOGYEpyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n          \n          \n            \n              private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427354966", "createdAt": "2020-05-19T14:38:35Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5NTI0Mg==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427895242", "createdAt": "2020-05-20T10:10:24Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDk2Ng=="}, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTkyODAwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo1MDo0MlrOGXnCGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMDo0NFrOGYEqgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTk0NQ==", "bodyText": "This looks quite suspicious - force creating an array when the session is always bound to a single thread.\nI know that it is used in the sample() method but it would feel more appropriate to have a sampler class factored out which would maintain a set of thread IDs which are supposed to be sampled (maybe wrapped as Session instances if that makes sense).", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427409945", "createdAt": "2020-05-19T15:50:42Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5NTQyNQ==", "bodyText": "moved to JMXSampler", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427895425", "createdAt": "2020-05-20T10:10:44Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwOTk0NQ=="}, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTk5NDEwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjowNTo0N1rOGXnsew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMDo1NlrOGYEq5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMDc5NQ==", "bodyText": "Passing around a map which is essentially an internal state of the JMXSessionFactory does not look really nice.\nCan't this be resolved with a session having active flag for true when refCount > 0 and a callback to the instantiating factory to notify that a session has become inactive when the flag is flipped. The factory would then do a concurrent update of the map depending on the current value of the active flag, thus preventing data race when a session is brought back to life.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427420795", "createdAt": "2020-05-19T16:05:47Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5NTUyNw==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427895527", "createdAt": "2020-05-20T10:10:56Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMDc5NQ=="}, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTk5NTg5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjowNjowOFrOGXntkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMTowM1rOGYErNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMTA3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");\n          \n          \n            \n                  log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427421075", "createdAt": "2020-05-19T16:06:08Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };\n+    this.sink = sinkSupplier.get();\n+    this.sessions = sessions;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5NTYwNw==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427895607", "createdAt": "2020-05-20T10:11:03Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };\n+    this.sink = sinkSupplier.get();\n+    this.sessions = sessions;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMTA3NQ=="}, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjAwMjc5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjowNzo1M1rOGXnyVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxMToxNFrOGYErlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMjI5Mw==", "bodyText": "A bit of bike-shedding but a name less bound to the actual implementation would be nice - something like activate or use?", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427422293", "createdAt": "2020-05-19T16:07:53Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };\n+    this.sink = sinkSupplier.get();\n+    this.sessions = sessions;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");\n+    }\n+    start();\n+  }\n+\n+  public void close() {\n+    sessions.computeIfPresent(threadIds[0], this::closeSession);\n+  }\n+\n+  private JMXSession closeSession(Long key, JMXSession jmxSession) {\n+    int current = jmxSession.decRefCount();\n+    if (current == 0) {\n+      executor.shutdown();\n+      byte[] buffer = sink.flush();\n+      log.info(\"Closing session, flushing {} bytes\", buffer.length);\n+      return null;\n+    }\n+    return jmxSession;\n+  }\n+\n+  void incRefCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5NTcwMA==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r427895700", "createdAt": "2020-05-20T10:11:14Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSession.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import datadog.trace.profiling.Session;\n+import java.lang.management.ThreadInfo;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSession implements Session {\n+  private final String id;\n+  private final long[] threadIds;\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final Map<Long, JMXSession> sessions;\n+  private final AtomicInteger refCount = new AtomicInteger();\n+  private final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\n+\n+  public JMXSession(String id, long threadId, Supplier<StackTraceSink> sinkSupplier, Map<Long, JMXSession> sessions) {\n+    this.id = id;\n+    this.threadIds = new long[] { threadId };\n+    this.sink = sinkSupplier.get();\n+    this.sessions = sessions;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is oo op. It will not provide thread stacks.\");\n+    }\n+    start();\n+  }\n+\n+  public void close() {\n+    sessions.computeIfPresent(threadIds[0], this::closeSession);\n+  }\n+\n+  private JMXSession closeSession(Long key, JMXSession jmxSession) {\n+    int current = jmxSession.decRefCount();\n+    if (current == 0) {\n+      executor.shutdown();\n+      byte[] buffer = sink.flush();\n+      log.info(\"Closing session, flushing {} bytes\", buffer.length);\n+      return null;\n+    }\n+    return jmxSession;\n+  }\n+\n+  void incRefCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyMjI5Mw=="}, "originalCommit": {"oid": "e91ee3405eb6dfb7c6f01d681533f84ed5c80a6c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjA5NjcyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1NTo1NVrOGYP7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo0MDozMFrOGYSADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDA1MQ==", "bodyText": "Please, package private only. I guess this class should not be used outside of MLT directly.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428080051", "createdAt": "2020-05-20T14:55:55Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import java.lang.management.ThreadInfo;\n+import java.util.Arrays;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSampler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMzkzMg==", "bodyText": "done", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428113932", "createdAt": "2020-05-20T15:40:30Z", "author": {"login": "jpbempel"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import java.lang.management.ThreadInfo;\n+import java.util.Arrays;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSampler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDA1MQ=="}, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjEwMjA0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1NzowNlrOGYP_Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1NzowNlrOGYP_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MDk3MQ==", "bodyText": "Can you add some comments about pre/post-conditions? Like that a thread ID will always be added so calling it multiple time will result in multiple occurrences of the same ID etc.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428080971", "createdAt": "2020-05-20T14:57:06Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSampler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.core.util.NoneThreadStackProvider;\n+import datadog.trace.core.util.ThreadStackAccess;\n+import datadog.trace.core.util.ThreadStackProvider;\n+import java.lang.management.ThreadInfo;\n+import java.util.Arrays;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSampler {\n+  private final StackTraceSink sink;\n+  private final ThreadStackProvider provider;\n+  private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n+  private long samplingCount;\n+  private AtomicReference<long[]> threadIds = new AtomicReference<>();\n+\n+  public JMXSampler(StackTraceSink sink) {\n+    this.sink = sink;\n+    provider = ThreadStackAccess.getCurrentThreadStackProvider();\n+    if (provider instanceof NoneThreadStackProvider) {\n+      log.warn(\"ThreadStack provider is no op. It will not provide thread stacks.\");\n+    }\n+    // TODO period as parameter\n+    executor.scheduleAtFixedRate(this::sample, 0, 10, TimeUnit.MILLISECONDS);\n+  }\n+\n+  public void shutdown() {\n+    executor.shutdown();\n+    byte[] buffer = sink.flush();\n+    log.info(\"Flushing remaining {} bytes\", buffer.length);\n+  }\n+\n+  public void addThreadId(long threadId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjExODk4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowMDoyOVrOGYQKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowMDoyOVrOGYQKUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4Mzc5Mg==", "bodyText": "I think that the interplay between closeSession() and createSession in regards of thread safety should be documented here.\nIf I am not missing something the code is data-race free thanks to closeSession being run as the ConcurrentHashMap computation which is guaranteed to run at most once and atomically. Unfortunately, this is not a general characteristic of all ConcurrentMap types so it would be good to have it documented for future maintenance.", "url": "https://github.com/DataDog/dd-trace-java/pull/1468#discussion_r428083792", "createdAt": "2020-05-20T15:00:29Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/JMXSessionFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.datadog.profiling.mlt;\n+\n+import datadog.trace.profiling.Session;\n+import datadog.trace.profiling.SessionFactory;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JMXSessionFactory implements SessionFactory {\n+  private final Map<Long, JMXSession> jmxSessions = new ConcurrentHashMap<>();\n+  private final JMXSampler sampler;\n+\n+  public JMXSessionFactory(StackTraceSink sink) {\n+    this.sampler = new JMXSampler(sink);\n+  }\n+\n+  @Override\n+  public Session createSession(String id, Thread thread) {\n+    long threadId = thread.getId();\n+    JMXSession session =\n+        jmxSessions.computeIfAbsent(threadId, key -> createNewSession(id, threadId));\n+    session.activate();\n+    return session;\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    sampler.shutdown();\n+  }\n+\n+  private JMXSession createNewSession(String id, long threadId) {\n+    sampler.addThreadId(threadId);\n+    return new JMXSession(id, threadId, this::cleanup);\n+  }\n+\n+  private void cleanup(JMXSession session) {\n+    jmxSessions.computeIfPresent(session.getThreadId(), this::closeSession);\n+  }\n+\n+  private JMXSession closeSession(Long key, JMXSession jmxSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc830ff319a0cd49fbbff4765691a92a319c70"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 333, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}