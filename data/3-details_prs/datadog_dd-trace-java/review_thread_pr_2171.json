{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTM1NTQ1", "number": 2171, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1Nzo1NVrOFDCBYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NDoxOFrOFDahFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzIzMTY4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1Nzo1NVrOICfL4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNjo1Nzo1NVrOICfL4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ3OTAwOA==", "bodyText": "I think toString should also be included, along with getters and setters.", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r539479008", "createdAt": "2020-12-09T16:57:55Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -147,7 +148,11 @@ public TracerClassInstrumentation(final String className, final Set<String> meth\n       ElementMatcher.Junction<MethodDescription> methodMatchers = null;\n       for (final String methodName : methodNames) {\n         if (methodMatchers == null) {\n-          methodMatchers = named(methodName);\n+          if (methodName.equals(\"*\")) {\n+            methodMatchers = not(isAbstract()).and(noneOf(\"hashCode\", \"equals\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c36c63f4baff6c06722e77b94d0f90bcd5a9578"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc4MDkyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowOToyN1rOIC1yrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxODozMFrOIDLcpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ==", "bodyText": "I thought spotless check should fail on star imports ...", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r539849391", "createdAt": "2020-12-10T05:09:27Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2MzQ1Ng==", "bodyText": "it's a limitation of spotless, but you can add a custom rule for this: diffplug/spotless#240 (comment)", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540063456", "createdAt": "2020-12-10T10:43:25Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ=="}, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NDQwOA==", "bodyText": "@ziquanmiao could you change this wildcard import to explicit imports of the used types?", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540064408", "createdAt": "2020-12-10T10:44:49Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ=="}, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwNDE5Nw==", "bodyText": "ill fix and explicitly import the ones I use", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540204197", "createdAt": "2020-12-10T14:18:30Z", "author": {"login": "ziquanmiao"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -2,7 +2,7 @@\n \n import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n-import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTM5MQ=="}, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTgyNjcwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/trace-annotation/src/test/groovy/TraceConfigTest.groovy", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToyODo0M1rOIC2LQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTozMzowNVrOID97XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1NTY4MA==", "bodyText": "Do getters suppose to be instrumented under '*' pattern or no ?", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r539855680", "createdAt": "2020-12-10T05:28:43Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/test/groovy/TraceConfigTest.groovy", "diffHunk": "@@ -19,18 +19,135 @@ class TraceConfigTest extends AgentTestRunner {\n     }\n   }\n \n+  class ConfigTracedCallable2 implements Callable<String> {\n+    @Override\n+    String call() throws Exception {\n+      return call_helper()\n+    }\n+\n+    String call_helper() throws Exception {\n+      return \"Hello2!\"\n+    }\n+  }\n+\n+  interface Mammal {\n+    void setName(String newName)\n+    void setHeight(int newHeight)\n+  }\n+\n+  class Human implements Mammal {\n+    String name\n+    String height\n+\n+    void setName(String newName){\n+      name = newName\n+    }\n+    void setHeight(int newHeight){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzMTI2MA==", "bodyText": "i chatted with tyler about this --\nif i didnt ignore getters/setters, then in the implementation would instrument custom groovy classes as well, so it was a question whether to write accommodations for groovy or ignore getters/setters and defer customers to our profiling product if they were interested in those methods", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r541031260", "createdAt": "2020-12-11T15:33:05Z", "author": {"login": "ziquanmiao"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/test/groovy/TraceConfigTest.groovy", "diffHunk": "@@ -19,18 +19,135 @@ class TraceConfigTest extends AgentTestRunner {\n     }\n   }\n \n+  class ConfigTracedCallable2 implements Callable<String> {\n+    @Override\n+    String call() throws Exception {\n+      return call_helper()\n+    }\n+\n+    String call_helper() throws Exception {\n+      return \"Hello2!\"\n+    }\n+  }\n+\n+  interface Mammal {\n+    void setName(String newName)\n+    void setHeight(int newHeight)\n+  }\n+\n+  class Human implements Mammal {\n+    String name\n+    String height\n+\n+    void setName(String newName){\n+      name = newName\n+    }\n+    void setHeight(int newHeight){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1NTY4MA=="}, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTIxNzY1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0ODoyNFrOIDDD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo0ODoyNFrOIDDD_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2NjgxNA==", "bodyText": "This now accepts spaces in package/class names which doesn't sound right", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540066814", "createdAt": "2020-12-10T10:48:24Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -32,8 +32,9 @@\n @AutoService(Instrumenter.class)\n public class TraceConfigInstrumentation implements Instrumenter {\n \n-  static final String PACKAGE_CLASS_NAME_REGEX = \"[\\\\w.\\\\$]+\";\n-  private static final String METHOD_LIST_REGEX = \"\\\\s*(?:\\\\w+\\\\s*,)*\\\\s*(?:\\\\w+\\\\s*,?)\\\\s*\";\n+  static final String PACKAGE_CLASS_NAME_REGEX = \"[\\\\w .\\\\$]+\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTI0NTAyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1NDoxOFrOIDDTsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNjowODo1OFrOIDqhUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MDgzNA==", "bodyText": "I'd also add isFinalizer because I've seen issues intercepting that in the past on other AOP systems", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540070834", "createdAt": "2020-12-10T10:54:18Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -147,7 +148,17 @@ public TracerClassInstrumentation(final String className, final Set<String> meth\n       ElementMatcher.Junction<MethodDescription> methodMatchers = null;\n       for (final String methodName : methodNames) {\n         if (methodMatchers == null) {\n-          methodMatchers = named(methodName);\n+          if (methodName.equals(\"*\")) {\n+            methodMatchers =\n+                not(\n+                    isHashCode()\n+                        .or(isEquals())\n+                        .or(isToString())\n+                        .or(isConstructor())\n+                        .or(isSynthetic()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcxMzI5OQ==", "bodyText": "and test that calls each of these method types and no span is created", "url": "https://github.com/DataDog/dd-trace-java/pull/2171#discussion_r540713299", "createdAt": "2020-12-11T06:08:58Z", "author": {"login": "lpriima"}, "path": "dd-java-agent/instrumentation/trace-annotation/src/main/java/datadog/trace/instrumentation/trace_annotation/TraceConfigInstrumentation.java", "diffHunk": "@@ -147,7 +148,17 @@ public TracerClassInstrumentation(final String className, final Set<String> meth\n       ElementMatcher.Junction<MethodDescription> methodMatchers = null;\n       for (final String methodName : methodNames) {\n         if (methodMatchers == null) {\n-          methodMatchers = named(methodName);\n+          if (methodName.equals(\"*\")) {\n+            methodMatchers =\n+                not(\n+                    isHashCode()\n+                        .or(isEquals())\n+                        .or(isToString())\n+                        .or(isConstructor())\n+                        .or(isSynthetic()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA3MDgzNA=="}, "originalCommit": {"oid": "d05ba728d9b1eb9cab05b64952483b174817770c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4505, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}