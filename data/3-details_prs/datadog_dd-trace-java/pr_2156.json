{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMjk0NzM4", "number": 2156, "title": "Datastax Cassandra 4 instrumentation", "bodyText": "Instrumentation for cassandra 4.  The large API changes between versions means not much can be salvaged from the cassandra 3 instrumentation other than the test.", "createdAt": "2020-12-02T21:16:57Z", "url": "https://github.com/DataDog/dd-trace-java/pull/2156", "merged": true, "mergeCommit": {"oid": "7d6a41b64f2bc234ba3d96b4aefa921f0b44c979"}, "closed": true, "closedAt": "2020-12-03T19:16:42Z", "author": {"login": "randomanderson"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiVfuRgFqTU0MzI1NDc1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdimXyTABqjQwNjg2OTIwNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjU0NzUz", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#pullrequestreview-543254753", "createdAt": "2020-12-02T21:33:18Z", "commit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTozMzoxOFrOH9vBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTozMzoxOFrOH9vBOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NTU0NQ==", "bodyText": "Should this span be the active span at this time? If so, this lambda wouldn't need to capture here.", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#discussion_r534495545", "createdAt": "2020-12-02T21:33:18Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/datastax-cassandra-4/src/main/java8/datadog/trace/instrumentation/datastax/cassandra/TracingSession.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package datadog.trace.instrumentation.datastax.cassandra;\n+\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.activateSpan;\n+import static datadog.trace.bootstrap.instrumentation.api.AgentTracer.startSpan;\n+import static datadog.trace.instrumentation.datastax.cassandra.CassandraClientDecorator.CASSANDRA_EXECUTE;\n+import static datadog.trace.instrumentation.datastax.cassandra.CassandraClientDecorator.DECORATE;\n+import static datadog.trace.util.AgentThreadFactory.AgentThread.TRACE_CASSANDRA_ASYNC_SESSION;\n+\n+import com.datastax.oss.driver.api.core.CqlSession;\n+import com.datastax.oss.driver.api.core.cql.AsyncResultSet;\n+import com.datastax.oss.driver.api.core.cql.BoundStatement;\n+import com.datastax.oss.driver.api.core.cql.ResultSet;\n+import com.datastax.oss.driver.api.core.cql.SimpleStatement;\n+import com.datastax.oss.driver.api.core.cql.Statement;\n+import com.datastax.oss.driver.api.core.session.Request;\n+import com.datastax.oss.driver.api.core.session.Session;\n+import com.datastax.oss.driver.api.core.type.reflect.GenericType;\n+import com.datastax.oss.driver.internal.core.session.SessionWrapper;\n+import datadog.trace.bootstrap.instrumentation.api.AgentScope;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.util.AgentThreadFactory;\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class TracingSession extends SessionWrapper implements CqlSession {\n+  private static final ExecutorService EXECUTOR_SERVICE =\n+      Executors.newCachedThreadPool(new AgentThreadFactory(TRACE_CASSANDRA_ASYNC_SESSION));\n+\n+  public TracingSession(final Session session) {\n+    super(session);\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <RequestT extends Request, ResultT> ResultT execute(\n+      @NonNull RequestT request, @NonNull GenericType<ResultT> resultType) {\n+\n+    if (request instanceof Statement && resultType.equals(Statement.SYNC)) {\n+      return (ResultT) wrapSyncRequest((Statement) request);\n+    } else if (request instanceof Statement && resultType.equals(Statement.ASYNC)) {\n+      return (ResultT) wrapAsyncRequest((Statement) request);\n+    } else {\n+      // PrepareRequest or unknown request: just forward to delegate\n+      return getDelegate().execute(request, resultType);\n+    }\n+  }\n+\n+  private ResultSet wrapSyncRequest(Statement request) {\n+    AgentSpan span = startSpan(CASSANDRA_EXECUTE);\n+\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, getDelegate());\n+    DECORATE.onStatement(span, getQuery(request));\n+\n+    try (AgentScope scope = activateSpan(span)) {\n+      ResultSet resultSet = getDelegate().execute(request, Statement.SYNC);\n+      DECORATE.onResponse(span, resultSet);\n+      DECORATE.beforeFinish(span);\n+\n+      return resultSet;\n+    } catch (Exception e) {\n+      DECORATE.onError(span, e);\n+      DECORATE.beforeFinish(span);\n+\n+      throw e;\n+    } finally {\n+      span.finish();\n+    }\n+  }\n+\n+  private CompletionStage<AsyncResultSet> wrapAsyncRequest(Statement request) {\n+    AgentSpan span = startSpan(CASSANDRA_EXECUTE);\n+\n+    DECORATE.afterStart(span);\n+    DECORATE.onConnection(span, getDelegate());\n+    DECORATE.onStatement(span, getQuery(request));\n+\n+    try (AgentScope scope = activateSpan(span)) {\n+      CompletionStage<AsyncResultSet> completionStage =\n+          getDelegate().execute(request, Statement.ASYNC);\n+\n+      return completionStage.whenComplete(\n+          (result, throwable) -> {\n+            if (result != null) {\n+              DECORATE.onResponse(span, result);\n+            }\n+\n+            if (throwable instanceof CompletionException) {\n+              throwable = throwable.getCause();\n+            }\n+            DECORATE.onError(span, throwable);\n+            span.finish();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjU1OTUy", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#pullrequestreview-543255952", "createdAt": "2020-12-02T21:35:05Z", "commit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTozNTowNVrOH9vE6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTozNTowNVrOH9vE6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NjQ5MQ==", "bodyText": "may or may not be worth it, but this will autobox, RadixTreeCache.PORTS.get(((InetSocketAddress) address).getPort()) works around this.", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#discussion_r534496491", "createdAt": "2020-12-02T21:35:05Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/datastax-cassandra-4/src/main/java8/datadog/trace/instrumentation/datastax/cassandra/CassandraClientDecorator.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package datadog.trace.instrumentation.datastax.cassandra;\n+\n+import com.datastax.oss.driver.api.core.cql.AsyncResultSet;\n+import com.datastax.oss.driver.api.core.cql.ResultSet;\n+import com.datastax.oss.driver.api.core.metadata.Node;\n+import com.datastax.oss.driver.api.core.servererrors.CoordinatorException;\n+import com.datastax.oss.driver.api.core.session.Session;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.InternalSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.Objects;\n+\n+public class CassandraClientDecorator extends DBTypeProcessingDatabaseClientDecorator<Session> {\n+\n+  public static final CharSequence CASSANDRA_EXECUTE =\n+      UTF8BytesString.createConstant(\"cassandra.execute\");\n+  public static final CharSequence JAVA_CASSANDRA =\n+      UTF8BytesString.createConstant(\"java-cassandra\");\n+\n+  public static final CassandraClientDecorator DECORATE = new CassandraClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"cassandra\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"cassandra\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return JAVA_CASSANDRA;\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return InternalSpanTypes.CASSANDRA;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"cassandra\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final Session session) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final Session session) {\n+    return session.getKeyspace().map(Objects::toString).orElse(null);\n+  }\n+\n+  @Override\n+  protected String dbHostname(Session session) {\n+    return null;\n+  }\n+\n+  public AgentSpan onResponse(final AgentSpan span, final ResultSet result) {\n+    if (result != null) {\n+      return onResponse(span, result.getExecutionInfo().getCoordinator());\n+    }\n+\n+    return span;\n+  }\n+\n+  public AgentSpan onResponse(final AgentSpan span, final AsyncResultSet result) {\n+    if (result != null) {\n+      return onResponse(span, result.getExecutionInfo().getCoordinator());\n+    }\n+\n+    return span;\n+  }\n+\n+  @Override\n+  public AgentSpan onError(final AgentSpan span, final Throwable throwable) {\n+    super.onError(span, throwable);\n+\n+    if (throwable instanceof CoordinatorException) {\n+      onResponse(span, ((CoordinatorException) throwable).getCoordinator());\n+    }\n+\n+    return span;\n+  }\n+\n+  private AgentSpan onResponse(AgentSpan span, Node coordinator) {\n+    if (coordinator != null) {\n+      SocketAddress address = coordinator.getEndPoint().resolve();\n+      if (address instanceof InetSocketAddress) {\n+        span.setTag(Tags.PEER_PORT, ((InetSocketAddress) address).getPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjU5MzE4", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#pullrequestreview-543259318", "createdAt": "2020-12-02T21:40:03Z", "commit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMjcxMDY2", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#pullrequestreview-543271066", "createdAt": "2020-12-02T21:57:52Z", "commit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTo1Nzo1M1rOH9v1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjowNjo0NFrOH9wIvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwODg5OQ==", "bodyText": "Do we want to add a secondary name to distinguish 3 from 4?", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#discussion_r534508899", "createdAt": "2020-12-02T21:57:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/datastax-cassandra-4/src/main/java/datadog/trace/instrumentation/datastax/cassandra/CassandraClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.datastax.cassandra;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class CassandraClientInstrumentation extends Instrumenter.Default {\n+\n+  public CassandraClientInstrumentation() {\n+    super(\"cassandra\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUwOTk2MA==", "bodyText": "Ideally the package name should distinguish to avoid potential naming conflicts with 3. (Maybe update the 3.x package too?)", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#discussion_r534509960", "createdAt": "2020-12-02T21:59:20Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/datastax-cassandra-4/src/main/java/datadog/trace/instrumentation/datastax/cassandra/CassandraClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.datastax.cassandra;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxMTAxMA==", "bodyText": "Since your advice is focused on the return type instead of arguments, consider a return type matcher (perhaps instead of the argument matcher).", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#discussion_r534511010", "createdAt": "2020-12-02T22:01:20Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/datastax-cassandra-4/src/main/java/datadog/trace/instrumentation/datastax/cassandra/CassandraClientInstrumentation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package datadog.trace.instrumentation.datastax.cassandra;\n+\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.isStatic;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public class CassandraClientInstrumentation extends Instrumenter.Default {\n+\n+  public CassandraClientInstrumentation() {\n+    super(\"cassandra\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return named(\"com.datastax.oss.driver.internal.core.session.DefaultSession\");\n+  }\n+\n+  @Override\n+  public String[] helperClassNames() {\n+    return new String[] {\n+      packageName + \".CassandraClientDecorator\", packageName + \".TracingSession\"\n+    };\n+  }\n+\n+  @Override\n+  public Map<? extends ElementMatcher<? super MethodDescription>, String> transformers() {\n+    return singletonMap(\n+        isMethod().and(named(\"init\")).and(isStatic()).and(takesArguments(3)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxMzg1NA==", "bodyText": "@richardstartin would it be worth adding special logic for this in the setTag(String,int) method?", "url": "https://github.com/DataDog/dd-trace-java/pull/2156#discussion_r534513854", "createdAt": "2020-12-02T22:06:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/datastax-cassandra-4/src/main/java8/datadog/trace/instrumentation/datastax/cassandra/CassandraClientDecorator.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package datadog.trace.instrumentation.datastax.cassandra;\n+\n+import com.datastax.oss.driver.api.core.cql.AsyncResultSet;\n+import com.datastax.oss.driver.api.core.cql.ResultSet;\n+import com.datastax.oss.driver.api.core.metadata.Node;\n+import com.datastax.oss.driver.api.core.servererrors.CoordinatorException;\n+import com.datastax.oss.driver.api.core.session.Session;\n+import datadog.trace.bootstrap.instrumentation.api.AgentSpan;\n+import datadog.trace.bootstrap.instrumentation.api.InternalSpanTypes;\n+import datadog.trace.bootstrap.instrumentation.api.Tags;\n+import datadog.trace.bootstrap.instrumentation.api.UTF8BytesString;\n+import datadog.trace.bootstrap.instrumentation.decorator.DBTypeProcessingDatabaseClientDecorator;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.Objects;\n+\n+public class CassandraClientDecorator extends DBTypeProcessingDatabaseClientDecorator<Session> {\n+\n+  public static final CharSequence CASSANDRA_EXECUTE =\n+      UTF8BytesString.createConstant(\"cassandra.execute\");\n+  public static final CharSequence JAVA_CASSANDRA =\n+      UTF8BytesString.createConstant(\"java-cassandra\");\n+\n+  public static final CassandraClientDecorator DECORATE = new CassandraClientDecorator();\n+\n+  @Override\n+  protected String[] instrumentationNames() {\n+    return new String[] {\"cassandra\"};\n+  }\n+\n+  @Override\n+  protected String service() {\n+    return \"cassandra\";\n+  }\n+\n+  @Override\n+  protected CharSequence component() {\n+    return JAVA_CASSANDRA;\n+  }\n+\n+  @Override\n+  protected CharSequence spanType() {\n+    return InternalSpanTypes.CASSANDRA;\n+  }\n+\n+  @Override\n+  protected String dbType() {\n+    return \"cassandra\";\n+  }\n+\n+  @Override\n+  protected String dbUser(final Session session) {\n+    return null;\n+  }\n+\n+  @Override\n+  protected String dbInstance(final Session session) {\n+    return session.getKeyspace().map(Objects::toString).orElse(null);\n+  }\n+\n+  @Override\n+  protected String dbHostname(Session session) {\n+    return null;\n+  }\n+\n+  public AgentSpan onResponse(final AgentSpan span, final ResultSet result) {\n+    if (result != null) {\n+      return onResponse(span, result.getExecutionInfo().getCoordinator());\n+    }\n+\n+    return span;\n+  }\n+\n+  public AgentSpan onResponse(final AgentSpan span, final AsyncResultSet result) {\n+    if (result != null) {\n+      return onResponse(span, result.getExecutionInfo().getCoordinator());\n+    }\n+\n+    return span;\n+  }\n+\n+  @Override\n+  public AgentSpan onError(final AgentSpan span, final Throwable throwable) {\n+    super.onError(span, throwable);\n+\n+    if (throwable instanceof CoordinatorException) {\n+      onResponse(span, ((CoordinatorException) throwable).getCoordinator());\n+    }\n+\n+    return span;\n+  }\n+\n+  private AgentSpan onResponse(AgentSpan span, Node coordinator) {\n+    if (coordinator != null) {\n+      SocketAddress address = coordinator.getEndPoint().resolve();\n+      if (address instanceof InetSocketAddress) {\n+        span.setTag(Tags.PEER_PORT, ((InetSocketAddress) address).getPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NjQ5MQ=="}, "originalCommit": {"oid": "b2b674f3eea416f36bde632dcea1234da5d929f2"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6615cdc2d806866d4404faac237db5845593892c", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/6615cdc2d806866d4404faac237db5845593892c", "committedDate": "2020-12-02T22:19:47Z", "message": "Bump up the timeout"}, "afterCommit": {"oid": "1188d4e9f549f0b4b34e403ee35e26e44db4ab50", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1188d4e9f549f0b4b34e403ee35e26e44db4ab50", "committedDate": "2020-12-02T22:51:47Z", "message": "Move package to datastax.cassandra4"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83ffa46d82cb3c6dc98a90cf7e4fd6eb10ebf875", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/83ffa46d82cb3c6dc98a90cf7e4fd6eb10ebf875", "committedDate": "2020-12-03T00:03:50Z", "message": "fix bug with jdk15"}, "afterCommit": {"oid": "adb9c26d3f551ab2ffa930f1552796588949a276", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/adb9c26d3f551ab2ffa930f1552796588949a276", "committedDate": "2020-12-03T03:15:24Z", "message": "fix bug with jdk15"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adb9c26d3f551ab2ffa930f1552796588949a276", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/adb9c26d3f551ab2ffa930f1552796588949a276", "committedDate": "2020-12-03T03:15:24Z", "message": "fix bug with jdk15"}, "afterCommit": {"oid": "c93f1c0e931e98ba586bf9ab55013e8f5fa85f9f", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c93f1c0e931e98ba586bf9ab55013e8f5fa85f9f", "committedDate": "2020-12-03T03:30:58Z", "message": "fix bug with jdk15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c488deef87196fc3b847121ea25cb018a29b4dfd", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c488deef87196fc3b847121ea25cb018a29b4dfd", "committedDate": "2020-12-03T17:12:52Z", "message": "Datastax Cassandra 4 instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8c6065f82c0e2bac368884a51caa457caba3d7", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5b8c6065f82c0e2bac368884a51caa457caba3d7", "committedDate": "2020-12-03T17:12:52Z", "message": "Bump up the timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c500e6449d5dc40d7a0f779f25d529e2828890f", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/5c500e6449d5dc40d7a0f779f25d529e2828890f", "committedDate": "2020-12-03T17:12:52Z", "message": "Add return type matcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004a303b60276ef661681d515ecaaf45790974d9", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/004a303b60276ef661681d515ecaaf45790974d9", "committedDate": "2020-12-03T17:12:53Z", "message": "Move package to datastax.cassandra4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62fe3d85d27a392a54173d896653b9bf9558a0b9", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/62fe3d85d27a392a54173d896653b9bf9558a0b9", "committedDate": "2020-12-03T17:12:53Z", "message": "fix bug with jdk15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165b84092b539aa14058116c8aed6877947bada9", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/165b84092b539aa14058116c8aed6877947bada9", "committedDate": "2020-12-03T17:12:53Z", "message": "Use onPeerConnection that sets port"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c93f1c0e931e98ba586bf9ab55013e8f5fa85f9f", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c93f1c0e931e98ba586bf9ab55013e8f5fa85f9f", "committedDate": "2020-12-03T03:30:58Z", "message": "fix bug with jdk15"}, "afterCommit": {"oid": "165b84092b539aa14058116c8aed6877947bada9", "author": {"user": {"login": "randomanderson", "name": "Laplie Anderson"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/165b84092b539aa14058116c8aed6877947bada9", "committedDate": "2020-12-03T17:12:53Z", "message": "Use onPeerConnection that sets port"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2924, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}