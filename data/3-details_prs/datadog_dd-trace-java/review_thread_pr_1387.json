{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjA5MjIw", "number": 1387, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNjo0MlrODz4spg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowOToxNVrODz7KlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzMyOTAyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyNjo0MlrOGIkFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjoxODoxOVrOGIp-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw==", "bodyText": "Since you don't want to wrap it, can you instead instrument HttpServletResponse.setStatus (and other relevant methods) to capture the status in the contextStore directly instead of putting it into the request?", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411632913", "createdAt": "2020-04-20T19:26:42Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNzk5OQ==", "bodyText": "What class do you think I should use as a ContextStore? Given that this is a map, I can't use HttpServletResponse for a second type from these instrumentations", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411637999", "createdAt": "2020-04-20T19:35:27Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2MTE2NA==", "bodyText": "Sorry I should expound on this more, because the Servlet2Advice class also has to interact with this context store, It would result in a duplicate key entry. I could create a wrapper object. I could probably find a way to trick things into supporting both", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411661164", "createdAt": "2020-04-20T20:14:18Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNTM4Nw==", "bodyText": "I don't think there's a problem in using a single key with two different values in contextStore.  Under the hood, they should be stored in distinct fields based off the value type.  (In other words, you should be able to use <HttpServletResponse, Integer> based on my understanding.)", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411715387", "createdAt": "2020-04-20T21:48:53Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxNjUyMw==", "bodyText": "Right, what I mean is, in Servlet2Instrumentation I can't add both, which is needed as Servlet2Advice uses both", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411716523", "createdAt": "2020-04-20T21:51:00Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyMzM5MQ==", "bodyText": "ah, I see.  What about using ServletResponse for one and HttpServletResponse for the other?", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411723391", "createdAt": "2020-04-20T22:05:10Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcyOTUwOQ==", "bodyText": "Yeah, I did that but it felt worse than a wrapper would be. I'll commit and we can discuss", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411729509", "createdAt": "2020-04-20T22:18:19Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2ResponseStatusInstrumentation.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package datadog.trace.instrumentation.servlet2;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.safeHasSuperType;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.not;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+\n+@AutoService(Instrumenter.class)\n+public final class Servlet2ResponseStatusInstrumentation extends Instrumenter.Default {\n+  public Servlet2ResponseStatusInstrumentation() {\n+    super(\"servlet\", \"servlet-2\");\n+  }\n+\n+  // this is required to make sure servlet 2 instrumentation won't apply to servlet 3\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    return not(hasClassesNamed(\"javax.servlet.AsyncEvent\", \"javax.servlet.AsyncListener\"));\n+  }\n+\n+  @Override\n+  public ElementMatcher<? super TypeDescription> typeMatcher() {\n+    return safeHasSuperType(named(\"javax.servlet.http.HttpServletResponse\"));\n+  }\n+\n+  @Override\n+  public Map<String, String> contextStore() {\n+    return singletonMap(\n+        \"javax.servlet.http.HttpServletResponse\", \"javax.servlet.http.HttpServletRequest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjkxMw=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzM0MDc2OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2Decorator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyOTozOFrOGIkL9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxOToyOTozOFrOGIkL9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDY3OQ==", "bodyText": "with the other change, this would likely need to be changed to just Integer and pass in the status code.", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411634679", "createdAt": "2020-04-20T19:29:38Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2Decorator.java", "diffHunk": "@@ -50,11 +49,10 @@ protected Integer peerPort(final HttpServletRequest httpServletRequest) {\n   }\n \n   @Override\n-  protected Integer status(final ServletResponse httpServletResponse) {\n-    if (httpServletResponse instanceof StatusSavingHttpServletResponseWrapper) {\n-      return ((StatusSavingHttpServletResponseWrapper) httpServletResponse).status;\n+  protected Integer status(final HttpServletRequest httpServletRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzczMzMzOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2Advice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMTowOToxNVrOGInzBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjoyMDo1NVrOGIqDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MzgzMA==", "bodyText": "I'm assuming HttpServletResponse.SC_OK is typed as int, but this did look strange at first.\nLittle known Java detail starting in Java 7, you can cast from Object directly to int.  That might make this a bit more clear.\nif ( (int)request.getAttribute(\"dd.http-status\") == HttpServletResponse.SC_OK ) { ... }", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411693830", "createdAt": "2020-04-20T21:09:15Z", "author": {"login": "dougqh"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -89,11 +87,11 @@ public static void stopSpan(\n       return;\n     }\n     final AgentSpan span = scope.span();\n-    DECORATE.onResponse(span, response);\n+    if (request instanceof HttpServletRequest) {\n+      DECORATE.onResponse(span, (HttpServletRequest) request);\n+    }\n     if (throwable != null) {\n-      if (response instanceof StatusSavingHttpServletResponseWrapper\n-          && ((StatusSavingHttpServletResponseWrapper) response).status\n-              == HttpServletResponse.SC_OK) {\n+      if ((Integer) request.getAttribute(\"dd.http-status\") == HttpServletResponse.SC_OK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczMDc1Ng==", "bodyText": "The cast is now gone, but thanks for the heads up!", "url": "https://github.com/DataDog/dd-trace-java/pull/1387#discussion_r411730756", "createdAt": "2020-04-20T22:20:55Z", "author": {"login": "devinsba"}, "path": "dd-java-agent/instrumentation/servlet/request-2/src/main/java/datadog/trace/instrumentation/servlet2/Servlet2Advice.java", "diffHunk": "@@ -89,11 +87,11 @@ public static void stopSpan(\n       return;\n     }\n     final AgentSpan span = scope.span();\n-    DECORATE.onResponse(span, response);\n+    if (request instanceof HttpServletRequest) {\n+      DECORATE.onResponse(span, (HttpServletRequest) request);\n+    }\n     if (throwable != null) {\n-      if (response instanceof StatusSavingHttpServletResponseWrapper\n-          && ((StatusSavingHttpServletResponseWrapper) response).status\n-              == HttpServletResponse.SC_OK) {\n+      if ((Integer) request.getAttribute(\"dd.http-status\") == HttpServletResponse.SC_OK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MzgzMA=="}, "originalCommit": {"oid": "5a6f455168c8beeb46dfa102514dbec87ad67e58"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 254, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}