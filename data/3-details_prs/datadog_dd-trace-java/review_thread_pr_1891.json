{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjg1ODc0", "number": 1891, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzozOTo1OVrOElqctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0MTo1M1rOElqgYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTI4MjQ3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzozOTo1OVrOHVQgZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDo1MTowM1rOHVT_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1MjU4MQ==", "bodyText": "I'm not sure if this will justify its complexity. Firstly, setting the log level is going to be very rare, certainly rare enough for a volatile write. Secondly, I'd wager a bet that over 99% of users run on x86, where I don't think there's any benefit of getOpaque over get", "url": "https://github.com/DataDog/dd-trace-java/pull/1891#discussion_r492052581", "createdAt": "2020-09-21T13:39:59Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package datadog.trace.logging.ddlogger;\n+\n+import datadog.trace.logging.LogLevel;\n+import datadog.trace.logging.LogLevelSwitcher;\n+import datadog.trace.logging.LoggerHelper;\n+import datadog.trace.logging.LoggerHelperFactory;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.slf4j.Marker;\n+\n+public final class SwitchableLogLevelFactory extends LoggerHelperFactory\n+    implements LogLevelSwitcher {\n+  private final LoggerHelperFactory delegate;\n+  private final AtomicReference<LogLevel> override;\n+\n+  public SwitchableLogLevelFactory(LoggerHelperFactory delegate) {\n+    this(new AtomicReference<LogLevel>(), delegate);\n+  }\n+\n+  public SwitchableLogLevelFactory(\n+      AtomicReference<LogLevel> override, LoggerHelperFactory delegate) {\n+    this.delegate = delegate;\n+    this.override = override;\n+  }\n+\n+  @Override\n+  public void switchLevel(LogLevel level) {\n+    Opaque.setLevel(override, level);\n+  }\n+\n+  @Override\n+  public void restore() {\n+    Opaque.setLevel(override, null);\n+  }\n+\n+  private static final class Opaque {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518a4e077372468432ad4815ce349d7a5ff151b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MDg3Nw==", "bodyText": "Ok, fine. That was probably a bit premature. I'll remove it.\nIt was mostly the read I was concerned about, and I'm likely colored by rust on ARM, where it would make a difference.", "url": "https://github.com/DataDog/dd-trace-java/pull/1891#discussion_r492070877", "createdAt": "2020-09-21T14:04:28Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package datadog.trace.logging.ddlogger;\n+\n+import datadog.trace.logging.LogLevel;\n+import datadog.trace.logging.LogLevelSwitcher;\n+import datadog.trace.logging.LoggerHelper;\n+import datadog.trace.logging.LoggerHelperFactory;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.slf4j.Marker;\n+\n+public final class SwitchableLogLevelFactory extends LoggerHelperFactory\n+    implements LogLevelSwitcher {\n+  private final LoggerHelperFactory delegate;\n+  private final AtomicReference<LogLevel> override;\n+\n+  public SwitchableLogLevelFactory(LoggerHelperFactory delegate) {\n+    this(new AtomicReference<LogLevel>(), delegate);\n+  }\n+\n+  public SwitchableLogLevelFactory(\n+      AtomicReference<LogLevel> override, LoggerHelperFactory delegate) {\n+    this.delegate = delegate;\n+    this.override = override;\n+  }\n+\n+  @Override\n+  public void switchLevel(LogLevel level) {\n+    Opaque.setLevel(override, level);\n+  }\n+\n+  @Override\n+  public void restore() {\n+    Opaque.setLevel(override, null);\n+  }\n+\n+  private static final class Opaque {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1MjU4MQ=="}, "originalCommit": {"oid": "5518a4e077372468432ad4815ce349d7a5ff151b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEwOTY1OQ==", "bodyText": "On ARM it would definitely be worthwhile, along with applying the same treatment to all other qualifying volatile reads in the code base.", "url": "https://github.com/DataDog/dd-trace-java/pull/1891#discussion_r492109659", "createdAt": "2020-09-21T14:51:03Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package datadog.trace.logging.ddlogger;\n+\n+import datadog.trace.logging.LogLevel;\n+import datadog.trace.logging.LogLevelSwitcher;\n+import datadog.trace.logging.LoggerHelper;\n+import datadog.trace.logging.LoggerHelperFactory;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.slf4j.Marker;\n+\n+public final class SwitchableLogLevelFactory extends LoggerHelperFactory\n+    implements LogLevelSwitcher {\n+  private final LoggerHelperFactory delegate;\n+  private final AtomicReference<LogLevel> override;\n+\n+  public SwitchableLogLevelFactory(LoggerHelperFactory delegate) {\n+    this(new AtomicReference<LogLevel>(), delegate);\n+  }\n+\n+  public SwitchableLogLevelFactory(\n+      AtomicReference<LogLevel> override, LoggerHelperFactory delegate) {\n+    this.delegate = delegate;\n+    this.override = override;\n+  }\n+\n+  @Override\n+  public void switchLevel(LogLevel level) {\n+    Opaque.setLevel(override, level);\n+  }\n+\n+  @Override\n+  public void restore() {\n+    Opaque.setLevel(override, null);\n+  }\n+\n+  private static final class Opaque {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1MjU4MQ=="}, "originalCommit": {"oid": "5518a4e077372468432ad4815ce349d7a5ff151b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTI5MTg1OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0MTo1M1rOHVQmFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNzo1M1rOHVRxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1NDAzNg==", "bodyText": "I think this could just be volatile LogLevel override without appreciable overhead, in fact it might be a little bit faster in the overwhelmingly common case (reads on x86) by removing indirection.", "url": "https://github.com/DataDog/dd-trace-java/pull/1891#discussion_r492054036", "createdAt": "2020-09-21T13:41:53Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package datadog.trace.logging.ddlogger;\n+\n+import datadog.trace.logging.LogLevel;\n+import datadog.trace.logging.LogLevelSwitcher;\n+import datadog.trace.logging.LoggerHelper;\n+import datadog.trace.logging.LoggerHelperFactory;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.slf4j.Marker;\n+\n+public final class SwitchableLogLevelFactory extends LoggerHelperFactory\n+    implements LogLevelSwitcher {\n+  private final LoggerHelperFactory delegate;\n+  private final AtomicReference<LogLevel> override;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518a4e077372468432ad4815ce349d7a5ff151b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MzM1NQ==", "bodyText": "Yeah, I'll switch things around and skip the AtomicReference.", "url": "https://github.com/DataDog/dd-trace-java/pull/1891#discussion_r492073355", "createdAt": "2020-09-21T14:07:53Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-logging/src/main/java/datadog/trace/logging/ddlogger/SwitchableLogLevelFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package datadog.trace.logging.ddlogger;\n+\n+import datadog.trace.logging.LogLevel;\n+import datadog.trace.logging.LogLevelSwitcher;\n+import datadog.trace.logging.LoggerHelper;\n+import datadog.trace.logging.LoggerHelperFactory;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.slf4j.Marker;\n+\n+public final class SwitchableLogLevelFactory extends LoggerHelperFactory\n+    implements LogLevelSwitcher {\n+  private final LoggerHelperFactory delegate;\n+  private final AtomicReference<LogLevel> override;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1NDAzNg=="}, "originalCommit": {"oid": "5518a4e077372468432ad4815ce349d7a5ff151b"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4835, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}