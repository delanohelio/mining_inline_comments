{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTc5NTMy", "number": 1482, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyMDowNFrOD-f_oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyMDowNFrOD-f_oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODYyNDk3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/SamplerWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyMDowNFrOGYoz5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowNzoyNVrOGYrvEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzY1NQ==", "bodyText": "nit/general interest: is there any way to avoid the capture?", "url": "https://github.com/DataDog/dd-trace-java/pull/1482#discussion_r428487655", "createdAt": "2020-05-21T07:20:04Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/SamplerWriter.java", "diffHunk": "@@ -52,6 +71,26 @@ public void writeThreadSample(ThreadInfo threadInfo) {\n                 }));\n   }\n \n+  private Type registerContextEventType() {\n+    return recording.registerEventType(\n+        CONTEXT_EVENT_NAME,\n+        builder -> {\n+          builder.addField(\"traceId\", Types.Builtin.STRING);\n+        });\n+  }\n+\n+  private TypedValue getThread(Thread thread) {\n+    return recording\n+        .getType(Types.JDK.THREAD)\n+        .asValue(\n+            builder -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5abea7a117771fe57e45286ffb14e8475adbdf0a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNTU3MQ==", "bodyText": "Eventually, the answer is yes. In the current implementation it is quite cumbersome, actually.\nSince this 'all-in-java' sampling is going to become the common/fallback implementation we will need to take a look at its perf in the next step.", "url": "https://github.com/DataDog/dd-trace-java/pull/1482#discussion_r428535571", "createdAt": "2020-05-21T09:07:25Z", "author": {"login": "jbachorik"}, "path": "dd-java-agent/agent-profiling/profiling-controller/src/main/java/com/datadog/profiling/mlt/SamplerWriter.java", "diffHunk": "@@ -52,6 +71,26 @@ public void writeThreadSample(ThreadInfo threadInfo) {\n                 }));\n   }\n \n+  private Type registerContextEventType() {\n+    return recording.registerEventType(\n+        CONTEXT_EVENT_NAME,\n+        builder -> {\n+          builder.addField(\"traceId\", Types.Builtin.STRING);\n+        });\n+  }\n+\n+  private TypedValue getThread(Thread thread) {\n+    return recording\n+        .getType(Types.JDK.THREAD)\n+        .asValue(\n+            builder -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzY1NQ=="}, "originalCommit": {"oid": "5abea7a117771fe57e45286ffb14e8475adbdf0a"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 158, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}