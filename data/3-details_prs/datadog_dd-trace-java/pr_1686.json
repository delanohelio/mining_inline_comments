{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NjI0ODA1", "number": 1686, "title": "alternative context extraction", "bodyText": "from #1636", "createdAt": "2020-07-15T17:22:01Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1686", "merged": true, "mergeCommit": {"oid": "cf1e54f89115929901528b56b687a9244c8ff3b1"}, "closed": true, "closedAt": "2020-07-20T19:32:04Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1MnGNAH2gAyNDQ5NjI0ODA1OjBmNzBkMGJlZTg5YzMwNDQ3MTRkNjI4ZjMyYTU1ZGM3ZjEzMzFjMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc21IrBAFqTQ1MTgxNjIwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0f70d0bee89c3044714d628f32a55dc7f1331c0a", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0f70d0bee89c3044714d628f32a55dc7f1331c0a", "committedDate": "2020-07-15T15:45:38Z", "message": "an alternative approach to context propagation which avoids accidentally quadratic loops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15bf393879341d2f6bef5f65d825b13c36ed4413", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/15bf393879341d2f6bef5f65d825b13c36ed4413", "committedDate": "2020-07-15T15:45:38Z", "message": "rebase revapi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fdff968b002b3daecc7fa6c2d7f46d6d45ff7cc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0fdff968b002b3daecc7fa6c2d7f46d6d45ff7cc", "committedDate": "2020-07-16T10:03:10Z", "message": "use TreeMap everywhere for now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c978d2a53bcfcbc5623015c656853b6e6ec6bfe", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0c978d2a53bcfcbc5623015c656853b6e6ec6bfe", "committedDate": "2020-07-16T10:32:46Z", "message": "merge KeyValueConsumer and KeyClassifier interfaces"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e28544c75ab429618ce25988148b7e9caef86d5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8e28544c75ab429618ce25988148b7e9caef86d5", "committedDate": "2020-07-16T12:56:01Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}, "afterCommit": {"oid": "7cb5235c6a630f0aa6076e733a871c2bfbc208f5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7cb5235c6a630f0aa6076e733a871c2bfbc208f5", "committedDate": "2020-07-16T13:06:27Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cb5235c6a630f0aa6076e733a871c2bfbc208f5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/7cb5235c6a630f0aa6076e733a871c2bfbc208f5", "committedDate": "2020-07-16T13:06:27Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}, "afterCommit": {"oid": "4796e94a769d9d85783d0683d0202f95bc7a441d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4796e94a769d9d85783d0683d0202f95bc7a441d", "committedDate": "2020-07-16T13:45:47Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4796e94a769d9d85783d0683d0202f95bc7a441d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4796e94a769d9d85783d0683d0202f95bc7a441d", "committedDate": "2020-07-16T13:45:47Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}, "afterCommit": {"oid": "c39c8f7fc6a89313bbf29ace721862299440a992", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c39c8f7fc6a89313bbf29ace721862299440a992", "committedDate": "2020-07-16T14:19:37Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c39c8f7fc6a89313bbf29ace721862299440a992", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/c39c8f7fc6a89313bbf29ace721862299440a992", "committedDate": "2020-07-16T14:19:37Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}, "afterCommit": {"oid": "8267ddcfe721e81be4c7f8a4bcb60c8bc7d953ab", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8267ddcfe721e81be4c7f8a4bcb60c8bc7d953ab", "committedDate": "2020-07-16T14:47:56Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dae1e458ca3f08187c9e577c03848ff27a610dc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4dae1e458ca3f08187c9e577c03848ff27a610dc", "committedDate": "2020-07-16T15:10:16Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8267ddcfe721e81be4c7f8a4bcb60c8bc7d953ab", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/8267ddcfe721e81be4c7f8a4bcb60c8bc7d953ab", "committedDate": "2020-07-16T14:47:56Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}, "afterCommit": {"oid": "4dae1e458ca3f08187c9e577c03848ff27a610dc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4dae1e458ca3f08187c9e577c03848ff27a610dc", "committedDate": "2020-07-16T15:10:16Z", "message": "refactor to reduce instrumentation level boilerplate, avoid lower casing headers which aren't interesting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e3ec2ddd776fa8651a6abee74b0e95f4798d9b2", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0e3ec2ddd776fa8651a6abee74b0e95f4798d9b2", "committedDate": "2020-07-16T15:42:06Z", "message": "port FixedSizeCacheTest into dd-trace-core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "committedDate": "2020-07-16T17:08:19Z", "message": "add test for more coverage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57f2dae3d348e97ff0366e29e2996744b0a0a7ae", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/57f2dae3d348e97ff0366e29e2996744b0a0a7ae", "committedDate": "2020-07-16T16:34:59Z", "message": "add test for more coverage"}, "afterCommit": {"oid": "4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/4a2d8ad1d56421d6029e99345ac3f53dd40aea3d", "committedDate": "2020-07-16T17:08:19Z", "message": "add test for more coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/0bcf00e0ba9788f9643418f500b85d8c8871c431", "committedDate": "2020-07-17T14:04:13Z", "message": "Merge branch 'master' into rgs/context-propagation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjcwMDc0", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#pullrequestreview-451670074", "createdAt": "2020-07-20T14:38:45Z", "commit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozODo0NVrOG0QZpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozODoxMVrOG0Tyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0Nzg0NA==", "bodyText": "Indentation here is rather weird... made it rather confusing at first glance.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457447844", "createdAt": "2020-07-20T14:38:45Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/grpc-1.5/src/test/groovy/GrpcTest.groovy", "diffHunk": "@@ -305,7 +306,15 @@ class GrpcTest extends AgentTestRunner {\n     meta.put(Metadata.Key.<byte[]> of(\"test-bin\", Metadata.BINARY_BYTE_MARSHALLER), \"bin-val\".bytes)\n \n     when:\n-    def keys = GrpcExtractAdapter.GETTER.keys(meta)\n+    def keys = new ArrayList()\n+      GrpcExtractAdapter.GETTER.forEachKey(meta, new AgentPropagation.KeyClassifier() {\n+\n+        @Override\n+        boolean accept(String key, String value) {\n+          keys.add(key.toLowerCase())\n+          return true\n+        }\n+      })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MDcxNw==", "bodyText": "We need to call this out in the release notes.  Please update the PR description with verbiage.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457450717", "createdAt": "2020-07-20T14:41:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1MzI0OQ==", "bodyText": "Maybe this was intentional, but I think this is a useful comment.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457453249", "createdAt": "2020-07-20T14:44:46Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/opentelemetry/src/main/java/datadog/trace/instrumentation/opentelemetry/OtelContextPropagators.java", "diffHunk": "@@ -97,15 +97,12 @@ private OtelGetter(final HttpTextFormat.Getter<C> getter) {\n     }\n \n     @Override\n-    public Iterable<String> keys(final C carrier) {\n-      // TODO: Otel doesn't expose the keys, so we have to rely on hard coded keys.\n-      // https://github.com/open-telemetry/opentelemetry-specification/issues/433", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1OTc3Ng==", "bodyText": "I assume the attributes below should replace/overwrite the values from the headers, but what happens if this is hit?  Perhaps this should be a break instead of return?  Either way, it could probably use a comment clarifying the intention. (Previous comment was removed.)", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457459776", "createdAt": "2020-07-20T14:51:39Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMzQxOQ==", "bodyText": "We should keep a comment to this effect, but it should be updated to reference ServletRequestSetter since that seems to be the new name.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457503419", "createdAt": "2020-07-20T15:38:11Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d35efad6cc54ff5d42104f9b6799859f73677d17", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/d35efad6cc54ff5d42104f9b6799859f73677d17", "committedDate": "2020-07-20T16:05:01Z", "message": "address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjg3MzU2", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#pullrequestreview-451687356", "createdAt": "2020-07-20T14:56:42Z", "commit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1Njo0MlrOG0RbDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyNzo1OVrOG0V-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDU4OA==", "bodyText": "Why is datadog.trace.bootstrap.instrumentation.api.FixedSizeCache duplicated here?", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457464588", "createdAt": "2020-07-20T14:56:42Z", "author": {"login": "randomanderson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/util/FixedSizeCache.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package datadog.trace.core.util;\n+\n+/**\n+ * This is a fixed size cache that only has one operation <code>computeIfAbsent</code>, that is used\n+ * to retrieve, or store and compute the cached value.\n+ *\n+ * <p>If there is a hash collision, the cache uses double hashing two more times to try to find a\n+ * match or an unused slot.\n+ *\n+ * <p>The cache is thread safe, and assumes that the <code>Creator</code> passed into <code>\n+ * computeIfAbsent</code> is idempotent or otherwise you might not get back the value you expect\n+ * from a cache lookup.\n+ *\n+ * @param <K> key type\n+ * @param <V> value type\n+ */\n+public class FixedSizeCache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNjY1OQ==", "bodyText": "This swaps the precedence.  In the previous version of the code, the attribute is considered before the header.  Also applies to servlet2/HttpServletRequestExtractAdapter", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457526659", "createdAt": "2020-07-20T16:08:10Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/servlet/request-3/src/main/java/datadog/trace/instrumentation/servlet3/HttpServletRequestExtractAdapter.java", "diffHunk": "@@ -1,33 +1,32 @@\n package datadog.trace.instrumentation.servlet3;\n \n import datadog.trace.bootstrap.instrumentation.api.AgentPropagation;\n-import java.util.Collections;\n-import java.util.List;\n+import java.util.Enumeration;\n import javax.servlet.http.HttpServletRequest;\n \n public class HttpServletRequestExtractAdapter\n-    implements AgentPropagation.Getter<HttpServletRequest> {\n+    implements AgentPropagation.ContextVisitor<HttpServletRequest> {\n \n   public static final HttpServletRequestExtractAdapter GETTER =\n       new HttpServletRequestExtractAdapter();\n \n   @Override\n-  public List<String> keys(final HttpServletRequest carrier) {\n-    final List<String> keys = Collections.list(carrier.getHeaderNames());\n-    keys.addAll(Collections.list(carrier.getAttributeNames()));\n-    return keys;\n-  }\n-\n-  @Override\n-  public String get(final HttpServletRequest carrier, final String key) {\n-    /*\n-     * Read from the attributes and override the headers.\n-     * This is used by HttpServletRequestSetter when a request is async-dispatched.\n-     */\n-    final Object attribute = carrier.getAttribute(key);\n-    if (attribute instanceof String) {\n-      return (String) attribute;\n+  public void forEachKey(HttpServletRequest carrier, AgentPropagation.KeyClassifier classifier) {\n+    Enumeration<String> headerNames = carrier.getHeaderNames();\n+    while (headerNames.hasMoreElements()) {\n+      String header = headerNames.nextElement();\n+      if (!classifier.accept(header, carrier.getHeader(header))) {\n+        return;\n+      }\n+    }\n+    // TODO collapse these into one method with a lambda when JDK7 is dropped\n+    Enumeration<String> attributeNames = carrier.getAttributeNames();\n+    while (attributeNames.hasMoreElements()) {\n+      String name = attributeNames.nextElement();\n+      Object attribute = carrier.getAttribute(name);\n+      if (attribute instanceof String && !classifier.accept(name, (String) attribute)) {\n+        return;\n+      }\n     }\n-    return carrier.getHeader(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTI2Ng==", "bodyText": "This breaks JMS propagation to save ~70 bytes per message.  I'm not sure if its worth it.  There will be a flood of support requests as users upgrade producers before consumers.\nMy suggestion is to move this change into a separate pull request.  That way there can be proper discussion about how to go about this change: feature flags, supporting both versions, isolation of the performance difference, etc.", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#discussion_r457539266", "createdAt": "2020-07-20T16:27:59Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/jms/src/main/java/datadog/trace/instrumentation/jms/MessageInjectAdapter.java", "diffHunk": "@@ -10,11 +10,9 @@\n \n   public static final MessageInjectAdapter SETTER = new MessageInjectAdapter();\n \n-  static final String DASH = \"__dash__\";\n-\n   @Override\n   public void set(final Message carrier, final String key, final String value) {\n-    final String propName = key.replace(\"-\", DASH);\n+    final String propName = key.replace('-', '$');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bcf00e0ba9788f9643418f500b85d8c8871c431"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d5e16f7bf43080e8a4150c34402cb2abb4f328", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/90d5e16f7bf43080e8a4150c34402cb2abb4f328", "committedDate": "2020-07-20T16:43:06Z", "message": "review comments, rollback JMS context key injection change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzk2MjA0", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#pullrequestreview-451796204", "createdAt": "2020-07-20T17:04:42Z", "commit": {"oid": "90d5e16f7bf43080e8a4150c34402cb2abb4f328"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "committedDate": "2020-07-20T17:22:31Z", "message": "add comment to explain duplication of FixedSizeCache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f48f868ad79dde2c35b7dbc74b112dafa2a7077", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9f48f868ad79dde2c35b7dbc74b112dafa2a7077", "committedDate": "2020-07-20T17:13:48Z", "message": "add comment to explain duplication of FixedSizeCache"}, "afterCommit": {"oid": "9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/9cf040bf7bb9af7d2816b91f990ceaa1abf88d68", "committedDate": "2020-07-20T17:22:31Z", "message": "add comment to explain duplication of FixedSizeCache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODE2MjAy", "url": "https://github.com/DataDog/dd-trace-java/pull/1686#pullrequestreview-451816202", "createdAt": "2020-07-20T17:32:26Z", "commit": {"oid": "9cf040bf7bb9af7d2816b91f990ceaa1abf88d68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2265, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}