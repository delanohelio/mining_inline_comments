{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzA5OTgx", "number": 1177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxMjoxNlrODYTGMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxNDoyNVrODYTIjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA1Mjk3OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDTracer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxMjoxNlrOFeFBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1ODo0NlrOFglkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mzc3Nw==", "bodyText": "Why do we need to cast?\nI assuming because the Nop variant doesn't have addScopeListener.\nI think it would be cleaner to addScopeListener to the Nop variant.", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r367083777", "createdAt": "2020-01-15T20:12:16Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDTracer.java", "diffHunk": "@@ -510,7 +516,9 @@ public boolean addTraceInterceptor(final TraceInterceptor interceptor) {\n \n   @Override\n   public void addScopeListener(final ScopeListener listener) {\n-    scopeManager.addScopeListener(listener);\n+    if (scopeManager instanceof ContextualScopeManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMDkwOQ==", "bodyText": "no, this is because ScopeListener is purely something we added, not part of OpenTracing.  If we accept any OpenTracing ScopeManager, we can't support this.", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r367130909", "createdAt": "2020-01-15T22:03:00Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDTracer.java", "diffHunk": "@@ -510,7 +516,9 @@ public boolean addTraceInterceptor(final TraceInterceptor interceptor) {\n \n   @Override\n   public void addScopeListener(final ScopeListener listener) {\n-    scopeManager.addScopeListener(listener);\n+    if (scopeManager instanceof ContextualScopeManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mzc3Nw=="}, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNDMxMQ==", "bodyText": "That makes sense.  Although, we could address that by having our own Nop with addScopeListener.\nBut for now, I think it is fine.  We can address it after we split from OpenTracing.", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r369714311", "createdAt": "2020-01-22T17:58:46Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/DDTracer.java", "diffHunk": "@@ -510,7 +516,9 @@ public boolean addTraceInterceptor(final TraceInterceptor interceptor) {\n \n   @Override\n   public void addScopeListener(final ScopeListener listener) {\n-    scopeManager.addScopeListener(listener);\n+    if (scopeManager instanceof ContextualScopeManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4Mzc3Nw=="}, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODA1OTAyOnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/opentracing/scopemanager/ContextualScopeManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxNDoyNVrOFeFEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1OTozN1rOFglmDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDczOQ==", "bodyText": "Should this be debug or error?", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r367084739", "createdAt": "2020-01-15T20:14:25Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/scopemanager/ContextualScopeManager.java", "diffHunk": "@@ -5,18 +5,35 @@\n import io.opentracing.Scope;\n import io.opentracing.ScopeManager;\n import io.opentracing.Span;\n+import io.opentracing.noop.NoopScopeManager;\n import java.util.Deque;\n import java.util.List;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n public class ContextualScopeManager implements ScopeManager {\n   static final ThreadLocal<DDScope> tlsScope = new ThreadLocal<>();\n   final Deque<ScopeContext> scopeContexts = new ConcurrentLinkedDeque<>();\n   final List<ScopeListener> scopeListeners = new CopyOnWriteArrayList<>();\n \n+  private final int depthLimit;\n+\n+  public ContextualScopeManager(final int depthLimit) {\n+    this.depthLimit = depthLimit;\n+  }\n+\n   @Override\n   public Scope activate(final Span span, final boolean finishOnClose) {\n+    final Scope active = active();\n+    if (active instanceof DDScope) {\n+      final int currentDepth = ((DDScope) active).depth();\n+      if (depthLimit <= currentDepth) {\n+        log.debug(\"Scope depth limit exceeded ({}).  Returning NoopScope.\", currentDepth);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDkzNg==", "bodyText": "It would also be nice to have a health metric, but we haven't made getting to the statsd object easy yet.", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r367084936", "createdAt": "2020-01-15T20:14:53Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/scopemanager/ContextualScopeManager.java", "diffHunk": "@@ -5,18 +5,35 @@\n import io.opentracing.Scope;\n import io.opentracing.ScopeManager;\n import io.opentracing.Span;\n+import io.opentracing.noop.NoopScopeManager;\n import java.util.Deque;\n import java.util.List;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n public class ContextualScopeManager implements ScopeManager {\n   static final ThreadLocal<DDScope> tlsScope = new ThreadLocal<>();\n   final Deque<ScopeContext> scopeContexts = new ConcurrentLinkedDeque<>();\n   final List<ScopeListener> scopeListeners = new CopyOnWriteArrayList<>();\n \n+  private final int depthLimit;\n+\n+  public ContextualScopeManager(final int depthLimit) {\n+    this.depthLimit = depthLimit;\n+  }\n+\n   @Override\n   public Scope activate(final Span span, final boolean finishOnClose) {\n+    final Scope active = active();\n+    if (active instanceof DDScope) {\n+      final int currentDepth = ((DDScope) active).depth();\n+      if (depthLimit <= currentDepth) {\n+        log.debug(\"Scope depth limit exceeded ({}).  Returning NoopScope.\", currentDepth);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDczOQ=="}, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzMDMxNg==", "bodyText": "Ideally it would be a rate limited warning, but this can be very high throughput, so I kept it at debug.", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r367130316", "createdAt": "2020-01-15T22:01:29Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/scopemanager/ContextualScopeManager.java", "diffHunk": "@@ -5,18 +5,35 @@\n import io.opentracing.Scope;\n import io.opentracing.ScopeManager;\n import io.opentracing.Span;\n+import io.opentracing.noop.NoopScopeManager;\n import java.util.Deque;\n import java.util.List;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n public class ContextualScopeManager implements ScopeManager {\n   static final ThreadLocal<DDScope> tlsScope = new ThreadLocal<>();\n   final Deque<ScopeContext> scopeContexts = new ConcurrentLinkedDeque<>();\n   final List<ScopeListener> scopeListeners = new CopyOnWriteArrayList<>();\n \n+  private final int depthLimit;\n+\n+  public ContextualScopeManager(final int depthLimit) {\n+    this.depthLimit = depthLimit;\n+  }\n+\n   @Override\n   public Scope activate(final Span span, final boolean finishOnClose) {\n+    final Scope active = active();\n+    if (active instanceof DDScope) {\n+      final int currentDepth = ((DDScope) active).depth();\n+      if (depthLimit <= currentDepth) {\n+        log.debug(\"Scope depth limit exceeded ({}).  Returning NoopScope.\", currentDepth);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDczOQ=="}, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE0MjEzOQ==", "bodyText": "Yeah I agree a health metric would make sense.  Should that work be in this PR or a separate one?", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r367142139", "createdAt": "2020-01-15T22:31:02Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/scopemanager/ContextualScopeManager.java", "diffHunk": "@@ -5,18 +5,35 @@\n import io.opentracing.Scope;\n import io.opentracing.ScopeManager;\n import io.opentracing.Span;\n+import io.opentracing.noop.NoopScopeManager;\n import java.util.Deque;\n import java.util.List;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n public class ContextualScopeManager implements ScopeManager {\n   static final ThreadLocal<DDScope> tlsScope = new ThreadLocal<>();\n   final Deque<ScopeContext> scopeContexts = new ConcurrentLinkedDeque<>();\n   final List<ScopeListener> scopeListeners = new CopyOnWriteArrayList<>();\n \n+  private final int depthLimit;\n+\n+  public ContextualScopeManager(final int depthLimit) {\n+    this.depthLimit = depthLimit;\n+  }\n+\n   @Override\n   public Scope activate(final Span span, final boolean finishOnClose) {\n+    final Scope active = active();\n+    if (active instanceof DDScope) {\n+      final int currentDepth = ((DDScope) active).depth();\n+      if (depthLimit <= currentDepth) {\n+        log.debug(\"Scope depth limit exceeded ({}).  Returning NoopScope.\", currentDepth);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDczOQ=="}, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxNDcwMg==", "bodyText": "It can wait for now.  I need to finish my PR where I make health metrics more accessible, but other things took priority.", "url": "https://github.com/DataDog/dd-trace-java/pull/1177#discussion_r369714702", "createdAt": "2020-01-22T17:59:37Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/scopemanager/ContextualScopeManager.java", "diffHunk": "@@ -5,18 +5,35 @@\n import io.opentracing.Scope;\n import io.opentracing.ScopeManager;\n import io.opentracing.Span;\n+import io.opentracing.noop.NoopScopeManager;\n import java.util.Deque;\n import java.util.List;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.CopyOnWriteArrayList;\n+import lombok.extern.slf4j.Slf4j;\n \n+@Slf4j\n public class ContextualScopeManager implements ScopeManager {\n   static final ThreadLocal<DDScope> tlsScope = new ThreadLocal<>();\n   final Deque<ScopeContext> scopeContexts = new ConcurrentLinkedDeque<>();\n   final List<ScopeListener> scopeListeners = new CopyOnWriteArrayList<>();\n \n+  private final int depthLimit;\n+\n+  public ContextualScopeManager(final int depthLimit) {\n+    this.depthLimit = depthLimit;\n+  }\n+\n   @Override\n   public Scope activate(final Span span, final boolean finishOnClose) {\n+    final Scope active = active();\n+    if (active instanceof DDScope) {\n+      final int currentDepth = ((DDScope) active).depth();\n+      if (depthLimit <= currentDepth) {\n+        log.debug(\"Scope depth limit exceeded ({}).  Returning NoopScope.\", currentDepth);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NDczOQ=="}, "originalCommit": {"oid": "bcf81823b3110c6a6e83baede7f570d7595ddacd"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 482, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}