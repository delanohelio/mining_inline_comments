{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODgyNjk1", "number": 1228, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODo1M1rODhl9Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODo1M1rODhl9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTUxNDQ2OnYy", "diffSide": "RIGHT", "path": "dd-trace-ot/src/main/java/datadog/opentracing/StringCachingBigInteger.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyODo1M1rOFsaUSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDowMDoxNVrOFshRfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjg0Mg==", "bodyText": "Technically this isn't threadsafe, but in practice I don't think it matters.", "url": "https://github.com/DataDog/dd-trace-java/pull/1228#discussion_r382112842", "createdAt": "2020-02-20T16:28:53Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/StringCachingBigInteger.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package datadog.opentracing;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+\n+/**\n+ * Because we are using BigInteger for Trace and Span Id, the toString() operator may result in\n+ * heavy computation and string allocation overhead. In order to limit this, we are caching the\n+ * result of toString, thereby taking advantage of the immutability of BigInteger.\n+ */\n+public class StringCachingBigInteger extends BigInteger {\n+\n+  private String cachedString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6c327705d784d4d3c46cea973ad63502603409"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyODQ5Mg==", "bodyText": "Yes, in this case, it will work, since the calculation is idempotent.\nEach thread will eventually make the null -> non-null transition.\nThis is the same basic strategy employed by String for the hashCode calculation.\nThe downside is a potential for a bit of extra allocation compared to the \"ideal\", but that's a reasonable trade-off.\nThis will already save a great deal on allocation and keeping the coordination overhead down is also important.\nIt could be made volatile, but we'd still have the same fundamental race -- so I think this is good as is.", "url": "https://github.com/DataDog/dd-trace-java/pull/1228#discussion_r382128492", "createdAt": "2020-02-20T16:53:48Z", "author": {"login": "dougqh"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/StringCachingBigInteger.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package datadog.opentracing;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+\n+/**\n+ * Because we are using BigInteger for Trace and Span Id, the toString() operator may result in\n+ * heavy computation and string allocation overhead. In order to limit this, we are caching the\n+ * result of toString, thereby taking advantage of the immutability of BigInteger.\n+ */\n+public class StringCachingBigInteger extends BigInteger {\n+\n+  private String cachedString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjg0Mg=="}, "originalCommit": {"oid": "fc6c327705d784d4d3c46cea973ad63502603409"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIyNjgxNA==", "bodyText": "keeping the coordination overhead down is also important.\n\nSuper agreed on this point. The overhead in a massively parallel/concurrent environment would not be worth locking this value", "url": "https://github.com/DataDog/dd-trace-java/pull/1228#discussion_r382226814", "createdAt": "2020-02-20T20:00:15Z", "author": {"login": "aarya123"}, "path": "dd-trace-ot/src/main/java/datadog/opentracing/StringCachingBigInteger.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package datadog.opentracing;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+\n+/**\n+ * Because we are using BigInteger for Trace and Span Id, the toString() operator may result in\n+ * heavy computation and string allocation overhead. In order to limit this, we are caching the\n+ * result of toString, thereby taking advantage of the immutability of BigInteger.\n+ */\n+public class StringCachingBigInteger extends BigInteger {\n+\n+  private String cachedString;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMjg0Mg=="}, "originalCommit": {"oid": "fc6c327705d784d4d3c46cea973ad63502603409"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 519, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}