{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDY5NDQ5", "number": 2182, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozMzozM1rOFDJh3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozMzozM1rOFDJh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODQ2MTcyOnYy", "diffSide": "RIGHT", "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozMzozM1rOICqfWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0NToxMVrOIDATFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDIxOA==", "bodyText": "Should this be inverted, so that interceptors which run after the failing interceptor are still run?", "url": "https://github.com/DataDog/dd-trace-java/pull/2182#discussion_r539664218", "createdAt": "2020-12-09T21:33:33Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -417,8 +417,14 @@ void write(final List<DDSpan> trace) {\n     List<DDSpan> writtenTrace = trace;\n     if (!interceptors.isEmpty()) {\n       Collection<? extends MutableSpan> interceptedTrace = new ArrayList<>(trace);\n-      for (final TraceInterceptor interceptor : interceptors) {\n-        interceptedTrace = interceptor.onTraceComplete(interceptedTrace);\n+\n+      try {\n+        for (final TraceInterceptor interceptor : interceptors) {\n+          interceptedTrace = interceptor.onTraceComplete(interceptedTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a928b7722417478dff001fc5ba606d1d15860d2e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3MzA4MQ==", "bodyText": "Yes, that's usual approach to making Listeners / Interceptors defensive.", "url": "https://github.com/DataDog/dd-trace-java/pull/2182#discussion_r539673081", "createdAt": "2020-12-09T21:48:12Z", "author": {"login": "dougqh"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -417,8 +417,14 @@ void write(final List<DDSpan> trace) {\n     List<DDSpan> writtenTrace = trace;\n     if (!interceptors.isEmpty()) {\n       Collection<? extends MutableSpan> interceptedTrace = new ArrayList<>(trace);\n-      for (final TraceInterceptor interceptor : interceptors) {\n-        interceptedTrace = interceptor.onTraceComplete(interceptedTrace);\n+\n+      try {\n+        for (final TraceInterceptor interceptor : interceptors) {\n+          interceptedTrace = interceptor.onTraceComplete(interceptedTrace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDIxOA=="}, "originalCommit": {"oid": "a928b7722417478dff001fc5ba606d1d15860d2e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MDI4OQ==", "bodyText": "I don't have a strong opinion but the reason I did it this way is that the interceptors are a pipeline (where the input/output of one depends on the input/output of the previous) where as listeners are independent from each other.\nIf you think of other pipeline-like things (eg Servlet Filter Chain), an exception stops processing in the chain.", "url": "https://github.com/DataDog/dd-trace-java/pull/2182#discussion_r539680289", "createdAt": "2020-12-09T22:00:23Z", "author": {"login": "randomanderson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -417,8 +417,14 @@ void write(final List<DDSpan> trace) {\n     List<DDSpan> writtenTrace = trace;\n     if (!interceptors.isEmpty()) {\n       Collection<? extends MutableSpan> interceptedTrace = new ArrayList<>(trace);\n-      for (final TraceInterceptor interceptor : interceptors) {\n-        interceptedTrace = interceptor.onTraceComplete(interceptedTrace);\n+\n+      try {\n+        for (final TraceInterceptor interceptor : interceptors) {\n+          interceptedTrace = interceptor.onTraceComplete(interceptedTrace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDIxOA=="}, "originalCommit": {"oid": "a928b7722417478dff001fc5ba606d1d15860d2e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyMTUyNA==", "bodyText": "That's enough to convince me.", "url": "https://github.com/DataDog/dd-trace-java/pull/2182#discussion_r540021524", "createdAt": "2020-12-10T09:45:11Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/CoreTracer.java", "diffHunk": "@@ -417,8 +417,14 @@ void write(final List<DDSpan> trace) {\n     List<DDSpan> writtenTrace = trace;\n     if (!interceptors.isEmpty()) {\n       Collection<? extends MutableSpan> interceptedTrace = new ArrayList<>(trace);\n-      for (final TraceInterceptor interceptor : interceptors) {\n-        interceptedTrace = interceptor.onTraceComplete(interceptedTrace);\n+\n+      try {\n+        for (final TraceInterceptor interceptor : interceptors) {\n+          interceptedTrace = interceptor.onTraceComplete(interceptedTrace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDIxOA=="}, "originalCommit": {"oid": "a928b7722417478dff001fc5ba606d1d15860d2e"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4520, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}