{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDk5Nzcz", "number": 2133, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1OTo1NVrOE-nygg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxNjo0NlrOE-oKPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDk5MDc0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMTo1OTo1NVrOH73_Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjowMzozN1rOH74HFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTI5NQ==", "bodyText": "Sorry to bikeshed but can we not do snake case?", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532545295", "createdAt": "2020-11-30T11:59:55Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */\n-              if ((insnStack[0] == Opcodes.INVOKESTATIC\n-                      && insnStack[1] == Opcodes.LDC\n-                      && insnStack[2] == Opcodes.LDC)\n-                  && (stack[0] instanceof Type && stack[1] instanceof Type)) {\n-                final String contextClassName = ((Type) stack[0]).getClassName();\n-                final String keyClassName = ((Type) stack[1]).getClassName();\n+              if (constant_1 instanceof Type && constant_2 instanceof Type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTg0NQ==", "bodyText": "sure, no worries", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532545845", "createdAt": "2020-11-30T12:00:50Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */\n-              if ((insnStack[0] == Opcodes.INVOKESTATIC\n-                      && insnStack[1] == Opcodes.LDC\n-                      && insnStack[2] == Opcodes.LDC)\n-                  && (stack[0] instanceof Type && stack[1] instanceof Type)) {\n-                final String contextClassName = ((Type) stack[0]).getClassName();\n-                final String keyClassName = ((Type) stack[1]).getClassName();\n+              if (constant_1 instanceof Type && constant_2 instanceof Type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTI5NQ=="}, "originalCommit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NzM0OA==", "bodyText": "c7dcd0d", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532547348", "createdAt": "2020-11-30T12:03:37Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */\n-              if ((insnStack[0] == Opcodes.INVOKESTATIC\n-                      && insnStack[1] == Opcodes.LDC\n-                      && insnStack[2] == Opcodes.LDC)\n-                  && (stack[0] instanceof Type && stack[1] instanceof Type)) {\n-                final String contextClassName = ((Type) stack[0]).getClassName();\n-                final String keyClassName = ((Type) stack[1]).getClassName();\n+              if (constant_1 instanceof Type && constant_2 instanceof Type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU0NTI5NQ=="}, "originalCommit": {"oid": "b820583a482dcf36fff3e81b4c810d9a8fb16e6f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MTA1MTUwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjoxNjo0NlrOH74jfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjozODozN1rOH75R3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NDYyMw==", "bodyText": "This comment can use an update.", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532554623", "createdAt": "2020-11-30T12:16:46Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dcd0d4528f0f7fc356d7d23af0e00a7b941596"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NjQ5Mg==", "bodyText": "012b95b", "url": "https://github.com/DataDog/dd-trace-java/pull/2133#discussion_r532566492", "createdAt": "2020-11-30T12:38:37Z", "author": {"login": "mcculls"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/context/ContextStoreReadsRewritingVisitor.java", "diffHunk": "@@ -107,24 +110,20 @@ public void visitMethodInsn(\n               final String name,\n               final String descriptor,\n               final boolean isInterface) {\n-            pushOpcode(opcode);\n-            if (Utils.getInternalName(CONTEXT_GET_METHOD.getDeclaringClass().getName())\n-                    .equals(owner)\n-                && CONTEXT_GET_METHOD.getName().equals(name)\n-                && Type.getMethodDescriptor(CONTEXT_GET_METHOD).equals(descriptor)) {\n+            if (Opcodes.INVOKESTATIC == opcode\n+                && INSTRUMENTATION_CONTEXT_CLASS.equals(owner)\n+                && GET_METHOD.equals(name)\n+                && GET_METHOD_DESCRIPTOR.equals(descriptor)) {\n               log.debug(\"Found context-store access in {}\", instrumenterClassName);\n               /*\n               The idea here is that the rest if this method visitor collects last three instructions in `insnStack`\n               variable. Once we get here we check if those last three instructions constitute call that looks like\n               `InstrumentationContext.get(K.class, V.class)`. If it does the inside of this if rewrites it to call\n               dynamically injected context store implementation instead.\n                */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU1NDYyMw=="}, "originalCommit": {"oid": "c7dcd0d4528f0f7fc356d7d23af0e00a7b941596"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4640, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}