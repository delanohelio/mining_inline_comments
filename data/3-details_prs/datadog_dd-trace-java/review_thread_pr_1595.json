{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzU3MTU3", "number": 1595, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1MTo1OVrOEGEUGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1NzoyMVrOEGEarw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzk3NTk0OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1MTo1OVrOGko4gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1MTo1OVrOGko4gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3MTc0Ng==", "bodyText": "Can we put the equals matchers into a set and replace the conditions with set.contains(name) when they grow long like this??", "url": "https://github.com/DataDog/dd-trace-java/pull/1595#discussion_r441071746", "createdAt": "2020-06-16T18:51:59Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/bytebuddy/matcher/AdditionalLibraryIgnoresMatcher.java", "diffHunk": "@@ -100,7 +100,11 @@ public boolean matches(final T target) {\n             || name.startsWith(\n                 \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer$\")\n             || name.equals(\n-                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")) {\n+                \"org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedWebappClassLoader\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c9c8d97f651166099c0b2f4d03c176b425ab7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzk5Mjc5OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/WebApplicationContextInstrumentation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo1NzoyMVrOGkpDjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyNTo0OVrOGlR3yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NDU3Mw==", "bodyText": "safeHasSuperType(namedOneOf(\"org.springframework.context.support.AbstractApplicationContext\", \"org.springframework.web.context.WebApplicationContext\"))?", "url": "https://github.com/DataDog/dd-trace-java/pull/1595#discussion_r441074573", "createdAt": "2020-06-16T18:57:21Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/WebApplicationContextInstrumentation.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package datadog.trace.instrumentation.springweb;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.extendsClass;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+\n+@AutoService(Instrumenter.class)\n+public class WebApplicationContextInstrumentation extends Instrumenter.Default {\n+  public WebApplicationContextInstrumentation() {\n+    super(\"spring-web\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",\n+        \"org.springframework.web.context.WebApplicationContext\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return extendsClass(named(\"org.springframework.context.support.AbstractApplicationContext\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c9c8d97f651166099c0b2f4d03c176b425ab7f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MzMwNw==", "bodyText": "It needs to match both, not one.  Extends AbstractApplicationContext AND has the WebApplicationContext interface.", "url": "https://github.com/DataDog/dd-trace-java/pull/1595#discussion_r441743307", "createdAt": "2020-06-17T18:25:49Z", "author": {"login": "randomanderson"}, "path": "dd-java-agent/instrumentation/spring-webmvc-3.1/src/main/java/datadog/trace/instrumentation/springweb/WebApplicationContextInstrumentation.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package datadog.trace.instrumentation.springweb;\n+\n+import static datadog.trace.agent.tooling.ClassLoaderMatcher.hasClassesNamed;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.extendsClass;\n+import static datadog.trace.agent.tooling.bytebuddy.matcher.DDElementMatchers.implementsInterface;\n+import static java.util.Collections.singletonMap;\n+import static net.bytebuddy.matcher.ElementMatchers.isMethod;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArgument;\n+\n+import com.google.auto.service.AutoService;\n+import datadog.trace.agent.tooling.Instrumenter;\n+import java.util.Map;\n+import net.bytebuddy.asm.Advice;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription;\n+import net.bytebuddy.matcher.ElementMatcher;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+\n+@AutoService(Instrumenter.class)\n+public class WebApplicationContextInstrumentation extends Instrumenter.Default {\n+  public WebApplicationContextInstrumentation() {\n+    super(\"spring-web\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<ClassLoader> classLoaderMatcher() {\n+    // Optimization for expensive typeMatcher.\n+    return hasClassesNamed(\n+        \"org.springframework.context.support.AbstractApplicationContext\",\n+        \"org.springframework.web.context.WebApplicationContext\");\n+  }\n+\n+  @Override\n+  public ElementMatcher<TypeDescription> typeMatcher() {\n+    return extendsClass(named(\"org.springframework.context.support.AbstractApplicationContext\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NDU3Mw=="}, "originalCommit": {"oid": "22c9c8d97f651166099c0b2f4d03c176b425ab7f"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}