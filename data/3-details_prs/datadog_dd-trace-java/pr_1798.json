{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMDIwMTQy", "number": 1798, "title": "abstract FixedSizeCache to allow interchangeability", "bodyText": "This introduces a layer of indirection to allow FixedSizeCache and ConcurrentHashMap to be used interchangeably, and a global switch to change the default implementation of the caches we use.\nI adapted the test for FixedSizeCache to a CHM backed implementation, but noticed it won't have the same semantics (see the test case differences) - have I misunderstood the FixedSizeCache test cases?\nI also changed the implementation used for caching qualified method names (scoped by classes) back to CHM since they are implicitly bounded and collisions would be wasteful with FixedSizeCache.", "createdAt": "2020-08-25T08:04:31Z", "url": "https://github.com/DataDog/dd-trace-java/pull/1798", "merged": true, "mergeCommit": {"oid": "9bb589d0c989013df95dcd7c884a4f79d4f79734"}, "closed": true, "closedAt": "2020-08-26T09:32:36Z", "author": {"login": "richardstartin"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCSoVjABqjM2ODg4MzMyNjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCn-HtAH2gAyNDczMDIwMTQyOjk0NmExZWFmNmY4YThiNjc3ZmIxMmQyOWYyMzY4NDQ0NmQ2ZDMyZjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50948bf3eb5122abb4c150f4c8f1ba54ed819a36", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/50948bf3eb5122abb4c150f4c8f1ba54ed819a36", "committedDate": "2020-08-25T07:57:59Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}, "afterCommit": {"oid": "63bcfaea095d60e2990fca61123ad9549232a55b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/63bcfaea095d60e2990fca61123ad9549232a55b", "committedDate": "2020-08-25T08:07:16Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63bcfaea095d60e2990fca61123ad9549232a55b", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/63bcfaea095d60e2990fca61123ad9549232a55b", "committedDate": "2020-08-25T08:07:16Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}, "afterCommit": {"oid": "65020c6e45f8fbdb880a81b3fde223a7790defcf", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/65020c6e45f8fbdb880a81b3fde223a7790defcf", "committedDate": "2020-08-25T08:12:01Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65020c6e45f8fbdb880a81b3fde223a7790defcf", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/65020c6e45f8fbdb880a81b3fde223a7790defcf", "committedDate": "2020-08-25T08:12:01Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}, "afterCommit": {"oid": "f5a59c4f06e9209353f0c6f85cd3c58efb92d2dc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f5a59c4f06e9209353f0c6f85cd3c58efb92d2dc", "committedDate": "2020-08-25T08:13:44Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5a59c4f06e9209353f0c6f85cd3c58efb92d2dc", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/f5a59c4f06e9209353f0c6f85cd3c58efb92d2dc", "committedDate": "2020-08-25T08:13:44Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}, "afterCommit": {"oid": "1f76de432fdaa6a02132860094de71b6aa9de63f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1f76de432fdaa6a02132860094de71b6aa9de63f", "committedDate": "2020-08-25T08:15:50Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "committedDate": "2020-08-25T08:16:47Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f76de432fdaa6a02132860094de71b6aa9de63f", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/1f76de432fdaa6a02132860094de71b6aa9de63f", "committedDate": "2020-08-25T08:15:50Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}, "afterCommit": {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/a015ddc8c1900a3c3a52b8df8039a9b09a558f92", "committedDate": "2020-08-25T08:16:47Z", "message": "abstract FixedSizeCache to allow interchangeability with ConcurrentHashMap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjMzOTY1", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#pullrequestreview-474633965", "createdAt": "2020-08-25T16:07:18Z", "commit": {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowNzoxOFrOHGfQpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxNToxOFrOHGfk-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NTY3MQ==", "bodyText": "I think naming this as capacity is a bit misleading...", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476565671", "createdAt": "2020-08-25T16:07:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/CHMCache.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package datadog.trace.bootstrap.instrumentation.cache;\n+\n+import datadog.trace.bootstrap.instrumentation.api.Function;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+final class CHMCache<K, V> implements DDCache<K, V> {\n+\n+  private final ConcurrentHashMap<K, V> chm;\n+\n+  public CHMCache(final int capacity) {\n+    this.chm = new ConcurrentHashMap<>(capacity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDg3Mg==", "bodyText": "Why unbounded?  Seems a bit scary.", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r476570872", "createdAt": "2020-08-25T16:15:18Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/QualifiedClassNameCache.java", "diffHunk": "@@ -42,15 +45,15 @@ protected Leaf computeValue(Class<?> type) {\n \n     private final CharSequence name;\n \n-    private final FixedSizeCache<CharSequence, CharSequence> cache;\n+    private final DDCache<CharSequence, CharSequence> cache;\n     private final Function<CharSequence, CharSequence> joiner;\n \n     private Leaf(\n         CharSequence name,\n         TwoArgFunction<CharSequence, CharSequence, CharSequence> joiner,\n         int leafSize) {\n       this.name = name;\n-      this.cache = new FixedSizeCache<>(leafSize);\n+      this.cache = DDCaches.newUnboundedCache(leafSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/255d88fd4544b47a3c122d583c5a5ac22f1e5ec3", "committedDate": "2020-08-25T19:16:11Z", "message": "change capacity to initialCapacity, clarifying javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjU3NDg0", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#pullrequestreview-475257484", "createdAt": "2020-08-26T08:17:44Z", "commit": {"oid": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxNzo0NVrOHHBEMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo0MjozNVrOHHCCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExOTUzOQ==", "bodyText": "Yup, that was covered below...", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477119539", "createdAt": "2020-08-26T08:17:45Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/FixedSizeCache.java", "diffHunk": "@@ -65,16 +67,17 @@ public FixedSizeCache(int capacity) {\n    * @param creator how to create a cached value base on the key if the lookup fails\n    * @return the cached or created and stored value\n    */\n+  @Override\n   public V computeIfAbsent(K key, Function<K, ? extends V> creator) {\n     if (key == null) {\n       return null;\n     }\n \n     int h = key.hashCode();\n     int firstPos = h & mask;\n-    V value = null;\n+    V value;\n     // try to find a slot or a match 3 times\n-    for (int i = 1; i <= 3; i++) {\n+    for (int i = 1; true; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyOTcxOQ==", "bodyText": "I agree with that it's fine with unbounded here since there is a natural bound. Would be nice with a comment about the reasoning, i.e. that QualifiedClassNameCache is per Class and the number of methods are bounded.", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477129719", "createdAt": "2020-08-26T08:33:26Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/main/java/datadog/trace/bootstrap/instrumentation/cache/QualifiedClassNameCache.java", "diffHunk": "@@ -42,15 +45,15 @@ protected Leaf computeValue(Class<?> type) {\n \n     private final CharSequence name;\n \n-    private final FixedSizeCache<CharSequence, CharSequence> cache;\n+    private final DDCache<CharSequence, CharSequence> cache;\n     private final Function<CharSequence, CharSequence> joiner;\n \n     private Leaf(\n         CharSequence name,\n         TwoArgFunction<CharSequence, CharSequence, CharSequence> joiner,\n         int leafSize) {\n       this.name = name;\n-      this.cache = new FixedSizeCache<>(leafSize);\n+      this.cache = DDCaches.newUnboundedCache(leafSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3MDg3Mg=="}, "originalCommit": {"oid": "a015ddc8c1900a3c3a52b8df8039a9b09a558f92"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzMjU0NA==", "bodyText": "There is no chain of hashes in the unbounded one.", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477132544", "createdAt": "2020-08-26T08:37:51Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/cache/FixedSizeCacheTest.groovy", "diffHunk": "@@ -32,20 +33,48 @@ class FixedSizeCacheTest extends DDSpecification {\n     new TKey(1, 10, \"foo\")    | \"ten_value\"    | 3     // used the cached tk10\n     new TKey(6, 6, \"foo\")     | \"six_value\"    | 3     // used the cached tk6\n     new TKey(1, 11, \"eleven\") | \"eleven_value\" | 4     // create new value in an occupied slot\n-    new TKey(4, 4, \"four\" )   | \"four_value\"   | 4     // create new value in empty slot\n+    new TKey(4, 4, \"four\")    | \"four_value\"   | 4     // create new value in empty slot\n     null                      | null           | 3     // do nothing\n   }\n \n+  def \"chm cache should store and retrieve values\"() {\n+    setup:\n+    def fsCache = DDCaches.newUnboundedCache(15)\n+    def creationCount = new AtomicInteger(0)\n+    def tvc = new TVC(creationCount)\n+    def tk1 = new TKey(1, 1, \"one\")\n+    def tk6 = new TKey(6, 6, \"six\")\n+    def tk10 = new TKey(10, 10, \"ten\")\n+    // insert some values that happen to be the chain of hashes 1 -> 6 -> 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNTQ5Nw==", "bodyText": "So the reason for the difference in counts here is that we insert a new thing with hash 1 equals 6 in the unbounded cache, and that will of course create a new item, since the only thing we have with hash 1 has equals 1. In the fixed size cache, we try to insert it at hash 1 and collide, do a rehash ending up on hash 6 and find equals 6 there, which is a match.", "url": "https://github.com/DataDog/dd-trace-java/pull/1798#discussion_r477135497", "createdAt": "2020-08-26T08:42:35Z", "author": {"login": "bantonsson"}, "path": "dd-java-agent/agent-bootstrap/src/test/groovy/datadog/trace/bootstrap/instrumentation/cache/FixedSizeCacheTest.groovy", "diffHunk": "@@ -32,20 +33,48 @@ class FixedSizeCacheTest extends DDSpecification {\n     new TKey(1, 10, \"foo\")    | \"ten_value\"    | 3     // used the cached tk10\n     new TKey(6, 6, \"foo\")     | \"six_value\"    | 3     // used the cached tk6\n     new TKey(1, 11, \"eleven\") | \"eleven_value\" | 4     // create new value in an occupied slot\n-    new TKey(4, 4, \"four\" )   | \"four_value\"   | 4     // create new value in empty slot\n+    new TKey(4, 4, \"four\")    | \"four_value\"   | 4     // create new value in empty slot\n     null                      | null           | 3     // do nothing\n   }\n \n+  def \"chm cache should store and retrieve values\"() {\n+    setup:\n+    def fsCache = DDCaches.newUnboundedCache(15)\n+    def creationCount = new AtomicInteger(0)\n+    def tvc = new TVC(creationCount)\n+    def tk1 = new TKey(1, 1, \"one\")\n+    def tk6 = new TKey(6, 6, \"six\")\n+    def tk10 = new TKey(10, 10, \"ten\")\n+    // insert some values that happen to be the chain of hashes 1 -> 6 -> 10\n+    fsCache.computeIfAbsent(tk1, tvc)\n+    fsCache.computeIfAbsent(tk6, tvc)\n+    fsCache.computeIfAbsent(tk10, tvc)\n+\n+    expect:\n+    fsCache.computeIfAbsent(tk, tvc) == value\n+    creationCount.get() == count\n+\n+    where:\n+    tk                        | value          | count\n+    new TKey(1, 1, \"foo\")     | \"one_value\"    | 3\n+    new TKey(1, 6, \"foo\")     | \"foo_value\"    | 4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "255d88fd4544b47a3c122d583c5a5ac22f1e5ec3"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "946a1eaf6f8a8b677fb12d29f23684446d6d32f5", "author": {"user": {"login": "richardstartin", "name": "Richard Startin"}}, "url": "https://github.com/DataDog/dd-trace-java/commit/946a1eaf6f8a8b677fb12d29f23684446d6d32f5", "committedDate": "2020-08-26T08:59:14Z", "message": "clarifying comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1945, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}