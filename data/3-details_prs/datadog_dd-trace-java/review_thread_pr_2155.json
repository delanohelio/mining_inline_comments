{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMjg1MDAy", "number": 2155, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMDo0OVrOE_z5kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTozOTowM1rOFAgJ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ2MDY2OnYy", "diffSide": "LEFT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/Reference.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMDo0OVrOH9uSkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMDo0OVrOH9uSkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzYwMA==", "bodyText": "Seems like an unrelated change and a net negative.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534483600", "createdAt": "2020-12-02T21:10:49Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/Reference.java", "diffHunk": "@@ -129,11 +131,6 @@ public Reference merge(final Reference anotherReference) {\n     return merged;\n   }\n \n-  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ2OTM4OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/Reference.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMzoxNlrOH9uXlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNDo0OVrOH9uatw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NDg4Nw==", "bodyText": "Doesn't produce the same result as before. In fact, I can't see and therefore reason about what it does produce any more. We have an annotation from a library which messes with IDE integrations so we can avoid a one liner.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534484887", "createdAt": "2020-12-02T21:13:16Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/Reference.java", "diffHunk": "@@ -9,10 +9,12 @@\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n+import lombok.ToString;\n import net.bytebuddy.jar.asm.Opcodes;\n import net.bytebuddy.jar.asm.Type;\n \n /** An immutable reference to a jvm class. */\n+@ToString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NTY4Nw==", "bodyText": "I can revert the lombok change, but it was useful when trying to debug this problem as the previous toString only printed the name.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534485687", "createdAt": "2020-12-02T21:14:49Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/Reference.java", "diffHunk": "@@ -9,10 +9,12 @@\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n+import lombok.ToString;\n import net.bytebuddy.jar.asm.Opcodes;\n import net.bytebuddy.jar.asm.Type;\n \n /** An immutable reference to a jvm class. */\n+@ToString", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NDg4Nw=="}, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ3NzA3OnYy", "diffSide": "RIGHT", "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNTozMFrOH9ucHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMTozNjowNFrOH9vHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NjA0NQ==", "bodyText": "this is inconsistent with behaviour elsewhere in the class where the value -1 is used when no line number is known.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534486045", "createdAt": "2020-12-02T21:15:30Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -180,9 +180,16 @@ public void visit(\n     refSourceClassName = Utils.getClassName(name);\n     refSourceType = Type.getType(\"L\" + name + \";\");\n     refSourceTypeInternalName = refSourceType.getInternalName();\n-    // Additional references we could check\n-    // - supertype of class and visible from this package\n-    // - interfaces of class and visible from this package\n+\n+    // Add references to each of the interfaces.\n+    for (String iface : interfaces) {\n+      addReference(\n+          new Reference.Builder(iface)\n+              .withSource(refSourceClassName, 0) // We don't have a specific line number to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MzAzMg==", "bodyText": "I'm not sure that the existing behaviour is correct. Line numbers will be missing if code has been passed through an obfuscator, for instance, in which case MethodVisitor.visitLineNumber wouldn't be entered, and line number 0 may be a better fallback value than -1.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534493032", "createdAt": "2020-12-02T21:28:36Z", "author": {"login": "richardstartin"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -180,9 +180,16 @@ public void visit(\n     refSourceClassName = Utils.getClassName(name);\n     refSourceType = Type.getType(\"L\" + name + \";\");\n     refSourceTypeInternalName = refSourceType.getInternalName();\n-    // Additional references we could check\n-    // - supertype of class and visible from this package\n-    // - interfaces of class and visible from this package\n+\n+    // Add references to each of the interfaces.\n+    for (String iface : interfaces) {\n+      addReference(\n+          new Reference.Builder(iface)\n+              .withSource(refSourceClassName, 0) // We don't have a specific line number to use.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NjA0NQ=="}, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NzA1Mw==", "bodyText": "This only matters for our own code, so the case of an obfuscator doesn't likely apply.  I don't care between -1 and 0, but I did extract it out to a static final.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534497053", "createdAt": "2020-12-02T21:36:04Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/agent-tooling/src/main/java/datadog/trace/agent/tooling/muzzle/ReferenceCreator.java", "diffHunk": "@@ -180,9 +180,16 @@ public void visit(\n     refSourceClassName = Utils.getClassName(name);\n     refSourceType = Type.getType(\"L\" + name + \";\");\n     refSourceTypeInternalName = refSourceType.getInternalName();\n-    // Additional references we could check\n-    // - supertype of class and visible from this package\n-    // - interfaces of class and visible from this package\n+\n+    // Add references to each of the interfaces.\n+    for (String iface : interfaces) {\n+      addReference(\n+          new Reference.Builder(iface)\n+              .withSource(refSourceClassName, 0) // We don't have a specific line number to use.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NjA0NQ=="}, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ4MTYwOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/test/java/muzzle/TestClasses.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNjo0NFrOH9uexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNjo0NFrOH9uexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NjcyNw==", "bodyText": "This is also an unrelated change... I uncommented it to verify it still worked and found it didn't, so I updated it here.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534486727", "createdAt": "2020-12-02T21:16:44Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/test/java/muzzle/TestClasses.java", "diffHunk": "@@ -95,10 +95,9 @@ public static boolean instanceofMethod(final Object a) {\n \n   // Can't test this until java 7 is dropped.\n   public static class InDyAdvice {\n-    //    public static MethodBodyAdvice.SomeInterface indyMethod(\n-    //        final MethodBodyAdvice.SomeImplementation a) {\n+    //    public static MethodBodyAdvice.HasMethod indyMethod(final MethodBodyAdvice.HasMethod a) {\n     //      Runnable aStaticMethod = MethodBodyAdvice.B::aStaticMethod;\n-    //      return a::someMethod;\n+    //      return a::requiredMethod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ4MzkyOnYy", "diffSide": "RIGHT", "path": "dd-java-agent/testing/src/test/groovy/muzzle/ReferenceCreatorTest.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNzoyNVrOH9ugJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNzoyNVrOH9ugJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4NzA3Ng==", "bodyText": "I didn't mean to check this test in... I'll remove it.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r534487076", "createdAt": "2020-12-02T21:17:25Z", "author": {"login": "tylerbenson"}, "path": "dd-java-agent/testing/src/test/groovy/muzzle/ReferenceCreatorTest.groovy", "diffHunk": "@@ -49,6 +49,19 @@ class ReferenceCreatorTest extends AgentTestRunner {\n     aFieldRefs.size() == 2\n   }\n \n+  def \"ref test\"() {\n+    setup:\n+    Map<String, Reference> references = ReferenceCreator.createReferencesFrom(MethodBodyAdvice.A.getName(), this.getClass().getClassLoader())\n+    def a = references.get('muzzle.TestClasses$MethodBodyAdvice$A')\n+    def b = references.get('muzzle.TestClasses$MethodBodyAdvice$B')\n+\n+    expect:\n+    references.keySet() == ['muzzle.TestClasses$MethodBodyAdvice$A', 'muzzle.TestClasses$MethodBodyAdvice$B'].toSet()\n+\n+    and: \"doesn't need to reference self\"\n+    !(a.getSources().any { it.name == 'muzzle.TestClasses$MethodBodyAdvice$A' })\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7f42bdb40196b64fd3d83e29c90fead2c01433"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDcxMTUwOnYy", "diffSide": "LEFT", "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTozOTowM1rOH-1iuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjoxNzoyOFrOH-3ksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY1MTAwMA==", "bodyText": "Why was this committed with this PR?", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r535651000", "createdAt": "2020-12-03T21:39:03Z", "author": {"login": "richardstartin"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -240,7 +240,8 @@ private void decrementRefAndMaybeWrite(boolean isRootSpan) {\n       }\n     }\n     if (log.isDebugEnabled()) {\n-      log.debug(\"t_id={} -> expired reference. pending count={}\", traceId, count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d9ca5faecad6dcdefef3e85d15a69816715c761"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2MjU1OA==", "bodyText": "Yes, agreed.  That seems completely unrelated and should not be in this PR.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r535662558", "createdAt": "2020-12-03T21:49:42Z", "author": {"login": "dougqh"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -240,7 +240,8 @@ private void decrementRefAndMaybeWrite(boolean isRootSpan) {\n       }\n     }\n     if (log.isDebugEnabled()) {\n-      log.debug(\"t_id={} -> expired reference. pending count={}\", traceId, count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY1MTAwMA=="}, "originalCommit": {"oid": "5d9ca5faecad6dcdefef3e85d15a69816715c761"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4NDI3NA==", "bodyText": "it is unrelated to the pr.  I made this change to troubleshoot some build failures, but the build passed following this change.  It seems like a useful and very minor change so I left it in.", "url": "https://github.com/DataDog/dd-trace-java/pull/2155#discussion_r535684274", "createdAt": "2020-12-03T22:17:28Z", "author": {"login": "tylerbenson"}, "path": "dd-trace-core/src/main/java/datadog/trace/core/PendingTrace.java", "diffHunk": "@@ -240,7 +240,8 @@ private void decrementRefAndMaybeWrite(boolean isRootSpan) {\n       }\n     }\n     if (log.isDebugEnabled()) {\n-      log.debug(\"t_id={} -> expired reference. pending count={}\", traceId, count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY1MTAwMA=="}, "originalCommit": {"oid": "5d9ca5faecad6dcdefef3e85d15a69816715c761"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}