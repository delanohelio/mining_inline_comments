{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTgwMTgy", "number": 3180, "title": "Make recorder .flv videos scrollable (#512)", "bodyText": "I have written an implementation to fix the scrollable video using ffmpeg command, which will also reduce the video size as mentioned by @leonard84\nI have also opened a related pull Request testcontainers/vnc-recorder#4 by adding ffmpeg to the docker image, which (I saw) necessary to avoid using another container and also simplify the fix.\nJust to mention that some test won't pass untill the new vnc-recorder docker image is available with tag 1.2.0.\n(Thank to @kiview for his assitance during hack-commit-push (last june) which make contributing to testcontainers more clear for me.)\nFixes #512.", "createdAt": "2020-08-31T22:18:18Z", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180", "merged": true, "mergeCommit": {"oid": "a6f91e3b69a401159f88d9044cb557a12441d5f6"}, "closed": true, "closedAt": "2021-02-10T10:08:07Z", "author": {"login": "oussamabadr"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEhVYMgFqTQ3OTQyODg0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd4tTOJgH2gAyNDc2NTgwMTgyOjljY2ViYjc2MTg5NGRjNDIwZjg3OTc4ZjM3OWQ0MjE5OTFiZjU4N2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NDI4ODQ1", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-479428845", "createdAt": "2020-09-01T06:17:23Z", "commit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoxNzoyM1rOHKllrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoyMjoyMVrOHKly7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2MzY2MQ==", "bodyText": "Should we rename this method to reencodeRecording?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480863661", "createdAt": "2020-09-01T06:17:23Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        fixRecordDuration();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void fixRecordDuration() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NDkwNA==", "bodyText": "This line might be problematic in certain CI environments. copyFiletoContainer should be the safer method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480864904", "createdAt": "2020-09-01T06:19:09Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {\n+                    container.withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n+                            .withFileSystemBind(recordedFile, \"/tmp/chromeTestRecord.flv\", BindMode.READ_WRITE )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NzAyMA==", "bodyText": "In general, we like to avoid using 3rd party images as part of our CI (if we can). I assume we could use the updated vnc-recorder container here as well, or?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480867020", "createdAt": "2020-09-01T06:22:18Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NzA1NQ==", "bodyText": "OneShotStartupCheckStrategy  should not throw an exception if the container stops with exit code 0.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480867055", "createdAt": "2020-09-01T06:22:21Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {\n+                    container.withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n+                            .withFileSystemBind(recordedFile, \"/tmp/chromeTestRecord.flv\", BindMode.READ_WRITE )\n+                            .withCommand(\"-i\" ,\"/tmp/chromeTestRecord.flv\")\n+                            .withLogConsumer(dockerLogConsumer)\n+                            .start();\n+                } catch (RuntimeException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/4fbd2fed5794fb7071fe9843ee924deef89e0b62", "committedDate": "2020-08-31T21:53:32Z", "message": "Make recorder .flv videos scrollable (#512)"}, "afterCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/a50d156936320e5fe4d513c2744e2479b2dd2cc6", "committedDate": "2020-09-02T21:13:49Z", "message": "Remove third party container + Refactoring (#512)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzEwMjEy", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-481310212", "createdAt": "2020-09-02T21:22:25Z", "commit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMjoyNVrOHMIj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMjoyNVrOHMIj5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ==", "bodyText": "Why encode to .flv instead of .mp4 container? Only to avoid the -movflags faststart parameter?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482485221", "createdAt": "2020-09-02T21:22:25Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTU1NDY0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-481555464", "createdAt": "2020-09-03T07:12:44Z", "commit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoxMjo0NFrOHMZHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoxNTo0NlrOHMZNkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NjQ4NQ==", "bodyText": "I personally have no opinion about this.\n@leonard84 could you elaborate why .mp4 would be the better choice? Would be happy to endorse this instead and change it in this PR, if it is the better choice for whatever reason.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482756485", "createdAt": "2020-09-03T07:12:44Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzE0MQ==", "bodyText": "I wonder, can't we use VncRecordingContainer here directly? You can still override cmdModifier etc.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482757141", "createdAt": "2020-09-03T07:14:05Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1ODAzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String dockerOutput;\n          \n          \n            \n                            String dockerOutput = \"\";\n          \n      \n    \n    \n  \n\nMaybe better to initialize with empty String, so we can't end up with NPE in the assert.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482758033", "createdAt": "2020-09-03T07:15:46Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/a50d156936320e5fe4d513c2744e2479b2dd2cc6", "committedDate": "2020-09-02T21:13:49Z", "message": "Remove third party container + Refactoring (#512)"}, "afterCommit": {"oid": "7008dfd3d7b94b50dbde41cc2b45f8c15a2d6b28", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/7008dfd3d7b94b50dbde41cc2b45f8c15a2d6b28", "committedDate": "2020-09-06T14:36:57Z", "message": "Remove third party container + Refactoring (#512)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7008dfd3d7b94b50dbde41cc2b45f8c15a2d6b28", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/7008dfd3d7b94b50dbde41cc2b45f8c15a2d6b28", "committedDate": "2020-09-06T14:36:57Z", "message": "Remove third party container + Refactoring (#512)"}, "afterCommit": {"oid": "30963c2fae95272bcda09b0a6a763be143e1e730", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/30963c2fae95272bcda09b0a6a763be143e1e730", "committedDate": "2020-09-20T22:26:34Z", "message": "Fix tests in Selenium module"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30963c2fae95272bcda09b0a6a763be143e1e730", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/30963c2fae95272bcda09b0a6a763be143e1e730", "committedDate": "2020-09-20T22:26:34Z", "message": "Fix tests in Selenium module"}, "afterCommit": {"oid": "4b75c5ea012f3634b23459318287552c0dde1dde", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/4b75c5ea012f3634b23459318287552c0dde1dde", "committedDate": "2020-10-10T18:10:04Z", "message": "Fixing test after merge with master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b75c5ea012f3634b23459318287552c0dde1dde", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/4b75c5ea012f3634b23459318287552c0dde1dde", "committedDate": "2020-10-10T18:10:04Z", "message": "Fixing test after merge with master"}, "afterCommit": {"oid": "f76e59a9cb56c451b23987c5f1fa6c6f1784be6b", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/f76e59a9cb56c451b23987c5f1fa6c6f1784be6b", "committedDate": "2020-10-10T23:20:29Z", "message": "Fixing test after merge with master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f76e59a9cb56c451b23987c5f1fa6c6f1784be6b", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/f76e59a9cb56c451b23987c5f1fa6c6f1784be6b", "committedDate": "2020-10-10T23:20:29Z", "message": "Fixing test after merge with master"}, "afterCommit": {"oid": "0af43e01aa1f815ed695b4ea14e26a3d41561fa7", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/0af43e01aa1f815ed695b4ea14e26a3d41561fa7", "committedDate": "2020-10-10T23:51:23Z", "message": "Fixing test after merge with master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTYxMzI5", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-506561329", "createdAt": "2020-10-12T12:09:39Z", "commit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjowOTozOVrOHf8Bbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoxMTozMVrOHf8FEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MTMxMQ==", "bodyText": "Why do you need this sleep?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r503251311", "createdAt": "2020-10-12T12:09:39Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +66,53 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjI0Mg==", "bodyText": "I think it is not guaranteed, that the command did finish, therefore you miss the logs in CI, which runs slower. This container is missing the appropriate Wait Strategy. LogMessageWaitStrategy seems to be a good candidate here.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r503252242", "createdAt": "2020-10-12T12:11:31Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +66,53 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(5);\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                    }\n+                }, Optional.empty());\n+\n+                String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {\n+                    String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                    container.withCopyFileToContainer(MountableFile.forHostPath(recordedFile), recordFileContainerPath)\n+                            .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                            .withStartupTimeout( Duration.ofMinutes(1) )\n+                            .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n+                            .start();\n+                    String ffmpegOutput = container.getLogs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98b7b2a434986a5323eadba6bda9e6c6a9aa1008", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/98b7b2a434986a5323eadba6bda9e6c6a9aa1008", "committedDate": "2020-10-13T03:50:06Z", "message": "Fix test for CI build"}, "afterCommit": {"oid": "ae172f5255dc51c6aadad3f6a3f1b810b0470d79", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/ae172f5255dc51c6aadad3f6a3f1b810b0470d79", "committedDate": "2020-10-13T04:02:01Z", "message": "Fix test [recordingTestThatShouldHaveCorrectDuration] broken in CI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDAxMTM3", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-526001137", "createdAt": "2020-11-09T08:00:32Z", "commit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowMDozMlrOHviwUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMTowOVrOHvjDlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNDU0NA==", "bodyText": "Maybe this is my mistake from solving the merge conflict, but why is getVncDockerImageName() needed?\nCan't you use getVncRecordedContainerImage()? (which I admit, has probably a typo, the name is strange)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519614544", "createdAt": "2020-11-09T08:00:32Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -105,6 +105,10 @@ public String getSocatContainerImage() {\n \n     @Deprecated\n     public String getVncRecordedContainerImage() {\n+        return getVncDockerImageName().asCanonicalNameString();\n+    }\n+\n+    public DockerImageName getVncDockerImageName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNjIzNg==", "bodyText": "You can remove those comments. They are our markers for generating code includes in the docs.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // recordAll {\n          \n          \n            \n                            // To do this, simply add extra parameters to the rule constructor:", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519616236", "createdAt": "2020-11-09T08:04:14Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNjgwNw==", "bodyText": "Why sleep? Shouldn't we get a duration > 0 either way?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519616807", "createdAt": "2020-11-09T08:05:31Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxODQ0MA==", "bodyText": "ok, makes sense.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519618440", "createdAt": "2020-11-09T08:09:04Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzE0MQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxOTQ3Nw==", "bodyText": "Better to have a unique name here and also use this in the regex below (this was copied from the test above).", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519619477", "createdAt": "2020-11-09T08:11:09Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(1);\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                    }\n+                }, Optional.empty());\n+\n+                String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934", "author": {"user": {"login": "kiview", "name": "Kevin Wittek"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/eb9a077456ec916e1093cd7d97860138f51c1934", "committedDate": "2020-11-09T07:57:49Z", "message": "Merge branch 'master' into master"}, "afterCommit": {"oid": "0fdd4a064c8e7cedd9050d03013cbdb4d97849df", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/0fdd4a064c8e7cedd9050d03013cbdb4d97849df", "committedDate": "2020-11-15T19:36:18Z", "message": "Refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjAwMjk4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-531200298", "createdAt": "2020-11-16T10:38:20Z", "commit": {"oid": "0fdd4a064c8e7cedd9050d03013cbdb4d97849df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozODoyMVrOHz0eww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozODoyMVrOHz0eww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5OTI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            TimeUnit.MILLISECONDS.sleep(500);\n          \n          \n            \n                            TimeUnit.MILLISECONDS.sleep(500); // to make sure video will have a duration", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r524099267", "createdAt": "2020-11-16T10:38:21Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,54 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.MILLISECONDS.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fdd4a064c8e7cedd9050d03013cbdb4d97849df"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjAzMzY0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-531203364", "createdAt": "2020-11-16T10:42:27Z", "commit": {"oid": "46810984dd4bfe752be80529aeb261741076951a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNDg2NjUz", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-531486653", "createdAt": "2020-11-16T16:25:54Z", "commit": {"oid": "46810984dd4bfe752be80529aeb261741076951a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNTo1NFrOH0GqTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNTo1NFrOH0GqTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NzEzMw==", "bodyText": "Since commenting doesn't seem to reopen the issue, I have to make a new one https://github.com/testcontainers/testcontainers-java/pull/3180/files#r524394794\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String newFlvOutput = \"/newScreen.flv\";\n          \n          \n            \n                    execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);\n          \n          \n            \n                    String newFlvOutput = \"/newScreen.mp4\";\n          \n          \n            \n                    execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", \"-movflags\", \"faststart\", newFlvOutput);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r524397133", "createdAt": "2020-11-16T16:25:54Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";\n+        execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46810984dd4bfe752be80529aeb261741076951a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTc2ODk1", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-535976895", "createdAt": "2020-11-21T16:13:26Z", "commit": {"oid": "46810984dd4bfe752be80529aeb261741076951a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46810984dd4bfe752be80529aeb261741076951a", "author": {"user": {"login": "kiview", "name": "Kevin Wittek"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/46810984dd4bfe752be80529aeb261741076951a", "committedDate": "2020-11-16T10:38:30Z", "message": "Update modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java"}, "afterCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/8b78a9ce4ea9a90661935e5db6d87aa26b858fe0", "committedDate": "2020-12-11T13:04:13Z", "message": "Add MP4 support for Recorded video + Make FLV default format (#512)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMTI3ODc3", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-550127877", "createdAt": "2020-12-11T14:08:47Z", "commit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDowODo0N1rOID6USw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoyMzozNFrOID68Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MjEwNw==", "bodyText": "What about @NonNull for the parameters", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540972107", "createdAt": "2020-12-11T14:08:47Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -97,18 +106,44 @@ public void saveRecordingToFile(File file) {\n \n     @SneakyThrows\n     public InputStream streamRecording() {\n-        reencodeRecording();\n+        String newRecordingFileName = recordingFormat.reencodeRecording(this, ORIGINAL_RECORDING_FILE_NAME);\n \n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n-                dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n+                dockerClient.copyArchiveFromContainerCmd(getContainerId(), newRecordingFileName).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    private void reencodeRecording() throws IOException, InterruptedException {\n-        String newFlvOutput = \"/newScreen.flv\";\n-        execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);\n-        execInContainer(\"mv\" , \"-f\", newFlvOutput, RECORDING_FILE_NAME);\n+\n+    public enum VncRecordingFormat {\n+        FLV(\"flv\") {\n+            @Override\n+            String reencodeRecording(VncRecordingContainer container, String source) throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MzY4Mg==", "bodyText": "I would not break existing interfaces and update this method", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540973682", "createdAt": "2020-12-11T14:11:21Z", "author": {"login": "leonard84"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "diffHunk": "@@ -1,15 +1,16 @@\n package org.testcontainers.containers;\n \n import org.junit.runner.Description;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n \n import java.io.File;\n \n public interface RecordingFileFactory {\n \n     @Deprecated\n-    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded) {\n-        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded);\n+    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded, VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MDcxMg==", "bodyText": "This breaks existing implementations, I'm not sure what the most elegant solution would be.\nThis would create a stackoverflow if you don't implement any of the new methods, but if you already have one that is using the three param recordingFileForTest it would work.\n@Deprecated\ndefault File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) { \n    return recordingFileForTest(vncRecordingDirectory, prefix, boolean, null);\n}\n    default File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat) {\n    return recordingFileForTest(vncRecordingDirectory, prefix, boolean);\n}\nThe alternative would be to just return null from the three param default method, since our code would call the four param version. In any case we would need to add default methods so that users are not forced to implement an unused method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540980712", "createdAt": "2020-12-11T14:21:21Z", "author": {"login": "leonard84"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "diffHunk": "@@ -1,15 +1,16 @@\n package org.testcontainers.containers;\n \n import org.junit.runner.Description;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n \n import java.io.File;\n \n public interface RecordingFileFactory {\n \n     @Deprecated\n-    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded) {\n-        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded);\n+    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded, VncRecordingFormat recordingFormat) {\n+        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded, recordingFormat);\n     }\n \n-    File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded);\n+    File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MTYzOQ==", "bodyText": "Add @NonNull", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540981639", "createdAt": "2020-12-11T14:22:32Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,57 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MjMyNw==", "bodyText": "@NonNull should also be added where it applies", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540982327", "createdAt": "2020-12-11T14:23:34Z", "author": {"login": "leonard84"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -358,8 +361,13 @@ public SELF withLinkToContainer(LinkableContainer otherContainer, String alias)\n     }\n \n     public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory) {\n+        return withRecordingMode(recordingMode, vncRecordingDirectory, null);\n+    }\n+\n+    public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTQ2OTQ0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-550946944", "createdAt": "2020-12-13T18:33:45Z", "commit": {"oid": "f57fc24b35578e10f73f3770e555d15fcc4cadce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f57fc24b35578e10f73f3770e555d15fcc4cadce", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/f57fc24b35578e10f73f3770e555d15fcc4cadce", "committedDate": "2020-12-12T19:06:24Z", "message": "Backward compatibility for default Recording format + Add Null check (#512)"}, "afterCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b", "committedDate": "2021-01-29T00:15:11Z", "message": "Backward compatibility for default Recording format + Add Null check (#512)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NDI3MDA3", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-579427007", "createdAt": "2021-01-29T16:38:55Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MDI3", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894027", "createdAt": "2021-02-06T16:03:18Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowMzoxOFrOIg-q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowMzoxOFrOIg-q5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjEzMw==", "bodyText": "shouldn't it be withVideoFormat?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452133", "createdAt": "2021-02-06T16:03:18Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -71,6 +74,13 @@ public VncRecordingContainer withVncPort(int vncPort) {\n         return this;\n     }\n \n+    public VncRecordingContainer withVideoExtension(VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MDM3", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894037", "createdAt": "2021-02-06T16:03:27Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowMzoyOFrOIg-q7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowMzoyOFrOIg-q7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try(InputStream inputStream = streamRecording()) {\n          \n          \n            \n                    try (InputStream inputStream = streamRecording()) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452143", "createdAt": "2021-02-06T16:03:28Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,69 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(@NonNull File file) {\n+        try(InputStream inputStream = streamRecording()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MDk5", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894099", "createdAt": "2021-02-06T16:04:26Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNDoyNlrOIg-rXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNDoyNlrOIg-rXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjI1Mg==", "bodyText": "what's the purpose of this method?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452252", "createdAt": "2021-02-06T16:04:26Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,69 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(@NonNull File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        String newRecordingFileName = recordingFormat.reencodeRecording(this, ORIGINAL_RECORDING_FILE_NAME);\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n-                dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n+                dockerClient.copyArchiveFromContainerCmd(getContainerId(), newRecordingFileName).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+\n+    public enum VncRecordingFormat {\n+        FLV(\"flv\") {\n+            @Override\n+            String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {\n+                String newFileOutput = \"/newScreen.flv\";\n+                container.execInContainer(\"ffmpeg\" , \"-i\", source, \"-vcodec\", \"libx264\", newFileOutput);\n+                return newFileOutput;\n+            }\n+        },\n+        MP4(\"mp4\") {\n+            @Override\n+            String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {\n+                String newFileOutput = \"/newScreen.mp4\";\n+                container.execInContainer(\"ffmpeg\" , \"-i\", source, \"-vcodec\", \"libx264\", \"-movflags\", \"faststart\", newFileOutput);\n+                return newFileOutput;\n+            }\n+        };\n+\n+        abstract String reencodeRecording(VncRecordingContainer container, String source) throws IOException, InterruptedException;\n+\n+        private static final VncRecordingFormat DEFAULT_FORMAT = FLV;\n+        private final String filenameExtension;\n+\n+        VncRecordingFormat(String filenameExtension) {\n+            this.filenameExtension = filenameExtension;\n+        }\n+\n+        public String getExtension() {\n+            return filenameExtension;\n+        }\n+\n+        /**\n+         * @return {@code vncRecordingFormat} value if not null, otherwise, {@link VncRecordingFormat#FLV} will be returned as a default format.\n+         */\n+        public static VncRecordingFormat of(VncRecordingFormat vncRecordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MTYz", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894163", "createdAt": "2021-02-06T16:05:21Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNToyMVrOIg-rqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNToyMVrOIg-rqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjMyOA==", "bodyText": "Let's not make it Nullable:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, @Nullable VncRecordingFormat recordingFormat) {\n          \n          \n            \n                public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, VncRecordingFormat recordingFormat) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452328", "createdAt": "2021-02-06T16:05:21Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -358,8 +361,13 @@ public SELF withLinkToContainer(LinkableContainer otherContainer, String alias)\n     }\n \n     public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory) {\n+        return withRecordingMode(recordingMode, vncRecordingDirectory, null);\n+    }\n+\n+    public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, @Nullable VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MjA4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894208", "createdAt": "2021-02-06T16:05:52Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNTo1MlrOIg-sBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNTo1MlrOIg-sBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjQyMw==", "bodyText": "Should not be null:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        VncRecordingFormat.of(recordingFormat).getExtension()\n          \n          \n            \n                        recordingFormat.getExtension()", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452423", "createdAt": "2021-02-06T16:05:52Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "diffHunk": "@@ -4,20 +4,29 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n+import static org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+\n public class DefaultRecordingFileFactory implements RecordingFileFactory {\n \n     private static final SimpleDateFormat filenameDateFormat = new SimpleDateFormat(\"YYYYMMdd-HHmmss\");\n     private static final String PASSED = \"PASSED\";\n     private static final String FAILED = \"FAILED\";\n-    private static final String FILENAME_FORMAT = \"%s-%s-%s.flv\";\n+    private static final String FILENAME_FORMAT = \"%s-%s-%s.%s\";\n+\n \n     @Override\n     public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) {\n+        return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);\n+    }\n+\n+    @Override\n+    public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat) {\n         final String resultMarker = succeeded ? PASSED : FAILED;\n         final String fileName = String.format(FILENAME_FORMAT,\n             resultMarker,\n             prefix,\n-            filenameDateFormat.format(new Date())\n+            filenameDateFormat.format(new Date()),\n+            VncRecordingFormat.of(recordingFormat).getExtension()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MjM5", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894239", "createdAt": "2021-02-06T16:06:24Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNjoyNFrOIg-sTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNjoyNFrOIg-sTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjQ5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);\n          \n          \n            \n                    return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, VncRecordingFormat.FLV);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452494", "createdAt": "2021-02-06T16:06:24Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "diffHunk": "@@ -4,20 +4,29 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n+import static org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+\n public class DefaultRecordingFileFactory implements RecordingFileFactory {\n \n     private static final SimpleDateFormat filenameDateFormat = new SimpleDateFormat(\"YYYYMMdd-HHmmss\");\n     private static final String PASSED = \"PASSED\";\n     private static final String FAILED = \"FAILED\";\n-    private static final String FILENAME_FORMAT = \"%s-%s-%s.flv\";\n+    private static final String FILENAME_FORMAT = \"%s-%s-%s.%s\";\n+\n \n     @Override\n     public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) {\n+        return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MzEx", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894311", "createdAt": "2021-02-06T16:07:33Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNzozM1rOIg-s2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNzozM1rOIg-s2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjYzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n          \n          \n            \n                        try (GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\"))) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452632", "createdAt": "2021-02-06T16:07:33Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MzUz", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894353", "createdAt": "2021-02-06T16:08:00Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODowMVrOIg-tJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODowMVrOIg-tJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjcxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .waitingFor( new LogMessageWaitStrategy()\n          \n          \n            \n                                    .waitingFor(new LogMessageWaitStrategy()", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452710", "createdAt": "2021-02-06T16:08:01Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                        .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n+                        .waitingFor( new LogMessageWaitStrategy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0MzY0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894364", "createdAt": "2021-02-06T16:08:08Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODowOFrOIg-tPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODowOFrOIg-tPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjczMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n          \n          \n            \n                                    .withCommand(\"-i\", recordFileContainerPath, \"-f\" ,\"null\" ,\"-\")", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452732", "createdAt": "2021-02-06T16:08:08Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                        .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0ODk0Mzg3", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#pullrequestreview-584894387", "createdAt": "2021-02-06T16:08:25Z", "commit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODoyNVrOIg-tXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODoyNVrOIg-tXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1Mjc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n          \n          \n            \n                                    .withCreateContainerCmdModifier(createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\"))", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452764", "createdAt": "2021-02-06T16:08:25Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1942be72eb3590ba31d762eaa49ef399c7cebfb", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/a1942be72eb3590ba31d762eaa49ef399c7cebfb", "committedDate": "2021-02-10T08:38:08Z", "message": "Make recorder .flv videos scrollable (#512)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "839b3eeec4056ded7e1b123618779e6b651c7d68", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/839b3eeec4056ded7e1b123618779e6b651c7d68", "committedDate": "2021-02-10T08:38:08Z", "message": "Remove third party container + Refactoring (#512)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16453c2fd9449c64bb3fff029c8fb1ef4e502821", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/16453c2fd9449c64bb3fff029c8fb1ef4e502821", "committedDate": "2021-02-10T08:38:08Z", "message": "Fixing test after merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de2f51a6450d1337c3a91a76053f07bddb4f1abe", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/de2f51a6450d1337c3a91a76053f07bddb4f1abe", "committedDate": "2021-02-10T08:38:08Z", "message": "Fix test [recordingTestThatShouldHaveCorrectDuration] broken in CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c384de31767ae2bbaae70648cc6ce83c60fe7d5", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/9c384de31767ae2bbaae70648cc6ce83c60fe7d5", "committedDate": "2021-02-10T08:38:08Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6382c0b800b990f1a6db6255f1ba4bea80fb4cb8", "author": {"user": {"login": "kiview", "name": "Kevin Wittek"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/6382c0b800b990f1a6db6255f1ba4bea80fb4cb8", "committedDate": "2021-02-10T08:38:08Z", "message": "Update modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "997d34a137bd5e7f857ccf9b6267d26e665d4320", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/997d34a137bd5e7f857ccf9b6267d26e665d4320", "committedDate": "2021-02-10T08:38:08Z", "message": "Add MP4 support for Recorded video + Make FLV default format (#512)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e093058765e6958ee24ef8db96be3e191312b852", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/e093058765e6958ee24ef8db96be3e191312b852", "committedDate": "2021-02-10T08:38:08Z", "message": "Backward compatibility for default Recording format + Add Null check (#512)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01554f0c6ecce8b73484a51acff6056b4e0f599e", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/01554f0c6ecce8b73484a51acff6056b4e0f599e", "committedDate": "2021-02-10T08:38:08Z", "message": "Correct code format + Make video format non nullable (#512)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b", "committedDate": "2021-01-29T00:15:11Z", "message": "Backward compatibility for default Recording format + Add Null check (#512)"}, "afterCommit": {"oid": "01554f0c6ecce8b73484a51acff6056b4e0f599e", "author": {"user": {"login": "oussamabadr", "name": "Oussama BADR"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/01554f0c6ecce8b73484a51acff6056b4e0f599e", "committedDate": "2021-02-10T08:38:08Z", "message": "Correct code format + Make video format non nullable (#512)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ccebb761894dc420f87978f379d421991bf587f", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/9ccebb761894dc420f87978f379d421991bf587f", "committedDate": "2021-02-10T09:43:43Z", "message": "cleanups"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3327, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}