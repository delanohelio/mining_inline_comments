{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NjIyMzA1", "number": 2690, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MDo1OFrOD8NfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjo0MzoyNVrOEsWeWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDYyMDgxOnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MDo1OFrOGVAzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowNDozNlrOGVgrvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw==", "bodyText": "does it really need to be an image? Can't we just use the command for it, since the image is not cached anyways?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r424686433", "createdAt": "2020-05-13T19:40:58Z", "author": {"login": "bsideup"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n+\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tprivate List<String> commands = new ArrayList<>();\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t\trunAdditionalCommands();\n+\t}\n+\n+\tprivate void runAdditionalCommands() {\n+\t\tthis.commands.forEach(cmd -> {\n+\t\t\ttry {\n+\t\t\t\texecInContainer(cmd);\n+\t\t\t} catch (IOException | InterruptedException e) {\n+\t\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmd, e.getMessage());\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic SELF withAdditionalCommands(String... cmds) {\n+\t\tthis.commands.addAll(Arrays.asList(cmds));\n+\t\treturn self();\n+\t}\n+\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64f426c620372d757fa16d63b966620dd4e5d7d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NTk5Ng==", "bodyText": "At the beginning I was not able to run it using command but that led me to know more about testcontainers. Now, I did it but had to set up a startupTimeout.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r424845996", "createdAt": "2020-05-14T03:10:00Z", "author": {"login": "eddumelendez"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n+\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tprivate List<String> commands = new ArrayList<>();\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t\trunAdditionalCommands();\n+\t}\n+\n+\tprivate void runAdditionalCommands() {\n+\t\tthis.commands.forEach(cmd -> {\n+\t\t\ttry {\n+\t\t\t\texecInContainer(cmd);\n+\t\t\t} catch (IOException | InterruptedException e) {\n+\t\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmd, e.getMessage());\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic SELF withAdditionalCommands(String... cmds) {\n+\t\tthis.commands.addAll(Arrays.asList(cmds));\n+\t\treturn self();\n+\t}\n+\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, "originalCommit": {"oid": "64f426c620372d757fa16d63b966620dd4e5d7d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwMzIwNw==", "bodyText": "Are we sure about this? \ud83d\ude04\nIt looks like these setup steps will require a non-trivial amount of time to execute - perhaps even the majority of the startup time.\nWould it be worth trying to get more attention on GoogleCloudPlatform/cloud-sdk-docker#202 so that we can avoid having these setup steps entirely?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425203207", "createdAt": "2020-05-14T14:57:23Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n+\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tprivate List<String> commands = new ArrayList<>();\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t\trunAdditionalCommands();\n+\t}\n+\n+\tprivate void runAdditionalCommands() {\n+\t\tthis.commands.forEach(cmd -> {\n+\t\t\ttry {\n+\t\t\t\texecInContainer(cmd);\n+\t\t\t} catch (IOException | InterruptedException e) {\n+\t\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmd, e.getMessage());\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic SELF withAdditionalCommands(String... cmds) {\n+\t\tthis.commands.addAll(Arrays.asList(cmds));\n+\t\treturn self();\n+\t}\n+\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, "originalCommit": {"oid": "64f426c620372d757fa16d63b966620dd4e5d7d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNTA0Ng==", "bodyText": "Actually, I missed that we install Java and other things... Yeah, I believe we need to wait for these images :(", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425205046", "createdAt": "2020-05-14T14:59:38Z", "author": {"login": "bsideup"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n+\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tprivate List<String> commands = new ArrayList<>();\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t\trunAdditionalCommands();\n+\t}\n+\n+\tprivate void runAdditionalCommands() {\n+\t\tthis.commands.forEach(cmd -> {\n+\t\t\ttry {\n+\t\t\t\texecInContainer(cmd);\n+\t\t\t} catch (IOException | InterruptedException e) {\n+\t\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmd, e.getMessage());\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic SELF withAdditionalCommands(String... cmds) {\n+\t\tthis.commands.addAll(Arrays.asList(cmds));\n+\t\treturn self();\n+\t}\n+\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, "originalCommit": {"oid": "64f426c620372d757fa16d63b966620dd4e5d7d5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwODc2Nw==", "bodyText": "/cc @jamesward @saturnism", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425208767", "createdAt": "2020-05-14T15:04:36Z", "author": {"login": "bsideup"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.github.dockerjava.api.command.InspectContainerResponse;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.testcontainers.images.builder.dockerfile.DockerfileBuilder;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {\n+\n+\tpublic static final String DEFAULT_GCLOUD_IMAGE = \"google/cloud-sdk:291.0.0-alpine\";\n+\n+\tprivate List<String> commands = new ArrayList<>();\n+\n+\tpublic GCloudGenericContainer(String image) {\n+\t\tsuper(image);\n+\t}\n+\n+\tpublic GCloudGenericContainer(String image, String mainCmd, String[] prerequisiteCmds) {\n+\t\tsuper(buildImage(image, mainCmd, prerequisiteCmds));\n+\t}\n+\n+\t@Override\n+\tprotected void containerIsStarted(InspectContainerResponse containerInfo) {\n+\t\trunAdditionalCommands();\n+\t}\n+\n+\tprivate void runAdditionalCommands() {\n+\t\tthis.commands.forEach(cmd -> {\n+\t\t\ttry {\n+\t\t\t\texecInContainer(cmd);\n+\t\t\t} catch (IOException | InterruptedException e) {\n+\t\t\t\tlogger().error(\"Failed to execute {}. Exception message: {}\", cmd, e.getMessage());\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic SELF withAdditionalCommands(String... cmds) {\n+\t\tthis.commands.addAll(Arrays.asList(cmds));\n+\t\treturn self();\n+\t}\n+\n+\tprivate static ImageFromDockerfile buildImage(String image, String mainCmd, String[] prerequisiteCmds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjQzMw=="}, "originalCommit": {"oid": "64f426c620372d757fa16d63b966620dd4e5d7d5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg0MTE4OnYy", "diffSide": "RIGHT", "path": "docs/modules/gcloud.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1ODo0NlrOGVgafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1ODo0NlrOGVgafg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNDM1MA==", "bodyText": "Please could you add the incubating module note mentioned at the bottom of https://www.testcontainers.org/contributing/#contributing-new-modules ?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425204350", "createdAt": "2020-05-14T14:58:46Z", "author": {"login": "rnorth"}, "path": "docs/modules/gcloud.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# GCloud Module\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg1MTgyOnYy", "diffSide": "RIGHT", "path": "docs/modules/gcloud.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowMDo1M1rOGVghPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowMDo1M1rOGVghPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNjA3OQ==", "bodyText": "Please could you make this an executable example by using the codeinclude macro that we have set up? (please see here for an example)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425206079", "createdAt": "2020-05-14T15:00:53Z", "author": {"login": "rnorth"}, "path": "docs/modules/gcloud.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# GCloud Module\n+\n+Testcontainers module for the Google's [Cloud SDK](https://cloud.google.com/sdk/).\n+\n+Currently, the module supports `datastore`, `firestore`, `pubsub` and `spanner` emulators. In order to use it, you should use the following classes:\n+\n+* DatastoreEmulatorContainer\n+* FirestoreEmulatorContainer\n+* PubSubEmulatorContainer\n+* SpannerEmulatorContainer\n+\n+## Usage example\n+\n+Running GCloud as a stand-in for Google Firestore during a test:\n+\n+```java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg2NzY0OnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowNDoyOVrOGVgrbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToyNTo1MlrOGVhqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwODY4NQ==", "bodyText": "We should probably remove these printlns or use slf4j.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425208685", "createdAt": "2020-05-14T15:04:29Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.testcontainers.containers;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Instance;\n+import com.google.cloud.spanner.InstanceAdminClient;\n+import com.google.cloud.spanner.InstanceConfigId;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.InstanceInfo;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SpannerEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic SpannerEmulatorContainer emulator = new SpannerEmulatorContainer();\n+\n+\tprivate static final String PROJECT_NAME = \"test-project\";\n+\tprivate static final String INSTANCE_NAME = \"test-instance\";\n+\tprivate static final String DATABASE_NAME = \"test-database\";\n+\n+\t@Test\n+\tpublic void testSimple() throws ExecutionException, InterruptedException {\n+\t\tSpannerOptions options = SpannerOptions.newBuilder()\n+\t\t\t\t.setEmulatorHost(emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(9010))\n+\t\t\t\t.setCredentials(NoCredentials.getInstance())\n+\t\t\t\t.build();\n+\n+\t\tSpanner spanner = options.getService();\n+\n+\t\tInstanceId instanceId = createInstance(spanner);\n+\n+\t\tcreateDatabase(spanner);\n+\n+\t\tDatabaseId databaseId = DatabaseId.of(instanceId, DATABASE_NAME);\n+\t\tDatabaseClient dbClient = spanner.getDatabaseClient(databaseId);\n+\t\tdbClient.readWriteTransaction()\n+\t\t\t\t.run(tx -> {\n+\t\t\t\t\tString sql1 = \"Delete from TestTable where 1=1\";\n+\t\t\t\t\ttx.executeUpdate(Statement.of(sql1));\n+\t\t\t\t\tString sql = \"INSERT INTO TestTable (Key, Value) VALUES (1, 'Java'), (2, 'Go')\";\n+\t\t\t\t\ttx.executeUpdate(Statement.of(sql));\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\n+\t\tResultSet resultSet = dbClient.readOnlyTransaction()\n+\t\t\t\t.executeQuery(Statement.of(\"select * from TestTable order by Key\"));\n+\t\tresultSet.next();\n+\t\tassertThat(resultSet.getLong(0)).isEqualTo(1);\n+\t\tassertThat(resultSet.getString(1)).isEqualTo(\"Java\");\n+\t}\n+\n+\tprivate void createDatabase(Spanner spanner) throws InterruptedException, ExecutionException {\n+\t\tDatabaseAdminClient dbAdminClient = spanner.getDatabaseAdminClient();\n+\t\tDatabase database = dbAdminClient.createDatabase(INSTANCE_NAME, DATABASE_NAME, Arrays.asList(\"CREATE TABLE TestTable (Key INT64, Value STRING(MAX)) PRIMARY KEY (Key)\")).get();\n+\t\tSystem.out.println(\">>>\" + database.getState());\n+\t}\n+\n+\tprivate InstanceId createInstance(Spanner spanner) throws InterruptedException, ExecutionException {\n+\t\tInstanceConfigId instanceConfig = InstanceConfigId.of(PROJECT_NAME, \"emulator-config\");\n+\t\tInstanceId instanceId = InstanceId.of(PROJECT_NAME, INSTANCE_NAME);\n+\t\tInstanceAdminClient insAdminClient = spanner.getInstanceAdminClient();\n+\t\tInstance instance = insAdminClient.createInstance(InstanceInfo.newBuilder(instanceId).setInstanceConfigId(instanceConfig).build()).get();\n+\t\tSystem.out.println(\">>>\" + instance.getState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyNDcxMg==", "bodyText": "(There are a few other instances of println in other tests as well)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425224712", "createdAt": "2020-05-14T15:25:52Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/SpannerEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.testcontainers.containers;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Instance;\n+import com.google.cloud.spanner.InstanceAdminClient;\n+import com.google.cloud.spanner.InstanceConfigId;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.InstanceInfo;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Statement;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SpannerEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic SpannerEmulatorContainer emulator = new SpannerEmulatorContainer();\n+\n+\tprivate static final String PROJECT_NAME = \"test-project\";\n+\tprivate static final String INSTANCE_NAME = \"test-instance\";\n+\tprivate static final String DATABASE_NAME = \"test-database\";\n+\n+\t@Test\n+\tpublic void testSimple() throws ExecutionException, InterruptedException {\n+\t\tSpannerOptions options = SpannerOptions.newBuilder()\n+\t\t\t\t.setEmulatorHost(emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(9010))\n+\t\t\t\t.setCredentials(NoCredentials.getInstance())\n+\t\t\t\t.build();\n+\n+\t\tSpanner spanner = options.getService();\n+\n+\t\tInstanceId instanceId = createInstance(spanner);\n+\n+\t\tcreateDatabase(spanner);\n+\n+\t\tDatabaseId databaseId = DatabaseId.of(instanceId, DATABASE_NAME);\n+\t\tDatabaseClient dbClient = spanner.getDatabaseClient(databaseId);\n+\t\tdbClient.readWriteTransaction()\n+\t\t\t\t.run(tx -> {\n+\t\t\t\t\tString sql1 = \"Delete from TestTable where 1=1\";\n+\t\t\t\t\ttx.executeUpdate(Statement.of(sql1));\n+\t\t\t\t\tString sql = \"INSERT INTO TestTable (Key, Value) VALUES (1, 'Java'), (2, 'Go')\";\n+\t\t\t\t\ttx.executeUpdate(Statement.of(sql));\n+\t\t\t\t\treturn null;\n+\t\t\t\t});\n+\n+\t\tResultSet resultSet = dbClient.readOnlyTransaction()\n+\t\t\t\t.executeQuery(Statement.of(\"select * from TestTable order by Key\"));\n+\t\tresultSet.next();\n+\t\tassertThat(resultSet.getLong(0)).isEqualTo(1);\n+\t\tassertThat(resultSet.getString(1)).isEqualTo(\"Java\");\n+\t}\n+\n+\tprivate void createDatabase(Spanner spanner) throws InterruptedException, ExecutionException {\n+\t\tDatabaseAdminClient dbAdminClient = spanner.getDatabaseAdminClient();\n+\t\tDatabase database = dbAdminClient.createDatabase(INSTANCE_NAME, DATABASE_NAME, Arrays.asList(\"CREATE TABLE TestTable (Key INT64, Value STRING(MAX)) PRIMARY KEY (Key)\")).get();\n+\t\tSystem.out.println(\">>>\" + database.getState());\n+\t}\n+\n+\tprivate InstanceId createInstance(Spanner spanner) throws InterruptedException, ExecutionException {\n+\t\tInstanceConfigId instanceConfig = InstanceConfigId.of(PROJECT_NAME, \"emulator-config\");\n+\t\tInstanceId instanceId = InstanceId.of(PROJECT_NAME, INSTANCE_NAME);\n+\t\tInstanceAdminClient insAdminClient = spanner.getInstanceAdminClient();\n+\t\tInstance instance = insAdminClient.createInstance(InstanceInfo.newBuilder(instanceId).setInstanceConfigId(instanceConfig).build()).get();\n+\t\tSystem.out.println(\">>>\" + instance.getState());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwODY4NQ=="}, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzg3MTMzOnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowNToxN1rOGVgttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowNToxN1rOGVgttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwOTI2OA==", "bodyText": "Is this assertion useful by this point in time?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425209268", "createdAt": "2020-05-14T15:05:17Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+\t@Test\n+\tpublic void testSimple() throws IOException {\n+\t\tString hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n+\t\tManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n+\t\ttry {\n+\t\t\tTransportChannelProvider channelProvider =\n+\t\t\t\t\tFixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n+\t\t\tCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n+\n+\t\t\tTopicAdminClient topicClient =\n+\t\t\t\t\tTopicAdminClient.create(\n+\t\t\t\t\t\t\tTopicAdminSettings.newBuilder()\n+\t\t\t\t\t\t\t\t\t.setTransportChannelProvider(channelProvider)\n+\t\t\t\t\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n+\t\t\t\t\t\t\t\t\t.build());\n+\t\t\tTopic topic = Topic.newBuilder().setName(\"projects/my-project-id/topics/my-topic-id\").build();\n+\t\t\ttopicClient.createTopic(topic);\n+\n+\t\t\tPublisher publisher = Publisher.newBuilder(topic.getName()).build();\n+\t\t\tPubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n+\t\t\tApiFuture<String> future = publisher.publish(message);\n+\t\t\tApiFutures.addCallback(future, new ApiFutureCallback<String>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onFailure(Throwable t) {\n+\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onSuccess(String result) {\n+\t\t\t\t\tassertThat(result).isNotNull();\n+\t\t\t\t}\n+\t\t\t}, MoreExecutors.directExecutor());\n+\t\t} finally {\n+\t\t\tchannel.shutdown();\n+\t\t}\n+\n+\n+\t\tassertThat(emulator.getMappedPort(8085)).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzk1OTYwOnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToyNDoxN1rOGVhlBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTozMjoyMFrOGVh9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyMzQzMA==", "bodyText": "Don't we need to call get() on future to ensure that the callback and assertion are fired on this thread?\nAlso, should we have an Assert.fail() inside onFailure?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425223430", "createdAt": "2020-05-14T15:24:17Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+\t@Test\n+\tpublic void testSimple() throws IOException {\n+\t\tString hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n+\t\tManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n+\t\ttry {\n+\t\t\tTransportChannelProvider channelProvider =\n+\t\t\t\t\tFixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n+\t\t\tCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n+\n+\t\t\tTopicAdminClient topicClient =\n+\t\t\t\t\tTopicAdminClient.create(\n+\t\t\t\t\t\t\tTopicAdminSettings.newBuilder()\n+\t\t\t\t\t\t\t\t\t.setTransportChannelProvider(channelProvider)\n+\t\t\t\t\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n+\t\t\t\t\t\t\t\t\t.build());\n+\t\t\tTopic topic = Topic.newBuilder().setName(\"projects/my-project-id/topics/my-topic-id\").build();\n+\t\t\ttopicClient.createTopic(topic);\n+\n+\t\t\tPublisher publisher = Publisher.newBuilder(topic.getName()).build();\n+\t\t\tPubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n+\t\t\tApiFuture<String> future = publisher.publish(message);\n+\t\t\tApiFutures.addCallback(future, new ApiFutureCallback<String>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onFailure(Throwable t) {\n+\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onSuccess(String result) {\n+\t\t\t\t\tassertThat(result).isNotNull();\n+\t\t\t\t}\n+\t\t\t}, MoreExecutors.directExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyOTY4Mg==", "bodyText": "Ah, I was too excited to look at the code and missed:\n\nIt is pending to polish the pubsub test \ud83d\ude48\n\n\ud83d\ude04", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425229682", "createdAt": "2020-05-14T15:32:20Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+\t@Rule\n+\tpublic PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+\t@Test\n+\tpublic void testSimple() throws IOException {\n+\t\tString hostport = emulator.getContainerIpAddress() + \":\" + emulator.getMappedPort(8085);\n+\t\tManagedChannel channel = ManagedChannelBuilder.forTarget(hostport).usePlaintext().build();\n+\t\ttry {\n+\t\t\tTransportChannelProvider channelProvider =\n+\t\t\t\t\tFixedTransportChannelProvider.create(GrpcTransportChannel.create(channel));\n+\t\t\tCredentialsProvider credentialsProvider = NoCredentialsProvider.create();\n+\n+\t\t\tTopicAdminClient topicClient =\n+\t\t\t\t\tTopicAdminClient.create(\n+\t\t\t\t\t\t\tTopicAdminSettings.newBuilder()\n+\t\t\t\t\t\t\t\t\t.setTransportChannelProvider(channelProvider)\n+\t\t\t\t\t\t\t\t\t.setCredentialsProvider(credentialsProvider)\n+\t\t\t\t\t\t\t\t\t.build());\n+\t\t\tTopic topic = Topic.newBuilder().setName(\"projects/my-project-id/topics/my-topic-id\").build();\n+\t\t\ttopicClient.createTopic(topic);\n+\n+\t\t\tPublisher publisher = Publisher.newBuilder(topic.getName()).build();\n+\t\t\tPubsubMessage message = PubsubMessage.newBuilder().setData(ByteString.copyFromUtf8(\"test message\")).build();\n+\t\t\tApiFuture<String> future = publisher.publish(message);\n+\t\t\tApiFutures.addCallback(future, new ApiFutureCallback<String>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onFailure(Throwable t) {\n+\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onSuccess(String result) {\n+\t\t\t\t\tassertThat(result).isNotNull();\n+\t\t\t\t}\n+\t\t\t}, MoreExecutors.directExecutor());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyMzQzMA=="}, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Nzk3NTg5OnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToyNzo0MlrOGVhvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToyNzo0MlrOGVhvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIyNjA3NQ==", "bodyText": "Sorry for the mundane comment, but please could you reformat using 4 spaces for indentation? If you have an editorconfig-aware IDE this convention should get picked up automatically.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r425226075", "createdAt": "2020-05-14T15:27:42Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/DatastoreEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.testcontainers.containers;\n+\n+import java.util.Arrays;\n+\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+/**\n+ * A Datastore container that relies in google cloud sdk. The container provides\n+ * additional instructions to install the components needed in the alpine images.\n+ *\n+ * Default port is 8081.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class DatastoreEmulatorContainer extends GCloudGenericContainer<DatastoreEmulatorContainer> {\n+\n+\tprivate static final String[] CMDS = {\"apk --update add openjdk8-jre\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74295396171501ae57d495609e1f5fd90ca8e4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA1NDg0OnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyMjozMVrOHFXjnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo1OTo0MlrOHJs2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDg3Ng==", "bodyText": "It would be nice to have a(nother) test that:\n\nPublishes a message with some trivial contents\nPulls that message from a subscription to that topic\nVerifies that the trivial contents was received", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r475390876", "createdAt": "2020-08-24T07:22:31Z", "author": {"login": "walles"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+    @Rule\n+    public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+    @Test\n+    public void testSimple() throws IOException, ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198a88f0d5526d32a601aecb393aa71b1c62d369"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkwNzU4Nw==", "bodyText": "@walles thanks for the suggestions. I have added one more commit introducing that change. \ud83d\udc4d\ud83c\udffd", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r479907587", "createdAt": "2020-08-31T05:53:52Z", "author": {"login": "eddumelendez"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+    @Rule\n+    public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+    @Test\n+    public void testSimple() throws IOException, ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDg3Ng=="}, "originalCommit": {"oid": "198a88f0d5526d32a601aecb393aa71b1c62d369"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzk4OQ==", "bodyText": "Beautiful! \ud83e\udd47", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r479933989", "createdAt": "2020-08-31T06:59:42Z", "author": {"login": "walles"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+\n+import com.google.api.core.ApiFuture;\n+import com.google.api.core.ApiFutureCallback;\n+import com.google.api.core.ApiFutures;\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.Topic;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {\n+\n+    @Rule\n+    public PubSubEmulatorContainer emulator = new PubSubEmulatorContainer();\n+\n+    @Test\n+    public void testSimple() throws IOException, ExecutionException, InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5MDg3Ng=="}, "originalCommit": {"oid": "198a88f0d5526d32a601aecb393aa71b1c62d369"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjAwNjQzOnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozNjo0NVrOHdolsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozNjo0NVrOHdolsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzNTc2Mg==", "bodyText": "Do we really need this class? Looks redundant to me :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r500835762", "createdAt": "2020-10-07T08:36:45Z", "author": {"login": "bsideup"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/GCloudGenericContainer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.testcontainers.containers;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class GCloudGenericContainer<SELF extends GCloudGenericContainer<SELF>> extends GenericContainer<SELF> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a39f0d1dbcf2fbbbbe4fc18b23b5c811a59bf4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQwNzQxOnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjozOTozM1rOHfk9Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjozOTozM1rOHfk9Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzQxOQ==", "bodyText": "When rendered, this has to be scrolled quite a bit. Let's perhaps wrap it?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));\n          \n          \n            \n                public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(\n          \n          \n            \n                    DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\")\n          \n          \n            \n                );", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r502873419", "createdAt": "2020-10-11T06:39:33Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/DatastoreEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.testcontainers.containers;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.ServiceOptions;\n+import com.google.cloud.datastore.Datastore;\n+import com.google.cloud.datastore.DatastoreOptions;\n+import com.google.cloud.datastore.Entity;\n+import com.google.cloud.datastore.Key;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.utility.DockerImageName;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DatastoreEmulatorContainerTest {\n+\n+    @Rule\n+    // creatingDatastoreEmulatorContainer {\n+    public DatastoreEmulatorContainer emulator = new DatastoreEmulatorContainer(DockerImageName.parse(\"gcr.io/google.com/cloudsdktool/cloud-sdk:313.0.0\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56839982da1197513585dca224dc0beb92bd844e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQwODA0OnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjo0MDoyOFrOHfk9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjo0MDoyOFrOHfk9nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3MzUwMQ==", "bodyText": "Please could you reformat this file with spaces, not tabs? \ud83e\udd13", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r502873501", "createdAt": "2020-10-11T06:40:28Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/test/java/org/testcontainers/containers/PubSubEmulatorContainerTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.testcontainers.containers;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.NoCredentialsProvider;\n+import com.google.api.gax.grpc.GrpcTransportChannel;\n+import com.google.api.gax.rpc.FixedTransportChannelProvider;\n+import com.google.api.gax.rpc.TransportChannelProvider;\n+import com.google.cloud.pubsub.v1.Publisher;\n+import com.google.cloud.pubsub.v1.SubscriptionAdminClient;\n+import com.google.cloud.pubsub.v1.SubscriptionAdminSettings;\n+import com.google.cloud.pubsub.v1.TopicAdminClient;\n+import com.google.cloud.pubsub.v1.TopicAdminSettings;\n+import com.google.cloud.pubsub.v1.stub.GrpcSubscriberStub;\n+import com.google.cloud.pubsub.v1.stub.SubscriberStub;\n+import com.google.cloud.pubsub.v1.stub.SubscriberStubSettings;\n+import com.google.protobuf.ByteString;\n+import com.google.pubsub.v1.ProjectSubscriptionName;\n+import com.google.pubsub.v1.PubsubMessage;\n+import com.google.pubsub.v1.PullRequest;\n+import com.google.pubsub.v1.PullResponse;\n+import com.google.pubsub.v1.PushConfig;\n+import com.google.pubsub.v1.TopicName;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.utility.DockerImageName;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class PubSubEmulatorContainerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56839982da1197513585dca224dc0beb92bd844e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQxMDE5OnYy", "diffSide": "RIGHT", "path": "modules/gcloud/src/main/java/org/testcontainers/containers/SpannerEmulatorContainer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNjo0MzoyNVrOHfk-qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo1MToxOVrOHgqxiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ==", "bodyText": "I wonder, maybe these should be public constants so that they can be used by tests? If we did that, we could do so for the other container classes in this PR.\nWDYT @bsideup, @kiview?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r502873769", "createdAt": "2020-10-11T06:43:25Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/SpannerEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.testcontainers.containers;\n+\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n+\n+/**\n+ * A Spanner container. Default ports: 9010 for GRPC and 9020 for HTTP.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class SpannerEmulatorContainer extends GenericContainer<SpannerEmulatorContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"gcr.io/cloud-spanner-emulator/emulator\");\n+\n+    private static final int GRPC_PORT = 9010;\n+    private static final int HTTP_PORT = 9020;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56839982da1197513585dca224dc0beb92bd844e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3ODA5NQ==", "bodyText": "WDYT about not exposing the constants, but getGrpcPort/getHttpPort methods?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r503278095", "createdAt": "2020-10-12T12:58:05Z", "author": {"login": "bsideup"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/SpannerEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.testcontainers.containers;\n+\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n+\n+/**\n+ * A Spanner container. Default ports: 9010 for GRPC and 9020 for HTTP.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class SpannerEmulatorContainer extends GenericContainer<SpannerEmulatorContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"gcr.io/cloud-spanner-emulator/emulator\");\n+\n+    private static final int GRPC_PORT = 9010;\n+    private static final int HTTP_PORT = 9020;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ=="}, "originalCommit": {"oid": "56839982da1197513585dca224dc0beb92bd844e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NzAyOQ==", "bodyText": "looking at some of the other modules, private static final seems like the norm/convention atm. would it make sense to follow up w/ an issue for the broader change to expose these across modules?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r503477029", "createdAt": "2020-10-12T18:55:34Z", "author": {"login": "saturnism"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/SpannerEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.testcontainers.containers;\n+\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n+\n+/**\n+ * A Spanner container. Default ports: 9010 for GRPC and 9020 for HTTP.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class SpannerEmulatorContainer extends GenericContainer<SpannerEmulatorContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"gcr.io/cloud-spanner-emulator/emulator\");\n+\n+    private static final int GRPC_PORT = 9010;\n+    private static final int HTTP_PORT = 9020;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ=="}, "originalCommit": {"oid": "56839982da1197513585dca224dc0beb92bd844e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNzI5MQ==", "bodyText": "I've been persuaded by @bsideup - many of our other modules have some mechanism for getting the mapped ports, address or URL for the running container. It seems like we should do this here, instead of exposing constants, as it's fundamentally more useful for the user.\nI'll take the action to do this, as we've asked @eddumelendez to do too much already. I'll raise a quick PR tonight, and will merge this PR now.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2690#discussion_r504017291", "createdAt": "2020-10-13T14:51:19Z", "author": {"login": "rnorth"}, "path": "modules/gcloud/src/main/java/org/testcontainers/containers/SpannerEmulatorContainer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.testcontainers.containers;\n+\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n+\n+/**\n+ * A Spanner container. Default ports: 9010 for GRPC and 9020 for HTTP.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+public class SpannerEmulatorContainer extends GenericContainer<SpannerEmulatorContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"gcr.io/cloud-spanner-emulator/emulator\");\n+\n+    private static final int GRPC_PORT = 9010;\n+    private static final int HTTP_PORT = 9020;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3Mzc2OQ=="}, "originalCommit": {"oid": "56839982da1197513585dca224dc0beb92bd844e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1522, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}