{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDQzNzU0", "number": 3102, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzoyMDowNFrOEYzbTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo1ODozNlrOE1n9vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDQzODUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzoyMDowNFrOHBSaQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMzoyMDowNFrOHBSaQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTExMjI1Ng==", "bodyText": "Risk: if so-called tiny image (alpine:3.5) is overridden in config, all usages of that image will be replaced. Substitution is now along image-identity lines rather than semantic lines.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r471112256", "createdAt": "2020-08-16T13:20:04Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -238,4 +157,19 @@ private static Properties readProperties(URL url) {\n         }\n         return properties;\n     }\n+\n+    DockerImageName getConfiguredSubstituteImage(DockerImageName original) {\n+        for (final Map.Entry<DockerImageName, String> entry : CONTAINER_MAPPING.entrySet()) {\n+            if (original.isCompatibleWith(entry.getKey())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b01ec3e339c8b9058cf1a2cb119cb42e6e049135"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjU2Nzg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTowNTozMFrOHduCng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOToyMDowNVrOHiWjTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng==", "bodyText": "not really related to this PR, but perhaps now is a good time to pin socat? :D\nOr re-publish it under testcontainers  as an automated build with FROM alpine/socat:latest to pin it?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r500925086", "createdAt": "2020-10-07T11:05:30Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NDMxMA==", "bodyText": "Good point!", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r502874310", "createdAt": "2020-10-11T06:49:19Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, "originalCommit": {"oid": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NDU0Nw==", "bodyText": "Done in 7b8cedf", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504464547", "createdAt": "2020-10-14T07:37:52Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, "originalCommit": {"oid": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NDgwNg==", "bodyText": "Nice! Although SocatContainer still refers :latest \ud83d\ude05", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504484806", "createdAt": "2020-10-14T08:11:39Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, "originalCommit": {"oid": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMjkzOQ==", "bodyText": "\ud83e\udd26", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504812939", "createdAt": "2020-10-14T16:27:07Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, "originalCommit": {"oid": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MzExNw==", "bodyText": "Should be fixed now.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r505783117", "createdAt": "2020-10-15T19:20:05Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -17,7 +17,7 @@\n     private final Map<Integer, String> targets = new HashMap<>();\n \n     public SocatContainer() {\n-        this(TestcontainersConfiguration.getInstance().getSocatDockerImageName());\n+        this(DockerImageName.parse(\"alpine/socat:latest\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNTA4Ng=="}, "originalCommit": {"oid": "e3cb2a9199b1f7cb0607020279b8093257cf8e9f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQyMjg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzowMDoyNlrOHflEvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDozNDoxOVrOHlP_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw==", "bodyText": "This is currently only used by the PrefixingImageNameSubstitutor, but I'm very tempted to use it for most of the other properties that are configurable.\nI think most of the properties would benefit from having an equivalent environment variable.\nI know we discussed having the reuse.enabled as a config file property instead of an env var some time back, so perhaps we'd leave that as is?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r502875327", "createdAt": "2020-10-11T07:00:26Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -185,6 +167,23 @@ public Integer getImagePullPauseTimeout() {\n         return Integer.parseInt((String) properties.getOrDefault(\"pull.pause.timeout\", \"30\"));\n     }\n \n+    /**\n+     * Gets a configured setting from an environment variable (if present) or a configuration file property otherwise.\n+     * @param propertyName name of configuration file property (dot-separated lower case)\n+     * @return the found value, or null if not set\n+     */\n+    @Nullable\n+    public String getEnvVarOrProperty(final String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4NDAzNQ==", "bodyText": "yes, let's keep reuse.enabled as an environment property \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r504484035", "createdAt": "2020-10-14T08:10:19Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -185,6 +167,23 @@ public Integer getImagePullPauseTimeout() {\n         return Integer.parseInt((String) properties.getOrDefault(\"pull.pause.timeout\", \"30\"));\n     }\n \n+    /**\n+     * Gets a configured setting from an environment variable (if present) or a configuration file property otherwise.\n+     * @param propertyName name of configuration file property (dot-separated lower case)\n+     * @return the found value, or null if not set\n+     */\n+    @Nullable\n+    public String getEnvVarOrProperty(final String propertyName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw=="}, "originalCommit": {"oid": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4Mjk3MA==", "bodyText": "Would you be happy with every other property also being settable with an env var?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r505782970", "createdAt": "2020-10-15T19:19:50Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -185,6 +167,23 @@ public Integer getImagePullPauseTimeout() {\n         return Integer.parseInt((String) properties.getOrDefault(\"pull.pause.timeout\", \"30\"));\n     }\n \n+    /**\n+     * Gets a configured setting from an environment variable (if present) or a configuration file property otherwise.\n+     * @param propertyName name of configuration file property (dot-separated lower case)\n+     * @return the found value, or null if not set\n+     */\n+    @Nullable\n+    public String getEnvVarOrProperty(final String propertyName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw=="}, "originalCommit": {"oid": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgyMTQ4Ng==", "bodyText": "I've done this as proposed.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r508821486", "createdAt": "2020-10-20T20:34:19Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -185,6 +167,23 @@ public Integer getImagePullPauseTimeout() {\n         return Integer.parseInt((String) properties.getOrDefault(\"pull.pause.timeout\", \"30\"));\n     }\n \n+    /**\n+     * Gets a configured setting from an environment variable (if present) or a configuration file property otherwise.\n+     * @param propertyName name of configuration file property (dot-separated lower case)\n+     * @return the found value, or null if not set\n+     */\n+    @Nullable\n+    public String getEnvVarOrProperty(final String propertyName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTMyNw=="}, "originalCommit": {"oid": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQyNDcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwNzowMjo0NVrOHflFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0Mzo1MFrOHqcb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTU2MA==", "bodyText": "I've made this as a default out-of-the-box substitutor that delegates to both the config file settings and a simple 'prefix' substitutor which can apply a common prefix to all image names.\nI suspect this might be enough for 80% of situations where people need a substitutor, which is why I think it's worth including it by default.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r502875560", "createdAt": "2020-10-11T07:02:45Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * TODO: Javadocs\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2ODE1NQ==", "bodyText": "FTR for others looking at this PR:\nthis comment is outdated, see #3413 for the prefixing substitutor", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514268155", "createdAt": "2020-10-29T13:43:50Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * TODO: Javadocs\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg3NTU2MA=="}, "originalCommit": {"oid": "7b8cedfd2a9f41edf8d341225c71d63ccacec26a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjA0ODMwOnYy", "diffSide": "RIGHT", "path": "modules/prefixing-imagename-substitutor/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozNToyNFrOHlDnMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowMTowNFrOHlO2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxODU0Nw==", "bodyText": "empty module?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r508618547", "createdAt": "2020-10-20T15:35:24Z", "author": {"login": "bsideup"}, "path": "modules/prefixing-imagename-substitutor/build.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+description = \"Testcontainers :: Image Name Substitutors :: Prefxing\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789601ab54c912ca7464e1bda277eeb5f846edfb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMjYyMw==", "bodyText": "Ergh, accidental commit. Will remove.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r508802623", "createdAt": "2020-10-20T20:01:04Z", "author": {"login": "rnorth"}, "path": "modules/prefixing-imagename-substitutor/build.gradle", "diffHunk": "@@ -0,0 +1,5 @@\n+description = \"Testcontainers :: Image Name Substitutors :: Prefxing\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxODU0Nw=="}, "originalCommit": {"oid": "789601ab54c912ca7464e1bda277eeb5f846edfb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzIwMTI2OnYy", "diffSide": "RIGHT", "path": "docs/features/pull_rate_limiting.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMDowMjoyNlrOHlO5OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozNDo0MlrOHqcCnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzM4NQ==", "bodyText": "This page is still WIP", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r508803385", "createdAt": "2020-10-20T20:02:26Z", "author": {"login": "rnorth"}, "path": "docs/features/pull_rate_limiting.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Image Registry rate limiting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5899bedbdfe0b9b1d6e6119af91c3a77f0c9142f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MTY2MA==", "bodyText": "Reduced in content to this current form, which I think is just enough for this PR.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514261660", "createdAt": "2020-10-29T13:34:42Z", "author": {"login": "rnorth"}, "path": "docs/features/pull_rate_limiting.md", "diffHunk": "@@ -0,0 +1,37 @@\n+# Image Registry rate limiting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMzM4NQ=="}, "originalCommit": {"oid": "5899bedbdfe0b9b1d6e6119af91c3a77f0c9142f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk2MDIzOnYy", "diffSide": "RIGHT", "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNzowNFrOHqPcuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTowMDo1NlrOHqSK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTM1NQ==", "bodyText": "shouldn't it be DEFAULT_IMAGE, similar to KafkaContainer and others?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514055355", "createdAt": "2020-10-29T07:37:04Z", "author": {"login": "bsideup"}, "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -22,8 +22,7 @@\n     private String password = \"oracle\";\n \n     private static String resolveImageName() {\n-        String image = TestcontainersConfiguration.getInstance()\n-            .getProperties().getProperty(\"oracle.container.image\");\n+        String image = TestcontainersConfiguration.getInstance().getOracleImage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MDc3MA==", "bodyText": "Oracle is weird, because we (currently) have no default image to point to. I think perhaps we should resolve that, and do so in a separate change.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514090770", "createdAt": "2020-10-29T08:45:55Z", "author": {"login": "rnorth"}, "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -22,8 +22,7 @@\n     private String password = \"oracle\";\n \n     private static String resolveImageName() {\n-        String image = TestcontainersConfiguration.getInstance()\n-            .getProperties().getProperty(\"oracle.container.image\");\n+        String image = TestcontainersConfiguration.getInstance().getOracleImage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTM1NQ=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTkzOA==", "bodyText": "oh, right! I completely forgot about it \ud83d\ude05", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514099938", "createdAt": "2020-10-29T09:00:56Z", "author": {"login": "bsideup"}, "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -22,8 +22,7 @@\n     private String password = \"oracle\";\n \n     private static String resolveImageName() {\n-        String image = TestcontainersConfiguration.getInstance()\n-            .getProperties().getProperty(\"oracle.container.image\");\n+        String image = TestcontainersConfiguration.getInstance().getOracleImage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTM1NQ=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk3MDIzOnYy", "diffSide": "RIGHT", "path": "docs/features/configuration.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozOTo1MFrOHqPiCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDoxMzoxN1rOHrpvag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NjcxNQ==", "bodyText": "Let's add something like \"and deprecated in favour of [link to the image substitution feature]\"", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514056715", "createdAt": "2020-10-29T07:39:50Z", "author": {"login": "bsideup"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -26,30 +31,39 @@ It takes a couple of seconds, but if you want to speed up your tests, you can di\n \n ## Customizing images\n \n+!!! note\n+    This approach is discouraged and deprecated, but is documented for completeness.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEyMjYyMQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515122621", "createdAt": "2020-10-30T14:05:20Z", "author": {"login": "rnorth"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -26,30 +31,39 @@ It takes a couple of seconds, but if you want to speed up your tests, you can di\n \n ## Customizing images\n \n+!!! note\n+    This approach is discouraged and deprecated, but is documented for completeness.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NjcxNQ=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDY5OA==", "bodyText": "the link is still missing I think", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534698", "createdAt": "2020-10-31T20:13:17Z", "author": {"login": "bsideup"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -26,30 +31,39 @@ It takes a couple of seconds, but if you want to speed up your tests, you can di\n \n ## Customizing images\n \n+!!! note\n+    This approach is discouraged and deprecated, but is documented for completeness.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NjcxNQ=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk3MzQ2OnYy", "diffSide": "RIGHT", "path": "docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo0MDo1MlrOHqPj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzozNDowN1rOHqcBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzE3Mg==", "bodyText": "just a random thought:\ncan't we make this test pass by substituting registry.mycompany.com/mirror/mysql with mysql (aka reverse substitution)?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514057172", "createdAt": "2020-10-29T07:40:52Z", "author": {"login": "bsideup"}, "path": "docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package generic;\n+\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class ImageNameSubstitutionTest {\n+\n+    @Test\n+    public void simpleExample() {\n+        try (\n+            // directDockerHubReference {\n+            // Referring directly to an image on Docker Hub (mysql:8.0.22)\n+            final MySQLContainer<?> mysql = new MySQLContainer<>(\n+                DockerImageName.parse(\"mysql:8.0.22\")\n+            )\n+\n+            // start the container and use it for testing\n+            // }\n+        ) {\n+            mysql.start();\n+        }\n+    }\n+\n+    @Test @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MDkxNA==", "bodyText": "Very good idea - will do.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514090914", "createdAt": "2020-10-29T08:46:08Z", "author": {"login": "rnorth"}, "path": "docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package generic;\n+\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class ImageNameSubstitutionTest {\n+\n+    @Test\n+    public void simpleExample() {\n+        try (\n+            // directDockerHubReference {\n+            // Referring directly to an image on Docker Hub (mysql:8.0.22)\n+            final MySQLContainer<?> mysql = new MySQLContainer<>(\n+                DockerImageName.parse(\"mysql:8.0.22\")\n+            )\n+\n+            // start the container and use it for testing\n+            // }\n+        ) {\n+            mysql.start();\n+        }\n+    }\n+\n+    @Test @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzE3Mg=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2MTI0OQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514261249", "createdAt": "2020-10-29T13:34:07Z", "author": {"login": "rnorth"}, "path": "docs/examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package generic;\n+\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.utility.DockerImageName;\n+\n+public class ImageNameSubstitutionTest {\n+\n+    @Test\n+    public void simpleExample() {\n+        try (\n+            // directDockerHubReference {\n+            // Referring directly to an image on Docker Hub (mysql:8.0.22)\n+            final MySQLContainer<?> mysql = new MySQLContainer<>(\n+                DockerImageName.parse(\"mysql:8.0.22\")\n+            )\n+\n+            // start the container and use it for testing\n+            // }\n+        ) {\n+            mysql.start();\n+        }\n+    }\n+\n+    @Test @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NzE3Mg=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk4OTgwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo0NjozNlrOHqPtqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxODo1M1rOHrTw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1OTY4OA==", "bodyText": "WDYT about either adding an extra assert after the property is removed (to ensure that it is not cached, for example) or splitting the test into 2 (user properties, environment)?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514059688", "createdAt": "2020-10-29T07:46:36Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java", "diffHunk": "@@ -1,57 +1,112 @@\n package org.testcontainers.utility;\n \n-import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n-import org.junit.Test;\n+\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n public class TestcontainersConfigurationTest {\n \n-    final Properties environmentProperties = new Properties();\n+    private Properties userProperties;\n+    private Properties classpathProperties;\n+    private Map<String, String> environment;\n \n-    final Properties classpathProperties = new Properties();\n+    @Before\n+    public void setUp() {\n+        userProperties = new Properties();\n+        classpathProperties = new Properties();\n+        environment = new HashMap<>();\n+    }\n \n     @Test\n-    public void shouldReadChecksFromEnvironmentOnly() {\n+    public void shouldSubstituteImageNamesFromClasspathProperties() {\n+        classpathProperties.setProperty(\"ryuk.container.image\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from classpath properties\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldSubstituteImageNamesFromUserProperties() {\n+        userProperties.setProperty(\"ryuk.container.image\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from user properties\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldSubstituteImageNamesFromEnvironmentVariables() {\n+        environment.put(\"TESTCONTAINERS_RYUK_CONTAINER_IMAGE\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from an environment variable\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReadChecksFromUserPropertiesOrEnvironmentOnly() {\n         assertFalse(\"checks enabled by default\", newConfig().isDisableChecks());\n \n         classpathProperties.setProperty(\"checks.disable\", \"true\");\n         assertFalse(\"checks are not affected by classpath properties\", newConfig().isDisableChecks());\n \n-        environmentProperties.setProperty(\"checks.disable\", \"true\");\n-        assertTrue(\"checks disabled\", newConfig().isDisableChecks());\n+        userProperties.setProperty(\"checks.disable\", \"true\");\n+        assertTrue(\"checks disabled via user properties\", newConfig().isDisableChecks());\n+\n+        userProperties.remove(\"checks.disable\");\n+        environment.put(\"TESTCONTAINERS_CHECKS_DISABLE\", \"true\");\n+        assertTrue(\"checks disabled via env var\", newConfig().isDisableChecks());\n     }\n \n     @Test\n-    public void shouldReadDockerClientStrategyFromEnvironmentOnly() {\n+    public void shouldReadDockerClientStrategyFromUserPropertiesOrEnvironmentOnly() {\n         String currentValue = newConfig().getDockerClientStrategyClassName();\n \n         classpathProperties.setProperty(\"docker.client.strategy\", UUID.randomUUID().toString());\n         assertEquals(\"Docker client strategy is not affected by classpath properties\", currentValue, newConfig().getDockerClientStrategyClassName());\n \n-        environmentProperties.setProperty(\"docker.client.strategy\", \"foo\");\n-        assertEquals(\"Docker client strategy is changed\", \"foo\", newConfig().getDockerClientStrategyClassName());\n+        userProperties.setProperty(\"docker.client.strategy\", \"foo\");\n+        assertEquals(\"Docker client strategy is changed by user property\", \"foo\", newConfig().getDockerClientStrategyClassName());\n+\n+        userProperties.remove(\"docker.client.strategy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDY0NQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174645", "createdAt": "2020-10-30T15:18:53Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/TestcontainersConfigurationTest.java", "diffHunk": "@@ -1,57 +1,112 @@\n package org.testcontainers.utility;\n \n-import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+import org.junit.Before;\n+import org.junit.Test;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Properties;\n import java.util.UUID;\n-import org.junit.Test;\n+\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n public class TestcontainersConfigurationTest {\n \n-    final Properties environmentProperties = new Properties();\n+    private Properties userProperties;\n+    private Properties classpathProperties;\n+    private Map<String, String> environment;\n \n-    final Properties classpathProperties = new Properties();\n+    @Before\n+    public void setUp() {\n+        userProperties = new Properties();\n+        classpathProperties = new Properties();\n+        environment = new HashMap<>();\n+    }\n \n     @Test\n-    public void shouldReadChecksFromEnvironmentOnly() {\n+    public void shouldSubstituteImageNamesFromClasspathProperties() {\n+        classpathProperties.setProperty(\"ryuk.container.image\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from classpath properties\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldSubstituteImageNamesFromUserProperties() {\n+        userProperties.setProperty(\"ryuk.container.image\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from user properties\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldSubstituteImageNamesFromEnvironmentVariables() {\n+        environment.put(\"TESTCONTAINERS_RYUK_CONTAINER_IMAGE\", \"foo:version\");\n+        assertEquals(\n+            \"an image name can be pulled from an environment variable\",\n+            DockerImageName.parse(\"foo:version\"),\n+            newConfig().getConfiguredSubstituteImage(DockerImageName.parse(\"testcontainers/ryuk:any\"))\n+        );\n+    }\n+\n+    @Test\n+    public void shouldReadChecksFromUserPropertiesOrEnvironmentOnly() {\n         assertFalse(\"checks enabled by default\", newConfig().isDisableChecks());\n \n         classpathProperties.setProperty(\"checks.disable\", \"true\");\n         assertFalse(\"checks are not affected by classpath properties\", newConfig().isDisableChecks());\n \n-        environmentProperties.setProperty(\"checks.disable\", \"true\");\n-        assertTrue(\"checks disabled\", newConfig().isDisableChecks());\n+        userProperties.setProperty(\"checks.disable\", \"true\");\n+        assertTrue(\"checks disabled via user properties\", newConfig().isDisableChecks());\n+\n+        userProperties.remove(\"checks.disable\");\n+        environment.put(\"TESTCONTAINERS_CHECKS_DISABLE\", \"true\");\n+        assertTrue(\"checks disabled via env var\", newConfig().isDisableChecks());\n     }\n \n     @Test\n-    public void shouldReadDockerClientStrategyFromEnvironmentOnly() {\n+    public void shouldReadDockerClientStrategyFromUserPropertiesOrEnvironmentOnly() {\n         String currentValue = newConfig().getDockerClientStrategyClassName();\n \n         classpathProperties.setProperty(\"docker.client.strategy\", UUID.randomUUID().toString());\n         assertEquals(\"Docker client strategy is not affected by classpath properties\", currentValue, newConfig().getDockerClientStrategyClassName());\n \n-        environmentProperties.setProperty(\"docker.client.strategy\", \"foo\");\n-        assertEquals(\"Docker client strategy is changed\", \"foo\", newConfig().getDockerClientStrategyClassName());\n+        userProperties.setProperty(\"docker.client.strategy\", \"foo\");\n+        assertEquals(\"Docker client strategy is changed by user property\", \"foo\", newConfig().getDockerClientStrategyClassName());\n+\n+        userProperties.remove(\"docker.client.strategy\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1OTY4OA=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDk5Nzc4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo0OToyMVrOHqPyhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxOTowOVrOHrTxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MDkzMg==", "bodyText": "we should also add a test for images from custom registries (e.g. mcr.microsoft.com/mssql/server), to define the behaviour", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514060932", "createdAt": "2020-10-29T07:49:21Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDgwNg==", "bodyText": "Removed from this PR", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174806", "createdAt": "2020-10-30T15:19:09Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MDkzMg=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTAwMTA1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo1MDoyMFrOHqP0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxOToxN1rOHrTyBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTQyMA==", "bodyText": "JFYI we also have MockTestcontainersConfigurationRule available :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514061420", "createdAt": "2020-10-29T07:50:20Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultImageNameSubstitutorTest {\n+\n+    public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n+    public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n+    private ConfigurationFileImageNameSubstitutor underTest;\n+    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDkxOQ==", "bodyText": "Updated to use it!", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174919", "createdAt": "2020-10-30T15:19:17Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultImageNameSubstitutorTest {\n+\n+    public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n+    public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n+    private ConfigurationFileImageNameSubstitutor underTest;\n+    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTQyMA=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTAwMzIyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo1MDo1OFrOHqP1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxOToyMlrOHrTyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTczMw==", "bodyText": "duplicate of ImageNameSubstitutorTest#simpleServiceLoadingTest?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514061733", "createdAt": "2020-10-29T07:50:58Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultImageNameSubstitutorTest {\n+\n+    public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n+    public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n+    private ConfigurationFileImageNameSubstitutor underTest;\n+    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new ConfigurationFileImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testConfigurationLookup() {\n+        when(mockConfiguration.getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE))).thenReturn(SUBSTITUTE_IMAGE);\n+\n+        final DockerImageName substitute = underTest.apply(ORIGINAL_IMAGE);\n+\n+        assertEquals(\"match is found\", SUBSTITUTE_IMAGE, substitute);\n+        assertTrue(\"compatibility is automatically set\", substitute.isCompatibleWith(ORIGINAL_IMAGE));\n+    }\n+\n+    @Test\n+    public void testServiceLoaderFindsDefaultImplementation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDk2OA==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515174968", "createdAt": "2020-10-30T15:19:22Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/DefaultImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.testcontainers.utility.ImageNameSubstitutor.LogWrappedImageNameSubstitutor;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class DefaultImageNameSubstitutorTest {\n+\n+    public static final DockerImageName ORIGINAL_IMAGE = DockerImageName.parse(\"foo\");\n+    public static final DockerImageName SUBSTITUTE_IMAGE = DockerImageName.parse(\"bar\");\n+    private ConfigurationFileImageNameSubstitutor underTest;\n+    private TestcontainersConfiguration mockConfiguration;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new ConfigurationFileImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testConfigurationLookup() {\n+        when(mockConfiguration.getConfiguredSubstituteImage(eq(ORIGINAL_IMAGE))).thenReturn(SUBSTITUTE_IMAGE);\n+\n+        final DockerImageName substitute = underTest.apply(ORIGINAL_IMAGE);\n+\n+        assertEquals(\"match is found\", SUBSTITUTE_IMAGE, substitute);\n+        assertTrue(\"compatibility is automatically set\", substitute.isCompatibleWith(ORIGINAL_IMAGE));\n+    }\n+\n+    @Test\n+    public void testServiceLoaderFindsDefaultImplementation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MTczMw=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTAxNjU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo1NTozMVrOHqP9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo1NTozMVrOHqP9ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2MzgwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n          \n          \n            \n            public final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514063802", "createdAt": "2020-10-29T07:55:31Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTAyMDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzo1NzowM1rOHqQASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxOTozOFrOHrTy8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2NDQ1Ng==", "bodyText": "Suggestion: let's add a warning that this class is public only because Java's ServiceLoader requires it to be public, similar to:\nhttps://github.com/reactor/reactor-core/blob/246251727bb5020c21abc1d34847d29afd8c7ec3/reactor-core/src/main/java/reactor/core/scheduler/ReactorBlockHoundIntegration.java#L27-L28", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514064456", "createdAt": "2020-10-29T07:57:03Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NTE1NQ==", "bodyText": "Removed from this PR", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515175155", "createdAt": "2020-10-30T15:19:38Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+public class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA2NDQ1Ng=="}, "originalCommit": {"oid": "8cdb94f952392f003d10b29f98e173781bb97d37"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjMyMDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0NDo1MVrOHqcfAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyMDo1NlrOHrT2IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2ODkyOA==", "bodyText": "do we need to delegate here? I thought that ConfigurationFileImageNameSubstitutor will be applied before (given its -2 priority) this one by the SPI mechanism in ImageNameSubstitutor", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514268928", "createdAt": "2020-10-29T13:44:51Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Testcontainers' default implementation of {@link ImageNameSubstitutor}.\n+ * Delegates to {@link ConfigurationFileImageNameSubstitutor}.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final ConfigurationFileImageNameSubstitutor configurationFileImageNameSubstitutor;\n+\n+    public DefaultImageNameSubstitutor() {\n+        configurationFileImageNameSubstitutor = new ConfigurationFileImageNameSubstitutor();\n+    }\n+\n+    @VisibleForTesting\n+    DefaultImageNameSubstitutor(\n+        final ConfigurationFileImageNameSubstitutor configurationFileImageNameSubstitutor\n+    ) {\n+        this.configurationFileImageNameSubstitutor = configurationFileImageNameSubstitutor;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return configurationFileImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192475997afd7868e3b2674066c4e4acd8c6aeb1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NTk2OQ==", "bodyText": "As we've updated to not use service loader or priorities, this no longer applies \ud83d\ude04", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515175969", "createdAt": "2020-10-30T15:20:56Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Testcontainers' default implementation of {@link ImageNameSubstitutor}.\n+ * Delegates to {@link ConfigurationFileImageNameSubstitutor}.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final ConfigurationFileImageNameSubstitutor configurationFileImageNameSubstitutor;\n+\n+    public DefaultImageNameSubstitutor() {\n+        configurationFileImageNameSubstitutor = new ConfigurationFileImageNameSubstitutor();\n+    }\n+\n+    @VisibleForTesting\n+    DefaultImageNameSubstitutor(\n+        final ConfigurationFileImageNameSubstitutor configurationFileImageNameSubstitutor\n+    ) {\n+        this.configurationFileImageNameSubstitutor = configurationFileImageNameSubstitutor;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return configurationFileImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI2ODkyOA=="}, "originalCommit": {"oid": "192475997afd7868e3b2674066c4e4acd8c6aeb1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjMzNDkwOnYy", "diffSide": "RIGHT", "path": "docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzo0ODowN1rOHqcoZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyMTowMFrOHrT2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3MTMzMg==", "bodyText": "why not just return original? Given the priority of 1, I thought that TestSpecificImageNameSubstitutor will go after the default (0) one :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r514271332", "createdAt": "2020-10-29T13:48:07Z", "author": {"login": "bsideup"}, "path": "docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package generic.support;\n+\n+import org.testcontainers.utility.DefaultImageNameSubstitutor;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.ImageNameSubstitutor;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192475997afd7868e3b2674066c4e4acd8c6aeb1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjAxMA==", "bodyText": "As we've updated to not use service loader or priorities, this no longer applies \ud83d\ude04", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515176010", "createdAt": "2020-10-30T15:21:00Z", "author": {"login": "rnorth"}, "path": "docs/examples/junit4/generic/src/test/java/generic/support/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package generic.support;\n+\n+import org.testcontainers.utility.DefaultImageNameSubstitutor;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.ImageNameSubstitutor;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3MTMzMg=="}, "originalCommit": {"oid": "192475997afd7868e3b2674066c4e4acd8c6aeb1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQwNjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowNDo0OFrOHrpsjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowNDo0OFrOHrpsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzMzk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {\n          \n          \n            \n            public final class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515533966", "createdAt": "2020-10-31T20:04:48Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * {@link ImageNameSubstitutor} which takes replacement image names from configuration.\n+ * See {@link TestcontainersConfiguration} for the subset of image names which can be substituted using this mechanism.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}\n+ * requires it to be so. Public visibility DOES NOT make it part of the public API.\n+ */\n+@Slf4j\n+public class ConfigurationFileImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQwNzQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowNTo1MVrOHrps-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowNTo1MVrOHrps-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {\n          \n          \n            \n            public final class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534073", "createdAt": "2020-10-31T20:05:51Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DefaultImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Testcontainers' default implementation of {@link ImageNameSubstitutor}.\n+ * Delegates to {@link ConfigurationFileImageNameSubstitutor}.\n+ */\n+@Slf4j\n+public class DefaultImageNameSubstitutor extends ImageNameSubstitutor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQwNzgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowNjoyMVrOHrptJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowNjoyMVrOHrptJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDExNg==", "bodyText": "outdated comment\nbtw, since we delegate to it, perhaps we can make it package private?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534116", "createdAt": "2020-10-31T20:06:21Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/ConfigurationFileImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * {@link ImageNameSubstitutor} which takes replacement image names from configuration.\n+ * See {@link TestcontainersConfiguration} for the subset of image names which can be substituted using this mechanism.\n+ * <p>\n+ * WARNING: this class is not intended to be public, but {@link java.util.ServiceLoader}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQxMDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowOTo1NlrOHrpuWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDowOTo1NlrOHrpuWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return null;\n          \n          \n            \n                    return original;", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534425", "createdAt": "2020-10-31T20:09:56Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.testcontainers.utility;\n+\n+public class FakeImageSubstitutor extends ImageNameSubstitutor {\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQxMDc3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDoxMDowNlrOHrpueQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMDoxMDowNlrOHrpueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNDQ1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return null;\n          \n          \n            \n                    return \"FakeImageSubstitutor\";", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r515534457", "createdAt": "2020-10-31T20:10:06Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/FakeImageSubstitutor.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.testcontainers.utility;\n+\n+public class FakeImageSubstitutor extends ImageNameSubstitutor {\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        return null;\n+    }\n+\n+    @Override\n+    protected String getDescription() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf653ba197e8de7a6559d0caa96a2ad5ffc3da7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjYzNTIwOnYy", "diffSide": "RIGHT", "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo1NToyMFrOHt_8QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMDo0NlrOHuAI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTU4NA==", "bodyText": "is it still needed, with the latest change where we always apply the default?\nIt is a nit but, since we refer to it from the docs, serves as an important example :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517995584", "createdAt": "2020-11-05T11:55:20Z", "author": {"login": "bsideup"}, "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.testcontainers.utility;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5Nzk2Nw==", "bodyText": "I just realized... DefaultImageNameSubstitutor is internal, so we definitely should avoid using it in this example :) I would even move it to some other package to ensure that everyone can write a custom substitutor", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517997967", "createdAt": "2020-11-05T11:59:21Z", "author": {"login": "bsideup"}, "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.testcontainers.utility;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTU4NA=="}, "originalCommit": {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODgzMA==", "bodyText": "Argh, good point. Removed, which also means that I can move this class back out of the org.testcontainers.utility package because there's no longer a dependency on the default substitutor.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517998830", "createdAt": "2020-11-05T12:00:46Z", "author": {"login": "rnorth"}, "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/utility/TestSpecificImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.testcontainers.utility;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which makes it possible to use fake image names in\n+ * {@link generic.ImageNameSubstitutionTest}. This implementation simply reverses a fake image name when presented, and\n+ * is hardcoded to act upon the specific fake name in that test.\n+ */\n+public class TestSpecificImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    private final DefaultImageNameSubstitutor defaultImageNameSubstitutor = new DefaultImageNameSubstitutor();\n+\n+    @Override\n+    public DockerImageName apply(final DockerImageName original) {\n+        if (original.equals(DockerImageName.parse(\"registry.mycompany.com/mirror/mysql:8.0.22\"))) {\n+            return defaultImageNameSubstitutor.apply(DockerImageName.parse(\"mysql\"));\n+        } else {\n+            return defaultImageNameSubstitutor.apply(original);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTU4NA=="}, "originalCommit": {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY0NzY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/ImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo1ODozNlrOHuADrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjozNzoyN1rOHuBW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzQ4Ng==", "bodyText": "WDYT about using ConfigurationFileImageNameSubstitutor directly, since we no longer expose DefaultImageNameSubstitutor to public?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r517997486", "createdAt": "2020-11-05T11:58:36Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/ImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * An image name substitutor converts a Docker image name, as may be specified in code, to an alternative name.\n+ * This is intended to provide a way to override image names, for example to enforce pulling of images from a private\n+ * registry.\n+ * <p>\n+ * This is marked as @{@link UnstableAPI} as this API is new. While we do not think major changes will be required, we\n+ * will react to feedback if necessary.\n+ */\n+@Slf4j\n+@UnstableAPI\n+public abstract class ImageNameSubstitutor implements Function<DockerImageName, DockerImageName> {\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor instance;\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor defaultImplementation = new DefaultImageNameSubstitutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAwMTE1NQ==", "bodyText": "Ah, there's a reason for this: DefaultImageNameSubstitutor will be the place where we hook in the 'prefixing' image name substitutor in 1.15.1.\nRight now the default substitutor is pretty useless, but I'd prefer not to remove it given that I think we'll have to re-add it very soon.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r518001155", "createdAt": "2020-11-05T12:05:06Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/ImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * An image name substitutor converts a Docker image name, as may be specified in code, to an alternative name.\n+ * This is intended to provide a way to override image names, for example to enforce pulling of images from a private\n+ * registry.\n+ * <p>\n+ * This is marked as @{@link UnstableAPI} as this API is new. While we do not think major changes will be required, we\n+ * will react to feedback if necessary.\n+ */\n+@Slf4j\n+@UnstableAPI\n+public abstract class ImageNameSubstitutor implements Function<DockerImageName, DockerImageName> {\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor instance;\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor defaultImplementation = new DefaultImageNameSubstitutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzQ4Ng=="}, "originalCommit": {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAxODc2OA==", "bodyText": "ah, okay \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3102#discussion_r518018768", "createdAt": "2020-11-05T12:37:27Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/ImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * An image name substitutor converts a Docker image name, as may be specified in code, to an alternative name.\n+ * This is intended to provide a way to override image names, for example to enforce pulling of images from a private\n+ * registry.\n+ * <p>\n+ * This is marked as @{@link UnstableAPI} as this API is new. While we do not think major changes will be required, we\n+ * will react to feedback if necessary.\n+ */\n+@Slf4j\n+@UnstableAPI\n+public abstract class ImageNameSubstitutor implements Function<DockerImageName, DockerImageName> {\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor instance;\n+\n+    @VisibleForTesting\n+    static ImageNameSubstitutor defaultImplementation = new DefaultImageNameSubstitutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzQ4Ng=="}, "originalCommit": {"oid": "6587210a35416d59cc33dda1e6be70f3bdbf239e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1463, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}