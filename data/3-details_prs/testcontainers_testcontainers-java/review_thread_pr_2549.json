{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTU0Nzc2", "number": 2549, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0ODoxOVrODwyLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo1MjoyNlrODwyPig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDgwMzIwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/AbstractWaitStrategyTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0ODoxOVrOGD-Lcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMToxMTozN1rOGEGB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzY1MA==", "bodyText": "I am not that happy about adding this method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r406817650", "createdAt": "2020-04-10T15:48:19Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/AbstractWaitStrategyTest.java", "diffHunk": "@@ -118,4 +118,9 @@ protected void waitUntilReadyAndSucceed(GenericContainer container) {\n         assertTrue(String.format(\"Expected container to be ready after timeout of %sms\",\n             WAIT_TIMEOUT_MILLIS), ready.get());\n     }\n+\n+    protected String waitUntilReadyAndSucceedWithLogs(GenericContainer container) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMTMyNA==", "bodyText": "If we proceed with checking logs, should I return the container itself?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r406821324", "createdAt": "2020-04-10T15:56:58Z", "author": {"login": "renatomefi"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/AbstractWaitStrategyTest.java", "diffHunk": "@@ -118,4 +118,9 @@ protected void waitUntilReadyAndSucceed(GenericContainer container) {\n         assertTrue(String.format(\"Expected container to be ready after timeout of %sms\",\n             WAIT_TIMEOUT_MILLIS), ready.get());\n     }\n+\n+    protected String waitUntilReadyAndSucceedWithLogs(GenericContainer container) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzY1MA=="}, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0NjI4Ng==", "bodyText": "Method in general not necessary.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r406946286", "createdAt": "2020-04-10T21:11:37Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/AbstractWaitStrategyTest.java", "diffHunk": "@@ -118,4 +118,9 @@ protected void waitUntilReadyAndSucceed(GenericContainer container) {\n         assertTrue(String.format(\"Expected container to be ready after timeout of %sms\",\n             WAIT_TIMEOUT_MILLIS), ready.get());\n     }\n+\n+    protected String waitUntilReadyAndSucceedWithLogs(GenericContainer container) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzY1MA=="}, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDgxNDE4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo1MjoyNlrOGD-SOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMTowNTo1MFrOGEUb_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTM4NQ==", "bodyText": "I would much prefer a black box test with a server requiring the headers.\nOn the other hand, if you want logs, you can just access the container, which is returned by startContainerWithCommand.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r406819385", "createdAt": "2020-04-10T15:52:26Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "diffHunk": "@@ -30,6 +34,26 @@ public void testWaitUntilReadyWithSuccess() {\n         waitUntilReadyAndSucceed(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY));\n     }\n \n+    /**\n+     * Ensures that HTTP requests made with the HttpWaitStrategy can be enriched with user defined headers,\n+     * although the test web server does not depend on the header to response with a 200, by checking the\n+     * logs we can ensure the HTTP request was correctly sent.\n+     */\n+    @Test\n+    public void testWaitUntilReadyWithSuccessWithCustomHeaders() {\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"baz\", \"boo\");\n+        String logs = waitUntilReadyAndSucceedWithLogs(\n+            startContainerWithCommand(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY),\n+                createHttpWaitStrategy(ready)\n+                    .withHeader(\"foo\", \"bar\")\n+                    .withHeaders(headers)\n+            ));\n+\n+        assertThat(logs, containsString(\"foo: bar\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgyMTUyNA==", "bodyText": "I got a bit blocked by how the tests works, the netcat utility is quite limited, I was afraid that I was going to have to touch too many things in order to achieve the result needed!\nIf you think that I should follow this path, what kind of service should I spin off? A mock service, custom bash script? what'd be appropriate in your opinion?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r406821524", "createdAt": "2020-04-10T15:57:24Z", "author": {"login": "renatomefi"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "diffHunk": "@@ -30,6 +34,26 @@ public void testWaitUntilReadyWithSuccess() {\n         waitUntilReadyAndSucceed(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY));\n     }\n \n+    /**\n+     * Ensures that HTTP requests made with the HttpWaitStrategy can be enriched with user defined headers,\n+     * although the test web server does not depend on the header to response with a 200, by checking the\n+     * logs we can ensure the HTTP request was correctly sent.\n+     */\n+    @Test\n+    public void testWaitUntilReadyWithSuccessWithCustomHeaders() {\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"baz\", \"boo\");\n+        String logs = waitUntilReadyAndSucceedWithLogs(\n+            startContainerWithCommand(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY),\n+                createHttpWaitStrategy(ready)\n+                    .withHeader(\"foo\", \"bar\")\n+                    .withHeaders(headers)\n+            ));\n+\n+        assertThat(logs, containsString(\"foo: bar\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTM4NQ=="}, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0ODkwOQ==", "bodyText": "After thinking a bit more about it, I think your approach is actually valid and does not involve too much overhead.\nI rewrote the method like this:\n    @Test\n    public void testWaitUntilReadyWithSuccessWithCustomHeaders() {\n        HashMap<String, String> headers = new HashMap<>();\n        headers.put(\"baz\", \"boo\");\n        GenericContainer container = startContainerWithCommand(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY),\n            createHttpWaitStrategy(ready)\n                .withHeader(\"foo\", \"bar\")\n                .withHeaders(headers)\n        );\n        waitUntilReadyAndSucceed(container);\n\n        String logs = container.getLogs();\n\n        assertThat(logs, containsString(\"foo: bar\"));\n        assertThat(logs, containsString(\"baz: boo\"));\n    }", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r406948909", "createdAt": "2020-04-10T21:19:43Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "diffHunk": "@@ -30,6 +34,26 @@ public void testWaitUntilReadyWithSuccess() {\n         waitUntilReadyAndSucceed(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY));\n     }\n \n+    /**\n+     * Ensures that HTTP requests made with the HttpWaitStrategy can be enriched with user defined headers,\n+     * although the test web server does not depend on the header to response with a 200, by checking the\n+     * logs we can ensure the HTTP request was correctly sent.\n+     */\n+    @Test\n+    public void testWaitUntilReadyWithSuccessWithCustomHeaders() {\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"baz\", \"boo\");\n+        String logs = waitUntilReadyAndSucceedWithLogs(\n+            startContainerWithCommand(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY),\n+                createHttpWaitStrategy(ready)\n+                    .withHeader(\"foo\", \"bar\")\n+                    .withHeaders(headers)\n+            ));\n+\n+        assertThat(logs, containsString(\"foo: bar\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTM4NQ=="}, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MjMzMw==", "bodyText": "Thanks, I've updated it with your suggestion!", "url": "https://github.com/testcontainers/testcontainers-java/pull/2549#discussion_r407182333", "createdAt": "2020-04-12T11:05:50Z", "author": {"login": "renatomefi"}, "path": "core/src/test/java/org/testcontainers/junit/wait/strategy/HttpWaitStrategyTest.java", "diffHunk": "@@ -30,6 +34,26 @@ public void testWaitUntilReadyWithSuccess() {\n         waitUntilReadyAndSucceed(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY));\n     }\n \n+    /**\n+     * Ensures that HTTP requests made with the HttpWaitStrategy can be enriched with user defined headers,\n+     * although the test web server does not depend on the header to response with a 200, by checking the\n+     * logs we can ensure the HTTP request was correctly sent.\n+     */\n+    @Test\n+    public void testWaitUntilReadyWithSuccessWithCustomHeaders() {\n+        HashMap<String, String> headers = new HashMap<>();\n+        headers.put(\"baz\", \"boo\");\n+        String logs = waitUntilReadyAndSucceedWithLogs(\n+            startContainerWithCommand(createShellCommand(\"200 OK\", GOOD_RESPONSE_BODY),\n+                createHttpWaitStrategy(ready)\n+                    .withHeader(\"foo\", \"bar\")\n+                    .withHeaders(headers)\n+            ));\n+\n+        assertThat(logs, containsString(\"foo: bar\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTM4NQ=="}, "originalCommit": {"oid": "72af46d9c101421bfd5822644bf6bc023246df50"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1547, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}