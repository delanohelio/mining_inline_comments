{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDI4NTQy", "number": 2245, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNDowNFrODXd-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMToxNjoyOFrODZA5Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM0ODkwOnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNDowNFrOFcx2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNDowNFrOFcx2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTA5Mw==", "bodyText": "Using VisibleAssertions for the logging in checks seems like major overkill, so I've changed it to use simple log statements.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365721093", "createdAt": "2020-01-13T10:04:04Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -17,9 +17,6 @@\n import lombok.SneakyThrows;\n import lombok.Synchronized;\n import lombok.extern.slf4j.Slf4j;\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.Description;\n-import org.rnorth.visibleassertions.VisibleAssertions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTM1NDM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNjowNFrOFcx5Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDowNjowNFrOFcx5Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTkzOA==", "bodyText": "It seems like a bug that currently checks can fail one time and then even try to run the checks again. We shouldn't; we should be forcing a failure so that the check failure gets investigated (rather than just the first test failing).", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365721938", "createdAt": "2020-01-13T10:06:04Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ3OTA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo0OToxM1rOFczCZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDoxMDoyOFrOFfKT2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA==", "bodyText": "WDYT about catching any Exception, not just RuntimeException?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365740644", "createdAt": "2020-01-13T10:49:13Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }\n+\n+            try {\n+                log.info(\"Checking the system...\");\n+                checkDockerVersion(version.getVersion());\n+                if (ryukContainerId != null) {\n+                    checkDiskSpace(client, ryukContainerId);\n+                } else {\n+                    runInsideDocker(\n+                        client,\n+                        createContainerCmd -> {\n+                            createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n+                            createContainerCmd.getHostConfig().withAutoRemove(true);\n+                            createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n+                        },\n+                        (__, containerId) -> {\n+                            checkDiskSpace(client, containerId);\n+                            return \"\";\n+                        }\n+                    );\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNDEyNw==", "bodyText": "Well, unless there's a naughty @SneakyThrows somewhere, it doesn't look like any checked exceptions are thrown. Also, if we catch an Exception we're in a situation where the client() method would have to be able to thow Exception. We could wrap a cached Exception inside a RuntimeException. But this feels a bit excessive.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366004127", "createdAt": "2020-01-13T20:09:44Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }\n+\n+            try {\n+                log.info(\"Checking the system...\");\n+                checkDockerVersion(version.getVersion());\n+                if (ryukContainerId != null) {\n+                    checkDiskSpace(client, ryukContainerId);\n+                } else {\n+                    runInsideDocker(\n+                        client,\n+                        createContainerCmd -> {\n+                            createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n+                            createContainerCmd.getHostConfig().withAutoRemove(true);\n+                            createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n+                        },\n+                        (__, containerId) -> {\n+                            checkDiskSpace(client, containerId);\n+                            return \"\";\n+                        }\n+                    );\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyMTIwMQ==", "bodyText": "I am just cautious about the future changes where we may introduce a checked exception that is thrown but not stored to be re-thrown later", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366021201", "createdAt": "2020-01-13T20:51:02Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }\n+\n+            try {\n+                log.info(\"Checking the system...\");\n+                checkDockerVersion(version.getVersion());\n+                if (ryukContainerId != null) {\n+                    checkDiskSpace(client, ryukContainerId);\n+                } else {\n+                    runInsideDocker(\n+                        client,\n+                        createContainerCmd -> {\n+                            createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n+                            createContainerCmd.getHostConfig().withAutoRemove(true);\n+                            createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n+                        },\n+                        (__, containerId) -> {\n+                            checkDiskSpace(client, containerId);\n+                            return \"\";\n+                        }\n+                    );\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAyMTM1OQ==", "bodyText": "@SneakyThrows is another good point, yes", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366021359", "createdAt": "2020-01-13T20:51:22Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }\n+\n+            try {\n+                log.info(\"Checking the system...\");\n+                checkDockerVersion(version.getVersion());\n+                if (ryukContainerId != null) {\n+                    checkDiskSpace(client, ryukContainerId);\n+                } else {\n+                    runInsideDocker(\n+                        client,\n+                        createContainerCmd -> {\n+                            createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n+                            createContainerCmd.getHostConfig().withAutoRemove(true);\n+                            createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n+                        },\n+                        (__, containerId) -> {\n+                            checkDiskSpace(client, containerId);\n+                            return \"\";\n+                        }\n+                    );\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIxOTA5OQ==", "bodyText": "Perhaps the good news is that a newly thrown checked exception would force us to catch it (client doesn't declare throws) - unless we use @SneakyThrows a lot more, which I think we should try and avoid. \ud83d\ude00", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r368219099", "createdAt": "2020-01-18T10:10:28Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;\n+            }\n+\n+            try {\n+                log.info(\"Checking the system...\");\n+                checkDockerVersion(version.getVersion());\n+                if (ryukContainerId != null) {\n+                    checkDiskSpace(client, ryukContainerId);\n+                } else {\n+                    runInsideDocker(\n+                        client,\n+                        createContainerCmd -> {\n+                            createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n+                            createContainerCmd.getHostConfig().withAutoRemove(true);\n+                            createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n+                        },\n+                        (__, containerId) -> {\n+                            checkDiskSpace(client, containerId);\n+                            return \"\";\n+                        }\n+                    );\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MDY0NA=="}, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTQ4MjEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMDo1MDoxM1rOFczELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDowOTo1OVrOFdDH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MTEwMg==", "bodyText": "if we throw it before attempting to start Ryuk, we won't need to store ryukContainerId in a field I suppose", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r365741102", "createdAt": "2020-01-13T10:50:13Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwNDIwMQ==", "bodyText": "Good point, refactoring with that in mind.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r366004201", "createdAt": "2020-01-13T20:09:59Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,32 +141,41 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n-        if (useRyuk) {\n+        if (useRyuk && ryukContainerId == null) {\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                throw cachedChecksFailure;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc0MTEwMg=="}, "originalCommit": {"oid": "d23519dcefaf1841f5873f925fe7dea92804d3ca"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTU1NjU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMToxNjoyOFrOFfMIrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMToxNjoyOFrOFfMIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0OTAwNw==", "bodyText": "it seems that we're throwing too late. We should do it before attempting to start Ryuk, otherwise the method will fail due to Ryuk name conflict and not the cached failure", "url": "https://github.com/testcontainers/testcontainers-java/pull/2245#discussion_r368249007", "createdAt": "2020-01-18T21:16:28Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -140,51 +139,61 @@ public DockerClient client() {\n                 \"  Operating System: \" + dockerInfo.getOperatingSystem() + \"\\n\" +\n                 \"  Total Memory: \" + dockerInfo.getMemTotal() / (1024 * 1024) + \" MB\");\n \n-        String ryukContainerId = null;\n+        final String ryukContainerId;\n+\n         boolean useRyuk = !Boolean.parseBoolean(System.getenv(\"TESTCONTAINERS_RYUK_DISABLED\"));\n         if (useRyuk) {\n+            log.debug(\"Ryuk is enabled\");\n             ryukContainerId = ResourceReaper.start(hostIpAddress, client);\n             log.info(\"Ryuk started - will monitor and terminate Testcontainers containers on JVM exit\");\n+        } else {\n+            log.debug(\"Ryuk is disabled\");\n+            ryukContainerId = null;\n         }\n \n         boolean checksEnabled = !TestcontainersConfiguration.getInstance().isDisableChecks();\n         if (checksEnabled) {\n-            VisibleAssertions.info(\"Checking the system...\");\n-            checkDockerVersion(version.getVersion());\n-            if (ryukContainerId != null) {\n-                checkDiskSpace(client, ryukContainerId);\n-            } else {\n-                runInsideDocker(\n-                    client,\n-                    createContainerCmd -> {\n-                        createContainerCmd.withName(\"testcontainers-checks-\" + SESSION_ID);\n-                        createContainerCmd.getHostConfig().withAutoRemove(true);\n-                        createContainerCmd.withCmd(\"tail\", \"-f\", \"/dev/null\");\n-                    },\n-                    (__, containerId) -> {\n-                        checkDiskSpace(client, containerId);\n-                        return \"\";\n-                    }\n-                );\n+            log.debug(\"Checks are enabled\");\n+            // fail-fast if checks have failed previously\n+            if (cachedChecksFailure != null) {\n+                log.debug(\"There is a cached checks failure - throwing\", cachedChecksFailure);\n+                throw cachedChecksFailure;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63392d9921603444266cb349dfe4edded2134c20"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1406, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}