{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjMzNzI5", "number": 3413, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMTozOTowOVrOE2ev8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDo0MzowOFrOFCYdOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTYyMzU0OnYy", "diffSide": "RIGHT", "path": "docs/features/image_name_substitution.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMTozOTowOVrOHvTfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1Mjo1OVrOIDDQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM2NDQ4OQ==", "bodyText": "Testcontainers will not apply the prefix to non-Hub image names.\n\nJudgement call required on this specific point!", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r519364489", "createdAt": "2020-11-08T11:39:09Z", "author": {"login": "rnorth"}, "path": "docs/features/image_name_substitution.md", "diffHunk": "@@ -45,7 +45,34 @@ to:\n \n \n \n+## Automatically modifying Docker Hub image names\n \n+Testcontainers can be configured to modify Docker Hub image names on the fly to apply a prefix string.\n+\n+Consider this if:\n+\n+* Developers and CI machines need to use different image names. For example, developers are able to pull images from Docker Hub, but CI machines need to pull from a private registry\n+* Your private registry has copies of images from Docker Hub where the names are predictable, and just adding a prefix is enough. \n+  For example, `registry.mycompany.com/mirror/mysql:8.0.22` can be derived from the original Docker Hub image name (`mysql:8.0.22`) with a consistent prefix string: `registry.mycompany.com/mirror/`\n+\n+In this case, image name references in code are **unchanged**.\n+i.e. you would leave as-is:\n+\n+<!--codeinclude--> \n+[Unchanged direct Docker Hub image name](../examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java) inside_block:directDockerHubReference\n+<!--/codeinclude-->\n+\n+You can then configure Testcontainers to apply the prefix `registry.mycompany.com/mirror/` to every image that it tries to pull from Docker Hub.\n+This can be done in one of two ways:\n+\n+* Setting environment variables `TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=registry.mycompany.com/mirror/`\n+* Via config file, setting `hub.image.name.prefix` in either:\n+    * the `~/.testcontainers.properties` file in your user home directory, or\n+    * a file named `testcontainers.properties` on the classpath\n+    \n+Testcontainers will automatically apply the prefix to every image that it pulls from Docker Hub - please verify that all [the required images](./pull_rate_limiting.md#which-images-are-used-by-testcontainers) exist in your registry.\n+\n+Testcontainers will not apply the prefix to non-Hub image names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2176ef8e2aa8c0a62a32d505b3f55dfc1d24112a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2OTk2MQ==", "bodyText": "Since the offender is Docker Hub with its rate limits, I would say let's focus on it first \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r540069961", "createdAt": "2020-12-10T10:52:59Z", "author": {"login": "bsideup"}, "path": "docs/features/image_name_substitution.md", "diffHunk": "@@ -45,7 +45,34 @@ to:\n \n \n \n+## Automatically modifying Docker Hub image names\n \n+Testcontainers can be configured to modify Docker Hub image names on the fly to apply a prefix string.\n+\n+Consider this if:\n+\n+* Developers and CI machines need to use different image names. For example, developers are able to pull images from Docker Hub, but CI machines need to pull from a private registry\n+* Your private registry has copies of images from Docker Hub where the names are predictable, and just adding a prefix is enough. \n+  For example, `registry.mycompany.com/mirror/mysql:8.0.22` can be derived from the original Docker Hub image name (`mysql:8.0.22`) with a consistent prefix string: `registry.mycompany.com/mirror/`\n+\n+In this case, image name references in code are **unchanged**.\n+i.e. you would leave as-is:\n+\n+<!--codeinclude--> \n+[Unchanged direct Docker Hub image name](../examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java) inside_block:directDockerHubReference\n+<!--/codeinclude-->\n+\n+You can then configure Testcontainers to apply the prefix `registry.mycompany.com/mirror/` to every image that it tries to pull from Docker Hub.\n+This can be done in one of two ways:\n+\n+* Setting environment variables `TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=registry.mycompany.com/mirror/`\n+* Via config file, setting `hub.image.name.prefix` in either:\n+    * the `~/.testcontainers.properties` file in your user home directory, or\n+    * a file named `testcontainers.properties` on the classpath\n+    \n+Testcontainers will automatically apply the prefix to every image that it pulls from Docker Hub - please verify that all [the required images](./pull_rate_limiting.md#which-images-are-used-by-testcontainers) exist in your registry.\n+\n+Testcontainers will not apply the prefix to non-Hub image names.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM2NDQ4OQ=="}, "originalCommit": {"oid": "2176ef8e2aa8c0a62a32d505b3f55dfc1d24112a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTg3NTgwOnYy", "diffSide": "RIGHT", "path": "docs/features/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMDo1Mjo1MFrOH3tpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxNjowNToyMlrOH3vg5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MTYyMg==", "bodyText": "leftover?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r528181622", "createdAt": "2020-11-21T10:52:50Z", "author": {"login": "bsideup"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -72,6 +72,8 @@ Some companies disallow the usage of Docker Hub, but you can override `*.image`\n > **pulsar.container.image = apachepulsar/pulsar:2.2.0**  \n > Used by Apache Pulsar\n \n+See [Image Name Substitution](./image_name_substitution.md) for other strategies for substituting image names to pull from other registries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b63f2a812ccaf79ee8ff04929576f83ac8e8cd41"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIxMjE5OQ==", "bodyText": "Ah yes, will remove.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r528212199", "createdAt": "2020-11-21T16:05:22Z", "author": {"login": "rnorth"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -72,6 +72,8 @@ Some companies disallow the usage of Docker Hub, but you can override `*.image`\n > **pulsar.container.image = apachepulsar/pulsar:2.2.0**  \n > Used by Apache Pulsar\n \n+See [Image Name Substitution](./image_name_substitution.md) for other strategies for substituting image names to pull from other registries.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MTYyMg=="}, "originalCommit": {"oid": "b63f2a812ccaf79ee8ff04929576f83ac8e8cd41"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjUwNjA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0MTo1OVrOH8GVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0MTo1OVrOH8GVaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MDM5NQ==", "bodyText": "since it is package private, we can remove this annotation \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r532780395", "createdAt": "2020-11-30T17:41:59Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjUyMTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0NTozNVrOH8Gewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozMDo1OVrOH8bQRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4Mjc4Ng==", "bodyText": "double negotiation? \ud83d\ude31\ud83d\ude00\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!!configuredPrefix.isEmpty()) {\n          \n          \n            \n                    if (configuredPrefix.isEmpty()) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r532782786", "createdAt": "2020-11-30T17:45:35Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+@Slf4j\n+final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    @VisibleForTesting\n+    static final String PREFIX_PROPERTY_KEY = \"hub.image.name.prefix\";\n+\n+    private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n+\n+    @VisibleForTesting\n+    PrefixingImageNameSubstitutor(final TestcontainersConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(DockerImageName original) {\n+        final String configuredPrefix = configuration.getEnvVarOrProperty(PREFIX_PROPERTY_KEY, \"\");\n+\n+        if (!!configuredPrefix.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMzE0MA==", "bodyText": "LOL I must have been so tired!", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r533123140", "createdAt": "2020-12-01T07:30:59Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+@Slf4j\n+final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    @VisibleForTesting\n+    static final String PREFIX_PROPERTY_KEY = \"hub.image.name.prefix\";\n+\n+    private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n+\n+    @VisibleForTesting\n+    PrefixingImageNameSubstitutor(final TestcontainersConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(DockerImageName original) {\n+        final String configuredPrefix = configuration.getEnvVarOrProperty(PREFIX_PROPERTY_KEY, \"\");\n+\n+        if (!!configuredPrefix.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4Mjc4Ng=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjUyNzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0NzoxMFrOH8Gi1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoxNzoxOFrOH8-Iig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MzgzMA==", "bodyText": "Thought:\nMaybe we should only apply it on empty registry, while an explicit docker.io or registry.hub.docker.com would serve as \"I know what I am doing\". WDYT?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r532783830", "createdAt": "2020-11-30T17:47:10Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+@Slf4j\n+final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    @VisibleForTesting\n+    static final String PREFIX_PROPERTY_KEY = \"hub.image.name.prefix\";\n+\n+    private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n+\n+    @VisibleForTesting\n+    PrefixingImageNameSubstitutor(final TestcontainersConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(DockerImageName original) {\n+        final String configuredPrefix = configuration.getEnvVarOrProperty(PREFIX_PROPERTY_KEY, \"\");\n+\n+        if (!!configuredPrefix.isEmpty()) {\n+            log.debug(\"No prefix is configured\");\n+            return original;\n+        }\n+\n+        boolean isAHubImage = original.getRegistry().isEmpty() ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NDYwMg==", "bodyText": "Yeah, that's a good point. I wasn't especially keen on having to maintain this list anyway, so it's for the best all round.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r533694602", "createdAt": "2020-12-01T20:17:18Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+@Slf4j\n+final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    @VisibleForTesting\n+    static final String PREFIX_PROPERTY_KEY = \"hub.image.name.prefix\";\n+\n+    private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n+\n+    @VisibleForTesting\n+    PrefixingImageNameSubstitutor(final TestcontainersConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(DockerImageName original) {\n+        final String configuredPrefix = configuration.getEnvVarOrProperty(PREFIX_PROPERTY_KEY, \"\");\n+\n+        if (!!configuredPrefix.isEmpty()) {\n+            log.debug(\"No prefix is configured\");\n+            return original;\n+        }\n+\n+        boolean isAHubImage = original.getRegistry().isEmpty() ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MzgzMA=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjUzNDkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzo0ODo1OVrOH8Gnbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTowMjo1M1rOH8_pzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NTAwNw==", "bodyText": "does it parse my.registry.com/ (note trailing slash) correctly?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r532785007", "createdAt": "2020-11-30T17:48:59Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+@Slf4j\n+final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    @VisibleForTesting\n+    static final String PREFIX_PROPERTY_KEY = \"hub.image.name.prefix\";\n+\n+    private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n+\n+    @VisibleForTesting\n+    PrefixingImageNameSubstitutor(final TestcontainersConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(DockerImageName original) {\n+        final String configuredPrefix = configuration.getEnvVarOrProperty(PREFIX_PROPERTY_KEY, \"\");\n+\n+        if (!!configuredPrefix.isEmpty()) {\n+            log.debug(\"No prefix is configured\");\n+            return original;\n+        }\n+\n+        boolean isAHubImage = original.getRegistry().isEmpty() ||\n+            original.getRegistry().equals(\"docker.io\") ||\n+            original.getRegistry().equals(\"registry.hub.docker.com\");\n+        if (!isAHubImage) {\n+            log.debug(\"Image {} is not a Docker Hub image - not applying registry/repository change\", original);\n+            return original;\n+        }\n+\n+        log.debug(\n+            \"Applying changes to image name {}: applying prefix '{}'\",\n+            original,\n+            configuredPrefix\n+        );\n+\n+        DockerImageName prefixAsImage = DockerImageName.parse(configuredPrefix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxOTUwMA==", "bodyText": "It does - in fact the trailing slash is required (and this is what we show in the docs).\nIf the trailing slash is omitted then the result looks like a simple concatenation. I've left this, rather than try to make the code clever, so that people have the choice - e.g. they may need to generate a name like my.registry.com/mirrored_postgres for postgres, etc.\nStill, this wasn't clear and could be prone to breakage in the future, so I've added some tests that explicitly cover this scenario.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r533719500", "createdAt": "2020-12-01T21:02:53Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/PrefixingImageNameSubstitutor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.testcontainers.utility;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.NoArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.testcontainers.UnstableAPI;\n+\n+/**\n+ * An {@link ImageNameSubstitutor} which applies a prefix to all image names, e.g. a private registry host and path.\n+ * The prefix may be set via an environment variable (<code>TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX</code>) or an equivalent\n+ * configuration file entry (see {@link TestcontainersConfiguration}).\n+ */\n+@UnstableAPI\n+@NoArgsConstructor\n+@Slf4j\n+final class PrefixingImageNameSubstitutor extends ImageNameSubstitutor {\n+\n+    @VisibleForTesting\n+    static final String PREFIX_PROPERTY_KEY = \"hub.image.name.prefix\";\n+\n+    private TestcontainersConfiguration configuration = TestcontainersConfiguration.getInstance();\n+\n+    @VisibleForTesting\n+    PrefixingImageNameSubstitutor(final TestcontainersConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public DockerImageName apply(DockerImageName original) {\n+        final String configuredPrefix = configuration.getEnvVarOrProperty(PREFIX_PROPERTY_KEY, \"\");\n+\n+        if (!!configuredPrefix.isEmpty()) {\n+            log.debug(\"No prefix is configured\");\n+            return original;\n+        }\n+\n+        boolean isAHubImage = original.getRegistry().isEmpty() ||\n+            original.getRegistry().equals(\"docker.io\") ||\n+            original.getRegistry().equals(\"registry.hub.docker.com\");\n+        if (!isAHubImage) {\n+            log.debug(\"Image {} is not a Docker Hub image - not applying registry/repository change\", original);\n+            return original;\n+        }\n+\n+        log.debug(\n+            \"Applying changes to image name {}: applying prefix '{}'\",\n+            original,\n+            configuredPrefix\n+        );\n+\n+        DockerImageName prefixAsImage = DockerImageName.parse(configuredPrefix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4NTAwNw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzE2OTE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDoyODo0M1rOH8MnsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1MDowMFrOIDDIIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw==", "bodyText": "I am curious how Docker handles a case where registry's host is \"some\".\nOr, to make it look more \"real\": localhost/image:tag", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r532883377", "createdAt": "2020-11-30T20:28:43Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNDcwMg==", "bodyText": "Interesting - I'll check. I'd assume that there has to be either a dot in the host part or there has to be a port part.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r533124702", "createdAt": "2020-12-01T07:34:47Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNDYyOA==", "bodyText": "OK, just quickly playing with Docker CLI vs DockerImageName.parse, and I think the behaviour is the same.\nDocker CLI:\n\nsome/foo -> Docker Hub, repo: some/foo\nsome.com/foo -> some.com registry, repo: foo\nsome:1234/foo -> some registry, port 1234, repo: foo\n\nDockerImageName:\n\nsome/foo -> Docker Hub, repo: some/foo\nsome.com/foo -> some.com registry, repo: foo\nsome:1234/foo -> some registry, port 1234, repo: foo\n\nThings get wild with localhost, though:\n$ docker pull localhost/foo\nUsing default tag: latest\nError response from daemon: Get http://localhost/v2/: dial tcp [::1]:80: connect: connection refused\n\n$ docker pull localhos/foo    # note missing t\nUsing default tag: latest\nError response from daemon: pull access denied for localhos/foo, repository does not exist or may require 'docker login': denied: requested access to the resource is denied\n\ni.e. I think Docker daemon/CLI special-cases localhost as a registry name. We don't imitate this in DockerImageName.parse but I suspect it's a niche case that we can avoid.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r533724628", "createdAt": "2020-12-01T21:12:51Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNzA4MA==", "bodyText": "This looks like an example of localhost being treated specially in registry, and I imagine further searching would find more instances of this logic: https://github.com/moby/moby/blob/bb23f1bf61cb49c5aa3f7df934d79c305afb7c8c/registry/service.go#L153", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r533727080", "createdAt": "2020-12-01T21:17:34Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0MzEyMw==", "bodyText": "Good finding! Perhaps we should add a similar logic then (and tests)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r538443123", "createdAt": "2020-12-08T14:38:05Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNTg5Mg==", "bodyText": "Can we defer or avoid? This is only going to be relevant if people are running a registry on port 80 on localhost, which seems extremely niche.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r539705892", "createdAt": "2020-12-09T22:47:21Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2Nzg3Mg==", "bodyText": "Ok \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r540067872", "createdAt": "2020-12-10T10:50:00Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/PrefixingImageNameSubstitutorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n+import static org.testcontainers.utility.PrefixingImageNameSubstitutor.PREFIX_PROPERTY_KEY;\n+\n+public class PrefixingImageNameSubstitutorTest {\n+\n+    private TestcontainersConfiguration mockConfiguration;\n+    private PrefixingImageNameSubstitutor underTest;\n+\n+    @Before\n+    public void setUp() {\n+        mockConfiguration = mock(TestcontainersConfiguration.class);\n+        underTest = new PrefixingImageNameSubstitutor(mockConfiguration);\n+    }\n+\n+    @Test\n+    public void testHappyPath() {\n+        when(mockConfiguration.getEnvVarOrProperty(eq(PREFIX_PROPERTY_KEY), any())).thenReturn(\"someregistry.com/our-mirror/\");\n+\n+        final DockerImageName result = underTest.apply(DockerImageName.parse(\"some/image:tag\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4MzM3Nw=="}, "originalCommit": {"oid": "a7aced507f7fd3eca2d977b28f8af0d1eacbacae"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDQyMTcwOnYy", "diffSide": "RIGHT", "path": "docs/features/image_name_substitution.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDo0MzowOFrOIBgTbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjo0NjowOFrOICs_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0ODc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Testcontainers will not apply the prefix to:\n          \n          \n            \n            Testcontainers will not apply the prefix to:\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nOtherwise it renders incorrectly:", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r538448751", "createdAt": "2020-12-08T14:43:08Z", "author": {"login": "bsideup"}, "path": "docs/features/image_name_substitution.md", "diffHunk": "@@ -45,7 +45,36 @@ to:\n \n \n \n+## Automatically modifying Docker Hub image names\n \n+Testcontainers can be configured to modify Docker Hub image names on the fly to apply a prefix string.\n+\n+Consider this if:\n+\n+* Developers and CI machines need to use different image names. For example, developers are able to pull images from Docker Hub, but CI machines need to pull from a private registry\n+* Your private registry has copies of images from Docker Hub where the names are predictable, and just adding a prefix is enough. \n+  For example, `registry.mycompany.com/mirror/mysql:8.0.22` can be derived from the original Docker Hub image name (`mysql:8.0.22`) with a consistent prefix string: `registry.mycompany.com/mirror/`\n+\n+In this case, image name references in code are **unchanged**.\n+i.e. you would leave as-is:\n+\n+<!--codeinclude--> \n+[Unchanged direct Docker Hub image name](../examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java) inside_block:directDockerHubReference\n+<!--/codeinclude-->\n+\n+You can then configure Testcontainers to apply the prefix `registry.mycompany.com/mirror/` to every image that it tries to pull from Docker Hub.\n+This can be done in one of two ways:\n+\n+* Setting environment variables `TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=registry.mycompany.com/mirror/`\n+* Via config file, setting `hub.image.name.prefix` in either:\n+    * the `~/.testcontainers.properties` file in your user home directory, or\n+    * a file named `testcontainers.properties` on the classpath\n+    \n+Testcontainers will automatically apply the prefix to every image that it pulls from Docker Hub - please verify that all [the required images](../supported_docker_environment/image_registry_rate_limiting.md#which-images-are-used-by-testcontainers) exist in your registry.\n+\n+Testcontainers will not apply the prefix to:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd63ec6081cf60ee811ad5653de1b85cd5e67285"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwNTIzOA==", "bodyText": "Ah good catch, thanks", "url": "https://github.com/testcontainers/testcontainers-java/pull/3413#discussion_r539705238", "createdAt": "2020-12-09T22:46:08Z", "author": {"login": "rnorth"}, "path": "docs/features/image_name_substitution.md", "diffHunk": "@@ -45,7 +45,36 @@ to:\n \n \n \n+## Automatically modifying Docker Hub image names\n \n+Testcontainers can be configured to modify Docker Hub image names on the fly to apply a prefix string.\n+\n+Consider this if:\n+\n+* Developers and CI machines need to use different image names. For example, developers are able to pull images from Docker Hub, but CI machines need to pull from a private registry\n+* Your private registry has copies of images from Docker Hub where the names are predictable, and just adding a prefix is enough. \n+  For example, `registry.mycompany.com/mirror/mysql:8.0.22` can be derived from the original Docker Hub image name (`mysql:8.0.22`) with a consistent prefix string: `registry.mycompany.com/mirror/`\n+\n+In this case, image name references in code are **unchanged**.\n+i.e. you would leave as-is:\n+\n+<!--codeinclude--> \n+[Unchanged direct Docker Hub image name](../examples/junit4/generic/src/test/java/generic/ImageNameSubstitutionTest.java) inside_block:directDockerHubReference\n+<!--/codeinclude-->\n+\n+You can then configure Testcontainers to apply the prefix `registry.mycompany.com/mirror/` to every image that it tries to pull from Docker Hub.\n+This can be done in one of two ways:\n+\n+* Setting environment variables `TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX=registry.mycompany.com/mirror/`\n+* Via config file, setting `hub.image.name.prefix` in either:\n+    * the `~/.testcontainers.properties` file in your user home directory, or\n+    * a file named `testcontainers.properties` on the classpath\n+    \n+Testcontainers will automatically apply the prefix to every image that it pulls from Docker Hub - please verify that all [the required images](../supported_docker_environment/image_registry_rate_limiting.md#which-images-are-used-by-testcontainers) exist in your registry.\n+\n+Testcontainers will not apply the prefix to:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ0ODc1MQ=="}, "originalCommit": {"oid": "cd63ec6081cf60ee811ad5653de1b85cd5e67285"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1448, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}