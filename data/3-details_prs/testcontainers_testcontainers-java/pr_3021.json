{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzM1MTMx", "number": 3021, "title": "Add image compatibility checks", "bodyText": "Background to this change: the majority of modules make assumptions about the container image being used - for example, port numbers, expected log lines, etc. When asking users to provide their own images with modules, it is potentially confusing if the provided image diverges from the original 'vendor-provided' image that the module was built to support.\nThis change is intended to ensure that, if the user provides their own image that is not the same as the vendor-provided one, they are given adequate warning and forced to signal that this is intentional.\nFor example:\n\nnew KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:any\")) will just work, because confluentinc/cp-kafka matches the image name that KafkaContainer was designed to work with\nbut new KafkaContainer(DockerImageName.parse(\"some-other-kafka\")) will not work immediately, because some-other-kafka may be an entirely divergent image from confluentinc/cp-kafka. In this case, the user would be prompted to add .asCompatibleSubstituteFor(\"confluentinc/cp-kafka\") which tells Testcontainers that this is a conscious decision\n\nThis PR:\n\n\nAdds to DockerImageName:\n\nasCompatibleSubstituteFor(DockerImageName) and asCompatibleSubstituteFor(String) methods which may be used to claim compatibility with a vendor-provided image\nisCompatibleWith(DockerImageName) and assertCompatibleWith(DockerImageName) methods which can be used by Testcontainers to check that the provided image is compatible with the expected vendor-provided image\n\n\n\nRefactors all modules to use this new mechanism\n\n\nAmends the TestcontainersConfiguration class so that any file-based overrides automatically claim compatibility", "createdAt": "2020-07-26T11:06:56Z", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021", "merged": true, "mergeCommit": {"oid": "1e597ccd4fa1a7113d3077599e0b13237c1fef51"}, "closed": true, "closedAt": "2020-09-29T10:02:02Z", "author": {"login": "rnorth"}, "timelineItems": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4rPpbgFqTQ1NTM1NDIxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTCO6tAFqTUxMDI2NTM2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzU0MjEw", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-455354210", "createdAt": "2020-07-26T11:08:51Z", "commit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTowODo1MVrOG3LfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTowODo1MVrOG3LfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw==", "bodyText": "Might reinstate, but Lombok seemed to be choking and was getting in the way.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r460513127", "createdAt": "2020-07-26T11:08:51Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "committedDate": "2020-08-14T14:37:25Z", "message": "Implement image compatibility checks\nSo that compatibility assurances can be made in code rather than just being assumed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71fe1b7595655852645e0df3930b4138ec26e96d", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/71fe1b7595655852645e0df3930b4138ec26e96d", "committedDate": "2020-08-14T12:14:15Z", "message": "Revert changes to default image name initialization"}, "afterCommit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "committedDate": "2020-08-14T14:37:25Z", "message": "Implement image compatibility checks\nSo that compatibility assurances can be made in code rather than just being assumed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NjQzNzM2", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-467643736", "createdAt": "2020-08-14T14:55:23Z", "commit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1NToyNFrOHA3yYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1NToyNFrOHA3yYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw==", "bodyText": "A TODO for a point in the near future. This has a lot to do with mandatory bring-your-own-image in R2DBC and JDBC URLs as discussed in Slack (@bsideup)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470676067", "createdAt": "2020-08-14T14:55:24Z", "author": {"login": "rnorth"}, "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/49c2360fd8bd145fdb5e684467b2926171a539bf", "committedDate": "2020-08-14T15:06:01Z", "message": "Revert default image name selection in Kafka/Pulsar containers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODA1OTAz", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-467805903", "createdAt": "2020-08-14T18:51:13Z", "commit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "state": "DISMISSED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo1MToxNFrOHA_-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxODo1M1rOHBCOJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA==", "bodyText": "Do we really un-deprecate the String constructors?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470810148", "createdAt": "2020-08-14T18:51:14Z", "author": {"login": "kiview"}, "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng==", "bodyText": "If we would return DockerImageName, we could use this method in super constructor arguments.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811376", "createdAt": "2020-08-14T18:53:50Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw==", "bodyText": "If assertCompatibleWith would return DockerImageName, we coould use it as argument for the super constructor.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811773", "createdAt": "2020-08-14T18:54:43Z", "author": {"login": "kiview"}, "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated\n     public MongoDBContainer(@NonNull final String dockerImageName) {\n         this(DockerImageName.parse(dockerImageName));\n     }\n \n     public MongoDBContainer(final DockerImageName dockerImageName) {\n         super(dockerImageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng==", "bodyText": "By which logic are the deprecations of constructors removed now? Seems kind of inconsistent between classes.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470813576", "createdAt": "2020-08-14T18:58:56Z", "author": {"login": "kiview"}, "path": "modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java", "diffHunk": "@@ -40,21 +43,19 @@\n     /**\n      * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n      */\n-    @Deprecated\n     public CassandraContainer() {\n-        this(\"cassandra:3.11.2\");\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));\n          \n      \n    \n    \n  \n\nIs this constructor missing a test therefore?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470819792", "createdAt": "2020-08-14T19:12:58Z", "author": {"login": "kiview"}, "path": "modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java", "diffHunk": "@@ -35,20 +38,22 @@\n      */\n     @Deprecated\n     public KafkaContainer() {\n-        this(\"5.2.1\");\n+        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link KafkaContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public KafkaContainer(String confluentPlatformVersion) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getKafkaImage() + \":\" + confluentPlatformVersion));\n+        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNTA2Mw==", "bodyText": "I think I missed the Slack discussion, but just being pragmatic and make the constants packacke-private?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470825063", "createdAt": "2020-08-14T19:25:31Z", "author": {"login": "kiview"}, "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}, "originalCommit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA==", "bodyText": "I think we can't really remove this logic completely. Adding the -enterprise suffix to custom image is a bit weird, isn't it?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827758", "createdAt": "2020-08-14T19:31:40Z", "author": {"login": "kiview"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzk5OA==", "bodyText": "In the current version of the code, standardImage is never read. But we should think what to do with withEnterpriseEdition() method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827998", "createdAt": "2020-08-14T19:32:14Z", "author": {"login": "kiview"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -59,31 +57,36 @@\n \n     private String adminPassword = DEFAULT_ADMIN_PASSWORD;\n \n-    private boolean standardImage = false;\n+    private boolean standardImage = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyOTM3OA==", "bodyText": "This class was not really touched I suppose?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470829378", "createdAt": "2020-08-14T19:35:42Z", "author": {"login": "kiview"}, "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -41,10 +41,6 @@ public OracleContainer() {\n         this(resolveImageName());\n     }\n \n-    /**\n-     * @deprecated use {@link OracleContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjQ2Nw==", "bodyText": "Shouldn't we move this code to after getting the capabilities?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470832467", "createdAt": "2020-08-14T19:43:07Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -182,8 +180,12 @@ protected void configure() {\n                     .withVncPort(VNC_PORT);\n         }\n \n-        if (!customImageNameIsSet) {\n-            super.setDockerImageName(getImageForCapabilities(capabilities, seleniumVersion));\n+        DockerImageName standardImageForCapabilities = getImageForCapabilities(capabilities, seleniumVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzOTE4NQ==", "bodyText": "Can we also add a comment that we just use this function to throw the exception in case of invalid input? I was wondering at first, why the return value is not used.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470839185", "createdAt": "2020-08-14T19:59:27Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -146,11 +162,12 @@ public String toString() {\n      * @throws IllegalArgumentException if not valid\n      */\n     public void assertValid() {\n+        //noinspection UnstableApiUsage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\n          \n          \n            \n                        throw new IllegalArgumentException(\n          \n      \n    \n    \n  \n\nWDYT?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470842267", "createdAt": "2020-08-14T20:07:16Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {\n+        if (!this.isCompatibleWith(other)) {\n+            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg==", "bodyText": "@Value instead of @Data? Or @EqualsAndHashcode? Or we don't use lombok in the first plance, since we already define toString() and the constructor.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470844172", "createdAt": "2020-08-14T20:11:53Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n          \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n          \n      \n    \n    \n  \n\nSince latest is default?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470845326", "createdAt": "2020-08-14T20:14:47Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ==", "bodyText": "after my suggestion, this would be the same test as testLatestTreatedAsWildcard", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846075", "createdAt": "2020-08-14T20:16:33Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0Njg1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodAcceptsCompatible() {\n          \n          \n            \n                public void testAssertMethodAcceptsCompatible() {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846859", "createdAt": "2020-08-14T20:18:30Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodRejectsIncompatible() {\n          \n          \n            \n                public void testAssertMethodRejectsIncompatible() {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470847012", "createdAt": "2020-08-14T20:18:53Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+        subject.assertCompatibleWith(DockerImageName.parse(\"bar\"));\n+    }\n+\n+    @Test\n+    public void testCheckMethodRejectsIncompatible() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ef1fe186dc5e9c93bd8f75ea6dd36d0350cb13", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/a0ef1fe186dc5e9c93bd8f75ea6dd36d0350cb13", "committedDate": "2020-08-15T15:30:01Z", "message": "Undeprecate remaining String constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5be1a79cdab4912909437b5a35fc8e1abca58511", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/5be1a79cdab4912909437b5a35fc8e1abca58511", "committedDate": "2020-08-15T15:30:31Z", "message": "Add comment re validation of HostAndPort"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "committedDate": "2020-08-15T15:34:50Z", "message": "Add missing annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5c1e74adb89ff04c21aa66351c4c160a912b21b", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/c5c1e74adb89ff04c21aa66351c4c160a912b21b", "committedDate": "2020-08-15T15:43:33Z", "message": "Fix Kafka version string constructor\nFix gap in testing and docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d82db9611b4f590e9ec58b921e6469972656864", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/7d82db9611b4f590e9ec58b921e6469972656864", "committedDate": "2020-08-15T15:44:46Z", "message": "Use @EqualsAndHashCode for Versioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "committedDate": "2020-08-15T15:51:36Z", "message": "Clarify and expand test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d87bcee21822e98cc67297540fe5a9884727ac04", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/d87bcee21822e98cc67297540fe5a9884727ac04", "committedDate": "2020-08-15T15:51:57Z", "message": "Remove duplicate test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "committedDate": "2020-08-15T15:52:22Z", "message": "Rename test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "202a163c5c696d0abe5354190a428fd09da17073", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/202a163c5c696d0abe5354190a428fd09da17073", "committedDate": "2020-08-15T16:33:35Z", "message": "Add continue-on-error for cache step, and upgrade GH cache action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e5191028f2a24504f13717ef042e79888e8911", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/b6e5191028f2a24504f13717ef042e79888e8911", "committedDate": "2020-08-20T07:28:36Z", "message": "Update core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n\nCo-authored-by: Kevin Wittek <kiview@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c7ae5664acbf03a7c781e1a3d355c73c40ca0b", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/33c7ae5664acbf03a7c781e1a3d355c73c40ca0b", "committedDate": "2020-08-20T07:41:29Z", "message": "Merge remote-tracking branch 'origin/master' into image-overrides\nAdapt trim() usage to new code structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee5eae3c7723c0d2c6ec4b67c742da6e5e81adff", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/ee5eae3c7723c0d2c6ec4b67c742da6e5e81adff", "committedDate": "2020-08-20T07:50:11Z", "message": "Merge from origin/master and incorporate trim() to fix accidental whitespace in property files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/502c647a91a45987aff1a09c9c558319aa5c09ed", "committedDate": "2020-08-20T07:50:51Z", "message": "Merge remote-tracking branch 'origin/image-overrides' into image-overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzUzNzY0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471353764", "createdAt": "2020-08-20T07:59:05Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTowNVrOHDyPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTowNVrOHDyPwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA==", "bodyText": "tiny nit: if we import Versioning.Sha256Versioning and other Versioning.* classes, the changelog should be smaller :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473731008", "createdAt": "2020-08-20T07:59:05Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzU0MzMw", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471354330", "createdAt": "2020-08-20T07:59:54Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTo1NFrOHDyUKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTo1NFrOHDyUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg==", "bodyText": "marked as @Nullable while the field isn't", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473732136", "createdAt": "2020-08-20T07:59:54Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -103,11 +104,26 @@ public DockerImageName(String nameWithoutTag, @NotNull String version) {\n \n         if (version.startsWith(\"sha256:\")) {\n             repo = remoteName;\n-            versioning = new Sha256Versioning(version.replace(\"sha256:\", \"\"));\n+            versioning = new Versioning.Sha256Versioning(version.replace(\"sha256:\", \"\"));\n         } else {\n             repo = remoteName;\n-            versioning = new TagVersioning(version);\n+            versioning = new Versioning.TagVersioning(version);\n         }\n+\n+        compatibleSubstituteFor = null;\n+    }\n+\n+    private DockerImageName(String rawName,\n+                            String registry,\n+                            String repo,\n+                            @Nullable Versioning versioning,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzU2NjE1", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471356615", "createdAt": "2020-08-20T08:03:20Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowMzoyMFrOHDykMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowMzoyMFrOHDykMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw==", "bodyText": "can we make versioning @NonNull and use Versioning.TagVersioning.LATEST if null is passed to @Nullable methods?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736243", "createdAt": "2020-08-20T08:03:20Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzU2Nzg0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471356784", "createdAt": "2020-08-20T08:03:33Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowMzozNFrOHDylWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowMzozNFrOHDylWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ==", "bodyText": "ditto re null vs Versioning.TagVersioning.LATEST", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736539", "createdAt": "2020-08-20T08:03:34Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + versioning.getSeparator() + versioning.toString();\n+        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzU5MTg0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471359184", "createdAt": "2020-08-20T08:06:14Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowNjoxNFrOHDyy3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowNjoxNFrOHDyy3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA==", "bodyText": "Consider adding @With(AccessLevel.PRIVATE) to otherImageName, so that we can do:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n          \n          \n            \n                    return withOtherImageName(otherImageName);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473739998", "createdAt": "2020-08-20T08:06:14Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 196}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzU5OTM4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471359938", "createdAt": "2020-08-20T08:07:23Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowNzoyM1rOHDy2dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowNzoyM1rOHDy2dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA==", "bodyText": "WDYT about adding if (equals(other)) return true?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473740918", "createdAt": "2020-08-20T08:07:23Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzkwOTc2", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471390976", "createdAt": "2020-08-20T08:49:50Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0OTo1MFrOHD1JZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0OTo1MFrOHD1JZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ==", "bodyText": "idea: make compatibleSubstituteFor @NonNull, use SelfCompatible by default", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473778535", "createdAt": "2020-08-20T08:49:50Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzk1ODA4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471395808", "createdAt": "2020-08-20T08:56:08Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1NjowOFrOHD1f6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1NjowOFrOHD1f6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();;\n          \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473784298", "createdAt": "2020-08-20T08:56:08Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -37,7 +37,7 @@\n     private static File ENVIRONMENT_CONFIG_FILE = new File(System.getProperty(\"user.home\"), \".\" + PROPERTIES_FILE_NAME);\n \n     @Getter(lazy = true)\n-    private static final TestcontainersConfiguration instance = loadConfiguration();\n+    private static final TestcontainersConfiguration instance = loadConfiguration();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzk4ODU5", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471398859", "createdAt": "2020-08-20T09:00:05Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTowMDowNVrOHD1tyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTowMDowNVrOHD1tyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ==", "bodyText": "I just realized... when did we introduce DockerImageName getPulsarDockerImageName()?\nIf 1.15.0-rc1, maybe we should use the opportunity to remove module's images from TestcontainersConfiguration, and instead expose something like the current getImage that would allow any module to use the configuration mechanism?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473787851", "createdAt": "2020-08-20T09:00:05Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -129,29 +138,29 @@ public Integer getRyukTimeout() {\n \n     @Deprecated\n     public String getKafkaImage() {\n-        return String.valueOf(properties.getOrDefault(\"kafka.container.image\", \"confluentinc/cp-kafka\"));\n+        return getKafkaDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getKafkaDockerImageName() {\n-        return DockerImageName.parse(getKafkaImage());\n+        return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n     @Deprecated\n     public String getPulsarImage() {\n-        return String.valueOf(properties.getOrDefault(\"pulsar.container.image\", \"apachepulsar/pulsar\"));\n+        return getPulsarDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getPulsarDockerImageName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMzk5OTg0", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471399984", "createdAt": "2020-08-20T09:01:33Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTowMTozM1rOHD1ykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTowMTozM1rOHD1ykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA==", "bodyText": "nit: should we move it before the non-static class members?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473789074", "createdAt": "2020-08-20T09:01:33Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @EqualsAndHashCode\n+    class TagVersioning implements Versioning {\n+        public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n+        private final String tag;\n+\n+        TagVersioning(String tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public boolean isValid() {\n+            return tag.matches(TAG_REGEX);\n+        }\n+\n+        @Override\n+        public String getSeparator() {\n+            return \":\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return tag;\n+        }\n+\n+        static final TagVersioning LATEST = new TagVersioning(\"latest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDA5MzM1", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471409335", "createdAt": "2020-08-20T09:14:35Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOToxNDozNVrOHD2b-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOToxNDozNVrOHD2b-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA==", "bodyText": "this is an interesting edge case. Ideally, both images should we treated as compatible automatically. WDYT?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473799674", "createdAt": "2020-08-20T09:14:35Z", "author": {"login": "bsideup"}, "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "diffHunk": "@@ -101,6 +101,7 @@ public void elasticsearchOssImage() throws IOException {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n+                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDE0NDE2", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471414416", "createdAt": "2020-08-20T09:21:29Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOToyMToyOVrOHD2xvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOToyMToyOVrOHD2xvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ==", "bodyText": "heads up: making it static would create false positives since #testKafkaFunctionality uses the same topic name / message that it asserts.\nLet's change the topic name in #testKafkaFunctionality to something with random in it", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473805245", "createdAt": "2020-08-20T09:21:29Z", "author": {"login": "bsideup"}, "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -29,8 +29,8 @@\n     private static final DockerImageName ZOOKEEPER_TEST_IMAGE = DockerImageName.parse(\"confluentinc/cp-zookeeper:4.0.0\");\n \n     // junitRule {\n-    @Rule\n-    public KafkaContainer kafka = new KafkaContainer();\n+    @ClassRule\n+    public static KafkaContainer kafka = new KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:5.2.1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDIyMjk1", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471422295", "createdAt": "2020-08-20T09:32:21Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozMjoyMVrOHD3Ung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozMjoyMVrOHD3Ung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA==", "bodyText": "See #3128\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withNetwork(kafka.getNetwork())\n          \n          \n            \n                            .withNetwork(network)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814174", "createdAt": "2020-08-20T09:32:21Z", "author": {"login": "bsideup"}, "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -75,7 +86,8 @@ public void testExternalZookeeperWithExternalNetwork() throws Exception {\n                 .withEnv(\"ZOOKEEPER_CLIENT_PORT\", \"2181\");\n \n             // withKafkaNetwork {\n-            GenericContainer application = new GenericContainer(\"alpine\").withNetwork(kafka.getNetwork())\n+            GenericContainer application = new GenericContainer(\"alpine\")\n+                .withNetwork(kafka.getNetwork())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDIyODcz", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471422873", "createdAt": "2020-08-20T09:33:14Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozMzoxNFrOHD3XTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozMzoxNFrOHD3XTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814863", "createdAt": "2020-08-20T09:33:14Z", "author": {"login": "bsideup"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -58,15 +64,15 @@\n      */\n     @Deprecated\n     public LocalStackContainer() {\n-        this(VERSION);\n+        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link LocalStackContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public LocalStackContainer(String version) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getLocalStackImage() + \":\" + version));\n+        this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDI1NDQ4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471425448", "createdAt": "2020-08-20T09:36:59Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozNzowMFrOHD3kNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozNzowMFrOHD3kNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA==", "bodyText": "uh? Does it get created here? (e.g. by tests)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473818164", "createdAt": "2020-08-20T09:37:00Z", "author": {"login": "bsideup"}, "path": "modules/neo4j/src/test/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+container-license-acceptance.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNDQ0NTkz", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-471444593", "createdAt": "2020-08-20T10:01:54Z", "commit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMTo1NFrOHD42PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMTo1NFrOHD42PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA==", "bodyText": "the same as with Elasticsearch - we may need to be able to verify the compatibility with multiple images", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473839164", "createdAt": "2020-08-20T10:01:54Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java", "diffHunk": "@@ -8,7 +8,9 @@\n \n public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n-    private static final DockerImageName FIREFOX_IMAGE = DockerImageName.parse(\"selenium/standalone-firefox:2.53.1-beryllium\");\n+    private static final DockerImageName FIREFOX_IMAGE = DockerImageName\n+        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\")\n+        .asCompatibleSubstituteFor(\"selenium/standalone-firefox-debug\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "committedDate": "2020-08-26T09:00:12Z", "message": "Resolve some review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad797a590d1907c98db362a8d23d9ad2e647c715", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/ad797a590d1907c98db362a8d23d9ad2e647c715", "committedDate": "2020-08-26T09:10:25Z", "message": "Avoid dirty state in Kafka test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/1ee4b78e234702d11d4eca43b89bb0a142218aaa", "committedDate": "2020-08-26T09:13:36Z", "message": "Tidy up some nits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/0b0212d30092b5c962b4b2624b82e6eb02fb1147", "committedDate": "2020-08-26T13:07:24Z", "message": "Use Lombok @With and restore generated constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "committedDate": "2020-08-26T13:07:49Z", "message": "Remove now-unused `TestcontainersConfiguration` accessors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90688338ec52a70a2919a72ce12dd4e7885e90de", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/90688338ec52a70a2919a72ce12dd4e7885e90de", "committedDate": "2020-08-26T14:13:51Z", "message": "Fix test compilation issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "committedDate": "2020-08-27T07:04:07Z", "message": "Revert \"Remove now-unused `TestcontainersConfiguration` accessors\"\n\ne22e639fbf740c326d1fd492a0e1c1ae124a8c53"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b068af5abd90e033aec4190fb7992db5a76eec6b", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/b068af5abd90e033aec4190fb7992db5a76eec6b", "committedDate": "2020-08-27T07:11:27Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3624787035733ecac137ccc5f61e1fb5cc42b7e5", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/3624787035733ecac137ccc5f61e1fb5cc42b7e5", "committedDate": "2020-09-01T11:21:35Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89a6b731198d2e2e40ace51854da2966a9cc7c46", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/89a6b731198d2e2e40ace51854da2966a9cc7c46", "committedDate": "2020-09-06T15:54:16Z", "message": "Merge remote-tracking branch 'origin/master' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa1e635931b62088b47f67e5778490668256846", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/dfa1e635931b62088b47f67e5778490668256846", "committedDate": "2020-09-06T16:00:16Z", "message": "Add an 'AnyVersion' for images"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61c5fbc26152422a6fb64aa574f67c359671bd0a", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/61c5fbc26152422a6fb64aa574f67c359671bd0a", "committedDate": "2020-09-06T16:01:03Z", "message": "Merge remote-tracking branch 'origin/image-overrides' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "committedDate": "2020-09-06T16:02:23Z", "message": "Add import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d43019550e75b379e73d0ef929b66a83c14c410", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/3d43019550e75b379e73d0ef929b66a83c14c410", "committedDate": "2020-09-06T19:58:37Z", "message": "Adapt test for mocking compatibility (avoid testing latest vs any for equality)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "022c49338c13eeb3ba690264f708d8a1c681a50d", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/022c49338c13eeb3ba690264f708d8a1c681a50d", "committedDate": "2020-09-24T08:12:21Z", "message": "Restore previous behaviour using a fixed version of Neo4j Enterprise image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "committedDate": "2020-09-24T08:22:11Z", "message": "Reinstate standard image check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9633f406975b9d6d1b1b0094d46433211c3977", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/ef9633f406975b9d6d1b1b0094d46433211c3977", "committedDate": "2020-09-24T08:42:01Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MTUwNDI2", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-496150426", "createdAt": "2020-09-25T06:47:20Z", "commit": {"oid": "ef9633f406975b9d6d1b1b0094d46433211c3977"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db4dabf7b5fd154d80d733555d7a982c598c9161", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/db4dabf7b5fd154d80d733555d7a982c598c9161", "committedDate": "2020-09-25T07:46:43Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80e69718fac9719fb300fa465c0487cb1db92af3", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/80e69718fac9719fb300fa465c0487cb1db92af3", "committedDate": "2020-09-28T16:14:00Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7794be675b1472f9722c61320f42b03f2545ffd4", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/7794be675b1472f9722c61320f42b03f2545ffd4", "committedDate": "2020-09-28T18:12:10Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b1f48347612c05f5eac54876cea4529f16d195", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/a1b1f48347612c05f5eac54876cea4529f16d195", "committedDate": "2020-09-29T08:46:12Z", "message": "Merge branch 'master' into image-overrides"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjY1MzY5", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#pullrequestreview-510265369", "createdAt": "2020-10-16T08:37:53Z", "commit": {"oid": "a1b1f48347612c05f5eac54876cea4529f16d195"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzo1M1rOHiuhBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzo1M1rOHiuhBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTc0OA==", "bodyText": "I'm wondering if we could make this static constant public so people can simply do something like:\nnew ElasticsearchContainer(ElasticsearchContainer.DEFAULT_IMAGE_NAME.withTag(\"7.9.2\"));", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r506175748", "createdAt": "2020-10-16T08:37:53Z", "author": {"login": "dadoonet"}, "path": "modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java", "diffHunk": "@@ -28,35 +27,41 @@\n     private static final int ELASTICSEARCH_DEFAULT_TCP_PORT = 9300;\n \n     /**\n-     * Elasticsearch Docker base URL\n+     * Elasticsearch Docker base image\n      */\n-    private static final String ELASTICSEARCH_DEFAULT_IMAGE = \"docker.elastic.co/elasticsearch/elasticsearch\";\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"docker.elastic.co/elasticsearch/elasticsearch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1f48347612c05f5eac54876cea4529f16d195"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3333, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}