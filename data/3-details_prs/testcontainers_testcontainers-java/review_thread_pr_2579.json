{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDk3ODgw", "number": 2579, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyMjozMFrODyZHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwOTowNzowM1rODzWyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTY2OTY4OnYy", "diffSide": "RIGHT", "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyMjozMFrOGGaCcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoyODoyNlrOGGaR6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MTI1MQ==", "bodyText": "perhaps we should use just getAccessKey here and in other methods", "url": "https://github.com/testcontainers/testcontainers-java/pull/2579#discussion_r409371251", "createdAt": "2020-04-16T08:22:30Z", "author": {"login": "bsideup"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -124,10 +156,74 @@ public LocalStackContainer withServices(Service... services) {\n             .withCredentials(localstack.getDefaultCredentialsProvider())\n             .build();\n      </code></pre>\n+     * or for AWS SDK v2 you can use {@link #getDefaultAccessKey()}, {@link #getDefaultSecretKey()} directly:\n+     * <pre><code>S3Client s3 = S3Client\n+             .builder()\n+             .endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.S3))\n+             .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+             localstack.getDefaultAccessKey(), localstack.getDefaultSecretKey()\n+             )))\n+             .region(Region.of(localstack.getDefaultRegion()))\n+             .build()\n+     </code></pre>\n      * @return an {@link AWSCredentialsProvider}\n      */\n     public AWSCredentialsProvider getDefaultCredentialsProvider() {\n-        return new AWSStaticCredentialsProvider(new BasicAWSCredentials(\"accesskey\", \"secretkey\"));\n+        return new AWSStaticCredentialsProvider(new BasicAWSCredentials(getDefaultAccessKey(), getDefaultSecretKey()));\n+    }\n+\n+    /**\n+     * Provides a default access key that is preconfigured to communicate with a given simulated service.\n+     * The access key can be used to construct AWS SDK v2 clients:\n+     * <pre><code>S3Client s3 = S3Client\n+             .builder()\n+             .endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.S3))\n+             .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+             localstack.getDefaultAccessKey(), localstack.getDefaultSecretKey()\n+             )))\n+             .region(Region.of(localstack.getDefaultRegion()))\n+             .build()\n+     </code></pre>\n+     * @return a default access key\n+     */\n+    public String getDefaultAccessKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd338d5fa0965d504b6644d4d87eed0af802ca4"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3NTIxMQ==", "bodyText": "fixed in 2ff3fa1", "url": "https://github.com/testcontainers/testcontainers-java/pull/2579#discussion_r409375211", "createdAt": "2020-04-16T08:28:26Z", "author": {"login": "musketyr"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -124,10 +156,74 @@ public LocalStackContainer withServices(Service... services) {\n             .withCredentials(localstack.getDefaultCredentialsProvider())\n             .build();\n      </code></pre>\n+     * or for AWS SDK v2 you can use {@link #getDefaultAccessKey()}, {@link #getDefaultSecretKey()} directly:\n+     * <pre><code>S3Client s3 = S3Client\n+             .builder()\n+             .endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.S3))\n+             .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+             localstack.getDefaultAccessKey(), localstack.getDefaultSecretKey()\n+             )))\n+             .region(Region.of(localstack.getDefaultRegion()))\n+             .build()\n+     </code></pre>\n      * @return an {@link AWSCredentialsProvider}\n      */\n     public AWSCredentialsProvider getDefaultCredentialsProvider() {\n-        return new AWSStaticCredentialsProvider(new BasicAWSCredentials(\"accesskey\", \"secretkey\"));\n+        return new AWSStaticCredentialsProvider(new BasicAWSCredentials(getDefaultAccessKey(), getDefaultSecretKey()));\n+    }\n+\n+    /**\n+     * Provides a default access key that is preconfigured to communicate with a given simulated service.\n+     * The access key can be used to construct AWS SDK v2 clients:\n+     * <pre><code>S3Client s3 = S3Client\n+             .builder()\n+             .endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.S3))\n+             .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+             localstack.getDefaultAccessKey(), localstack.getDefaultSecretKey()\n+             )))\n+             .region(Region.of(localstack.getDefaultRegion()))\n+             .build()\n+     </code></pre>\n+     * @return a default access key\n+     */\n+    public String getDefaultAccessKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM3MTI1MQ=="}, "originalCommit": {"oid": "abd338d5fa0965d504b6644d4d87eed0af802ca4"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTc3MTM4OnYy", "diffSide": "RIGHT", "path": "modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackContainerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwOTowNjoyNFrOGH0vXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwOTowNjoyNFrOGH0vXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1NzMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        assertEquals(\"The created bucket has the right name\", \"foo\", bucket.name());\n          \n          \n            \n                        assertEquals(\"The created bucket has the right name\", \"foo\", bucket.name());\n          \n      \n    \n    \n  \n\nduplicate", "url": "https://github.com/testcontainers/testcontainers-java/pull/2579#discussion_r410857310", "createdAt": "2020-04-19T09:06:24Z", "author": {"login": "bsideup"}, "path": "modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackContainerTest.java", "diffHunk": "@@ -85,6 +92,34 @@ public void s3TestOverBridgeNetwork() throws IOException {\n             assertEquals(\"The object can be retrieved\", \"baz\", content);\n         }\n \n+        @Test\n+        public void s3TestOverBridgeNetworkV2() {\n+            S3Client s3 = S3Client\n+                .builder()\n+                .endpointOverride(localstack.getEndpointOverride(LocalStackContainer.Service.S3))\n+                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(\n+                    localstack.getAccessKey(), localstack.getSecretKey()\n+                )))\n+                .region(Region.of(localstack.getRegion()))\n+                .build();\n+\n+            s3.createBucket(b -> b.bucket(\"foo\"));\n+            s3.putObject(b -> b.bucket(\"foo\").key(\"bar\"), RequestBody.fromBytes(\"baz\".getBytes()));\n+\n+            final List<software.amazon.awssdk.services.s3.model.Bucket> buckets = s3.listBuckets().buckets();\n+            assertEquals(\"The created bucket is present\", 1, buckets.size());\n+            final software.amazon.awssdk.services.s3.model.Bucket bucket = buckets.get(0);\n+\n+            assertEquals(\"The created bucket has the right name\", \"foo\", bucket.name());\n+            assertEquals(\"The created bucket has the right name\", \"foo\", bucket.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a73cb48f61b665cd94940ace5ca750a07978b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MTc3MjcwOnYy", "diffSide": "RIGHT", "path": "modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackContainerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwOTowNzowM1rOGH0v7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwOTowNzowM1rOGH0v7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg1NzQ1NA==", "bodyText": "I think test's name is a bit too specific\ncould you please reduce the test to the minimum, so that it only tests that SDK v2 works fine?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2579#discussion_r410857454", "createdAt": "2020-04-19T09:07:03Z", "author": {"login": "bsideup"}, "path": "modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackContainerTest.java", "diffHunk": "@@ -85,6 +92,34 @@ public void s3TestOverBridgeNetwork() throws IOException {\n             assertEquals(\"The object can be retrieved\", \"baz\", content);\n         }\n \n+        @Test\n+        public void s3TestOverBridgeNetworkV2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3a73cb48f61b665cd94940ace5ca750a07978b"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1562, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}