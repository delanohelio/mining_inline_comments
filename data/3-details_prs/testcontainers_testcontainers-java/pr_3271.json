{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjI0MzMx", "number": 3271, "title": "Remove dependency upon internet URLs for selenium tests", "bodyText": "Using the new shiny https://hub.docker.com/r/testcontainers/helloworld image", "createdAt": "2020-09-26T20:29:35Z", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271", "merged": true, "mergeCommit": {"oid": "27428a0ba798ca909db5b2f3202c15a74f34037e"}, "closed": true, "closedAt": "2020-09-28T16:12:38Z", "author": {"login": "rnorth"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMoCsIAH2gAyNDkzNjI0MzMxOjFkNGZkYTQzZmFkY2U4YjJjYTZlNTBhYjU4NDRjNzU1NWJlOTU4ZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNFMVfgFqTQ5NzEwOTUwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc", "author": {"user": {"login": "rnorth", "name": "Richard North"}}, "url": "https://github.com/testcontainers/testcontainers-java/commit/1d4fda43fadce8b2ca6e50ab5844c7555be958fc", "committedDate": "2020-09-26T10:43:28Z", "message": "Remove dependency upon internet URLs for selenium tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDI5MjY2", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#pullrequestreview-497029266", "createdAt": "2020-09-26T20:30:37Z", "commit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDozMDozN1rOHYieaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDozMDozN1rOHYieaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5MjcxNQ==", "bodyText": "There's no real sense in having two ways to test that Selenium is working, so just removed this altogether.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#discussion_r495492715", "createdAt": "2020-09-26T20:30:37Z", "author": {"login": "rnorth"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/BaseWebDriverContainerTest.java", "diffHunk": "@@ -1,62 +1,62 @@\n package org.testcontainers.junit;\n \n import org.jetbrains.annotations.NotNull;\n+import org.junit.ClassRule;\n import org.openqa.selenium.By;\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.remote.RemoteWebDriver;\n-import org.openqa.selenium.support.ui.ExpectedConditions;\n-import org.openqa.selenium.support.ui.WebDriverWait;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+import org.testcontainers.utility.DockerImageName;\n \n-import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n import static java.lang.String.format;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n /**\n  *\n  */\n public class BaseWebDriverContainerTest {\n \n-    protected void doSimpleWebdriverTest(BrowserWebDriverContainer rule) {\n+    @ClassRule\n+    public static Network NETWORK = Network.newNetwork();\n+\n+    @ClassRule\n+    public static GenericContainer<?> HELLO_WORLD = new GenericContainer<>(DockerImageName.parse(\"testcontainers/helloworld:1.0.0\"))\n+        .withNetwork(NETWORK)\n+        .withNetworkAliases(\"helloworld\")\n+        .withExposedPorts(8080, 8081)\n+        .waitingFor(new HttpWaitStrategy());\n+\n+    protected static void doSimpleExplore(BrowserWebDriverContainer<?> rule) {\n         RemoteWebDriver driver = setupDriverFromRule(rule);\n         System.out.println(\"Selenium remote URL is: \" + rule.getSeleniumAddress());\n         System.out.println(\"VNC URL is: \" + rule.getVncAddress());\n \n-        driver.get(\"http://www.google.com\");\n-        WebElement search = driver.findElement(By.name(\"q\"));\n-        search.sendKeys(\"testcontainers\");\n-        search.submit();\n+        driver.get(\"http://helloworld:8080\");\n+        WebElement title = driver.findElement(By.tagName(\"h1\"));\n \n-        List<WebElement> results = new WebDriverWait(driver, 15)\n-            .until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(\"#search h3\")));\n-\n-        assertTrue(\"the word 'testcontainers' appears in search results\",\n-            results.stream()\n-                .anyMatch(el -> el.getText().contains(\"testcontainers\")));\n+        assertEquals(\"the index page contains the title 'Hello world'\",\n+            \"Hello world\",\n+            title.getText().trim()\n+        );\n     }\n \n-    protected void assertBrowserNameIs(BrowserWebDriverContainer rule, String expectedName) {\n+    protected void assertBrowserNameIs(BrowserWebDriverContainer<?> rule, String expectedName) {\n         RemoteWebDriver driver = setupDriverFromRule(rule);\n         String actual = driver.getCapabilities().getBrowserName();\n         assertTrue(format(\"actual browser name is %s\", actual),\n             actual.equals(expectedName));\n     }\n \n     @NotNull\n-    private static RemoteWebDriver setupDriverFromRule(BrowserWebDriverContainer rule) {\n+    private static RemoteWebDriver setupDriverFromRule(BrowserWebDriverContainer<?> rule) {\n         RemoteWebDriver driver = rule.getWebDriver();\n         driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);\n         return driver;\n     }\n-\n-    protected static void doSimpleExplore(BrowserWebDriverContainer rule) {\n-        RemoteWebDriver driver = setupDriverFromRule(rule);\n-        driver.get(\"http://en.wikipedia.org/wiki/Randomness\");\n-\n-        // Oh! The irony!\n-        assertTrue(\"Randomness' description has the word 'pattern'\", driver.findElementByPartialLinkText(\"pattern\").isDisplayed());\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDI5Mjk4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#pullrequestreview-497029298", "createdAt": "2020-09-26T20:31:13Z", "commit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDozMToxM1rOHYiepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDozMToxM1rOHYiepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5Mjc3Mw==", "bodyText": "This was old and ignored anyway, so have just removed.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#discussion_r495492773", "createdAt": "2020-09-26T20:31:13Z", "author": {"login": "rnorth"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/FlakyContainerCreationTest.java", "diffHunk": "@@ -1,31 +0,0 @@\n-package org.testcontainers.junit;\n-\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.openqa.selenium.chrome.ChromeOptions;\n-import org.openqa.selenium.remote.RemoteWebDriver;\n-import org.testcontainers.containers.BrowserWebDriverContainer;\n-\n-import java.io.File;\n-\n-/**\n- * Created by rnorth on 30/01/2016.\n- */\n-public class FlakyContainerCreationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDI5MzM2", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#pullrequestreview-497029336", "createdAt": "2020-09-26T20:31:56Z", "commit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDozMTo1N1rOHYievw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQyMDozMTo1N1rOHYievw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ5Mjc5OQ==", "bodyText": "Given that all our tests will now use 'linked' (networked) containers, there's little point in having an explicit test for it that works another way.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#discussion_r495492799", "createdAt": "2020-09-26T20:31:57Z", "author": {"login": "rnorth"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/LinkedContainerTest.java", "diffHunk": "@@ -1,69 +0,0 @@\n-package org.testcontainers.junit;\n-\n-import lombok.Cleanup;\n-import org.junit.BeforeClass;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.openqa.selenium.By;\n-import org.openqa.selenium.chrome.ChromeOptions;\n-import org.openqa.selenium.remote.RemoteWebDriver;\n-import org.testcontainers.SeleniumTestImages;\n-import org.testcontainers.containers.BrowserWebDriverContainer;\n-import org.testcontainers.containers.Network;\n-import org.testcontainers.containers.NginxContainer;\n-\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.PrintStream;\n-\n-import static org.rnorth.visibleassertions.VisibleAssertions.assertEquals;\n-\n-\n-/**\n- * @author richardnorth\n- */\n-public class LinkedContainerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTA5NTA4", "url": "https://github.com/testcontainers/testcontainers-java/pull/3271#pullrequestreview-497109508", "createdAt": "2020-09-27T20:41:16Z", "commit": {"oid": "1d4fda43fadce8b2ca6e50ab5844c7555be958fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3331, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}