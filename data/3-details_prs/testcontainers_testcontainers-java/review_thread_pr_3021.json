{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzM1MTMx", "number": 3021, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTowODo1MVrOESI0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzo1M1rOEuXtLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDU0MzkyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxMTowODo1MVrOG3LfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjo1ODowMVrOHIC5eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw==", "bodyText": "Might reinstate, but Lombok seemed to be choking and was getting in the way.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r460513127", "createdAt": "2020-07-26T11:08:51Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNzQ2Mg==", "bodyText": "Just curious: what was(is ?) the problem?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473727462", "createdAt": "2020-08-20T07:56:28Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, "originalCommit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNjUzMg==", "bodyText": "Not sure I remember the specifics, but I think it was the IDE not seeing the generated constructor (doubtless plugin related)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477126532", "createdAt": "2020-08-26T08:28:24Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, "originalCommit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNzIzNg==", "bodyText": "ah, okay, seems to be https://youtrack.jetbrains.com/issue/IDEA-248146 then (fixed in the latest IDEA (rc?))", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477127236", "createdAt": "2020-08-26T08:29:27Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, "originalCommit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5ODEzNg==", "bodyText": "Yep, it's working now, and I've restored @AllArgsConstructor.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r478198136", "createdAt": "2020-08-27T06:58:01Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, "originalCommit": {"oid": "eec4ace8cc5965986ed705fc032288eef6243c42"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI3ODg3OnYy", "diffSide": "RIGHT", "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1NToyNFrOHA3yYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxOToxMDozNVrOHBNFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw==", "bodyText": "A TODO for a point in the near future. This has a lot to do with mandatory bring-your-own-image in R2DBC and JDBC URLs as discussed in Slack (@bsideup)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470676067", "createdAt": "2020-08-14T14:55:24Z", "author": {"login": "rnorth"}, "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNTA2Mw==", "bodyText": "I think I missed the Slack discussion, but just being pragmatic and make the constants packacke-private?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470825063", "createdAt": "2020-08-14T19:25:31Z", "author": {"login": "kiview"}, "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}, "originalCommit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDk2MA==", "bodyText": "Yeah, that's probably going to be the answer. This isn't something to worry about too much for now, anyway.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471024960", "createdAt": "2020-08-15T19:10:35Z", "author": {"login": "rnorth"}, "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}, "originalCommit": {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjEyNzc2OnYy", "diffSide": "LEFT", "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo1MToxNFrOHA_-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNToyNjo0MlrOHBLoug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA==", "bodyText": "Do we really un-deprecate the String constructors?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470810148", "createdAt": "2020-08-14T18:51:14Z", "author": {"login": "kiview"}, "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMTI3NA==", "bodyText": "I missed this - will look for others.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471001274", "createdAt": "2020-08-15T15:26:42Z", "author": {"login": "rnorth"}, "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjEzNTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo1Mzo1MFrOHBAC8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNTo0NVrOHD6CtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng==", "bodyText": "If we would return DockerImageName, we could use this method in super constructor arguments.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811376", "createdAt": "2020-08-14T18:53:50Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzc2Nw==", "bodyText": "I think I'd push back against this - it feels a bit strange to have a value be passed through a method that does assertion. I think I like the assertion being a distinct line in each constructor (after the call to super), as it feels more visible.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003767", "createdAt": "2020-08-15T15:34:30Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1ODc0MA==", "bodyText": "The JDK likes to object this argument of feeling strange \ud83d\ude42\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-\nBut this is not a hill I need to die on. I like it in super constructor though, because this means it gets evaluated before the super constructor is called.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473858740", "createdAt": "2020-08-20T10:25:45Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjEzNzg3OnYy", "diffSide": "RIGHT", "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo1NDo0M1rOHBAEfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTozNDozN1rOHBLyhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw==", "bodyText": "If assertCompatibleWith would return DockerImageName, we coould use it as argument for the super constructor.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811773", "createdAt": "2020-08-14T18:54:43Z", "author": {"login": "kiview"}, "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated\n     public MongoDBContainer(@NonNull final String dockerImageName) {\n         this(DockerImageName.parse(dockerImageName));\n     }\n \n     public MongoDBContainer(final DockerImageName dockerImageName) {\n         super(dockerImageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzc4MA==", "bodyText": "As above.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003780", "createdAt": "2020-08-15T15:34:37Z", "author": {"login": "rnorth"}, "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated\n     public MongoDBContainer(@NonNull final String dockerImageName) {\n         this(DockerImageName.parse(dockerImageName));\n     }\n \n     public MongoDBContainer(final DockerImageName dockerImageName) {\n         super(dockerImageName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjE0OTQwOnYy", "diffSide": "LEFT", "path": "modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo1ODo1NlrOHBALiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTozNjoxMFrOHBLy_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng==", "bodyText": "By which logic are the deprecations of constructors removed now? Seems kind of inconsistent between classes.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470813576", "createdAt": "2020-08-14T18:58:56Z", "author": {"login": "kiview"}, "path": "modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java", "diffHunk": "@@ -40,21 +43,19 @@\n     /**\n      * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n      */\n-    @Deprecated\n     public CassandraContainer() {\n-        this(\"cassandra:3.11.2\");\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzkwMQ==", "bodyText": "We were missing the deprecated annotation on CassandraContainer's no-arg constructor \ud83e\udd26\nThe logic should be:\n\nNo-arg constructors: always deprecated\nString, image name constructors: not deprecated\nString, version constructors: always deprecated", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003901", "createdAt": "2020-08-15T15:36:10Z", "author": {"login": "rnorth"}, "path": "modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java", "diffHunk": "@@ -40,21 +43,19 @@\n     /**\n      * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n      */\n-    @Deprecated\n     public CassandraContainer() {\n-        this(\"cassandra:3.11.2\");\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjE4OTA0OnYy", "diffSide": "RIGHT", "path": "modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOToxMjo1OFrOHBAj0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTozNzoxN1rOHBLzZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));\n          \n      \n    \n    \n  \n\nIs this constructor missing a test therefore?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470819792", "createdAt": "2020-08-14T19:12:58Z", "author": {"login": "kiview"}, "path": "modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java", "diffHunk": "@@ -35,20 +38,22 @@\n      */\n     @Deprecated\n     public KafkaContainer() {\n-        this(\"5.2.1\");\n+        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link KafkaContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public KafkaContainer(String confluentPlatformVersion) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getKafkaImage() + \":\" + confluentPlatformVersion));\n+        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDAwNA==", "bodyText": "Good spot - silly c&p error \ud83d\ude2c\nYes, this is missing test coverage. Will add.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004004", "createdAt": "2020-08-15T15:37:17Z", "author": {"login": "rnorth"}, "path": "modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java", "diffHunk": "@@ -35,20 +38,22 @@\n      */\n     @Deprecated\n     public KafkaContainer() {\n-        this(\"5.2.1\");\n+        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link KafkaContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public KafkaContainer(String confluentPlatformVersion) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getKafkaImage() + \":\" + confluentPlatformVersion));\n+        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjIzOTc5OnYy", "diffSide": "LEFT", "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMTo0MFrOHBBC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyNDozNlrOHXPUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA==", "bodyText": "I think we can't really remove this logic completely. Adding the -enterprise suffix to custom image is a bit weird, isn't it?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827758", "createdAt": "2020-08-14T19:31:40Z", "author": {"login": "kiview"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5ODE2OA==", "bodyText": "Yeah, I second the concern.\nIMO we should keep it as it was (override the image when withEnterpriseEdition() is called, and figure out the better strategy later", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r492098168", "createdAt": "2020-09-21T14:35:36Z", "author": {"login": "bsideup"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMzQwOA==", "bodyText": "OK \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r493003408", "createdAt": "2020-09-22T20:09:29Z", "author": {"login": "rnorth"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMDIxMg==", "bodyText": "Just pushed some commits to restore the previous behaviour. I think in the future we should indeed rethink how this works - if we're asking people to specify an image in the constructor it's silly to have the image being overriden here.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r494130212", "createdAt": "2020-09-24T08:24:36Z", "author": {"login": "rnorth"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI0MTQwOnYy", "diffSide": "RIGHT", "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMjoxNFrOHBBD3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMjoxNFrOHBBD3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzk5OA==", "bodyText": "In the current version of the code, standardImage is never read. But we should think what to do with withEnterpriseEdition() method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827998", "createdAt": "2020-08-14T19:32:14Z", "author": {"login": "kiview"}, "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -59,31 +57,36 @@\n \n     private String adminPassword = DEFAULT_ADMIN_PASSWORD;\n \n-    private boolean standardImage = false;\n+    private boolean standardImage = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI1MDc5OnYy", "diffSide": "LEFT", "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozNTo0MlrOHBBJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozNTo0MlrOHBBJQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyOTM3OA==", "bodyText": "This class was not really touched I suppose?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470829378", "createdAt": "2020-08-14T19:35:42Z", "author": {"login": "kiview"}, "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -41,10 +41,6 @@ public OracleContainer() {\n         this(resolveImageName());\n     }\n \n-    /**\n-     * @deprecated use {@link OracleContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI3MDkxOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0MzowN1rOHBBVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo0MzowN1rOHBBVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjQ2Nw==", "bodyText": "Shouldn't we move this code to after getting the capabilities?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470832467", "createdAt": "2020-08-14T19:43:07Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -182,8 +180,12 @@ protected void configure() {\n                     .withVncPort(VNC_PORT);\n         }\n \n-        if (!customImageNameIsSet) {\n-            super.setDockerImageName(getImageForCapabilities(capabilities, seleniumVersion));\n+        DockerImageName standardImageForCapabilities = getImageForCapabilities(capabilities, seleniumVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMxNDM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1OToyN1rOHBBvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTo1OToyN1rOHBBvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzOTE4NQ==", "bodyText": "Can we also add a comment that we just use this function to throw the exception in case of invalid input? I was wondering at first, why the return value is not used.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470839185", "createdAt": "2020-08-14T19:59:27Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -146,11 +162,12 @@ public String toString() {\n      * @throws IllegalArgumentException if not valid\n      */\n     public void assertValid() {\n+        //noinspection UnstableApiUsage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMzNDE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNzoxNlrOHBB7mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1MToxMFrOHD1OGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\n          \n          \n            \n                        throw new IllegalArgumentException(\n          \n      \n    \n    \n  \n\nWDYT?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470842267", "createdAt": "2020-08-14T20:07:16Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {\n+        if (!this.isCompatibleWith(other)) {\n+            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTczNg==", "bodyText": "Since it is assertCompatibleWith, I think IllegalArgumentException isn't fitting here, since the whole point is to assert the argument", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473779736", "createdAt": "2020-08-20T08:51:10Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {\n+        if (!this.isCompatibleWith(other)) {\n+            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM0NjQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxMTo1M1rOHBCDDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTo0NDozM1rOHBL1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg==", "bodyText": "@Value instead of @Data? Or @EqualsAndHashcode? Or we don't use lombok in the first plance, since we already define toString() and the constructor.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470844172", "createdAt": "2020-08-14T20:11:53Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDU4NA==", "bodyText": "@EqualsAndHashCode would do the trick - good suggestion.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004584", "createdAt": "2020-08-15T15:44:33Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @Data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM1Mzk0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxNDo0N1rOHBCHjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNTo0NzoyMlrOHBL2tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n          \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n          \n      \n    \n    \n  \n\nSince latest is default?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470845326", "createdAt": "2020-08-14T20:14:47Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDg1Mg==", "bodyText": "Ah, the intent here is to make sure that setting latest tag doesn't mess things up. I'll add a clarifying comment:\nfoo:1.2.3 != foo:4.5.6\nfoo:1.2.3 ~= foo\nfoo:1.2.3 ~= foo:latest\n\nThe test is effectively making sure that no tag and `latest` tag are equivalent", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004852", "createdAt": "2020-08-15T15:47:22Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM1ODc1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxNjozM1rOHBCKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzoyNzozOVrOHDv3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ==", "bodyText": "after my suggestion, this would be the same test as testLatestTreatedAsWildcard", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846075", "createdAt": "2020-08-14T20:16:33Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MjEwOA==", "bodyText": "Removed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473692108", "createdAt": "2020-08-20T07:27:39Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM2NDAyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxODozMFrOHBCNiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxODozMFrOHBCNiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0Njg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodAcceptsCompatible() {\n          \n          \n            \n                public void testAssertMethodAcceptsCompatible() {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846859", "createdAt": "2020-08-14T20:18:30Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjM2NDk3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxODo1M1rOHBCOJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1MTo1NVrOHDxqJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodRejectsIncompatible() {\n          \n          \n            \n                public void testAssertMethodRejectsIncompatible() {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470847012", "createdAt": "2020-08-14T20:18:53Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+        subject.assertCompatibleWith(DockerImageName.parse(\"bar\"));\n+    }\n+\n+    @Test\n+    public void testCheckMethodRejectsIncompatible() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyMTM4Mw==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473721383", "createdAt": "2020-08-20T07:51:55Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+        subject.assertCompatibleWith(DockerImageName.parse(\"bar\"));\n+    }\n+\n+    @Test\n+    public void testCheckMethodRejectsIncompatible() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg=="}, "originalCommit": {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTA0MDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTowNVrOHDyPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjowNDo0M1rOHNqUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA==", "bodyText": "tiny nit: if we import Versioning.Sha256Versioning and other Versioning.* classes, the changelog should be smaller :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473731008", "createdAt": "2020-08-20T07:59:05Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjA4OQ==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156089", "createdAt": "2020-08-26T09:15:31Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTExMg==", "bodyText": "@rnorth is it? \ud83d\ude05", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481051112", "createdAt": "2020-09-01T10:54:51Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4NjkwNQ==", "bodyText": "Oops, must have reverted it during moving the interface. Done again.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086905", "createdAt": "2020-09-06T16:04:43Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTA0NjY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzo1OTo1NFrOHDyUKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNToyOFrOHHDSqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg==", "bodyText": "marked as @Nullable while the field isn't", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473732136", "createdAt": "2020-08-20T07:59:54Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -103,11 +104,26 @@ public DockerImageName(String nameWithoutTag, @NotNull String version) {\n \n         if (version.startsWith(\"sha256:\")) {\n             repo = remoteName;\n-            versioning = new Sha256Versioning(version.replace(\"sha256:\", \"\"));\n+            versioning = new Versioning.Sha256Versioning(version.replace(\"sha256:\", \"\"));\n         } else {\n             repo = remoteName;\n-            versioning = new TagVersioning(version);\n+            versioning = new Versioning.TagVersioning(version);\n         }\n+\n+        compatibleSubstituteFor = null;\n+    }\n+\n+    private DockerImageName(String rawName,\n+                            String registry,\n+                            String repo,\n+                            @Nullable Versioning versioning,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjAxMQ==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156011", "createdAt": "2020-08-26T09:15:28Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -103,11 +104,26 @@ public DockerImageName(String nameWithoutTag, @NotNull String version) {\n \n         if (version.startsWith(\"sha256:\")) {\n             repo = remoteName;\n-            versioning = new Sha256Versioning(version.replace(\"sha256:\", \"\"));\n+            versioning = new Versioning.Sha256Versioning(version.replace(\"sha256:\", \"\"));\n         } else {\n             repo = remoteName;\n-            versioning = new TagVersioning(version);\n+            versioning = new Versioning.TagVersioning(version);\n         }\n+\n+        compatibleSubstituteFor = null;\n+    }\n+\n+    private DockerImageName(String rawName,\n+                            String registry,\n+                            String repo,\n+                            @Nullable Versioning versioning,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTA3MDQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowMzoyMFrOHDykMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjowNDowNlrOHNqUOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw==", "bodyText": "can we make versioning @NonNull and use Versioning.TagVersioning.LATEST if null is passed to @Nullable methods?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736243", "createdAt": "2020-08-20T08:03:20Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExNzkxNA==", "bodyText": "So, this is one that requires some discussion, and potentially a change or just clear docs!\nI'd expect most usage of this feature to be like foo.asCompatibleSubstituteFor(\"bar\") meaning bar with any tag is accepted.\nI wanted to leave the possibility open to specify an exact tag match, i.e. foo.asCompatibleSubstituteFor(\"bar:1.2.3\").\nSo that this works:\n\nan absent tag is recorded as null\nthe compatitility check code treats this null as a wildcard\nconversion to a string treats this null as an implicit latest\n\nIt doesn't have to be this way, though. I reckon we could:\n\nignore tags altogether for compatibility checks\nOR be more explicit about wildcards, e.g. foo.asCompatibleSubstituteFor(\"bar:*\") in the API, and/or have a Versioning.Wildcard type internally instead of null.\n\nWDYT?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477117914", "createdAt": "2020-08-26T08:15:03Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjE0Mw==", "bodyText": "have a Versioning.Wildcard type internally instead of null\n\nI like this one! My main concern was the Nullable field that we can avoid and I think Versioning.Wildcard solves the problem very well \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481052143", "createdAt": "2020-09-01T10:56:57Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4NjE0NQ==", "bodyText": "\ud83d\udc4d cool, I'll go with that then.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481086145", "createdAt": "2020-09-01T12:04:10Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4Njg0Mw==", "bodyText": "Done (called it AnyVersion)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086843", "createdAt": "2020-09-06T16:04:06Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTA3MjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowMzozNFrOHDylWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjowNDoxNVrOHNqUTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ==", "bodyText": "ditto re null vs Versioning.TagVersioning.LATEST", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736539", "createdAt": "2020-08-20T08:03:34Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + versioning.getSeparator() + versioning.toString();\n+        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4Njg2Mg==", "bodyText": "Done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086862", "createdAt": "2020-09-06T16:04:15Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + versioning.getSeparator() + versioning.toString();\n+        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTA5Mjg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowNjoxNFrOHDyy3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMzowNToxOVrOHHLHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA==", "bodyText": "Consider adding @With(AccessLevel.PRIVATE) to otherImageName, so that we can do:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n          \n          \n            \n                    return withOtherImageName(otherImageName);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473739998", "createdAt": "2020-08-20T08:06:14Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NDEwMA==", "bodyText": "Nice, this works well (same for withTag).\nN.B. I've upgraded the Lombok dependency so that we can use modern @With rather than deprecated @Wither", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477284100", "createdAt": "2020-08-26T13:05:19Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTA5ODMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODowNzoyM1rOHDy2dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1ODo1MFrOHKxJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA==", "bodyText": "WDYT about adding if (equals(other)) return true?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473740918", "createdAt": "2020-08-20T08:07:23Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNDIyOQ==", "bodyText": "It doesn't decrease the amount of code, as we still have to do some form of wildcarding on the tag, so I think I'm inclined to leave as-is right now.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477134229", "createdAt": "2020-08-26T08:40:34Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNTE1OQ==", "bodyText": "but if it is the same instance, we don't need to check anything, do we?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477135159", "createdAt": "2020-08-26T08:42:03Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTcyOA==", "bodyText": "Sorry, what I meant was that we can't get rid of these lines:\n\t\tfinal boolean thisRegistrySame = other.registry.equals(this.registry);\n        final boolean thisRepoSame = other.repo.equals(this.repo);\n        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n            other.versioning.equals(this.versioning);\n\n        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n            return true;\n        }\n\nbecause the version comparison is looser than what equals does.\nSo if we add an equals or == check first then yes, we could return from the method more quickly when there's a narrower match.\nBut we're not optimising for performance, so I'm not sure that we need to. i.e. if there's equality, the existing code still does the right thing.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477279728", "createdAt": "2020-08-26T12:58:39Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MzA1NA==", "bodyText": "Ok, we can keep it as is \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481053054", "createdAt": "2020-09-01T10:58:50Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTMyNzYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo0OTo1MFrOHD1JZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODoxMzozMFrOHQ2o8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ==", "bodyText": "idea: make compatibleSubstituteFor @NonNull, use SelfCompatible by default", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473778535", "createdAt": "2020-08-20T08:49:50Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNDQ4MA==", "bodyText": "I didn't really manage to make this work, or at least elegantly.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r487434480", "createdAt": "2020-09-12T18:13:30Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTM2MjE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1NjowOFrOHD1f6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNTo1OVrOHHDVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();;\n          \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473784298", "createdAt": "2020-08-20T08:56:08Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -37,7 +37,7 @@\n     private static File ENVIRONMENT_CONFIG_FILE = new File(System.getProperty(\"user.home\"), \".\" + PROPERTIES_FILE_NAME);\n \n     @Getter(lazy = true)\n-    private static final TestcontainersConfiguration instance = loadConfiguration();\n+    private static final TestcontainersConfiguration instance = loadConfiguration();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjczNA==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156734", "createdAt": "2020-08-26T09:15:59Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -37,7 +37,7 @@\n     private static File ENVIRONMENT_CONFIG_FILE = new File(System.getProperty(\"user.home\"), \".\" + PROPERTIES_FILE_NAME);\n \n     @Getter(lazy = true)\n-    private static final TestcontainersConfiguration instance = loadConfiguration();\n+    private static final TestcontainersConfiguration instance = loadConfiguration();;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTM4Mzc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTowMDowNVrOHD1tyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMjo1MDo0OVrOHHKi9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ==", "bodyText": "I just realized... when did we introduce DockerImageName getPulsarDockerImageName()?\nIf 1.15.0-rc1, maybe we should use the opportunity to remove module's images from TestcontainersConfiguration, and instead expose something like the current getImage that would allow any module to use the configuration mechanism?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473787851", "createdAt": "2020-08-20T09:00:05Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -129,29 +138,29 @@ public Integer getRyukTimeout() {\n \n     @Deprecated\n     public String getKafkaImage() {\n-        return String.valueOf(properties.getOrDefault(\"kafka.container.image\", \"confluentinc/cp-kafka\"));\n+        return getKafkaDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getKafkaDockerImageName() {\n-        return DockerImageName.parse(getKafkaImage());\n+        return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n     @Deprecated\n     public String getPulsarImage() {\n-        return String.valueOf(properties.getOrDefault(\"pulsar.container.image\", \"apachepulsar/pulsar\"));\n+        return getPulsarDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getPulsarDockerImageName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMDcxMg==", "bodyText": "It was 1.15.0-rc1 so yeah, we can do that.\n\nthat would allow any module to use the configuration mechanism?\n\nI'd be keen to still decrease reliance on TestcontainersConfiguration overall. I see it as an OK default image substitutor, but in the long term I'd like module classes to not call  TestcontainersConfiguration at all, and instead rely entirely on the image substitution mechanism.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477120712", "createdAt": "2020-08-26T08:19:35Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -129,29 +138,29 @@ public Integer getRyukTimeout() {\n \n     @Deprecated\n     public String getKafkaImage() {\n-        return String.valueOf(properties.getOrDefault(\"kafka.container.image\", \"confluentinc/cp-kafka\"));\n+        return getKafkaDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getKafkaDockerImageName() {\n-        return DockerImageName.parse(getKafkaImage());\n+        return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n     @Deprecated\n     public String getPulsarImage() {\n-        return String.valueOf(properties.getOrDefault(\"pulsar.container.image\", \"apachepulsar/pulsar\"));\n+        return getPulsarDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getPulsarDockerImageName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NDg2OQ==", "bodyText": "Actually, I don't think we need to do this. #3102 will:\n\nRip out all references from modules to TestcontainersConfiguration for obtaining an image name\nMake RemoteDockerImage use ImageNameSubstitutor to look up a substitute name, if set\nThe default implementation of ImageNameSubstitutor just defers to TestcontainersConfiguration (so that existing uses of props-file based substitution carry on working)\n\nIf we don't do this, and essentially keep TestcontainersConfiguration near the top of the stack, then I think it becomes a lot harder to swap in an alternative substitutor implementation without making every module (and GenericContainer) use TestcontainersConfiguration.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477274869", "createdAt": "2020-08-26T12:50:49Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -129,29 +138,29 @@ public Integer getRyukTimeout() {\n \n     @Deprecated\n     public String getKafkaImage() {\n-        return String.valueOf(properties.getOrDefault(\"kafka.container.image\", \"confluentinc/cp-kafka\"));\n+        return getKafkaDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getKafkaDockerImageName() {\n-        return DockerImageName.parse(getKafkaImage());\n+        return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n     @Deprecated\n     public String getPulsarImage() {\n-        return String.valueOf(properties.getOrDefault(\"pulsar.container.image\", \"apachepulsar/pulsar\"));\n+        return getPulsarDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getPulsarDockerImageName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTM5MDg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTowMTozM1rOHD1ykg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxNjowNFrOHHDWDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA==", "bodyText": "nit: should we move it before the non-static class members?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473789074", "createdAt": "2020-08-20T09:01:33Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @EqualsAndHashCode\n+    class TagVersioning implements Versioning {\n+        public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n+        private final String tag;\n+\n+        TagVersioning(String tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public boolean isValid() {\n+            return tag.matches(TAG_REGEX);\n+        }\n+\n+        @Override\n+        public String getSeparator() {\n+            return \":\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return tag;\n+        }\n+\n+        static final TagVersioning LATEST = new TagVersioning(\"latest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1Njg3Nw==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156877", "createdAt": "2020-08-26T09:16:04Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @EqualsAndHashCode\n+    class TagVersioning implements Versioning {\n+        public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n+        private final String tag;\n+\n+        TagVersioning(String tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public boolean isValid() {\n+            return tag.matches(TAG_REGEX);\n+        }\n+\n+        @Override\n+        public String getSeparator() {\n+            return \":\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return tag;\n+        }\n+\n+        static final TagVersioning LATEST = new TagVersioning(\"latest\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTQ1NDkyOnYy", "diffSide": "RIGHT", "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOToxNDozNVrOHD2b-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODo1OTo0OVrOHHCsPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA==", "bodyText": "this is an interesting edge case. Ideally, both images should we treated as compatible automatically. WDYT?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473799674", "createdAt": "2020-08-20T09:14:35Z", "author": {"login": "bsideup"}, "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "diffHunk": "@@ -101,6 +101,7 @@ public void elasticsearchOssImage() throws IOException {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n+                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMTEwNw==", "bodyText": "Good suggestion - will have a try.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477121107", "createdAt": "2020-08-26T08:20:13Z", "author": {"login": "rnorth"}, "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "diffHunk": "@@ -101,6 +101,7 @@ public void elasticsearchOssImage() throws IOException {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n+                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjE3Mw==", "bodyText": "I've modified assertCompatibleWith to accept a varargs array of DockerImageNames, and I think this works a lot better.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477146173", "createdAt": "2020-08-26T08:59:49Z", "author": {"login": "rnorth"}, "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "diffHunk": "@@ -101,6 +101,7 @@ public void elasticsearchOssImage() throws IOException {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n+                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTQ4OTQxOnYy", "diffSide": "RIGHT", "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOToyMToyOVrOHD2xvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMjo0N1rOHHDp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ==", "bodyText": "heads up: making it static would create false positives since #testKafkaFunctionality uses the same topic name / message that it asserts.\nLet's change the topic name in #testKafkaFunctionality to something with random in it", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473805245", "createdAt": "2020-08-20T09:21:29Z", "author": {"login": "bsideup"}, "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -29,8 +29,8 @@\n     private static final DockerImageName ZOOKEEPER_TEST_IMAGE = DockerImageName.parse(\"confluentinc/cp-zookeeper:4.0.0\");\n \n     // junitRule {\n-    @Rule\n-    public KafkaContainer kafka = new KafkaContainer();\n+    @ClassRule\n+    public static KafkaContainer kafka = new KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:5.2.1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTk4Mg==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477161982", "createdAt": "2020-08-26T09:22:47Z", "author": {"login": "rnorth"}, "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -29,8 +29,8 @@\n     private static final DockerImageName ZOOKEEPER_TEST_IMAGE = DockerImageName.parse(\"confluentinc/cp-zookeeper:4.0.0\");\n \n     // junitRule {\n-    @Rule\n-    public KafkaContainer kafka = new KafkaContainer();\n+    @ClassRule\n+    public static KafkaContainer kafka = new KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:5.2.1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTU0Mjg4OnYy", "diffSide": "RIGHT", "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozMjoyMVrOHD3Ung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMjo1NlrOHHDqYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA==", "bodyText": "See #3128\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withNetwork(kafka.getNetwork())\n          \n          \n            \n                            .withNetwork(network)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814174", "createdAt": "2020-08-20T09:32:21Z", "author": {"login": "bsideup"}, "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -75,7 +86,8 @@ public void testExternalZookeeperWithExternalNetwork() throws Exception {\n                 .withEnv(\"ZOOKEEPER_CLIENT_PORT\", \"2181\");\n \n             // withKafkaNetwork {\n-            GenericContainer application = new GenericContainer(\"alpine\").withNetwork(kafka.getNetwork())\n+            GenericContainer application = new GenericContainer(\"alpine\")\n+                .withNetwork(kafka.getNetwork())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjA4MA==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162080", "createdAt": "2020-08-26T09:22:56Z", "author": {"login": "rnorth"}, "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -75,7 +86,8 @@ public void testExternalZookeeperWithExternalNetwork() throws Exception {\n                 .withEnv(\"ZOOKEEPER_CLIENT_PORT\", \"2181\");\n \n             // withKafkaNetwork {\n-            GenericContainer application = new GenericContainer(\"alpine\").withNetwork(kafka.getNetwork())\n+            GenericContainer application = new GenericContainer(\"alpine\")\n+                .withNetwork(kafka.getNetwork())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTU0Njc4OnYy", "diffSide": "RIGHT", "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozMzoxNFrOHD3XTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMzowOFrOHHDqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814863", "createdAt": "2020-08-20T09:33:14Z", "author": {"login": "bsideup"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -58,15 +64,15 @@\n      */\n     @Deprecated\n     public LocalStackContainer() {\n-        this(VERSION);\n+        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link LocalStackContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public LocalStackContainer(String version) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getLocalStackImage() + \":\" + version));\n+        this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjE4MA==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162180", "createdAt": "2020-08-26T09:23:08Z", "author": {"login": "rnorth"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -58,15 +64,15 @@\n      */\n     @Deprecated\n     public LocalStackContainer() {\n-        this(VERSION);\n+        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link LocalStackContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public LocalStackContainer(String version) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getLocalStackImage() + \":\" + version));\n+        this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTU2NjQyOnYy", "diffSide": "RIGHT", "path": "modules/neo4j/src/test/resources/.gitignore", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwOTozNzowMFrOHD3kNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyMzo1NFrOHHDspg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA==", "bodyText": "uh? Does it get created here? (e.g. by tests)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473818164", "createdAt": "2020-08-20T09:37:00Z", "author": {"login": "bsideup"}, "path": "modules/neo4j/src/test/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+container-license-acceptance.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMTcyNQ==", "bodyText": "I... do not know where this diff came from \ud83d\ude2c\nWill remove!", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477121725", "createdAt": "2020-08-26T08:21:17Z", "author": {"login": "rnorth"}, "path": "modules/neo4j/src/test/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+container-license-acceptance.txt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjY2Mg==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162662", "createdAt": "2020-08-26T09:23:54Z", "author": {"login": "rnorth"}, "path": "modules/neo4j/src/test/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+container-license-acceptance.txt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTY5Mzk2OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowMTo1NFrOHD42PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToxMzoyNlrOHHDLew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA==", "bodyText": "the same as with Elasticsearch - we may need to be able to verify the compatibility with multiple images", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473839164", "createdAt": "2020-08-20T10:01:54Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java", "diffHunk": "@@ -8,7 +8,9 @@\n \n public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n-    private static final DockerImageName FIREFOX_IMAGE = DockerImageName.parse(\"selenium/standalone-firefox:2.53.1-beryllium\");\n+    private static final DockerImageName FIREFOX_IMAGE = DockerImageName\n+        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\")\n+        .asCompatibleSubstituteFor(\"selenium/standalone-firefox-debug\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NDE3MQ==", "bodyText": "Yep, have replaced this by something more elegant within BrowserWebDriverContainer", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477154171", "createdAt": "2020-08-26T09:13:26Z", "author": {"login": "rnorth"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java", "diffHunk": "@@ -8,7 +8,9 @@\n \n public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n-    private static final DockerImageName FIREFOX_IMAGE = DockerImageName.parse(\"selenium/standalone-firefox:2.53.1-beryllium\");\n+    private static final DockerImageName FIREFOX_IMAGE = DockerImageName\n+        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\")\n+        .asCompatibleSubstituteFor(\"selenium/standalone-firefox-debug\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA=="}, "originalCommit": {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDU4MzUwOnYy", "diffSide": "RIGHT", "path": "modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzo1M1rOHiuhBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODozNzo1M1rOHiuhBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTc0OA==", "bodyText": "I'm wondering if we could make this static constant public so people can simply do something like:\nnew ElasticsearchContainer(ElasticsearchContainer.DEFAULT_IMAGE_NAME.withTag(\"7.9.2\"));", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r506175748", "createdAt": "2020-10-16T08:37:53Z", "author": {"login": "dadoonet"}, "path": "modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java", "diffHunk": "@@ -28,35 +27,41 @@\n     private static final int ELASTICSEARCH_DEFAULT_TCP_PORT = 9300;\n \n     /**\n-     * Elasticsearch Docker base URL\n+     * Elasticsearch Docker base image\n      */\n-    private static final String ELASTICSEARCH_DEFAULT_IMAGE = \"docker.elastic.co/elasticsearch/elasticsearch\";\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"docker.elastic.co/elasticsearch/elasticsearch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1f48347612c05f5eac54876cea4529f16d195"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1459, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}