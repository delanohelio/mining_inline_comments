{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTgwNDg2", "number": 2985, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo1MDowNVrOEM_xOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MDo0OVrOEN8UJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDYzMTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo1MDowNVrOGvbqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo1MDowNVrOGvbqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4OTQyNw==", "bodyText": "Slightly pedantic point, but I'm assuming we'll have to make the 1000 reflect the current user's uid. I guess this may become more necessary once testing rootless with cloud CI.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452389427", "createdAt": "2020-07-09T17:50:05Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.testcontainers.dockerclient;\n+\n+import org.apache.commons.lang.SystemUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ *\n+ * @deprecated this class is used by the SPI and should not be used directly\n+ */\n+@Deprecated\n+public final class RootlessDockerClientProviderStrategy extends DockerClientProviderStrategy {\n+    protected static final String DOCKER_SOCK_PATH = \"/run/user/1000/docker.sock\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00b6437822678c928fd2952395c1162687787e20"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDYzNzIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/ResourceReaper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo1MTo0OFrOGvbt0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1ODoyNFrOGvxfhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDM1Mw==", "bodyText": "I'd be inclined to add a new method to the TransportConfig object to perform this logic.\nI'll start that change in #1771, as it's going to be necessary there, but FYI.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452390353", "createdAt": "2020-07-09T17:51:48Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/ResourceReaper.java", "diffHunk": "@@ -70,13 +74,34 @@ private ResourceReaper() {\n         dockerClient = DockerClientFactory.instance().client();\n     }\n \n-    @SneakyThrows(InterruptedException.class)\n+    /**\n+     *\n+     * @deprecated not for public usage\n+     */\n+    @Deprecated\n     public static String start(String hostIpAddress, DockerClient client) {\n+        return start(hostIpAddress, client, null);\n+    }\n+\n+    /**\n+     *\n+     * @deprecated not for public usage\n+     */\n+    @Deprecated\n+    @SneakyThrows(InterruptedException.class)\n+    public static String start(String hostIpAddress, DockerClient client, @Nullable TransportConfig transportConfig) {\n         String ryukImage = TestcontainersConfiguration.getInstance().getRyukImage();\n         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);\n \n+        String socketPath = \"//var/run/docker.sock\";\n+        if (transportConfig != null) {\n+            URI dockerHost = transportConfig.getDockerHost();\n+            if (\"unix\".equals(dockerHost.getScheme())) {\n+                socketPath = dockerHost.getRawPath();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00b6437822678c928fd2952395c1162687787e20"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1MTcxMA==", "bodyText": "@rnorth I am not sure whether this logic belongs to TransportConfig. Could you please elaborate why you want it there? :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452651710", "createdAt": "2020-07-10T06:43:20Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/ResourceReaper.java", "diffHunk": "@@ -70,13 +74,34 @@ private ResourceReaper() {\n         dockerClient = DockerClientFactory.instance().client();\n     }\n \n-    @SneakyThrows(InterruptedException.class)\n+    /**\n+     *\n+     * @deprecated not for public usage\n+     */\n+    @Deprecated\n     public static String start(String hostIpAddress, DockerClient client) {\n+        return start(hostIpAddress, client, null);\n+    }\n+\n+    /**\n+     *\n+     * @deprecated not for public usage\n+     */\n+    @Deprecated\n+    @SneakyThrows(InterruptedException.class)\n+    public static String start(String hostIpAddress, DockerClient client, @Nullable TransportConfig transportConfig) {\n         String ryukImage = TestcontainersConfiguration.getInstance().getRyukImage();\n         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);\n \n+        String socketPath = \"//var/run/docker.sock\";\n+        if (transportConfig != null) {\n+            URI dockerHost = transportConfig.getDockerHost();\n+            if (\"unix\".equals(dockerHost.getScheme())) {\n+                socketPath = dockerHost.getRawPath();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDM1Mw=="}, "originalCommit": {"oid": "00b6437822678c928fd2952395c1162687787e20"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzE0Mw==", "bodyText": "In practice I'm not finding it fits there either \ud83d\ude04\nThe strategy class works better", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452747143", "createdAt": "2020-07-10T09:58:24Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/ResourceReaper.java", "diffHunk": "@@ -70,13 +74,34 @@ private ResourceReaper() {\n         dockerClient = DockerClientFactory.instance().client();\n     }\n \n-    @SneakyThrows(InterruptedException.class)\n+    /**\n+     *\n+     * @deprecated not for public usage\n+     */\n+    @Deprecated\n     public static String start(String hostIpAddress, DockerClient client) {\n+        return start(hostIpAddress, client, null);\n+    }\n+\n+    /**\n+     *\n+     * @deprecated not for public usage\n+     */\n+    @Deprecated\n+    @SneakyThrows(InterruptedException.class)\n+    public static String start(String hostIpAddress, DockerClient client, @Nullable TransportConfig transportConfig) {\n         String ryukImage = TestcontainersConfiguration.getInstance().getRyukImage();\n         DockerClientFactory.instance().checkAndPullImage(client, ryukImage);\n \n+        String socketPath = \"//var/run/docker.sock\";\n+        if (transportConfig != null) {\n+            URI dockerHost = transportConfig.getDockerHost();\n+            if (\"unix\".equals(dockerHost.getScheme())) {\n+                socketPath = dockerHost.getRawPath();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MDM1Mw=="}, "originalCommit": {"oid": "00b6437822678c928fd2952395c1162687787e20"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzYyNTMzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/containers/GenericContainerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo0NTo0MVrOGv3-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozOTowNFrOGw1AkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MzI3Nw==", "bodyText": "\ud83d\ude02 for our tests, could we do this using the host socket URI?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452853277", "createdAt": "2020-07-10T13:45:41Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/containers/GenericContainerTest.java", "diffHunk": "@@ -21,6 +24,9 @@\n \n     @Test\n     public void shouldReportOOMAfterWait() {\n+        Info info = DockerClientFactory.instance().client().infoCmd().exec();\n+        // Poor man's rootless Docker detection :D", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9c21e8f608c2d641aa94a1e6ba60d3323d1f12"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1NDA2MA==", "bodyText": "I didn't want to do string matching, especially given that the feature is experimental and may change the socket location.\nApparently, Docker returns rootless security capability from the info endpoint, just docker-java does not expose it (yet). I will add it to docker-java, so that we can remove this workaround, okay? :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453354060", "createdAt": "2020-07-12T19:28:51Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/containers/GenericContainerTest.java", "diffHunk": "@@ -21,6 +24,9 @@\n \n     @Test\n     public void shouldReportOOMAfterWait() {\n+        Info info = DockerClientFactory.instance().client().infoCmd().exec();\n+        // Poor man's rootless Docker detection :D", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MzI3Nw=="}, "originalCommit": {"oid": "fb9c21e8f608c2d641aa94a1e6ba60d3323d1f12"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MzMyOQ==", "bodyText": "Cool, I was wondering if that would be the case. Let's not hold up this PR for the change in docker-java, though - it's OK as-is.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453853329", "createdAt": "2020-07-13T18:39:04Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/containers/GenericContainerTest.java", "diffHunk": "@@ -21,6 +24,9 @@\n \n     @Test\n     public void shouldReportOOMAfterWait() {\n+        Info info = DockerClientFactory.instance().client().infoCmd().exec();\n+        // Poor man's rootless Docker detection :D", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MzI3Nw=="}, "originalCommit": {"oid": "fb9c21e8f608c2d641aa94a1e6ba60d3323d1f12"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzY3ODYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1OTo1OFrOGv4f9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDoxMDoxOVrOGwWybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MTk0MA==", "bodyText": "Do we want this to be the highest priority? I'd put this lower than UnixSocketClientProviderStrategy, at least after #1771 is merged (so that DOCKER_HOST is always respected, non-rootless-docker is tried first, and automatically configured rootless docker is tried last of all)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452861940", "createdAt": "2020-07-10T13:59:58Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.testcontainers.dockerclient;\n+\n+import com.sun.jna.Library;\n+import com.sun.jna.Native;\n+import org.apache.commons.lang.SystemUtils;\n+\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ *\n+ * @deprecated this class is used by the SPI and should not be used directly\n+ */\n+@Deprecated\n+public final class RootlessDockerClientProviderStrategy extends DockerClientProviderStrategy {\n+\n+    public static final int PRIORITY = EnvironmentAndSystemPropertyClientProviderStrategy.PRIORITY + 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9c21e8f608c2d641aa94a1e6ba60d3323d1f12"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NDkxNg==", "bodyText": "I didn't want rootless DOCKER_HOST to take precedence (because we need to override the host ip) but yeah, I see what you mean.\nI will make it have lower priority, but ensure that EnvAndSysPropsStrategy does not detect rootless host that easily", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r452864916", "createdAt": "2020-07-10T14:05:08Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.testcontainers.dockerclient;\n+\n+import com.sun.jna.Library;\n+import com.sun.jna.Native;\n+import org.apache.commons.lang.SystemUtils;\n+\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ *\n+ * @deprecated this class is used by the SPI and should not be used directly\n+ */\n+@Deprecated\n+public final class RootlessDockerClientProviderStrategy extends DockerClientProviderStrategy {\n+\n+    public static final int PRIORITY = EnvironmentAndSystemPropertyClientProviderStrategy.PRIORITY + 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MTk0MA=="}, "originalCommit": {"oid": "fb9c21e8f608c2d641aa94a1e6ba60d3323d1f12"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM1ODE4OQ==", "bodyText": "update:\nwith overridable host, it is no longer a problem when EnvAndSysPropsStrategy detects the rootless DOCKER_HOST", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453358189", "createdAt": "2020-07-12T20:10:19Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/dockerclient/RootlessDockerClientProviderStrategy.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.testcontainers.dockerclient;\n+\n+import com.sun.jna.Library;\n+import com.sun.jna.Native;\n+import org.apache.commons.lang.SystemUtils;\n+\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ *\n+ * @deprecated this class is used by the SPI and should not be used directly\n+ */\n+@Deprecated\n+public final class RootlessDockerClientProviderStrategy extends DockerClientProviderStrategy {\n+\n+    public static final int PRIORITY = EnvironmentAndSystemPropertyClientProviderStrategy.PRIORITY + 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2MTk0MA=="}, "originalCommit": {"oid": "fb9c21e8f608c2d641aa94a1e6ba60d3323d1f12"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU0ODMzOnYy", "diffSide": "RIGHT", "path": "docs/features/configuration.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MDowMVrOGw1Cyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDozNjoyNlrOGw45TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1Mzg5OA==", "bodyText": "Could we make these match the format of other configuration settings, where we show what the default value is?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453853898", "createdAt": "2020-07-13T18:40:01Z", "author": {"login": "rnorth"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -72,3 +72,15 @@ but does not allow starting privileged containers, you can turn off the Ryuk con\n \n > **pull.pause.timeout = 30**\n > By default Testcontainers will abort the pull of an image if the pull appears stalled (no data transferred) for longer than this duration (in seconds).\n+\n+## Customizing Docker host detection\n+\n+Testcontainers will attempt to detect the Docker environment and configure everything.\n+\n+However, sometimes a customization is required. For that, you can provide the following environment variables:\n+\n+> **TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE = /var/run/docker-alt.sock**  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ffae3b5c5d0984dace5d68273b030545ce9f97"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkxNzAwNQ==", "bodyText": "We could, but there is no default value, so I am not sure what to use :D", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453917005", "createdAt": "2020-07-13T20:36:26Z", "author": {"login": "bsideup"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -72,3 +72,15 @@ but does not allow starting privileged containers, you can turn off the Ryuk con\n \n > **pull.pause.timeout = 30**\n > By default Testcontainers will abort the pull of an image if the pull appears stalled (no data transferred) for longer than this duration (in seconds).\n+\n+## Customizing Docker host detection\n+\n+Testcontainers will attempt to detect the Docker environment and configure everything.\n+\n+However, sometimes a customization is required. For that, you can provide the following environment variables:\n+\n+> **TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE = /var/run/docker-alt.sock**  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1Mzg5OA=="}, "originalCommit": {"oid": "b9ffae3b5c5d0984dace5d68273b030545ce9f97"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDU1MTQxOnYy", "diffSide": "RIGHT", "path": "docs/features/configuration.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODo0MDo0OVrOGw1EpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDo0NDoxOVrOGw5J5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDM3Mw==", "bodyText": "If we're saying this, should we (for completeness) mention DOCKER_HOST?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453854373", "createdAt": "2020-07-13T18:40:49Z", "author": {"login": "rnorth"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -72,3 +72,15 @@ but does not allow starting privileged containers, you can turn off the Ryuk con\n \n > **pull.pause.timeout = 30**\n > By default Testcontainers will abort the pull of an image if the pull appears stalled (no data transferred) for longer than this duration (in seconds).\n+\n+## Customizing Docker host detection\n+\n+Testcontainers will attempt to detect the Docker environment and configure everything.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9ffae3b5c5d0984dace5d68273b030545ce9f97"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkyMTI1NQ==", "bodyText": "Added \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/2985#discussion_r453921255", "createdAt": "2020-07-13T20:44:19Z", "author": {"login": "bsideup"}, "path": "docs/features/configuration.md", "diffHunk": "@@ -72,3 +72,15 @@ but does not allow starting privileged containers, you can turn off the Ryuk con\n \n > **pull.pause.timeout = 30**\n > By default Testcontainers will abort the pull of an image if the pull appears stalled (no data transferred) for longer than this duration (in seconds).\n+\n+## Customizing Docker host detection\n+\n+Testcontainers will attempt to detect the Docker environment and configure everything.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1NDM3Mw=="}, "originalCommit": {"oid": "b9ffae3b5c5d0984dace5d68273b030545ce9f97"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1475, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}