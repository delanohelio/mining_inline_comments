{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjA1MTgy", "number": 2825, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1MDoyNFrOEDFAjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1MToxN1rOEDFCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYzMjQ0OnYy", "diffSide": "RIGHT", "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1MDoyNFrOGf7U0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjowNTozOVrOGgF5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMTAyNQ==", "bodyText": "FYI we have a utility class (ComparableVersion) for parsing and comparing version strings. It's probably going to be more reliable than a regex - please could we use that?\nAlso, there's a slight risk that people may want to use their own custom Localstack image, which could have a completely different form of tag. While I think it's unlikely that this would cause a problem, please could we at least have some logging at time of container startup to give some clues about what's going to happen?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2825#discussion_r436131025", "createdAt": "2020-06-05T19:50:24Z", "author": {"login": "rnorth"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -141,12 +150,16 @@ public URI getEndpointOverride(Service service) {\n             return new URI(\"http://\" +\n                 ipAddress +\n                 \":\" +\n-                getMappedPort(service.getPort()));\n+                getMappedPort(getServicePort(service)));\n         } catch (UnknownHostException | URISyntaxException e) {\n             throw new IllegalStateException(\"Cannot obtain endpoint URL\", e);\n         }\n     }\n \n+    private int getServicePort(Service service) {\n+        return version.matches(BEFORE_0_11) ? service.port : PORT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92dd5abcfa391a3911f9385f9a65e9055bdb6774"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDI0NA==", "bodyText": "Hi, @rnorth\nThanks for your comment.\n\nUse ComparableVersion - \u2705 (although I have to add isSemanticVersion method there.\nI've added a warning message if the tag is not \"latest\" or a semantic version and the code will fall back to the \"legacy\" mode.\nI've grouped the tests regarding legacy mode into a single class and added some extra test cases.\nI've added an explicit constructor with the \"legacy mode\" flag - just in case.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2825#discussion_r436304244", "createdAt": "2020-06-06T22:05:39Z", "author": {"login": "artamonovkirill"}, "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -141,12 +150,16 @@ public URI getEndpointOverride(Service service) {\n             return new URI(\"http://\" +\n                 ipAddress +\n                 \":\" +\n-                getMappedPort(service.getPort()));\n+                getMappedPort(getServicePort(service)));\n         } catch (UnknownHostException | URISyntaxException e) {\n             throw new IllegalStateException(\"Cannot obtain endpoint URL\", e);\n         }\n     }\n \n+    private int getServicePort(Service service) {\n+        return version.matches(BEFORE_0_11) ? service.port : PORT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMTAyNQ=="}, "originalCommit": {"oid": "92dd5abcfa391a3911f9385f9a65e9055bdb6774"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjYzNzA4OnYy", "diffSide": "RIGHT", "path": "modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackLegacyContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1MToxN1rOGf7Xdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1MToxN1rOGf7Xdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMTcwMg==", "bodyText": "\ud83d\ude47\u200d\u2642\ufe0f thanks for adding this test class as well.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2825#discussion_r436131702", "createdAt": "2020-06-05T19:51:17Z", "author": {"login": "rnorth"}, "path": "modules/localstack/src/test/java/org/testcontainers/containers/localstack/LocalstackLegacyContainerTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.testcontainers.containers.localstack;\n+\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertNotEquals;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+import static org.testcontainers.containers.localstack.LocalStackContainer.Service.S3;\n+import static org.testcontainers.containers.localstack.LocalStackContainer.Service.SQS;\n+\n+public class LocalstackLegacyContainerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92dd5abcfa391a3911f9385f9a65e9055bdb6774"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1498, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}