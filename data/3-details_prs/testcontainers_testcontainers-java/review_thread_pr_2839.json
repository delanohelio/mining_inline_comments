{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NTAwNzE3", "number": 2839, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxNTo0OFrOEC_uWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMDoxMjoxMVrOEPyXjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc2NjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/FixedHostPortGenericContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxNTo0OFrOGfyrRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTozNTo0MVrOGfzbDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4OTMxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             */\n          \n          \n            \n            public class FixedHostPortGenericContainer<SELF extends FixedHostPortGenericContainer<SELF>> extends GenericContainer<SELF> {\n          \n          \n            \n                @Deprecated\n          \n          \n            \n             */\n          \n          \n            \n            @Deprecated\n          \n          \n            \n            public class FixedHostPortGenericContainer<SELF extends FixedHostPortGenericContainer<SELF>> extends GenericContainer<SELF> {\n          \n      \n    \n    \n  \n\n\ud83d\ude02 \ud83d\ude02 \ud83d\ude02", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r435989319", "createdAt": "2020-06-05T15:15:48Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/FixedHostPortGenericContainer.java", "diffHunk": "@@ -12,6 +12,7 @@\n  * not available - which could manifest as flaky or unstable tests.</p>\n  */\n public class FixedHostPortGenericContainer<SELF extends FixedHostPortGenericContainer<SELF>> extends GenericContainer<SELF> {\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwMTU1MA==", "bodyText": "Deprecated without replacement - because it's evil.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r436001550", "createdAt": "2020-06-05T15:35:41Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/FixedHostPortGenericContainer.java", "diffHunk": "@@ -12,6 +12,7 @@\n  * not available - which could manifest as flaky or unstable tests.</p>\n  */\n public class FixedHostPortGenericContainer<SELF extends FixedHostPortGenericContainer<SELF>> extends GenericContainer<SELF> {\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4OTMxOQ=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc3MTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToxNzowM1rOGfyuQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowODoyOFrOGsuVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg==", "bodyText": "what about GenericContainer(Future)? Since it can be replaced with new GenericContainer(new RemoteDockerImage(future))", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r435990082", "createdAt": "2020-06-05T15:17:03Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNzM1Nw==", "bodyText": "Ooh, interesting suggestion - I'll explore that.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r436137357", "createdAt": "2020-06-05T19:59:37Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1ODA1Ng==", "bodyText": "I've not done this yet.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449058056", "createdAt": "2020-07-02T14:50:16Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MDk4Ng==", "bodyText": "I've had a quick try, but I'm not sure about this.\nThis example from existing code:\nnew GenericContainer(new ImageFromDockerfile() ...\n\nwould become\nnew GenericContainer(new RemoteDockerImage(new ImageFromDockerfile() ...\n\nwhich I think is quite ugly - it's really not a 'remote docker image', so naming-wise it's a bit of a stretch.\nI wonder if, really, the way to make this work would be to rename RemoteDockerImage to FutureDockerImageName, which more accurately reflects what it's used for. So the example would become:\nnew GenericContainer(new FutureDockerImageName(new ImageFromDockerfile() ...\n\nWe'd of course keep RemoteDockerImage around, deprecated, as no more than an alias to FutureDockerImageName.\nTwo problems I see with this that I don't think we can magic away. I think I could live with these:\n\nthe three levels of constructors involved are a bit clunky, but it's not a big deal\nit's such as shame that type erasure prevents us from overloading the GenericContainer(Future<String>) constructor, because otherwise FutureDockerImageName could just be Future<DockerImageName> \ud83d\ude02  \ud83d\ude2d", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449460986", "createdAt": "2020-07-03T08:48:53Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NTUzMQ==", "bodyText": "Yeah, I agree that \"Remote\" is misleading here.\nBut the example you provided made me think whether we should even wrap ImageFromDockerfile with RemoteDockerImage, since it is definitely local, does not need an auth resolve, etc etc...\nwhat if we extract a common interface from RemoteDockerImage and make ImageFromDockerfile implement it?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449465531", "createdAt": "2020-07-03T08:57:34Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MTc3Mw==", "bodyText": "With the interface being DockerImage?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449481773", "createdAt": "2020-07-03T09:29:18Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0OTc1OQ==", "bodyText": "As discussed on Slack, we'll defer this to a separate PR.\nIt feels like more extensive and complicated changes are needed to refactor the Remote/Future images code, and I feel it would be sensible to not add that complexity on top of this, already massive, PR.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449549759", "createdAt": "2020-07-03T12:08:28Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/GenericContainer.java", "diffHunk": "@@ -241,10 +242,16 @@\n     @Setter(AccessLevel.NONE)\n     private boolean shouldBeReused = false;\n \n+    @Deprecated\n     public GenericContainer() {\n         this(TestcontainersConfiguration.getInstance().getTinyImage());\n     }\n \n+    public GenericContainer(DockerImageName dockerImageName) {\n+        this.image = new RemoteDockerImage(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MDA4Mg=="}, "originalCommit": {"oid": "b60d19c8eefa330fe5549513cf843fc11ea7481d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTM5NzU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNjoxOTo0OVrOGsUupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOToyNzo1MVrOGsqJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMDE1MA==", "bodyText": "I always get a strange feeling when toString() is used outside of a context of e.g. logging or being a human-readable presentation.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449130150", "createdAt": "2020-07-02T16:19:49Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -55,7 +55,7 @@\n             TESTCONTAINERS_SESSION_ID_LABEL, SESSION_ID\n     );\n \n-    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyImage();\n+    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyDockerImageName().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa94289f1b3d69548a39c818329e7cb368d1754f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MTkwMQ==", "bodyText": "Yeah, TBH I had a slight feeling of discomfort writing it. I think I\u2019ll change it.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449261901", "createdAt": "2020-07-02T20:56:06Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -55,7 +55,7 @@\n             TESTCONTAINERS_SESSION_ID_LABEL, SESSION_ID\n     );\n \n-    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyImage();\n+    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyDockerImageName().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMDE1MA=="}, "originalCommit": {"oid": "aa94289f1b3d69548a39c818329e7cb368d1754f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MTA4Nw==", "bodyText": "Oh, the new one is much better! I struggled to find a good method name, but I think canonicalName works pretty good :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449481087", "createdAt": "2020-07-03T09:27:51Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/DockerClientFactory.java", "diffHunk": "@@ -55,7 +55,7 @@\n             TESTCONTAINERS_SESSION_ID_LABEL, SESSION_ID\n     );\n \n-    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyImage();\n+    private static final String TINY_IMAGE = TestcontainersConfiguration.getInstance().getTinyDockerImageName().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTEzMDE1MA=="}, "originalCommit": {"oid": "aa94289f1b3d69548a39c818329e7cb368d1754f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY4NTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozMjo1N1rOGsqTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwODoxNTo1NlrOGs6q-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MzUzMA==", "bodyText": "Just thinking... what if we keep the default constructors in \"utility\" classes like this one, where the users do not / should not care about the version used? it is a bit contradictory to the idea of this whole change, but I think a few exceptions can be made", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449483530", "createdAt": "2020-07-03T09:32:57Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -15,8 +16,16 @@\n \n     private final Map<Integer, String> targets = new HashMap<>();\n \n+    /**\n+     * @deprecated use {@link SocatContainer(DockerImageName)} instead\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MDc5Nw==", "bodyText": "Yeah, I was thinking the same. If these had not been essentially in our public API it would have been a no-brainer.\nBut I'm fine with doing it. I'll move to deprecate these classes away from view (e.g. if we can eventually get them to be package-private then this becomes moot).", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449550797", "createdAt": "2020-07-03T12:10:56Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -15,8 +16,16 @@\n \n     private final Map<Integer, String> targets = new HashMap<>();\n \n+    /**\n+     * @deprecated use {@link SocatContainer(DockerImageName)} instead\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MzUzMA=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1ODEyNg==", "bodyText": "well, I would not hide/deprecate them, because they are helpful for building complex 3rd party containers", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449558126", "createdAt": "2020-07-03T12:29:39Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -15,8 +16,16 @@\n \n     private final Map<Integer, String> targets = new HashMap<>();\n \n+    /**\n+     * @deprecated use {@link SocatContainer(DockerImageName)} instead\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MzUzMA=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1MTgwMw==", "bodyText": "Reverted", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449751803", "createdAt": "2020-07-04T08:15:56Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/containers/SocatContainer.java", "diffHunk": "@@ -15,8 +16,16 @@\n \n     private final Map<Integer, String> targets = new HashMap<>();\n \n+    /**\n+     * @deprecated use {@link SocatContainer(DockerImageName)} instead\n+     */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MzUzMA=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTY5MzkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozNTo0M1rOGsqYeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjowOToxMlrOGsuW7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NDkyMg==", "bodyText": "Since the contract was always that RemoteDockerImage accepts a full image name, perhaps we can keep this and (String,String) constructors?\nOtherwise, it becomes a bit too long:\nnew GenericContainer(new RemoveDockerImage(new DockerImageName(\"missed-me:1\"))", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449484922", "createdAt": "2020-07-03T09:35:43Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -38,10 +38,16 @@\n     @ToString.Exclude\n     private DockerClient dockerClient = DockerClientFactory.lazyClient();\n \n+    public RemoteDockerImage(DockerImageName dockerImageName) {\n+        this.imageNameFuture = CompletableFuture.completedFuture(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MDA2Mg==", "bodyText": "Will defer as per #2839 (comment)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449550062", "createdAt": "2020-07-03T12:09:12Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -38,10 +38,16 @@\n     @ToString.Exclude\n     private DockerClient dockerClient = DockerClientFactory.lazyClient();\n \n+    public RemoteDockerImage(DockerImageName dockerImageName) {\n+        this.imageNameFuture = CompletableFuture.completedFuture(dockerImageName);\n+    }\n+\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NDkyMg=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTcwMTc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTozODoxM1rOGsqdTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxOTozMlrOGsunMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjE1Nw==", "bodyText": "Love it!\nMade me thinking whether we should even have a fully featured builder as well:\nDockerImageName.builder()\n    .registry(\"repo.example.com\")\n    .image(\"services/foo\")\n    .tag(\"123\")\n    .build();", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449486157", "createdAt": "2020-07-03T09:38:13Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -124,8 +144,13 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    public DockerImageName withTag(final String newTag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1Mzk0Ng==", "bodyText": "I feel like the halfway house of Dockerfilename.of(\"repo.example.com/services/foo\").withTag(\"123\") is probably enough - I'd like to try that first.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449553946", "createdAt": "2020-07-03T12:18:51Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -124,8 +144,13 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    public DockerImageName withTag(final String newTag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjE1Nw=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1NDIyNw==", "bodyText": "FTR the builder idea is just an idea, don't need to be in this PR and can easily be a follow up :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449554227", "createdAt": "2020-07-03T12:19:32Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -124,8 +144,13 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    public DockerImageName withTag(final String newTag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjE1Nw=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTcxMjA5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/containers/ReusabilityUnitTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTo0MTozNlrOGsqjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMDo0MzowMVrOGzufbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NzgwMw==", "bodyText": "FTR if I remember correctly, I had to use IMAGE_FUTURE here to avoid the side effect we had in the constructor, but now it can be as simple as new GenericContainer<>(TINY_IMAGE)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449487803", "createdAt": "2020-07-03T09:41:36Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/containers/ReusabilityUnitTests.java", "diffHunk": "@@ -61,8 +67,8 @@\n         @Parameterized.Parameters(name = \"{0}\")\n         public static Object[][] data() {\n             return new Object[][] {\n-                { \"generic\", new GenericContainer(IMAGE_FUTURE), true },\n-                { \"anonymous generic\", new GenericContainer(IMAGE_FUTURE) {}, true },\n+                { \"generic\", new GenericContainer<>(new RemoteDockerImage(IMAGE_FUTURE)), true },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5MjI3MA==", "bodyText": "Updated", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r456892270", "createdAt": "2020-07-19T10:43:01Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/containers/ReusabilityUnitTests.java", "diffHunk": "@@ -61,8 +67,8 @@\n         @Parameterized.Parameters(name = \"{0}\")\n         public static Object[][] data() {\n             return new Object[][] {\n-                { \"generic\", new GenericContainer(IMAGE_FUTURE), true },\n-                { \"anonymous generic\", new GenericContainer(IMAGE_FUTURE) {}, true },\n+                { \"generic\", new GenericContainer<>(new RemoteDockerImage(IMAGE_FUTURE)), true },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NzgwMw=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTcxNzMzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTo0MzoxOFrOGsqm_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMDo0Mjo1NlrOGzufXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODYzNw==", "bodyText": "I liked the idea of TestImages, btw. Perhaps we can/should move such references to that class as well", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449488637", "createdAt": "2020-07-03T09:43:18Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -23,10 +20,13 @@\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n \n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+\n public class ImagePullPolicyTest {\n \n     @ClassRule\n-    public static GenericContainer<?> registry = new GenericContainer<>(\"registry:2\")\n+    public static GenericContainer<?> registry = new GenericContainer<>(new DockerImageName(\"registry:2.7.0\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTIwMQ==", "bodyText": "Sure, I missed this one!", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449551201", "createdAt": "2020-07-03T12:11:54Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -23,10 +20,13 @@\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n \n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+\n public class ImagePullPolicyTest {\n \n     @ClassRule\n-    public static GenericContainer<?> registry = new GenericContainer<>(\"registry:2\")\n+    public static GenericContainer<?> registry = new GenericContainer<>(new DockerImageName(\"registry:2.7.0\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODYzNw=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5MjI1Mw==", "bodyText": "Updated", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r456892253", "createdAt": "2020-07-19T10:42:56Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -23,10 +20,13 @@\n import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n \n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+\n public class ImagePullPolicyTest {\n \n     @ClassRule\n-    public static GenericContainer<?> registry = new GenericContainer<>(\"registry:2\")\n+    public static GenericContainer<?> registry = new GenericContainer<>(new DockerImageName(\"registry:2.7.0\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODYzNw=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTcxOTM0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTo0Mzo1OVrOGsqoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMDo0Mjo0M1rOGzufUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODk2Ng==", "bodyText": "nit: imageName field can be changed to DockerImageName, to make tests' bodies a little bit smaller", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449488966", "createdAt": "2020-07-03T09:43:59Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -74,7 +74,7 @@ public void setUp() {\n     @Test\n     public void pullsByDefault() {\n         try (\n-            GenericContainer<?> container = new GenericContainer<>(imageName)\n+            GenericContainer<?> container = new GenericContainer(new DockerImageName(imageName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5MjI0MA==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r456892240", "createdAt": "2020-07-19T10:42:43Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -74,7 +74,7 @@ public void setUp() {\n     @Test\n     public void pullsByDefault() {\n         try (\n-            GenericContainer<?> container = new GenericContainer<>(imageName)\n+            GenericContainer<?> container = new GenericContainer(new DockerImageName(imageName))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODk2Ng=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTc0MjUwOnYy", "diffSide": "RIGHT", "path": "examples/mongodb-container/src/test/java/org/testcontainers/containers/MongoDbContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwOTo1MDo1MFrOGsq2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxMjoyMFrOGsucDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ5MjUxOA==", "bodyText": "a bit unrelated, but... don't we have a mongodb module now? :D", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449492518", "createdAt": "2020-07-03T09:50:50Z", "author": {"login": "bsideup"}, "path": "examples/mongodb-container/src/test/java/org/testcontainers/containers/MongoDbContainer.java", "diffHunk": "@@ -24,7 +25,9 @@\n \n     /**\n      * Creates a new {@link MongoDbContainer} with the {@value DEFAULT_IMAGE_AND_TAG} image.\n+     * @deprecated use {@link MongoDbContainer(DockerImageName)} instead\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1MTM3Mw==", "bodyText": "Yeah, we should discuss nuking this example...", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449551373", "createdAt": "2020-07-03T12:12:20Z", "author": {"login": "rnorth"}, "path": "examples/mongodb-container/src/test/java/org/testcontainers/containers/MongoDbContainer.java", "diffHunk": "@@ -24,7 +25,9 @@\n \n     /**\n      * Creates a new {@link MongoDbContainer} with the {@value DEFAULT_IMAGE_AND_TAG} image.\n+     * @deprecated use {@link MongoDbContainer(DockerImageName)} instead\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ5MjUxOA=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjEyODU3OnYy", "diffSide": "RIGHT", "path": "modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoxNjowOFrOGsuh8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMDo0MjoyNVrOGzufNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1Mjg4MA==", "bodyText": "perhaps we should inline the image here, as it will be in the docs", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449552880", "createdAt": "2020-07-03T12:16:08Z", "author": {"login": "bsideup"}, "path": "modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java", "diffHunk": "@@ -11,20 +11,24 @@\n import com.mongodb.client.TransactionBody;\n import org.bson.Document;\n import org.junit.Test;\n+import org.testcontainers.utility.DockerImageName;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n \n public class MongoDBContainerTest {\n+\n+    private static final DockerImageName MONGO_IMAGE = new DockerImageName(\"mongo:4.0.10\");\n+\n     /**\n      * Taken from <a href=\"https://docs.mongodb.com/manual/core/transactions/\">https://docs.mongodb.com</a>\n      */\n     @Test\n     public void shouldExecuteTransactions() {\n         try (\n             // creatingMongoDBContainer {\n-            final MongoDBContainer mongoDBContainer = new MongoDBContainer()\n+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(MONGO_IMAGE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5MjIxNA==", "bodyText": "Done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r456892214", "createdAt": "2020-07-19T10:42:25Z", "author": {"login": "rnorth"}, "path": "modules/mongodb/src/test/java/org/testcontainers/containers/MongoDBContainerTest.java", "diffHunk": "@@ -11,20 +11,24 @@\n import com.mongodb.client.TransactionBody;\n import org.bson.Document;\n import org.junit.Test;\n+import org.testcontainers.utility.DockerImageName;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n \n \n public class MongoDBContainerTest {\n+\n+    private static final DockerImageName MONGO_IMAGE = new DockerImageName(\"mongo:4.0.10\");\n+\n     /**\n      * Taken from <a href=\"https://docs.mongodb.com/manual/core/transactions/\">https://docs.mongodb.com</a>\n      */\n     @Test\n     public void shouldExecuteTransactions() {\n         try (\n             // creatingMongoDBContainer {\n-            final MongoDBContainer mongoDBContainer = new MongoDBContainer()\n+            final MongoDBContainer mongoDBContainer = new MongoDBContainer(MONGO_IMAGE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1Mjg4MA=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjE0MjM4OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjoyMTo0MFrOGsuqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwODoxNjoxN1rOGs6rDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1NTA2Nw==", "bodyText": "this.customImageNameIsSet = true; and recordingMode = VncRecordingMode.SKIP; from BrowserWebDriverContainer(String) are missing", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449555067", "createdAt": "2020-07-03T12:21:40Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -87,15 +88,29 @@ public BrowserWebDriverContainer() {\n     /**\n      * Constructor taking a specific webdriver container name and tag\n      * @param dockerImageName Name of the docker image to pull\n+     * @deprecated use {@link BrowserWebDriverContainer(DockerImageName)} instead\n      */\n+    @Deprecated\n     public BrowserWebDriverContainer(String dockerImageName) {\n-        this();\n-        super.setDockerImageName(dockerImageName);\n+        this(new DockerImageName(dockerImageName));\n         this.customImageNameIsSet = true;\n         // We have to force SKIP mode for the recording by default because we don't know if the image has VNC or not\n         recordingMode = VncRecordingMode.SKIP;\n     }\n \n+    public BrowserWebDriverContainer(DockerImageName dockerImageName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1MTgyMg==", "bodyText": "Fixed", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r449751822", "createdAt": "2020-07-04T08:16:17Z", "author": {"login": "rnorth"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -87,15 +88,29 @@ public BrowserWebDriverContainer() {\n     /**\n      * Constructor taking a specific webdriver container name and tag\n      * @param dockerImageName Name of the docker image to pull\n+     * @deprecated use {@link BrowserWebDriverContainer(DockerImageName)} instead\n      */\n+    @Deprecated\n     public BrowserWebDriverContainer(String dockerImageName) {\n-        this();\n-        super.setDockerImageName(dockerImageName);\n+        this(new DockerImageName(dockerImageName));\n         this.customImageNameIsSet = true;\n         // We have to force SKIP mode for the recording by default because we don't know if the image has VNC or not\n         recordingMode = VncRecordingMode.SKIP;\n     }\n \n+    public BrowserWebDriverContainer(DockerImageName dockerImageName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1NTA2Nw=="}, "originalCommit": {"oid": "77aa41801afb757e7abc8a019afb4d10c332956f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTg5MzI2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQyMDoxMjoxMVrOGzqTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxMDo0MjowNVrOGzufHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMzczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DockerClientFactory.instance().client()\n          \n          \n            \n                        .removeImageCmd(imageName.asCanonicalNameString())\n          \n          \n            \n                        .withForce(true)\n          \n          \n            \n                        .exec();\n          \n          \n            \n                    removeImage();", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r456823734", "createdAt": "2020-07-18T20:12:11Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -90,7 +85,10 @@ public void shouldAlwaysPull() {\n             container.start();\n         }\n \n-        DockerClientFactory.instance().client().removeImageCmd(imageName).withForce(true).exec();\n+        DockerClientFactory.instance().client()\n+            .removeImageCmd(imageName.asCanonicalNameString())\n+            .withForce(true)\n+            .exec();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e314dbb50bdf9eab09d049166a17f0e2ce1fb0"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg5MjE4OQ==", "bodyText": "Thanks, done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2839#discussion_r456892189", "createdAt": "2020-07-19T10:42:05Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/images/ImagePullPolicyTest.java", "diffHunk": "@@ -90,7 +85,10 @@ public void shouldAlwaysPull() {\n             container.start();\n         }\n \n-        DockerClientFactory.instance().client().removeImageCmd(imageName).withForce(true).exec();\n+        DockerClientFactory.instance().client()\n+            .removeImageCmd(imageName.asCanonicalNameString())\n+            .withForce(true)\n+            .exec();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgyMzczNA=="}, "originalCommit": {"oid": "f4e314dbb50bdf9eab09d049166a17f0e2ce1fb0"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1506, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}