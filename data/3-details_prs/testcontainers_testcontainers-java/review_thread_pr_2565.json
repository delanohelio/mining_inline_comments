{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNjk2NDUz", "number": 2565, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoxMzowNFrOD8c1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoxMzowNFrOD8c1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzEzNTcxOnYy", "diffSide": "RIGHT", "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/containers/startupcheck/StartupCheckStrategyTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjoxMzowNFrOGVZWSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoxMjoyN1rOGY5UzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4ODU4NA==", "bodyText": "It does seem slightly odd to use a timeout with this strategy - is it intentional?\nI'd suggest just:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new IndefiniteWaitOneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))\n          \n          \n            \n                            new IndefiniteWaitOneShotStartupCheckStrategy()\n          \n      \n    \n    \n  \n\nshould be appropriate...", "url": "https://github.com/testcontainers/testcontainers-java/pull/2565#discussion_r425088584", "createdAt": "2020-05-14T12:13:04Z", "author": {"login": "rnorth"}, "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/containers/startupcheck/StartupCheckStrategyTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.testcontainers.containers.startupcheck;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import lombok.SneakyThrows;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.WaitingConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testcontainers.containers.output.OutputFrame.OutputType.STDOUT;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.IndefiniteOneShotStrategyTest;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.MinimumDurationStrategyTest;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.OneShotStrategyTest;\n+\n+@RunWith(Suite.class)\n+@Suite.SuiteClasses({OneShotStrategyTest.class, IndefiniteOneShotStrategyTest.class, MinimumDurationStrategyTest.class})\n+public class StartupCheckStrategyTest {\n+\n+    private static final String HELLO_TESTCONTAINERS = \"Hello Testcontainers!\";\n+\n+    private static void waitForHello(GenericContainer container) throws TimeoutException {\n+        WaitingConsumer consumer = new WaitingConsumer();\n+        container.followOutput(consumer, STDOUT);\n+\n+        consumer.waitUntil(frame ->\n+            frame.getUtf8String().contains(HELLO_TESTCONTAINERS), 30, TimeUnit.SECONDS);\n+    }\n+\n+    public static class OneShotStrategyTest {\n+        @Rule\n+        // withOneShotStrategy {\n+        public GenericContainer bboxWithOneShot = new GenericContainer(\"busybox:1.31.1\")\n+            .withCommand(String.format(\"echo %s\", HELLO_TESTCONTAINERS))\n+            .withStartupCheckStrategy(\n+                new OneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))\n+            );\n+        // }\n+\n+        @SneakyThrows\n+        @Test\n+        public void testCommandIsExecuted() {\n+            waitForHello(bboxWithOneShot);\n+\n+            assertThat(bboxWithOneShot.isRunning()).isFalse();\n+        }\n+    }\n+\n+    public static class IndefiniteOneShotStrategyTest {\n+        @Rule\n+        // withIndefiniteOneShotStrategy {\n+        public GenericContainer bboxWithIndefiniteOneShot = new GenericContainer(\"busybox:1.31.1\")\n+            .withCommand(\"sh\", \"-c\", String.format(\"sleep 5 && echo \\\"%s\\\"\", HELLO_TESTCONTAINERS))\n+            .withStartupCheckStrategy(\n+                new IndefiniteWaitOneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb06d10a779e000f3d280eff491fe523dd139f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODczNDQwNA==", "bodyText": "Will apply and merge.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2565#discussion_r428734404", "createdAt": "2020-05-21T15:38:58Z", "author": {"login": "rnorth"}, "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/containers/startupcheck/StartupCheckStrategyTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.testcontainers.containers.startupcheck;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import lombok.SneakyThrows;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.WaitingConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testcontainers.containers.output.OutputFrame.OutputType.STDOUT;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.IndefiniteOneShotStrategyTest;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.MinimumDurationStrategyTest;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.OneShotStrategyTest;\n+\n+@RunWith(Suite.class)\n+@Suite.SuiteClasses({OneShotStrategyTest.class, IndefiniteOneShotStrategyTest.class, MinimumDurationStrategyTest.class})\n+public class StartupCheckStrategyTest {\n+\n+    private static final String HELLO_TESTCONTAINERS = \"Hello Testcontainers!\";\n+\n+    private static void waitForHello(GenericContainer container) throws TimeoutException {\n+        WaitingConsumer consumer = new WaitingConsumer();\n+        container.followOutput(consumer, STDOUT);\n+\n+        consumer.waitUntil(frame ->\n+            frame.getUtf8String().contains(HELLO_TESTCONTAINERS), 30, TimeUnit.SECONDS);\n+    }\n+\n+    public static class OneShotStrategyTest {\n+        @Rule\n+        // withOneShotStrategy {\n+        public GenericContainer bboxWithOneShot = new GenericContainer(\"busybox:1.31.1\")\n+            .withCommand(String.format(\"echo %s\", HELLO_TESTCONTAINERS))\n+            .withStartupCheckStrategy(\n+                new OneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))\n+            );\n+        // }\n+\n+        @SneakyThrows\n+        @Test\n+        public void testCommandIsExecuted() {\n+            waitForHello(bboxWithOneShot);\n+\n+            assertThat(bboxWithOneShot.isRunning()).isFalse();\n+        }\n+    }\n+\n+    public static class IndefiniteOneShotStrategyTest {\n+        @Rule\n+        // withIndefiniteOneShotStrategy {\n+        public GenericContainer bboxWithIndefiniteOneShot = new GenericContainer(\"busybox:1.31.1\")\n+            .withCommand(\"sh\", \"-c\", String.format(\"sleep 5 && echo \\\"%s\\\"\", HELLO_TESTCONTAINERS))\n+            .withStartupCheckStrategy(\n+                new IndefiniteWaitOneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4ODU4NA=="}, "originalCommit": {"oid": "dbb06d10a779e000f3d280eff491fe523dd139f0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1ODIyMQ==", "bodyText": "@rnorth I'm sorry for not replying earlier, I was a little busy, but once I saw that you are going to merge I decided to reply straight away :)\nThat was intentional to show that even though timeout is 3 sec, the command executed on startup won't be interrupted and will continue executing as long as required (which is 5 sec)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2565#discussion_r428758221", "createdAt": "2020-05-21T16:12:27Z", "author": {"login": "vcvitaly"}, "path": "docs/examples/junit4/generic/src/test/java/org/testcontainers/containers/startupcheck/StartupCheckStrategyTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.testcontainers.containers.startupcheck;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import lombok.SneakyThrows;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.output.WaitingConsumer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.testcontainers.containers.output.OutputFrame.OutputType.STDOUT;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.IndefiniteOneShotStrategyTest;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.MinimumDurationStrategyTest;\n+import static org.testcontainers.containers.startupcheck.StartupCheckStrategyTest.OneShotStrategyTest;\n+\n+@RunWith(Suite.class)\n+@Suite.SuiteClasses({OneShotStrategyTest.class, IndefiniteOneShotStrategyTest.class, MinimumDurationStrategyTest.class})\n+public class StartupCheckStrategyTest {\n+\n+    private static final String HELLO_TESTCONTAINERS = \"Hello Testcontainers!\";\n+\n+    private static void waitForHello(GenericContainer container) throws TimeoutException {\n+        WaitingConsumer consumer = new WaitingConsumer();\n+        container.followOutput(consumer, STDOUT);\n+\n+        consumer.waitUntil(frame ->\n+            frame.getUtf8String().contains(HELLO_TESTCONTAINERS), 30, TimeUnit.SECONDS);\n+    }\n+\n+    public static class OneShotStrategyTest {\n+        @Rule\n+        // withOneShotStrategy {\n+        public GenericContainer bboxWithOneShot = new GenericContainer(\"busybox:1.31.1\")\n+            .withCommand(String.format(\"echo %s\", HELLO_TESTCONTAINERS))\n+            .withStartupCheckStrategy(\n+                new OneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))\n+            );\n+        // }\n+\n+        @SneakyThrows\n+        @Test\n+        public void testCommandIsExecuted() {\n+            waitForHello(bboxWithOneShot);\n+\n+            assertThat(bboxWithOneShot.isRunning()).isFalse();\n+        }\n+    }\n+\n+    public static class IndefiniteOneShotStrategyTest {\n+        @Rule\n+        // withIndefiniteOneShotStrategy {\n+        public GenericContainer bboxWithIndefiniteOneShot = new GenericContainer(\"busybox:1.31.1\")\n+            .withCommand(\"sh\", \"-c\", String.format(\"sleep 5 && echo \\\"%s\\\"\", HELLO_TESTCONTAINERS))\n+            .withStartupCheckStrategy(\n+                new IndefiniteWaitOneShotStartupCheckStrategy().withTimeout(Duration.ofSeconds(3))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4ODU4NA=="}, "originalCommit": {"oid": "dbb06d10a779e000f3d280eff491fe523dd139f0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1553, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}