{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwODMyNzI2", "number": 3003, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzoxMjo0NFrOEPbDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1NDo1MFrOEQIncA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjA3Mzc5OnYy", "diffSide": "RIGHT", "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzoxMjo0NFrOGzH9Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzoxMjo0NFrOGzH9Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2MDg3OQ==", "bodyText": "exception is swallowed here", "url": "https://github.com/testcontainers/testcontainers-java/pull/3003#discussion_r456260879", "createdAt": "2020-07-17T07:12:44Z", "author": {"login": "aaronjwhiteside"}, "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "diffHunk": "@@ -450,4 +449,41 @@ private Response doHttpRequest(final int port, final String path, final String m\n             throw new RuntimeException(\"Could not perform request against couchbase HTTP endpoint \", ex);\n         }\n     }\n+\n+    /**\n+     * In addition to getting a 200, we need to make sure that all services we need are enabled and available on\n+     * the bucket.\n+     * <p>\n+     *  Fixes the issue observed in https://github.com/testcontainers/testcontainers-java/issues/2993\n+     */\n+    private class AllServicesEnabledPredicate implements Predicate<String> {\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public boolean test(final String rawConfig) {\n+            try {\n+                Map<String, Object> parsedConfig = MAPPER.readValue(rawConfig, new TypeReference<Map<String, Object>>() {});\n+\n+                for (Map<String, Object> node : (List<Map<String, Object>>) parsedConfig.get(\"nodesExt\")) {\n+                    final Map<String, Integer> nodeServices = (Map<String, Integer>) node.get(\"services\");\n+                    for (CouchbaseService enabledService : enabledServices) {\n+                        boolean found = false;\n+                        for (String nodeService : nodeServices.keySet()) {\n+                            if (nodeService.startsWith(enabledService.getIdentifier())) {\n+                                found = true;\n+                            }\n+                        }\n+                        if (!found) {\n+                            logger().trace(\"Service {} not yet part of config, retrying.\", enabledService);\n+                            return false;\n+                        }\n+                    }\n+                }\n+                return true;\n+            } catch (IOException ex) {\n+                logger().error(\"Unable to parse response {}\", rawConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7caad2e4332a7f048d3560186877dabecd097d3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjA3ODkxOnYy", "diffSide": "RIGHT", "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzoxNDo0OVrOGzIASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0OToxOFrOG0Fxrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2MTcwNQ==", "bodyText": "Consider using readTree (and its path(String key) to have a null-safe access to sub-objects)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3003#discussion_r456261705", "createdAt": "2020-07-17T07:14:49Z", "author": {"login": "bsideup"}, "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "diffHunk": "@@ -450,4 +449,41 @@ private Response doHttpRequest(final int port, final String path, final String m\n             throw new RuntimeException(\"Could not perform request against couchbase HTTP endpoint \", ex);\n         }\n     }\n+\n+    /**\n+     * In addition to getting a 200, we need to make sure that all services we need are enabled and available on\n+     * the bucket.\n+     * <p>\n+     *  Fixes the issue observed in https://github.com/testcontainers/testcontainers-java/issues/2993\n+     */\n+    private class AllServicesEnabledPredicate implements Predicate<String> {\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public boolean test(final String rawConfig) {\n+            try {\n+                Map<String, Object> parsedConfig = MAPPER.readValue(rawConfig, new TypeReference<Map<String, Object>>() {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7caad2e4332a7f048d3560186877dabecd097d3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MTQyMw==", "bodyText": "I second this, no more casting to Map/List..", "url": "https://github.com/testcontainers/testcontainers-java/pull/3003#discussion_r456271423", "createdAt": "2020-07-17T07:36:19Z", "author": {"login": "aaronjwhiteside"}, "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "diffHunk": "@@ -450,4 +449,41 @@ private Response doHttpRequest(final int port, final String path, final String m\n             throw new RuntimeException(\"Could not perform request against couchbase HTTP endpoint \", ex);\n         }\n     }\n+\n+    /**\n+     * In addition to getting a 200, we need to make sure that all services we need are enabled and available on\n+     * the bucket.\n+     * <p>\n+     *  Fixes the issue observed in https://github.com/testcontainers/testcontainers-java/issues/2993\n+     */\n+    private class AllServicesEnabledPredicate implements Predicate<String> {\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public boolean test(final String rawConfig) {\n+            try {\n+                Map<String, Object> parsedConfig = MAPPER.readValue(rawConfig, new TypeReference<Map<String, Object>>() {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2MTcwNQ=="}, "originalCommit": {"oid": "f7caad2e4332a7f048d3560186877dabecd097d3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3Mzc3NA==", "bodyText": "I'll get it patched up shortly", "url": "https://github.com/testcontainers/testcontainers-java/pull/3003#discussion_r457273774", "createdAt": "2020-07-20T10:49:18Z", "author": {"login": "daschl"}, "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "diffHunk": "@@ -450,4 +449,41 @@ private Response doHttpRequest(final int port, final String path, final String m\n             throw new RuntimeException(\"Could not perform request against couchbase HTTP endpoint \", ex);\n         }\n     }\n+\n+    /**\n+     * In addition to getting a 200, we need to make sure that all services we need are enabled and available on\n+     * the bucket.\n+     * <p>\n+     *  Fixes the issue observed in https://github.com/testcontainers/testcontainers-java/issues/2993\n+     */\n+    private class AllServicesEnabledPredicate implements Predicate<String> {\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public boolean test(final String rawConfig) {\n+            try {\n+                Map<String, Object> parsedConfig = MAPPER.readValue(rawConfig, new TypeReference<Map<String, Object>>() {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI2MTcwNQ=="}, "originalCommit": {"oid": "f7caad2e4332a7f048d3560186877dabecd097d3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzUxODExOnYy", "diffSide": "RIGHT", "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1MDo0NFrOG0IGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1MDo0NFrOG0IGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxMTg5Mw==", "bodyText": "put back {} for response, Throwables can be the last argument to error() calls.\nlogger().error(\"Unable to parse response {}\", response, e);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3003#discussion_r457311893", "createdAt": "2020-07-20T11:50:44Z", "author": {"login": "aaronjwhiteside"}, "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "diffHunk": "@@ -168,7 +174,7 @@ protected void configure() {\n                             .map(\"healthy\"::equals)\n                             .orElse(false);\n                     } catch (IOException e) {\n-                        logger().error(\"Unable to parse response {}\", response);\n+                        logger().error(\"Unable to parse response: \" + response, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "848ae832edcf80cd91d0df17f0ee38ab29a0d104"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzUzODQwOnYy", "diffSide": "RIGHT", "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1NDo1MFrOG0IRdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1NDo1MFrOG0IRdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNDY3OA==", "bodyText": "use {} placeholder for rawConfig\nold habits die hard, eh? ;)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3003#discussion_r457314678", "createdAt": "2020-07-20T11:54:50Z", "author": {"login": "aaronjwhiteside"}, "path": "modules/couchbase/src/main/java/org/testcontainers/couchbase/CouchbaseContainer.java", "diffHunk": "@@ -450,4 +452,38 @@ private Response doHttpRequest(final int port, final String path, final String m\n             throw new RuntimeException(\"Could not perform request against couchbase HTTP endpoint \", ex);\n         }\n     }\n+\n+    /**\n+     * In addition to getting a 200, we need to make sure that all services we need are enabled and available on\n+     * the bucket.\n+     * <p>\n+     *  Fixes the issue observed in https://github.com/testcontainers/testcontainers-java/issues/2993\n+     */\n+    private class AllServicesEnabledPredicate implements Predicate<String> {\n+\n+        @Override\n+        public boolean test(final String rawConfig) {\n+            try {\n+                for (JsonNode node : MAPPER.readTree(rawConfig).at(\"/nodesExt\")) {\n+                    for (CouchbaseService enabledService : enabledServices) {\n+                        boolean found = false;\n+                        Iterator<String> fieldNames = node.get(\"services\").fieldNames();\n+                        while (fieldNames.hasNext()) {\n+                            if (fieldNames.next().startsWith(enabledService.getIdentifier())) {\n+                                found = true;\n+                            }\n+                        }\n+                        if (!found) {\n+                            logger().trace(\"Service {} not yet part of config, retrying.\", enabledService);\n+                            return false;\n+                        }\n+                    }\n+                }\n+                return true;\n+            } catch (IOException ex) {\n+                logger().error(\"Unable to parse response: \" + rawConfig, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "848ae832edcf80cd91d0df17f0ee38ab29a0d104"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1480, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}