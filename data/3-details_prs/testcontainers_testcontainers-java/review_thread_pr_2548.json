{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTAxNzkx", "number": 2548, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0NjozM1rODw75jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMTo1MDoxMlrODxC2ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5NjMxOnYy", "diffSide": "RIGHT", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0NjozM1rOGEMRBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTozNjo0N1rOGEMjiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mg==", "bodyText": "AFAIK specName can be an arbitrary string. Perhaps we should encode it (similar to #1326)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048452", "createdAt": "2020-04-11T10:46:33Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null\n+    }\n+\n+    @Override\n+    String getFilesystemFriendlyName() {\n+        return [specName, featureName].collect {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzE5Mw==", "bodyText": "Yes, both actually (since Groovy method names can be arbitrary Strings?).", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053193", "createdAt": "2020-04-11T11:36:47Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null\n+    }\n+\n+    @Override\n+    String getFilesystemFriendlyName() {\n+        return [specName, featureName].collect {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5NjMyOnYy", "diffSide": "RIGHT", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0NjozNlrOGEMRBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoxNzoxMlrOGEVydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw==", "bodyText": "huh?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048453", "createdAt": "2020-04-11T10:46:36Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzI5Ng==", "bodyText": "This method is used nowhere, TBH I don't even understand why we have it in our interface and assumed it to come from refactoring from original JUnit test description.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053296", "createdAt": "2020-04-11T11:37:49Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NjYyMw==", "bodyText": "we could/should deprecate it, but let's not return null here anyways.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407186623", "createdAt": "2020-04-12T11:46:14Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDQyNw==", "bodyText": "What is semantically correct here then? Same then filesystemFriendly name?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407204427", "createdAt": "2020-04-12T14:16:44Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDQ3MA==", "bodyText": "should work, yes \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407204470", "createdAt": "2020-04-12T14:17:12Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5Njc5OnYy", "diffSide": "RIGHT", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/TestcontainersExtension.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0NzoxM1rOGEMRNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTozODowOFrOGEMkCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODUwMg==", "bodyText": "private?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048502", "createdAt": "2020-04-11T10:47:13Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/TestcontainersExtension.groovy", "diffHunk": "@@ -1,17 +1,32 @@\n package org.testcontainers.spock\n \n+import org.spockframework.runtime.AbstractRunListener\n import org.spockframework.runtime.extension.AbstractAnnotationDrivenExtension\n+import org.spockframework.runtime.model.ErrorInfo\n import org.spockframework.runtime.model.SpecInfo\n \n class TestcontainersExtension extends AbstractAnnotationDrivenExtension<Testcontainers> {\n \n     @Override\n     void visitSpecAnnotation(Testcontainers annotation, SpecInfo spec) {\n-        def interceptor = new TestcontainersMethodInterceptor(spec)\n+        def listener = new ErrorListener()\n+        def interceptor = new TestcontainersMethodInterceptor(spec, listener)\n         spec.addSetupSpecInterceptor(interceptor)\n         spec.addCleanupSpecInterceptor(interceptor)\n         spec.addSetupInterceptor(interceptor)\n         spec.addCleanupInterceptor(interceptor)\n+\n+        spec.addListener(listener)\n+\n+    }\n+\n+    class ErrorListener extends AbstractRunListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzMyMg==", "bodyText": "sure", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053322", "createdAt": "2020-04-11T11:38:08Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/TestcontainersExtension.groovy", "diffHunk": "@@ -1,17 +1,32 @@\n package org.testcontainers.spock\n \n+import org.spockframework.runtime.AbstractRunListener\n import org.spockframework.runtime.extension.AbstractAnnotationDrivenExtension\n+import org.spockframework.runtime.model.ErrorInfo\n import org.spockframework.runtime.model.SpecInfo\n \n class TestcontainersExtension extends AbstractAnnotationDrivenExtension<Testcontainers> {\n \n     @Override\n     void visitSpecAnnotation(Testcontainers annotation, SpecInfo spec) {\n-        def interceptor = new TestcontainersMethodInterceptor(spec)\n+        def listener = new ErrorListener()\n+        def interceptor = new TestcontainersMethodInterceptor(spec, listener)\n         spec.addSetupSpecInterceptor(interceptor)\n         spec.addCleanupSpecInterceptor(interceptor)\n         spec.addSetupInterceptor(interceptor)\n         spec.addCleanupInterceptor(interceptor)\n+\n+        spec.addListener(listener)\n+\n+    }\n+\n+    class ErrorListener extends AbstractRunListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODUwMg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5NzI3OnYy", "diffSide": "RIGHT", "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0Nzo1MFrOGEMRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo0Nzo1MFrOGEMRbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODU1OA==", "bodyText": "TIL! Cool :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048558", "createdAt": "2020-04-11T10:47:50Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.testcontainers.spock\n+\n+import org.intellij.lang.annotations.Language\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+import spock.util.EmbeddedSpecRunner\n+\n+class BrowserVncRecordingIT extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temp\n+\n+    String recordingDir\n+\n+    def setup() {\n+        recordingDir = temp.getRoot().getAbsolutePath()\n+    }\n+\n+    def \"retains all recordings for RECORD_ALL if successful\"() {\n+        given:\n+\n+        //noinspection GrPackage\n+        @Language(\"groovy\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM5OTk0OnYy", "diffSide": "RIGHT", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDo1MTowOVrOGEMSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMTo0NTo0MlrOGEUsjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg==", "bodyText": "FYI invocation.feature is marked as @Nullable", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048892", "createdAt": "2020-04-11T10:51:09Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODk1Ng==", "bodyText": "probably getMethod() is more appropriate here?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048956", "createdAt": "2020-04-11T10:51:46Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzM2Nw==", "bodyText": "k, will check in the implementation.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053367", "createdAt": "2020-04-11T11:38:36Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDE0MQ==", "bodyText": "Actually I don't understand the null condition from the javadoc:\n   * Returns the feature which this method invocation belongs to (if any).\n   * Differs from {@code MethodInfo.getFeature()} in that it reflects the dynamic\n   * picture. For example, when a setup method is invoked, this method\n   * will return the corresponding feature, whereas {@code MethodInfo.getFeature()}\n   * will return {@code null}.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407064141", "createdAt": "2020-04-11T13:29:26Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMDQ0OQ==", "bodyText": "So if potentially called from within a setup block, we would still get the actual feature name, which is good IMO.\nIt is potentially null when called in the context of setupSpec.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407100449", "createdAt": "2020-04-11T19:16:37Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMTM0NA==", "bodyText": "So FYI, in the context of our extension execution getMethod() is actually null, so let's keep like this for now \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407101344", "createdAt": "2020-04-11T19:25:45Z", "author": {"login": "kiview"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NjU3NQ==", "bodyText": "Ok, I trust you here :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407186575", "createdAt": "2020-04-12T11:45:42Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, "originalCommit": {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzUzNTE0OnYy", "diffSide": "RIGHT", "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMTo1MDoxMlrOGEUuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoxNjowN1rOGEVyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NzE0NQ==", "bodyText": "would be cool to parameterize these 3 tests into something like:\n| mode | fails | files |\n| RECORD_ALL | false | BrowserWebdriverContainerIT-should+record |\n| RECORD_FAILING | false | |\n| RECORD_FAILING | true | BrowserWebdriverContainerIT-should+record |", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407187145", "createdAt": "2020-04-12T11:50:12Z", "author": {"login": "bsideup"}, "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.testcontainers.spock\n+\n+import org.intellij.lang.annotations.Language\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+import spock.util.EmbeddedSpecRunner\n+\n+class BrowserVncRecordingIT extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temp\n+\n+    String recordingDir\n+\n+    def setup() {\n+        recordingDir = temp.getRoot().getAbsolutePath()\n+    }\n+\n+    def \"retains all recordings for RECORD_ALL if successful\"() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd34121f44c8b37e9e8664f8c9c4336165d04143"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDM1NQ==", "bodyText": "yes cool, I try", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407204355", "createdAt": "2020-04-12T14:16:07Z", "author": {"login": "kiview"}, "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.testcontainers.spock\n+\n+import org.intellij.lang.annotations.Language\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+import spock.util.EmbeddedSpecRunner\n+\n+class BrowserVncRecordingIT extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temp\n+\n+    String recordingDir\n+\n+    def setup() {\n+        recordingDir = temp.getRoot().getAbsolutePath()\n+    }\n+\n+    def \"retains all recordings for RECORD_ALL if successful\"() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NzE0NQ=="}, "originalCommit": {"oid": "fd34121f44c8b37e9e8664f8c9c4336165d04143"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1545, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}