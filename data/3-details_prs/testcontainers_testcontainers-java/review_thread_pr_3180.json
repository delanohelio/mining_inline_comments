{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTgwMTgy", "number": 3180, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoxNzoyM1rOEevOUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODoyNVrOFXcjxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNjY2NDUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoxNzoyM1rOHKllrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToxNjowMlrOHMIOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2MzY2MQ==", "bodyText": "Should we rename this method to reencodeRecording?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480863661", "createdAt": "2020-09-01T06:17:23Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        fixRecordDuration();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void fixRecordDuration() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3OTc3Mg==", "bodyText": "It's done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482479772", "createdAt": "2020-09-02T21:16:02Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        fixRecordDuration();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void fixRecordDuration() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2MzY2MQ=="}, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNjY3MjM3OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoxOTowOVrOHKlqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToxNjowOFrOHMIO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NDkwNA==", "bodyText": "This line might be problematic in certain CI environments. copyFiletoContainer should be the safer method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480864904", "createdAt": "2020-09-01T06:19:09Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {\n+                    container.withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n+                            .withFileSystemBind(recordedFile, \"/tmp/chromeTestRecord.flv\", BindMode.READ_WRITE )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3OTg2OA==", "bodyText": "Done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482479868", "createdAt": "2020-09-02T21:16:08Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {\n+                    container.withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n+                            .withFileSystemBind(recordedFile, \"/tmp/chromeTestRecord.flv\", BindMode.READ_WRITE )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NDkwNA=="}, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNjY4NTM1OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoyMjoxOFrOHKlyzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToxNjoxNFrOHMIPQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NzAyMA==", "bodyText": "In general, we like to avoid using 3rd party images as part of our CI (if we can). I assume we could use the updated vnc-recorder container here as well, or?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480867020", "createdAt": "2020-09-01T06:22:18Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3OTkzNg==", "bodyText": "Done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482479936", "createdAt": "2020-09-02T21:16:14Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NzAyMA=="}, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNjY4NTU1OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjoyMjoyMVrOHKly7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToxNjoxOFrOHMIPZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NzA1NQ==", "bodyText": "OneShotStartupCheckStrategy  should not throw an exception if the container stops with exit code 0.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r480867055", "createdAt": "2020-09-01T06:22:21Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {\n+                    container.withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n+                            .withFileSystemBind(recordedFile, \"/tmp/chromeTestRecord.flv\", BindMode.READ_WRITE )\n+                            .withCommand(\"-i\" ,\"/tmp/chromeTestRecord.flv\")\n+                            .withLogConsumer(dockerLogConsumer)\n+                            .start();\n+                } catch (RuntimeException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3OTk3Mg==", "bodyText": "Fixed.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482479972", "createdAt": "2020-09-02T21:16:18Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +64,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                ToStringConsumer dockerLogConsumer = new ToStringConsumer();\n+\n+                try( GenericContainer container = new GenericContainer<>(\"jrottenberg/ffmpeg:3.2-alpine38\") ) {\n+                    container.withStartupCheckStrategy(new OneShotStartupCheckStrategy())\n+                            .withFileSystemBind(recordedFile, \"/tmp/chromeTestRecord.flv\", BindMode.READ_WRITE )\n+                            .withCommand(\"-i\" ,\"/tmp/chromeTestRecord.flv\")\n+                            .withLogConsumer(dockerLogConsumer)\n+                            .start();\n+                } catch (RuntimeException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg2NzA1NQ=="}, "originalCommit": {"oid": "4fbd2fed5794fb7071fe9843ee924deef89e0b62"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjY3MjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMjoyNVrOHMIj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyMjo0N1rOH0GhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ==", "bodyText": "Why encode to .flv instead of .mp4 container? Only to avoid the -movflags faststart parameter?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482485221", "createdAt": "2020-09-02T21:22:25Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxOTg4Mg==", "bodyText": "I don't know if it's Ok to change the record extension in this ticket, maybe we can open a new ticket for this, and I add that we can implement a kind of configuration to let user decide which extension he wants for recording...\n...but, I'm open if you want me to change my pull request to use .mp4 instead of .flv  with -movflags faststart  \ud83d\ude42", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482519882", "createdAt": "2020-09-02T22:04:29Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NjQ4NQ==", "bodyText": "I personally have no opinion about this.\n@leonard84 could you elaborate why .mp4 would be the better choice? Would be happy to endorse this instead and change it in this PR, if it is the better choice for whatever reason.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482756485", "createdAt": "2020-09-03T07:12:44Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MTg2Ng==", "bodyText": "FLV is a proprietary format developed by Adobe. MP4 is a format standardized by the ISO in the MPEG-4 family. Your video is H.264 (MPEG-4 Part 10), so it's from the same MPEG-4 standard.2\n\n\nThat being said, the support for MP4 should always be better than for FLV containers. While typical desktop video players support almost every container and codec, devices such as mobile phones or DLNA streaming servers might only handle MP4 files.\n\nhttps://superuser.com/a/549647", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r483161866", "createdAt": "2020-09-03T18:05:09Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3NTE2MA==", "bodyText": "I can also add this blog article of Adobe about flv being obsolete:\n\nIf you want to create a video to play in Flash Player, then you should generally be using H.264 (.mp4), not the obsolete FLV or F4V formats...\n\nhttps://blogs.adobe.com/creativecloud/removal-flv-f4v-swf-export-adobe-media-encoder-after-effects-premiere-pro/\nMaybe we should consider using .mp4 format, but is there any impact on users ? if so, should we just mark .flv as deprecated and offer .mp4 as option (or as default) and mention that .flv support will be deleted soon ?\nIf not, we can replace it right away.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r484075160", "createdAt": "2020-09-06T14:13:07Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwNzQzMQ==", "bodyText": "IMHO we should offer mp4 as default and could offer a legacy mode that produces flv.\nI don't think that there are any who specifically want flv, we currently transcode it in a post processing  step to mp4.\nSure this change breaks that, but that is the whole point, and we can just remove the step with this feature.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r484507431", "createdAt": "2020-09-07T16:05:20Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NDc5NA==", "bodyText": "Was this quietly resolved? I still think we should use mp4.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String newFlvOutput = \"/newScreen.flv\";\n          \n          \n            \n                    String newFlvOutput = \"/newScreen.mp4\";\n          \n          \n            \n                    execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", \"-movflags\", \"faststart\", newFlvOutput);\n          \n      \n    \n    \n  \n\nSince the comment already has fixed line, I can't really let the suggestion replace the next line.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r524394794", "createdAt": "2020-11-16T16:22:47Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NTIyMQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODM3OTA1OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoxNDowNVrOHMZKFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowOTowNFrOHvi_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzE0MQ==", "bodyText": "I wonder, can't we use VncRecordingContainer here directly? You can still override cmdModifier etc.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482757141", "createdAt": "2020-09-03T07:14:05Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3NTY5Mw==", "bodyText": "VncRecordingContainer container has constructors with @NonNull arguments, and I don't know how can I instantiate the container without creating a method to return a VncRecordingContainer with ffmpeg as an entrypoint, which I think not good for the class as It will deviate from its main role which is  a vnc recoding, and ffmpeg is just an implementation detail (To fix the recording), and in my test I just want to get meta data for the recorded video using whatever ffmpeg.\nNonetheless, I can apply your suggestion, I just need some hints on how to do it properly, I don't want to mess the code up, as I don't have a deep knowledge of the base code  \ud83d\ude05", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r484075693", "createdAt": "2020-09-06T14:17:59Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzE0MQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxODQ0MA==", "bodyText": "ok, makes sense.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519618440", "createdAt": "2020-11-09T08:09:04Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1NzE0MQ=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODM4NTE1OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoxNTo0NlrOHMZNkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNDoyODoyM1rOHNptBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1ODAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String dockerOutput;\n          \n          \n            \n                            String dockerOutput = \"\";\n          \n      \n    \n    \n  \n\nMaybe better to initialize with empty String, so we can't end up with NPE in the assert.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r482758033", "createdAt": "2020-09-03T07:15:46Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA3NjgwNw==", "bodyText": "It's no longer the case, I merged the declaration and the assignment, thanks \ud83d\udc4d", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r484076807", "createdAt": "2020-09-06T14:28:23Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -58,6 +66,52 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            final String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+            final String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+            DockerImageName chromeDockerImageName = DockerImageName.parse(\"selenium/standalone-chrome-debug\")\n+                                                             .withTag(SeleniumUtils.determineClasspathSeleniumVersion());\n+            try (\n+                BrowserWebDriverContainer chrome = new BrowserWebDriverContainer(chromeDockerImageName)\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+            ) {\n+                chrome.start();\n+\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return flvFileTitle;\n+                    }\n+                }, Optional.empty());\n+\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                String dockerOutput;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1ODAzMw=="}, "originalCommit": {"oid": "a50d156936320e5fe4d513c2744e2479b2dd2cc6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjA2OTgzOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjowOTozOVrOHf8Bbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoxMDozM1rOHgUt-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MTMxMQ==", "bodyText": "Why do you need this sleep?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r503251311", "createdAt": "2020-10-12T12:09:39Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +66,53 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTkyOQ==", "bodyText": "Sometimes the test goes very fast and the record may have duration = 00:00:00.00,  I reduce sleep to 1 second.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r503655929", "createdAt": "2020-10-13T04:10:33Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +66,53 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MTMxMQ=="}, "originalCommit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjA3NTg1OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoxMTozMVrOHf8FEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoxMDo0MVrOHgUuHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjI0Mg==", "bodyText": "I think it is not guaranteed, that the command did finish, therefore you miss the logs in CI, which runs slower. This container is missing the appropriate Wait Strategy. LogMessageWaitStrategy seems to be a good candidate here.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r503252242", "createdAt": "2020-10-12T12:11:31Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +66,53 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(5);\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                    }\n+                }, Optional.empty());\n+\n+                String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {\n+                    String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                    container.withCopyFileToContainer(MountableFile.forHostPath(recordedFile), recordFileContainerPath)\n+                            .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                            .withStartupTimeout( Duration.ofMinutes(1) )\n+                            .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n+                            .start();\n+                    String ffmpegOutput = container.getLogs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1NTk2NA==", "bodyText": "done, thanks for your help", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r503655964", "createdAt": "2020-10-13T04:10:41Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +66,53 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(5);\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                    }\n+                }, Optional.empty());\n+\n+                String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                String flvFileNameRegEx = \"PASSED-\" + flvFileTitle + \".*\\\\.flv\";\n+                String recordedFile = vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(flvFileNameRegEx))[0].getCanonicalPath();\n+\n+                try( GenericContainer<?> container = new GenericContainer<>(TestcontainersConfiguration.getInstance().getVncDockerImageName()) ) {\n+                    String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                    container.withCopyFileToContainer(MountableFile.forHostPath(recordedFile), recordFileContainerPath)\n+                            .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                            .withStartupTimeout( Duration.ofMinutes(1) )\n+                            .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n+                            .start();\n+                    String ffmpegOutput = container.getLogs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MjI0Mg=="}, "originalCommit": {"oid": "6249e3d50194cdda36892a812951a76afc652cee"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM0MTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowMDozMlrOHviwUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMDowNjowMlrOHzincA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNDU0NA==", "bodyText": "Maybe this is my mistake from solving the merge conflict, but why is getVncDockerImageName() needed?\nCan't you use getVncRecordedContainerImage()? (which I admit, has probably a typo, the name is strange)", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519614544", "createdAt": "2020-11-09T08:00:32Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -105,6 +105,10 @@ public String getSocatContainerImage() {\n \n     @Deprecated\n     public String getVncRecordedContainerImage() {\n+        return getVncDockerImageName().asCanonicalNameString();\n+    }\n+\n+    public DockerImageName getVncDockerImageName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNjU3Ng==", "bodyText": "Done, thanks.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r523806576", "createdAt": "2020-11-15T20:06:02Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -105,6 +105,10 @@ public String getSocatContainerImage() {\n \n     @Deprecated\n     public String getVncRecordedContainerImage() {\n+        return getVncDockerImageName().asCanonicalNameString();\n+    }\n+\n+    public DockerImageName getVncDockerImageName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNDU0NA=="}, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM1MzE3OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowNDoxNFrOHvi27A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMDowNTo1NVrOHzinYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNjIzNg==", "bodyText": "You can remove those comments. They are our markers for generating code includes in the docs.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // recordAll {\n          \n          \n            \n                            // To do this, simply add extra parameters to the rule constructor:", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519616236", "createdAt": "2020-11-09T08:04:14Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNjU2Mw==", "bodyText": "Done, thanks.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r523806563", "createdAt": "2020-11-15T20:05:55Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNjIzNg=="}, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM1NzA2OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowNTozMVrOHvi5Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMDowNTo1MVrOHzinWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNjgwNw==", "bodyText": "Why sleep? Shouldn't we get a duration > 0 either way?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519616807", "createdAt": "2020-11-09T08:05:31Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNjU1Mw==", "bodyText": "Sometimes the test goes very fast and the record may have duration = 00:00:00.00, I reduced it to 500 milliseconds.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r523806553", "createdAt": "2020-11-15T20:05:51Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNjgwNw=="}, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzM3NDU5OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoxMTowOVrOHvjDlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQyMDowNTo0M1rOHzinMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxOTQ3Nw==", "bodyText": "Better to have a unique name here and also use this in the regex below (this was copied from the test above).", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r519619477", "createdAt": "2020-11-09T08:11:09Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(1);\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                    }\n+                }, Optional.empty());\n+\n+                String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgwNjUxMg==", "bodyText": "Done, thanks.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r523806512", "createdAt": "2020-11-15T20:05:43Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,55 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordAll {\n+                // To do this, simply add extra parameters to the rule constructor:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.SECONDS.sleep(1);\n+                doSimpleExplore(chrome);\n+                chrome.afterTest(new TestDescription() {\n+                    @Override\n+                    public String getTestId() {\n+                        return getFilesystemFriendlyName();\n+                    }\n+\n+                    @Override\n+                    public String getFilesystemFriendlyName() {\n+                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                    }\n+                }, Optional.empty());\n+\n+                String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxOTQ3Nw=="}, "originalCommit": {"oid": "eb9a077456ec916e1093cd7d97860138f51c1934"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjE0NDY3OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozODoyMVrOHz0eww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozODoyMVrOHz0eww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5OTI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            TimeUnit.MILLISECONDS.sleep(500);\n          \n          \n            \n                            TimeUnit.MILLISECONDS.sleep(500); // to make sure video will have a duration", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r524099267", "createdAt": "2020-11-16T10:38:21Z", "author": {"login": "kiview"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -59,6 +68,54 @@ public String getFilesystemFriendlyName() {\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            String flvFileTitle = \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target)\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                chrome.start();\n+\n+                TimeUnit.MILLISECONDS.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fdd4a064c8e7cedd9050d03013cbdb4d97849df"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzk5MzA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNTo1NFrOH0GqTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNTo1NFrOH0GqTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NzEzMw==", "bodyText": "Since commenting doesn't seem to reopen the issue, I have to make a new one https://github.com/testcontainers/testcontainers-java/pull/3180/files#r524394794\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String newFlvOutput = \"/newScreen.flv\";\n          \n          \n            \n                    execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);\n          \n          \n            \n                    String newFlvOutput = \"/newScreen.mp4\";\n          \n          \n            \n                    execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", \"-movflags\", \"faststart\", newFlvOutput);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r524397133", "createdAt": "2020-11-16T16:25:54Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -87,19 +88,27 @@ protected void configure() {\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        reencodeRecording();\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n                 dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n-        }\n+    private void reencodeRecording() throws IOException, InterruptedException {\n+        String newFlvOutput = \"/newScreen.flv\";\n+        execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46810984dd4bfe752be80529aeb261741076951a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzQwNjMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDowODo0N1rOID6USw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOToxNTo0OVrOIEpM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MjEwNw==", "bodyText": "What about @NonNull for the parameters", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540972107", "createdAt": "2020-12-11T14:08:47Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -97,18 +106,44 @@ public void saveRecordingToFile(File file) {\n \n     @SneakyThrows\n     public InputStream streamRecording() {\n-        reencodeRecording();\n+        String newRecordingFileName = recordingFormat.reencodeRecording(this, ORIGINAL_RECORDING_FILE_NAME);\n \n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n-                dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n+                dockerClient.copyArchiveFromContainerCmd(getContainerId(), newRecordingFileName).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    private void reencodeRecording() throws IOException, InterruptedException {\n-        String newFlvOutput = \"/newScreen.flv\";\n-        execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);\n-        execInContainer(\"mv\" , \"-f\", newFlvOutput, RECORDING_FILE_NAME);\n+\n+    public enum VncRecordingFormat {\n+        FLV(\"flv\") {\n+            @Override\n+            String reencodeRecording(VncRecordingContainer container, String source) throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc0MDI3MQ==", "bodyText": "Done, Thanks", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r541740271", "createdAt": "2020-12-12T19:15:49Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -97,18 +106,44 @@ public void saveRecordingToFile(File file) {\n \n     @SneakyThrows\n     public InputStream streamRecording() {\n-        reencodeRecording();\n+        String newRecordingFileName = recordingFormat.reencodeRecording(this, ORIGINAL_RECORDING_FILE_NAME);\n \n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n-                dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n+                dockerClient.copyArchiveFromContainerCmd(getContainerId(), newRecordingFileName).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    private void reencodeRecording() throws IOException, InterruptedException {\n-        String newFlvOutput = \"/newScreen.flv\";\n-        execInContainer(\"ffmpeg\" , \"-i\", RECORDING_FILE_NAME, \"-vcodec\", \"libx264\", newFlvOutput);\n-        execInContainer(\"mv\" , \"-f\", newFlvOutput, RECORDING_FILE_NAME);\n+\n+    public enum VncRecordingFormat {\n+        FLV(\"flv\") {\n+            @Override\n+            String reencodeRecording(VncRecordingContainer container, String source) throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MjEwNw=="}, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzQxNjQ4OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoxMToyMVrOID6acg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOToxNTo0MlrOIEpMng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MzY4Mg==", "bodyText": "I would not break existing interfaces and update this method", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540973682", "createdAt": "2020-12-11T14:11:21Z", "author": {"login": "leonard84"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "diffHunk": "@@ -1,15 +1,16 @@\n package org.testcontainers.containers;\n \n import org.junit.runner.Description;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n \n import java.io.File;\n \n public interface RecordingFileFactory {\n \n     @Deprecated\n-    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded) {\n-        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded);\n+    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded, VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc0MDE5MA==", "bodyText": "Done, I canceled the changes.\nThanks", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r541740190", "createdAt": "2020-12-12T19:15:42Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "diffHunk": "@@ -1,15 +1,16 @@\n package org.testcontainers.containers;\n \n import org.junit.runner.Description;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n \n import java.io.File;\n \n public interface RecordingFileFactory {\n \n     @Deprecated\n-    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded) {\n-        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded);\n+    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded, VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3MzY4Mg=="}, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzQ2Mjg2OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoyMToyMVrOID616A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOToxNTozNVrOIEpMZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MDcxMg==", "bodyText": "This breaks existing implementations, I'm not sure what the most elegant solution would be.\nThis would create a stackoverflow if you don't implement any of the new methods, but if you already have one that is using the three param recordingFileForTest it would work.\n@Deprecated\ndefault File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) { \n    return recordingFileForTest(vncRecordingDirectory, prefix, boolean, null);\n}\n    default File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat) {\n    return recordingFileForTest(vncRecordingDirectory, prefix, boolean);\n}\nThe alternative would be to just return null from the three param default method, since our code would call the four param version. In any case we would need to add default methods so that users are not forced to implement an unused method.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540980712", "createdAt": "2020-12-11T14:21:21Z", "author": {"login": "leonard84"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "diffHunk": "@@ -1,15 +1,16 @@\n package org.testcontainers.containers;\n \n import org.junit.runner.Description;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n \n import java.io.File;\n \n public interface RecordingFileFactory {\n \n     @Deprecated\n-    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded) {\n-        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded);\n+    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded, VncRecordingFormat recordingFormat) {\n+        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded, recordingFormat);\n     }\n \n-    File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded);\n+    File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTc0MDEzNA==", "bodyText": "Indeed, I used Default for the new method, so user can implement it only if mp4 is desired, or setting flv explicitly.\nI canceled the changes in the three params method, I didn't use Deprecated and I considered It as a legitimate method (recording with default format).\nThanks.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r541740134", "createdAt": "2020-12-12T19:15:35Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/RecordingFileFactory.java", "diffHunk": "@@ -1,15 +1,16 @@\n package org.testcontainers.containers;\n \n import org.junit.runner.Description;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n \n import java.io.File;\n \n public interface RecordingFileFactory {\n \n     @Deprecated\n-    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded) {\n-        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded);\n+    default File recordingFileForTest(File vncRecordingDirectory, Description description, boolean succeeded, VncRecordingFormat recordingFormat) {\n+        return recordingFileForTest(vncRecordingDirectory, description.getTestClass().getSimpleName() + \"-\" + description.getMethodName(), succeeded, recordingFormat);\n     }\n \n-    File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded);\n+    File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MDcxMg=="}, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzQ2OTMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoyMjozMlrOID65hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOToxNDo1NVrOIEpKyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MTYzOQ==", "bodyText": "Add @NonNull", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540981639", "createdAt": "2020-12-11T14:22:32Z", "author": {"login": "leonard84"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,57 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTczOTcyMg==", "bodyText": "Done, Thanks", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r541739722", "createdAt": "2020-12-12T19:14:55Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,57 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(File file) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MTYzOQ=="}, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzQ3MzgxOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNDoyMzozNFrOID68Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxOToxNDo1MVrOIEpKpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MjMyNw==", "bodyText": "@NonNull should also be added where it applies", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r540982327", "createdAt": "2020-12-11T14:23:34Z", "author": {"login": "leonard84"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -358,8 +361,13 @@ public SELF withLinkToContainer(LinkableContainer otherContainer, String alias)\n     }\n \n     public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory) {\n+        return withRecordingMode(recordingMode, vncRecordingDirectory, null);\n+    }\n+\n+    public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTczOTY4Ng==", "bodyText": "I used @Nullable instead for recordingFormat.\nthanks.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r541739686", "createdAt": "2020-12-12T19:14:51Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -358,8 +361,13 @@ public SELF withLinkToContainer(LinkableContainer otherContainer, String alias)\n     }\n \n     public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory) {\n+        return withRecordingMode(recordingMode, vncRecordingDirectory, null);\n+    }\n+\n+    public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MjMyNw=="}, "originalCommit": {"oid": "8b78a9ce4ea9a90661935e5db6d87aa26b858fe0"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI4OTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowMzoxOFrOIg-q5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTowN1rOIi-B7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjEzMw==", "bodyText": "shouldn't it be withVideoFormat?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452133", "createdAt": "2021-02-06T16:03:18Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -71,6 +74,13 @@ public VncRecordingContainer withVncPort(int vncPort) {\n         return this;\n     }\n \n+    public VncRecordingContainer withVideoExtension(VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzODc5OQ==", "bodyText": "Yes, I think it's a better name, Done.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573538799", "createdAt": "2021-02-10T08:39:07Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -71,6 +74,13 @@ public VncRecordingContainer withVncPort(int vncPort) {\n         return this;\n     }\n \n+    public VncRecordingContainer withVideoExtension(VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjEzMw=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI4OTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowMzoyOFrOIg-q7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOToxMlrOIi-CKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try(InputStream inputStream = streamRecording()) {\n          \n          \n            \n                    try (InputStream inputStream = streamRecording()) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452143", "createdAt": "2021-02-06T16:03:28Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,69 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(@NonNull File file) {\n+        try(InputStream inputStream = streamRecording()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzODg1OQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573538859", "createdAt": "2021-02-10T08:39:12Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,69 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(@NonNull File file) {\n+        try(InputStream inputStream = streamRecording()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjE0Mw=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5MDMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNDoyNlrOIg-rXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTozNlrOIi-DMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjI1Mg==", "bodyText": "what's the purpose of this method?", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452252", "createdAt": "2021-02-06T16:04:26Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,69 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(@NonNull File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        String newRecordingFileName = recordingFormat.reencodeRecording(this, ORIGINAL_RECORDING_FILE_NAME);\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n-                dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n+                dockerClient.copyArchiveFromContainerCmd(getContainerId(), newRecordingFileName).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+\n+    public enum VncRecordingFormat {\n+        FLV(\"flv\") {\n+            @Override\n+            String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {\n+                String newFileOutput = \"/newScreen.flv\";\n+                container.execInContainer(\"ffmpeg\" , \"-i\", source, \"-vcodec\", \"libx264\", newFileOutput);\n+                return newFileOutput;\n+            }\n+        },\n+        MP4(\"mp4\") {\n+            @Override\n+            String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {\n+                String newFileOutput = \"/newScreen.mp4\";\n+                container.execInContainer(\"ffmpeg\" , \"-i\", source, \"-vcodec\", \"libx264\", \"-movflags\", \"faststart\", newFileOutput);\n+                return newFileOutput;\n+            }\n+        };\n+\n+        abstract String reencodeRecording(VncRecordingContainer container, String source) throws IOException, InterruptedException;\n+\n+        private static final VncRecordingFormat DEFAULT_FORMAT = FLV;\n+        private final String filenameExtension;\n+\n+        VncRecordingFormat(String filenameExtension) {\n+            this.filenameExtension = filenameExtension;\n+        }\n+\n+        public String getExtension() {\n+            return filenameExtension;\n+        }\n+\n+        /**\n+         * @return {@code vncRecordingFormat} value if not null, otherwise, {@link VncRecordingFormat#FLV} will be returned as a default format.\n+         */\n+        public static VncRecordingFormat of(VncRecordingFormat vncRecordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTEyMQ==", "bodyText": "Just in case of null, so It can fall back to the default format. Indeed I wasn't sure If it was necessary, but just in case, to prevent a possible NullPointerException.\nBut I get rid of it for now, thanks.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539121", "createdAt": "2021-02-10T08:39:36Z", "author": {"login": "oussamabadr"}, "path": "core/src/main/java/org/testcontainers/containers/VncRecordingContainer.java", "diffHunk": "@@ -83,23 +93,69 @@ protected void configure() {\n         setCommand(\n                 \"-c\",\n                 \"echo '\" + encodedPassword + \"' | base64 -d > /vnc_password && \" +\n-                        \"flvrec.py -o \" + RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n+                        \"flvrec.py -o \" + ORIGINAL_RECORDING_FILE_NAME + \" -d -r \" + frameRate + \" -P /vnc_password \" + targetNetworkAlias + \" \" + vncPort\n         );\n     }\n \n+    @SneakyThrows\n+    public void saveRecordingToFile(@NonNull File file) {\n+        try(InputStream inputStream = streamRecording()) {\n+            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+        }\n+    }\n+\n     @SneakyThrows\n     public InputStream streamRecording() {\n+        String newRecordingFileName = recordingFormat.reencodeRecording(this, ORIGINAL_RECORDING_FILE_NAME);\n+\n         TarArchiveInputStream archiveInputStream = new TarArchiveInputStream(\n-                dockerClient.copyArchiveFromContainerCmd(getContainerId(), RECORDING_FILE_NAME).exec()\n+                dockerClient.copyArchiveFromContainerCmd(getContainerId(), newRecordingFileName).exec()\n         );\n         archiveInputStream.getNextEntry();\n         return archiveInputStream;\n     }\n \n-    @SneakyThrows\n-    public void saveRecordingToFile(File file) {\n-        try(InputStream inputStream = streamRecording()) {\n-            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+\n+    public enum VncRecordingFormat {\n+        FLV(\"flv\") {\n+            @Override\n+            String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {\n+                String newFileOutput = \"/newScreen.flv\";\n+                container.execInContainer(\"ffmpeg\" , \"-i\", source, \"-vcodec\", \"libx264\", newFileOutput);\n+                return newFileOutput;\n+            }\n+        },\n+        MP4(\"mp4\") {\n+            @Override\n+            String reencodeRecording(@NonNull VncRecordingContainer container, @NonNull String source) throws IOException, InterruptedException {\n+                String newFileOutput = \"/newScreen.mp4\";\n+                container.execInContainer(\"ffmpeg\" , \"-i\", source, \"-vcodec\", \"libx264\", \"-movflags\", \"faststart\", newFileOutput);\n+                return newFileOutput;\n+            }\n+        };\n+\n+        abstract String reencodeRecording(VncRecordingContainer container, String source) throws IOException, InterruptedException;\n+\n+        private static final VncRecordingFormat DEFAULT_FORMAT = FLV;\n+        private final String filenameExtension;\n+\n+        VncRecordingFormat(String filenameExtension) {\n+            this.filenameExtension = filenameExtension;\n+        }\n+\n+        public String getExtension() {\n+            return filenameExtension;\n+        }\n+\n+        /**\n+         * @return {@code vncRecordingFormat} value if not null, otherwise, {@link VncRecordingFormat#FLV} will be returned as a default format.\n+         */\n+        public static VncRecordingFormat of(VncRecordingFormat vncRecordingFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjI1Mg=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5MDkzOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNToyMVrOIg-rqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTozOVrOIi-DUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjMyOA==", "bodyText": "Let's not make it Nullable:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, @Nullable VncRecordingFormat recordingFormat) {\n          \n          \n            \n                public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, VncRecordingFormat recordingFormat) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452328", "createdAt": "2021-02-06T16:05:21Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -358,8 +361,13 @@ public SELF withLinkToContainer(LinkableContainer otherContainer, String alias)\n     }\n \n     public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory) {\n+        return withRecordingMode(recordingMode, vncRecordingDirectory, null);\n+    }\n+\n+    public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, @Nullable VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTE1NA==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539154", "createdAt": "2021-02-10T08:39:39Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -358,8 +361,13 @@ public SELF withLinkToContainer(LinkableContainer otherContainer, String alias)\n     }\n \n     public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory) {\n+        return withRecordingMode(recordingMode, vncRecordingDirectory, null);\n+    }\n+\n+    public SELF withRecordingMode(VncRecordingMode recordingMode, File vncRecordingDirectory, @Nullable VncRecordingFormat recordingFormat) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjMyOA=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5MTc5OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNTo1MlrOIg-sBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTo0MlrOIi-DbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjQyMw==", "bodyText": "Should not be null:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        VncRecordingFormat.of(recordingFormat).getExtension()\n          \n          \n            \n                        recordingFormat.getExtension()", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452423", "createdAt": "2021-02-06T16:05:52Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "diffHunk": "@@ -4,20 +4,29 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n+import static org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+\n public class DefaultRecordingFileFactory implements RecordingFileFactory {\n \n     private static final SimpleDateFormat filenameDateFormat = new SimpleDateFormat(\"YYYYMMdd-HHmmss\");\n     private static final String PASSED = \"PASSED\";\n     private static final String FAILED = \"FAILED\";\n-    private static final String FILENAME_FORMAT = \"%s-%s-%s.flv\";\n+    private static final String FILENAME_FORMAT = \"%s-%s-%s.%s\";\n+\n \n     @Override\n     public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) {\n+        return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);\n+    }\n+\n+    @Override\n+    public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat) {\n         final String resultMarker = succeeded ? PASSED : FAILED;\n         final String fileName = String.format(FILENAME_FORMAT,\n             resultMarker,\n             prefix,\n-            filenameDateFormat.format(new Date())\n+            filenameDateFormat.format(new Date()),\n+            VncRecordingFormat.of(recordingFormat).getExtension()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTE4MQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539181", "createdAt": "2021-02-10T08:39:42Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "diffHunk": "@@ -4,20 +4,29 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n+import static org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+\n public class DefaultRecordingFileFactory implements RecordingFileFactory {\n \n     private static final SimpleDateFormat filenameDateFormat = new SimpleDateFormat(\"YYYYMMdd-HHmmss\");\n     private static final String PASSED = \"PASSED\";\n     private static final String FAILED = \"FAILED\";\n-    private static final String FILENAME_FORMAT = \"%s-%s-%s.flv\";\n+    private static final String FILENAME_FORMAT = \"%s-%s-%s.%s\";\n+\n \n     @Override\n     public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) {\n+        return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);\n+    }\n+\n+    @Override\n+    public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded, VncRecordingFormat recordingFormat) {\n         final String resultMarker = succeeded ? PASSED : FAILED;\n         final String fileName = String.format(FILENAME_FORMAT,\n             resultMarker,\n             prefix,\n-            filenameDateFormat.format(new Date())\n+            filenameDateFormat.format(new Date()),\n+            VncRecordingFormat.of(recordingFormat).getExtension()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjQyMw=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5MjQwOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNjoyNFrOIg-sTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTo0NVrOIi-DmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);\n          \n          \n            \n                    return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, VncRecordingFormat.FLV);", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452494", "createdAt": "2021-02-06T16:06:24Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "diffHunk": "@@ -4,20 +4,29 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n+import static org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+\n public class DefaultRecordingFileFactory implements RecordingFileFactory {\n \n     private static final SimpleDateFormat filenameDateFormat = new SimpleDateFormat(\"YYYYMMdd-HHmmss\");\n     private static final String PASSED = \"PASSED\";\n     private static final String FAILED = \"FAILED\";\n-    private static final String FILENAME_FORMAT = \"%s-%s-%s.flv\";\n+    private static final String FILENAME_FORMAT = \"%s-%s-%s.%s\";\n+\n \n     @Override\n     public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) {\n+        return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTIyNQ==", "bodyText": "Done, but with a little difference, tell me if it's ok for you.", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539225", "createdAt": "2021-02-10T08:39:45Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/main/java/org/testcontainers/containers/DefaultRecordingFileFactory.java", "diffHunk": "@@ -4,20 +4,29 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n \n+import static org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+\n public class DefaultRecordingFileFactory implements RecordingFileFactory {\n \n     private static final SimpleDateFormat filenameDateFormat = new SimpleDateFormat(\"YYYYMMdd-HHmmss\");\n     private static final String PASSED = \"PASSED\";\n     private static final String FAILED = \"FAILED\";\n-    private static final String FILENAME_FORMAT = \"%s-%s-%s.flv\";\n+    private static final String FILENAME_FORMAT = \"%s-%s-%s.%s\";\n+\n \n     @Override\n     public File recordingFileForTest(File vncRecordingDirectory, String prefix, boolean succeeded) {\n+        return recordingFileForTest(vncRecordingDirectory, prefix, succeeded, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjQ5NA=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5MzYzOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowNzozM1rOIg-s2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTo1MVrOIi-D0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n          \n          \n            \n                        try (GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\"))) {", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452632", "createdAt": "2021-02-06T16:07:33Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTI4MA==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539280", "createdAt": "2021-02-10T08:39:51Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjYzMg=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5NDMzOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODowMVrOIg-tJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTo1NVrOIi-D-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .waitingFor( new LogMessageWaitStrategy()\n          \n          \n            \n                                    .waitingFor(new LogMessageWaitStrategy()", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452710", "createdAt": "2021-02-06T16:08:01Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                        .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n+                        .waitingFor( new LogMessageWaitStrategy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTMyMQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539321", "createdAt": "2021-02-10T08:39:55Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                        .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n+                        .waitingFor( new LogMessageWaitStrategy()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjcxMA=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5NDUyOnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODowOFrOIg-tPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODozOTo1OFrOIi-EFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )\n          \n          \n            \n                                    .withCommand(\"-i\", recordFileContainerPath, \"-f\" ,\"null\" ,\"-\")", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452732", "createdAt": "2021-02-06T16:08:08Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                        .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTM0OA==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539348", "createdAt": "2021-02-10T08:39:58Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n+                        .withCommand(\"-i\" , recordFileContainerPath, \"-f\" ,\"null\" ,\"-\" )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1MjczMg=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMTI5NDc5OnYy", "diffSide": "RIGHT", "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNlQxNjowODoyNVrOIg-tXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwODo0MDowMlrOIi-EVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1Mjc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )\n          \n          \n            \n                                    .withCreateContainerCmdModifier(createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\"))", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r571452764", "createdAt": "2021-02-06T16:08:25Z", "author": {"login": "bsideup"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzUzOTQxNQ==", "bodyText": "Done", "url": "https://github.com/testcontainers/testcontainers-java/pull/3180#discussion_r573539415", "createdAt": "2021-02-10T08:40:02Z", "author": {"login": "oussamabadr"}, "path": "modules/selenium/src/test/java/org/testcontainers/junit/ChromeRecordingWebDriverContainerTest.java", "diffHunk": "@@ -10,55 +10,143 @@\n import org.openqa.selenium.chrome.ChromeOptions;\n import org.testcontainers.containers.BrowserWebDriverContainer;\n import org.testcontainers.containers.DefaultRecordingFileFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.VncRecordingContainer;\n+import org.testcontainers.containers.VncRecordingContainer.VncRecordingFormat;\n+import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;\n import org.testcontainers.lifecycle.TestDescription;\n+import org.testcontainers.utility.DockerImageName;\n+import org.testcontainers.utility.MountableFile;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.time.Duration;\n import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n+import static java.time.temporal.ChronoUnit.SECONDS;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_ALL;\n import static org.testcontainers.containers.BrowserWebDriverContainer.VncRecordingMode.RECORD_FAILING;\n \n @RunWith(Enclosed.class)\n public class ChromeRecordingWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n+    /**\n+     * Guaranty a minimum video length for FFmpeg re-encoding.\n+     * @see VncRecordingFormat#reencodeRecording(VncRecordingContainer, String)\n+     */\n+    private static final int MINIMUM_VIDEO_DURATION_MILLISECONDS = 200;\n+\n     public static class ChromeThatRecordsAllTests {\n \n         @Rule\n         public TemporaryFolder vncRecordingDirectory = new TemporaryFolder();\n \n         @Test\n-        public void recordingTestThatShouldBeRecordedAndRetained() {\n+        public void recordingTestThatShouldBeRecordedAndRetainedInFlvFormatAsDefault() throws InterruptedException {\n             File target = vncRecordingDirectory.getRoot();\n             try (\n                 // recordAll {\n-                // To do this, simply add extra parameters to the rule constructor:\n+                // To do this, simply add extra parameters to the rule constructor, so video will default to FLV format:\n                 BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n                     .withCapabilities(new ChromeOptions())\n                     .withRecordingMode(RECORD_ALL, target)\n                     // }\n                     .withRecordingFileFactory(new DefaultRecordingFileFactory())\n                     .withNetwork(NETWORK)\n             ) {\n-                chrome.start();\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n \n-                doSimpleExplore(chrome);\n-                chrome.afterTest(new TestDescription() {\n-                    @Override\n-                    public String getTestId() {\n-                        return getFilesystemFriendlyName();\n-                    }\n+        private File[] runSimpleExploreInContainer(BrowserWebDriverContainer<?> container, String fileNamePattern) throws InterruptedException {\n+            container.start();\n \n-                    @Override\n-                    public String getFilesystemFriendlyName() {\n-                        return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n-                    }\n-                }, Optional.empty());\n+            TimeUnit.MILLISECONDS.sleep(MINIMUM_VIDEO_DURATION_MILLISECONDS);\n+            doSimpleExplore(container);\n+            container.afterTest(new TestDescription() {\n+                @Override\n+                public String getTestId() {\n+                    return getFilesystemFriendlyName();\n+                }\n+\n+                @Override\n+                public String getFilesystemFriendlyName() {\n+                    return \"ChromeThatRecordsAllTests-recordingTestThatShouldBeRecordedAndRetained\";\n+                }\n+            }, Optional.empty());\n+\n+            return vncRecordingDirectory.getRoot().listFiles(new PatternFilenameFilter(fileNamePattern));\n+        }\n \n-                String[] files = vncRecordingDirectory.getRoot().list(new PatternFilenameFilter(\"PASSED-.*\\\\.flv\"));\n+        @Test\n+        public void recordingTestShouldHaveFlvExtension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordFlv {\n+                // Set (explicitly) FLV format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.FLV)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n                 assertEquals(\"Recorded file not found\", 1, files.length);\n             }\n         }\n+\n+        @Test\n+        public void recordingTestShouldHaveMp4Extension() throws InterruptedException {\n+            File target = vncRecordingDirectory.getRoot();\n+            try (\n+                // recordMp4 {\n+                // Set MP4 format for recorded video:\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, target, VncRecordingFormat.MP4)\n+                    // }\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] files = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.mp4\");\n+                assertEquals(\"Recorded file not found\", 1, files.length);\n+            }\n+        }\n+\n+        @Test\n+        public void recordingTestThatShouldHaveCorrectDuration() throws IOException, InterruptedException {\n+            MountableFile mountableFile;\n+            try (\n+                BrowserWebDriverContainer<?> chrome = new BrowserWebDriverContainer<>()\n+                    .withCapabilities(new ChromeOptions())\n+                    .withRecordingMode(RECORD_ALL, vncRecordingDirectory.getRoot())\n+                    .withRecordingFileFactory(new DefaultRecordingFileFactory())\n+                    .withNetwork(NETWORK)\n+            ) {\n+                File[] recordedFiles = runSimpleExploreInContainer(chrome, \"PASSED-.*\\\\.flv\");\n+                mountableFile = MountableFile.forHostPath(recordedFiles[0].getCanonicalPath());\n+            }\n+\n+            try( GenericContainer<?> container = new GenericContainer<>(DockerImageName.parse(\"testcontainers/vnc-recorder:1.2.0\")) ) {\n+                String recordFileContainerPath = \"/tmp/chromeTestRecord.flv\";\n+                container.withCopyFileToContainer(mountableFile, recordFileContainerPath)\n+                        .withCreateContainerCmdModifier( createContainerCmd -> createContainerCmd.withEntrypoint(\"ffmpeg\") )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTQ1Mjc2NA=="}, "originalCommit": {"oid": "3757cfd8b3e46b879deb35c8f8d1ae8c6f14498b"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}