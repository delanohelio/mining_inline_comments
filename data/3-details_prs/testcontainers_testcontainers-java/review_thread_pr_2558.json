{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzcyNTk1", "number": 2558, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyMDo1OFrODxFGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDozNjo0NFrODxF0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkwMzc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyMDo1OFrOGEXoSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyNDo1OFrOGEXqPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNDYzNQ==", "bodyText": "Why is try necessary after the future is done?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407234635", "createdAt": "2020-04-12T18:20:58Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -95,4 +92,21 @@ protected final String resolve() {\n             throw new ContainerFetchException(\"Failed to get Docker client for \" + imageName, e);\n         }\n     }\n+\n+    private DockerImageName getImageName() throws InterruptedException, ExecutionException {\n+        return imageNameFuture.get();\n+    }\n+\n+    @ToString.Include(name = \"imageName\", rank = 1)\n+    private String imageNameToString() {\n+        if (!imageNameFuture.isDone()) {\n+            return \"<resolving>\";\n+        }\n+\n+        try {\n+            return getImageName().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTEzNA==", "bodyText": "you need to get the value from the future. Unless I miss something \ud83d\ude05", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407235134", "createdAt": "2020-04-12T18:24:58Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -95,4 +92,21 @@ protected final String resolve() {\n             throw new ContainerFetchException(\"Failed to get Docker client for \" + imageName, e);\n         }\n     }\n+\n+    private DockerImageName getImageName() throws InterruptedException, ExecutionException {\n+        return imageNameFuture.get();\n+    }\n+\n+    @ToString.Include(name = \"imageName\", rank = 1)\n+    private String imageNameToString() {\n+        if (!imageNameFuture.isDone()) {\n+            return \"<resolving>\";\n+        }\n+\n+        try {\n+            return getImageName().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNDYzNQ=="}, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkwNTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyMzowNVrOGEXpKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MjozOVrOGEXxsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNDg1OQ==", "bodyText": "Why random string?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407234859", "createdAt": "2020-04-12T18:23:05Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.images;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.Test;\n+import org.testcontainers.utility.Base58;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class RemoteDockerImageTest {\n+\n+    @Test\n+    public void toStringContainsOnlyImageName() {\n+        String imageName = Base58.randomString(8).toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNDk1Ng==", "bodyText": "why not? :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407234956", "createdAt": "2020-04-12T18:23:48Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.images;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.Test;\n+import org.testcontainers.utility.Base58;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class RemoteDockerImageTest {\n+\n+    @Test\n+    public void toStringContainsOnlyImageName() {\n+        String imageName = Base58.randomString(8).toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNDg1OQ=="}, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzA0MQ==", "bodyText": "Because constant example string seems more controlled to me.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407237041", "createdAt": "2020-04-12T18:42:39Z", "author": {"login": "kiview"}, "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.images;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.Test;\n+import org.testcontainers.utility.Base58;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class RemoteDockerImageTest {\n+\n+    @Test\n+    public void toStringContainsOnlyImageName() {\n+        String imageName = Base58.randomString(8).toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNDg1OQ=="}, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzkxMDM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODoyODowN1rOGEXrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxODo0MjoyN1rOGEXxoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTQ3NA==", "bodyText": "This caught me by surprise - in case of a failure, why would we not rethrow? At first sight it seems odd that an exception message could become the 'name' of the image...", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407235474", "createdAt": "2020-04-12T18:28:07Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -95,4 +92,21 @@ protected final String resolve() {\n             throw new ContainerFetchException(\"Failed to get Docker client for \" + imageName, e);\n         }\n     }\n+\n+    private DockerImageName getImageName() throws InterruptedException, ExecutionException {\n+        return imageNameFuture.get();\n+    }\n+\n+    @ToString.Include(name = \"imageName\", rank = 1)\n+    private String imageNameToString() {\n+        if (!imageNameFuture.isDone()) {\n+            return \"<resolving>\";\n+        }\n+\n+        try {\n+            return getImageName().toString();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return e.getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTY2OA==", "bodyText": "this is for toString() - it would be weird to rethrow from toString IMO. Instead, we return the message, so that RemoveDockerImage#toString shows that there was an exception", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407235668", "createdAt": "2020-04-12T18:29:37Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -95,4 +92,21 @@ protected final String resolve() {\n             throw new ContainerFetchException(\"Failed to get Docker client for \" + imageName, e);\n         }\n     }\n+\n+    private DockerImageName getImageName() throws InterruptedException, ExecutionException {\n+        return imageNameFuture.get();\n+    }\n+\n+    @ToString.Include(name = \"imageName\", rank = 1)\n+    private String imageNameToString() {\n+        if (!imageNameFuture.isDone()) {\n+            return \"<resolving>\";\n+        }\n+\n+        try {\n+            return getImageName().toString();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return e.getMessage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTQ3NA=="}, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNjY2MQ==", "bodyText": "Fair enough - I guess we can't do too much more than this.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407236661", "createdAt": "2020-04-12T18:38:55Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -95,4 +92,21 @@ protected final String resolve() {\n             throw new ContainerFetchException(\"Failed to get Docker client for \" + imageName, e);\n         }\n     }\n+\n+    private DockerImageName getImageName() throws InterruptedException, ExecutionException {\n+        return imageNameFuture.get();\n+    }\n+\n+    @ToString.Include(name = \"imageName\", rank = 1)\n+    private String imageNameToString() {\n+        if (!imageNameFuture.isDone()) {\n+            return \"<resolving>\";\n+        }\n+\n+        try {\n+            return getImageName().toString();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return e.getMessage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTQ3NA=="}, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNzAyNA==", "bodyText": "Yes, might create some nasty bugs if rethrowing.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407237024", "createdAt": "2020-04-12T18:42:27Z", "author": {"login": "kiview"}, "path": "core/src/main/java/org/testcontainers/images/RemoteDockerImage.java", "diffHunk": "@@ -95,4 +92,21 @@ protected final String resolve() {\n             throw new ContainerFetchException(\"Failed to get Docker client for \" + imageName, e);\n         }\n     }\n+\n+    private DockerImageName getImageName() throws InterruptedException, ExecutionException {\n+        return imageNameFuture.get();\n+    }\n+\n+    @ToString.Include(name = \"imageName\", rank = 1)\n+    private String imageNameToString() {\n+        if (!imageNameFuture.isDone()) {\n+            return \"<resolving>\";\n+        }\n+\n+        try {\n+            return getImageName().toString();\n+        } catch (InterruptedException | ExecutionException e) {\n+            return e.getMessage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIzNTQ3NA=="}, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODAxODg2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDozNDoyMVrOGEYgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDozNDoyMVrOGEYgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0ODk4OQ==", "bodyText": "Looks like this method name doesn't really match the contents anymore", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407248989", "createdAt": "2020-04-12T20:34:21Z", "author": {"login": "dbyron0"}, "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.images;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.Test;\n+import org.testcontainers.utility.Base58;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class RemoteDockerImageTest {\n+\n+    @Test\n+    public void toStringContainsOnlyImageName() {\n+        String imageName = Base58.randomString(8).toLowerCase();\n+        RemoteDockerImage remoteDockerImage = new RemoteDockerImage(imageName);\n+        assertThat(remoteDockerImage.toString(), containsString(\"imageName=\" + imageName));\n+    }\n+\n+    @Test\n+    public void toStringWithExceptionContainsOnlyImageNameFuture()  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODAyMTA3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDozNjo0NFrOGEYhZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDozNjo0NFrOGEYhZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0OTI1Mw==", "bodyText": "This method name came to be back when there was a choice between imageName and imageNameFuture.  Maybe a better name now is toStringWithCompletedImageName ?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2558#discussion_r407249253", "createdAt": "2020-04-12T20:36:44Z", "author": {"login": "dbyron0"}, "path": "core/src/test/java/org/testcontainers/images/RemoteDockerImageTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.testcontainers.images;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+import org.junit.Test;\n+import org.testcontainers.utility.Base58;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class RemoteDockerImageTest {\n+\n+    @Test\n+    public void toStringContainsOnlyImageName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5c42d1014057473a6c985f9d79f84440033b067"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1550, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}