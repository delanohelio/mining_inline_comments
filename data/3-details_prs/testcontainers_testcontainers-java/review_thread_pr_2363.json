{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Njg3OTc1", "number": 2363, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMDozMFrODg-dXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMjoyNlrODg-fXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA0MzUwOnYy", "diffSide": "RIGHT", "path": "core/src/test/resources/internal-port-check-dockerfile/Dockerfile-bash", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMDozMFrOFrerKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMzozM1rOFrewAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNTY1OQ==", "bodyText": "the warning is not relevant here, isn't it?", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381135659", "createdAt": "2020-02-19T08:20:30Z", "author": {"login": "bsideup"}, "path": "core/src/test/resources/internal-port-check-dockerfile/Dockerfile-bash", "diffHunk": "@@ -0,0 +1,12 @@\n+# If you ever upgrade this image, watch out for bash being installed by default in newer alpine base images", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNjg5Ng==", "bodyText": "True, I can remove it there", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381136896", "createdAt": "2020-02-19T08:23:33Z", "author": {"login": "codablock"}, "path": "core/src/test/resources/internal-port-check-dockerfile/Dockerfile-bash", "diffHunk": "@@ -0,0 +1,12 @@\n+# If you ever upgrade this image, watch out for bash being installed by default in newer alpine base images", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNTY1OQ=="}, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA0NDY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/resources/internal-port-check-dockerfile/Dockerfile-tcp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMDo1OFrOFrer4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMzo0N1rOFrewdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNTg0MA==", "bodyText": "consider adding RUN that will test the absence of bash instead of a text warning", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381135840", "createdAt": "2020-02-19T08:20:58Z", "author": {"login": "bsideup"}, "path": "core/src/test/resources/internal-port-check-dockerfile/Dockerfile-tcp", "diffHunk": "@@ -0,0 +1,7 @@\n+# If you ever upgrade this image, watch out for bash being installed by default in newer alpine base images", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNzAxMw==", "bodyText": "Sounds good, will do so", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381137013", "createdAt": "2020-02-19T08:23:47Z", "author": {"login": "codablock"}, "path": "core/src/test/resources/internal-port-check-dockerfile/Dockerfile-tcp", "diffHunk": "@@ -0,0 +1,7 @@\n+# If you ever upgrade this image, watch out for bash being installed by default in newer alpine base images", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNTg0MA=="}, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTA0ODYyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheckTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODoyMjoyNlrOFreuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwODo0Mjo0N1rOFrfSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNjQzNg==", "bodyText": "You can keep @Rule if you move the container creation to constructor (JUnit supports parameterized constructors if I remember correctly)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381136436", "createdAt": "2020-02-19T08:22:26Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheckTest.java", "diffHunk": "@@ -1,25 +1,53 @@\n package org.testcontainers.containers.wait.internal;\n \n import com.google.common.collect.ImmutableSet;\n-import org.junit.Rule;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n-import org.testcontainers.containers.BindMode;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n \n+import static java.util.Arrays.asList;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n+@RunWith(Parameterized.class)\n public class InternalCommandPortListeningCheckTest {\n \n-    // Linking a custom configuration into the container so that nginx is listening on port 8080. This is necessary to prove\n-    // that the command formatting uses the correct casing for hexadecimal numbers (i.e. 1F90 and not 1f90).\n-    @Rule\n-    public GenericContainer nginx = new GenericContainer<>(\"nginx:1.9.4\")\n-            .withClasspathResourceMapping(\"nginx_on_8080.conf\", \"/etc/nginx/conf.d/default.conf\", BindMode.READ_ONLY);\n+    @Parameterized.Parameter\n+    public String dockerfile;\n+\n+    @Parameterized.Parameters(name = \"{index} - {0}\")\n+    public static Iterable<Object[]> data() {\n+        return asList(\n+            new Object[][]{\n+                {\"internal-port-check-dockerfile/Dockerfile-tcp\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-nc\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-bash\"},\n+            });\n+    }\n+\n+    public GenericContainer container;\n+\n+    @Before\n+    public void setUp() {\n+        container = new GenericContainer(new ImageFromDockerfile()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzOTM5OQ==", "bodyText": "Tried this already and it results in NullPointerException due to dockerfile being null", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381139399", "createdAt": "2020-02-19T08:28:53Z", "author": {"login": "codablock"}, "path": "core/src/test/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheckTest.java", "diffHunk": "@@ -1,25 +1,53 @@\n package org.testcontainers.containers.wait.internal;\n \n import com.google.common.collect.ImmutableSet;\n-import org.junit.Rule;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n-import org.testcontainers.containers.BindMode;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n \n+import static java.util.Arrays.asList;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n+@RunWith(Parameterized.class)\n public class InternalCommandPortListeningCheckTest {\n \n-    // Linking a custom configuration into the container so that nginx is listening on port 8080. This is necessary to prove\n-    // that the command formatting uses the correct casing for hexadecimal numbers (i.e. 1F90 and not 1f90).\n-    @Rule\n-    public GenericContainer nginx = new GenericContainer<>(\"nginx:1.9.4\")\n-            .withClasspathResourceMapping(\"nginx_on_8080.conf\", \"/etc/nginx/conf.d/default.conf\", BindMode.READ_ONLY);\n+    @Parameterized.Parameter\n+    public String dockerfile;\n+\n+    @Parameterized.Parameters(name = \"{index} - {0}\")\n+    public static Iterable<Object[]> data() {\n+        return asList(\n+            new Object[][]{\n+                {\"internal-port-check-dockerfile/Dockerfile-tcp\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-nc\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-bash\"},\n+            });\n+    }\n+\n+    public GenericContainer container;\n+\n+    @Before\n+    public void setUp() {\n+        container = new GenericContainer(new ImageFromDockerfile()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNjQzNg=="}, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzOTczMg==", "bodyText": "it is of course null because it's a field. You need to delete the field and replace it with constructor's parameter", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381139732", "createdAt": "2020-02-19T08:29:39Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheckTest.java", "diffHunk": "@@ -1,25 +1,53 @@\n package org.testcontainers.containers.wait.internal;\n \n import com.google.common.collect.ImmutableSet;\n-import org.junit.Rule;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n-import org.testcontainers.containers.BindMode;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n \n+import static java.util.Arrays.asList;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n+@RunWith(Parameterized.class)\n public class InternalCommandPortListeningCheckTest {\n \n-    // Linking a custom configuration into the container so that nginx is listening on port 8080. This is necessary to prove\n-    // that the command formatting uses the correct casing for hexadecimal numbers (i.e. 1F90 and not 1f90).\n-    @Rule\n-    public GenericContainer nginx = new GenericContainer<>(\"nginx:1.9.4\")\n-            .withClasspathResourceMapping(\"nginx_on_8080.conf\", \"/etc/nginx/conf.d/default.conf\", BindMode.READ_ONLY);\n+    @Parameterized.Parameter\n+    public String dockerfile;\n+\n+    @Parameterized.Parameters(name = \"{index} - {0}\")\n+    public static Iterable<Object[]> data() {\n+        return asList(\n+            new Object[][]{\n+                {\"internal-port-check-dockerfile/Dockerfile-tcp\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-nc\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-bash\"},\n+            });\n+    }\n+\n+    public GenericContainer container;\n+\n+    @Before\n+    public void setUp() {\n+        container = new GenericContainer(new ImageFromDockerfile()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNjQzNg=="}, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE0NTc5Mg==", "bodyText": "Hmm ok after some trial and error I figured out how to use a @Rule here. Hope it's actually what you referred to.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2363#discussion_r381145792", "createdAt": "2020-02-19T08:42:47Z", "author": {"login": "codablock"}, "path": "core/src/test/java/org/testcontainers/containers/wait/internal/InternalCommandPortListeningCheckTest.java", "diffHunk": "@@ -1,25 +1,53 @@\n package org.testcontainers.containers.wait.internal;\n \n import com.google.common.collect.ImmutableSet;\n-import org.junit.Rule;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n-import org.testcontainers.containers.BindMode;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n \n+import static java.util.Arrays.asList;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n \n+@RunWith(Parameterized.class)\n public class InternalCommandPortListeningCheckTest {\n \n-    // Linking a custom configuration into the container so that nginx is listening on port 8080. This is necessary to prove\n-    // that the command formatting uses the correct casing for hexadecimal numbers (i.e. 1F90 and not 1f90).\n-    @Rule\n-    public GenericContainer nginx = new GenericContainer<>(\"nginx:1.9.4\")\n-            .withClasspathResourceMapping(\"nginx_on_8080.conf\", \"/etc/nginx/conf.d/default.conf\", BindMode.READ_ONLY);\n+    @Parameterized.Parameter\n+    public String dockerfile;\n+\n+    @Parameterized.Parameters(name = \"{index} - {0}\")\n+    public static Iterable<Object[]> data() {\n+        return asList(\n+            new Object[][]{\n+                {\"internal-port-check-dockerfile/Dockerfile-tcp\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-nc\"},\n+                {\"internal-port-check-dockerfile/Dockerfile-bash\"},\n+            });\n+    }\n+\n+    public GenericContainer container;\n+\n+    @Before\n+    public void setUp() {\n+        container = new GenericContainer(new ImageFromDockerfile()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEzNjQzNg=="}, "originalCommit": {"oid": "82be9da934c481a6474a3cef6045eece99c02cdd"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1423, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}