{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMDgyNjUx", "number": 2573, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1OTo1OVrODxkorw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxNTo0MVrODxzluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA3MDU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1OTo1OVrOGFHSug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMDoyNlrOGFfEAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTU0Ng==", "bodyText": "nit: why not the good old for-in? :D", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408015546", "createdAt": "2020-04-14T09:59:59Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "diffHunk": "@@ -154,11 +146,30 @@ protected void configure(BuildImageCmd buildImageCmd) {\n         this.dockerfile.ifPresent(p -> {\n             buildImageCmd.withDockerfile(p.toFile());\n             dependencyImageNames = new ParsedDockerfile(p).getDependencyImageNames();\n+\n+            if (dependencyImageNames.size() > 0) {\n+                // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for\n+                // authenticated registries\n+                buildImageCmd.withPull(false);\n+            }\n         });\n \n         this.buildArgs.forEach(buildImageCmd::withBuildArg);\n     }\n \n+    private void prePullDependencyImages(Set<String> imagesToPull) {\n+        final DockerClient dockerClient = DockerClientFactory.instance().client();\n+\n+        imagesToPull.forEach(imageName -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f21e67b7d71945b3f3abfd16e1d31b53f15ded"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxODQzOA==", "bodyText": "That's a really good point - I prefer that style anyway, don't know why I did this :D", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408018438", "createdAt": "2020-04-14T10:04:42Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "diffHunk": "@@ -154,11 +146,30 @@ protected void configure(BuildImageCmd buildImageCmd) {\n         this.dockerfile.ifPresent(p -> {\n             buildImageCmd.withDockerfile(p.toFile());\n             dependencyImageNames = new ParsedDockerfile(p).getDependencyImageNames();\n+\n+            if (dependencyImageNames.size() > 0) {\n+                // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for\n+                // authenticated registries\n+                buildImageCmd.withPull(false);\n+            }\n         });\n \n         this.buildArgs.forEach(buildImageCmd::withBuildArg);\n     }\n \n+    private void prePullDependencyImages(Set<String> imagesToPull) {\n+        final DockerClient dockerClient = DockerClientFactory.instance().client();\n+\n+        imagesToPull.forEach(imageName -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTU0Ng=="}, "originalCommit": {"oid": "50f21e67b7d71945b3f3abfd16e1d31b53f15ded"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyMDkxMg==", "bodyText": "Maybe it was a bit more complex before and involved some Streams or something? :)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408020912", "createdAt": "2020-04-14T10:08:53Z", "author": {"login": "bsideup"}, "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "diffHunk": "@@ -154,11 +146,30 @@ protected void configure(BuildImageCmd buildImageCmd) {\n         this.dockerfile.ifPresent(p -> {\n             buildImageCmd.withDockerfile(p.toFile());\n             dependencyImageNames = new ParsedDockerfile(p).getDependencyImageNames();\n+\n+            if (dependencyImageNames.size() > 0) {\n+                // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for\n+                // authenticated registries\n+                buildImageCmd.withPull(false);\n+            }\n         });\n \n         this.buildArgs.forEach(buildImageCmd::withBuildArg);\n     }\n \n+    private void prePullDependencyImages(Set<String> imagesToPull) {\n+        final DockerClient dockerClient = DockerClientFactory.instance().client();\n+\n+        imagesToPull.forEach(imageName -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTU0Ng=="}, "originalCommit": {"oid": "50f21e67b7d71945b3f3abfd16e1d31b53f15ded"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNDk5Mg==", "bodyText": "I blame the month-ago version of me - he had no idea what he was doing \ud83d\ude02", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408404992", "createdAt": "2020-04-14T20:10:26Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "diffHunk": "@@ -154,11 +146,30 @@ protected void configure(BuildImageCmd buildImageCmd) {\n         this.dockerfile.ifPresent(p -> {\n             buildImageCmd.withDockerfile(p.toFile());\n             dependencyImageNames = new ParsedDockerfile(p).getDependencyImageNames();\n+\n+            if (dependencyImageNames.size() > 0) {\n+                // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for\n+                // authenticated registries\n+                buildImageCmd.withPull(false);\n+            }\n         });\n \n         this.buildArgs.forEach(buildImageCmd::withBuildArg);\n     }\n \n+    private void prePullDependencyImages(Set<String> imagesToPull) {\n+        final DockerClient dockerClient = DockerClientFactory.instance().client();\n+\n+        imagesToPull.forEach(imageName -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTU0Ng=="}, "originalCommit": {"oid": "50f21e67b7d71945b3f3abfd16e1d31b53f15ded"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDMyNTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxMTowMVrOGFTejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDowNToyN1rOGFe5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxNTE4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for\n          \n          \n            \n                            // if we'll be pre-pulling images, disable the built-in pull as it is not necessary and will fail for", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408215182", "createdAt": "2020-04-14T15:11:01Z", "author": {"login": "dbyron0"}, "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "diffHunk": "@@ -154,11 +146,30 @@ protected void configure(BuildImageCmd buildImageCmd) {\n         this.dockerfile.ifPresent(p -> {\n             buildImageCmd.withDockerfile(p.toFile());\n             dependencyImageNames = new ParsedDockerfile(p).getDependencyImageNames();\n+\n+            if (dependencyImageNames.size() > 0) {\n+                // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f21e67b7d71945b3f3abfd16e1d31b53f15ded"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjI1NA==", "bodyText": "Whoops! Thank you \ud83d\ude04", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408402254", "createdAt": "2020-04-14T20:05:27Z", "author": {"login": "rnorth"}, "path": "core/src/main/java/org/testcontainers/images/builder/ImageFromDockerfile.java", "diffHunk": "@@ -154,11 +146,30 @@ protected void configure(BuildImageCmd buildImageCmd) {\n         this.dockerfile.ifPresent(p -> {\n             buildImageCmd.withDockerfile(p.toFile());\n             dependencyImageNames = new ParsedDockerfile(p).getDependencyImageNames();\n+\n+            if (dependencyImageNames.size() > 0) {\n+                // if we'l be pre-pulling images, disable the built-in pull as it is not necessary and will fail for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxNTE4Mg=="}, "originalCommit": {"oid": "50f21e67b7d71945b3f3abfd16e1d31b53f15ded"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTUxMDkxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjo0OVrOGFfJKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxMjo0OVrOGFfJKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNjMxNQ==", "bodyText": "Deprecation duty.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408406315", "createdAt": "2020-04-14T20:12:49Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java", "diffHunk": "@@ -109,10 +169,7 @@ private void putImageInRegistry() throws InterruptedException {\n         client.tagImageCmd(id, testImageName, \"latest\").exec();\n \n         client.pushImageCmd(testImageNameWithTag)\n-            .exec(new PushImageResultCallback())\n+            .exec(new ResultCallback.Adapter<>())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7fcf2236b4cf3fc695908396f23d8975dd70907"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTUyMDU5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoxNTo0MVrOGFfPCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo1NzoyNFrOGFgnzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNzgxNw==", "bodyText": "I wish we had text blocks!\nI would have preferred to just point to a static file on disk, but unfortunately our dockerized private registry has a port number that can vary, and thus the image name changes.\nHence, constructing a tiny YAML file in a string seemed like a tolerable evil.", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408407817", "createdAt": "2020-04-14T20:15:41Z", "author": {"login": "rnorth"}, "path": "core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java", "diffHunk": "@@ -83,17 +83,77 @@ public void testThatAuthLocatorIsUsed() throws Exception {\n \n         // a push will use the auth locator for authentication, although that isn't the goal of this test\n         putImageInRegistry();\n+    }\n+\n+    @Before\n+    public void removeImageFromLocalDocker() {\n+        // remove the image tag from local docker so that it must be pulled before use\n+        client.removeImageCmd(testImageNameWithTag).withForce(true).exec();\n+    }\n \n+    @AfterClass\n+    public static void tearDown() {\n+        RegistryAuthLocator.setInstance(originalAuthLocatorSingleton);\n+    }\n+\n+    @Test\n+    public void testThatAuthLocatorIsUsedForContainerCreation() {\n         // actually start a container, which will require an authenticated pull\n-        try (final GenericContainer container = new GenericContainer<>(testImageNameWithTag)\n+        try (final GenericContainer<?> container = new GenericContainer<>(testImageNameWithTag)\n             .withCommand(\"/bin/sh\", \"-c\", \"sleep 10\")) {\n             container.start();\n \n             assertTrue(\"container started following an authenticated pull\", container.isRunning());\n         }\n     }\n \n-    private void putImageInRegistry() throws InterruptedException {\n+    @Test\n+    public void testThatAuthLocatorIsUsedForDockerfileBuild() throws IOException {\n+        // Prepare a simple temporary Dockerfile which requires our custom private image\n+        Path tempContext = Files.createTempDirectory(Paths.get(\".\"), this.getClass().getSimpleName() + \"-test-\");\n+        Path tempFile = Files.createTempFile(tempContext, \"test\", \".Dockerfile\");\n+        String dockerFileContent = \"FROM \" + testImageNameWithTag;\n+        Files.write(tempFile, dockerFileContent.getBytes());\n+\n+        // Start a container built from a derived image, which will require an authenticated pull\n+        try (final GenericContainer<?> container = new GenericContainer<>(\n+            new ImageFromDockerfile()\n+                .withDockerfile(tempFile)\n+        )\n+            .withCommand(\"/bin/sh\", \"-c\", \"sleep 10\")) {\n+            container.start();\n+\n+            assertTrue(\"container started following an authenticated pull\", container.isRunning());\n+        }\n+    }\n+\n+    @Test\n+    public void testThatAuthLocatorIsUsedForDockerComposePull() throws IOException {\n+        // Prepare a simple temporary Docker Compose manifest which requires our custom private image\n+        Path tempContext = Files.createTempDirectory(Paths.get(\".\"), this.getClass().getSimpleName() + \"-test-\");\n+        Path tempFile = Files.createTempFile(tempContext, \"test\", \".docker-compose.yml\");\n+        @Language(\"yaml\") String composeFileContent =\n+            \"version: '2.0'\\n\" +\n+                \"services:\\n\" +\n+                \"  privateservice:\\n\" +\n+                \"      command: /bin/sh -c 'sleep 60'\\n\" +\n+                \"      image: \" + testImageNameWithTag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7fcf2236b4cf3fc695908396f23d8975dd70907"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMDU0MA==", "bodyText": "We can, with https://github.com/bsideup/jabel ;)", "url": "https://github.com/testcontainers/testcontainers-java/pull/2573#discussion_r408430540", "createdAt": "2020-04-14T20:57:24Z", "author": {"login": "bsideup"}, "path": "core/src/test/java/org/testcontainers/utility/AuthenticatedImagePullTest.java", "diffHunk": "@@ -83,17 +83,77 @@ public void testThatAuthLocatorIsUsed() throws Exception {\n \n         // a push will use the auth locator for authentication, although that isn't the goal of this test\n         putImageInRegistry();\n+    }\n+\n+    @Before\n+    public void removeImageFromLocalDocker() {\n+        // remove the image tag from local docker so that it must be pulled before use\n+        client.removeImageCmd(testImageNameWithTag).withForce(true).exec();\n+    }\n \n+    @AfterClass\n+    public static void tearDown() {\n+        RegistryAuthLocator.setInstance(originalAuthLocatorSingleton);\n+    }\n+\n+    @Test\n+    public void testThatAuthLocatorIsUsedForContainerCreation() {\n         // actually start a container, which will require an authenticated pull\n-        try (final GenericContainer container = new GenericContainer<>(testImageNameWithTag)\n+        try (final GenericContainer<?> container = new GenericContainer<>(testImageNameWithTag)\n             .withCommand(\"/bin/sh\", \"-c\", \"sleep 10\")) {\n             container.start();\n \n             assertTrue(\"container started following an authenticated pull\", container.isRunning());\n         }\n     }\n \n-    private void putImageInRegistry() throws InterruptedException {\n+    @Test\n+    public void testThatAuthLocatorIsUsedForDockerfileBuild() throws IOException {\n+        // Prepare a simple temporary Dockerfile which requires our custom private image\n+        Path tempContext = Files.createTempDirectory(Paths.get(\".\"), this.getClass().getSimpleName() + \"-test-\");\n+        Path tempFile = Files.createTempFile(tempContext, \"test\", \".Dockerfile\");\n+        String dockerFileContent = \"FROM \" + testImageNameWithTag;\n+        Files.write(tempFile, dockerFileContent.getBytes());\n+\n+        // Start a container built from a derived image, which will require an authenticated pull\n+        try (final GenericContainer<?> container = new GenericContainer<>(\n+            new ImageFromDockerfile()\n+                .withDockerfile(tempFile)\n+        )\n+            .withCommand(\"/bin/sh\", \"-c\", \"sleep 10\")) {\n+            container.start();\n+\n+            assertTrue(\"container started following an authenticated pull\", container.isRunning());\n+        }\n+    }\n+\n+    @Test\n+    public void testThatAuthLocatorIsUsedForDockerComposePull() throws IOException {\n+        // Prepare a simple temporary Docker Compose manifest which requires our custom private image\n+        Path tempContext = Files.createTempDirectory(Paths.get(\".\"), this.getClass().getSimpleName() + \"-test-\");\n+        Path tempFile = Files.createTempFile(tempContext, \"test\", \".docker-compose.yml\");\n+        @Language(\"yaml\") String composeFileContent =\n+            \"version: '2.0'\\n\" +\n+                \"services:\\n\" +\n+                \"  privateservice:\\n\" +\n+                \"      command: /bin/sh -c 'sleep 60'\\n\" +\n+                \"      image: \" + testImageNameWithTag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwNzgxNw=="}, "originalCommit": {"oid": "b7fcf2236b4cf3fc695908396f23d8975dd70907"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1556, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}