{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMDAxNzA0", "number": 4610, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyNTozNFrODjkCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozNjowMFrODkShTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjE3MTM3OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyNTozNFrOFvcPUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTozNjozMlrOFvejzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MDA2Ng==", "bodyText": "a consequence of this is that if the get() method is used, we will still always execute on a thread pool.", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r385290066", "createdAt": "2020-02-27T18:25:34Z", "author": {"login": "j-baker"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -40,16 +45,30 @@ public CoalescingSupplier(Supplier<T> delegate) {\n \n     @Override\n     public T get() {\n+        try {\n+            return getAsync().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1aa29c023758a39ff11a7b9b8cac44d8ba7b89a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyODA3OA==", "bodyText": "There's a refactor we could do where the old method still remains, but behaves differently. I don't know it's important, though.", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r385328078", "createdAt": "2020-02-27T19:36:32Z", "author": {"login": "j-baker"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -40,16 +45,30 @@ public CoalescingSupplier(Supplier<T> delegate) {\n \n     @Override\n     public T get() {\n+        try {\n+            return getAsync().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5MDA2Ng=="}, "originalCommit": {"oid": "f1aa29c023758a39ff11a7b9b8cac44d8ba7b89a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQwMTU1OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTozNToyNFrOFvehVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTozNToyNFrOFvehVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMyNzQ0Ng==", "bodyText": "This class should probably do with some better unit tests, now, before this merges.", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r385327446", "createdAt": "2020-02-27T19:35:24Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -50,8 +58,12 @@\n \n     private static final Logger log = LoggerFactory.getLogger(AwaitingLeadershipProxy.class);\n \n-    private static final long MAX_NO_QUORUM_RETRIES = 10;\n+    private static final int MAX_NO_QUORUM_RETRIES = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d47db8efa3961ef9f457e09cf65408f5c0470335"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY3MjU5OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNTo1N1rOFwgp2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNTo1N1rOFwgp2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMDk2OQ==", "bodyText": "Extract this to some utility class, as it's effectively duplicated from ConjureTimelockResource, and also exists in ALP", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r386410969", "createdAt": "2020-03-02T14:05:57Z", "author": {"login": "gmaretic"}, "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "diffHunk": "@@ -35,25 +35,57 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+import com.google.common.base.Throwables;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.google.common.util.concurrent.Uninterruptibles;\n \n+@RunWith(Parameterized.class)\n public class CoalescingSupplierTest {\n     private static final int DEFAULT_VALUE = 123;\n \n     private final Supplier<Integer> delegate = mock(Supplier.class);\n     private final FreezableSupplier freezableDelegate = new FreezableSupplier(delegate);\n-    private final CoalescingSupplier<Integer> supplier = new CoalescingSupplier<>(freezableDelegate);\n+    private final CoalescingSupplier<Integer> coalescing = new CoalescingSupplier<>(freezableDelegate);\n+\n+    private final Supplier<Integer> supplier;\n+\n+    public CoalescingSupplierTest(String name, Object parameter) {\n+        Function<CoalescingSupplierTest, Integer> factory = (Function) parameter;\n+        supplier = () -> factory.apply(this);\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] getParameters() {\n+        return new Object[][] {\n+                {\"blocking\", (Function<CoalescingSupplierTest, Integer>) test -> test.coalescing.get() },\n+                {\"async\", (Function<CoalescingSupplierTest, Integer>) test -> unwrap(test.coalescing.getAsync()) }\n+        };\n+    }\n+\n+    private static <T> T unwrap(ListenableFuture<T> future) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a7dfd76aa6f8963953e3fa778d50a001e71e0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY3MzQ3OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNjoxMVrOFwgqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowNjoxMVrOFwgqVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxMTA5NA==", "bodyText": "nice!", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r386411094", "createdAt": "2020-03-02T14:06:11Z", "author": {"login": "gmaretic"}, "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "diffHunk": "@@ -35,25 +35,57 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+import com.google.common.base.Throwables;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.google.common.util.concurrent.Uninterruptibles;\n \n+@RunWith(Parameterized.class)\n public class CoalescingSupplierTest {\n     private static final int DEFAULT_VALUE = 123;\n \n     private final Supplier<Integer> delegate = mock(Supplier.class);\n     private final FreezableSupplier freezableDelegate = new FreezableSupplier(delegate);\n-    private final CoalescingSupplier<Integer> supplier = new CoalescingSupplier<>(freezableDelegate);\n+    private final CoalescingSupplier<Integer> coalescing = new CoalescingSupplier<>(freezableDelegate);\n+\n+    private final Supplier<Integer> supplier;\n+\n+    public CoalescingSupplierTest(String name, Object parameter) {\n+        Function<CoalescingSupplierTest, Integer> factory = (Function) parameter;\n+        supplier = () -> factory.apply(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a7dfd76aa6f8963953e3fa778d50a001e71e0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mzc4NzY1OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/AsyncTimelockResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozNjowMFrOFwhuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDozNjowMFrOFwhuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyODQ2OQ==", "bodyText": "Again as before (except this time we get the cause if we reach here, which doesn't seem an intentional dif)", "url": "https://github.com/palantir/atlasdb/pull/4610#discussion_r386428469", "createdAt": "2020-03-02T14:36:00Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/AsyncTimelockResource.java", "diffHunk": "@@ -128,7 +131,19 @@ public StartTransactionResponseV4 startTransactions(StartTransactionRequestV4 re\n     @POST\n     @Path(\"start-atlasdb-transaction-v5\")\n     public StartTransactionResponseV5 startTransactionsWithWatches(StartTransactionRequestV5 request) {\n-        return timelock.startTransactionsWithWatches(request);\n+        return unwrapListenableFuture(timelock.startTransactionsWithWatches(request));\n+    }\n+\n+    private static <T> T unwrapListenableFuture(ListenableFuture<T> future) {\n+        try {\n+            return future.get();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new RuntimeException(e);\n+        } catch (ExecutionException e) {\n+            Throwables.throwIfUncheckedException(e.getCause());\n+            throw new RuntimeException(e.getCause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902a7dfd76aa6f8963953e3fa778d50a001e71e0"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2348, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}