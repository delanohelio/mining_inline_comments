{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDQxMDQ5", "number": 5078, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyOTo0M1rOExOxDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMjowOVrOEyFgpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDU3NjEzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyOTo0M1rOHnQWHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyOTo0M1rOHnQWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNDMxOA==", "bodyText": "nit: could we have docs on what this means?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510924318", "createdAt": "2020-10-23T14:29:43Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ProgressComponents {\n+    @Value.Parameter\n+    long seq();\n+\n+    @Value.Parameter\n+    long progressLimit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDY5MDI2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1NjoxMVrOHnRdRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1NjoxMVrOHnRdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MjUzMg==", "bodyText": "IntelliJ is telling me many things in this class don't have to be public - can you make those package-private or private?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510942532", "createdAt": "2020-10-23T14:56:11Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDY5MTI2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1NjoyNFrOHnRd2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1NjoyNFrOHnRd2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MjY4MQ==", "bodyText": "replace with method reference", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510942681", "createdAt": "2020-10-23T14:56:24Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    public static final int MAX_ROWS_ALLOWED = 500;\n+\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressComponents> verificationProgressStateCache = new ConcurrentHashMap<>();\n+\n+    public PaxosLogHistoryProgressTracker(\n+            DataSource dataSource, SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory) {\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.sqlitePaxosStateLogHistory = sqlitePaxosStateLogHistory;\n+    }\n+\n+    public SequenceBounds getPaxosLogSequenceBounds(NamespaceAndUseCase namespaceAndUseCase) {\n+        ProgressComponents progress = getOrPopulateProgressComponents(namespaceAndUseCase);\n+        return SequenceBounds.builder()\n+                .lower(progress.seq())\n+                .upper(progress.seq() + MAX_ROWS_ALLOWED)\n+                .build();\n+    }\n+\n+    public void updateProgressState(Map<NamespaceAndUseCase, SequenceBounds> namespaceAndUseCaseSequenceBoundsMap) {\n+        namespaceAndUseCaseSequenceBoundsMap.forEach((namespaceAndUseCase, bounds) ->\n+                updateProgressStateForNamespaceAndUseCase(namespaceAndUseCase, bounds));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDcwODgyOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMDoxNlrOHnRoeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozMDoxNVrOHnVG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NTQwMA==", "bodyText": "As far as I can tell, you only ever put or get from this cache (i.e. never delete). I don't have full context on this piece of work, but I wonder if it is possible to OOM yourself? How many entries do you expect to be present in this cache?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510945400", "createdAt": "2020-10-23T15:00:16Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    public static final int MAX_ROWS_ALLOWED = 500;\n+\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressComponents> verificationProgressStateCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwMjM0NA==", "bodyText": "The size would be bounded by |NamespaceAndUseCase| which would generally be around 1000, so I think this is fine. (Good flag though!)", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511002344", "createdAt": "2020-10-23T16:30:15Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    public static final int MAX_ROWS_ALLOWED = 500;\n+\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressComponents> verificationProgressStateCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NTQwMA=="}, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDcxNzc4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMjowOFrOHnRtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMjowOFrOHnRtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NjczMQ==", "bodyText": "I think these immutables are fine, but if you really want to avoid crossed wires, you can try a staged builder: https://immutables.github.io/immutable.html#staged-builder\n(I appreciate not everyone likes them, but I do!)", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510946731", "createdAt": "2020-10-23T15:02:08Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ProgressComponents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDczNTk5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/remote/HistoryLoaderAndTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowNjozOFrOHnR5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzoxNTozN1rOHoO7EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0OTY0Mw==", "bodyText": "I'm not a huge fan - KeyedStream.of(historyQueries).mapKeys(...).map(...) gets you most of the way, although I'll confess that I'm not sure how to do the merging resolution in KeyedStream (although you can always collect to multimap).", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510949643", "createdAt": "2020-10-23T15:06:38Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -36,8 +38,11 @@ private HistoryLoaderAndTransformer() {\n \n     public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(\n             LocalHistoryLoader localHistoryLoader, List<HistoryQuery> historyQueries) {\n-        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream()\n-                .collect(Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));\n+        Map<NamespaceAndUseCase, SequenceBounds> lastVerifiedSequences = historyQueries.stream()\n+                .collect(Collectors.toMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0OTU4NA==", "bodyText": "I think what we have now is more readable", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511949584", "createdAt": "2020-10-26T13:15:37Z", "author": {"login": "sudiksha27"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -36,8 +38,11 @@ private HistoryLoaderAndTransformer() {\n \n     public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(\n             LocalHistoryLoader localHistoryLoader, List<HistoryQuery> historyQueries) {\n-        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream()\n-                .collect(Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));\n+        Map<NamespaceAndUseCase, SequenceBounds> lastVerifiedSequences = historyQueries.stream()\n+                .collect(Collectors.toMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0OTY0Mw=="}, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDc0MzcwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/HistoryLoaderAndTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowODozM1rOHnR91A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowODozM1rOHnR91A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1MDg2OA==", "bodyText": "Speaking of sanity checks, is this:\n(100 - lastVerified) + 1\nOR\n100 - (lastVerified + 1)?\nI assume the latter, although I'm never certain on how it determines this - so maybe bracket it?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510950868", "createdAt": "2020-10-23T15:08:33Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -73,11 +73,12 @@ public void setup() {\n     public void canFetchLogsForQuery() {\n         writeToLogs(1, 100);\n         int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(NAMESPACE_AND_USE_CASE, lastVerified));\n+        List<HistoryQuery> historyQueries =\n+                ImmutableList.of(HistoryQuery.of(NAMESPACE_AND_USE_CASE, lastVerified, lastVerified + 500));\n         List<LogsForNamespaceAndUseCase> paxosHistory =\n                 HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n \n-        sanityCheckLoadedHistory(paxosHistory, 100 - lastVerified);\n+        sanityCheckLoadedHistory(paxosHistory, 100 - lastVerified + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDgwNjAxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/remote/HistoryLoaderAndTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyMzo0MVrOHnSkFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyMzo0MVrOHnSkFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2MDY2Mw==", "bodyText": "nit: let's give this a more descriptive name? minimalLowerBoundResolver or something like that?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510960663", "createdAt": "2020-10-23T15:23:41Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -47,6 +52,17 @@ private HistoryLoaderAndTransformer() {\n                 .collect(Collectors.toList());\n     }\n \n+    private static SequenceBounds seqBoundsCollisionResolver(SequenceBounds bound1, SequenceBounds bound2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDgzMDAwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/HistoryLoaderAndTransformerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNzo1NlrOHnSzJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozMjoyMlrOHnTAHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NDUxOA==", "bodyText": "can we reference this 500 constant somewhere?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510964518", "createdAt": "2020-10-23T15:27:56Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -87,13 +88,13 @@ public void canHandleDuplicateQueries() {\n \n         List<HistoryQuery> queries = IntStream.range(0, 10)\n                 .boxed()\n-                .map(idx -> HistoryQuery.of(NAMESPACE_AND_USE_CASE, minLastVerified + idx))\n+                .map(idx -> HistoryQuery.of(NAMESPACE_AND_USE_CASE, minLastVerified + idx, minLastVerified + 500))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NzgzNw==", "bodyText": "actually, see later comment: would prefer this to have a factory for generating unbounded ends", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510967837", "createdAt": "2020-10-23T15:32:22Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -87,13 +88,13 @@ public void canHandleDuplicateQueries() {\n \n         List<HistoryQuery> queries = IntStream.range(0, 10)\n                 .boxed()\n-                .map(idx -> HistoryQuery.of(NAMESPACE_AND_USE_CASE, minLastVerified + idx))\n+                .map(idx -> HistoryQuery.of(NAMESPACE_AND_USE_CASE, minLastVerified + idx, minLastVerified + 500))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NDUxOA=="}, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDg0Njc2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/PaxosLogHistoryProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozMToxNlrOHnS9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozMToxNlrOHnS9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NzIxNg==", "bodyText": "Maybe just have an unbounded end factory in HistoryQuery, it looks like this is causing a lot of friction", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510967216", "createdAt": "2020-10-23T15:31:16Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/PaxosLogHistoryProviderTest.java", "diffHunk": "@@ -95,8 +95,8 @@ public void canFetchAndCombineHistoriesForLocalAndRemote() {\n \n         int lastVerified = -1;\n \n-        List<HistoryQuery> historyQueries =\n-                ImmutableList.of(HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+        List<HistoryQuery> historyQueries = ImmutableList.of(\n+                HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified, lastVerified + 500));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDg1OTY0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTozNDo0NFrOHnTF-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzowNjoxNVrOHnWR7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2OTMzNg==", "bodyText": "I'd recommend being explicit about the edges of the range here: lowerInclusive but upperExclusive?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r510969336", "createdAt": "2020-10-23T15:34:44Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface SequenceBounds {\n+    @Value.Parameter\n+    long lower();\n+\n+    @Value.Parameter\n+    long upper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMTU1MQ==", "bodyText": "Actually, I would strongly prefer for us to use inclusive ranges. A lot of the lastVerified stuff is misleading because upper() is not actually verified.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511021551", "createdAt": "2020-10-23T17:06:15Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface SequenceBounds {\n+    @Value.Parameter\n+    long lower();\n+\n+    @Value.Parameter\n+    long upper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2OTMzNg=="}, "originalCommit": {"oid": "c217e97b996017b80a8ac17437c8260635acb03d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTA4ODkwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozNjo1MlrOHnVUlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozNjo1MlrOHnVUlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTg0NA==", "bodyText": "nit: name this getLatestLearnedSequence...\nI think this makes sense, just it looks a bit suspicious", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511005844", "createdAt": "2020-10-23T16:36:52Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.LearnerUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    public static final int MAX_ROWS_ALLOWED = 500;\n+\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressComponents> verificationProgressStateCache = new ConcurrentHashMap<>();\n+\n+    public PaxosLogHistoryProgressTracker(\n+            DataSource dataSource, SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory) {\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.sqlitePaxosStateLogHistory = sqlitePaxosStateLogHistory;\n+    }\n+\n+    public SequenceBounds getPaxosLogSequenceBounds(NamespaceAndUseCase namespaceAndUseCase) {\n+        ProgressComponents progress = getOrPopulateProgressComponents(namespaceAndUseCase);\n+        return SequenceBounds.builder()\n+                .lower(progress.seq())\n+                .upper(progress.seq() + MAX_ROWS_ALLOWED)\n+                .build();\n+    }\n+\n+    public void updateProgressState(Map<NamespaceAndUseCase, SequenceBounds> namespaceAndUseCaseSequenceBoundsMap) {\n+        namespaceAndUseCaseSequenceBoundsMap.forEach((namespaceAndUseCase, bounds) ->\n+                updateProgressStateForNamespaceAndUseCase(namespaceAndUseCase, bounds));\n+    }\n+\n+    private ProgressComponents getOrPopulateProgressComponents(NamespaceAndUseCase namespaceAndUseCase) {\n+        return verificationProgressStateCache.computeIfAbsent(namespaceAndUseCase, this::getLastVerifiedSeqFromLogs);\n+    }\n+\n+    private ProgressComponents getLastVerifiedSeqFromLogs(NamespaceAndUseCase namespaceAndUseCase) {\n+        Client client = namespaceAndUseCase.namespace();\n+        String useCase = namespaceAndUseCase.useCase();\n+\n+        return logVerificationProgressState\n+                .getProgressComponents(client, useCase)\n+                .orElseGet(() -> logVerificationProgressState.resetProgressState(\n+                        client, useCase, getLatestSequenceForNamespaceAndUseCase(namespaceAndUseCase)));\n+    }\n+\n+    @VisibleForTesting\n+    void updateProgressStateForNamespaceAndUseCase(NamespaceAndUseCase key, SequenceBounds value) {\n+        long lastVerifiedSequence = value.upper();\n+\n+        ProgressComponents currentProgressState = getOrPopulateProgressComponents(key);\n+        resetIfRequired(key, value, currentProgressState)\n+                .orElseGet(\n+                        () -> updateProgressInDbThroughCache(key, value, lastVerifiedSequence, currentProgressState));\n+    }\n+\n+    private ProgressComponents updateProgressInDbThroughCache(\n+            NamespaceAndUseCase key,\n+            SequenceBounds value,\n+            long lastVerifiedSequence,\n+            ProgressComponents progressComponents) {\n+        ProgressComponents progressState = ProgressComponents.builder()\n+                .progressLimit(progressComponents.progressLimit())\n+                .seq(value.upper())\n+                .build();\n+        verificationProgressStateCache.put(key, progressState);\n+        logVerificationProgressState.updateProgress(key.namespace(), key.useCase(), lastVerifiedSequence);\n+        return progressState;\n+    }\n+\n+    private Optional<ProgressComponents> resetIfRequired(\n+            NamespaceAndUseCase key, SequenceBounds value, ProgressComponents currentProgressState) {\n+        if (value.upper() <= currentProgressState.progressLimit()) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(verificationProgressStateCache.put(\n+                key,\n+                logVerificationProgressState.resetProgressState(\n+                        key.namespace(), key.useCase(), getLatestSequenceForNamespaceAndUseCase(key))));\n+    }\n+\n+    private long getLatestSequenceForNamespaceAndUseCase(NamespaceAndUseCase namespaceAndUseCase) {\n+        return sqlitePaxosStateLogHistory.getGreatestLogEntry(\n+                namespaceAndUseCase.namespace(), LearnerUseCase.createLearnerUseCase(namespaceAndUseCase.useCase()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTE1Mzc3OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/LogVerificationStateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NTo0NVrOHnV75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NTo0NVrOHnV75g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNTkxMA==", "bodyText": "This might have been missed the first time around, but please name all tests consistent with the classes being tested. It's a bit jarring to look for LogVerificationProgressStateTest and not find it because the class is named this way instead.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511015910", "createdAt": "2020-10-23T16:55:45Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/LogVerificationStateTest.java", "diffHunk": "@@ -20,6 +20,7 @@\n \n import com.palantir.paxos.Client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTE1OTY2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NzoyOVrOHnV_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1NzoyOVrOHnV_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNjg0Mg==", "bodyText": "I'd name this differently, maybe ProgressState or something like that?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511016842", "createdAt": "2020-10-23T16:57:29Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ProgressComponents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTE2MTA3OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1Nzo1NVrOHnWAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjo1Nzo1NVrOHnWAag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNzA2Ng==", "bodyText": "lastVerifiedSeq? This makes it sound similar to the Paxos constructs when it's really not", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511017066", "createdAt": "2020-10-23T16:57:55Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/ProgressComponents.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ProgressComponents {\n+    @Value.Parameter\n+    long seq();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTE5MzE4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/SqlitePaxosStateLogHistory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzowNzo1MlrOHnWU9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzowNzo1MlrOHnWU9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMjMyNA==", "bodyText": "See discussion elsewhere: I think I'd have a strong preference for having inclusive ranges here, because we've used terminology like latestVerified through many other parts of the code, which are not strictly correct when the upper bound has actually not been verified.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511022324", "createdAt": "2020-10-23T17:07:52Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -82,16 +96,20 @@ public LearnerAndAcceptorRecords getLearnerAndAcceptorLogsSince(\n         //         revisit this once we have the remote history providers set up. Also, we may have to make it\n         // configurable to\n         //         accommodate the rate at which logs are being published.\n-        @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n-                + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n-                + \"ORDER BY seq ASC LIMIT 500\")\n-        Map<Long, PaxosValue> getLearnerLogsSince(\n-                @BindPojo(\"namespace\") Client namespace, @Bind(\"useCase\") String useCase, @Bind(\"seq\") long seq);\n+        @SqlQuery(\"SELECT seq, val FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq >=\"\n+                + \" :lowerBound AND seq < :upperBound\")\n+        Map<Long, PaxosValue> getLearnerLogsInRange(\n+                @BindPojo(\"namespace\") Client namespace,\n+                @Bind(\"useCase\") String useCase,\n+                @Bind(\"lowerBound\") long lowerBound,\n+                @Bind(\"upperBound\") long upperBound);\n \n-        @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n-                + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n-                + \"ORDER BY seq ASC LIMIT 500\")\n-        Map<Long, PaxosAcceptorData> getAcceptorLogsSince(\n-                @BindPojo(\"namespace\") Client namespace, @Bind(\"useCase\") String useCase, @Bind(\"seq\") long seq);\n+        @SqlQuery(\"SELECT seq, val FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq >=\"\n+                + \" :lowerBound AND seq < :upperBound\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTIyNjU0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxODoyMVrOHnWp8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxODoyMVrOHnWp8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNzY5Nw==", "bodyText": "This is an exclusive bound, so it is not the last verified sequence (see comment on my thoughts on SequenceBound).", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511027697", "createdAt": "2020-10-23T17:18:21Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.LearnerUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    public static final int MAX_ROWS_ALLOWED = 500;\n+\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressComponents> verificationProgressStateCache = new ConcurrentHashMap<>();\n+\n+    public PaxosLogHistoryProgressTracker(\n+            DataSource dataSource, SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory) {\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.sqlitePaxosStateLogHistory = sqlitePaxosStateLogHistory;\n+    }\n+\n+    public SequenceBounds getPaxosLogSequenceBounds(NamespaceAndUseCase namespaceAndUseCase) {\n+        ProgressComponents progress = getOrPopulateProgressComponents(namespaceAndUseCase);\n+        return SequenceBounds.builder()\n+                .lower(progress.seq())\n+                .upper(progress.seq() + MAX_ROWS_ALLOWED)\n+                .build();\n+    }\n+\n+    public void updateProgressState(Map<NamespaceAndUseCase, SequenceBounds> namespaceAndUseCaseSequenceBoundsMap) {\n+        namespaceAndUseCaseSequenceBoundsMap.forEach((namespaceAndUseCase, bounds) ->\n+                updateProgressStateForNamespaceAndUseCase(namespaceAndUseCase, bounds));\n+    }\n+\n+    private ProgressComponents getOrPopulateProgressComponents(NamespaceAndUseCase namespaceAndUseCase) {\n+        return verificationProgressStateCache.computeIfAbsent(namespaceAndUseCase, this::getLastVerifiedSeqFromLogs);\n+    }\n+\n+    private ProgressComponents getLastVerifiedSeqFromLogs(NamespaceAndUseCase namespaceAndUseCase) {\n+        Client client = namespaceAndUseCase.namespace();\n+        String useCase = namespaceAndUseCase.useCase();\n+\n+        return logVerificationProgressState\n+                .getProgressComponents(client, useCase)\n+                .orElseGet(() -> logVerificationProgressState.resetProgressState(\n+                        client, useCase, getLatestSequenceForNamespaceAndUseCase(namespaceAndUseCase)));\n+    }\n+\n+    @VisibleForTesting\n+    void updateProgressStateForNamespaceAndUseCase(NamespaceAndUseCase key, SequenceBounds value) {\n+        long lastVerifiedSequence = value.upper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTI0NDM0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyMzo1OFrOHnW0_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoyMzo1OFrOHnW0_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAzMDUyNw==", "bodyText": "This doesn't behave the way I think is intended: your seeding of the bound in getLatestSequence is inclusive, however your use of value here is exclusive. This means that even if there are no new entries, the validation task will repeatedly cycle over the entries (e.g. of an inactive client), which I doubt is intended.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r511030527", "createdAt": "2020-10-23T17:23:58Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.LearnerUseCase;\n+import com.palantir.timelock.history.models.ProgressComponents;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    public static final int MAX_ROWS_ALLOWED = 500;\n+\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressComponents> verificationProgressStateCache = new ConcurrentHashMap<>();\n+\n+    public PaxosLogHistoryProgressTracker(\n+            DataSource dataSource, SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory) {\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.sqlitePaxosStateLogHistory = sqlitePaxosStateLogHistory;\n+    }\n+\n+    public SequenceBounds getPaxosLogSequenceBounds(NamespaceAndUseCase namespaceAndUseCase) {\n+        ProgressComponents progress = getOrPopulateProgressComponents(namespaceAndUseCase);\n+        return SequenceBounds.builder()\n+                .lower(progress.seq())\n+                .upper(progress.seq() + MAX_ROWS_ALLOWED)\n+                .build();\n+    }\n+\n+    public void updateProgressState(Map<NamespaceAndUseCase, SequenceBounds> namespaceAndUseCaseSequenceBoundsMap) {\n+        namespaceAndUseCaseSequenceBoundsMap.forEach((namespaceAndUseCase, bounds) ->\n+                updateProgressStateForNamespaceAndUseCase(namespaceAndUseCase, bounds));\n+    }\n+\n+    private ProgressComponents getOrPopulateProgressComponents(NamespaceAndUseCase namespaceAndUseCase) {\n+        return verificationProgressStateCache.computeIfAbsent(namespaceAndUseCase, this::getLastVerifiedSeqFromLogs);\n+    }\n+\n+    private ProgressComponents getLastVerifiedSeqFromLogs(NamespaceAndUseCase namespaceAndUseCase) {\n+        Client client = namespaceAndUseCase.namespace();\n+        String useCase = namespaceAndUseCase.useCase();\n+\n+        return logVerificationProgressState\n+                .getProgressComponents(client, useCase)\n+                .orElseGet(() -> logVerificationProgressState.resetProgressState(\n+                        client, useCase, getLatestSequenceForNamespaceAndUseCase(namespaceAndUseCase)));\n+    }\n+\n+    @VisibleForTesting\n+    void updateProgressStateForNamespaceAndUseCase(NamespaceAndUseCase key, SequenceBounds value) {\n+        long lastVerifiedSequence = value.upper();\n+\n+        ProgressComponents currentProgressState = getOrPopulateProgressComponents(key);\n+        resetIfRequired(key, value, currentProgressState)\n+                .orElseGet(\n+                        () -> updateProgressInDbThroughCache(key, value, lastVerifiedSequence, currentProgressState));\n+    }\n+\n+    private ProgressComponents updateProgressInDbThroughCache(\n+            NamespaceAndUseCase key,\n+            SequenceBounds value,\n+            long lastVerifiedSequence,\n+            ProgressComponents progressComponents) {\n+        ProgressComponents progressState = ProgressComponents.builder()\n+                .progressLimit(progressComponents.progressLimit())\n+                .seq(value.upper())\n+                .build();\n+        verificationProgressStateCache.put(key, progressState);\n+        logVerificationProgressState.updateProgress(key.namespace(), key.useCase(), lastVerifiedSequence);\n+        return progressState;\n+    }\n+\n+    private Optional<ProgressComponents> resetIfRequired(\n+            NamespaceAndUseCase key, SequenceBounds value, ProgressComponents currentProgressState) {\n+        if (value.upper() <= currentProgressState.progressLimit()) {\n+            return Optional.empty();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33b3cb0066a1bb61e81f1aba3f05cb75dd4992c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQzNTA0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/LogVerificationProgressState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDozMTowNFrOHohMOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToyMjo0M1rOHoyaYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0ODg4OA==", "bodyText": "sanity check: this has never been wired up right?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512248888", "createdAt": "2020-10-26T20:31:04Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -49,38 +50,52 @@ private void initialize() {\n         execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n     }\n \n-    public void updateProgress(Client client, String useCase, long seq) {\n-        execute(dao -> dao.updateProgress(client, useCase, seq));\n-    }\n-\n-    public long getLastVerifiedSeq(Client client, String useCase) {\n+    public ProgressState resetProgressState(Client client, String useCase, long greatestLogSeq) {\n         return execute(dao -> {\n-            OptionalLong lastVerifiedSeq = dao.getLastVerifiedSeq(client, useCase);\n-            return lastVerifiedSeq.orElseGet(() -> setInitialProgress(client, useCase));\n+            dao.updateProgressStateAndGreatestSeqNumberToBeVerified(client, useCase, INITIAL_PROGRESS, greatestLogSeq);\n+            return ProgressState.builder()\n+                    .lastVerifiedSeq(INITIAL_PROGRESS)\n+                    .greatestSeqNumberToBeVerified(greatestLogSeq)\n+                    .build();\n         });\n     }\n \n-    private long setInitialProgress(Client client, String useCase) {\n-        updateProgress(client, useCase, INITIAL_PROGRESS);\n-        return INITIAL_PROGRESS;\n+    public void updateProgress(Client client, String useCase, long lastVerifiedSeq) {\n+        execute(dao -> dao.updateProgress(client, useCase, lastVerifiedSeq));\n+    }\n+\n+    public Optional<ProgressState> getProgressState(Client client, String useCase) {\n+        return execute(dao -> dao.getProgressState(client, useCase));\n     }\n \n     private <T> T execute(Function<LogVerificationProgressState.Queries, T> call) {\n         return jdbi.withExtension(LogVerificationProgressState.Queries.class, call::apply);\n     }\n \n     public interface Queries {\n-        @SqlUpdate(\"CREATE TABLE IF NOT EXISTS logVerificationProgress (namespace TEXT, useCase TEXT, seq BIGINT,\"\n-                + \"PRIMARY KEY(namespace, useCase))\")\n+        @SqlUpdate(\"CREATE TABLE IF NOT EXISTS logVerificationProgress (namespace TEXT, useCase TEXT, lastVerifiedSeq\"\n+                + \" BIGINT, greatestSeqNumberToBeVerified BIGINT, PRIMARY KEY(namespace, useCase))\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzMTA0Mg==", "bodyText": "This will break since #5071 merged, my bad, I will fix this.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512531042", "createdAt": "2020-10-27T09:22:43Z", "author": {"login": "sudiksha27"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -49,38 +50,52 @@ private void initialize() {\n         execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n     }\n \n-    public void updateProgress(Client client, String useCase, long seq) {\n-        execute(dao -> dao.updateProgress(client, useCase, seq));\n-    }\n-\n-    public long getLastVerifiedSeq(Client client, String useCase) {\n+    public ProgressState resetProgressState(Client client, String useCase, long greatestLogSeq) {\n         return execute(dao -> {\n-            OptionalLong lastVerifiedSeq = dao.getLastVerifiedSeq(client, useCase);\n-            return lastVerifiedSeq.orElseGet(() -> setInitialProgress(client, useCase));\n+            dao.updateProgressStateAndGreatestSeqNumberToBeVerified(client, useCase, INITIAL_PROGRESS, greatestLogSeq);\n+            return ProgressState.builder()\n+                    .lastVerifiedSeq(INITIAL_PROGRESS)\n+                    .greatestSeqNumberToBeVerified(greatestLogSeq)\n+                    .build();\n         });\n     }\n \n-    private long setInitialProgress(Client client, String useCase) {\n-        updateProgress(client, useCase, INITIAL_PROGRESS);\n-        return INITIAL_PROGRESS;\n+    public void updateProgress(Client client, String useCase, long lastVerifiedSeq) {\n+        execute(dao -> dao.updateProgress(client, useCase, lastVerifiedSeq));\n+    }\n+\n+    public Optional<ProgressState> getProgressState(Client client, String useCase) {\n+        return execute(dao -> dao.getProgressState(client, useCase));\n     }\n \n     private <T> T execute(Function<LogVerificationProgressState.Queries, T> call) {\n         return jdbi.withExtension(LogVerificationProgressState.Queries.class, call::apply);\n     }\n \n     public interface Queries {\n-        @SqlUpdate(\"CREATE TABLE IF NOT EXISTS logVerificationProgress (namespace TEXT, useCase TEXT, seq BIGINT,\"\n-                + \"PRIMARY KEY(namespace, useCase))\")\n+        @SqlUpdate(\"CREATE TABLE IF NOT EXISTS logVerificationProgress (namespace TEXT, useCase TEXT, lastVerifiedSeq\"\n+                + \" BIGINT, greatestSeqNumberToBeVerified BIGINT, PRIMARY KEY(namespace, useCase))\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0ODg4OA=="}, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTQ2ODQ3OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/SqlitePaxosStateLogHistory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MDowN1rOHohgMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo0MDowN1rOHohgMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NDAwMQ==", "bodyText": "I'd suggest maintaining lowerBoundInclusive and upperBoundInclusive through the parameters in the call stack when making these queries", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512254001", "createdAt": "2020-10-26T20:40:07Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -62,17 +63,30 @@ public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n         return execute(Queries::getAllNamespaceAndUseCaseTuples);\n     }\n \n-    public LearnerAndAcceptorRecords getLearnerAndAcceptorLogsSince(\n-            Client namespace, LearnerUseCase learnerUseCase, AcceptorUseCase acceptorUseCase, long seq) {\n+    public LearnerAndAcceptorRecords getLearnerAndAcceptorLogsInRange(\n+            Client namespace,\n+            LearnerUseCase learnerUseCase,\n+            AcceptorUseCase acceptorUseCase,\n+            long lowerBound,\n+            long upperBound) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUwNDU4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1MDoyN1rOHoh1tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1MDoyN1rOHoh1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1OTUwOQ==", "bodyText": "This variable name is misleading. These bounds are not verified at the time this call is made - they are the candidates you want to verify. In the previous model it was correct (because that's where you start the query from).", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512259509", "createdAt": "2020-10-26T20:50:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -67,15 +65,10 @@ public PaxosLogHistoryProvider(DataSource dataSource, List<TimeLockPaxosHistoryP\n                 .collect(Collectors.toSet());\n     }\n \n-    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n-        return logVerificationProgressState.getLastVerifiedSeq(\n-                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n-    }\n-\n     //     TODO(snanda): Refactor the two parts on translating PaxosHistoryOnRemote to\n     //      CompletePaxosHistoryForNamespaceAndUseCase to a separate component\n     public List<CompletePaxosHistoryForNamespaceAndUseCase> getHistory() {\n-        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = getNamespaceAndUseCaseToLastVerifiedSeqMap();\n+        Map<NamespaceAndUseCase, SequenceBounds> lastVerifiedSequences = getNamespaceAndUseCaseToLastVerifiedSeqMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUxNzUyOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/LocalHistoryLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NDoxMlrOHoh9wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NDoxMlrOHoh9wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTU3MA==", "bodyText": "The name is no longer correct.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512261570", "createdAt": "2020-10-26T20:54:12Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/LocalHistoryLoader.java", "diffHunk": "@@ -39,19 +40,21 @@ public static LocalHistoryLoader create(SqlitePaxosStateLogHistory sqlitePaxosSt\n         return new LocalHistoryLoader(sqlitePaxosStateLogHistory);\n     }\n \n-    public PaxosHistoryOnSingleNode getLocalPaxosHistory(Map<NamespaceAndUseCase, Long> lastVerifiedSequences) {\n+    public PaxosHistoryOnSingleNode getLocalPaxosHistory(\n+            Map<NamespaceAndUseCase, SequenceBounds> lastVerifiedSequences) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUyNTg4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NjoxNVrOHoiCeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NjoxNVrOHoiCeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2Mjc3Nw==", "bodyText": "nit: The name of this method is no longer correct though. As a user who's not familiar, how do I know what the elements of SequenceBounds are?", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512262777", "createdAt": "2020-10-26T20:56:15Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -114,17 +111,16 @@ private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCas\n     }\n \n     private List<HistoryQuery> getHistoryQueryListForRemoteServers(\n-            Map<NamespaceAndUseCase, Long> lastVerifiedSequences) {\n+            Map<NamespaceAndUseCase, SequenceBounds> lastVerifiedSequences) {\n         return KeyedStream.stream(lastVerifiedSequences)\n                 .mapEntries(this::buildHistoryQuery)\n                 .values()\n                 .collect(Collectors.toList());\n     }\n \n-    private Map<NamespaceAndUseCase, Long> getNamespaceAndUseCaseToLastVerifiedSeqMap() {\n+    private Map<NamespaceAndUseCase, SequenceBounds> getNamespaceAndUseCaseToLastVerifiedSeqMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzMzcxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1ODo0NlrOHoiHpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1ODo0NlrOHoiHpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDEwMQ==", "bodyText": "What does this mean?\nI might be missing something, but I'm starting to be convinced that this class has no reason to exist: we should just operate on HistoryQuery objects.", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512264101", "createdAt": "2020-10-26T20:58:46Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface SequenceBounds {\n+    int MAX_ROWS_ALLOWED = 500;\n+\n+    @Value.Parameter\n+    long lowerInclusive();\n+\n+    @Value.Parameter\n+    long upperInclusive();\n+\n+    static ImmutableSequenceBounds.Builder builder() {\n+        return ImmutableSequenceBounds.builder();\n+    }\n+\n+    static SequenceBounds getBoundsSinceLastVerified(long lastVerified) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzNTkwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1OToyNlrOHoiI7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1OToyNlrOHoiI7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDQzMQ==", "bodyText": "What does this method name mean? (It gets the bounds for the next history query; is there a reason the progress tracker shouldn't be creating history queries in and of itself?)", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512264431", "createdAt": "2020-10-26T20:59:26Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/PaxosLogHistoryProgressTracker.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.models.LearnerUseCase;\n+import com.palantir.timelock.history.models.ProgressState;\n+import com.palantir.timelock.history.models.SequenceBounds;\n+import com.palantir.timelock.history.sqlite.LogVerificationProgressState;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import javax.sql.DataSource;\n+\n+public class PaxosLogHistoryProgressTracker {\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory;\n+\n+    private Map<NamespaceAndUseCase, ProgressState> verificationProgressStateCache = new ConcurrentHashMap<>();\n+\n+    public PaxosLogHistoryProgressTracker(\n+            DataSource dataSource, SqlitePaxosStateLogHistory sqlitePaxosStateLogHistory) {\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.sqlitePaxosStateLogHistory = sqlitePaxosStateLogHistory;\n+    }\n+\n+    public SequenceBounds getPaxosLogSequenceBounds(NamespaceAndUseCase namespaceAndUseCase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU0MzcxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMTozN1rOHoiNog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMTozN1rOHoiNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTYzNA==", "bodyText": "It feels kind of dubious that this is here; it seems this is just a history query without a namespace and use case. If possible I'd urge you to try and kill this class altogether, but if that's not possible I would strongly prefer naming this class so that it's obvious that it is specific to history queries (e.g. HistoryQuerySequenceRange).", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512265634", "createdAt": "2020-10-26T21:01:37Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/SequenceBounds.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.models;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface SequenceBounds {\n+    int MAX_ROWS_ALLOWED = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU0NTM1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/utils/HistoryQueryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMjowOVrOHoiOrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMjowOVrOHoiOrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTkwMw==", "bodyText": "nit: the standard form for factory classes of this kind is the plural of the class name i.e. HistoryQueries", "url": "https://github.com/palantir/atlasdb/pull/5078#discussion_r512265903", "createdAt": "2020-10-26T21:02:09Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/history/utils/HistoryQueryUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.history.utils;\n+\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.HistoryQuery;\n+\n+public class HistoryQueryUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04722965a9d78ce271465401eb5fe595717862c"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2439, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}