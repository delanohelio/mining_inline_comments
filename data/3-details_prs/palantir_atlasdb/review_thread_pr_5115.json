{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNzQzOTA4", "number": 5115, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDozNFrOE5jEEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMToyNFrOE6Cecw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzc4NzY5OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NDozNFrOH0EuAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzo0Nzo0M1rOH0KZmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTMxMg==", "bodyText": "I don't know leader time (and/or the internals of Timelock) all that well - would leader times from different namespaces have different leadership IDs, or the same? If you expect one or the other, can you verify that in this test?", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r524365312", "createdAt": "2020-11-16T15:44:34Z", "author": {"login": "Jolyon-S"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +487,18 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderRespondsToMultiClientRequests() {\n+        MultiClientConjureTimelockService multiClientConjureTimelockService =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AuthHeader.valueOf(\"Bearer omitted\"), expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "951f9a2af5014d08e565a09a2ed35e18d3963fa7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODM5NQ==", "bodyText": "Leadership ids should be different as each client will have its own instance of AsyncTimelockService -> AsyncLockService -> LeaderClock. I've added the check now.", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r524458395", "createdAt": "2020-11-16T17:47:43Z", "author": {"login": "sudiksha27"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +487,18 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderRespondsToMultiClientRequests() {\n+        MultiClientConjureTimelockService multiClientConjureTimelockService =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AuthHeader.valueOf(\"Bearer omitted\"), expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTMxMg=="}, "originalCommit": {"oid": "951f9a2af5014d08e565a09a2ed35e18d3963fa7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI1MjAxOnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyOTozNFrOH0wjLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowNjoxNVrOH0z5TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MzQzOA==", "bodyText": "This is perhaps being a bit pedantic, but get commit timestamps have a leader ID hidden inside (it's the logId inside LockWatchStateUpdate). Perhaps worth a similar check to the one above?", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525083438", "createdAt": "2020-11-17T11:29:34Z", "author": {"login": "Jolyon-S"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n+    }\n+\n+    @Test\n+    public void leaderCanProcessMultiClientGetCommitTimestampRequest() {\n+        MultiClientConjureTimelockService service =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps =\n+                service.getCommitTimestamps(AUTH_HEADER, getGetCommitTimestampsRequests(expectedNamespaces));\n+        Set<String> namespaces = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63a2996a041800fc313b694b007e6242ce35b03"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzODI1Mg==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525138252", "createdAt": "2020-11-17T13:06:15Z", "author": {"login": "sudiksha27"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n+    }\n+\n+    @Test\n+    public void leaderCanProcessMultiClientGetCommitTimestampRequest() {\n+        MultiClientConjureTimelockService service =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps =\n+                service.getCommitTimestamps(AUTH_HEADER, getGetCommitTimestampsRequests(expectedNamespaces));\n+        Set<String> namespaces = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MzQzOA=="}, "originalCommit": {"oid": "f63a2996a041800fc313b694b007e6242ce35b03"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI2NjQ5OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozMzozNVrOH0wr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxNjozN1rOH025OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTY3Mw==", "bodyText": "maybe a bit overkill: if we run these against the regular conjuretimelockservice.getLeaderTime we get the same answer right?", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525085673", "createdAt": "2020-11-17T11:33:35Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63a2996a041800fc313b694b007e6242ce35b03"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzODE4MQ==", "bodyText": "Same leader will serve the request, but leaderTime will be different (time elapsed b/w two requests). I will add this test for commitTs request as well, where I can add stricter assertions on the response.", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525138181", "createdAt": "2020-11-17T13:06:08Z", "author": {"login": "sudiksha27"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTY3Mw=="}, "originalCommit": {"oid": "f63a2996a041800fc313b694b007e6242ce35b03"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4NzM4NQ==", "bodyText": "Yeah, makes sense. I think I intended an ID comparison, which you've added below.", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525187385", "createdAt": "2020-11-17T14:16:37Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTY3Mw=="}, "originalCommit": {"oid": "f63a2996a041800fc313b694b007e6242ce35b03"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjkzNDI3OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMToyNFrOH03HaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoyMToyNFrOH03HaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MTAxNg==", "bodyText": "nit/suggestion: Usually these assertions are assertThat(actual).isEqualTo(expected), so I'd probably flip these two. Also, you can use as(String) to say in English what the assertion is doing, which I think is useful for this later one, which verifies timestamps are contiguously increasing per namespace if there are no elections.", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525191016", "createdAt": "2020-11-17T14:21:24Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -514,12 +520,70 @@ public void leaderCanProcessMultiClientGetCommitTimestampRequest() {\n         MultiClientConjureTimelockService service =\n                 cluster.currentLeaderFor(client.namespace()).multiClientService();\n         Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n-        List<NamespacedGetCommitTimestampsResponse> commitTimestamps =\n-                service.getCommitTimestamps(AUTH_HEADER, getGetCommitTimestampsRequests(expectedNamespaces));\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps = service.getCommitTimestamps(\n+                AUTH_HEADER, defaultNamespacedGetCommitTimestampsRequests(expectedNamespaces));\n         Set<String> namespaces = commitTimestamps.stream()\n                 .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n                 .collect(Collectors.toSet());\n         assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<UUID> leadershipIds = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getLockWatchUpdate)\n+                .map(LockWatchStateUpdate::logId)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n+    }\n+\n+    @Test\n+    public void sanityCheckMultiClientLeaderTimeAgainstConjureTimelockService() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\", \"gamma\");\n+        List<NamespacedLeaderTime> leaderTimeResponses =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespacesWithLeaderTime = leaderTimeResponses.stream()\n+                .map(NamespacedLeaderTime::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespacesWithLeaderTime).hasSameElementsAs(expectedNamespaces);\n+\n+        // Whether we hit the multi client endpoint or conjureTimelockService endpoint(services one client in one\n+        // call), for a namespace, the underlying service to process the request is the same\n+        leaderTimeResponses.forEach(namespacedLeaderTime -> {\n+            LeaderTime conjureTimelockServiceLeaderTime = leader.client(namespacedLeaderTime.getNamespace())\n+                    .namespacedConjureTimelockService()\n+                    .leaderTime();\n+            assertThat(namespacedLeaderTime.getLeaderTime().id()).isEqualTo(conjureTimelockServiceLeaderTime.id());\n+        });\n+    }\n+\n+    @Test\n+    public void sanityCheckMultiClientGetCommitTimestampsAgainstConjureTimelockService() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService service = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps = service.getCommitTimestamps(\n+                AUTH_HEADER, defaultNamespacedGetCommitTimestampsRequests(expectedNamespaces));\n+        Set<String> namespaces = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        // Whether we hit the multi client endpoint or conjureTimelockService endpoint(services one client in one\n+        // call), for a namespace, the underlying service to process the request is the same\n+        commitTimestamps.forEach(namespacedGetCommitTimestampsResponse -> {\n+            GetCommitTimestampsResponse conjureTimelockServiceGetCommitTimestampResponse = leader.client(\n+                            namespacedGetCommitTimestampsResponse.getNamespace())\n+                    .namespacedConjureTimelockService()\n+                    .getCommitTimestamps(defaultCommitTimestampRequest());\n+            assertThat(namespacedGetCommitTimestampsResponse\n+                            .getLockWatchUpdate()\n+                            .logId())\n+                    .isEqualTo(conjureTimelockServiceGetCommitTimestampResponse\n+                            .getLockWatchUpdate()\n+                            .logId());\n+            assertThat(namespacedGetCommitTimestampsResponse.getInclusiveUpper())\n+                    .isEqualTo(conjureTimelockServiceGetCommitTimestampResponse.getInclusiveLower() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11f0308bd9b840f1493bb22eb9284b71f788404"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2497, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}