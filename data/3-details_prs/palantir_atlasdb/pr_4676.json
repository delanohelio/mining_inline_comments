{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzA5OTE5", "number": 4676, "title": "[LW] Remove old client and resource and use undertow", "bodyText": "Goals (and why):\nSince this is not used yet, we can reimplement using conjure undertow\nImplementation Description (bullets):\nBasically the same as for conjure timelock.\nTesting (What was existing testing like?  What have you done to improve it?):\nNo tests. Is there something we want to test? I will work on ETE tests next which will catch if there is something wrong in the wiring.\nConcerns (what feedback would you like?):\nIs it correct, and did I miss removing something that's now unused?\nWhere should we start reviewing?:\ntimelock-api.yml\nPriority (whenever / two weeks / yesterday):\nThis week I hope", "createdAt": "2020-03-26T17:23:31Z", "url": "https://github.com/palantir/atlasdb/pull/4676", "merged": true, "mergeCommit": {"oid": "e7f2a021efeedb28322fb16c5931b7229435a04a"}, "closed": true, "closedAt": "2020-04-06T15:45:05Z", "author": {"login": "gmaretic"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRfPRcAH2gAyMzk0MzA5OTE5OjI2ODAzNWYxNmUwNTIyZjIxMDY3M2FiYzNlOTE2ZDZlODg4OTA0NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRueibgFqTM4Mjc1Mzc3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "268035f16e0522f210673abc3e916d6e88890461", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/268035f16e0522f210673abc3e916d6e88890461", "committedDate": "2020-03-26T17:06:32Z", "message": "Remove old client and resource and use undertow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjM3Mjk1", "url": "https://github.com/palantir/atlasdb/pull/4676#pullrequestreview-382237295", "createdAt": "2020-03-26T17:24:09Z", "commit": {"oid": "268035f16e0522f210673abc3e916d6e88890461"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoyNDowOVrOF8R_VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozNTozOFrOF8ShtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MzYyMQ==", "bodyText": "nit: double space", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398753621", "createdAt": "2020-03-26T17:24:09Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureLockWatchingService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.atlasdb.timelock.lock.watch.ConjureLockWatchingService;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureLockWatchingService {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+\n+    private final ConjureLockWatchingService lockWatcher;\n+    private final String namespace;\n+\n+    public NamespacedConjureLockWatchingService(ConjureLockWatchingService lockWatcher, String namespace) {\n+        this.lockWatcher = lockWatcher;\n+        this.namespace = namespace;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268035f16e0522f210673abc3e916d6e88890461"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NDE4NA==", "bodyText": "not too sure about this, I think you still want stuff behind the ATR, but I'll think about it whilst goign through the rest of the PR.\nTurns out ATR extends LWS so it's all good.", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398754184", "createdAt": "2020-03-26T17:24:54Z", "author": {"login": "felixdesouza"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/AsyncTimeLockServicesCreator.java", "diffHunk": "@@ -78,7 +77,6 @@ public TimeLockServices createTimeLockServices(\n \n         AsyncTimelockResource asyncTimelockResource =\n                 new AsyncTimelockResource(maybeEnhancedLockLog, asyncTimelockService);\n-        LockWatchingResource lockWatchingResource = new LockWatchingResource(asyncTimelockService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268035f16e0522f210673abc3e916d6e88890461"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NjE5MA==", "bodyText": "not particularly fussed but not sure where we stand re implementing the union in conjure?", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398756190", "createdAt": "2020-03-26T17:27:35Z", "author": {"login": "felixdesouza"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -28,6 +28,10 @@ types:\n       base-type: any\n       external:\n         java: java.lang.Long\n+    LockWatchReference:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.watch.LockWatchReferences.LockWatchReference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268035f16e0522f210673abc3e916d6e88890461"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1ODA4OA==", "bodyText": "sad that we're gonna have to do this for each resource :(", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398758088", "createdAt": "2020-03-26T17:30:05Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockWatchingResource.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.function.Function;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.atlasdb.timelock.lock.watch.ConjureLockWatchingService;\n+import com.palantir.atlasdb.timelock.lock.watch.ConjureLockWatchingServiceEndpoints;\n+import com.palantir.atlasdb.timelock.lock.watch.UndertowConjureLockWatchingService;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureLockWatchingResource implements UndertowConjureLockWatchingService {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    private ConjureLockWatchingResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268035f16e0522f210673abc3e916d6e88890461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MjQyMA==", "bodyText": "sad about this :( but I can't seem to think of a way without having some sort of conjure-undertow generation support for handling exceptions or having a proxy etc.", "url": "https://github.com/palantir/atlasdb/pull/4676#discussion_r398762420", "createdAt": "2020-03-26T17:35:38Z", "author": {"login": "felixdesouza"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -174,17 +174,16 @@ private void createAndRegisterResources() {\n         // Finally, register the health check, and endpoints associated with the clients.\n         TimeLockResource resource = TimeLockResource.create(namespaces);\n         healthCheck = paxosResources.leadershipComponents().healthCheck(namespaces::getActiveClients);\n-        LockWatchTestingService.create(\n-                Suppliers.compose(TimeLockRuntimeConfiguration::lockWatchTestConfig, runtime::get),\n-                resource::getLockWatchingResource);\n+\n         registrar.accept(resource);\n \n-        Function<String, AsyncTimelockService> serviceCreator =\n-                namespace -> namespaces.get(namespace).getTimelockService();\n+        Function<String, AsyncTimelockService> creator = namespace -> namespaces.get(namespace).getTimelockService();\n         if (undertowRegistrar.isPresent()) {\n-            undertowRegistrar.get().accept(ConjureTimelockResource.undertow(redirectRetryTargeter(), serviceCreator));\n+            undertowRegistrar.get().accept(ConjureTimelockResource.undertow(redirectRetryTargeter(), creator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "268035f16e0522f210673abc3e916d6e88890461"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98515a9167bd347f6c5c6ffc1ab294b7d4a25faa", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/98515a9167bd347f6c5c6ffc1ab294b7d4a25faa", "committedDate": "2020-03-27T10:46:03Z", "message": "Remove double newline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzUzNzc3", "url": "https://github.com/palantir/atlasdb/pull/4676#pullrequestreview-382753777", "createdAt": "2020-03-27T10:51:47Z", "commit": {"oid": "98515a9167bd347f6c5c6ffc1ab294b7d4a25faa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3009, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}