{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzk5ODAw", "number": 5028, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMjoxM1rOEtadZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozNDo0NVrOEta8Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU0ODg3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/PersistentNamespaceContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMjoxM1rOHhL-1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMjoxM1rOHhL-1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTM2Nw==", "bodyText": "I was on the fence on suggesting this earlier \ud83e\udd73", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504561367", "createdAt": "2020-10-14T10:12:13Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/PersistentNamespaceContext.java", "diffHunk": "@@ -17,31 +17,19 @@\n package com.palantir.atlasdb.timelock.management;\n \n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.util.Optional;\n \n import javax.sql.DataSource;\n \n-import org.immutables.value.Value;\n+import org.derive4j.Data;\n \n-import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n \n-@Value.Immutable\n+@Data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU2MzQ1OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxNjoxMlrOHhMHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDowNzozMlrOHhjM0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MzYzNQ==", "bodyText": "oops", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504563635", "createdAt": "2020-10-14T10:16:12Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -193,22 +196,42 @@ private TimeLockAgent(MetricsManager metricsManager,\n         this.corruptionComponents = paxosResources.timeLockCorruptionComponents();\n     }\n \n-    private TimestampCreator getTimestampCreator() {\n+    private TimestampStorage getTimestampStorage() {\n         TsBoundPersisterConfiguration timestampBoundPersistence = install.timestampBoundPersistence();\n         if (timestampBoundPersistence instanceof PaxosTsBoundPersisterConfiguration) {\n-            return new PaxosTimestampCreator(paxosResources.timestampServiceFactory());\n+            return createPaxosBasedTimestampStorage();\n         } else if (timestampBoundPersistence instanceof DatabaseTsBoundPersisterConfiguration) {\n-            DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                    = (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence;\n-            return DbBoundTimestampCreator.create(\n-                    persisterConfiguration.keyValueServiceConfig(),\n-                    metricsManager,\n-                    createLeaderConfig());\n+            return createDatabaseTimestampStorage(\n+                    (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence);\n         }\n         throw new RuntimeException(String.format(\"Unknown TsBoundPersisterConfiguration found %s\",\n                 timestampBoundPersistence.getClass()));\n     }\n \n+    private TimestampStorage createPaxosBasedTimestampStorage() {\n+        return ImmutableTimestampStorage.builder()\n+                .timestampCreator(new PaxosTimestampCreator(paxosResources.timestampServiceFactory()))\n+                .persistentNamespaceContext(\n+                        PersistentNamespaceContexts.timestampBoundPaxos(\n+                                install.paxos().dataDirectory().toPath(),\n+                                sqliteDataSource))\n+                .build();\n+    }\n+\n+    private TimestampStorage createDatabaseTimestampStorage(\n+            DatabaseTsBoundPersisterConfiguration timestampBoundPersistence) {\n+        DatabaseTsBoundPersisterConfiguration persisterConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTc3Ng==", "bodyText": "fixed!", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504941776", "createdAt": "2020-10-14T20:07:32Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -193,22 +196,42 @@ private TimeLockAgent(MetricsManager metricsManager,\n         this.corruptionComponents = paxosResources.timeLockCorruptionComponents();\n     }\n \n-    private TimestampCreator getTimestampCreator() {\n+    private TimestampStorage getTimestampStorage() {\n         TsBoundPersisterConfiguration timestampBoundPersistence = install.timestampBoundPersistence();\n         if (timestampBoundPersistence instanceof PaxosTsBoundPersisterConfiguration) {\n-            return new PaxosTimestampCreator(paxosResources.timestampServiceFactory());\n+            return createPaxosBasedTimestampStorage();\n         } else if (timestampBoundPersistence instanceof DatabaseTsBoundPersisterConfiguration) {\n-            DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                    = (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence;\n-            return DbBoundTimestampCreator.create(\n-                    persisterConfiguration.keyValueServiceConfig(),\n-                    metricsManager,\n-                    createLeaderConfig());\n+            return createDatabaseTimestampStorage(\n+                    (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence);\n         }\n         throw new RuntimeException(String.format(\"Unknown TsBoundPersisterConfiguration found %s\",\n                 timestampBoundPersistence.getClass()));\n     }\n \n+    private TimestampStorage createPaxosBasedTimestampStorage() {\n+        return ImmutableTimestampStorage.builder()\n+                .timestampCreator(new PaxosTimestampCreator(paxosResources.timestampServiceFactory()))\n+                .persistentNamespaceContext(\n+                        PersistentNamespaceContexts.timestampBoundPaxos(\n+                                install.paxos().dataDirectory().toPath(),\n+                                sqliteDataSource))\n+                .build();\n+    }\n+\n+    private TimestampStorage createDatabaseTimestampStorage(\n+            DatabaseTsBoundPersisterConfiguration timestampBoundPersistence) {\n+        DatabaseTsBoundPersisterConfiguration persisterConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MzYzNQ=="}, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU3MDY1OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxODoxN1rOHhMMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxODoxN1rOHhMMHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2NDc2Ng==", "bodyText": "much better :)", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504564766", "createdAt": "2020-10-14T10:18:17Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -193,22 +196,42 @@ private TimeLockAgent(MetricsManager metricsManager,\n         this.corruptionComponents = paxosResources.timeLockCorruptionComponents();\n     }\n \n-    private TimestampCreator getTimestampCreator() {\n+    private TimestampStorage getTimestampStorage() {\n         TsBoundPersisterConfiguration timestampBoundPersistence = install.timestampBoundPersistence();\n         if (timestampBoundPersistence instanceof PaxosTsBoundPersisterConfiguration) {\n-            return new PaxosTimestampCreator(paxosResources.timestampServiceFactory());\n+            return createPaxosBasedTimestampStorage();\n         } else if (timestampBoundPersistence instanceof DatabaseTsBoundPersisterConfiguration) {\n-            DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                    = (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence;\n-            return DbBoundTimestampCreator.create(\n-                    persisterConfiguration.keyValueServiceConfig(),\n-                    metricsManager,\n-                    createLeaderConfig());\n+            return createDatabaseTimestampStorage(\n+                    (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence);\n         }\n         throw new RuntimeException(String.format(\"Unknown TsBoundPersisterConfiguration found %s\",\n                 timestampBoundPersistence.getClass()));\n     }\n \n+    private TimestampStorage createPaxosBasedTimestampStorage() {\n+        return ImmutableTimestampStorage.builder()\n+                .timestampCreator(new PaxosTimestampCreator(paxosResources.timestampServiceFactory()))\n+                .persistentNamespaceContext(\n+                        PersistentNamespaceContexts.timestampBoundPaxos(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU5Njc0OnYy", "diffSide": "LEFT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNTo1M1rOHhMcSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNTo1M1rOHhMcSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODkwNA==", "bodyText": "\ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504568904", "createdAt": "2020-10-14T10:25:53Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -283,23 +306,17 @@ private void registerManagementResource() {\n         Path rootDataDirectory = install.paxos().dataDirectory().toPath();\n         if (undertowRegistrar.isPresent()) {\n             registerCorruptionHandlerWrappedService(undertowRegistrar.get(), TimeLockManagementResource.undertow(\n-                    PersistentNamespaceContext.of(\n-                            rootDataDirectory, sqliteDataSource, isUsingDatabasePersistence()),\n+                    timestampStorage.persistentNamespaceContext(),\n                     namespaces,\n                     redirectRetryTargeter()));\n         } else {\n             registrar.accept(TimeLockManagementResource.jersey(\n-                    PersistentNamespaceContext.of(\n-                            rootDataDirectory, sqliteDataSource, isUsingDatabasePersistence()),\n+                    timestampStorage.persistentNamespaceContext(),\n                     namespaces,\n                     redirectRetryTargeter()));\n         }\n     }\n \n-    private boolean isUsingDatabasePersistence() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDU5OTIzOnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyNjozOFrOHhMd1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDowNzo0OVrOHhjNdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTMwMw==", "bodyText": "nit: make TimestampStorage closeable?", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504569303", "createdAt": "2020-10-14T10:26:38Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -403,6 +420,6 @@ public LeaderElectionHealthReport timeLockLeadershipHealthCheck() {\n     public void shutdown() {\n         paxosResources.leadershipComponents().shutdown();\n         sqliteDataSource.close();\n-        timestampCreator.close();\n+        timestampStorage.timestampCreator().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTk0Mw==", "bodyText": "Sure, yeah let's just have it in there", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504941943", "createdAt": "2020-10-14T20:07:49Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -403,6 +420,6 @@ public LeaderElectionHealthReport timeLockLeadershipHealthCheck() {\n     public void shutdown() {\n         paxosResources.leadershipComponents().shutdown();\n         sqliteDataSource.close();\n-        timestampCreator.close();\n+        timestampStorage.timestampCreator().close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTMwMw=="}, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDYxNDcyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMToxNFrOHhMnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDoxMDozMlrOHhjTYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MTc4OA==", "bodyText": "Did we not extend AtlasDbFactory because then we run into having two factories of same type? Not a complaint, just asking for a friend :P", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504571788", "createdAt": "2020-10-14T10:31:14Z", "author": {"login": "gmaretic"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timestamp;\n+\n+import java.util.Optional;\n+\n+import com.palantir.atlasdb.config.DbTimestampCreationSetting;\n+import com.palantir.atlasdb.config.LeaderConfig;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.timestamp.ManagedTimestampService;\n+\n+/**\n+ * See {@link com.palantir.atlasdb.spi.AtlasDbFactory}. A {@link DbTimeLockFactory} is an extension of an\n+ * AtlasDbFactory that is expected to make suitable decisions around certain parameters to create a raw key-value\n+ * service, and it also supports extracting the timestamp series known about by the underlying database.\n+ */\n+public interface DbTimeLockFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MzQ1Ng==", "bodyText": "I didn't even think of that, actually - I went with the standard \"prefer composition over inheritance\" design principle here. You're right that that would have been a problem with the inheritance model...\nSome of it, though, is also to restrict the visibility to users. I don't want people to try getting the timestamp invalidator, or calling createRawKvs with some of the other config options set.", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504943456", "createdAt": "2020-10-14T20:10:32Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timestamp;\n+\n+import java.util.Optional;\n+\n+import com.palantir.atlasdb.config.DbTimestampCreationSetting;\n+import com.palantir.atlasdb.config.LeaderConfig;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.timestamp.ManagedTimestampService;\n+\n+/**\n+ * See {@link com.palantir.atlasdb.spi.AtlasDbFactory}. A {@link DbTimeLockFactory} is an extension of an\n+ * AtlasDbFactory that is expected to make suitable decisions around certain parameters to create a raw key-value\n+ * service, and it also supports extracting the timestamp series known about by the underlying database.\n+ */\n+public interface DbTimeLockFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MTc4OA=="}, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDYyMjMzOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/RelationalDbTimeLockFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMzoxMFrOHhMr9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMzoxMFrOHhMr9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjkxNw==", "bodyText": "Nice!", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504572917", "createdAt": "2020-10-14T10:33:10Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/RelationalDbTimeLockFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.util.Optional;\n+\n+import com.google.auto.service.AutoService;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.config.DbTimestampCreationSetting;\n+import com.palantir.atlasdb.config.LeaderConfig;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.timestamp.DbTimeLockFactory;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.timestamp.ManagedTimestampService;\n+\n+@AutoService(DbTimeLockFactory.class)\n+public class RelationalDbTimeLockFactory implements DbTimeLockFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDYyNzk4OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozNDo0NlrOHhMvWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozNDo0NlrOHhMvWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3Mzc4Ng==", "bodyText": "\ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504573786", "createdAt": "2020-10-14T10:34:46Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "diffHunk": "@@ -100,13 +101,18 @@ public static TimeLockManagementService jersey(\n \n     private static Set<PersistentNamespaceLoader> createNamespaceLoaders(\n             PersistentNamespaceContext persistentNamespaceContext) {\n-        if (persistentNamespaceContext.isUsingDatabasePersistence()) {\n-            return ImmutableSet.of(new DatabaseNamespaceLoader());\n-        }\n-        PersistentNamespaceLoader diskLoader = new DiskNamespaceLoader(persistentNamespaceContext.fileDataDirectory());\n-        PersistentNamespaceLoader sqliteLoader = SqliteNamespaceLoader.create(\n-                persistentNamespaceContext.sqliteDataSource());\n-        return ImmutableSet.of(diskLoader, sqliteLoader);\n+        return PersistentNamespaceContexts.caseOf(persistentNamespaceContext)\n+                .timestampBoundPaxos((fileDataDirectory, sqliteDataSource) -> {\n+                    PersistentNamespaceLoader diskLoader = new DiskNamespaceLoader(fileDataDirectory);\n+                    PersistentNamespaceLoader sqliteLoader = SqliteNamespaceLoader.create(sqliteDataSource);\n+                    return ImmutableSet.of(diskLoader, sqliteLoader);\n+                })\n+                .dbBound(seriesProvider -> ImmutableSet.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd93c6ff44bcc4812b1889d4e65781202420229"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2629, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}