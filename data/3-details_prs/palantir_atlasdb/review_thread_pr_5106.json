{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NzQ5NTg5", "number": 5106, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NToxOVrOE3vTig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowMTozMFrOE3veOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODgyMTg2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NToxOVrOHxQnQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NToxOVrOHxQnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNDQ2Ng==", "bodyText": "...ensure that events are present for each version starting with client version (exclusive) and ending with transaction version (inclusive).", "url": "https://github.com/palantir/atlasdb/pull/5106#discussion_r521414466", "createdAt": "2020-11-11T14:55:19Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -53,14 +53,20 @@\n \n     default TransactionsLockWatchUpdate toTransactionsLockWatchUpdate(\n             TimestampMapping timestampMapping, Optional<LockWatchVersion> lastKnownVersion) {\n-        // If the client is at the same version as the earliest version in the timestamp mapping, then they will\n-        // only receive versions after that - and therefore the range of versions coming back from the events will not\n-        // enclose the versions in the mapping. This flag makes sure that we don't throw on this case\n-        boolean offsetStartVersion = lastKnownVersion\n-                .map(version ->\n-                        version.version() == timestampMapping.versionRange().lowerEndpoint())\n-                .orElse(false);\n-        verifyReturnedEventsEnclosesTransactionVersions(timestampMapping.versionRange(), offsetStartVersion);\n+        /*\n+         Case 1: client is behind earliest transaction. Therefore we want to ensure that there are events from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8717a3fcfd4984552b1b821a6ad2f3b04fb26e7b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODg0OTIzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTowMTozMFrOHxQ37A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNTo1MTowN1rOHxTBdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxODczMg==", "bodyText": "Range.openClosed so you don't need to do +1 on the lower bound everywhere", "url": "https://github.com/palantir/atlasdb/pull/5106#discussion_r521418732", "createdAt": "2020-11-11T15:01:30Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -73,28 +79,23 @@ default CommitUpdate toCommitUpdate(LockWatchVersion startVersion, CommitInfo co\n             return ImmutableInvalidateAll.builder().build();\n         }\n \n+        // We want to ensure that we do not miss any versions, but we do not care about the event with the same version\n+        // as the start version.\n         verifyReturnedEventsEnclosesTransactionVersions(\n-                Range.closed(startVersion.version(), commitInfo.commitVersion().version()), true);\n+                startVersion.version() + 1, commitInfo.commitVersion().version());\n \n         LockEventVisitor eventVisitor = new LockEventVisitor(commitInfo.commitLockToken());\n         Set<LockDescriptor> locksTakenOut = new HashSet<>();\n         events().events().forEach(event -> locksTakenOut.addAll(event.accept(eventVisitor)));\n         return ImmutableInvalidateSome.builder().invalidatedLocks(locksTakenOut).build();\n     }\n \n-    default void verifyReturnedEventsEnclosesTransactionVersions(Range<Long> versionRange, boolean offsetStartVersion) {\n-        // If we offset the start version, but the range is already [x..x], we throw when creating the range.\n-        if (versionRange.lowerEndpoint().equals(versionRange.upperEndpoint()) && offsetStartVersion) {\n+    default void verifyReturnedEventsEnclosesTransactionVersions(long lowerBound, long upperBound) {\n+        if (lowerBound > upperBound) {\n             return;\n         }\n \n-        Range<Long> rangeToTest;\n-        if (offsetStartVersion) {\n-            rangeToTest = Range.closed(versionRange.lowerEndpoint() + 1, versionRange.upperEndpoint());\n-        } else {\n-            rangeToTest = versionRange;\n-        }\n-\n+        Range<Long> rangeToTest = Range.closed(lowerBound, upperBound);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8717a3fcfd4984552b1b821a6ad2f3b04fb26e7b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMjU3OQ==", "bodyText": "Though I guess you need a -1 :D", "url": "https://github.com/palantir/atlasdb/pull/5106#discussion_r521422579", "createdAt": "2020-11-11T15:07:08Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -73,28 +79,23 @@ default CommitUpdate toCommitUpdate(LockWatchVersion startVersion, CommitInfo co\n             return ImmutableInvalidateAll.builder().build();\n         }\n \n+        // We want to ensure that we do not miss any versions, but we do not care about the event with the same version\n+        // as the start version.\n         verifyReturnedEventsEnclosesTransactionVersions(\n-                Range.closed(startVersion.version(), commitInfo.commitVersion().version()), true);\n+                startVersion.version() + 1, commitInfo.commitVersion().version());\n \n         LockEventVisitor eventVisitor = new LockEventVisitor(commitInfo.commitLockToken());\n         Set<LockDescriptor> locksTakenOut = new HashSet<>();\n         events().events().forEach(event -> locksTakenOut.addAll(event.accept(eventVisitor)));\n         return ImmutableInvalidateSome.builder().invalidatedLocks(locksTakenOut).build();\n     }\n \n-    default void verifyReturnedEventsEnclosesTransactionVersions(Range<Long> versionRange, boolean offsetStartVersion) {\n-        // If we offset the start version, but the range is already [x..x], we throw when creating the range.\n-        if (versionRange.lowerEndpoint().equals(versionRange.upperEndpoint()) && offsetStartVersion) {\n+    default void verifyReturnedEventsEnclosesTransactionVersions(long lowerBound, long upperBound) {\n+        if (lowerBound > upperBound) {\n             return;\n         }\n \n-        Range<Long> rangeToTest;\n-        if (offsetStartVersion) {\n-            rangeToTest = Range.closed(versionRange.lowerEndpoint() + 1, versionRange.upperEndpoint());\n-        } else {\n-            rangeToTest = versionRange;\n-        }\n-\n+        Range<Long> rangeToTest = Range.closed(lowerBound, upperBound);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxODczMg=="}, "originalCommit": {"oid": "8717a3fcfd4984552b1b821a6ad2f3b04fb26e7b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ1Mzk0Mw==", "bodyText": "Yeah nope, because there is one case where you need something different - probably easier at this point to just add the one.", "url": "https://github.com/palantir/atlasdb/pull/5106#discussion_r521453943", "createdAt": "2020-11-11T15:51:07Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -73,28 +79,23 @@ default CommitUpdate toCommitUpdate(LockWatchVersion startVersion, CommitInfo co\n             return ImmutableInvalidateAll.builder().build();\n         }\n \n+        // We want to ensure that we do not miss any versions, but we do not care about the event with the same version\n+        // as the start version.\n         verifyReturnedEventsEnclosesTransactionVersions(\n-                Range.closed(startVersion.version(), commitInfo.commitVersion().version()), true);\n+                startVersion.version() + 1, commitInfo.commitVersion().version());\n \n         LockEventVisitor eventVisitor = new LockEventVisitor(commitInfo.commitLockToken());\n         Set<LockDescriptor> locksTakenOut = new HashSet<>();\n         events().events().forEach(event -> locksTakenOut.addAll(event.accept(eventVisitor)));\n         return ImmutableInvalidateSome.builder().invalidatedLocks(locksTakenOut).build();\n     }\n \n-    default void verifyReturnedEventsEnclosesTransactionVersions(Range<Long> versionRange, boolean offsetStartVersion) {\n-        // If we offset the start version, but the range is already [x..x], we throw when creating the range.\n-        if (versionRange.lowerEndpoint().equals(versionRange.upperEndpoint()) && offsetStartVersion) {\n+    default void verifyReturnedEventsEnclosesTransactionVersions(long lowerBound, long upperBound) {\n+        if (lowerBound > upperBound) {\n             return;\n         }\n \n-        Range<Long> rangeToTest;\n-        if (offsetStartVersion) {\n-            rangeToTest = Range.closed(versionRange.lowerEndpoint() + 1, versionRange.upperEndpoint());\n-        } else {\n-            rangeToTest = versionRange;\n-        }\n-\n+        Range<Long> rangeToTest = Range.closed(lowerBound, upperBound);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxODczMg=="}, "originalCommit": {"oid": "8717a3fcfd4984552b1b821a6ad2f3b04fb26e7b"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2495, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}