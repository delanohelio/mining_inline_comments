{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTkzOTk1", "number": 5140, "title": "[LW] No Op cache tracks version", "bodyText": "Goals (and why):\nIf the no op cache was actually used after fallback, it would request snapshots from Timelock on every single start and end transaction. That would be badTM.\nImplementation Description (bullets):\n\nNoOpLockWatchEventCache now stores and tracks its own version.\n\nTesting (What was existing testing like?  What have you done to improve it?):\n\nAll the existing integration tests now validate that the version is the same between the two caches.\n\nConcerns (what feedback would you like?):\n\nEnsure this is right.\n\nWhere should we start reviewing?:\n\nNoOpLockWatchEventCache\n\nPriority (whenever / two weeks / yesterday):\nThis week, really.", "createdAt": "2020-12-02T12:48:29Z", "url": "https://github.com/palantir/atlasdb/pull/5140", "merged": true, "mergeCommit": {"oid": "ed869bdb9ec2e67bc16159a470a9c9ac242a1258"}, "closed": true, "closedAt": "2020-12-17T17:47:01Z", "author": {"login": "Jolyon-S"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiNAtWAH2gAyNTMwOTkzOTk1OjUwZjYxNThmZGUwZDgxNzIzNTlhZmMyZmExYzdlNWZmZTAxMmVmNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmDPrkAFqTU1MTIzODI3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "50f6158fde0d8172359afc2fa1c7e5ffe012ef6f", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/50f6158fde0d8172359afc2fa1c7e5ffe012ef6f", "committedDate": "2020-12-02T11:40:12Z", "message": "hah, lets not fail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e0bada41049379108696677fed33a03bebdc47", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/18e0bada41049379108696677fed33a03bebdc47", "committedDate": "2020-12-02T12:02:11Z", "message": "mess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44ed2416eeda440d997f8cba40e7f0d49e7bebc", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/f44ed2416eeda440d997f8cba40e7f0d49e7bebc", "committedDate": "2020-12-02T13:06:15Z", "message": "get it right"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2915614a52500cdcd343559f1999dda96cfc40d", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/c2915614a52500cdcd343559f1999dda96cfc40d", "committedDate": "2020-12-02T13:06:15Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19a002a597f427c4205b467c3e054b1792653f60", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/19a002a597f427c4205b467c3e054b1792653f60", "committedDate": "2020-12-02T13:06:15Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a6337236003cbe7129979f4e668b359b8391d1", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/a9a6337236003cbe7129979f4e668b359b8391d1", "committedDate": "2020-12-02T13:06:15Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODE1Nzkz", "url": "https://github.com/palantir/atlasdb/pull/5140#pullrequestreview-542815793", "createdAt": "2020-12-02T13:07:28Z", "commit": {"oid": "f44ed2416eeda440d997f8cba40e7f0d49e7bebc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzowNzoyOFrOH9aFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzowNzoyOFrOH9aFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE1MjUwNQ==", "bodyText": "Strictly speaking, this is a bit weird (the LWM has a different cache to the one passed directly below), but it's for tests. No strong pref if you think we should resolve this.", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r534152505", "createdAt": "2020-12-02T13:07:28Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SerializableTransactionManager.java", "diffHunk": "@@ -472,8 +472,8 @@ public static SerializableTransactionManager createForTest(\n                 metricsManager,\n                 keyValueService,\n                 new LegacyTimelockService(timestampService, lockService, lockClient),\n-                NoOpLockWatchManager.INSTANCE,\n-                NoOpLockWatchEventCache.INSTANCE,\n+                NoOpLockWatchManager.create(),\n+                NoOpLockWatchEventCache.create(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44ed2416eeda440d997f8cba40e7f0d49e7bebc"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjA0NTQ0", "url": "https://github.com/palantir/atlasdb/pull/5140#pullrequestreview-548604544", "createdAt": "2020-12-09T21:00:31Z", "commit": {"oid": "19a002a597f427c4205b467c3e054b1792653f60"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTowMDozMVrOICpQAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTowODowMFrOICphoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzkwNw==", "bodyText": "discussed in internal PR: I know you intend parity as in equality, but would suggest using equality as \"validating parity\" often means checking oddness/evenness which is distinctly not what we're doing here", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r539643907", "createdAt": "2020-12-09T21:00:31Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/DuplicatingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+class DuplicatingLockWatchEventCache implements LockWatchEventCache {\n+    private final LockWatchEventCache mainCache;\n+    private final LockWatchEventCache secondaryCache;\n+\n+    DuplicatingLockWatchEventCache(LockWatchEventCache mainCache, LockWatchEventCache secondaryCache) {\n+        this.mainCache = mainCache;\n+        this.secondaryCache = secondaryCache;\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return mainCache.isEnabled();\n+    }\n+\n+    @Override\n+    public Optional<LockWatchVersion> lastKnownVersion() {\n+        return mainCache.lastKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update) {\n+        mainCache.processStartTransactionsUpdate(startTimestamps, update);\n+        secondaryCache.processStartTransactionsUpdate(startTimestamps, update);\n+        validateVersionParity();\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates, LockWatchStateUpdate update) {\n+        mainCache.processGetCommitTimestampsUpdate(transactionUpdates, update);\n+        secondaryCache.processGetCommitTimestampsUpdate(transactionUpdates, update);\n+        validateVersionParity();\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        return mainCache.getCommitUpdate(startTs);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdateForTransactions(\n+            Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n+        return mainCache.getUpdateForTransactions(startTimestamps, version);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        mainCache.removeTransactionStateFromCache(startTimestamp);\n+    }\n+\n+    private void validateVersionParity() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a002a597f427c4205b467c3e054b1792653f60"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0NDI4OA==", "bodyText": "nit: no-op or no op (or even No Op?) - something seems strange with the capitalisation", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r539644288", "createdAt": "2020-12-09T21:01:07Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-5140.v2.yml", "diffHunk": "@@ -0,0 +1,6 @@\n+type: fix\n+fix:\n+  description: The No op lock watch event cache now correctly tracks the latest known", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a002a597f427c4205b467c3e054b1792653f60"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg==", "bodyText": "Unclear if this has been a convention throughout Lock Watches, but the decomp - in particular, rejecting a success from post-leader election without a snapshot here - seems a bit unexpected. I'd prefer this just return the version, and updateVersion take care of that filtering. It looks like you do that anyway in updateVersion!", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r539648416", "createdAt": "2020-12-09T21:08:00Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -58,11 +67,34 @@ public TransactionsLockWatchUpdate getUpdateForTransactions(\n             Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .clearCache(true)\n-                .startTsToSequence(\n-                        startTimestamps.stream().collect(Collectors.toMap(startTs -> startTs, $ -> FAKE_VERSION)))\n+                .startTsToSequence(startTimestamps.stream()\n+                        .collect(Collectors.toMap(startTs -> startTs, $ -> currentVersion.orElse(FAKE_VERSION))))\n                 .build();\n     }\n \n     @Override\n     public void removeTransactionStateFromCache(long startTimestamp) {}\n+\n+    private void updateVersion(Optional<LockWatchVersion> maybeNewVersion) {\n+        currentVersion = maybeNewVersion.map(newVersion -> currentVersion\n+                .filter(current -> current.id().equals(newVersion.id()) && current.version() > newVersion.version())\n+                .orElse(newVersion));\n+    }\n+\n+    private Optional<LockWatchVersion> extractVersionFromUpdate(LockWatchStateUpdate update) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a002a597f427c4205b467c3e054b1792653f60"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "190588464ee3249f337dc4553283bb42ad49e945", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/190588464ee3249f337dc4553283bb42ad49e945", "committedDate": "2020-12-10T10:00:02Z", "message": "validate equality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9bf138551b444407c9869979adbe768d777e706", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/b9bf138551b444407c9869979adbe768d777e706", "committedDate": "2020-12-10T10:01:48Z", "message": "Merge branch 'no-op-but-actually-op' of github.com:palantir/atlasdb into no-op-but-actually-op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjAwNjAw", "url": "https://github.com/palantir/atlasdb/pull/5140#pullrequestreview-551200600", "createdAt": "2020-12-14T09:48:18Z", "commit": {"oid": "b9bf138551b444407c9869979adbe768d777e706"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo0ODoxOVrOIFIKLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwOTo1NTozNVrOIFIdnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI0NzQ2OQ==", "bodyText": "from discussion below: can we use imperative statements here? I find this difficult to parse (I read the filter as a top-level thing that rejects versions that were unfriendly, when that's not the case).", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r542247469", "createdAt": "2020-12-14T09:48:19Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -58,11 +67,34 @@ public TransactionsLockWatchUpdate getUpdateForTransactions(\n             Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .clearCache(true)\n-                .startTsToSequence(\n-                        startTimestamps.stream().collect(Collectors.toMap(startTs -> startTs, $ -> FAKE_VERSION)))\n+                .startTsToSequence(startTimestamps.stream()\n+                        .collect(Collectors.toMap(startTs -> startTs, $ -> currentVersion.orElse(FAKE_VERSION))))\n                 .build();\n     }\n \n     @Override\n     public void removeTransactionStateFromCache(long startTimestamp) {}\n+\n+    private void updateVersion(Optional<LockWatchVersion> maybeNewVersion) {\n+        currentVersion = maybeNewVersion.map(newVersion -> currentVersion\n+                .filter(current -> current.id().equals(newVersion.id()) && current.version() > newVersion.version())\n+                .orElse(newVersion));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9bf138551b444407c9869979adbe768d777e706"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI1MjQ0NA==", "bodyText": "Ah, I misread the updateVersion code - I've left a comment there.\nI still find extractVersionFromUpdate to return an Optional weird: the update clearly has a log ID and a version, just it may not be one we're interested in. I think we could\n\nadd a brief comment indicating the properties of when this returns the version\nname this extractRelevantVersion...?\n\nI don't have a good name for 2 so suggest 1.", "url": "https://github.com/palantir/atlasdb/pull/5140#discussion_r542252444", "createdAt": "2020-12-14T09:55:35Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -58,11 +67,34 @@ public TransactionsLockWatchUpdate getUpdateForTransactions(\n             Set<Long> startTimestamps, Optional<LockWatchVersion> version) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .clearCache(true)\n-                .startTsToSequence(\n-                        startTimestamps.stream().collect(Collectors.toMap(startTs -> startTs, $ -> FAKE_VERSION)))\n+                .startTsToSequence(startTimestamps.stream()\n+                        .collect(Collectors.toMap(startTs -> startTs, $ -> currentVersion.orElse(FAKE_VERSION))))\n                 .build();\n     }\n \n     @Override\n     public void removeTransactionStateFromCache(long startTimestamp) {}\n+\n+    private void updateVersion(Optional<LockWatchVersion> maybeNewVersion) {\n+        currentVersion = maybeNewVersion.map(newVersion -> currentVersion\n+                .filter(current -> current.id().equals(newVersion.id()) && current.version() > newVersion.version())\n+                .orElse(newVersion));\n+    }\n+\n+    private Optional<LockWatchVersion> extractVersionFromUpdate(LockWatchStateUpdate update) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0ODQxNg=="}, "originalCommit": {"oid": "19a002a597f427c4205b467c3e054b1792653f60"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cff6826dfb348f81fd86372287b9aae11dcf063", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/3cff6826dfb348f81fd86372287b9aae11dcf063", "committedDate": "2020-12-14T10:08:00Z", "message": "javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjM4Mjcw", "url": "https://github.com/palantir/atlasdb/pull/5140#pullrequestreview-551238270", "createdAt": "2020-12-14T10:33:12Z", "commit": {"oid": "3cff6826dfb348f81fd86372287b9aae11dcf063"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2530, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}