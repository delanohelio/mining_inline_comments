{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODA5NzEw", "number": 5024, "title": "[DB TimeLock] 3B.1 - DB TimeLock Bugfixes and Preparation for MNPTLSIT", "bodyText": "Goals (and why):\n\nDB timelock needs to be a mostly full fledged timelock server. In particular, MNPTLSIT which is our gold standard for correct behaviour of the standard timelock needs to pass with a DB-backed timelock.\n\nImplementation Description (bullets):\n\nFix bugs in DB TimeLock. Specifically:\n\nwe used to create one instance of the KVS (and hence one instance of the Hikari connection pool) per client; now we only create one for the entire life of TimeLock.\nwe used to not close the KVS when timelock stops; we now do.\nwe would silently fail and give the user fewer namespaces if they decided to call the getAllNamespaces() endpoint. We now throw, which is a safer solution.\n\n\n\nTesting (What was existing testing like?  What have you done to improve it?):\nThis PR doesn't add tests, though MNPTLSIT does work when I wired it up (changing the config.ftl and hand-jamming the dbkvs rule in the testable cluster's rule chain). I plan to add the actual testing with MNPTLSIT in a later PR but that's also blocked on #5014 for us to do anything meaningful.\nConcerns (what feedback would you like?):\n\nThis PR is not optimal in that the Postgres test rule infra should really be its own PR, but I needed it to verify that MNPTLSIT works as I expect it to.\nDoes the choice of more opinionated defaults in ServiceDiscoveringDatabaseTimeLockSupplier make sense?\nWe now fail fast if user calls getAllNamespaces(). Are there unintended consequences I'm missing here?\n\nWhere should we start reviewing?: DbBoundTimestampCreator.java\nPriority (whenever / two weeks / yesterday): yesterday \ud83d\udd25  current SOTW is really buggy, and this blocks almost all my further work here", "createdAt": "2020-10-12T20:44:56Z", "url": "https://github.com/palantir/atlasdb/pull/5024", "merged": true, "mergeCommit": {"oid": "47d24764db57466ee8ab62c416c4f23b60e0df58"}, "closed": true, "closedAt": "2020-10-14T13:52:12Z", "author": {"login": "jeremyk-91"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR1XIfgH2gAyNTAxODA5NzEwOmYzZGExZTJlNTg4ZTBhMWU4YTgzZjM2Zjg1ZWVmOWJjYjI4MDhkZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSao1EAH2gAyNTAxODA5NzEwOjZkYmY1N2Q3OGZmMTE2YjAzYjZiZDEwMjU0OGIyMWFmYjgyYzA5MGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f3da1e2e588e0a1e8a83f36f85eef9bcb2808dfb", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/f3da1e2e588e0a1e8a83f36f85eef9bcb2808dfb", "committedDate": "2020-10-12T15:04:11Z", "message": "Some progress, still stuck on dbkvs creation path bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a69506ba692b1257702e9576858b72284f981f0", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/7a69506ba692b1257702e9576858b72284f981f0", "committedDate": "2020-10-12T20:26:11Z", "message": "what is this"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d22b89792b9aa8f6825e16b727c7a91e9db542db", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/d22b89792b9aa8f6825e16b727c7a91e9db542db", "committedDate": "2020-10-12T20:26:20Z", "message": "more things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b2a64d4058185527348b0e4c9f0c9f7d34a6ae", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/05b2a64d4058185527348b0e4c9f0c9f7d34a6ae", "committedDate": "2020-10-12T20:32:04Z", "message": "baseline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7df442263300c0e35a898880d99c7572122e50a", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/f7df442263300c0e35a898880d99c7572122e50a", "committedDate": "2020-10-12T20:45:12Z", "message": "nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/4c866b9fd60588df6a68308013de5ae2a5562fda", "committedDate": "2020-10-12T20:45:12Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTkzNjgy", "url": "https://github.com/palantir/atlasdb/pull/5024#pullrequestreview-507193682", "createdAt": "2020-10-13T08:31:54Z", "commit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODozMTo1NFrOHgbb9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxNTo1OVrOHgdP6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NjAwNA==", "bodyText": "There is some code duplication here, but I don't know if we want to clean that up in this PR or at all.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503766004", "createdAt": "2020-10-13T08:31:54Z", "author": {"login": "sudiksha27"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.net.InetSocketAddress;\n+import java.sql.Connection;\n+import java.util.concurrent.Callable;\n+\n+import org.awaitility.Awaitility;\n+import org.awaitility.Duration;\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.DbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutableDbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutablePostgresDdlConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.conjure.java.api.config.service.HumanReadableDuration;\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.configuration.ShutdownStrategy;\n+import com.palantir.docker.compose.connection.Container;\n+import com.palantir.docker.compose.connection.DockerPort;\n+import com.palantir.docker.compose.logging.LogDirectory;\n+import com.palantir.nexus.db.pool.config.ConnectionConfig;\n+import com.palantir.nexus.db.pool.config.ImmutableMaskedValue;\n+import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n+\n+public class DbKvsRule implements TestRule {\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final int FIVE_SECONDS = 5;\n+\n+    private final DockerComposeRule docker = DockerComposeRule.builder()\n+            .file(\"src/testCommon/resources/docker-compose.yml\")\n+            .waitingForService(\"postgres\", Container::areAllPortsOpen)\n+            .saveLogsTo(LogDirectory.circleAwareLogDirectory(DbKvsRule.class))\n+            .shutdownStrategy(ShutdownStrategy.AGGRESSIVE_WITH_NETWORK_CLEANUP)\n+            .build();\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return RuleChain.outerRule(docker)\n+                .around(new ExternalResource() {\n+                    @Override\n+                    protected void before() {\n+                        waitUntilDbkvsIsUp();\n+                    }\n+\n+                    @Override\n+                    protected void after() {\n+                        // no op\n+                    }\n+                }).apply(base, description);\n+    }\n+\n+    private void waitUntilDbkvsIsUp() {\n+        Awaitility.await()\n+                .atMost(Duration.ONE_MINUTE)\n+                .pollInterval(Duration.ONE_SECOND)\n+                .until(canCreateKeyValueService());\n+    }\n+\n+    private DbKeyValueServiceConfig getKvsConfig() {\n+        DockerPort port = docker.containers()\n+                .container(\"postgres\")\n+                .port(POSTGRES_PORT);\n+\n+        InetSocketAddress postgresAddress = new InetSocketAddress(port.getIp(), port.getExternalPort());\n+\n+        ConnectionConfig connectionConfig = ImmutablePostgresConnectionConfig.builder()\n+                .dbName(\"atlas\")\n+                .dbLogin(\"palantir\")\n+                .dbPassword(ImmutableMaskedValue.of(\"palantir\"))\n+                .host(postgresAddress.getHostName())\n+                .port(postgresAddress.getPort())\n+                .build();\n+\n+        return ImmutableDbKeyValueServiceConfig.builder()\n+                .connection(connectionConfig)\n+                .ddl(ImmutablePostgresDdlConfig.builder()\n+                        .compactInterval(HumanReadableDuration.days(2))\n+                        .build())\n+                .build();\n+    }\n+\n+    private Callable<Boolean> canCreateKeyValueService() {\n+        return () -> {\n+            ConnectionManagerAwareDbKvs kvs = null;\n+            try {\n+                kvs = createKvs();\n+                try (Connection connection = kvs.getConnectionManager().getConnection()) {\n+                    return connection.isValid(FIVE_SECONDS);\n+                }\n+            } catch (Exception ex) {\n+                if (ex.getMessage().contains(\"The connection attempt failed.\")\n+                        || ex.getMessage().contains(\"the database system is starting up\")) {\n+                    return false;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                if (kvs != null) {\n+                    kvs.close();\n+                }\n+            }\n+        };\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw==", "bodyText": "Why are we doing this?", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503769367", "createdAt": "2020-10-13T08:36:57Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MzIzOQ==", "bodyText": "When do we have runtimeConfig?", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503793239", "createdAt": "2020-10-13T09:12:22Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "diffHunk": "@@ -18,46 +18,45 @@\n import java.util.Optional;\n import java.util.function.Supplier;\n \n-import com.codahale.metrics.MetricRegistry;\n import com.palantir.atlasdb.AtlasDbConstants;\n import com.palantir.atlasdb.config.LeaderConfig;\n-import com.palantir.atlasdb.factory.ServiceDiscoveringAtlasSupplier;\n-import com.palantir.atlasdb.spi.AtlasDbFactory;\n import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.spi.KeyValueServiceRuntimeConfig;\n import com.palantir.atlasdb.util.MetricsManager;\n-import com.palantir.logsafe.Preconditions;\n import com.palantir.paxos.Client;\n-import com.palantir.timestamp.DelegatingManagedTimestampService;\n+import com.palantir.timelock.ServiceDiscoveringDatabaseTimeLockSupplier;\n import com.palantir.timestamp.ManagedTimestampService;\n-import com.palantir.timestamp.TimestampManagementService;\n-import com.palantir.timestamp.TimestampService;\n-import com.palantir.tritium.metrics.registry.SharedTaggedMetricRegistries;\n \n-public class DbBoundTimestampCreator implements TimestampCreator {\n+public final class DbBoundTimestampCreator implements TimestampCreator {\n \n-    private KeyValueServiceConfig kvsConfig;\n+    private final ServiceDiscoveringDatabaseTimeLockSupplier serviceDiscoveringDatabaseTimeLockSupplier;\n \n-    public DbBoundTimestampCreator(KeyValueServiceConfig kvsConfig) {\n-        this.kvsConfig = kvsConfig;\n+    private DbBoundTimestampCreator(\n+            ServiceDiscoveringDatabaseTimeLockSupplier serviceDiscoveringDatabaseTimeLockSupplier) {\n+        this.serviceDiscoveringDatabaseTimeLockSupplier = serviceDiscoveringDatabaseTimeLockSupplier;\n+    }\n+\n+    public static TimestampCreator create(\n+            KeyValueServiceConfig kvsConfig,\n+            MetricsManager metricsManager,\n+            Supplier<Optional<KeyValueServiceRuntimeConfig>> kvsRuntimeConfig,\n+            LeaderConfig leaderConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NTY4OA==", "bodyText": "Are we using the kvsConfig OR plan on using it? If so, It might be worth adding a comment otherwise, I am skeptical of passing around the config.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503795688", "createdAt": "2020-10-13T09:15:59Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "diffHunk": "@@ -101,6 +100,9 @@ public static TimeLockManagementService jersey(\n \n     private static Set<PersistentNamespaceLoader> createNamespaceLoaders(\n             PersistentNamespaceContext persistentNamespaceContext) {\n+        if (persistentNamespaceContext.databasePersistence().isPresent()) {\n+            return ImmutableSet.of(new DatabaseNamespaceLoader());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c259af106aab55825e9d11abe4e56a76b69b80e7", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/c259af106aab55825e9d11abe4e56a76b69b80e7", "committedDate": "2020-10-13T11:44:01Z", "message": "CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f28e2772fc3a2007e8c6a3ee55c9fc0a432eced", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/6f28e2772fc3a2007e8c6a3ee55c9fc0a432eced", "committedDate": "2020-10-13T11:44:24Z", "message": "Merge branch 'jkong/test-rule-for-dbkvs' of github.com:palantir/atlasdb into jkong/test-rule-for-dbkvs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdee853fa3437016c0a7879c42962ff4ae599e96", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/cdee853fa3437016c0a7879c42962ff4ae599e96", "committedDate": "2020-10-13T13:03:44Z", "message": "fix imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9341d05f6309887b0ea288b17f69b6580a4fb3f4", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/9341d05f6309887b0ea288b17f69b6580a4fb3f4", "committedDate": "2020-10-13T13:03:44Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "468cc38607ad6174ca5e6f182cf48ad425aa546c", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/468cc38607ad6174ca5e6f182cf48ad425aa546c", "committedDate": "2020-10-13T14:13:16Z", "message": "Merge branch 'develop' into jkong/test-rule-for-dbkvs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0abb439d0943e40358ff80dffae67d47d64ebf", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/2f0abb439d0943e40358ff80dffae67d47d64ebf", "committedDate": "2020-10-13T14:29:25Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/aeda6db14cb3e4103d4be94ea9143c4282b214cf", "committedDate": "2020-10-13T14:50:27Z", "message": "unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NzIwNDM5", "url": "https://github.com/palantir/atlasdb/pull/5024#pullrequestreview-507720439", "createdAt": "2020-10-13T18:29:35Z", "commit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTQ4NTcz", "url": "https://github.com/palantir/atlasdb/pull/5024#pullrequestreview-508148573", "createdAt": "2020-10-14T09:13:28Z", "commit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToxMzoyOFrOHhJxVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozMTozN1rOHhKeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyNTE0MQ==", "bodyText": "Not in scope (?) but the inversion of parameters here and in atlasFactory.createRawKeyValueService is infuriating", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504525141", "createdAt": "2020-10-14T09:13:28Z", "author": {"login": "gmaretic"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ServiceDiscoveringAtlasSupplier.java", "diffHunk": "@@ -66,7 +63,7 @@ public ServiceDiscoveringAtlasSupplier(\n             LongSupplier timestampSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMjkxMg==", "bodyText": "This will eventually be implemented?", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504532912", "createdAt": "2020-10-14T09:25:37Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/DatabaseNamespaceLoader.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import java.util.Set;\n+\n+import com.palantir.paxos.Client;\n+\n+public class DatabaseNamespaceLoader implements PersistentNamespaceLoader {\n+    @Override\n+    public Set<Client> getAllPersistedNamespaces() {\n+        throw new UnsupportedOperationException(\"Loading all namespaces from the database is not supported yet!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMzY4NA==", "bodyText": "I agree with no default here", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504533684", "createdAt": "2020-10-14T09:26:47Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNjYwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ConnectionManagerAwareDbKvs kvs = null;\n          \n          \n            \n                        try {\n          \n          \n            \n                            kvs = createKvs();\n          \n          \n            \n                            try (Connection connection = kvs.getConnectionManager().getConnection()) {\n          \n          \n            \n                                return connection.isValid(FIVE_SECONDS);\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ex) {\n          \n          \n            \n                            if (ex.getMessage().contains(\"The connection attempt failed.\")\n          \n          \n            \n                                    || ex.getMessage().contains(\"the database system is starting up\")) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                throw ex;\n          \n          \n            \n                            }\n          \n          \n            \n                        } finally {\n          \n          \n            \n                            if (kvs != null) {\n          \n          \n            \n                                kvs.close();\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        try (ConnectionManagerAwareDbKvs kvs = createKvs()) {\n          \n          \n            \n                            try (Connection connection = kvs.getConnectionManager().getConnection()) {\n          \n          \n            \n                                return connection.isValid(FIVE_SECONDS);\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ex) {\n          \n          \n            \n                            if (ex.getMessage().contains(\"The connection attempt failed.\")\n          \n          \n            \n                                    || ex.getMessage().contains(\"the database system is starting up\")) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                throw ex;\n          \n          \n            \n                            }\n          \n          \n            \n                        }", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504536600", "createdAt": "2020-10-14T09:31:37Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.net.InetSocketAddress;\n+import java.sql.Connection;\n+import java.util.concurrent.Callable;\n+\n+import org.awaitility.Awaitility;\n+import org.awaitility.Duration;\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.DbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutableDbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutablePostgresDdlConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.conjure.java.api.config.service.HumanReadableDuration;\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.configuration.ShutdownStrategy;\n+import com.palantir.docker.compose.connection.Container;\n+import com.palantir.docker.compose.connection.DockerPort;\n+import com.palantir.docker.compose.logging.LogDirectory;\n+import com.palantir.nexus.db.pool.config.ConnectionConfig;\n+import com.palantir.nexus.db.pool.config.ImmutableMaskedValue;\n+import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n+\n+public class DbKvsRule implements TestRule {\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final int FIVE_SECONDS = 5;\n+\n+    private final DockerComposeRule docker = DockerComposeRule.builder()\n+            .file(\"src/testCommon/resources/docker-compose.yml\")\n+            .waitingForService(\"postgres\", Container::areAllPortsOpen)\n+            .saveLogsTo(LogDirectory.circleAwareLogDirectory(DbKvsRule.class))\n+            .shutdownStrategy(ShutdownStrategy.AGGRESSIVE_WITH_NETWORK_CLEANUP)\n+            .build();\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return RuleChain.outerRule(docker)\n+                .around(new ExternalResource() {\n+                    @Override\n+                    protected void before() {\n+                        waitUntilDbkvsIsUp();\n+                    }\n+\n+                    @Override\n+                    protected void after() {\n+                        // no op\n+                    }\n+                }).apply(base, description);\n+    }\n+\n+    private void waitUntilDbkvsIsUp() {\n+        Awaitility.await()\n+                .atMost(Duration.ONE_MINUTE)\n+                .pollInterval(Duration.ONE_SECOND)\n+                .until(canCreateKeyValueService());\n+    }\n+\n+    private DbKeyValueServiceConfig getKvsConfig() {\n+        DockerPort port = docker.containers()\n+                .container(\"postgres\")\n+                .port(POSTGRES_PORT);\n+\n+        InetSocketAddress postgresAddress = new InetSocketAddress(port.getIp(), port.getExternalPort());\n+\n+        ConnectionConfig connectionConfig = ImmutablePostgresConnectionConfig.builder()\n+                .dbName(\"atlas\")\n+                .dbLogin(\"palantir\")\n+                .dbPassword(ImmutableMaskedValue.of(\"palantir\"))\n+                .host(postgresAddress.getHostName())\n+                .port(postgresAddress.getPort())\n+                .build();\n+\n+        return ImmutableDbKeyValueServiceConfig.builder()\n+                .connection(connectionConfig)\n+                .ddl(ImmutablePostgresDdlConfig.builder()\n+                        .compactInterval(HumanReadableDuration.days(2))\n+                        .build())\n+                .build();\n+    }\n+\n+    private Callable<Boolean> canCreateKeyValueService() {\n+        return () -> {\n+            ConnectionManagerAwareDbKvs kvs = null;\n+            try {\n+                kvs = createKvs();\n+                try (Connection connection = kvs.getConnectionManager().getConnection()) {\n+                    return connection.isValid(FIVE_SECONDS);\n+                }\n+            } catch (Exception ex) {\n+                if (ex.getMessage().contains(\"The connection attempt failed.\")\n+                        || ex.getMessage().contains(\"the database system is starting up\")) {\n+                    return false;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                if (kvs != null) {\n+                    kvs.close();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 121}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd60672e67516edfeb1cc246d313cfdb12b656ec", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/bd60672e67516edfeb1cc246d313cfdb12b656ec", "committedDate": "2020-10-14T10:28:08Z", "message": "Update timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java\n\nCo-authored-by: gmaretic <gmaretic@palantir.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35b8adb0e30c3813b748975847c6fe176efdf3ae", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/35b8adb0e30c3813b748975847c6fe176efdf3ae", "committedDate": "2020-10-14T10:28:43Z", "message": "No default for TimestampCreators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dbf57d78ff116b03b6bd102548b21afb82c090d", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/6dbf57d78ff116b03b6bd102548b21afb82c090d", "committedDate": "2020-10-14T10:30:00Z", "message": "Merge branch 'jkong/test-rule-for-dbkvs' of github.com:palantir/atlasdb into jkong/test-rule-for-dbkvs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2629, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}