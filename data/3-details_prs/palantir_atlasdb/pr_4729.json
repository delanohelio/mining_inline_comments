{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3Mzg0MTI4", "number": 4729, "title": "[PaxosLog] Use JDBI and add namespacing", "bodyText": "Goals (and why):\nAddress comments on previous PR and clean up the implementation\nImplementation Description (bullets):\nStraightforward, also added namespacing to avoid having to redo work\nTesting (What was existing testing like?  What have you done to improve it?):\nExisting tests pass\nConcerns (what feedback would you like?):\nTo use in memory sqlite we have to make sure our connection does not get closed. This is done by creating the Jdbi object in tests and passing it in as an argument to the log. This factory is exposed to allow testing multiple namespaces, but the factory that should generally be called is the one with the connection supplier, as that will create and close connections appropriately.\nWhere should we start reviewing?:\nanywhere\nPriority (whenever / two weeks / yesterday):\nasap", "createdAt": "2020-04-22T15:59:52Z", "url": "https://github.com/palantir/atlasdb/pull/4729", "merged": true, "mergeCommit": {"oid": "282a7a031e11085a5941a33e096a17b603f03a2b"}, "closed": true, "closedAt": "2020-04-24T13:05:11Z", "author": {"login": "gmaretic"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaKYjdgH2gAyNDA3Mzg0MTI4OjkzYzE2NWRkYTAwM2FlZGQyMTJhM2U2ZmJjNmUyNmUwNzVkYmVhODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaw48KgH2gAyNDA3Mzg0MTI4OjFkZjVhZTg3ODgyYWE4ZjFjNzI0NWQyOWE1NDMxYjNkNDY4N2Q0ZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93c165dda003aedd212a3e6fbc6e26e075dbea87", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/93c165dda003aedd212a3e6fbc6e26e075dbea87", "committedDate": "2020-04-22T15:53:59Z", "message": "Use JDBI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dadde4e2d42e9f5c256e783ab06b2a4fd3407b4", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/2dadde4e2d42e9f5c256e783ab06b2a4fd3407b4", "committedDate": "2020-04-22T15:59:19Z", "message": "Package private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "521a3eec0ba99a626c2e899e44336d60e07234cb", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/521a3eec0ba99a626c2e899e44336d60e07234cb", "committedDate": "2020-04-23T11:28:13Z", "message": "Prevent test connection from closing so we don't need to have funky factory in production code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDU1NTM1", "url": "https://github.com/palantir/atlasdb/pull/4729#pullrequestreview-399055535", "createdAt": "2020-04-23T12:37:21Z", "commit": {"oid": "521a3eec0ba99a626c2e899e44336d60e07234cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNzoyMVrOGKnDoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNzoyMVrOGKnDoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3ODg0OQ==", "bodyText": "We talked offline so I know why this is needed, but probably best to document that.", "url": "https://github.com/palantir/atlasdb/pull/4729#discussion_r413778849", "createdAt": "2020-04-23T12:37:21Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "diffHunk": "@@ -102,4 +127,34 @@ private static PaxosValue valueForRound(long round) {\n         ThreadLocalRandom.current().nextBytes(bytes);\n         return new PaxosValue(\"someLeader\", round, bytes);\n     }\n+\n+    private static Supplier<Connection> createReusableMemoizedConnection() {\n+        Supplier<Connection> baseConnectionSupplier = SqliteConnections.createDatabaseForTest();\n+        Supplier<Connection> nonClosingConnectionSupplier = bypassCloseOnConnection(baseConnectionSupplier);\n+        return Suppliers.memoize(nonClosingConnectionSupplier::get);\n+    }\n+\n+    private static Supplier<Connection> bypassCloseOnConnection(Supplier<Connection> connectionSupplier) {\n+        return Suppliers.compose(conn ->\n+                        (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),\n+                                new Class<?>[] {Connection.class},\n+                                new CloseIgnoringInvocationHandler(conn)),\n+                connectionSupplier::get);\n+    }\n+\n+    private static final class CloseIgnoringInvocationHandler extends AbstractInvocationHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521a3eec0ba99a626c2e899e44336d60e07234cb"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDU1OTQ0", "url": "https://github.com/palantir/atlasdb/pull/4729#pullrequestreview-399055944", "createdAt": "2020-04-23T12:37:54Z", "commit": {"oid": "521a3eec0ba99a626c2e899e44336d60e07234cb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNzo1NFrOGKnE5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjozNzo1NFrOGKnE5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3OTE3Mw==", "bodyText": "nit: standardise x vs dao", "url": "https://github.com/palantir/atlasdb/pull/4729#discussion_r413779173", "createdAt": "2020-04-23T12:37:54Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -16,105 +16,89 @@\n \n package com.palantir.paxos;\n \n-import java.io.IOException;\n import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n-import com.google.common.io.ByteStreams;\n-import com.palantir.common.base.Throwables;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n import com.palantir.common.persist.Persistable;\n \n public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n-    private final Supplier<Connection> connectionSupplier;\n+    private final String namespace;\n+    private final Jdbi jdbi;\n \n-    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n-        this.connectionSupplier = connectionSupplier;\n+    private SqlitePaxosStateLog(String namespace, Jdbi jdbi) {\n+        this.namespace = namespace;\n+        this.jdbi = jdbi;\n     }\n \n-    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n-        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(String namespace,\n+            Supplier<Connection> connectionSupplier) {\n+        Jdbi jdbi = Jdbi.create(connectionSupplier::get).installPlugin(new SqlObjectPlugin());\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(namespace, jdbi);\n         log.initialize();\n         return log;\n     }\n \n     private void initialize() {\n-        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+        execute(dao -> dao.createTable(namespace));\n     }\n \n     @Override\n     public void writeRound(long seq, V round) {\n-        try {\n-            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n-                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n-            preparedStatement.setLong(1, seq);\n-            preparedStatement.setBytes(2, round.persistToBytes());\n-            preparedStatement.execute();\n-        } catch (SQLException e) {\n-            throw Throwables.rewrapAndThrowUncheckedException(e);\n-        }\n+        execute(dao -> dao.writeRound(namespace, seq, round.persistToBytes()));\n     }\n \n     @Override\n     public byte[] readRound(long seq) {\n-        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n-                .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n-                .orElse(null);\n+        return execute(dao -> dao.readRound(namespace, seq));\n     }\n \n     @Override\n     public long getLeastLogEntry() {\n-        return executeStatement(\"SELECT MIN(seq) FROM paxosLog\")\n-                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n-                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+        return execute(x -> x.getLeastLogEntry(namespace)).orElse(PaxosAcceptor.NO_LOG_ENTRY);\n     }\n \n     @Override\n     public long getGreatestLogEntry() {\n-        return executeStatement(\"SELECT MAX(seq) FROM paxosLog\")\n-                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n-                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+        return execute(x -> x.getGreatestLogEntry(namespace)).orElse(PaxosAcceptor.NO_LOG_ENTRY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521a3eec0ba99a626c2e899e44336d60e07234cb"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b88059c5da41ac7d6d1f7657e564786298ca8c80", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/b88059c5da41ac7d6d1f7657e564786298ca8c80", "committedDate": "2020-04-23T15:35:59Z", "message": "Address CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODQ0Mjcy", "url": "https://github.com/palantir/atlasdb/pull/4729#pullrequestreview-399844272", "createdAt": "2020-04-24T10:56:32Z", "commit": {"oid": "b88059c5da41ac7d6d1f7657e564786298ca8c80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1NjozMlrOGLSLJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1NjozMlrOGLSLJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NTI4NQ==", "bodyText": "Is there a validation/parsing of the namespace somewhere in timelock? I wonder what restrictions sqllite places on table names.", "url": "https://github.com/palantir/atlasdb/pull/4729#discussion_r414485285", "createdAt": "2020-04-24T10:56:32Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -16,105 +16,89 @@\n \n package com.palantir.paxos;\n \n-import java.io.IOException;\n import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n-import com.google.common.io.ByteStreams;\n-import com.palantir.common.base.Throwables;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n import com.palantir.common.persist.Persistable;\n \n public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n-    private final Supplier<Connection> connectionSupplier;\n+    private final String namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b88059c5da41ac7d6d1f7657e564786298ca8c80"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODQ0NTMy", "url": "https://github.com/palantir/atlasdb/pull/4729#pullrequestreview-399844532", "createdAt": "2020-04-24T10:56:59Z", "commit": {"oid": "b88059c5da41ac7d6d1f7657e564786298ca8c80"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo1NzowMFrOGLSMFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTowNTo0NlrOGLSePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4NTUyNg==", "bodyText": "Do we need some sort of try-catch here in case log.initialize fails later?", "url": "https://github.com/palantir/atlasdb/pull/4729#discussion_r414485526", "createdAt": "2020-04-24T10:57:00Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -16,105 +16,89 @@\n \n package com.palantir.paxos;\n \n-import java.io.IOException;\n import java.sql.Connection;\n-import java.sql.PreparedStatement;\n-import java.sql.ResultSet;\n-import java.sql.SQLException;\n-import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n import java.util.function.Supplier;\n \n-import com.google.common.io.ByteStreams;\n-import com.palantir.common.base.Throwables;\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.Define;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n import com.palantir.common.persist.Persistable;\n \n public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n-    private final Supplier<Connection> connectionSupplier;\n+    private final String namespace;\n+    private final Jdbi jdbi;\n \n-    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n-        this.connectionSupplier = connectionSupplier;\n+    private SqlitePaxosStateLog(String namespace, Jdbi jdbi) {\n+        this.namespace = namespace;\n+        this.jdbi = jdbi;\n     }\n \n-    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n-        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(String namespace,\n+            Supplier<Connection> connectionSupplier) {\n+        Jdbi jdbi = Jdbi.create(connectionSupplier::get).installPlugin(new SqlObjectPlugin());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b88059c5da41ac7d6d1f7657e564786298ca8c80"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5MDE3Mg==", "bodyText": "Is there no way to amend this behavior? How about SQLiteDataSource, does that do it better? And then also SQLiteConnectionPoolDataSource,", "url": "https://github.com/palantir/atlasdb/pull/4729#discussion_r414490172", "createdAt": "2020-04-24T11:05:46Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "diffHunk": "@@ -102,4 +127,39 @@ private static PaxosValue valueForRound(long round) {\n         ThreadLocalRandom.current().nextBytes(bytes);\n         return new PaxosValue(\"someLeader\", round, bytes);\n     }\n+\n+    private static Supplier<Connection> createReusableMemoizedConnection() {\n+        Supplier<Connection> baseConnectionSupplier = SqliteConnections.createDatabaseForTest();\n+        Supplier<Connection> nonClosingConnectionSupplier = bypassCloseOnConnection(baseConnectionSupplier);\n+        return Suppliers.memoize(nonClosingConnectionSupplier::get);\n+    }\n+\n+    private static Supplier<Connection> bypassCloseOnConnection(Supplier<Connection> connectionSupplier) {\n+        return Suppliers.compose(conn ->\n+                        (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(),\n+                                new Class<?>[] {Connection.class},\n+                                new CloseIgnoringInvocationHandler(conn)),\n+                connectionSupplier::get);\n+    }\n+\n+    /**\n+     * JDBI closes the connection after executing a query. This is desired behaviour, but does not play nicely with in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b88059c5da41ac7d6d1f7657e564786298ca8c80"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df5ae87882aa8f1c7245d29a5431b3d4687d4e2", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/1df5ae87882aa8f1c7245d29a5431b3d4687d4e2", "committedDate": "2020-04-24T12:45:45Z", "message": "CR"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3091, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}