{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjA3MjY2", "number": 4930, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowMTozMlrOEVjq9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDowMzoyNVrOEWKAKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDM5OTkxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowMTozMlrOG8Yl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowMTozMlrOG8Yl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3MDY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r465970681", "createdAt": "2020-08-05T20:01:32Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c86affe0700bc3489762487305e77a244e7a09"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQwMTE4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowMTo1OFrOG8YmzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDowMTo1OFrOG8YmzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3MDg5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n          \n          \n            \n                    verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n          \n          \n            \n                    verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n          \n          \n            \n                    verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r465970892", "createdAt": "2020-08-05T20:01:58Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b56a729240a4aa952b8c7f49816d02991de1102"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjY3NjM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDowMjowNlrOG9UFrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToyODo0M1rOG9WUbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTQ1NQ==", "bodyText": "Why not use verify(delegate) here as well?", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466945455", "createdAt": "2020-08-07T10:02:06Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MTk5OQ==", "bodyText": "This one is mainly for readability: the fact that it is exactly 1 time is important. Semantically it is the same, yes.", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466981999", "createdAt": "2020-08-07T11:28:43Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTQ1NQ=="}, "originalCommit": {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjY3OTI1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDowMzowNVrOG9UHbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToyOTowN1rOG9WU_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTkwMw==", "bodyText": "Would it be possible to add a stress test here?", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466945903", "createdAt": "2020-08-07T10:03:05Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MjE0MQ==", "bodyText": "Sure. Will add one.", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466982141", "createdAt": "2020-08-07T11:29:07Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/MemoizingTableLevelMetricsControllerTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Counter;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+\n+public class MemoizingTableLevelMetricsControllerTest {\n+    private static final String METRIC_NAME = \"name\";\n+    private static final Class<String> STRING_CLASS = String.class;\n+    private static final TableReference TABLE_REFERENCE = TableReference.createFromFullyQualifiedName(\"a.b\");\n+    private static final TableReference TABLE_REFERENCE_2 = TableReference.createFromFullyQualifiedName(\"a.bc\");\n+\n+    private final TableLevelMetricsController delegate = mock(TableLevelMetricsController.class);\n+\n+    @Before\n+    public void setUp() {\n+        when(delegate.createAndRegisterCounter(any(), anyString(), any())).thenAnswer(_invocation -> new Counter());\n+    }\n+\n+    @Test\n+    public void metricIsOnlyRegisteredOnce() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+\n+        assertThat(c1).isSameAs(c2);\n+        verify(delegate, times(1)).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+    }\n+\n+    @Test\n+    public void registersDifferentMetricsSeparately() {\n+        TableLevelMetricsController memoizing = new MemoizingTableLevelMetricsController(delegate);\n+        Counter c1 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        Counter c2 = memoizing.createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+\n+        assertThat(c1).isNotSameAs(c2);\n+        verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE);\n+        verify(delegate).createAndRegisterCounter(STRING_CLASS, METRIC_NAME, TABLE_REFERENCE_2);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NTkwMw=="}, "originalCommit": {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjY4MDA5OnYy", "diffSide": "RIGHT", "path": "changelog/0.240.1-rc2/pr-4930.v2.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDowMzoyNVrOG9UH_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToyNzozNFrOG9WStQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NjA0NA==", "bodyText": "Is the hyphen intentional?", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466946044", "createdAt": "2020-08-07T10:03:25Z", "author": {"login": "sudiksha27"}, "path": "changelog/0.240.1-rc2/pr-4930.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: improvement\n+improvement:\n+  description: '- Fix memory leak in `TopNMetricPublicationController`.'\n+  links:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk4MTU1Nw==", "bodyText": "Ah, it was not. Good catch", "url": "https://github.com/palantir/atlasdb/pull/4930#discussion_r466981557", "createdAt": "2020-08-07T11:27:34Z", "author": {"login": "jeremyk-91"}, "path": "changelog/0.240.1-rc2/pr-4930.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: improvement\n+improvement:\n+  description: '- Fix memory leak in `TopNMetricPublicationController`.'\n+  links:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk0NjA0NA=="}, "originalCommit": {"oid": "d9b805b7d21878b2cbfa1924875d751fc7ce8190"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2771, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}