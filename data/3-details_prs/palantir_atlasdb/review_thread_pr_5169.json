{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzg5OTcz", "number": 5169, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo0ODo1MFrOFMC0oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzowNDo1NFrOFMgtOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTczNDczOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/factory/TransactionManagerConsistencyResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo0ODo1MFrOIPjwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo0ODo1MFrOIPjwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4NTI4Mg==", "bodyText": "The immutable is used outside of package", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553185282", "createdAt": "2021-01-07T08:48:50Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/factory/TransactionManagerConsistencyResult.java", "diffHunk": "@@ -23,7 +23,9 @@\n  * determine that it is safe (or, at least, not obviously unsafe) to service requests.\n  */\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n public interface TransactionManagerConsistencyResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTc0MTM1OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/stream/StreamStorePersistenceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo1MDozNlrOIPjzpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo1MDozNlrOIPjzpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4NjIxMw==", "bodyText": "The immutable is used outside this package.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553186213", "createdAt": "2021-01-07T08:50:36Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/stream/StreamStorePersistenceConfiguration.java", "diffHunk": "@@ -23,10 +23,11 @@\n @JsonSerialize(as = ImmutableStreamStorePersistenceConfiguration.class)\n @JsonDeserialize(as = ImmutableStreamStorePersistenceConfiguration.class)\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n public interface StreamStorePersistenceConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTc0NTk5OnYy", "diffSide": "RIGHT", "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwODo1MTo1NFrOIPj2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMToyMTo1N1rOIPo0VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4Njg5Mg==", "bodyText": "This constant is only used for testing.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553186892", "createdAt": "2021-01-07T08:51:54Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -32,14 +32,6 @@\n \n @Value.Immutable\n public abstract class ClientOptions {\n-    static final ClientOptions FAST_RETRYING_FOR_TEST = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofMillis(100))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(5))\n-            .failedUrlCooldown(Duration.ofMillis(1))\n-            .maxNumRetries(5)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI1NTMwOQ==", "bodyText": "I will assume that you verified this via a search on github? If so, great!", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553255309", "createdAt": "2021-01-07T10:54:57Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -32,14 +32,6 @@\n \n @Value.Immutable\n public abstract class ClientOptions {\n-    static final ClientOptions FAST_RETRYING_FOR_TEST = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofMillis(100))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(5))\n-            .failedUrlCooldown(Duration.ofMillis(1))\n-            .maxNumRetries(5)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4Njg5Mg=="}, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI2ODMwOA==", "bodyText": "I verified there are. no usages on internal github.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553268308", "createdAt": "2021-01-07T11:21:57Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -32,14 +32,6 @@\n \n @Value.Immutable\n public abstract class ClientOptions {\n-    static final ClientOptions FAST_RETRYING_FOR_TEST = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofMillis(100))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(5))\n-            .failedUrlCooldown(Duration.ofMillis(1))\n-            .maxNumRetries(5)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE4Njg5Mg=="}, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTc3OTU3OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/Token.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwOTowMDo1NVrOIPkJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyMzoyOFrOIQapeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE5MTg1OA==", "bodyText": "Instead of breaking the interface contract by moving the constant, we are setting the impl visibility to PACKAGE (this is done to avoid initializing the immutable first) and suppressing the error.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553191858", "createdAt": "2021-01-07T09:00:55Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/Token.java", "diffHunk": "@@ -19,6 +19,8 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n+@Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n abstract class Token {\n     @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI1NjY5Mw==", "bodyText": "To clarify, is it the case that:\n\nsetting the implementation visibility prevents the actual issue of initialisation deadlock?\nthe check is not smart enough to determine this, and so it requires the warning to be suppressed?\nwe cannot do this elsewhere because in other cases, the impl cannot be made package private? (In other words, why did we go with this solution here but not elsewhere, and vice versa?)", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553256693", "createdAt": "2021-01-07T10:57:32Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/Token.java", "diffHunk": "@@ -19,6 +19,8 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n+@Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n abstract class Token {\n     @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE5MTg1OA=="}, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI3MDc4Ng==", "bodyText": "setting the implementation visibility only helps avoid external usages which could potentially cause a deadlock and within the package we have to be sensible while using the immutable.\nThe check is still right in this case to break, which is why we suppress it.\nThis cannot be done in the cases where the subclass has usages in other packages. In those cases we move out the constants to a separate util. To have a separate a util only for a constant seems a but janky which is why we have take the first approach if possible.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553270786", "createdAt": "2021-01-07T11:27:12Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/Token.java", "diffHunk": "@@ -19,6 +19,8 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n+@Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n abstract class Token {\n     @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE5MTg1OA=="}, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNjA1NQ==", "bodyText": "If we try to initialise ImmutableClass before Class, that will require us to initialise Class, but because of the static constant, that requires an initialisation of ImmutableClass and this deadlocks because there is a lock on ImmutableClass.\nIf you ensure that Class gets initialised first, then everything works fine, so by making access to ImmutableClass package private (to prevent external badness) and exposing a builder on the Class interface to be used instead of the ImmutableClass builder directly, we can avoid this issue", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553936055", "createdAt": "2021-01-08T13:13:56Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/Token.java", "diffHunk": "@@ -19,6 +19,8 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n+@Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n abstract class Token {\n     @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE5MTg1OA=="}, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NDcyOQ==", "bodyText": "Package private may still be accessed externally. I considered special casing in the errorprone rule, but it would require additional validation that nothing accesses package-private generated immutables outside of the defining class, which we've seen more frequently than one would hope.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r554084729", "createdAt": "2021-01-08T17:23:28Z", "author": {"login": "carterkozak"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/Token.java", "diffHunk": "@@ -19,6 +19,8 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n+@Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n abstract class Token {\n     @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzE5MTg1OA=="}, "originalCommit": {"oid": "8455973726c61f78dd5e99a285d887f34f6a0e5a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjA1ODcxOnYy", "diffSide": "RIGHT", "path": "atlasdb-perf/src/main/java/com/palantir/atlasdb/performance/backend/KeyValueServiceInstrumentation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDoxMzo0NVrOIPmr9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMTowMDowN1rOIaRxlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIzMzM5Ng==", "bodyText": "The CassandraKeyValueServiceInstrumentation is being used in tests in a different package and can not be made package private, would appreciate alternative ideas for fixing the ClassInitDeadlock issue here.", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553233396", "createdAt": "2021-01-07T10:13:45Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-perf/src/main/java/com/palantir/atlasdb/performance/backend/KeyValueServiceInstrumentation.java", "diffHunk": "@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.TreeMap;\n \n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n public abstract class KeyValueServiceInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4a26904eb75f50863d5dc4b0a8c87ed96198a4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkyOTk0Mg==", "bodyText": "You can still make the generated code package private, and provide a builder in this class to avoid the issue outside of the package", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553929942", "createdAt": "2021-01-08T13:00:43Z", "author": {"login": "gmaretic"}, "path": "atlasdb-perf/src/main/java/com/palantir/atlasdb/performance/backend/KeyValueServiceInstrumentation.java", "diffHunk": "@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.TreeMap;\n \n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n public abstract class KeyValueServiceInstrumentation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIzMzM5Ng=="}, "originalCommit": {"oid": "da4a26904eb75f50863d5dc4b0a8c87ed96198a4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDQyNTExMQ==", "bodyText": "This is only used in benchmarking, and not worth the effort to clean it up", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r564425111", "createdAt": "2021-01-26T11:00:07Z", "author": {"login": "gmaretic"}, "path": "atlasdb-perf/src/main/java/com/palantir/atlasdb/performance/backend/KeyValueServiceInstrumentation.java", "diffHunk": "@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.TreeMap;\n \n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n public abstract class KeyValueServiceInstrumentation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIzMzM5Ng=="}, "originalCommit": {"oid": "da4a26904eb75f50863d5dc4b0a8c87ed96198a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjE5OTgwOnYy", "diffSide": "LEFT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/stream/StreamStorePersistenceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDo1NDoxNlrOIPoAQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDo1NDoxNlrOIPoAQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI1NDk3OA==", "bodyText": "nit: unnecessary diff?", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553254978", "createdAt": "2021-01-07T10:54:16Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/stream/StreamStorePersistenceConfiguration.java", "diffHunk": "@@ -23,10 +23,11 @@\n @JsonSerialize(as = ImmutableStreamStorePersistenceConfiguration.class)\n @JsonDeserialize(as = ImmutableStreamStorePersistenceConfiguration.class)\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")\n public interface StreamStorePersistenceConfiguration {\n+    @Deprecated\n     StreamStorePersistenceConfiguration DEFAULT_CONFIG =\n             ImmutableStreamStorePersistenceConfiguration.builder().build();\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4a26904eb75f50863d5dc4b0a8c87ed96198a4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjIxNDc2OnYy", "diffSide": "RIGHT", "path": "atlasdb-perf/src/main/java/com/palantir/atlasdb/performance/backend/PostgresKeyValueServiceInstrumentation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDo1ODoyN1rOIPoJFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDo1ODoyN1rOIPoJFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI1NzIzOA==", "bodyText": "Is this breaking?", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553257238", "createdAt": "2021-01-07T10:58:27Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-perf/src/main/java/com/palantir/atlasdb/performance/backend/PostgresKeyValueServiceInstrumentation.java", "diffHunk": "@@ -22,7 +22,7 @@\n import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n import java.net.InetSocketAddress;\n \n-public class PostgresKeyValueServiceInstrumentation extends KeyValueServiceInstrumentation {\n+class PostgresKeyValueServiceInstrumentation extends KeyValueServiceInstrumentation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4a26904eb75f50863d5dc4b0a8c87ed96198a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjIxNjYxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/LockServerOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDo1OTowM1rOIPoKLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDo1OTowM1rOIPoKLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI1NzUxOQ==", "bodyText": "nit: order is not consistent with the order of annotations on some of the other classes", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553257519", "createdAt": "2021-01-07T10:59:03Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/LockServerOptions.java", "diffHunk": "@@ -35,6 +35,8 @@\n  */\n @JsonDeserialize(builder = LockServerOptions.SerializationProxy.class)\n @Value.Immutable\n+@Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@SuppressWarnings(\"ClassInitializationDeadlock\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4a26904eb75f50863d5dc4b0a8c87ed96198a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjYyODg3OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/factory/TransactionManagerConsistencyResult.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzowNDowOVrOIQRTJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNjozMTowMlrOIQYlEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMTU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @SuppressWarnings(\"ClassInitializationDeadlock\")\n          \n          \n            \n            @SuppressWarnings(\"ClassInitializationDeadlock\")\n          \n          \n            \n            @Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553931558", "createdAt": "2021-01-08T13:04:09Z", "author": {"login": "gmaretic"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/factory/TransactionManagerConsistencyResult.java", "diffHunk": "@@ -23,7 +23,9 @@\n  * determine that it is safe (or, at least, not obviously unsafe) to service requests.\n  */\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c695a342e51f7c46f3ece6480fdb17cc0b45c300"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMTgwNQ==", "bodyText": "And add a builder if necessary for outside use, the idea is not to expose the generated immutable", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553931805", "createdAt": "2021-01-08T13:04:42Z", "author": {"login": "gmaretic"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/factory/TransactionManagerConsistencyResult.java", "diffHunk": "@@ -23,7 +23,9 @@\n  * determine that it is safe (or, at least, not obviously unsafe) to service requests.\n  */\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMTU1OA=="}, "originalCommit": {"oid": "c695a342e51f7c46f3ece6480fdb17cc0b45c300"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA1MDgzMg==", "bodyText": "Curious why suppress an error-prone check for potential class initialization deadlock (see palantir/gradle-baseline#1598 that @carterkozak just added )? I'm assuming this is a fairly common pattern in many uses of immutables where there's either some constant defined as the empty object or similar. Do we need to consider pulling these types of constants out to a separate class (e.g. TransactionManagerConsistencyResults) or lazy initialization get of a memoized supplier?", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r554050832", "createdAt": "2021-01-08T16:31:02Z", "author": {"login": "schlosna"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/factory/TransactionManagerConsistencyResult.java", "diffHunk": "@@ -23,7 +23,9 @@\n  * determine that it is safe (or, at least, not obviously unsafe) to service requests.\n  */\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMTU1OA=="}, "originalCommit": {"oid": "c695a342e51f7c46f3ece6480fdb17cc0b45c300"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjYzMDk2OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/stream/StreamStorePersistenceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzowNDo1NFrOIQRUYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMzowNDo1NFrOIQRUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMTg3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @SuppressWarnings(\"ClassInitializationDeadlock\")\n          \n          \n            \n            @SuppressWarnings(\"ClassInitializationDeadlock\")\n          \n          \n            \n            @Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)", "url": "https://github.com/palantir/atlasdb/pull/5169#discussion_r553931873", "createdAt": "2021-01-08T13:04:54Z", "author": {"login": "gmaretic"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/stream/StreamStorePersistenceConfiguration.java", "diffHunk": "@@ -23,7 +23,9 @@\n @JsonSerialize(as = ImmutableStreamStorePersistenceConfiguration.class)\n @JsonDeserialize(as = ImmutableStreamStorePersistenceConfiguration.class)\n @Value.Immutable\n+@SuppressWarnings(\"ClassInitializationDeadlock\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c695a342e51f7c46f3ece6480fdb17cc0b45c300"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3130, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}