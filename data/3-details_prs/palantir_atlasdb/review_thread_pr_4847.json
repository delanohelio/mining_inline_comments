{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzUyNzI0", "number": 4847, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo1NjoxOFrOEHFzqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MzoxNVrOEHLYLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODcwNjMzOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/FilteredTaggedMetricSet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo1NjoxOFrOGmSPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowNTowOVrOGmWC3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5Nzg2OA==", "bodyText": "Would it make sense for this class to just take a Predicate, and implement the filtering rules somewhere else?", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r442797868", "createdAt": "2020-06-19T11:56:18Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/FilteredTaggedMetricSet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.metrics;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+\n+import com.codahale.metrics.Metric;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.refreshable.Refreshable;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricSet;\n+\n+public class FilteredTaggedMetricSet implements TaggedMetricSet {\n+    private final TaggedMetricSet unfiltered;\n+    private final Map<MetricName, List<MetricPublicationFilter>> singleMetricFilters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e24b4b212edae0fc473b20a61149cc41bbb4cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1NzUyOA==", "bodyText": "As in this class just takes Predicate<MetricName> (and then have some kind of filter registry that handles this map)? Yep, we could - I don't feel strongly either way (what you propose does split responsibilities better, though it does add another piece).", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r442857528", "createdAt": "2020-06-19T14:00:00Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/FilteredTaggedMetricSet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.metrics;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+\n+import com.codahale.metrics.Metric;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.refreshable.Refreshable;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricSet;\n+\n+public class FilteredTaggedMetricSet implements TaggedMetricSet {\n+    private final TaggedMetricSet unfiltered;\n+    private final Map<MetricName, List<MetricPublicationFilter>> singleMetricFilters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5Nzg2OA=="}, "originalCommit": {"oid": "50e24b4b212edae0fc473b20a61149cc41bbb4cd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2MDI1NQ==", "bodyText": "(for clarity: yeah I plan to change this)", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r442860255", "createdAt": "2020-06-19T14:05:09Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/FilteredTaggedMetricSet.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.metrics;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+\n+import com.codahale.metrics.Metric;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.refreshable.Refreshable;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricSet;\n+\n+public class FilteredTaggedMetricSet implements TaggedMetricSet {\n+    private final TaggedMetricSet unfiltered;\n+    private final Map<MetricName, List<MetricPublicationFilter>> singleMetricFilters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5Nzg2OA=="}, "originalCommit": {"oid": "50e24b4b212edae0fc473b20a61149cc41bbb4cd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODcyMzczOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjowMzo0OVrOGmSalw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowMjoxNlrOGmV9Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMDc5MQ==", "bodyText": "I wonder if metric-schema should provide all of this for us? Basically the ability to specify that a metrics should be published only once a certain threshold is breached? I suspect we'll need this in a bunch of projects that are hoping to cut on spend. @ferozco", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r442800791", "createdAt": "2020-06-19T12:03:49Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.sweep.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.LongSupplier;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+/**\n+ * Indicates whether targeted sweep metrics should be published.\n+ *\n+ * The criteria for publishing metrics for a given strategy, is if the number of enqueued writes or reads is in\n+ * excess of {@link #MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE}, or it is believed that targeted sweep is behind by\n+ * more than {@link #MINIMUM_STALE_DURATION}. If any of these conditions are true, then all targeted sweep metrics\n+ * will be published.\n+ */\n+public class TargetedSweepMetricPublicationFilter implements MetricPublicationFilter {\n+    @VisibleForTesting\n+    static final long MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE = 1_000;\n+    @VisibleForTesting\n+    static final Duration MINIMUM_STALE_DURATION = Duration.ofHours(4);\n+\n+    private final AtomicBoolean publicationLatch;\n+\n+    private final LongSupplier enqueuedWrites;\n+    private final LongSupplier entriesRead;\n+    private final LongSupplier millisSinceLastSweptTs;\n+\n+    public TargetedSweepMetricPublicationFilter(DecisionMetrics decisionMetrics) {\n+        this.publicationLatch = new AtomicBoolean(false);\n+        this.enqueuedWrites = decisionMetrics.enqueuedWrites();\n+        this.entriesRead = decisionMetrics.entriesRead();\n+        this.millisSinceLastSweptTs = decisionMetrics.millisSinceLastSweptTs();\n+    }\n+\n+    @Override\n+    public boolean shouldPublish() {\n+        if (publicationLatch.get()) {\n+            return true;\n+        }\n+        boolean conditionsAchieved = testConditions();\n+        if (conditionsAchieved) {\n+            publicationLatch.compareAndSet(false, true);\n+        }\n+        return conditionsAchieved;\n+    }\n+\n+    private boolean testConditions() {\n+        return enqueuedWrites.getAsLong() >= MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50e24b4b212edae0fc473b20a61149cc41bbb4cd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1ODc2Nw==", "bodyText": "Yep, it would be cool if metric-schema would do that (and subject to team prioritisation I would be very interested in helping with such an effort, if we think it should live there).\nNote that here we register these filters even for the other TS metrics so having 'publish A only if B is above a certain value' might be a little bit much to ask (though if we want to support that in metric schema I'm not complaining!).", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r442858767", "createdAt": "2020-06-19T14:02:16Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.sweep.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.LongSupplier;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+/**\n+ * Indicates whether targeted sweep metrics should be published.\n+ *\n+ * The criteria for publishing metrics for a given strategy, is if the number of enqueued writes or reads is in\n+ * excess of {@link #MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE}, or it is believed that targeted sweep is behind by\n+ * more than {@link #MINIMUM_STALE_DURATION}. If any of these conditions are true, then all targeted sweep metrics\n+ * will be published.\n+ */\n+public class TargetedSweepMetricPublicationFilter implements MetricPublicationFilter {\n+    @VisibleForTesting\n+    static final long MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE = 1_000;\n+    @VisibleForTesting\n+    static final Duration MINIMUM_STALE_DURATION = Duration.ofHours(4);\n+\n+    private final AtomicBoolean publicationLatch;\n+\n+    private final LongSupplier enqueuedWrites;\n+    private final LongSupplier entriesRead;\n+    private final LongSupplier millisSinceLastSweptTs;\n+\n+    public TargetedSweepMetricPublicationFilter(DecisionMetrics decisionMetrics) {\n+        this.publicationLatch = new AtomicBoolean(false);\n+        this.enqueuedWrites = decisionMetrics.enqueuedWrites();\n+        this.entriesRead = decisionMetrics.entriesRead();\n+        this.millisSinceLastSweptTs = decisionMetrics.millisSinceLastSweptTs();\n+    }\n+\n+    @Override\n+    public boolean shouldPublish() {\n+        if (publicationLatch.get()) {\n+            return true;\n+        }\n+        boolean conditionsAchieved = testConditions();\n+        if (conditionsAchieved) {\n+            publicationLatch.compareAndSet(false, true);\n+        }\n+        return conditionsAchieved;\n+    }\n+\n+    private boolean testConditions() {\n+        return enqueuedWrites.getAsLong() >= MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwMDc5MQ=="}, "originalCommit": {"oid": "50e24b4b212edae0fc473b20a61149cc41bbb4cd"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTYxOTAwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0MzoxNVrOGmbJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjo1ODozNlrOGnJWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzgxMA==", "bodyText": "Should we make this user-configurable?", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r442943810", "createdAt": "2020-06-19T16:43:15Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.sweep.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.LongSupplier;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+/**\n+ * Indicates whether targeted sweep metrics should be published.\n+ *\n+ * The criteria for publishing metrics for a given strategy, is if the number of enqueued writes or reads is in\n+ * excess of {@link #MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE}, or it is believed that targeted sweep is behind by\n+ * more than {@link #MINIMUM_STALE_DURATION}. If any of these conditions are true, then all targeted sweep metrics\n+ * will be published.\n+ */\n+public class TargetedSweepMetricPublicationFilter implements MetricPublicationFilter {\n+    @VisibleForTesting\n+    static final long MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE = 1_000;\n+    @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14dffbcc54dc4681b05ce60c2c2121e08d749d8a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2ODc3OQ==", "bodyText": "Dunno in this particular case, but in general, less config is always better. We should aim to build systems that either self-tune or have good enough defaults that work in most cases.", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r443068779", "createdAt": "2020-06-19T22:43:05Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.sweep.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.LongSupplier;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+/**\n+ * Indicates whether targeted sweep metrics should be published.\n+ *\n+ * The criteria for publishing metrics for a given strategy, is if the number of enqueued writes or reads is in\n+ * excess of {@link #MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE}, or it is believed that targeted sweep is behind by\n+ * more than {@link #MINIMUM_STALE_DURATION}. If any of these conditions are true, then all targeted sweep metrics\n+ * will be published.\n+ */\n+public class TargetedSweepMetricPublicationFilter implements MetricPublicationFilter {\n+    @VisibleForTesting\n+    static final long MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE = 1_000;\n+    @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzgxMA=="}, "originalCommit": {"oid": "14dffbcc54dc4681b05ce60c2c2121e08d749d8a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxOTU5MA==", "bodyText": "Good question. I think I'll hang on to this for now: the kill switch allows us to recover our metrics if there's a P0 (or even a P1), and otherwise I doubt there'll be a situation where we need to change these so urgently that it can't wait for a quick PR that adds configurability.", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r443619590", "createdAt": "2020-06-22T14:54:21Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.sweep.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.LongSupplier;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+/**\n+ * Indicates whether targeted sweep metrics should be published.\n+ *\n+ * The criteria for publishing metrics for a given strategy, is if the number of enqueued writes or reads is in\n+ * excess of {@link #MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE}, or it is believed that targeted sweep is behind by\n+ * more than {@link #MINIMUM_STALE_DURATION}. If any of these conditions are true, then all targeted sweep metrics\n+ * will be published.\n+ */\n+public class TargetedSweepMetricPublicationFilter implements MetricPublicationFilter {\n+    @VisibleForTesting\n+    static final long MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE = 1_000;\n+    @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzgxMA=="}, "originalCommit": {"oid": "14dffbcc54dc4681b05ce60c2c2121e08d749d8a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwMDgwMA==", "bodyText": "(In general I think I'd slant more towards leaving uncertain things configurable in AtlasDB, while less so in AtlasDB-Proxy mainly because of the relative difficulty/friction of recalling bad versions of AtlasDB.)", "url": "https://github.com/palantir/atlasdb/pull/4847#discussion_r443700800", "createdAt": "2020-06-22T16:58:36Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetricPublicationFilter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.sweep.metrics;\n+\n+import java.time.Duration;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.LongSupplier;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+/**\n+ * Indicates whether targeted sweep metrics should be published.\n+ *\n+ * The criteria for publishing metrics for a given strategy, is if the number of enqueued writes or reads is in\n+ * excess of {@link #MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE}, or it is believed that targeted sweep is behind by\n+ * more than {@link #MINIMUM_STALE_DURATION}. If any of these conditions are true, then all targeted sweep metrics\n+ * will be published.\n+ */\n+public class TargetedSweepMetricPublicationFilter implements MetricPublicationFilter {\n+    @VisibleForTesting\n+    static final long MINIMUM_READS_WRITES_TO_BE_CONSIDERED_ACTIVE = 1_000;\n+    @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzgxMA=="}, "originalCommit": {"oid": "14dffbcc54dc4681b05ce60c2c2121e08d749d8a"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2971, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}