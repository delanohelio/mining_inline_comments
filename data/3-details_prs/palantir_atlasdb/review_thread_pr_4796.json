{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODkyMTgw", "number": 4796, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowNDoyOVrOD_qe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozMzoxNlrOEAH6GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDgyOTAyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowNDoyOVrOGadQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowNDoyOVrOGadQsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5NTU2OQ==", "bodyText": "discuss: either make this non-Optional, or add a safety buffer in the ranges above before doing the actual migration", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r430395569", "createdAt": "2020-05-26T13:04:29Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -83,5 +91,25 @@ private long lowestSequenceToMigrate() {\n         PaxosStateLog<V> destinationLog();\n         Persistable.Hydrator<V> hydrator();\n         SqlitePaxosStateLogMigrationState migrationState();\n+        OptionalLong migrateFrom();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDgzOTc1OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowNzoxN1rOGadXzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowNzoxN1rOGadXzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5NzM5MA==", "bodyText": "For debugging: Would it make sense to log the exceptions here?", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r430397390", "createdAt": "2020-05-26T13:07:17Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -29,52 +38,51 @@\n \n     private final PaxosStateLog<V> sourceLog;\n     private final PaxosStateLog<V> destinationLog;\n-    private final Persistable.Hydrator<V> hydrator;\n-    private final SqlitePaxosStateLogMigrationState migrationState;\n \n-    private PaxosStateLogMigrator(PaxosStateLog<V> sourceLog,\n-            PaxosStateLog<V> destinationLog,\n-            Persistable.Hydrator<V> hydrator,\n-            SqlitePaxosStateLogMigrationState migrationState) {\n+    private PaxosStateLogMigrator(PaxosStateLog<V> sourceLog, PaxosStateLog<V> destinationLog) {\n         this.sourceLog = sourceLog;\n         this.destinationLog = destinationLog;\n-        this.hydrator = hydrator;\n-        this.migrationState = migrationState;\n     }\n \n-    public static <V extends Persistable & Versionable> void migrateToValidation(MigrationContext<V> context) {\n-        PaxosStateLogMigrator<V> migrator = new PaxosStateLogMigrator<>(\n-                context.sourceLog(),\n-                context.destinationLog(),\n-                context.hydrator(),\n-                context.migrationState());\n-        if (!context.migrationState().hasMigratedFromInitialState()\n-                || context.destinationLog().getGreatestLogEntry() != context.sourceLog().getGreatestLogEntry()) {\n-            migrator.runMigration();\n-            context.migrationState().migrateToValidationState();\n+    public static <V extends Persistable & Versionable> long migrateAndReturnCutoff(MigrationContext<V> context) {\n+        PaxosStateLogMigrator<V> migrator = new PaxosStateLogMigrator<>(context.sourceLog(), context.destinationLog());\n+        if (!context.migrationState().isInMigratedState()) {\n+            long migrationLowerBound = context.migrateFrom().orElse(context.sourceLog().getGreatestLogEntry());\n+            migrator.runMigration(migrationLowerBound, context.hydrator());\n+            context.migrationState().setCutoff(migrationLowerBound);\n+            context.migrationState().migrateToMigratedState();\n+            return migrationLowerBound;\n         }\n+        return context.migrationState().getCutoff();\n     }\n \n-    private void runMigration() {\n+    private void runMigration(long lowerBound, Persistable.Hydrator<V> hydrator) {\n         destinationLog.truncate(destinationLog.getGreatestLogEntry());\n-        long lowerBound = lowestSequenceToMigrate();\n         long upperBound = sourceLog.getGreatestLogEntry();\n         if (upperBound == PaxosAcceptor.NO_LOG_ENTRY) {\n             return;\n         }\n \n-        try (PaxosStateLogBatchReader<V> reader = new PaxosStateLogBatchReader<>(sourceLog, hydrator, 100)) {\n-            long numberOfBatches = (upperBound - lowerBound) / BATCH_SIZE + 1;\n-            LongStream.iterate(lowerBound, x -> x + BATCH_SIZE)\n-                    .limit(numberOfBatches)\n-                    .mapToObj(sequence -> reader.readBatch(sequence, BATCH_SIZE))\n-                    .forEach(destinationLog::writeBatchOfRounds);\n-        }\n+        LogReader<V> reader = new LogReader<>(sourceLog, hydrator);\n+        List<PaxosRound<V>> roundsToMigrate = LongStream.rangeClosed(lowerBound, upperBound)\n+                .mapToObj(reader::read)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(Collectors.toList());\n+        Iterables.partition(roundsToMigrate, BATCH_SIZE)\n+                .forEach(batch -> writeBatchRetryingUpToFiveTimes(destinationLog, batch));\n     }\n \n-    private long lowestSequenceToMigrate() {\n-        long leastLogEntry = sourceLog.getLeastLogEntry();\n-        return leastLogEntry == PaxosAcceptor.NO_LOG_ENTRY ? 0L : leastLogEntry;\n+    private void writeBatchRetryingUpToFiveTimes(PaxosStateLog<V> target, List<PaxosRound<V>> batch) {\n+        for (int retryCount = 0; retryCount < 5; retryCount++) {\n+            try {\n+                target.writeBatchOfRounds(batch);\n+                return;\n+            } catch (Exception e) {\n+                Uninterruptibles.sleepUninterruptibly(100, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDg2MjUzOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxMzowNVrOGadmEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxMzowNVrOGadmEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwMTA0Mw==", "bodyText": "\ud83d\ude80", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r430401043", "createdAt": "2020-05-26T13:13:05Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "diffHunk": "@@ -79,9 +85,19 @@ private void migrateAndVerifyValuesForSequences(LongStream sequences) {\n         source.writeBatchOfRounds(rounds);\n \n         migrate();\n-        List<PaxosValue> migratedValues = readMigratedValuesFor(expectedValues);\n-\n-        assertThat(migratedValues).isEqualTo(roundsToValues(rounds));\n+        long cutoff = source.getGreatestLogEntry() - 10;\n+        Map<Long, byte[]> targetEntries = readMigratedValuesFor(expectedValues);\n+\n+        targetEntries.entrySet().stream()\n+                .filter(entry -> entry.getKey() < cutoff)\n+                .map(Map.Entry::getValue)\n+                .map(Assertions::assertThat)\n+                .forEach(AbstractAssert::isNull);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDg3NDI1OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogMigrationStateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxNTo1NlrOGadtig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxNTo1NlrOGadtig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwMjk1NA==", "bodyText": "discussed offline: PaxosAcceptor.NO_LOG_ENTRY seems more appropriate", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r430402954", "createdAt": "2020-05-26T13:15:56Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogMigrationStateTest.java", "diffHunk": "@@ -105,4 +105,16 @@ public void finishingMigrationForOneUseCaseDoesNotSetFlagForOthers() {\n         otherState.migrateToValidationState();\n         assertThat(otherState.hasMigratedFromInitialState()).isTrue();\n     }\n+\n+    @Test\n+    public void defaultCutoffIsLongMinValue() {\n+        assertThat(migrationState.getCutoff()).isEqualTo(Long.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDg3ODc3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/PaxosStateLogMigratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxNjo1NlrOGadwTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxNjo1NlrOGadwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwMzY2Mw==", "bodyText": "note: This test is expected to change because we plan on making the migrator remember a buffer of entries before the one externally specified.", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r430403663", "createdAt": "2020-05-26T13:16:56Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/PaxosStateLogMigratorTest.java", "diffHunk": "@@ -66,75 +81,104 @@ public void emptyLogMigrationSuccessfullyMarksAsMigrated() {\n     }\n \n     @Test\n-    public void logMigrationSuccessfullyMigratesEntries() {\n+    public void logMigrationWithNoLowerBoundMigratesOnlyGreatest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDg5MTMxOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/PaxosStateLogMigratorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzoxOTo0OFrOGad39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoxMzo1M1rOGbMMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwNTYyMg==", "bodyText": "Let's document the behaviour where expectedCutoff > upperBound (which currently is not migrating anything, which is weird but we may not want to ban that).", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r430405622", "createdAt": "2020-05-26T13:19:48Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/PaxosStateLogMigratorTest.java", "diffHunk": "@@ -66,75 +81,104 @@ public void emptyLogMigrationSuccessfullyMarksAsMigrated() {\n     }\n \n     @Test\n-    public void logMigrationSuccessfullyMigratesEntries() {\n+    public void logMigrationWithNoLowerBoundMigratesOnlyGreatest() {\n         long lowerBound = 10;\n         long upperBound = 25;\n-        List<PaxosValue> valuesWritten = insertValuesWithinBounds(lowerBound, upperBound, source);\n+        insertValuesWithinBounds(lowerBound, upperBound, source);\n \n-        migrateFrom(source);\n+        long cutoff = migrateFrom(source);\n+\n+        assertThat(cutoff).isEqualTo(upperBound);\n         assertThat(migrationState.hasMigratedFromInitialState()).isTrue();\n-        assertThat(target.getLeastLogEntry()).isEqualTo(lowerBound);\n+        assertThat(migrationState.isInMigratedState()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(upperBound);\n         assertThat(target.getGreatestLogEntry()).isEqualTo(upperBound);\n \n-        valuesWritten.forEach(value -> assertThat(getPaxosValue(target, value.seq)).isEqualTo(value));\n+        LongStream.rangeClosed(lowerBound, upperBound - 1)\n+                .mapToObj(sequence -> readRoundUnchecked(target, sequence))\n+                .map(Assertions::assertThat)\n+                .forEach(AbstractAssert::isNull);\n+        assertThat(getPaxosValue(target, upperBound)).isEqualTo(valueForRound(upperBound));\n+    }\n+\n+    @Test\n+    public void logMigrationWithLowerBoundMigratesFromBound() {\n+        long lowerBound = 10;\n+        long upperBound = 25;\n+        insertValuesWithinBounds(lowerBound, upperBound, source);\n+\n+        long expectedCutoff = 17;\n+        long cutoff = migrateFrom(source, OptionalLong.of(expectedCutoff));\n+\n+        assertThat(cutoff).isEqualTo(expectedCutoff);\n+        assertThat(migrationState.hasMigratedFromInitialState()).isTrue();\n+        assertThat(migrationState.isInMigratedState()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(expectedCutoff);\n+        assertThat(target.getGreatestLogEntry()).isEqualTo(upperBound);\n+\n+        LongStream.rangeClosed(lowerBound, expectedCutoff - 1)\n+                .mapToObj(sequence -> readRoundUnchecked(target, sequence))\n+                .map(Assertions::assertThat)\n+                .forEach(AbstractAssert::isNull);\n+        KeyedStream.of(LongStream.rangeClosed(expectedCutoff, upperBound).boxed())\n+                .map(sequence -> getPaxosValue(target, sequence))\n+                .mapKeys(PaxosStateLogTestUtils::valueForRound)\n+                .entries()\n+                .forEach(entry -> assertThat(entry.getKey()).isEqualTo(entry.getValue()));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2NDUyNg==", "bodyText": "Yeah, this actually doesn't play nice with splitting log so changed", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r431164526", "createdAt": "2020-05-27T14:13:53Z", "author": {"login": "gmaretic"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/PaxosStateLogMigratorTest.java", "diffHunk": "@@ -66,75 +81,104 @@ public void emptyLogMigrationSuccessfullyMarksAsMigrated() {\n     }\n \n     @Test\n-    public void logMigrationSuccessfullyMigratesEntries() {\n+    public void logMigrationWithNoLowerBoundMigratesOnlyGreatest() {\n         long lowerBound = 10;\n         long upperBound = 25;\n-        List<PaxosValue> valuesWritten = insertValuesWithinBounds(lowerBound, upperBound, source);\n+        insertValuesWithinBounds(lowerBound, upperBound, source);\n \n-        migrateFrom(source);\n+        long cutoff = migrateFrom(source);\n+\n+        assertThat(cutoff).isEqualTo(upperBound);\n         assertThat(migrationState.hasMigratedFromInitialState()).isTrue();\n-        assertThat(target.getLeastLogEntry()).isEqualTo(lowerBound);\n+        assertThat(migrationState.isInMigratedState()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(upperBound);\n         assertThat(target.getGreatestLogEntry()).isEqualTo(upperBound);\n \n-        valuesWritten.forEach(value -> assertThat(getPaxosValue(target, value.seq)).isEqualTo(value));\n+        LongStream.rangeClosed(lowerBound, upperBound - 1)\n+                .mapToObj(sequence -> readRoundUnchecked(target, sequence))\n+                .map(Assertions::assertThat)\n+                .forEach(AbstractAssert::isNull);\n+        assertThat(getPaxosValue(target, upperBound)).isEqualTo(valueForRound(upperBound));\n+    }\n+\n+    @Test\n+    public void logMigrationWithLowerBoundMigratesFromBound() {\n+        long lowerBound = 10;\n+        long upperBound = 25;\n+        insertValuesWithinBounds(lowerBound, upperBound, source);\n+\n+        long expectedCutoff = 17;\n+        long cutoff = migrateFrom(source, OptionalLong.of(expectedCutoff));\n+\n+        assertThat(cutoff).isEqualTo(expectedCutoff);\n+        assertThat(migrationState.hasMigratedFromInitialState()).isTrue();\n+        assertThat(migrationState.isInMigratedState()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(expectedCutoff);\n+        assertThat(target.getGreatestLogEntry()).isEqualTo(upperBound);\n+\n+        LongStream.rangeClosed(lowerBound, expectedCutoff - 1)\n+                .mapToObj(sequence -> readRoundUnchecked(target, sequence))\n+                .map(Assertions::assertThat)\n+                .forEach(AbstractAssert::isNull);\n+        KeyedStream.of(LongStream.rangeClosed(expectedCutoff, upperBound).boxed())\n+                .map(sequence -> getPaxosValue(target, sequence))\n+                .mapKeys(PaxosStateLogTestUtils::valueForRound)\n+                .entries()\n+                .forEach(entry -> assertThat(entry.getKey()).isEqualTo(entry.getValue()));\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQwNTYyMg=="}, "originalCommit": {"oid": "18812dcee0920c41d024491a80fbf388003ed086"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTY1MDE3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozMzoxNlrOGbNS4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDozMzoxNlrOGbNS4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4MjU2MA==", "bodyText": "nit: private", "url": "https://github.com/palantir/atlasdb/pull/4796#discussion_r431182560", "createdAt": "2020-05-27T14:33:16Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -33,8 +35,12 @@\n import com.palantir.common.persist.Persistable;\n \n public final class PaxosStateLogMigrator<V extends Persistable & Versionable> {\n+    public static final Logger log = LoggerFactory.getLogger(PaxosStateLogMigrator.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0eb639d09f940341b50021b5c999bb0da7d5f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2876, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}