{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzI3MDE1", "number": 4878, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMTowN1rOEK1wRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MDowMlrOEMD8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODAxOTI2OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMTowN1rOGsHF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDozMTowN1rOGsHF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNjcyNg==", "bodyText": "wat", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r448906726", "createdAt": "2020-07-02T10:31:07Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.Test;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClientPoolingContainer;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.MetricsManagers;\n+import com.palantir.refreshable.Refreshable;\n+import com.palantir.tritium.metrics.registry.DefaultTaggedMetricRegistry;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+\n+public class CassandraClientPoolMetricsTest {\n+    private final MetricsManager metricsManager = MetricsManagers.of(\n+            new MetricRegistry(),\n+            new DefaultTaggedMetricRegistry(),\n+            Refreshable.only(true));\n+\n+    @Test\n+    public void metricsProducible() {\n+        CassandraClientPoolMetrics metrics = new CassandraClientPoolMetrics(metricsManager);\n+        AtomicLong poolOne = new AtomicLong(3);\n+        AtomicLong poolTwo = new AtomicLong(4);\n+        AtomicLong poolThree = new AtomicLong(20);\n+\n+        metrics.registerPoolMetric(CassandraClientPoolHostLevelMetric.MEAN_ACTIVE_TIME_MILLIS, poolOne::get, 1);\n+        metrics.registerPoolMetric(CassandraClientPoolHostLevelMetric.MEAN_ACTIVE_TIME_MILLIS, poolTwo::get, 2);\n+        metrics.registerPoolMetric(CassandraClientPoolHostLevelMetric.MEAN_ACTIVE_TIME_MILLIS, poolThree::get, 3);\n+\n+        assertThat(metricsManager.getTaggedRegistry().getMetrics())\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool1\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool2\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool3\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"mean\"));\n+\n+        assertThat(metricsManager.getPublishableMetrics().getMetrics())\n+                .doesNotContainKey(createMeanActiveTimeMillisMetric(\"pool1\"))\n+                .doesNotContainKey(createMeanActiveTimeMillisMetric(\"pool2\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool3\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"mean\"));\n+    }\n+\n+    public MetricName createMeanActiveTimeMillisMetric(String pool1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4953c677bff8e9d2bb5053fbac04b04eed9acbd8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTYyNDc4OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzoyNDo1NlrOGsW7cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNzoyNDo1NlrOGsW7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NjE5Mw==", "bodyText": "ConcurrentHashSet", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r449166193", "createdAt": "2020-07-02T17:24:56Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.codahale.metrics.CachedGauge;\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Given a series of gauge metrics, allows for the retrieval for the mean. Furthermore allows for the generation of\n+ * {@link MetricPublicationFilter}s that identify whether any specific values exceed a tolerance value from the mean.\n+ */\n+class DistributionOutlierController {\n+    @VisibleForTesting\n+    static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Set<Gauge<Long>> gauges;\n+    private final double minimumMeanMultiple;\n+    private final double maximumMeanMultiple;\n+    private final Gauge<Double> meanGauge;\n+\n+    @VisibleForTesting\n+    DistributionOutlierController(\n+            Clock clock,\n+            double minimumMeanMultiple,\n+            double maximumMeanMultiple) {\n+        this.gauges = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821c0fb1df6c3734f961e1337b21afd0dc546e6a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgyNjMxOnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0ODo1MlrOGt89dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0ODo1MlrOGt89dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzg3Nw==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r450837877", "createdAt": "2020-07-07T12:48:52Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetrics.java", "diffHunk": "@@ -72,6 +102,33 @@ public void recordPoolExhaustion() {\n         poolExhaustionCounter.inc();\n     }\n \n+    @SuppressWarnings(\"unchecked\") // Guaranteed to have the correct type\n+    public void registerPoolMetric(\n+            CassandraClientPoolHostLevelMetric metric,\n+            Gauge<Long> gauge,\n+            int poolNumber) {\n+        MetricPublicationFilter filter = outlierControllers.get(metric).registerAndCreateFilter(gauge);\n+        registerPoolMetricsToRegistry(metric, gauge, poolNumber, filter);\n+    }\n+\n+    private void registerPoolMetricsToRegistry(\n+            CassandraClientPoolHostLevelMetric metric,\n+            Gauge<Long> gauge,\n+            int poolNumber,\n+            MetricPublicationFilter filter) {\n+        Map<String, String> poolTag = ImmutableMap.of(\"pool\", \"pool\" + poolNumber);\n+        metricsManager.addMetricFilter(\n+                CassandraClientPoolingContainer.class,\n+                metric.metricName,\n+                poolTag,\n+                filter);\n+        metricsManager.registerOrGet(\n+                CassandraClientPoolingContainer.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821c0fb1df6c3734f961e1337b21afd0dc546e6a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgzMDgxOnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MDowMlrOGt9AOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MDowMlrOGt9AOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzODU4NQ==", "bodyText": "nice", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r450838585", "createdAt": "2020-07-07T12:50:02Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.codahale.metrics.CachedGauge;\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Given a series of gauge metrics, allows for the retrieval for the mean. Furthermore allows for the generation of\n+ * {@link MetricPublicationFilter}s that identify whether any specific values exceed a tolerance value from the mean.\n+ */\n+class DistributionOutlierController {\n+    @VisibleForTesting\n+    static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Set<Gauge<Long>> gauges;\n+    private final double minimumMeanMultiple;\n+    private final double maximumMeanMultiple;\n+    private final Gauge<Double> meanGauge;\n+\n+    @VisibleForTesting\n+    DistributionOutlierController(\n+            Clock clock,\n+            double minimumMeanMultiple,\n+            double maximumMeanMultiple) {\n+        this.gauges = new HashSet<>();\n+        this.minimumMeanMultiple = minimumMeanMultiple;\n+        this.maximumMeanMultiple = maximumMeanMultiple;\n+        this.meanGauge = new CachedGauge<Double>(clock, REFRESH_INTERVAL.toNanos(), TimeUnit.NANOSECONDS) {\n+            @Override\n+            protected Double loadValue() {\n+                List<Long> gaugeValues = gauges.stream()\n+                        .map(Gauge::getValue)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList());\n+                if (gaugeValues.isEmpty()) {\n+                    return null;\n+                }\n+                return gaugeValues.stream()\n+                        .mapToLong(x -> x)\n+                        .average()\n+                        .orElseThrow(() -> new SafeIllegalStateException(\"Improperly handled average of 0 values\"));\n+            }\n+        };\n+    }\n+\n+    static DistributionOutlierController create(double minimumMeanMultiple, double maximumMeanMultiple) {\n+        return new DistributionOutlierController(Clock.defaultClock(), minimumMeanMultiple, maximumMeanMultiple);\n+    }\n+\n+    Gauge<Double> getMeanGauge() {\n+        return meanGauge;\n+    }\n+\n+    MetricPublicationFilter registerAndCreateFilter(Gauge<Long> gauge) {\n+        gauges.add(gauge);\n+        return () -> shouldPublishIndividualGaugeMetric(gauge);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "821c0fb1df6c3734f961e1337b21afd0dc546e6a"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2703, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}