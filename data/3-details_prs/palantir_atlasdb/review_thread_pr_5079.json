{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4ODQxOTAw", "number": 5079, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozNjowNFrOExIWYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoyMzo0MVrOExJYFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTUyNDgwOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/LeaderElectionMetricAggregator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozNjowNFrOHnGYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTozNjowNFrOHnGYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2MDk2Nw==", "bodyText": "I'm not a huge fan, but not sure what the best way to use a gauge here is.", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510760967", "createdAt": "2020-10-23T09:36:04Z", "author": {"login": "Jolyon-S"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/LeaderElectionMetricAggregator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import com.codahale.metrics.Gauge;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.SlidingWindowWeightedMeanGauge;\n+import com.palantir.conjure.java.lib.SafeLong;\n+import com.palantir.timelock.feedback.LeaderElectionStatistics;\n+\n+public final class LeaderElectionMetricAggregator {\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP99;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP95;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeMean;\n+    private volatile long lastElectionTime = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93f810c495937bdee87ac041fb00c6fe09bba50"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTYyOTc0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/client/LeaderElectionReportingTimelockServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDowNToyNlrOHnHXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoyODowMVrOHnIG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3NzIxMg==", "bodyText": "Driveby", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510777212", "createdAt": "2020-10-23T10:05:26Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/test/java/com/palantir/lock/client/LeaderElectionReportingTimelockServiceTest.java", "diffHunk": "@@ -197,13 +230,17 @@ private void assertExpectedDuration(Instant instant, Instant instant2) {\n \n     @Value.Immutable\n     interface SingleCall {\n-        @Parameter\n+        @Value.Parameter\n         long requestMillis();\n \n-        @Parameter\n+        @Value.Parameter\n         long responseMillis();\n \n-        @Parameter\n+        @Value.Parameter\n         UUID responseLeader();\n+\n+        static SingleCall of(long requestMillis, long responseMillis, UUID responseLeader) {\n+            return ImmutableSingleCall.of(requestMillis, responseMillis, responseLeader);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MTg1OA==", "bodyText": "Have fun rebasing :P", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510781858", "createdAt": "2020-10-23T10:14:15Z", "author": {"login": "gmaretic"}, "path": "lock-api/src/test/java/com/palantir/lock/client/LeaderElectionReportingTimelockServiceTest.java", "diffHunk": "@@ -197,13 +230,17 @@ private void assertExpectedDuration(Instant instant, Instant instant2) {\n \n     @Value.Immutable\n     interface SingleCall {\n-        @Parameter\n+        @Value.Parameter\n         long requestMillis();\n \n-        @Parameter\n+        @Value.Parameter\n         long responseMillis();\n \n-        @Parameter\n+        @Value.Parameter\n         UUID responseLeader();\n+\n+        static SingleCall of(long requestMillis, long responseMillis, UUID responseLeader) {\n+            return ImmutableSingleCall.of(requestMillis, responseMillis, responseLeader);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3NzIxMg=="}, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4OTM1MQ==", "bodyText": "I will, don't worry", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510789351", "createdAt": "2020-10-23T10:28:01Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/test/java/com/palantir/lock/client/LeaderElectionReportingTimelockServiceTest.java", "diffHunk": "@@ -197,13 +230,17 @@ private void assertExpectedDuration(Instant instant, Instant instant2) {\n \n     @Value.Immutable\n     interface SingleCall {\n-        @Parameter\n+        @Value.Parameter\n         long requestMillis();\n \n-        @Parameter\n+        @Value.Parameter\n         long responseMillis();\n \n-        @Parameter\n+        @Value.Parameter\n         UUID responseLeader();\n+\n+        static SingleCall of(long requestMillis, long responseMillis, UUID responseLeader) {\n+            return ImmutableSingleCall.of(requestMillis, responseMillis, responseLeader);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3NzIxMg=="}, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY2Mjc3OnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-feedback.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxNToxM1rOHnHrlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxNToxM1rOHnHrlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MjM1Ng==", "bodyText": "durationEstimate?", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510782356", "createdAt": "2020-10-23T10:15:13Z", "author": {"login": "gmaretic"}, "path": "timelock-api/src/main/conjure/timelock-feedback.yml", "diffHunk": "@@ -17,6 +17,13 @@ types:\n           p99: double\n           oneMin: double\n           errorRate: optional<double>\n+      LeaderElectionStatistics:\n+        fields:\n+          p99: double\n+          p95: double\n+          mean: double\n+          count: safelong\n+          perceivedTime: optional<safelong>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY2ODQyOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/LeaderElectionMetricAggregator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxNjo0N1rOHnHvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMzo0OToyOVrOHoQXJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MzIzMg==", "bodyText": "Might be better to just not set when empty", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510783232", "createdAt": "2020-10-23T10:16:47Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/LeaderElectionMetricAggregator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import com.palantir.atlasdb.util.CurrentValueMetric;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.SlidingWindowWeightedMeanGauge;\n+import com.palantir.conjure.java.lib.SafeLong;\n+import com.palantir.timelock.feedback.LeaderElectionStatistics;\n+\n+public final class LeaderElectionMetricAggregator {\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP99;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP95;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeMean;\n+    private final CurrentValueMetric<Long> lastElectionTime;\n+\n+    public LeaderElectionMetricAggregator(MetricsManager metricsManager) {\n+        weightedGaugeP99 = SlidingWindowWeightedMeanGauge.create();\n+        weightedGaugeP95 = SlidingWindowWeightedMeanGauge.create();\n+        weightedGaugeMean = SlidingWindowWeightedMeanGauge.create();\n+        lastElectionTime = new CurrentValueMetric<>();\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactMean\", weightedGaugeMean);\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactP95\", weightedGaugeP95);\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactP99\", weightedGaugeP99);\n+        metricsManager.registerMetric(LeaderElectionMetricAggregator.class, \"leaderElectionDuration\", lastElectionTime);\n+    }\n+\n+    void report(LeaderElectionStatistics statistics) {\n+        long count = statistics.getCount().longValue();\n+        weightedGaugeMean.update(statistics.getMean(), count);\n+        weightedGaugeP95.update(statistics.getP95(), count);\n+        weightedGaugeP99.update(statistics.getP99(), count);\n+        lastElectionTime.setValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MjQ4OA==", "bodyText": "Reasoning here being that, when no election is going on, we might want to set to 0 (else the metric will sit on the previous observed value between elections, which might give the impression that we're having a bad time)", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510792488", "createdAt": "2020-10-23T10:34:15Z", "author": {"login": "Jolyon-S"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/LeaderElectionMetricAggregator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import com.palantir.atlasdb.util.CurrentValueMetric;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.SlidingWindowWeightedMeanGauge;\n+import com.palantir.conjure.java.lib.SafeLong;\n+import com.palantir.timelock.feedback.LeaderElectionStatistics;\n+\n+public final class LeaderElectionMetricAggregator {\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP99;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP95;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeMean;\n+    private final CurrentValueMetric<Long> lastElectionTime;\n+\n+    public LeaderElectionMetricAggregator(MetricsManager metricsManager) {\n+        weightedGaugeP99 = SlidingWindowWeightedMeanGauge.create();\n+        weightedGaugeP95 = SlidingWindowWeightedMeanGauge.create();\n+        weightedGaugeMean = SlidingWindowWeightedMeanGauge.create();\n+        lastElectionTime = new CurrentValueMetric<>();\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactMean\", weightedGaugeMean);\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactP95\", weightedGaugeP95);\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactP99\", weightedGaugeP99);\n+        metricsManager.registerMetric(LeaderElectionMetricAggregator.class, \"leaderElectionDuration\", lastElectionTime);\n+    }\n+\n+    void report(LeaderElectionStatistics statistics) {\n+        long count = statistics.getCount().longValue();\n+        weightedGaugeMean.update(statistics.getMean(), count);\n+        weightedGaugeP95.update(statistics.getP95(), count);\n+        weightedGaugeP99.update(statistics.getP99(), count);\n+        lastElectionTime.setValue(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MzIzMg=="}, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk3MzE1Nw==", "bodyText": "Yeah, still not buying it as that's exactly what the metric is supposed to do: report the last known leader election, and 0 will skew the picture", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r511973157", "createdAt": "2020-10-26T13:49:29Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/LeaderElectionMetricAggregator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import com.palantir.atlasdb.util.CurrentValueMetric;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.SlidingWindowWeightedMeanGauge;\n+import com.palantir.conjure.java.lib.SafeLong;\n+import com.palantir.timelock.feedback.LeaderElectionStatistics;\n+\n+public final class LeaderElectionMetricAggregator {\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP99;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeP95;\n+    private final SlidingWindowWeightedMeanGauge weightedGaugeMean;\n+    private final CurrentValueMetric<Long> lastElectionTime;\n+\n+    public LeaderElectionMetricAggregator(MetricsManager metricsManager) {\n+        weightedGaugeP99 = SlidingWindowWeightedMeanGauge.create();\n+        weightedGaugeP95 = SlidingWindowWeightedMeanGauge.create();\n+        weightedGaugeMean = SlidingWindowWeightedMeanGauge.create();\n+        lastElectionTime = new CurrentValueMetric<>();\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactMean\", weightedGaugeMean);\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactP95\", weightedGaugeP95);\n+        metricsManager.registerMetric(\n+                LeaderElectionMetricAggregator.class, \"leaderElectionImpactP99\", weightedGaugeP99);\n+        metricsManager.registerMetric(LeaderElectionMetricAggregator.class, \"leaderElectionDuration\", lastElectionTime);\n+    }\n+\n+    void report(LeaderElectionStatistics statistics) {\n+        long count = statistics.getCount().longValue();\n+        weightedGaugeMean.update(statistics.getMean(), count);\n+        weightedGaugeP95.update(statistics.getP95(), count);\n+        weightedGaugeP99.update(statistics.getP99(), count);\n+        lastElectionTime.setValue(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MzIzMg=="}, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY5Mjg5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderElectionReportingTimelockService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoyMzo0MFrOHnH9iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzoxMDo0N1rOHnNMKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4Njk1Mw==", "bodyText": "There is of course a small race condition here, but it's fine", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510786953", "createdAt": "2020-10-23T10:23:40Z", "author": {"login": "gmaretic"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderElectionReportingTimelockService.java", "diffHunk": "@@ -115,6 +120,24 @@ public ConjureStartTransactionsResponse startTransactions(ConjureStartTransactio\n                 .logId());\n     }\n \n+    public LeaderElectionStatistics statistics() {\n+        return statisticsWithRegistry(new DefaultTaggedMetricRegistry());\n+    }\n+\n+    @VisibleForTesting\n+    LeaderElectionStatistics statisticsWithRegistry(TaggedMetricRegistry metricRegistry) {\n+        Snapshot metricsSnapshot = metrics.observedDuration().getSnapshot();\n+        LeaderElectionStatistics electionStatistics = LeaderElectionStatistics.builder()\n+                .p99(metricsSnapshot.get99thPercentile())\n+                .p95(metricsSnapshot.get95thPercentile())\n+                .mean(metricsSnapshot.getMean())\n+                .count(SafeLong.of(metrics.observedDuration().getCount()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MjYxNw==", "bodyText": "Did some digging and I believe that metricSnapshot.size() is equivalent, just without the race condition, so replacing with that.", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510872617", "createdAt": "2020-10-23T13:10:47Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderElectionReportingTimelockService.java", "diffHunk": "@@ -115,6 +120,24 @@ public ConjureStartTransactionsResponse startTransactions(ConjureStartTransactio\n                 .logId());\n     }\n \n+    public LeaderElectionStatistics statistics() {\n+        return statisticsWithRegistry(new DefaultTaggedMetricRegistry());\n+    }\n+\n+    @VisibleForTesting\n+    LeaderElectionStatistics statisticsWithRegistry(TaggedMetricRegistry metricRegistry) {\n+        Snapshot metricsSnapshot = metrics.observedDuration().getSnapshot();\n+        LeaderElectionStatistics electionStatistics = LeaderElectionStatistics.builder()\n+                .p99(metricsSnapshot.get99thPercentile())\n+                .p95(metricsSnapshot.get95thPercentile())\n+                .mean(metricsSnapshot.getMean())\n+                .count(SafeLong.of(metrics.observedDuration().getCount()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4Njk1Mw=="}, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY5MzAyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderElectionReportingTimelockService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoyMzo0MVrOHnH9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDozNTozMFrOHnIVrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4Njk3NQ==", "bodyText": "This is a bit janky, but probably fine for tests. Rename to getStatisticsAndSetRegistryTo or something such?", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510786975", "createdAt": "2020-10-23T10:23:41Z", "author": {"login": "gmaretic"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderElectionReportingTimelockService.java", "diffHunk": "@@ -115,6 +120,24 @@ public ConjureStartTransactionsResponse startTransactions(ConjureStartTransactio\n                 .logId());\n     }\n \n+    public LeaderElectionStatistics statistics() {\n+        return statisticsWithRegistry(new DefaultTaggedMetricRegistry());\n+    }\n+\n+    @VisibleForTesting\n+    LeaderElectionStatistics statisticsWithRegistry(TaggedMetricRegistry metricRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc5MzEzMg==", "bodyText": "Yea, I hate this but it does make it much easier to test.", "url": "https://github.com/palantir/atlasdb/pull/5079#discussion_r510793132", "createdAt": "2020-10-23T10:35:30Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderElectionReportingTimelockService.java", "diffHunk": "@@ -115,6 +120,24 @@ public ConjureStartTransactionsResponse startTransactions(ConjureStartTransactio\n                 .logId());\n     }\n \n+    public LeaderElectionStatistics statistics() {\n+        return statisticsWithRegistry(new DefaultTaggedMetricRegistry());\n+    }\n+\n+    @VisibleForTesting\n+    LeaderElectionStatistics statisticsWithRegistry(TaggedMetricRegistry metricRegistry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4Njk3NQ=="}, "originalCommit": {"oid": "0c19da98f9fef5e3b8da5441f0b262b768a32e97"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2442, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}