{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDk1OTU3", "number": 5012, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNjo0NlrOEpaLbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowNjowMlrOEpznYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODU1OTgyOnYy", "diffSide": "LEFT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNjo0NlrOHbD0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNjo0NlrOHbD0SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjEzNw==", "bodyText": "moved these around and made some static; the diff renders weirdly here", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498136137", "createdAt": "2020-10-01T10:16:46Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -153,27 +144,40 @@ LockWatchEventCacheState getStateForTesting() {\n     }\n \n \n-    private void assertTrue(boolean condition, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODU2MzYxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNzo0NVrOHbD2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNzo0NVrOHbD2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjczNQ==", "bodyText": "drive-by rename for clarity", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498136735", "createdAt": "2020-10-01T10:17:45Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -44,14 +51,15 @@\n                 .orElseGet(ImmutableList::of);\n     }\n \n-    LockWatchEvents getAndRemoveElementsUpToExclusive(long endVersion) {\n-        Set<Map.Entry<Long, LockWatchEvent>> elementsUpToVersion = eventMap.headMap(endVersion).entrySet();\n-        LockWatchEvents events = LockWatchEvents.create(elementsUpToVersion);\n-        elementsUpToVersion.clear();\n-        return events;\n+    LockWatchEvents retentionEvents() {\n+        int numToRetention = Math.max(0, eventMap.size() - maxEvents);\n+        LockWatchEvents.Builder builder = new LockWatchEvents.Builder();\n+        Iterators.consumingIterator(Iterators.limit(eventMap.entrySet().iterator(), numToRetention))\n+                .forEachRemaining(entry -> builder.addEvents(entry.getValue()));\n+        return builder.build();\n     }\n \n-    boolean contains(long key) {\n+    boolean containsEntriesLessThanOrEqualTo(long key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjQ2OTg1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTozMzo1MVrOHbqVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxMzoyOVrOHbtGfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NzMwNQ==", "bodyText": "Feels impossible? Or if you think it's possible, this should really live in the LockWatchEvents?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498767305", "createdAt": "2020-10-02T11:33:51Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java", "diffHunk": "@@ -61,12 +62,16 @@ private ClientLockWatchSnapshot() {\n     }\n \n     void processEvents(LockWatchEvents events, UUID versionId) {\n-        if (!events.latestSequence().isPresent()) {\n+        if (events.events().isEmpty()) {\n             return;\n         }\n \n+        Preconditions.checkArgument(events.versionRange().isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMjU0MQ==", "bodyText": "Should be impossible, I just don't like doing Optional.get() blindly. I've moved to LockWatchEvents.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498812541", "createdAt": "2020-10-02T13:13:29Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java", "diffHunk": "@@ -61,12 +62,16 @@ private ClientLockWatchSnapshot() {\n     }\n \n     void processEvents(LockWatchEvents events, UUID versionId) {\n-        if (!events.latestSequence().isPresent()) {\n+        if (events.events().isEmpty()) {\n             return;\n         }\n \n+        Preconditions.checkArgument(events.versionRange().isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NzMwNQ=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjUwMTE2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo0NjoxOVrOHbqoiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNDo0OFrOHbwCvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA==", "bodyText": "I have a pretty strong opinion that your datastructures should not let themselves be instantiated in a way that makes them inconsistent. I think there's a pretty strong assumption everywhere that startTsToSequence should be contained within LockWatchEvents.\nSo I suggest moving the validation you have in LockWatchEventCacheImpl#getUpdateForTransactions to here.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498772104", "createdAt": "2020-10-02T11:46:19Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4Mjc2Ng==", "bodyText": "Ok, I re-read the changes you actually added and it seems like there's obviously the case when the client is up-to-date, therefore the update is empty. I would actually suggest that we add the \"latestVersion\" field to both TransactionsLockWatchUpdate and ClientLogEvents, and basically do this validation in the datastructures. What do you think?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498782766", "createdAt": "2020-10-02T12:12:16Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDU3MQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498860571", "createdAt": "2020-10-02T14:34:31Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDczMg==", "bodyText": "(somewhat - I didn't add latestVersion to TLWU).", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498860732", "createdAt": "2020-10-02T14:34:48Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjUwNDkxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo0Nzo0N1rOHbqq0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODowMlrOHbtQhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjY4OQ==", "bodyText": "While we're here, I missed this in one of the original reviews: this should not be called #map: map traditionally is a functor method, that transforms a value of some type T, but the T stays the same in the transformation. I would suggest something like #toTransactionsLockWatchUpdate or something else, but map is pretty misleading.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498772689", "createdAt": "2020-10-02T11:47:47Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTExMQ==", "bodyText": "Makes sense. Done", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498815111", "createdAt": "2020-10-02T13:18:02Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjY4OQ=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjUzNDcwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTo1OTozNVrOHbq9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODo0OVrOHbtSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NzQ3MQ==", "bodyText": "Not convinced on this comment. Just say this should be the same and provide a link to the timelock class.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498777471", "createdAt": "2020-10-02T11:59:35Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -53,12 +50,18 @@\n  * in concurrency issues and inconsistency in the cache state.\n  */\n public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    /**\n+     * This value should be at least as large as the max size in LockEventLogImpl. If it is smaller, it is possible that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTU1NQ==", "bodyText": "I'll reference the timelock class informally, but you can't link it here since this package does not know about it (I'd already tried this before).", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498815555", "createdAt": "2020-10-02T13:18:49Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -53,12 +50,18 @@\n  * in concurrency issues and inconsistency in the cache state.\n  */\n public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    /**\n+     * This value should be at least as large as the max size in LockEventLogImpl. If it is smaller, it is possible that", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NzQ3MQ=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjU3MjYyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoxNDoxM1rOHbrVbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoxNDoxM1rOHbrVbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4MzU5OA==", "bodyText": "Same here: I feel like the validation again should be done in the CommitUpdate.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498783598", "createdAt": "2020-10-02T12:14:13Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -106,42 +108,55 @@ public CommitUpdate getCommitUpdate(long startTs) {\n             return ImmutableInvalidateAll.builder().build();\n         }\n \n-        return createCommitUpdate(commitInfo, update.events());\n+        // We don't mind if the exact version is not present, as we are only interested in the events **since** the\n+        // transaction started.\n+        assertEventsContainRangeOfVersions(\n+                Range.closed(startVersion.get().version(), commitInfo.commitVersion().version()),\n+                update,\n+                true);\n+\n+        return createCommitUpdate(commitInfo, update.events().events());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjU4NDQzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoxODoyNlrOHbrcvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyMTo0MFrOHbtYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NTQ2OA==", "bodyText": "I have a cute one:\ntimestampMapping().values().stream().mapToLong(\n                LockWatchVersion::version).summaryStatistics()\n\nshould get you sorted?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498785468", "createdAt": "2020-10-02T12:18:26Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNzExOQ==", "bodyText": "That is a cute one. Nice!", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498817119", "createdAt": "2020-10-02T13:21:40Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NTQ2OA=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjU4ODM2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoxOTo1OVrOHbrfTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNzowMlrOHbtkaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg==", "bodyText": "You're doing the empty check twice, perhaps should be a @Value.Check.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498786126", "createdAt": "2020-10-02T12:19:59Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()\n+                .values()\n+                .stream()\n+                .findAny()\n+                .map(LockWatchVersion::id);\n+\n+        Preconditions.checkState(leader.isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODg4OQ==", "bodyText": "I'll extract the empty check out, but I really don't like doing unchecked Optional.get() calls!", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498818889", "createdAt": "2020-10-02T13:24:40Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()\n+                .values()\n+                .stream()\n+                .findAny()\n+                .map(LockWatchVersion::id);\n+\n+        Preconditions.checkState(leader.isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMDIwMQ==", "bodyText": "Actually, using .distinct makes this unnecessary anyway. Nice!", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498820201", "createdAt": "2020-10-02T13:27:02Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()\n+                .values()\n+                .stream()\n+                .findAny()\n+                .map(LockWatchVersion::id);\n+\n+        Preconditions.checkState(leader.isPresent(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjYwNDk2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjoyNjowOFrOHbrqDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyOToxMVrOHbtpoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw==", "bodyText": "I wonder if using #distinct and collecting and checking only single value is fine? You don't expect this ever fire, it's a bug, so shouldn't collect a huge amount of values.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498788877", "createdAt": "2020-10-02T12:26:08Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4OTUxMQ==", "bodyText": "aaactually, are we sure this is disallowed by atlas? I know we check for this in atlasdb-proxy and discard, but I think because Atlas can end up running multiple queries for a particular batch, this is actually possible?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498789511", "createdAt": "2020-10-02T12:27:33Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMDQwNw==", "bodyText": "Hmm, you maybe right, I think we won't even get to this point when they're different, because the cache itself will clear the values? So the lookup for lock watch versions will fail before this.\nNice addition!", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498800407", "createdAt": "2020-10-02T12:50:01Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMTUzNw==", "bodyText": "In any case, we don't want to return multiple leaders, because it will just cause those transactions to conflict further down the line anyway - so at best, this would be a retryable exception.\nHowever, as you note, I don't think we should ever hit this, as a new leader will wipe all previous state, including current timestamp mappings (so we won't be able to get it from the cache - if timestamp versions are not present because of this kind of thing, we retry anyway).", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498821537", "createdAt": "2020-10-02T13:29:11Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjYyODU1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozNDowNFrOHbr4iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozNzoyMVrOHbt8Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjU4NA==", "bodyText": "Would it be much of change in tests to change VersionedEventStore#putAll to take LockWatchEvents?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498792584", "createdAt": "2020-10-02T12:34:04Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java", "diffHunk": "@@ -133,29 +132,29 @@ private void processSuccess(LockWatchStateUpdate.Success success) {\n         }\n \n         if (success.lastKnownVersion() > latestVersion.get().version()) {\n-            assertEventsAreContiguousAndNoEventsMissing(success.events());\n+            assertNoEventsAreMissing(success.events());\n             latestVersion = Optional.of(LockWatchVersion.of(success.logId(), eventStore.putAll(success.events())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjI2Nw==", "bodyText": "Not particularly - changed.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498826267", "createdAt": "2020-10-02T13:37:21Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java", "diffHunk": "@@ -133,29 +132,29 @@ private void processSuccess(LockWatchStateUpdate.Success success) {\n         }\n \n         if (success.lastKnownVersion() > latestVersion.get().version()) {\n-            assertEventsAreContiguousAndNoEventsMissing(success.events());\n+            assertNoEventsAreMissing(success.events());\n             latestVersion = Optional.of(LockWatchVersion.of(success.logId(), eventStore.putAll(success.events())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjU4NA=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjY0MzkwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozOToxM1rOHbsB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzozODoyM1rOHbt-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDk5Ng==", "bodyText": "This feels like more of a test of LockWatchEvents? I'd remove it, since you're checking the whole set of events in the line above.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498794996", "createdAt": "2020-10-02T12:39:13Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java", "diffHunk": "@@ -39,23 +40,24 @@\n \n     @Before\n     public void before() {\n-        eventStore = new VersionedEventStore();\n+        eventStore = new VersionedEventStore(2);\n     }\n \n     @Test\n-    public void getAndRemoveElementsUpToExclusiveDoesNotIncludeEndVersion() {\n+    public void getAndRemoveElementsRemovesOldestElements() {\n         eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3));\n-        LockWatchEvents events = eventStore.getAndRemoveElementsUpToExclusive(3L);\n+        eventStore.putAll(ImmutableList.of(EVENT_4));\n+        LockWatchEvents events = eventStore.retentionEvents();\n         assertThat(events.events().stream().map(LockWatchEvent::sequence)).containsExactly(1L, 2L);\n-        assertThat(events.latestSequence()).hasValue(2L);\n+        assertThat(events.versionRange().map(Range::upperEndpoint)).hasValue(2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjgyNw==", "bodyText": "That's true - I was just porting it over from the previous, but actually you're right in that it is redundant.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498826827", "createdAt": "2020-10-02T13:38:23Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java", "diffHunk": "@@ -39,23 +40,24 @@\n \n     @Before\n     public void before() {\n-        eventStore = new VersionedEventStore();\n+        eventStore = new VersionedEventStore(2);\n     }\n \n     @Test\n-    public void getAndRemoveElementsUpToExclusiveDoesNotIncludeEndVersion() {\n+    public void getAndRemoveElementsRemovesOldestElements() {\n         eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3));\n-        LockWatchEvents events = eventStore.getAndRemoveElementsUpToExclusive(3L);\n+        eventStore.putAll(ImmutableList.of(EVENT_4));\n+        LockWatchEvents events = eventStore.retentionEvents();\n         assertThat(events.events().stream().map(LockWatchEvent::sequence)).containsExactly(1L, 2L);\n-        assertThat(events.latestSequence()).hasValue(2L);\n+        assertThat(events.versionRange().map(Range::upperEndpoint)).hasValue(2L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDk5Ng=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjcwMjM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1ODoxMlrOHbsnBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MDo0NVrOHbuD3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDQ4Nw==", "bodyText": "Perhaps you want eventCache = createEventCache(5); here, since most tests don't want any retention to happen?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498804487", "createdAt": "2020-10-02T12:58:12Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -116,7 +116,7 @@ boolean isDev() {\n \n     @Before\n     public void before() {\n-        eventCache = new LockWatchEventCacheImpl(LockWatchEventLog.create());\n+        eventCache = createEventCache(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODI1NA==", "bodyText": "Reasonable - done.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498828254", "createdAt": "2020-10-02T13:40:45Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -116,7 +116,7 @@ boolean isDev() {\n \n     @Before\n     public void before() {\n-        eventCache = new LockWatchEventCacheImpl(LockWatchEventLog.create());\n+        eventCache = createEventCache(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDQ4Nw=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjcwNTAzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjo1OTowM1rOHbsoyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MToxM1rOHbuFGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDkzNg==", "bodyText": "I'm assuming this is because of no-compression and this will change in next PR.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498804936", "createdAt": "2020-10-02T12:59:03Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -240,7 +255,9 @@ public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n                 ImmutableMap.of(16L, LockWatchVersion.of(LEADER, 7L)));\n         assertThat(results.events()).containsExactly(\n                 LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n-                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2)).build(4L),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODU2OA==", "bodyText": "No compression\nRetention change (i.e. keeps some values around).", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498828568", "createdAt": "2020-10-02T13:41:13Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -240,7 +255,9 @@ public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n                 ImmutableMap.of(16L, LockWatchVersion.of(LEADER, 7L)));\n         assertThat(results.events()).containsExactly(\n                 LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n-                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2)).build(4L),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDkzNg=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjcyMzI2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowNDo1NFrOHbs0gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MjoxNVrOHbuHcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzkzNg==", "bodyText": "I'm assuming you just wanted to make this test do a bit more by adding the extra timestamp to lookup?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498807936", "createdAt": "2020-10-02T13:04:54Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyOTE2OA==", "bodyText": "Yes", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498829168", "createdAt": "2020-10-02T13:42:15Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzkzNg=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjcyNzM5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowNjowMlrOHbs3FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0Mzo0NlrOHbuK0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwODU5Ng==", "bodyText": "Hmm, I feel like I'd rather keep it as an assertion, and maybe rename the test? And if you add the \"latestVersion\" to TransactionUpdate that can tighten this test as well?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498808596", "createdAt": "2020-10-02T13:06:02Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),\n+                Optional.of(LockWatchVersion.of(LEADER, 3L))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzMDAzNQ==", "bodyText": "I've actually changed the test:\n\nbefore, it was testing that a client that is on the exact same version as the cache will not throw\nnow, it's testing that a client that is on the same version as the transaction (but not the cache) will not throw.\n\nIt'd probably be best here if I make sure we have both of those tests.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498830035", "createdAt": "2020-10-02T13:43:46Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),\n+                Optional.of(LockWatchVersion.of(LEADER, 3L))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwODU5Ng=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2602, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}