{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTI0MTEy", "number": 4545, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxODozMTo0MlrODcbhsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMDozMVrODfd6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTM3NzEyOnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxODozMTo0MlrOFkenfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxODozMTo0MlrOFkenfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NDY4Nw==", "bodyText": "this test verifies that the code works in jersey... but we care more about undertow. Witchcraft is not open sourced so this test is hard to write. When we merge this, I'm going to write a similar test in our internal dist of timelock.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r373794687", "createdAt": "2020-02-01T18:31:42Z", "author": {"login": "j-baker"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -78,6 +78,15 @@ public void nonLeadersReturn503() {\n         });\n     }\n \n+\n+    @Test\n+    public void nonLeadersReturn503_conjure() {\n+        cluster.nonLeaders(client.namespace()).forEach((namespace, server) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccd1b913333a8434c02be2bc0c9b99beca25292e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkwODMwOnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-api.yml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NDo1NVrOFnFPgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMTo0MzowMlrOFoF8TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNDY3NA==", "bodyText": "Not familiar with broader Conjure usage of Java, but is this safe? Here we could get a value within the permitted bounds of Long but not in safelong. It might be the case that we don't care since anyone who deserialises this should be aware of nanotime", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r376524674", "createdAt": "2020-02-07T17:54:55Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1MTg2NQ==", "bodyText": "Right, exactly. This is basically if someone calls timelock from the frontend, which is not a valid use case.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377551865", "createdAt": "2020-02-11T10:32:05Z", "author": {"login": "j-baker"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNDY3NA=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4NDcxNw==", "bodyText": "why not just make it any?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377584717", "createdAt": "2020-02-11T11:43:02Z", "author": {"login": "felixdesouza"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNDY3NA=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkxMTE1OnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-api.yml", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NjowM1rOFnFRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDoyNjo0MVrOFrEVtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ==", "bodyText": "Could we use more descriptive names please? I realise we can't reuse the existing names, and it's possible that adds some serialization overhead, but tl/lt/foo seems a little too terse for my taste.\nI guess we're not allowed to use any real namespace names for the first term, so that constrains us a bit.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r376525131", "createdAt": "2020-02-07T17:56:03Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1Njk0NQ==", "bodyText": "Rough perspective:\n\nThis string does not matter in any real way. It's for routing purposes - timelock is an RPC server, it's not RESTful in any way.\nIt will get sent over the wire, and at our request rates, the difference between /timelock/{namespace}/getLeaderTime and /tl/{namespace]/lt is about 1.5MB/sec.\nInternal to the server, common prefixes are more expensive - routers typically work as a list of patterns and for each one you check which one you match - common prefixes are more expensive to match against. Ideally every endpoint we have will differ in the first character.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377556945", "createdAt": "2020-02-11T10:42:28Z", "author": {"login": "j-baker"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1ODA4Mw==", "bodyText": "So my conclusion was: for timelock endpoint, aim for short and sweet, and ideally somewhat memorable. So lt, st, ts, lo, ul, rl.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377558083", "createdAt": "2020-02-11T10:44:40Z", "author": {"login": "j-baker"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU4MjQyOA==", "bodyText": "2 is fair. Ah, okay, thanks for doing the math. 3 is also true (though I didn't think we had too many long common prefixes, other than the startAtlasDbTransactionV(number) ones).\nI see, wasn't sure how aggressively we were going for perf. This makes sense to me.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377582428", "createdAt": "2020-02-11T11:37:32Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyMTQ2MQ==", "bodyText": "not sure if conjure supports this, but can this argument not also be extended to objects? i.e. having human readable method names for code, but wire is just some short form. I'm pretty sure Jackson supports aliases, so you can still add the long form version if you so pleased.\nin a sense the names aren't important, you just need a long running identifier for each of the fields like what we do with PaxosPersistence - although that's only to file - dictionary encoding and what not.\nOut of curiosity, did we ever consider trying CBOR? Does Conjure support outputting CBOR?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377721461", "createdAt": "2020-02-11T15:48:20Z", "author": {"login": "felixdesouza"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2NjY5Ng==", "bodyText": "@j-baker please explain your reasoning here a bit more. Where does the 1.5MB/sec come from? http2 should have header compression built in, which to me means that PATHs should basically be a matter of sending some small constants", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r378266696", "createdAt": "2020-02-12T13:59:50Z", "author": {"login": "jkozlowski"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwNDE4Mw==", "bodyText": "@felixdesouza I think it already happens? lt will get rendered as leaderTime and so on as far as code is concerned.\nCBOR: we could give it a shot, but uncertain if it would change things. I think it only deals with response bodies, which generally aren't large for these endpoints.\nDiscussed offline re: shorter paths. This is for perf. We don't know if this will necessarily be very much better, but since we're writing something new and we believe this causes little harm we'll go for it.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380704183", "createdAt": "2020-02-18T14:26:41Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:\n+    name: Timelock service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl\n+    endpoints:\n+      startTransactions:\n+        http: POST /st/{namespace}\n+        args:\n+          namespace: string\n+          request: ConjureStartTransactionsRequest\n+        returns: ConjureStartTransactionsResponse\n+      leaderTime:\n+        http: POST /lt/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTEzMQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjEwODQ3OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo0NzowM1rOFnhgwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo0Njo0NlrOFoEYZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4Nzg0Mg==", "bodyText": "Sanity check that this is intentional?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r376987842", "createdAt": "2020-02-10T10:47:03Z", "author": {"login": "jeremyk-91"}, "path": "build.gradle", "diffHunk": "@@ -33,12 +34,18 @@ plugins {\n     id 'com.google.protobuf' version '0.8.10'\n }\n \n-repositories {\n-    mavenCentral()\n-    maven {\n-        url 'https://dl.bintray.com/palantir/releases/'\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+        maven {\n+            url 'http://dl.bintray.com/palantir/releases/'\n+        }\n+        maven {\n+            url 'https://dl.bintray.com/marshallpierce/maven/'\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1ODk3OQ==", "bodyText": "I copied this from shared.gradle.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377558979", "createdAt": "2020-02-11T10:46:26Z", "author": {"login": "j-baker"}, "path": "build.gradle", "diffHunk": "@@ -33,12 +34,18 @@ plugins {\n     id 'com.google.protobuf' version '0.8.10'\n }\n \n-repositories {\n-    mavenCentral()\n-    maven {\n-        url 'https://dl.bintray.com/palantir/releases/'\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+        maven {\n+            url 'http://dl.bintray.com/palantir/releases/'\n+        }\n+        maven {\n+            url 'https://dl.bintray.com/marshallpierce/maven/'\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4Nzg0Mg=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTE0Mw==", "bodyText": "Should probably remvoe from shared.gradle (Conjure assumes repos are available to it).", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377559143", "createdAt": "2020-02-11T10:46:46Z", "author": {"login": "j-baker"}, "path": "build.gradle", "diffHunk": "@@ -33,12 +34,18 @@ plugins {\n     id 'com.google.protobuf' version '0.8.10'\n }\n \n-repositories {\n-    mavenCentral()\n-    maven {\n-        url 'https://dl.bintray.com/palantir/releases/'\n+allprojects {\n+    repositories {\n+        mavenCentral()\n+        maven {\n+            url 'http://dl.bintray.com/palantir/releases/'\n+        }\n+        maven {\n+            url 'https://dl.bintray.com/marshallpierce/maven/'\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4Nzg0Mg=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjExMjAxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDo0ODowN1rOFnhi7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo0NzowMFrOFoEY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4ODM5Ng==", "bodyText": "awesome!", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r376988396", "createdAt": "2020-02-10T10:48:07Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1OTI2MA==", "bodyText": "(yeah this just means that we can add auth).", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377559260", "createdAt": "2020-02-11T10:47:00Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4ODM5Ng=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ1MDA1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxMDowMVrOFnuThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDozMjozMlrOFrEkfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ==", "bodyText": "I'm guessing the goal here is, in a separate PR, flip this to true and/or only maintain the true branch, while bumping the product dependency from 0.59.x to the version that has the needed timelock?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377197445", "createdAt": "2020-02-10T17:10:01Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -40,19 +42,31 @@\n import com.palantir.logsafe.Preconditions;\n \n class LockLeaseService {\n+    private static final boolean HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY = false;\n     private final NamespacedTimelockRpcClient delegate;\n+    private final NamespacedConjureTimelockService conjureDelegate;\n     private final UUID clientId;\n     private final CoalescingSupplier<LeaderTime> time;\n \n     @VisibleForTesting\n-    LockLeaseService(NamespacedTimelockRpcClient timelockRpcClient, UUID clientId) {\n+    LockLeaseService(\n+            NamespacedTimelockRpcClient timelockRpcClient,\n+            NamespacedConjureTimelockService conjureDelegate,\n+            UUID clientId) {\n         this.delegate = timelockRpcClient;\n+        this.conjureDelegate = conjureDelegate;\n         this.clientId = clientId;\n-        this.time = new CoalescingSupplier<>(timelockRpcClient::getLeaderTime);\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU1MjU2Mg==", "bodyText": "right, exactly - basically set to true and inline", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377552562", "createdAt": "2020-02-11T10:33:41Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -40,19 +42,31 @@\n import com.palantir.logsafe.Preconditions;\n \n class LockLeaseService {\n+    private static final boolean HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY = false;\n     private final NamespacedTimelockRpcClient delegate;\n+    private final NamespacedConjureTimelockService conjureDelegate;\n     private final UUID clientId;\n     private final CoalescingSupplier<LeaderTime> time;\n \n     @VisibleForTesting\n-    LockLeaseService(NamespacedTimelockRpcClient timelockRpcClient, UUID clientId) {\n+    LockLeaseService(\n+            NamespacedTimelockRpcClient timelockRpcClient,\n+            NamespacedConjureTimelockService conjureDelegate,\n+            UUID clientId) {\n         this.delegate = timelockRpcClient;\n+        this.conjureDelegate = conjureDelegate;\n         this.clientId = clientId;\n-        this.time = new CoalescingSupplier<>(timelockRpcClient::getLeaderTime);\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1OTkwMQ==", "bodyText": "do we want to add the ability to fallback in the case things are borked? or actually just have this be a feature flag until we're happy with it? since this is inside the client and will be annoying to coordinate in the presence of issues.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377659901", "createdAt": "2020-02-11T14:16:21Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -40,19 +42,31 @@\n import com.palantir.logsafe.Preconditions;\n \n class LockLeaseService {\n+    private static final boolean HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY = false;\n     private final NamespacedTimelockRpcClient delegate;\n+    private final NamespacedConjureTimelockService conjureDelegate;\n     private final UUID clientId;\n     private final CoalescingSupplier<LeaderTime> time;\n \n     @VisibleForTesting\n-    LockLeaseService(NamespacedTimelockRpcClient timelockRpcClient, UUID clientId) {\n+    LockLeaseService(\n+            NamespacedTimelockRpcClient timelockRpcClient,\n+            NamespacedConjureTimelockService conjureDelegate,\n+            UUID clientId) {\n         this.delegate = timelockRpcClient;\n+        this.conjureDelegate = conjureDelegate;\n         this.clientId = clientId;\n-        this.time = new CoalescingSupplier<>(timelockRpcClient::getLeaderTime);\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwNzk2NA==", "bodyText": "@felixdesouza Don't think there's very much code (beyond generated stuff) on the client side? The server impl is different and maybe we can have a flag there, but it's a lot easier to blacklist stuff.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380707964", "createdAt": "2020-02-18T14:32:32Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -40,19 +42,31 @@\n import com.palantir.logsafe.Preconditions;\n \n class LockLeaseService {\n+    private static final boolean HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY = false;\n     private final NamespacedTimelockRpcClient delegate;\n+    private final NamespacedConjureTimelockService conjureDelegate;\n     private final UUID clientId;\n     private final CoalescingSupplier<LeaderTime> time;\n \n     @VisibleForTesting\n-    LockLeaseService(NamespacedTimelockRpcClient timelockRpcClient, UUID clientId) {\n+    LockLeaseService(\n+            NamespacedTimelockRpcClient timelockRpcClient,\n+            NamespacedConjureTimelockService conjureDelegate,\n+            UUID clientId) {\n         this.delegate = timelockRpcClient;\n+        this.conjureDelegate = conjureDelegate;\n         this.clientId = clientId;\n-        this.time = new CoalescingSupplier<>(timelockRpcClient::getLeaderTime);\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzQ0NQ=="}, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzU2MDM0OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MjoyMVrOFnvXSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo0MjoyMVrOFnvXSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIxNDc5NA==", "bodyText": "I validated that this behaviour is in line with the current state of the exception mappers in Jersey land. I guess the tests do enforce this parallelism to some extent.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377214794", "createdAt": "2020-02-10T17:42:21Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {\n+        return handleExceptions(Futures.submitAsync(\n+                () -> Futures.immediateFuture(supplier.get()), MoreExecutors.directExecutor()));\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(ListenableFuture<T> future) {\n+        return FluentFuture.from(future)\n+                .catching(BlockingTimeoutException.class, timeout -> {\n+                    throw QosException.throttle(Duration.ZERO);\n+                }, MoreExecutors.directExecutor())\n+                .catching(NotCurrentLeaderException.class, notCurrentLeader -> {\n+                    throw redirectRetryTargeter.redirectRequest(notCurrentLeader.getServiceHint())\n+                            .<QosException>map(QosException::retryOther)\n+                            .orElseGet(QosException::unavailable);\n+                }, MoreExecutors.directExecutor())\n+                .catching(TooManyRequestsException.class, tooManyRequests -> {\n+                    throw QosException.throttle();\n+                }, MoreExecutors.directExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8d422a520033b566549ac0e698b1753c9182bb4"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjU5NTgzOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo1Njo0OFrOFoMJDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo1Njo0OFrOFoMJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NjI4NA==", "bodyText": "So with the RemoteTimelockServiceAdapter operating as a TimelockService the idea was to separate out the RPC concerns from the \"logical\" concerns.\nWe have the same instance here but a level below.\nIt would be nice to not have to think about conjure concerns in this class and have a wrapper that can deal with the differences.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377686284", "createdAt": "2020-02-11T14:56:48Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -65,8 +79,22 @@ LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     StartTransactionResponseV4 startTransactions(int batchSize) {\n-        StartTransactionRequestV4 request = StartTransactionRequestV4.createForRequestor(clientId, batchSize);\n-        StartTransactionResponseV4 response = delegate.startTransactions(request);\n+        final StartTransactionResponseV4 response;\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjYwMTA0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDo1Nzo1OVrOFoMMNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowNTo1NVrOFrF6Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzA5Mw==", "bodyText": "Curious, what benefit do we get out of defining a conjure start transcation request object? Aren't they going to be just as big on the wire?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377687093", "createdAt": "2020-02-11T14:57:59Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -65,8 +79,22 @@ LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     StartTransactionResponseV4 startTransactions(int batchSize) {\n-        StartTransactionRequestV4 request = StartTransactionRequestV4.createForRequestor(clientId, batchSize);\n-        StartTransactionResponseV4 response = delegate.startTransactions(request);\n+        final StartTransactionResponseV4 response;\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {\n+            ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzQ4Mg==", "bodyText": "i.e. isn't it possible to just refer to the non-conjure start transaction request/response inside the conjure definition?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377687482", "createdAt": "2020-02-11T14:58:28Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -65,8 +79,22 @@ LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     StartTransactionResponseV4 startTransactions(int batchSize) {\n-        StartTransactionRequestV4 request = StartTransactionRequestV4.createForRequestor(clientId, batchSize);\n-        StartTransactionResponseV4 response = delegate.startTransactions(request);\n+        final StartTransactionResponseV4 response;\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {\n+            ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzA5Mw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyOTkxMQ==", "bodyText": "James: I did this because conjure objects are naturally backwards compatible, whereas our objects typically are not (or at least, require the user to have correctly added jsonignoreproperties) - it's safe to add new fields on the server side. This means we should be able to evolve our types rather than adding new endpoints for every field.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380729911", "createdAt": "2020-02-18T15:05:55Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -65,8 +79,22 @@ LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     StartTransactionResponseV4 startTransactions(int batchSize) {\n-        StartTransactionRequestV4 request = StartTransactionRequestV4.createForRequestor(clientId, batchSize);\n-        StartTransactionResponseV4 response = delegate.startTransactions(request);\n+        final StartTransactionResponseV4 response;\n+        if (HAVE_ROLLED_OUT_CONJURE_CHANGES_INTERNALLY) {\n+            ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4NzA5Mw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjYxMjk1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTowMDo0NFrOFoMTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNToyMzozMlrOFrGoWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4ODk3OQ==", "bodyText": "based on the above comment, if this implemented a RpcBridge interface or something aptly named, then we can have the return types be in terms of generic \"atlas\" rpc objects, and declutter the usages", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377688979", "createdAt": "2020-02-11T15:00:44Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4OTY3NA==", "bodyText": "it also lends itself quite easily to doing the experimental proxy suggestion I made earlier.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377689674", "createdAt": "2020-02-11T15:01:46Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4ODk3OQ=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc0MTcyMw==", "bodyText": "I don't think we'd want to implement the full interface on both sides though - as we migrate endpoints to Conjure, we'll want to take them out of the legacy RPC protocol at least for clients (server resource might take a bit longer, granted, but the end state is to only have Conjure).", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380741723", "createdAt": "2020-02-18T15:23:32Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class NamespacedConjureTimelockService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4ODk3OQ=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjY1NDI3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxMDo1M1rOFoMtlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNToxNDozOVrOFrGQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NTYzNw==", "bodyText": "is there a better way of clearly delineating between the two? i.e. timelockResource and timelockService and why you'd want to pick one over the other?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377695637", "createdAt": "2020-02-11T15:10:53Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockServices.java", "diffHunk": "@@ -27,21 +27,24 @@\n     static TimeLockServices create(\n             TimestampService timestampService,\n             LockService lockService,\n-            AsyncTimelockResource timelockService,\n+            AsyncTimelockService timelockService,\n+            AsyncTimelockResource timelockResource,\n             LockWatchingResource lockWatchingResource,\n             TimestampManagementService timestampManagementService) {\n         return ImmutableTimeLockServices.builder()\n                 .timestampService(timestampService)\n                 .lockService(lockService)\n                 .timestampManagementService(timestampManagementService)\n                 .timelockService(timelockService)\n+                .timelockResource(timelockResource)\n                 .lockWatchingResource(lockWatchingResource)\n                 .build();\n     }\n \n     TimestampService getTimestampService();\n     LockService getLockService();\n-    AsyncTimelockResource getTimelockService();\n+    AsyncTimelockResource getTimelockResource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczNTYyOQ==", "bodyText": "Added a comment outlining that AsyncTimelockResource is Jersey specific.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380735629", "createdAt": "2020-02-18T15:14:39Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockServices.java", "diffHunk": "@@ -27,21 +27,24 @@\n     static TimeLockServices create(\n             TimestampService timestampService,\n             LockService lockService,\n-            AsyncTimelockResource timelockService,\n+            AsyncTimelockService timelockService,\n+            AsyncTimelockResource timelockResource,\n             LockWatchingResource lockWatchingResource,\n             TimestampManagementService timestampManagementService) {\n         return ImmutableTimeLockServices.builder()\n                 .timestampService(timestampService)\n                 .lockService(lockService)\n                 .timestampManagementService(timestampManagementService)\n                 .timelockService(timelockService)\n+                .timelockResource(timelockResource)\n                 .lockWatchingResource(lockWatchingResource)\n                 .build();\n     }\n \n     TimestampService getTimestampService();\n     LockService getLockService();\n-    AsyncTimelockResource getTimelockService();\n+    AsyncTimelockResource getTimelockResource();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5NTYzNw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc1NDE3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozMzozOVrOFoNrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNToxMjo0NVrOFrGLqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMTQ1Nw==", "bodyText": "since this is code and not routing, we should name it properly", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377711457", "createdAt": "2020-02-11T15:33:39Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczNDM3Nw==", "bodyText": "renamed to forNamespace", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380734377", "createdAt": "2020-02-18T15:12:45Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxMTQ1Nw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc5MDEyOnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0MjoxMFrOFoOB7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0MjoxMFrOFoOB7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzIyOQ==", "bodyText": "whilst this works it feels tacked on, and adds quite a bit of indirection complexity that I believe can be avoided.\nInside TimelockResource we have a map of the same signature and the same function thing.\nInstead of us passing functions everywhere, can we just create a class that deals with all of that similar to how LocalPaxosComponents does it? Then we just pass that around and we're good to go.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377717229", "createdAt": "2020-02-11T15:42:10Z", "author": {"login": "felixdesouza"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -159,16 +170,29 @@ private void createAndRegisterResources() {\n         registerPaxosResource();\n         registerExceptionMappers();\n \n+        Map<String, TimeLockServices> services = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc5OTMzOnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-api.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NDoxMlrOFoOHow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NDoxMlrOFoOHow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxODY5MQ==", "bodyText": "not sure how the generation works server side, but can we keep to our internal naming convention of calling it an *RpcClient?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377718691", "createdAt": "2020-02-11T15:44:12Z", "author": {"login": "felixdesouza"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer\n+      ConjureStartTransactionsResponse:\n+        fields:\n+          immutableTimestamp: LockImmutableTimestampResponse\n+          timestamps: PartitionedTimestamps\n+          lease: Lease\n+\n+services:\n+  ConjureTimelockService:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgzNjkwOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1MzoyMFrOFoOfLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1MzoyMFrOFoOfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNDcxNw==", "bodyText": "Took me a minute, but I think it would be useful to have a doc/comment explaining that this is there so that even if the server does not support undertow, it still responds to routes that were purposefully defined for conjure & undertow.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377724717", "createdAt": "2020-02-11T15:53:20Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjg0Njg2OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo1NTo0MFrOFoOllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowNzoxMVrOFrF9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNjM1Nw==", "bodyText": "so if I've understood correctly, for only the endpoints defined in conjure, regardless of whether they are in jersey or undertow, they will use this codepath for exception handling?\nespecially for jersey, it will never invoke the exception mappers for the below exceptions?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377726357", "createdAt": "2020-02-11T15:55:40Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {\n+        return handleExceptions(Futures.submitAsync(\n+                () -> Futures.immediateFuture(supplier.get()), MoreExecutors.directExecutor()));\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(ListenableFuture<T> future) {\n+        return FluentFuture.from(future)\n+                .catching(BlockingTimeoutException.class, timeout -> {\n+                    throw QosException.throttle(Duration.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMDY4OQ==", "bodyText": "Yes", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380730689", "createdAt": "2020-02-18T15:07:11Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {\n+        return handleExceptions(Futures.submitAsync(\n+                () -> Futures.immediateFuture(supplier.get()), MoreExecutors.directExecutor()));\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(ListenableFuture<T> future) {\n+        return FluentFuture.from(future)\n+                .catching(BlockingTimeoutException.class, timeout -> {\n+                    throw QosException.throttle(Duration.ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcyNjM1Nw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjg3MjgxOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowMToyMVrOFoO1tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowMDowOVrOFqshNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMDQ4NQ==", "bodyText": "let's have the Supplier<T> be a Callable<T> which is a bit more accurate.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377730485", "createdAt": "2020-02-11T16:01:21Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxMzkxMQ==", "bodyText": "I would rather not callers be able to use checked exceptions.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380313911", "createdAt": "2020-02-17T18:00:09Z", "author": {"login": "j-baker"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {\n+    private final RedirectRetryTargeter redirectRetryTargeter;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    @VisibleForTesting\n+    ConjureTimelockResource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        this.redirectRetryTargeter = redirectRetryTargeter;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return ConjureTimelockServiceEndpoints.of(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    public static ConjureTimelockService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, AsyncTimelockService> timelockServices) {\n+        return new JerseyAdapter(new ConjureTimelockResource(redirectRetryTargeter, timelockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<ConjureStartTransactionsResponse> startTransactions(\n+            AuthHeader authHeader, String namespace, ConjureStartTransactionsRequest request) {\n+        return handleExceptions(() -> {\n+            StartTransactionRequestV5 legacyRequest = ImmutableStartTransactionRequestV5.builder()\n+                    .requestId(request.getRequestId())\n+                    .requestorId(request.getRequestorId())\n+                    .numTransactions(request.getNumTransactions())\n+                    .build();\n+            StartTransactionResponseV5 response = tl(namespace).startTransactionsWithWatches(legacyRequest);\n+            return ConjureStartTransactionsResponse.builder()\n+                    .immutableTimestamp(response.immutableTimestamp())\n+                    .timestamps(response.timestamps())\n+                    .lease(response.lease())\n+                    .build();\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<LeaderTime> leaderTime(AuthHeader authHeader, String namespace) {\n+        return handleExceptions(() -> tl(namespace).leaderTime());\n+    }\n+\n+    private AsyncTimelockService tl(String namespace) {\n+        return timelockServices.apply(namespace);\n+    }\n+\n+    private <T> ListenableFuture<T> handleExceptions(Supplier<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMDQ4NQ=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjg3OTEzOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjowMjo1MFrOFoO5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNToxMTozMVrOFrGIjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMTQ3OA==", "bodyText": "similar vein as comment below: comment re this class represents a new set of endpoints that are defined via conjure.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377731478", "createdAt": "2020-02-11T16:02:50Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMzU4Mw==", "bodyText": "Won't mark them as new endpoints, because they're not 'new' once this PR merges - they're the status quo. I will deprecate TimeLockResource, however - to ensure that new methods end up in here.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380733583", "createdAt": "2020-02-18T15:11:31Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureTimelockResource.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Throwables;\n+import com.google.common.util.concurrent.FluentFuture;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceEndpoints;\n+import com.palantir.atlasdb.timelock.api.UndertowConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.ImmutableStartTransactionRequestV5;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.v2.StartTransactionRequestV5;\n+import com.palantir.lock.v2.StartTransactionResponseV5;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public final class ConjureTimelockResource implements UndertowConjureTimelockService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMTQ3OA=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjkwODc0OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxMDoxN1rOFoPMNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowOTo1NlrOFrGEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw==", "bodyText": "this refuses to match against /tl? not sure how hard it would be to ensure that we never hit this path accidentally, since it's an integration test\nI imagine we want to roll out undertow across more endpoints, what if all conjure endpoints started off with ~c? Or some starting symbol that won't match against this similar to how there is .internal for the paxos stuff? Then we don't have to change this line.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377736247", "createdAt": "2020-02-11T16:10:17Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -41,7 +41,7 @@\n import com.palantir.timestamp.TimestampManagementService;\n import com.palantir.timestamp.TimestampService;\n \n-@Path(\"/{namespace: [a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!tl)[a-zA-Z0-9_-]+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3MDM4OA==", "bodyText": "While we're here, just thought of something: if we decide we want to continue at this level, this should probably be (?!tl$) instead, in case someone decides to name their client beginning with tl. As written this doesn't match e.g. tlb or tldr which is probably not the intention. I realise we're going for very short paths in general for perf reasons.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r378170388", "createdAt": "2020-02-12T10:41:51Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -41,7 +41,7 @@\n import com.palantir.timestamp.TimestampManagementService;\n import com.palantir.timestamp.TimestampService;\n \n-@Path(\"/{namespace: [a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!tl)[a-zA-Z0-9_-]+}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxMzY2MA==", "bodyText": "Conjure endpoints cannot start with special characters.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380313660", "createdAt": "2020-02-17T17:59:22Z", "author": {"login": "j-baker"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -41,7 +41,7 @@\n import com.palantir.timestamp.TimestampManagementService;\n import com.palantir.timestamp.TimestampService;\n \n-@Path(\"/{namespace: [a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!tl)[a-zA-Z0-9_-]+}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMjQ5OQ==", "bodyText": "(have added $)", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380732499", "createdAt": "2020-02-18T15:09:56Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -41,7 +41,7 @@\n import com.palantir.timestamp.TimestampManagementService;\n import com.palantir.timestamp.TimestampService;\n \n-@Path(\"/{namespace: [a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!tl)[a-zA-Z0-9_-]+}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjI0Nw=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjkzMTExOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/ConjureTimelockResourceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxNTo0NlrOFoPaLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowOToyMlrOFrGC4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTgyMA==", "bodyText": "resource.leaderTime will never throw BlockingTimeoutException right? It will always give you back a failed ListenableFuture if I've read correctly", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377739820", "createdAt": "2020-02-11T16:15:46Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/ConjureTimelockResourceTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ConjureTimelockResourceTest {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer test\");\n+    private static final int REMOTE_PORT = 4321;\n+    private static final URL LOCAL = url(\"https://localhost:1234\");\n+    private static final URL REMOTE = url(\"https://localhost:\" + REMOTE_PORT);\n+    private static final RedirectRetryTargeter TARGETER = RedirectRetryTargeter.create(\n+            LOCAL,\n+            ImmutableList.of(LOCAL, REMOTE));\n+\n+    private static final String NAMESPACE = \"test\";\n+\n+    @Mock private AsyncTimelockService timelockService;\n+    @Mock private LeaderTime leaderTime;\n+\n+    private ConjureTimelockResource resource;\n+    private ConjureTimelockService service;\n+\n+    @Before\n+    public void before() {\n+        resource = new ConjureTimelockResource(TARGETER, unused -> timelockService);\n+        service = ConjureTimelockResource.jersey(TARGETER, unused -> timelockService);\n+        when(timelockService.leaderTime()).thenReturn(leaderTime);\n+    }\n+\n+    @Test\n+    public void canGetLeaderTime() {\n+        assertThat(Futures.getUnchecked(resource.leaderTime(AUTH_HEADER, NAMESPACE))).isEqualTo(leaderTime);\n+    }\n+\n+    @Test\n+    public void jerseyPropagatesExceptions() {\n+        when(resource.leaderTime(AUTH_HEADER, NAMESPACE)).thenThrow(new BlockingTimeoutException(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MjA4OQ==", "bodyText": "unless there's a generated form that's calling .get on it, then fine, but still feels a bit weird", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r377742089", "createdAt": "2020-02-11T16:19:13Z", "author": {"login": "felixdesouza"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/ConjureTimelockResourceTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ConjureTimelockResourceTest {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer test\");\n+    private static final int REMOTE_PORT = 4321;\n+    private static final URL LOCAL = url(\"https://localhost:1234\");\n+    private static final URL REMOTE = url(\"https://localhost:\" + REMOTE_PORT);\n+    private static final RedirectRetryTargeter TARGETER = RedirectRetryTargeter.create(\n+            LOCAL,\n+            ImmutableList.of(LOCAL, REMOTE));\n+\n+    private static final String NAMESPACE = \"test\";\n+\n+    @Mock private AsyncTimelockService timelockService;\n+    @Mock private LeaderTime leaderTime;\n+\n+    private ConjureTimelockResource resource;\n+    private ConjureTimelockService service;\n+\n+    @Before\n+    public void before() {\n+        resource = new ConjureTimelockResource(TARGETER, unused -> timelockService);\n+        service = ConjureTimelockResource.jersey(TARGETER, unused -> timelockService);\n+        when(timelockService.leaderTime()).thenReturn(leaderTime);\n+    }\n+\n+    @Test\n+    public void canGetLeaderTime() {\n+        assertThat(Futures.getUnchecked(resource.leaderTime(AUTH_HEADER, NAMESPACE))).isEqualTo(leaderTime);\n+    }\n+\n+    @Test\n+    public void jerseyPropagatesExceptions() {\n+        when(resource.leaderTime(AUTH_HEADER, NAMESPACE)).thenThrow(new BlockingTimeoutException(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTgyMA=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDczMjEzMQ==", "bodyText": "replaced with the failed listenable future", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380732131", "createdAt": "2020-02-18T15:09:22Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/ConjureTimelockResourceTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.net.HostAndPort;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockService;\n+import com.palantir.conjure.java.api.errors.QosException;\n+import com.palantir.leader.NotCurrentLeaderException;\n+import com.palantir.lock.impl.TooManyRequestsException;\n+import com.palantir.lock.remoting.BlockingTimeoutException;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ConjureTimelockResourceTest {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer test\");\n+    private static final int REMOTE_PORT = 4321;\n+    private static final URL LOCAL = url(\"https://localhost:1234\");\n+    private static final URL REMOTE = url(\"https://localhost:\" + REMOTE_PORT);\n+    private static final RedirectRetryTargeter TARGETER = RedirectRetryTargeter.create(\n+            LOCAL,\n+            ImmutableList.of(LOCAL, REMOTE));\n+\n+    private static final String NAMESPACE = \"test\";\n+\n+    @Mock private AsyncTimelockService timelockService;\n+    @Mock private LeaderTime leaderTime;\n+\n+    private ConjureTimelockResource resource;\n+    private ConjureTimelockService service;\n+\n+    @Before\n+    public void before() {\n+        resource = new ConjureTimelockResource(TARGETER, unused -> timelockService);\n+        service = ConjureTimelockResource.jersey(TARGETER, unused -> timelockService);\n+        when(timelockService.leaderTime()).thenReturn(leaderTime);\n+    }\n+\n+    @Test\n+    public void canGetLeaderTime() {\n+        assertThat(Futures.getUnchecked(resource.leaderTime(AUTH_HEADER, NAMESPACE))).isEqualTo(leaderTime);\n+    }\n+\n+    @Test\n+    public void jerseyPropagatesExceptions() {\n+        when(resource.leaderTime(AUTH_HEADER, NAMESPACE)).thenThrow(new BlockingTimeoutException(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczOTgyMA=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzIyMDE5OnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-api.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTowODo1NVrOFpL6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOToyMzo0MlrOFq6yRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMTAyMQ==", "bodyText": "is this for some kinda rate limiting?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r378731021", "createdAt": "2020-02-13T09:08:55Z", "author": {"login": "jkozlowski"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU0NzY1Mg==", "bodyText": "Nvm, I see the StartIdentifiedAtlasDbTransactionRequest has this", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380547652", "createdAt": "2020-02-18T09:23:42Z", "author": {"login": "jkozlowski"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMTAyMQ=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzIyNTQ1OnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-api.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMDozMVrOFpL9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNDo1MFrOFrL06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMTg2MQ==", "bodyText": "@gmaretic how easily can we retrofit lock watch pieces here? Can we do it afterwards without adding startTransactionsV2?", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r378731861", "createdAt": "2020-02-13T09:10:31Z", "author": {"login": "jkozlowski"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjg1OA==", "bodyText": "I think I can answer this: yes, you can just add the lock watches to be registered / lock watch state to the request/response type respectively.", "url": "https://github.com/palantir/atlasdb/pull/4545#discussion_r380826858", "createdAt": "2020-02-18T17:34:50Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    NanoTime:\n+      base-type: safelong\n+      external:\n+        java: com.palantir.common.time.NanoTime\n+    PartitionedTimestamps:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.PartitionedTimestamps\n+    LockImmutableTimestampResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LockImmutableTimestampResponse\n+    Lease:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.Lease\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      ConjureStartTransactionsRequest:\n+        fields:\n+          requestId: uuid\n+          requestorId: uuid\n+          numTransactions: integer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMTg2MQ=="}, "originalCommit": {"oid": "41eda4d4c00ab799a645c774860fe102cde6e69b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2274, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}