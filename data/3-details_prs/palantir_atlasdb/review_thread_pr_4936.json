{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTg4MTU4", "number": 4936, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoyNjozOVrOEXL9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNToxNDowOVrOEXQjaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzQ4NzI3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/SweepOutcomeMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjoyNjozOVrOG-1dUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDo0MDo1NlrOG-7LNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MDc1NQ==", "bodyText": "can we have tests for this change?", "url": "https://github.com/palantir/atlasdb/pull/4936#discussion_r468540755", "createdAt": "2020-08-11T12:26:39Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/SweepOutcomeMetrics.java", "diffHunk": "@@ -71,15 +86,24 @@ public void registerOccurrenceOf(SweepOutcome outcome) {\n             MetricsManager manager,\n             List<SweepOutcome> outcomes,\n             Map<String, String> additionalTags,\n-            Class<?> forClass) {\n+            Class<?> forClass,\n+            Optional<MetricPublicationFilter> filter) {\n         return Suppliers.memoize(() -> {\n             Metrics metrics = ImmutableSweepOutcomeMetrics.Metrics.builder().build();\n-            outcomes.forEach(outcome -> manager.registerOrGet(forClass, AtlasDbMetricNames.SWEEP_OUTCOME,\n-                    () -> getOutcomeCount(metrics, outcome),\n-                    ImmutableMap.<String, String>builder()\n-                            .putAll(additionalTags)\n-                            .put(AtlasDbMetricNames.TAG_OUTCOME, outcome.name())\n-                            .build()));\n+            outcomes.forEach(outcome -> {\n+                ImmutableMap<String, String> tags = ImmutableMap.<String, String>builder()\n+                        .putAll(additionalTags)\n+                        .put(AtlasDbMetricNames.TAG_OUTCOME, outcome.name())\n+                        .build();\n+                filter.ifPresent(presentFilter -> manager.addMetricFilter(\n+                        forClass,\n+                        AtlasDbMetricNames.SWEEP_OUTCOME,\n+                        tags,\n+                        filter.get()));\n+                manager.registerOrGet(forClass, AtlasDbMetricNames.SWEEP_OUTCOME,\n+                        () -> getOutcomeCount(metrics, outcome),\n+                        tags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550da3b629d867113bc073d813b10cf60754a2d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYzNDQyMQ==", "bodyText": "Argh! Well spotted, I forgot to push the commit with the tests :(", "url": "https://github.com/palantir/atlasdb/pull/4936#discussion_r468634421", "createdAt": "2020-08-11T14:40:56Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/SweepOutcomeMetrics.java", "diffHunk": "@@ -71,15 +86,24 @@ public void registerOccurrenceOf(SweepOutcome outcome) {\n             MetricsManager manager,\n             List<SweepOutcome> outcomes,\n             Map<String, String> additionalTags,\n-            Class<?> forClass) {\n+            Class<?> forClass,\n+            Optional<MetricPublicationFilter> filter) {\n         return Suppliers.memoize(() -> {\n             Metrics metrics = ImmutableSweepOutcomeMetrics.Metrics.builder().build();\n-            outcomes.forEach(outcome -> manager.registerOrGet(forClass, AtlasDbMetricNames.SWEEP_OUTCOME,\n-                    () -> getOutcomeCount(metrics, outcome),\n-                    ImmutableMap.<String, String>builder()\n-                            .putAll(additionalTags)\n-                            .put(AtlasDbMetricNames.TAG_OUTCOME, outcome.name())\n-                            .build()));\n+            outcomes.forEach(outcome -> {\n+                ImmutableMap<String, String> tags = ImmutableMap.<String, String>builder()\n+                        .putAll(additionalTags)\n+                        .put(AtlasDbMetricNames.TAG_OUTCOME, outcome.name())\n+                        .build();\n+                filter.ifPresent(presentFilter -> manager.addMetricFilter(\n+                        forClass,\n+                        AtlasDbMetricNames.SWEEP_OUTCOME,\n+                        tags,\n+                        filter.get()));\n+                manager.registerOrGet(forClass, AtlasDbMetricNames.SWEEP_OUTCOME,\n+                        () -> getOutcomeCount(metrics, outcome),\n+                        tags);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0MDc1NQ=="}, "originalCommit": {"oid": "0550da3b629d867113bc073d813b10cf60754a2d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODIzOTEyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/sweep/metrics/SweepOutcomeMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNToxNDowOVrOG-8reA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNToxNDowOVrOG-8reA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1OTA2NA==", "bodyText": "Sorry i din't understand why you need to register on SweepOutcomeMetrics at all/ with a different metrics manager?", "url": "https://github.com/palantir/atlasdb/pull/4936#discussion_r468659064", "createdAt": "2020-08-11T15:14:09Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/sweep/metrics/SweepOutcomeMetricsTest.java", "diffHunk": "@@ -112,4 +113,23 @@ public void targetedSweepDoesNotRegisterExcludedOutcomes() {\n                 .filter(outcome -> !SweepOutcomeMetrics.TARGETED_OUTCOMES.contains(outcome))\n                 .forEach(outcome -> assertThat(metricsManager).hasNotRegisteredTargetedOutcome(THOROUGH, outcome));\n     }\n+\n+    @Test\n+    public void canFilterOutUninterestingMetrics() {\n+        MetricsManager differentManager = MetricsManagers.createAlwaysSafeAndFilteringForTests();\n+        SweepOutcomeMetrics.registerTargeted(\n+                metricsManager,\n+                ImmutableMap.of(\"strategy\", \"thorough\"),\n+                () -> false);\n+        TargetedSweepMetrics targetedMetrics = TargetedSweepMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92299b00a200759e58988b62e17bf39adbd4dfd2"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2776, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}