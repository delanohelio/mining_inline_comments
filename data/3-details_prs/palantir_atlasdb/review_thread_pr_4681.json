{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0Njg5MDE1", "number": 4681, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzozOFrODsCWQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxNDozMlrODsCfGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAyNDAxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowNzozOFrOF8uW9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowNzozN1rOF8wTTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODQyMg==", "bodyText": "Do you need this try-catch?", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399218422", "createdAt": "2020-03-27T12:07:38Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->\n+                    validationToTransactionManager.runTaskWithRetry(t2 -> {\n+                                RangeRequest range = RangeRequest.builder()\n+                                        .batchHint(limit)\n+                                        .startRowInclusive(nextRowName)\n+                                        .build();\n+                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                            }\n+                    ));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MDI1NA==", "bodyText": "gradle complains if I don't", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399250254", "createdAt": "2020-03-27T13:07:37Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->\n+                    validationToTransactionManager.runTaskWithRetry(t2 -> {\n+                                RangeRequest range = RangeRequest.builder()\n+                                        .batchHint(limit)\n+                                        .startRowInclusive(nextRowName)\n+                                        .build();\n+                                return validateAndGetNextRowName(table, limit, t1, t2, range);\n+                            }\n+                    ));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODQyMg=="}, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAyNjcxOnYy", "diffSide": "LEFT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowODoyMFrOF8uYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowODoyMFrOF8uYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxODgwOA==", "bodyText": "Can you keep this comment, it's pretty important.", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399218808", "createdAt": "2020-03-27T12:08:20Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAzMTA3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjowOTozOFrOF8ubEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMDozNlrOF8udAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTQ3Mg==", "bodyText": "Feels like creating this range should belong in validateAndGetNextRowName", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219472", "createdAt": "2020-03-27T12:09:38Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->\n+                    validationToTransactionManager.runTaskWithRetry(t2 -> {\n+                                RangeRequest range = RangeRequest.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTk2OQ==", "bodyText": "Actually, it's probably fine.", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219969", "createdAt": "2020-03-27T12:10:36Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->\n+                    validationToTransactionManager.runTaskWithRetry(t2 -> {\n+                                RangeRequest range = RangeRequest.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTQ3Mg=="}, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAzMjY4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMDowMVrOF8ub6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMDowMVrOF8ub6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTY4OQ==", "bodyText": "Please retain the comment on why this is runTaskWithRetry: it's non-obvious.", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219689", "createdAt": "2020-03-27T12:10:01Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTAzNDAwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMDoyNlrOF8uctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxMDoyNlrOF8uctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxOTg5NQ==", "bodyText": "nit: validateNextBatchOfRows / startRow for the param?", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399219895", "createdAt": "2020-03-27T12:10:26Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTA0NjY3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoxNDozMlrOF8ukqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMToyODozNFrOGwkhMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTkyOA==", "bodyText": "This change means that with default batch size, we'll do a transaction each 100 rows, so it will be probably quite slow, but probably fine.", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r399221928", "createdAt": "2020-03-27T12:14:32Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4MzE1Mw==", "bodyText": "This should be fine, most people override this anyway. And it's run with embedded timelock usually, so overhead should be minimal.", "url": "https://github.com/palantir/atlasdb/pull/4681#discussion_r453583153", "createdAt": "2020-07-13T11:28:34Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/schema/KeyValueServiceValidator.java", "diffHunk": "@@ -114,31 +113,27 @@ private void validateTables(Set<TableReference> tables) {\n \n     private void validateTable(final TableReference table) {\n         final int limit = getBatchSize(table);\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationFromTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t1 -> {\n-                    validateTable(table, limit, t1);\n-                    return null;\n-                });\n+        byte[] nextRowName = new byte[0];\n+        while (nextRowName != null) {\n+            nextRowName = validateNextRow(table, limit, nextRowName);\n+        }\n         KeyValueServiceMigratorUtils\n                 .processMessage(messageProcessor, \"Validated \" + table, KvsMigrationMessageLevel.INFO);\n     }\n \n-    private void validateTable(final TableReference table, final int limit, final Transaction t1) {\n-        // read only, but need to use a write tx in case the source table has SweepStrategy.THOROUGH\n-        validationToTransactionManager.runTaskWithRetry(\n-                (TransactionTask<Map<Cell, byte[]>, RuntimeException>) t2 -> {\n-                    validateTable(table, limit, t1, t2);\n-                    return null;\n-                });\n-    }\n-\n-    private void validateTable(TableReference table, int limit, Transaction t1, Transaction t2) {\n-        RangeRequest.Builder builder = RangeRequest.builder().batchHint(limit);\n-        byte[] nextRowName = new byte[0];\n-        while (nextRowName != null) {\n-            RangeRequest range = builder.startRowInclusive(nextRowName).build();\n-            nextRowName = validateAndGetNextRowName(table, limit, t1, t2, range);\n+    private byte[] validateNextRow(TableReference table, int limit, byte[] nextRowName) {\n+        try {\n+            return validationFromTransactionManager.runTaskWithRetry(t1 ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMTkyOA=="}, "originalCommit": {"oid": "5a2bd102d0a0d52ea3b89322ddba5b711540379c"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3020, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}