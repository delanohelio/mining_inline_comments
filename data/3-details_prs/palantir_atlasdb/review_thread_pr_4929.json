{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMzQ0MTIw", "number": 4929, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowMzoyMlrOEV17XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyOTowNlrOEV2oxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzM5MTAxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowMzoyMlrOG80_0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyODoxMlrOG82Exw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNjA0OA==", "bodyText": "Might be good to check the ordering here (~we can make a SortedSet copy of this - ~Cell compare is based on the byte order of rows and columns - and then build a List rather than a Map of returnedEntries and check the ordering)", "url": "https://github.com/palantir/atlasdb/pull/4929#discussion_r466436048", "createdAt": "2020-08-06T14:03:22Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.keyvalue.api.BatchColumnRangeSelection;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.RowColumnRangeIterator;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.Value;\n+import com.palantir.atlasdb.keyvalue.impl.InMemoryKeyValueService;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GetRowsColumnRangeIteratorTest {\n+\n+    private static final TableReference TABLE_REFERENCE = TableReference.createWithEmptyNamespace(\"test\");\n+    private static final byte[] ROW = \"row\".getBytes(StandardCharsets.UTF_8);\n+    private static final int BATCH_SIZE = 10;\n+    public static final BatchColumnRangeSelection COLUMN_RANGE_SELECTION =\n+            BatchColumnRangeSelection.create(null, null, BATCH_SIZE);\n+\n+    private final KeyValueService kvs = new InMemoryKeyValueService(true);\n+    private final ColumnRangeBatchProvider batchProvider = new ColumnRangeBatchProvider(\n+            kvs,\n+            TABLE_REFERENCE,\n+            ROW,\n+            COLUMN_RANGE_SELECTION,\n+            Long.MAX_VALUE);\n+\n+    @Test\n+    public void ifBatchIsEmptyNoValidateCallsAreMade() {\n+        Runnable validationStep = mock(Runnable.class);\n+        Iterator<Map.Entry<Cell, byte[]>> iterator = createIteratorUnderTest(validationStep);\n+\n+        List<Map.Entry<Cell, byte[]>> entries = ImmutableList.copyOf(iterator);\n+\n+        assertThat(entries).isEmpty();\n+        verifyNoInteractions(validationStep);\n+    }\n+\n+    @Test\n+    public void firstBatchHasNoValidation() {\n+        Runnable validationStep = mock(Runnable.class);\n+        Set<Cell> puts = putColumns(BATCH_SIZE + 5);\n+\n+        int limit = BATCH_SIZE - 1;\n+        Iterator<Map.Entry<Cell, byte[]>> iteratorUnderTest = createIteratorUnderTest(validationStep);\n+\n+        // still under the first batch size limit\n+        List<Map.Entry<Cell, byte[]>> firstBatchBarOne =\n+                ImmutableList.copyOf(Iterators.limit(iteratorUnderTest, limit));\n+        verifyNoInteractions(validationStep);\n+\n+        // the last element in the first batch is still on the first batch\n+        Map.Entry<Cell, byte[]> lastInFirstBatch = Iterators.getNext(iteratorUnderTest, null);\n+        assertThat(lastInFirstBatch).isNotNull();\n+        verifyNoInteractions(validationStep);\n+\n+        // consume one more i.e. batch size amount\n+        Map.Entry<Cell, byte[]> firstInSecondBatch = Iterators.getNext(iteratorUnderTest, null);\n+        assertThat(firstInSecondBatch).isNotNull();\n+        verify(validationStep, times(1)).run();\n+\n+        // validation step is called per batch\n+        ImmutableList<Map.Entry<Cell, byte[]>> restOfSecondBatch = ImmutableList.copyOf(iteratorUnderTest);\n+        verifyNoMoreInteractions(validationStep);\n+\n+        Map<Cell, byte[]> returnedEntries = ImmutableMap.<Cell, byte[]>builder()\n+                .putAll(firstBatchBarOne)\n+                .put(lastInFirstBatch)\n+                .put(firstInSecondBatch)\n+                .putAll(restOfSecondBatch)\n+                .build();\n+\n+\n+        assertThat(returnedEntries.keySet())\n+                .as(\"we can read all that we wrote\")\n+                .isEqualTo(puts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8212f5d9b01591c2bf2b1fe4edcb4f84d2af42"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MzcwMw==", "bodyText": "maybe something like\n        List<Cell> cellsReadInOrder = Lists.newArrayList();\n        cellsReadInOrder.addAll(firstBatchBarOne.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n        cellsReadInOrder.add(lastInFirstBatch.getKey());\n        cellsReadInOrder.add(firstInSecondBatch.getKey());\n        cellsReadInOrder.addAll(restOfSecondBatch.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n\n        assertThat(cellsReadInOrder)\n                .as(\"we can read all that we wrote\")\n                .hasSameElementsAs(puts);\n        assertThat(cellsReadInOrder)\n                .as(\"iterator returns cells back in sorted order\")\n                .isSorted();", "url": "https://github.com/palantir/atlasdb/pull/4929#discussion_r466453703", "createdAt": "2020-08-06T14:28:12Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.keyvalue.api.BatchColumnRangeSelection;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.RowColumnRangeIterator;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.Value;\n+import com.palantir.atlasdb.keyvalue.impl.InMemoryKeyValueService;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GetRowsColumnRangeIteratorTest {\n+\n+    private static final TableReference TABLE_REFERENCE = TableReference.createWithEmptyNamespace(\"test\");\n+    private static final byte[] ROW = \"row\".getBytes(StandardCharsets.UTF_8);\n+    private static final int BATCH_SIZE = 10;\n+    public static final BatchColumnRangeSelection COLUMN_RANGE_SELECTION =\n+            BatchColumnRangeSelection.create(null, null, BATCH_SIZE);\n+\n+    private final KeyValueService kvs = new InMemoryKeyValueService(true);\n+    private final ColumnRangeBatchProvider batchProvider = new ColumnRangeBatchProvider(\n+            kvs,\n+            TABLE_REFERENCE,\n+            ROW,\n+            COLUMN_RANGE_SELECTION,\n+            Long.MAX_VALUE);\n+\n+    @Test\n+    public void ifBatchIsEmptyNoValidateCallsAreMade() {\n+        Runnable validationStep = mock(Runnable.class);\n+        Iterator<Map.Entry<Cell, byte[]>> iterator = createIteratorUnderTest(validationStep);\n+\n+        List<Map.Entry<Cell, byte[]>> entries = ImmutableList.copyOf(iterator);\n+\n+        assertThat(entries).isEmpty();\n+        verifyNoInteractions(validationStep);\n+    }\n+\n+    @Test\n+    public void firstBatchHasNoValidation() {\n+        Runnable validationStep = mock(Runnable.class);\n+        Set<Cell> puts = putColumns(BATCH_SIZE + 5);\n+\n+        int limit = BATCH_SIZE - 1;\n+        Iterator<Map.Entry<Cell, byte[]>> iteratorUnderTest = createIteratorUnderTest(validationStep);\n+\n+        // still under the first batch size limit\n+        List<Map.Entry<Cell, byte[]>> firstBatchBarOne =\n+                ImmutableList.copyOf(Iterators.limit(iteratorUnderTest, limit));\n+        verifyNoInteractions(validationStep);\n+\n+        // the last element in the first batch is still on the first batch\n+        Map.Entry<Cell, byte[]> lastInFirstBatch = Iterators.getNext(iteratorUnderTest, null);\n+        assertThat(lastInFirstBatch).isNotNull();\n+        verifyNoInteractions(validationStep);\n+\n+        // consume one more i.e. batch size amount\n+        Map.Entry<Cell, byte[]> firstInSecondBatch = Iterators.getNext(iteratorUnderTest, null);\n+        assertThat(firstInSecondBatch).isNotNull();\n+        verify(validationStep, times(1)).run();\n+\n+        // validation step is called per batch\n+        ImmutableList<Map.Entry<Cell, byte[]>> restOfSecondBatch = ImmutableList.copyOf(iteratorUnderTest);\n+        verifyNoMoreInteractions(validationStep);\n+\n+        Map<Cell, byte[]> returnedEntries = ImmutableMap.<Cell, byte[]>builder()\n+                .putAll(firstBatchBarOne)\n+                .put(lastInFirstBatch)\n+                .put(firstInSecondBatch)\n+                .putAll(restOfSecondBatch)\n+                .build();\n+\n+\n+        assertThat(returnedEntries.keySet())\n+                .as(\"we can read all that we wrote\")\n+                .isEqualTo(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNjA0OA=="}, "originalCommit": {"oid": "cd8212f5d9b01591c2bf2b1fe4edcb4f84d2af42"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzUwNzI1OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4929.v2.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyOTowNlrOG82Hiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyOTowNlrOG82Hiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NDQxMQ==", "bodyText": "nit: when reading the iterator that is returned by getRowsColumnRangeIterator.", "url": "https://github.com/palantir/atlasdb/pull/4929#discussion_r466454411", "createdAt": "2020-08-06T14:29:06Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4929.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: fix\n+fix:\n+  description: There are now fewer `getLeaderTime` calls when calling `getRowsColumnRangeIterator`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd8212f5d9b01591c2bf2b1fe4edcb4f84d2af42"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2767, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}