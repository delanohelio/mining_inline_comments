{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzQwMjE1", "number": 4661, "title": "Async Metrics", "bodyText": "Goals (and why):\nAs part of some of the conjure-undertow changes, async versions of requests were added. The sad part is, the metrics as we know currently are off since they measure the time it takes to be given back the ListenableFuture vs how long the ListenableFuture takes to complete.\nIdeally this would go in https://github.com/palantir/tritium, but given that we've hacked together the TaggedMetricsInvocationHandler for our own (nefarious?) gains, I didn't want to unwind that change as I'm working on Timelock Partitioning etc. @schlosna for SA. My proposed impl would be that it goes in ByteBuddyInstrumentationAdvice or InvocationEventProxy then every InvocationHandler gets async metrics stuff for free!\nImplementation Description (bullets):\n\nBackport some of the metrics changes in the TaggedMetricsInvocationHandler wrt metric name cache etc. Since the metric name doesn't change for most invocations we're wasting time doing the string concat and the allocations for MetricName. For the ones with the extra tags, have a specialised cache for those calls.\nCheck if the return type is ListenableFuture and if so, add a listener that will update the metric. Otherwise we leave it as is.\n\nTesting (What was existing testing like?  What have you done to improve it?):\n\nHard to test properly since we can't change the future that gets returned, we can only act on it => we can have a race condition where if we were to wait for the future to be done, it's not necessarily the case that the metrics would have been tracked correctly. Only fix I see for this is in upstream in tritium.\n\nConcerns (what feedback would you like?):\nWhere should we start reviewing?:\n\nTaggedMetricsEventInvocationHandler\nAtlasDbMetrics\n\nPriority (whenever / two weeks / yesterday):\nASAP! Some metrics in our internal dashboard is a lie until fixed.", "createdAt": "2020-03-23T11:56:19Z", "url": "https://github.com/palantir/atlasdb/pull/4661", "merged": true, "mergeCommit": {"oid": "32e1167df5877fc83316a714ab6b715af3b4b963"}, "closed": true, "closedAt": "2020-03-23T17:45:04Z", "author": {"login": "felixdesouza"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPOIcBAH2gAyMzkyMzQwMjE1OjMyOTM4M2I4ZmFhYWU1MDBlYzM1YTRkMzc0NTQ1ZGIxMTU4YTlmNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQg2J3gFqTM3OTU5NzIwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "329383b8faaae500ec35a4d374545db1158a9f77", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/329383b8faaae500ec35a4d374545db1158a9f77", "committedDate": "2020-03-19T16:02:50Z", "message": "Add Timer cache to metrics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87de042daf677fe8b444b1b790cef856e649b262", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/87de042daf677fe8b444b1b790cef856e649b262", "committedDate": "2020-03-19T17:53:56Z", "message": "Async Metrics Handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/fca4191787bb9fbcef87952ed2f02bc163fa2cfb", "committedDate": "2020-03-19T18:18:11Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1915b554c253465d4488bca0be1d3fc9b757c1b2", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/1915b554c253465d4488bca0be1d3fc9b757c1b2", "committedDate": "2020-03-23T11:43:24Z", "message": "Get rid of random block."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3691dfcdecebe6f3cae721c912ca60c0410b3f20", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/3691dfcdecebe6f3cae721c912ca60c0410b3f20", "committedDate": "2020-03-19T18:18:11Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDYxNjU5", "url": "https://github.com/palantir/atlasdb/pull/4661#pullrequestreview-379461659", "createdAt": "2020-03-23T14:07:21Z", "commit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzoyMVrOF6HADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNToyM1rOF6Hzug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQyOA==", "bodyText": "This implementation is very nearly identical to the one below - is there a common method that can be extracted?\nAlso, below you factored out String name = MetricRegistry.name(serviceInterface);, but not in this block.", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396476428", "createdAt": "2020-03-23T14:07:21Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/AtlasDbMetrics.java", "diffHunk": "@@ -71,18 +71,27 @@ private AtlasDbMetrics() {}\n         return instrument(metricRegistry, serviceInterface, service, name, instrumentAllMethods());\n     }\n \n+    public static <T, U extends T> T instrumentWithTaggedMetrics(\n+            TaggedMetricRegistry taggedMetrics,\n+            Class<T> serviceInterface,\n+            U service) {\n+        return Instrumentation.builder(serviceInterface, service)\n+                .withHandler(new TaggedMetricsInvocationEventHandler(\n+                        taggedMetrics,\n+                        MetricRegistry.name(serviceInterface)))\n+                .withPerformanceTraceLogging()\n+                .build();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4MDE1Nw==", "bodyText": "Repeated code from below; is there a better way this can be done?", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396480157", "createdAt": "2020-03-23T14:12:40Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TaggedMetricsInvocationEventHandler.java", "diffHunk": "@@ -48,7 +58,26 @@\n     private final TaggedMetricRegistry taggedMetricRegistry;\n     private final String serviceName;\n \n-    private final Function<InvocationContext, Map<String, String>> tagFunction;\n+    private final Optional<Function<InvocationContext, Map<String, String>>> tagFunction;\n+\n+    @Nullable\n+    private final Function<Method, Timer> onSuccessTimerMappingFunctionUntagged;\n+    private final ConcurrentMap<Method, Timer> untaggedTimerCache = Maps.newConcurrentMap();\n+\n+    @Nullable\n+    private final Function<MethodWithExtraTags, Timer> onSuccessTimerMappingFunctionExtraTags;\n+    private final ConcurrentMap<MethodWithExtraTags, Timer> extraTagsTimerCache = Maps.newConcurrentMap();\n+\n+    public TaggedMetricsInvocationEventHandler(TaggedMetricRegistry taggedMetricRegistry, String serviceName) {\n+        super(InstrumentationUtils.getEnabledSupplier(serviceName));\n+        this.taggedMetricRegistry = Preconditions.checkNotNull(taggedMetricRegistry, \"metricRegistry\");\n+        this.serviceName = Preconditions.checkNotNull(serviceName, \"serviceName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NDIyOA==", "bodyText": "It looks like you are casting result from Object to ListenableFuture<?>; can you do this without a check? (It looks to me like the check above is checking context's return type, but I don't know if that is guaranteed to be the same as the type of result).", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396484228", "createdAt": "2020-03-23T14:18:11Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TaggedMetricsInvocationEventHandler.java", "diffHunk": "@@ -72,12 +106,54 @@ public void onSuccess(@Nullable InvocationContext context, @Nullable Object resu\n             return;\n         }\n \n+        if (result != null && ListenableFuture.class.isAssignableFrom(context.getMethod().getReturnType())) {\n+            Futures.addCallback((ListenableFuture<?>) result, new FutureCallback<Object>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4NjM4Mw==", "bodyText": "nit: unnecessary diff?", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396486383", "createdAt": "2020-03-23T14:21:01Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TaggedMetricsInvocationEventHandler.java", "diffHunk": "@@ -95,7 +171,6 @@ public void onFailure(@Nullable InvocationContext context, @Nonnull Throwable ca\n         taggedMetricRegistry.meter(MetricName.builder().safeName(\n                 MetricRegistry.name(failuresMetricName, cause.getClass().getName())).build())\n                 .mark();\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODY3NA==", "bodyText": "Should there be two of the exact same statement here? If so, please may you leave a comment as to why?\nnit: maybe also group them together w.r.t spacing?", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396488674", "createdAt": "2020-03-23T14:24:02Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/AtlasDbMetricsTest.java", "diffHunk": "@@ -91,6 +122,77 @@ public void instrumentWithCustomNameAll() {\n         assertMethodInstrumented(MetricRegistry.name(CUSTOM_METRIC_NAME, PING_NOT_TIMED_METHOD), service::pingNotTimed);\n     }\n \n+    @Test\n+    public void instrumentTaggedAsyncFunction() throws InterruptedException, ExecutionException {\n+        AsyncTestService asyncTestService = AtlasDbMetrics.instrumentWithTaggedMetrics(taggedMetrics,\n+                AsyncTestService.class, this.asyncTestService);\n+\n+        String asyncPingMetricName = MetricRegistry.name(AsyncTestService.class, \"asyncPing\");\n+        assertTimerNotRegistered(asyncPingMetricName);\n+\n+        List<ListenableFuture<String>> futures = IntStream.range(0, 10)\n+                .mapToObj($ -> asyncTestService.asyncPing())\n+                .collect(Collectors.toList());\n+\n+        Instant now = Instant.now();\n+        MetricName metricName = MetricName.builder().safeName(asyncPingMetricName).build();\n+        ListenableFuture<Boolean> done = Futures.whenAllSucceed(futures).call(() -> {\n+            // have to do it this because we can't edit the future we get back and it's only a callback as opposed to a\n+            // transformed future\n+            Awaitility.await()\n+                    .atMost(ASYNC_DURATION_TTL.toMillis(), TimeUnit.MILLISECONDS)\n+                    .until(() -> taggedMetrics.timer(metricName).getSnapshot().size() > 0);\n+            return true;\n+        }, MoreExecutors.directExecutor());\n+\n+        assertThat(done.get()).isEqualTo(true);\n+\n+        assertThat(done.get()).isEqualTo(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4OTY1OA==", "bodyText": "Copied code from above - can a common method be factored out?", "url": "https://github.com/palantir/atlasdb/pull/4661#discussion_r396489658", "createdAt": "2020-03-23T14:25:23Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/AtlasDbMetricsTest.java", "diffHunk": "@@ -91,6 +122,77 @@ public void instrumentWithCustomNameAll() {\n         assertMethodInstrumented(MetricRegistry.name(CUSTOM_METRIC_NAME, PING_NOT_TIMED_METHOD), service::pingNotTimed);\n     }\n \n+    @Test\n+    public void instrumentTaggedAsyncFunction() throws InterruptedException, ExecutionException {\n+        AsyncTestService asyncTestService = AtlasDbMetrics.instrumentWithTaggedMetrics(taggedMetrics,\n+                AsyncTestService.class, this.asyncTestService);\n+\n+        String asyncPingMetricName = MetricRegistry.name(AsyncTestService.class, \"asyncPing\");\n+        assertTimerNotRegistered(asyncPingMetricName);\n+\n+        List<ListenableFuture<String>> futures = IntStream.range(0, 10)\n+                .mapToObj($ -> asyncTestService.asyncPing())\n+                .collect(Collectors.toList());\n+\n+        Instant now = Instant.now();\n+        MetricName metricName = MetricName.builder().safeName(asyncPingMetricName).build();\n+        ListenableFuture<Boolean> done = Futures.whenAllSucceed(futures).call(() -> {\n+            // have to do it this because we can't edit the future we get back and it's only a callback as opposed to a\n+            // transformed future\n+            Awaitility.await()\n+                    .atMost(ASYNC_DURATION_TTL.toMillis(), TimeUnit.MILLISECONDS)\n+                    .until(() -> taggedMetrics.timer(metricName).getSnapshot().size() > 0);\n+            return true;\n+        }, MoreExecutors.directExecutor());\n+\n+        assertThat(done.get()).isEqualTo(true);\n+\n+        assertThat(done.get()).isEqualTo(true);\n+        assertThat(Instant.now())\n+                .as(\"in the event of scheduling issues, and despite having 10 concurrent futures, we complete \"\n+                        + \"everything with 2*ttl\")\n+                .isBefore(now.plus(ASYNC_DURATION_TTL.plus(ASYNC_DURATION_TTL)));\n+        Snapshot snapshot = taggedMetrics.timer(metricName).getSnapshot();\n+        assertThat(Duration.ofNanos(snapshot.getMin())).isGreaterThan(ASYNC_DURATION_TTL);\n+        assertThat(snapshot.size()).isEqualTo(10);\n+    }\n+\n+    @Test\n+    public void instrumentTaggedAsyncFunctionWithExtraTags() throws InterruptedException, ExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca4191787bb9fbcef87952ed2f02bc163fa2cfb"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4ab569e70ae4621a2827c71e0620e2a71e9af2", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/8b4ab569e70ae4621a2827c71e0620e2a71e9af2", "committedDate": "2020-03-23T14:37:22Z", "message": "PR comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff79c62cd1d713f8cc70a8e2e0aea1960b6da301", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/ff79c62cd1d713f8cc70a8e2e0aea1960b6da301", "committedDate": "2020-03-23T14:59:23Z", "message": "Refactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f50362196774e2f03730894ec5a05bf8c4d406c7", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/f50362196774e2f03730894ec5a05bf8c4d406c7", "committedDate": "2020-03-23T15:04:47Z", "message": "Add extra check."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401bb09ce92e73df669be0f0b07d84d7e30acdd6", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/401bb09ce92e73df669be0f0b07d84d7e30acdd6", "committedDate": "2020-03-23T15:25:10Z", "message": "Revert refactor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTk3MjAy", "url": "https://github.com/palantir/atlasdb/pull/4661#pullrequestreview-379597202", "createdAt": "2020-03-23T16:24:59Z", "commit": {"oid": "401bb09ce92e73df669be0f0b07d84d7e30acdd6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2987, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}