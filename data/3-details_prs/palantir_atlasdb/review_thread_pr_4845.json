{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTkzOTQw", "number": 4845, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1MzozNVrOEGrniQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0MzoxMlrOEHmoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDQxNTQ1OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1MzozNVrOGloKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1MzozNVrOGloKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwODQ5OQ==", "bodyText": "This is fine, but we should look at using the new Dialogue services / AtlasDbDialogueServiceProvider.", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442108499", "createdAt": "2020-06-18T09:53:35Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -552,6 +551,48 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    private TimeLockFeedbackBackgroundTask getTimeLockFeedbackBackgroundTask(\n+            @Output List<AutoCloseable> closeables,\n+            AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig) {\n+        Supplier<List<TimeLockClientFeedbackService>> timeLockClientFeedbackServicesSupplier\n+                = getTimeLockClientFeedbackServices(config,\n+                runtimeConfig, userAgent());\n+        return initializeCloseable(\n+                () -> TimeLockFeedbackBackgroundTask.create(\n+                        globalTaggedMetricRegistry(),\n+                        () -> AtlasDbVersion.readVersion(),\n+                        serviceName(),\n+                        timeLockClientFeedbackServicesSupplier), closeables);\n+    }\n+\n+    @VisibleForTesting\n+    static Supplier<List<TimeLockClientFeedbackService>> getTimeLockClientFeedbackServices(AtlasDbConfig config,\n+            Refreshable<AtlasDbRuntimeConfig> runtimeConfig,\n+            UserAgent userAgent) {\n+        Refreshable<ServerListConfig> serverListConfigSupplier =\n+                getServerListConfigSupplierForTimeLock(config, runtimeConfig);\n+        return new CachedTransformingSupplier<>(\n+                serverListConfigSupplier,\n+                serverListConfig -> createProxiesForFeedbackService(userAgent, serverListConfig));\n+    }\n+\n+    private static List<TimeLockClientFeedbackService> createProxiesForFeedbackService(UserAgent userAgent,\n+            ServerListConfig serverListConfig) {\n+        return serverListConfig.servers().stream()\n+           .map(uri -> AtlasDbHttpClients.createProxy(\n+                   serverListConfig.trustContext(),\n+                   uri,\n+                   TimeLockClientFeedbackService.class,\n+                   AuxiliaryRemotingParameters.builder()\n+                           .shouldUseExtendedTimeout(true)\n+                           .shouldLimitPayload(true)\n+                           .shouldRetry(true)\n+                           .userAgent(userAgent)\n+                           .build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10295219cbd078ed1f72caf35e84c4e4aee064c2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDQyMjQxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1NTozMVrOGloO1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1NTozMVrOGloO1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwOTY1NQ==", "bodyText": "nit: Should be a constant that's public: the server needs to read this eventually", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442109655", "createdAt": "2020-06-18T09:55:31Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -69,16 +77,20 @@ public static TimeLockFeedbackBackgroundTask create(TaggedMetricRegistry taggedM\n     public void scheduleWithFixedDelay() {\n         executor.scheduleWithFixedDelay(() -> {\n             try {\n+                ConjureTimeLockClientFeedback feedbackReport = ConjureTimeLockClientFeedback\n+                        .builder()\n+                        .stats(ImmutableMap.of(\"conjureTimelockServiceBlocking.startTransactions\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10295219cbd078ed1f72caf35e84c4e4aee064c2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDQyODU2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1NzoxN1rOGloS8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1NzoxN1rOGloS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExMDcwNw==", "bodyText": "I think we should be resilient to the first node in the cluster being unavailable.", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442110707", "createdAt": "2020-06-18T09:57:17Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -69,16 +77,20 @@ public static TimeLockFeedbackBackgroundTask create(TaggedMetricRegistry taggedM\n     public void scheduleWithFixedDelay() {\n         executor.scheduleWithFixedDelay(() -> {\n             try {\n+                ConjureTimeLockClientFeedback feedbackReport = ConjureTimeLockClientFeedback\n+                        .builder()\n+                        .stats(ImmutableMap.of(\"conjureTimelockServiceBlocking.startTransactions\",\n+                                getEndpointStatsForStartTxn()))\n+                        .atlasVersion(versionSupplier.get())\n+                        .nodeId(nodeId)\n+                        .serviceName(serviceName)\n+                        .build();\n+                timeLockClientFeedbackServices\n+                        .get()\n+                        .forEach(service -> service.reportFeedback(AUTH_HEADER, feedbackReport));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10295219cbd078ed1f72caf35e84c4e4aee064c2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE2MjEyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNDowNVrOGlviPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNDowNVrOGlviPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyOTMxMQ==", "bodyText": "Fix message", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442229311", "createdAt": "2020-06-18T13:34:05Z", "author": {"login": "sudiksha27"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -88,6 +102,17 @@ public void scheduleWithFixedDelay() {\n                 TimeUnit.SECONDS);\n     }\n \n+    private void reportClientFeedbackToService(ConjureTimeLockClientFeedback feedbackReport,\n+            TimeLockClientFeedbackService service) {\n+        try {\n+            service.reportFeedback(AUTH_HEADER, feedbackReport);\n+        } catch (Exception e) {\n+            // we do not want this exception to bubble up so that feedback can be reported to other hosts\n+            log.warn(\"A problem occurred while reporting client feedback for timeLock \"\n+                    + \"adjudication to host - {} .\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80f2a3b51eba94a2cfc2200a6fa51ece04cec701"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg2NDQ1OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/BroadcastDialogueServiceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMTo1OVrOGl2djA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMTo1OVrOGl2djA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0Mjc5Ng==", "bodyText": "The passed in user-agent isn't the versioned one though: it needs to have the atlasdb-http-client added as an auxiliary agent (see AtlasDbDialogueServiceProvider for how this is done), so that we can respond correctly to 429s and 503s (even if we aren't going to get 308s, we need to know how to deal with the other two)", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442342796", "createdAt": "2020-06-18T16:11:59Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/BroadcastDialogueServiceProvider.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.config.AuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableAuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableServerListConfig;\n+import com.palantir.atlasdb.config.ServerListConfig;\n+import com.palantir.atlasdb.http.AtlasDbHttpProtocolVersion;\n+import com.palantir.atlasdb.http.v2.DialogueClientOptions;\n+import com.palantir.atlasdb.http.v2.DialogueShimFactory;\n+import com.palantir.atlasdb.http.v2.ImmutableRemoteServiceConfiguration;\n+import com.palantir.atlasdb.http.v2.RemoteServiceConfiguration;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.conjure.java.api.config.service.UserAgent;\n+import com.palantir.dialogue.Channel;\n+import com.palantir.dialogue.clients.DialogueClients;\n+import com.palantir.refreshable.Refreshable;\n+\n+/**\n+ * Provides a mechanism for creating individual proxies that use Dialogue for communication for each node in the cluster.\n+ *\n+ * Furthermore, proxies should include in their {@link com.palantir.conjure.java.api.config.service.UserAgent}\n+ * information to allow client services to identify the protocol they are using to talk, via\n+ * {@link AtlasDbHttpProtocolVersion}.\n+ */\n+public final class BroadcastDialogueServiceProvider {\n+    DialogueClients.ReloadingFactory reloadingFactory;\n+    Refreshable<ServerListConfig> serverListConfigSupplier;\n+\n+    private BroadcastDialogueServiceProvider(DialogueClients.ReloadingFactory reloadingFactory,\n+            Refreshable<ServerListConfig> serverListConfigSupplier) {\n+        this.reloadingFactory = reloadingFactory;\n+        this.serverListConfigSupplier = serverListConfigSupplier;\n+    }\n+\n+    public static BroadcastDialogueServiceProvider create(\n+            DialogueClients.ReloadingFactory baseFactory,\n+            Refreshable<ServerListConfig> serverListConfigSupplier,\n+            UserAgent versionedAgent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1f8f5561cff3a8d380b6938d6241c66e9c0e5a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTg4Nzc4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxNzo1MVrOGl2sSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxNzo1MVrOGl2sSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NjU2OQ==", "bodyText": "Currently this creates the clients every time, which is not ideal: maybe the BroadcastDialogueServiceProvider could return a more helpful type?", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442346569", "createdAt": "2020-06-18T16:17:51Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -69,16 +77,20 @@ public static TimeLockFeedbackBackgroundTask create(TaggedMetricRegistry taggedM\n     public void scheduleWithFixedDelay() {\n         executor.scheduleWithFixedDelay(() -> {\n             try {\n+                ConjureTimeLockClientFeedback feedbackReport = ConjureTimeLockClientFeedback\n+                        .builder()\n+                        .startTransaction(getEndpointStatsForStartTxn())\n+                        .leaderTime(getEndpointStatsForLeaderTime())\n+                        .atlasVersion(versionSupplier.get())\n+                        .nodeId(nodeId)\n+                        .serviceName(serviceName)\n+                        .build();\n+                timeLockClientFeedbackServices\n+                        .get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1f8f5561cff3a8d380b6938d6241c66e9c0e5a"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYwNzI5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/BroadcastDialogueServiceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToxNTo0OFrOGmRQaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToxNTo0OFrOGmRQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4MTgwMQ==", "bodyText": "It's worth calling out AtlasDbDialogueServiceProvider and explaining why this is different.\nI'd even consider naming this BroadcastDialogueClientFactory or something along those lines, mainly because Service within the context of AtlasDB has a different meaning (which is generally the one in AtlasDbDialogueServiceProvider).", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442781801", "createdAt": "2020-06-19T11:15:48Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/BroadcastDialogueServiceProvider.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.config.AuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableAuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableServerListConfig;\n+import com.palantir.atlasdb.config.ServerListConfig;\n+import com.palantir.atlasdb.http.AtlasDbHttpProtocolVersion;\n+import com.palantir.atlasdb.http.AtlasDbRemotingConstants;\n+import com.palantir.atlasdb.http.v2.DialogueClientOptions;\n+import com.palantir.atlasdb.http.v2.DialogueShimFactory;\n+import com.palantir.atlasdb.http.v2.ImmutableRemoteServiceConfiguration;\n+import com.palantir.atlasdb.http.v2.RemoteServiceConfiguration;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.conjure.java.api.config.service.UserAgent;\n+import com.palantir.dialogue.Channel;\n+import com.palantir.dialogue.clients.DialogueClients;\n+import com.palantir.refreshable.Refreshable;\n+\n+/**\n+ * Provides a mechanism for creating individual proxies that use Dialogue for communication for each node in the\n+ * cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125600cd918d62708ce643a072789e604096171a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYxOTczOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyMDo0NVrOGmRYTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyMDo0NVrOGmRYTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4MzgyMw==", "bodyText": "nit: should be 204 for things without a body", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442783823", "createdAt": "2020-06-19T11:20:45Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -191,6 +204,7 @@ public void setup() throws JsonProcessingException {\n                 (\"\\\"\" + UUID.randomUUID().toString() + \"\\\"\").getBytes())));\n         availableServer.stubFor(TIMESTAMP_MAPPING.willReturn(aResponse().withStatus(200).withBody(\"1\")));\n         availableServer.stubFor(LOCK_MAPPING.willReturn(aResponse().withStatus(200).withBody(\"2\")));\n+        availableServer.stubFor(FEEDBACK_MAPPING.willReturn(aResponse().withStatus(200)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125600cd918d62708ce643a072789e604096171a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYyMTQwOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyMToyNFrOGmRZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyMToyNFrOGmRZXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NDA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        timeLockRuntimeConfig = getTimelockRuntimeConfig(ImmutableList.of(getUriForPort(availablePort)));", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442784095", "createdAt": "2020-06-19T11:21:24Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -200,18 +214,21 @@ public void setup() throws JsonProcessingException {\n         when(config.keyValueService()).thenReturn(new InMemoryAtlasDbConfig());\n         when(config.initializeAsync()).thenReturn(false);\n \n-        runtimeConfig = mock(AtlasDbRuntimeConfig.class);\n-        when(runtimeConfig.timestampClient()).thenReturn(ImmutableTimestampClientConfig.of(false));\n-        when(runtimeConfig.timelockRuntime()).thenReturn(Optional.empty());\n-        when(runtimeConfig.remotingClient()).thenReturn(RemotingClientConfigs.DEFAULT);\n+        mockAtlasDbRuntimeConfig = mock(AtlasDbRuntimeConfig.class);\n+        when(mockAtlasDbRuntimeConfig.timestampClient()).thenReturn(ImmutableTimestampClientConfig.of(false));\n+        when(mockAtlasDbRuntimeConfig.timelockRuntime()).thenReturn(Optional.empty());\n+        when(mockAtlasDbRuntimeConfig.remotingClient()).thenReturn(RemotingClientConfigs.DEFAULT);\n \n         environment = mock(Consumer.class);\n \n         invalidator = mock(TimestampStoreInvalidator.class);\n         when(invalidator.backupAndInvalidate()).thenReturn(EMBEDDED_BOUND);\n \n         availablePort = availableServer.port();\n+\n         mockClientConfig = getTimelockConfigForServers(ImmutableList.of(getUriForPort(availablePort)));\n+//        timeLockRuntimeConfig = getTimelockRuntimeConfig(ImmutableList.of(getUriForPort(availablePort)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125600cd918d62708ce643a072789e604096171a"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODYzMzUwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyNjo0MVrOGmRhKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMToyNjo0MVrOGmRhKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc4NjA4OQ==", "bodyText": "oops, not sure how this slipped the naming conventions the last time, but constants typically have capital snake case", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r442786089", "createdAt": "2020-06-19T11:26:41Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -18,26 +18,30 @@\n \n \n import java.time.Duration;\n+import java.util.List;\n import java.util.UUID;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Supplier;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.ImmutableMap;\n+import com.palantir.atlasdb.timelock.adjudicate.feedback.TimeLockClientFeedbackService;\n import com.palantir.common.concurrent.NamedThreadFactory;\n import com.palantir.common.concurrent.PTExecutors;\n import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n import com.palantir.logsafe.SafeArg;\n+import com.palantir.refreshable.Refreshable;\n import com.palantir.timelock.feedback.ConjureTimeLockClientFeedback;\n import com.palantir.timelock.feedback.EndpointStatistics;\n+import com.palantir.tokens.auth.AuthHeader;\n import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n \n public final class TimeLockFeedbackBackgroundTask implements AutoCloseable {\n     private static final Logger log = LoggerFactory.getLogger(\n             TimeLockFeedbackBackgroundTask.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n     private static final String TIMELOCK_FEEDBACK_THREAD_PREFIX = \"TimeLockFeedbackBackgroundTask\";\n     private static final Duration timeLockClientFeedbackReportInterval = Duration.ofSeconds(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "125600cd918d62708ce643a072789e604096171a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzg1Nzg3OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/BroadcastDialogueClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1NjowN1rOGnBuxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1NjowN1rOGnBuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NjAwNQ==", "bodyText": "nit: oops!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r443576005", "createdAt": "2020-06-22T13:56:07Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/BroadcastDialogueClientFactory.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.config.AuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableAuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableServerListConfig;\n+import com.palantir.atlasdb.config.ServerListConfig;\n+import com.palantir.atlasdb.http.AtlasDbHttpProtocolVersion;\n+import com.palantir.atlasdb.http.AtlasDbRemotingConstants;\n+import com.palantir.atlasdb.http.v2.DialogueClientOptions;\n+import com.palantir.atlasdb.http.v2.DialogueShimFactory;\n+import com.palantir.atlasdb.http.v2.ImmutableRemoteServiceConfiguration;\n+import com.palantir.atlasdb.http.v2.RemoteServiceConfiguration;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.conjure.java.api.config.service.UserAgent;\n+import com.palantir.dialogue.Channel;\n+import com.palantir.dialogue.clients.DialogueClients;\n+import com.palantir.refreshable.Refreshable;\n+\n+/**\n+ * Provides a mechanism for creating individual proxy for each node in a cluster that use Dialogue for communication\n+ * unlike {@link AtlasDbDialogueServiceProvider} which creates a proxy for a service i.e. a cluster of\n+ * zero or more nodes, where contacting any of the nodes is legitimate (subject to redirects via 308s and 503s).\n+ *\n+ * Furthermore, proxies should include in their {@link com.palantir.conjure.java.api.config.service.UserAgent}\n+ * information to allow client services to identify the protocol they are using to talk, via\n+ * {@link AtlasDbHttpProtocolVersion}.\n+ */\n+public final class BroadcastDialogueClientFactory {\n+    DialogueClients.ReloadingFactory reloadingFactory;\n+    Refreshable<ServerListConfig> serverListConfigSupplier;\n+\n+    private BroadcastDialogueClientFactory(DialogueClients.ReloadingFactory reloadingFactory,\n+            Refreshable<ServerListConfig> serverListConfigSupplier) {\n+        this.reloadingFactory = reloadingFactory;\n+        this.serverListConfigSupplier = serverListConfigSupplier;\n+    }\n+\n+    public static BroadcastDialogueClientFactory create(\n+            DialogueClients.ReloadingFactory baseFactory,\n+            Refreshable<ServerListConfig> serverListConfigSupplier,\n+            UserAgent userAgent,\n+            AuxiliaryRemotingParameters parameters) {\n+        UserAgent versionedAgent = userAgent.addAgent(AtlasDbRemotingConstants.ATLASDB_HTTP_CLIENT_AGENT);\n+        Refreshable<Map<String, RemoteServiceConfiguration>> timeLockRemoteConfigurations = serverListConfigSupplier\n+                .map(serverListConfig -> createRemoteServiceConfigurations(\n+                        serverListConfig,\n+                        versionedAgent,\n+                        parameters));\n+\n+        DialogueClients.ReloadingFactory reloadingFactory = baseFactory.reloading(\n+                timeLockRemoteConfigurations.map(DialogueClientOptions::toServicesConfigBlock))\n+                .withUserAgent(versionedAgent);\n+        return new BroadcastDialogueClientFactory(reloadingFactory, serverListConfigSupplier);\n+    }\n+\n+    private static Map<String, RemoteServiceConfiguration> createRemoteServiceConfigurations(\n+            ServerListConfig serverListConfig, UserAgent versionedAgent, AuxiliaryRemotingParameters parameters) {\n+        return KeyedStream.of(serverListConfig.servers())\n+                .map(server -> ImmutableServerListConfig.builder()\n+                        .from(serverListConfig)\n+                        .servers(ImmutableList.of(server))\n+                        .build())\n+                .flatMapEntries((uri, singleServerConfig) -> Stream.of(false, true)\n+                        .map(retry -> createSingleServiceConfigurationMapping(\n+                                uri, singleServerConfig, parameters, versionedAgent, retry)))\n+                .collectToMap();\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39c225789609f45739b53a5c7708f426c6d7385"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDA4MzI3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0MzoxMlrOGnD4kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNDo0MzoxMlrOGnD4kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYxMTI4MA==", "bodyText": "nit: You could probably have a function that takes a Timer and gets the 99th percentile (then it can be shared with the StartTransaction ones).", "url": "https://github.com/palantir/atlasdb/pull/4845#discussion_r443611280", "createdAt": "2020-06-22T14:43:12Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -69,25 +80,52 @@ public static TimeLockFeedbackBackgroundTask create(TaggedMetricRegistry taggedM\n     public void scheduleWithFixedDelay() {\n         executor.scheduleWithFixedDelay(() -> {\n             try {\n-                log.info(\"The TimeLock client metrics for startTransaction endpoint aggregated \"\n-                                + \"over the last 1 minute - {}\",\n-                        SafeArg.of(\"startTxnStats\", ConjureTimeLockClientFeedback\n-                                .builder()\n-                                .stats(ImmutableMap.of(\"conjureTimelockServiceBlocking.startTransactions\",\n-                                        getEndpointStatsForStartTxn()))\n-                                .atlasVersion(versionSupplier.get())\n-                                .nodeId(nodeId)\n-                                .serviceName(serviceName)\n-                                .build()));\n+                ConjureTimeLockClientFeedback feedbackReport = ConjureTimeLockClientFeedback\n+                        .builder()\n+                        .startTransaction(getEndpointStatsForStartTxn())\n+                        .leaderTime(getEndpointStatsForLeaderTime())\n+                        .atlasVersion(versionSupplier.get())\n+                        .nodeId(nodeId)\n+                        .serviceName(serviceName)\n+                        .build();\n+                timeLockClientFeedbackServices\n+                        .current()\n+                        .forEach(service -> reportClientFeedbackToService(feedbackReport, service));\n             } catch (Exception e) {\n                 log.warn(\"A problem occurred while reporting client feedback for timeLock adjudication.\", e);\n             }\n         },\n-                timeLockClientFeedbackReportInterval.getSeconds(),\n-                timeLockClientFeedbackReportInterval.getSeconds(),\n+                TIMELOCK_CLIENT_FEEDBACK_REPORT_INTERVAL.getSeconds(),\n+                TIMELOCK_CLIENT_FEEDBACK_REPORT_INTERVAL.getSeconds(),\n                 TimeUnit.SECONDS);\n     }\n \n+    private void reportClientFeedbackToService(ConjureTimeLockClientFeedback feedbackReport,\n+            TimeLockClientFeedbackService service) {\n+        try {\n+            service.reportFeedback(AUTH_HEADER, feedbackReport);\n+        } catch (Exception e) {\n+            // we do not want this exception to bubble up so that feedback can be reported to other hosts\n+            log.warn(\"Failed to report feedback to TimeLock host.\", e);\n+        }\n+    }\n+\n+    private EndpointStatistics getEndpointStatsForLeaderTime() {\n+        return EndpointStatistics.of(getP99ForLeaderTime(),\n+                getOneMinuteRateForLeaderTime());\n+    }\n+\n+    private double getOneMinuteRateForLeaderTime() {\n+        return conjureTimelockServiceBlockingMetrics.leaderTime().getOneMinuteRate();\n+    }\n+\n+    private double getP99ForLeaderTime() {\n+        return conjureTimelockServiceBlockingMetrics\n+                .leaderTime()\n+                .getSnapshot()\n+                .get99thPercentile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ca1c1a3925ba51fa79a14fb873b622020bd5d7"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2966, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}