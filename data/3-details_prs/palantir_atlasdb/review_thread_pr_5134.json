{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjExMDg2", "number": 5134, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNDo1MlrOFG0asA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNjo0M1rOFG0d2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk0NTc2OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/RowsColumnRangeBatchRequestsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNDo1MlrOIIAZkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzozNDoyNlrOIIA0lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjA2NQ==", "bodyText": "hasSameSizeAs", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545266065", "createdAt": "2020-12-17T17:24:52Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/RowsColumnRangeBatchRequestsTest.java", "diffHunk": "@@ -134,9 +134,9 @@ private static void assertPartitionsHaveCorrectSize(\n             int actualPartitionSize = RowsColumnRangeBatchRequests.getAllRowsInOrder(partitions.get(i))\n                     .size();\n             if (i < partitions.size() - 1) {\n-                Assert.assertEquals(expectedSize, actualPartitionSize);\n+                assertThat(actualPartitionSize).isEqualTo(expectedSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3Mjk4Mw==", "bodyText": "or not", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545272983", "createdAt": "2020-12-17T17:34:26Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/RowsColumnRangeBatchRequestsTest.java", "diffHunk": "@@ -134,9 +134,9 @@ private static void assertPartitionsHaveCorrectSize(\n             int actualPartitionSize = RowsColumnRangeBatchRequests.getAllRowsInOrder(partitions.get(i))\n                     .size();\n             if (i < partitions.size() - 1) {\n-                Assert.assertEquals(expectedSize, actualPartitionSize);\n+                assertThat(actualPartitionSize).isEqualTo(expectedSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjA2NQ=="}, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk0NjQxOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/RowsColumnRangeBatchRequestsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNTowMFrOIIAZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjozNTowN1rOIOqCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjE1MQ==", "bodyText": "isLessThanOrEqualTo", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545266151", "createdAt": "2020-12-17T17:25:00Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/RowsColumnRangeBatchRequestsTest.java", "diffHunk": "@@ -134,9 +134,9 @@ private static void assertPartitionsHaveCorrectSize(\n             int actualPartitionSize = RowsColumnRangeBatchRequests.getAllRowsInOrder(partitions.get(i))\n                     .size();\n             if (i < partitions.size() - 1) {\n-                Assert.assertEquals(expectedSize, actualPartitionSize);\n+                assertThat(actualPartitionSize).isEqualTo(expectedSize);\n             } else {\n-                Assert.assertTrue(actualPartitionSize <= expectedSize);\n+                assertThat(actualPartitionSize <= expectedSize).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzOTgxMQ==", "bodyText": "Same here, it will eventually make it to isLessThanOrEqualTo :-)", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r552239811", "createdAt": "2021-01-05T22:35:07Z", "author": {"login": "carterkozak"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/RowsColumnRangeBatchRequestsTest.java", "diffHunk": "@@ -134,9 +134,9 @@ private static void assertPartitionsHaveCorrectSize(\n             int actualPartitionSize = RowsColumnRangeBatchRequests.getAllRowsInOrder(partitions.get(i))\n                     .size();\n             if (i < partitions.size() - 1) {\n-                Assert.assertEquals(expectedSize, actualPartitionSize);\n+                assertThat(actualPartitionSize).isEqualTo(expectedSize);\n             } else {\n-                Assert.assertTrue(actualPartitionSize <= expectedSize);\n+                assertThat(actualPartitionSize <= expectedSize).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjE1MQ=="}, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk0OTIwOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNTo0MlrOIIAbug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNTo0MlrOIIAbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjYxOA==", "bodyText": "bleh, this whole group isn't quite right though the original is wrong anyway", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545266618", "createdAt": "2020-12-17T17:25:42Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -39,7 +40,7 @@ public void startOnly() {\n         WhereClauses whereClauses = WhereClauses.create(\"i\", request);\n \n         List<String> expectedClauses = ImmutableList.of(\"i.row_name >= ?\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk1MDQxOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNTo1N1rOIIAccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDoyMDo0OFrOIPDb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjgwMQ==", "bodyText": "hasSameSizeAs", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545266801", "createdAt": "2020-12-17T17:25:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -139,16 +140,16 @@ public void usesDifferentTableIdentifier() {\n \n         List<String> expectedClauses =\n                 ImmutableList.of(\"other.row_name >= ?\", \"other.row_name < ?\", \"other.col_name IN (?)\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());\n \n         checkWhereArguments(whereClauses, ImmutableList.of(START, END, COL1));\n     }\n \n     private void checkWhereArguments(WhereClauses whereClauses, List<byte[]> expectedArgs) {\n         List<Object> actualArgs = whereClauses.getArguments();\n         for (int i = 0; i < actualArgs.size(); i++) {\n-            assertArrayEquals(expectedArgs.get(i), (byte[]) actualArgs.get(i));\n+            assertThat((byte[]) actualArgs.get(i)).isEqualTo(expectedArgs.get(i));\n         }\n-        assertEquals(expectedArgs.size(), actualArgs.size());\n+        assertThat(actualArgs.size()).isEqualTo(expectedArgs.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzOTU5MQ==", "bodyText": "This should turn into hasSameSizeAs if the automation runs a few more times. We opted to implement the simplest migrations such that we could funnel the code to an eventually ideal state rather than cluttering the migrations with attempts to make everything ideal on the first try.", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r552239591", "createdAt": "2021-01-05T22:34:36Z", "author": {"login": "carterkozak"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -139,16 +140,16 @@ public void usesDifferentTableIdentifier() {\n \n         List<String> expectedClauses =\n                 ImmutableList.of(\"other.row_name >= ?\", \"other.row_name < ?\", \"other.col_name IN (?)\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());\n \n         checkWhereArguments(whereClauses, ImmutableList.of(START, END, COL1));\n     }\n \n     private void checkWhereArguments(WhereClauses whereClauses, List<byte[]> expectedArgs) {\n         List<Object> actualArgs = whereClauses.getArguments();\n         for (int i = 0; i < actualArgs.size(); i++) {\n-            assertArrayEquals(expectedArgs.get(i), (byte[]) actualArgs.get(i));\n+            assertThat((byte[]) actualArgs.get(i)).isEqualTo(expectedArgs.get(i));\n         }\n-        assertEquals(expectedArgs.size(), actualArgs.size());\n+        assertThat(actualArgs.size()).isEqualTo(expectedArgs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjgwMQ=="}, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1NTY5OQ==", "bodyText": "Yeah, I left these more as notes to myself to update them :)", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r552655699", "createdAt": "2021-01-06T14:20:30Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -139,16 +140,16 @@ public void usesDifferentTableIdentifier() {\n \n         List<String> expectedClauses =\n                 ImmutableList.of(\"other.row_name >= ?\", \"other.row_name < ?\", \"other.col_name IN (?)\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());\n \n         checkWhereArguments(whereClauses, ImmutableList.of(START, END, COL1));\n     }\n \n     private void checkWhereArguments(WhereClauses whereClauses, List<byte[]> expectedArgs) {\n         List<Object> actualArgs = whereClauses.getArguments();\n         for (int i = 0; i < actualArgs.size(); i++) {\n-            assertArrayEquals(expectedArgs.get(i), (byte[]) actualArgs.get(i));\n+            assertThat((byte[]) actualArgs.get(i)).isEqualTo(expectedArgs.get(i));\n         }\n-        assertEquals(expectedArgs.size(), actualArgs.size());\n+        assertThat(actualArgs.size()).isEqualTo(expectedArgs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjgwMQ=="}, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY1NTg2NQ==", "bodyText": "Though makes sense that running these transformations multiple times would converge on the correct result", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r552655865", "createdAt": "2021-01-06T14:20:48Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -139,16 +140,16 @@ public void usesDifferentTableIdentifier() {\n \n         List<String> expectedClauses =\n                 ImmutableList.of(\"other.row_name >= ?\", \"other.row_name < ?\", \"other.col_name IN (?)\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());\n \n         checkWhereArguments(whereClauses, ImmutableList.of(START, END, COL1));\n     }\n \n     private void checkWhereArguments(WhereClauses whereClauses, List<byte[]> expectedArgs) {\n         List<Object> actualArgs = whereClauses.getArguments();\n         for (int i = 0; i < actualArgs.size(); i++) {\n-            assertArrayEquals(expectedArgs.get(i), (byte[]) actualArgs.get(i));\n+            assertThat((byte[]) actualArgs.get(i)).isEqualTo(expectedArgs.get(i));\n         }\n-        assertEquals(expectedArgs.size(), actualArgs.size());\n+        assertThat(actualArgs.size()).isEqualTo(expectedArgs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NjgwMQ=="}, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk1MTI5OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNjoxMFrOIIAdCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzozNzo0N1rOIIA-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2Njk1Mw==", "bodyText": "This feels like it'll implode, let's see", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545266953", "createdAt": "2020-12-17T17:26:10Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -139,16 +140,16 @@ public void usesDifferentTableIdentifier() {\n \n         List<String> expectedClauses =\n                 ImmutableList.of(\"other.row_name >= ?\", \"other.row_name < ?\", \"other.col_name IN (?)\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());\n \n         checkWhereArguments(whereClauses, ImmutableList.of(START, END, COL1));\n     }\n \n     private void checkWhereArguments(WhereClauses whereClauses, List<byte[]> expectedArgs) {\n         List<Object> actualArgs = whereClauses.getArguments();\n         for (int i = 0; i < actualArgs.size(); i++) {\n-            assertArrayEquals(expectedArgs.get(i), (byte[]) actualArgs.get(i));\n+            assertThat((byte[]) actualArgs.get(i)).isEqualTo(expectedArgs.get(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI3NTYxNA==", "bodyText": "nope", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545275614", "createdAt": "2020-12-17T17:37:47Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/WhereClausesTest.java", "diffHunk": "@@ -139,16 +140,16 @@ public void usesDifferentTableIdentifier() {\n \n         List<String> expectedClauses =\n                 ImmutableList.of(\"other.row_name >= ?\", \"other.row_name < ?\", \"other.col_name IN (?)\");\n-        assertEquals(whereClauses.getClauses(), expectedClauses);\n+        assertThat(expectedClauses).isEqualTo(whereClauses.getClauses());\n \n         checkWhereArguments(whereClauses, ImmutableList.of(START, END, COL1));\n     }\n \n     private void checkWhereArguments(WhereClauses whereClauses, List<byte[]> expectedArgs) {\n         List<Object> actualArgs = whereClauses.getArguments();\n         for (int i = 0; i < actualArgs.size(); i++) {\n-            assertArrayEquals(expectedArgs.get(i), (byte[]) actualArgs.get(i));\n+            assertThat((byte[]) actualArgs.get(i)).isEqualTo(expectedArgs.get(i));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2Njk1Mw=="}, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjk1Mzg0OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/ranges/RangePredicateHelperTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNjo0M1rOIIAemg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyNjo0M1rOIIAemg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NzM1NA==", "bodyText": "yeah, I guess this one is hard to replicate", "url": "https://github.com/palantir/atlasdb/pull/5134#discussion_r545267354", "createdAt": "2020-12-17T17:26:43Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/ranges/RangePredicateHelperTest.java", "diffHunk": "@@ -38,8 +39,8 @@ public void startRowInclusiveEmpty() {\n         RangePredicateHelper.create(false, DBType.ORACLE, builder).startRowInclusive(PtBytes.EMPTY_BYTE_ARRAY);\n         FullQuery query = builder.build();\n \n-        assertThat(query.getQuery(), isEmptyString());\n-        assertThat(query.getArgs(), emptyArray());\n+        assertThat(query.getQuery()).is(new HamcrestCondition<>(isEmptyString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ccf4ca69d443d2bd1eb49fd17637421a72d98a"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2521, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}