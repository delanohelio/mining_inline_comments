{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODMwNDk0", "number": 4519, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzowNzo0NFrODYq2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzoxOTowNlrODYq_cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTk0NDkyOnYy", "diffSide": "RIGHT", "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzowNzo0NFrOFeqYGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTozMDo1N1rOFf22sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTg5Nw==", "bodyText": "\ud83d\udc83", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r367695897", "createdAt": "2020-01-16T23:07:44Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -33,28 +35,21 @@\n \n @Value.Immutable\n public abstract class ClientOptions {\n-    // TODO (jkong): Re-enable client QoS after response body leaks are handled correctly.\n-    // Throws after expected outages of 1/2 * 0.01 * (2^13 - 1) = 40.96 s\n-    public static final ClientOptions DEFAULT_RETRYING = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofSeconds(10))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(10))\n-            .failedUrlCooldown(Duration.ofMillis(100))\n-            .maxNumRetries(13)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n+    private static final Duration CONNECT_TIMEOUT = Duration.ofMillis(500);\n \n-    // TODO (jkong): Re-enable client QoS after response body leaks are handled correctly.\n-    public static final ClientOptions DEFAULT_NO_RETRYING = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofSeconds(10))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(100))\n-            .failedUrlCooldown(Duration.ofMillis(1))\n-            .maxNumRetries(0)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n+    @VisibleForTesting\n+    static final Duration NON_BLOCKING_READ_TIMEOUT = Duration.ofMillis(12566); // Odd number for debugging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2MTU0Ng==", "bodyText": "haha technically it's not \"odd\" \ud83d\ude1b", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r368561546", "createdAt": "2020-01-20T13:59:48Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -33,28 +35,21 @@\n \n @Value.Immutable\n public abstract class ClientOptions {\n-    // TODO (jkong): Re-enable client QoS after response body leaks are handled correctly.\n-    // Throws after expected outages of 1/2 * 0.01 * (2^13 - 1) = 40.96 s\n-    public static final ClientOptions DEFAULT_RETRYING = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofSeconds(10))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(10))\n-            .failedUrlCooldown(Duration.ofMillis(100))\n-            .maxNumRetries(13)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n+    private static final Duration CONNECT_TIMEOUT = Duration.ofMillis(500);\n \n-    // TODO (jkong): Re-enable client QoS after response body leaks are handled correctly.\n-    public static final ClientOptions DEFAULT_NO_RETRYING = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofSeconds(10))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(100))\n-            .failedUrlCooldown(Duration.ofMillis(1))\n-            .maxNumRetries(0)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n+    @VisibleForTesting\n+    static final Duration NON_BLOCKING_READ_TIMEOUT = Duration.ofMillis(12566); // Odd number for debugging", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTg5Nw=="}, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0ODkxMw==", "bodyText": "The odd even number was intentional \ud83d\ude05", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r368948913", "createdAt": "2020-01-21T11:30:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -33,28 +35,21 @@\n \n @Value.Immutable\n public abstract class ClientOptions {\n-    // TODO (jkong): Re-enable client QoS after response body leaks are handled correctly.\n-    // Throws after expected outages of 1/2 * 0.01 * (2^13 - 1) = 40.96 s\n-    public static final ClientOptions DEFAULT_RETRYING = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofSeconds(10))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(10))\n-            .failedUrlCooldown(Duration.ofMillis(100))\n-            .maxNumRetries(13)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n+    private static final Duration CONNECT_TIMEOUT = Duration.ofMillis(500);\n \n-    // TODO (jkong): Re-enable client QoS after response body leaks are handled correctly.\n-    public static final ClientOptions DEFAULT_NO_RETRYING = ImmutableClientOptions.builder()\n-            .connectTimeout(Duration.ofSeconds(10))\n-            .readTimeout(Duration.ofSeconds(65))\n-            .backoffSlotSize(Duration.ofMillis(100))\n-            .failedUrlCooldown(Duration.ofMillis(1))\n-            .maxNumRetries(0)\n-            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n-            .build();\n+    @VisibleForTesting\n+    static final Duration NON_BLOCKING_READ_TIMEOUT = Duration.ofMillis(12566); // Odd number for debugging", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5NTg5Nw=="}, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTk1NzA5OnYy", "diffSide": "RIGHT", "path": "atlasdb-conjure/src/test/java/com/palantir/atlasdb/http/v2/ClientOptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzoxNDoxNVrOFeqfeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1NDoxNFrOFfai6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5Nzc4Ng==", "bodyText": "this test is kinda weird, there's no notion of default AuxiliaryRemotingParameters", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r367697786", "createdAt": "2020-01-16T23:14:15Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-conjure/src/test/java/com/palantir/atlasdb/http/v2/ClientOptionsTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.http.v2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.config.AuxiliaryRemotingParameters;\n+import com.palantir.conjure.java.api.config.service.UserAgent;\n+import com.palantir.conjure.java.client.config.ClientConfiguration;\n+\n+public class ClientOptionsTest {\n+    private static final UserAgent USER_AGENT = UserAgent.of(UserAgent.Agent.of(\"tom\", \"1.2.3\"));\n+\n+    // Throws after expected outages of 1/2 * 0.01 * (2^13 - 1) = 40.96 s\n+    private static final ClientOptions DEFAULT_RETRYING = ImmutableClientOptions.builder()\n+            .connectTimeout(Duration.ofMillis(500))\n+            .readTimeout(Duration.ofSeconds(65))\n+            .backoffSlotSize(Duration.ofMillis(10))\n+            .failedUrlCooldown(Duration.ofMillis(100))\n+            .maxNumRetries(13)\n+            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+            .build();\n+\n+    private static final ClientOptions DEFAULT_NO_RETRYING = ImmutableClientOptions.builder()\n+            .connectTimeout(Duration.ofMillis(500))\n+            .readTimeout(Duration.ofSeconds(65))\n+            .backoffSlotSize(Duration.ofMillis(10))\n+            .failedUrlCooldown(Duration.ofMillis(1))\n+            .maxNumRetries(0)\n+            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+            .build();\n+\n+    @Test\n+    public void proxyShouldSupportBlockingReadTimeoutIfUnspecified() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()\n+                .shouldLimitPayload(true)\n+                .shouldRetry(true)\n+                .userAgent(USER_AGENT)\n+                .build());\n+\n+        assertThat(clientOptions.readTimeout()).isEqualTo(ClientOptions.BLOCKING_READ_TIMEOUT);\n+    }\n+\n+    @Test\n+    public void proxyShouldSupportBlockingReadTimeoutIfExplicitlyConfigured() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()\n+                .shouldLimitPayload(true)\n+                .shouldRetry(true)\n+                .shouldSupportBlockingOperations(true)\n+                .userAgent(USER_AGENT)\n+                .build());\n+\n+        assertThat(clientOptions.readTimeout()).isEqualTo(ClientOptions.BLOCKING_READ_TIMEOUT);\n+    }\n+\n+    @Test\n+    public void proxyShouldSupportNonBlockingReadTimeoutIfExplicitlyConfigured() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()\n+                .shouldLimitPayload(true)\n+                .shouldRetry(true)\n+                .shouldSupportBlockingOperations(false)\n+                .userAgent(USER_AGENT)\n+                .build());\n+\n+        assertThat(clientOptions.readTimeout()).isEqualTo(ClientOptions.NON_BLOCKING_READ_TIMEOUT);\n+    }\n+\n+    @Test\n+    public void defaultRetryingOptionsShouldMatchLegacyBehaviour() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4NTA5Nw==", "bodyText": "Sure, yep. I changed this to minimallySpecified... as that's what I meant here", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r368485097", "createdAt": "2020-01-20T10:54:14Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-conjure/src/test/java/com/palantir/atlasdb/http/v2/ClientOptionsTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.http.v2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.config.AuxiliaryRemotingParameters;\n+import com.palantir.conjure.java.api.config.service.UserAgent;\n+import com.palantir.conjure.java.client.config.ClientConfiguration;\n+\n+public class ClientOptionsTest {\n+    private static final UserAgent USER_AGENT = UserAgent.of(UserAgent.Agent.of(\"tom\", \"1.2.3\"));\n+\n+    // Throws after expected outages of 1/2 * 0.01 * (2^13 - 1) = 40.96 s\n+    private static final ClientOptions DEFAULT_RETRYING = ImmutableClientOptions.builder()\n+            .connectTimeout(Duration.ofMillis(500))\n+            .readTimeout(Duration.ofSeconds(65))\n+            .backoffSlotSize(Duration.ofMillis(10))\n+            .failedUrlCooldown(Duration.ofMillis(100))\n+            .maxNumRetries(13)\n+            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+            .build();\n+\n+    private static final ClientOptions DEFAULT_NO_RETRYING = ImmutableClientOptions.builder()\n+            .connectTimeout(Duration.ofMillis(500))\n+            .readTimeout(Duration.ofSeconds(65))\n+            .backoffSlotSize(Duration.ofMillis(10))\n+            .failedUrlCooldown(Duration.ofMillis(1))\n+            .maxNumRetries(0)\n+            .clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+            .build();\n+\n+    @Test\n+    public void proxyShouldSupportBlockingReadTimeoutIfUnspecified() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()\n+                .shouldLimitPayload(true)\n+                .shouldRetry(true)\n+                .userAgent(USER_AGENT)\n+                .build());\n+\n+        assertThat(clientOptions.readTimeout()).isEqualTo(ClientOptions.BLOCKING_READ_TIMEOUT);\n+    }\n+\n+    @Test\n+    public void proxyShouldSupportBlockingReadTimeoutIfExplicitlyConfigured() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()\n+                .shouldLimitPayload(true)\n+                .shouldRetry(true)\n+                .shouldSupportBlockingOperations(true)\n+                .userAgent(USER_AGENT)\n+                .build());\n+\n+        assertThat(clientOptions.readTimeout()).isEqualTo(ClientOptions.BLOCKING_READ_TIMEOUT);\n+    }\n+\n+    @Test\n+    public void proxyShouldSupportNonBlockingReadTimeoutIfExplicitlyConfigured() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()\n+                .shouldLimitPayload(true)\n+                .shouldRetry(true)\n+                .shouldSupportBlockingOperations(false)\n+                .userAgent(USER_AGENT)\n+                .build());\n+\n+        assertThat(clientOptions.readTimeout()).isEqualTo(ClientOptions.NON_BLOCKING_READ_TIMEOUT);\n+    }\n+\n+    @Test\n+    public void defaultRetryingOptionsShouldMatchLegacyBehaviour() {\n+        ClientOptions clientOptions = ClientOptions.fromRemotingParameters(AuxiliaryRemotingParameters.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5Nzc4Ng=="}, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTk2NTU4OnYy", "diffSide": "RIGHT", "path": "atlasdb-remoting-api/src/main/java/com/palantir/atlasdb/config/AuxiliaryRemotingParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzoxNzo0NlrOFeqkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzoyMToyNVrOFeqobQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5ODk5OQ==", "bodyText": "I suppose for the lock service, it's only the lock endpoint that you want to be able to block no?\nYou could create an impl of the lock service which uses the \"supports blocking operations\" for the lock method, and then the standard for everything else.", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r367698999", "createdAt": "2020-01-16T23:17:46Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-remoting-api/src/main/java/com/palantir/atlasdb/config/AuxiliaryRemotingParameters.java", "diffHunk": "@@ -37,6 +37,17 @@\n      */\n     boolean shouldRetry();\n \n+    /**\n+     * Whether this client should support operations that block on the server side.\n+     * In practice, this means that read and idle connection timeouts may be longer.\n+     *\n+     * This is set to true by default, to support legacy behaviour.\n+     */\n+    @Value.Default\n+    default boolean shouldSupportBlockingOperations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwMDA3Nw==", "bodyText": "oh, you did this in #4520 \ud83d\udc83", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r367700077", "createdAt": "2020-01-16T23:21:25Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-remoting-api/src/main/java/com/palantir/atlasdb/config/AuxiliaryRemotingParameters.java", "diffHunk": "@@ -37,6 +37,17 @@\n      */\n     boolean shouldRetry();\n \n+    /**\n+     * Whether this client should support operations that block on the server side.\n+     * In practice, this means that read and idle connection timeouts may be longer.\n+     *\n+     * This is set to true by default, to support legacy behaviour.\n+     */\n+    @Value.Default\n+    default boolean shouldSupportBlockingOperations() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5ODk5OQ=="}, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTk2Nzg3OnYy", "diffSide": "RIGHT", "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzoxOTowNlrOFeqlyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzo1NDoxOVrOFffCZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5OTQwMQ==", "bodyText": "some docs would be good, to describe what the effect each combination will have, so we don't have to do the same exercise we did today, or even if we do, it's a lot easier.\neither here or the constants above.", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r367699401", "createdAt": "2020-01-16T23:19:06Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -129,4 +124,27 @@ public static ClientOptions of(Duration connect, Duration read, Duration backoff\n                 .maxNumRetries(retries)\n                 .build();\n     }\n+\n+    static ClientOptions fromRemotingParameters(AuxiliaryRemotingParameters parameters) {\n+        ImmutableClientOptions.Builder builder = ImmutableClientOptions.builder();\n+\n+        setupTimeouts(builder, parameters);\n+        setupRetrying(builder, parameters);\n+\n+        return builder.clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+                .build();\n+    }\n+\n+    private static void setupTimeouts(ImmutableClientOptions.Builder builder, AuxiliaryRemotingParameters parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4NzQwMg==", "bodyText": "Added a bit of explanation - I'm not sure exactly what you want, might be worth catching up if there are more specific things you'd like to be documented. Thanks!", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r368487402", "createdAt": "2020-01-20T10:59:16Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -129,4 +124,27 @@ public static ClientOptions of(Duration connect, Duration read, Duration backoff\n                 .maxNumRetries(retries)\n                 .build();\n     }\n+\n+    static ClientOptions fromRemotingParameters(AuxiliaryRemotingParameters parameters) {\n+        ImmutableClientOptions.Builder builder = ImmutableClientOptions.builder();\n+\n+        setupTimeouts(builder, parameters);\n+        setupRetrying(builder, parameters);\n+\n+        return builder.clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+                .build();\n+    }\n+\n+    private static void setupTimeouts(ImmutableClientOptions.Builder builder, AuxiliaryRemotingParameters parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5OTQwMQ=="}, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1ODY5Mg==", "bodyText": "This'll do, I suppose I wanted a way to codify our investigation, something along the lines of, anything below a proxy probably shouldn't retry etc. What the current setup is, if there are separate timelock to timelock configurations vs client to timelock etc.", "url": "https://github.com/palantir/atlasdb/pull/4519#discussion_r368558692", "createdAt": "2020-01-20T13:54:19Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-conjure/src/main/java/com/palantir/atlasdb/http/v2/ClientOptions.java", "diffHunk": "@@ -129,4 +124,27 @@ public static ClientOptions of(Duration connect, Duration read, Duration backoff\n                 .maxNumRetries(retries)\n                 .build();\n     }\n+\n+    static ClientOptions fromRemotingParameters(AuxiliaryRemotingParameters parameters) {\n+        ImmutableClientOptions.Builder builder = ImmutableClientOptions.builder();\n+\n+        setupTimeouts(builder, parameters);\n+        setupRetrying(builder, parameters);\n+\n+        return builder.clientQoS(ClientConfiguration.ClientQoS.DANGEROUS_DISABLE_SYMPATHETIC_CLIENT_QOS)\n+                .build();\n+    }\n+\n+    private static void setupTimeouts(ImmutableClientOptions.Builder builder, AuxiliaryRemotingParameters parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY5OTQwMQ=="}, "originalCommit": {"oid": "236d0223ad7c917e854526c69884fa6209c65b13"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2411, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}