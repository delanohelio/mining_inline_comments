{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjYxNTYy", "number": 4645, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozNjo1NFrODnDoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzowOFrODnyTug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgwNjE5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozNjo1NVrOF01E7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo1Mjo0NFrOF1CVOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTg4Nw==", "bodyText": "retrying unsuccessful responses?? is it possible to make this less general?", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390939887", "createdAt": "2020-03-11T12:36:55Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {\n+        Instant now = clock.instant();\n+        Instant deadline = now.plus(durationExtractor.apply(request));\n+\n+        while (now.isBefore(deadline)) {\n+            Duration remainingTime = Duration.between(now, deadline);\n+            S durationLimitedInput = durationLimiter.apply(request, remainingTime);\n+\n+            try {\n+                T response = query.apply(durationLimitedInput);\n+                if (successfulResponseEvaluator.test(response)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzExMA==", "bodyText": "so I've reread, and I think I understand, it's only because you've clamped the deadline, and that an unsuccessful response is still actually potentially successful/not a failure.\nThis class isn't and shouldn't be general imo, short of locks I'm struggling to see where else it applies.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390947110", "createdAt": "2020-03-11T12:50:40Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {\n+        Instant now = clock.instant();\n+        Instant deadline = now.plus(durationExtractor.apply(request));\n+\n+        while (now.isBefore(deadline)) {\n+            Duration remainingTime = Duration.between(now, deadline);\n+            S durationLimitedInput = durationLimiter.apply(request, remainingTime);\n+\n+            try {\n+                T response = query.apply(durationLimitedInput);\n+                if (successfulResponseEvaluator.test(response)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTg4Nw=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1NzA0OA==", "bodyText": "I've moved this into an inner class: as discussed offline the predicate should really be definitiveResponse or something along those lines if we wanted it to be fully precise.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391157048", "createdAt": "2020-03-11T17:52:44Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {\n+        Instant now = clock.instant();\n+        Instant deadline = now.plus(durationExtractor.apply(request));\n+\n+        while (now.isBefore(deadline)) {\n+            Duration remainingTime = Duration.between(now, deadline);\n+            S durationLimitedInput = durationLimiter.apply(request, remainingTime);\n+\n+            try {\n+                T response = query.apply(durationLimitedInput);\n+                if (successfulResponseEvaluator.test(response)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTg4Nw=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgxMDc5OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozODoyMFrOF01HxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjozODoyNlrOF01H-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDYxMw==", "bodyText": "nit: move the comment to this part here", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390940613", "createdAt": "2020-03-11T12:38:20Z", "author": {"login": "felixdesouza"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -193,4 +197,29 @@ public void canCreateNewClientsDynamically() {\n         }\n     }\n \n+    @Test\n+    public void lockRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.\n+        LockToken token = client.lock(LockRequest.of(LOCKS, DEFAULT_LOCK_TIMEOUT_MS)).getToken();\n+\n+        try {\n+            LockResponse response = client.lock(LockRequest.of(LOCKS, 15_000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDY2Ng==", "bodyText": "same as below", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390940666", "createdAt": "2020-03-11T12:38:26Z", "author": {"login": "felixdesouza"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -193,4 +197,29 @@ public void canCreateNewClientsDynamically() {\n         }\n     }\n \n+    @Test\n+    public void lockRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.\n+        LockToken token = client.lock(LockRequest.of(LOCKS, DEFAULT_LOCK_TIMEOUT_MS)).getToken();\n+\n+        try {\n+            LockResponse response = client.lock(LockRequest.of(LOCKS, 15_000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MDYxMw=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjgyMjU0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0MjowMlrOF01PNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTowMzoyOFrOF1aFNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MjUxNw==", "bodyText": "just pass in req.getAcquireTimeoutMs()?", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390942517", "createdAt": "2020-03-11T12:42:02Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.time.Clock;\n+import java.time.Duration;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.ImmutableLockRequest;\n+import com.palantir.lock.v2.ImmutableWaitForLocksRequest;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                request,\n+                req -> Duration.ofMillis(req.getAcquireTimeoutMs()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1Nzg4Nw==", "bodyText": "I think I still want to keep the Duration as an input, just because we have a BiFunction<S, Duration, S> and I'm not really keen on having both duration and a millis-thing in the same API. I've changed this to not pass in an extractor though.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391157887", "createdAt": "2020-03-11T17:54:01Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.time.Clock;\n+import java.time.Duration;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.ImmutableLockRequest;\n+import com.palantir.lock.v2.ImmutableWaitForLocksRequest;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                request,\n+                req -> Duration.ofMillis(req.getAcquireTimeoutMs()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MjUxNw=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0NjE2Nw==", "bodyText": "yeah, I assumed that anyway, strongly typed params \ud83d\udcaa", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391546167", "createdAt": "2020-03-12T11:03:28Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.time.Clock;\n+import java.time.Duration;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.ImmutableLockRequest;\n+import com.palantir.lock.v2.ImmutableWaitForLocksRequest;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                request,\n+                req -> Duration.ofMillis(req.getAcquireTimeoutMs()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0MjUxNw=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1Njc1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MjowMVrOF01j9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo1NDoyNVrOF1CZYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzgyOQ==", "bodyText": "if keeping this general, shouldn't this technically be applied on the previous durationLimitedInput instead of on the original request?", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390947829", "createdAt": "2020-03-11T12:52:01Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {\n+        Instant now = clock.instant();\n+        Instant deadline = now.plus(durationExtractor.apply(request));\n+\n+        while (now.isBefore(deadline)) {\n+            Duration remainingTime = Duration.between(now, deadline);\n+            S durationLimitedInput = durationLimiter.apply(request, remainingTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1ODExMw==", "bodyText": "Changed to iteratively supply inputs (though no longer keeping it general).", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391158113", "createdAt": "2020-03-11T17:54:25Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {\n+        Instant now = clock.instant();\n+        Instant deadline = now.plus(durationExtractor.apply(request));\n+\n+        while (now.isBefore(deadline)) {\n+            Duration remainingTime = Duration.between(now, deadline);\n+            S durationLimitedInput = durationLimiter.apply(request, remainingTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzgyOQ=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg2NjY5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NTowNVrOF01qPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo1NDo0N1rOF1CaTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTQzOA==", "bodyText": "default is misleading here, if anything it should be timedOutResponse or something that communicates that we failed in the way we expected etc. Either that or we save the response if the successfulResultEvaluator fails and then return that.\nEither way, making this about locks instead of being general would go a long way imo.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390949438", "createdAt": "2020-03-11T12:55:05Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1ODM1MA==", "bodyText": "Discussed offline: We now save the response if the evaluator fails and return that.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391158350", "createdAt": "2020-03-11T17:54:47Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimeoutRetryer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+class RemoteTimeoutRetryer {\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    RemoteTimeoutRetryer(Clock clock) {\n+        this.clock = clock;\n+    }\n+\n+    static RemoteTimeoutRetryer createDefault() {\n+        return new RemoteTimeoutRetryer(Clock.systemUTC());\n+    }\n+\n+    <S, T> T attemptUntilTimeLimitOrException(\n+            S request,\n+            Function<S, Duration> durationExtractor,\n+            BiFunction<S, Duration, S> durationLimiter,\n+            Function<S, T> query,\n+            Predicate<T> successfulResponseEvaluator,\n+            T defaultResponse) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0OTQzOA=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NDIyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1NzoxNFrOF01u2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo0NDozOFrOF1EL1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDYxNw==", "bodyText": "why times(3) here? seems pretty non-obvious", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390950617", "createdAt": "2020-03-11T12:57:14Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4NzQxNQ==", "bodyText": "The request is 10 ms, and the clock advances in steps of 4 ms, so ceil(10/4) = 3.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391187415", "createdAt": "2020-03-11T18:44:38Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDYxNw=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg4OTcwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMjowNlrOF014xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTowMzo1NlrOF1aGSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzE1Ng==", "bodyText": "this is a bit weird, I think if you have to have this, have something along the lines of:\nList<Duration> durations = captor.getAllValues().stream().map(IntAndDuration::duration).collect(toList());\nassertThat(durations)\n  .as(\"duration is decreasing\")\n  .isSortedAccordingTo(Comparator.reverseOrder())", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390953156", "createdAt": "2020-03-11T13:02:06Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void blockingDurationsDecreaseAsTimePasses() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        retryForTenMillisAcceptingOnlyFortyTwo();\n+\n+        ArgumentCaptor<IntAndDuration> captor = ArgumentCaptor.forClass(IntAndDuration.class);\n+        verify(query, times(3)).apply(captor.capture());\n+        assertThat(captor.getAllValues()).containsExactly(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NDcyMQ==", "bodyText": "I probably should rename the test. Not entirely happy with that assertion: 10, 9, 8 (or for that matter 10, 10, 10) would pass when they shouldn't.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391194721", "createdAt": "2020-03-11T18:57:39Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void blockingDurationsDecreaseAsTimePasses() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        retryForTenMillisAcceptingOnlyFortyTwo();\n+\n+        ArgumentCaptor<IntAndDuration> captor = ArgumentCaptor.forClass(IntAndDuration.class);\n+        verify(query, times(3)).apply(captor.capture());\n+        assertThat(captor.getAllValues()).containsExactly(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzE1Ng=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU0NjQ0MQ==", "bodyText": "that's fair", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391546441", "createdAt": "2020-03-12T11:03:56Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void blockingDurationsDecreaseAsTimePasses() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        retryForTenMillisAcceptingOnlyFortyTwo();\n+\n+        ArgumentCaptor<IntAndDuration> captor = ArgumentCaptor.forClass(IntAndDuration.class);\n+        verify(query, times(3)).apply(captor.capture());\n+        assertThat(captor.getAllValues()).containsExactly(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzE1Ng=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjk0NjM0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoxNzo0OFrOF02beA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTozMDoyM1rOF1Fptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MjA0MA==", "bodyText": "the tests here are weird because there is nothing tying together a request timing out and the actual time, one is handled by the setupDefaultClock and the other is just if the query returns a correct response, as such it makes this example a bti contrived and hard to follow.\nIf anything, I'd probably have a method which was like: returnResponseAfterDuration(T response, Duration duration). That sets up the clock and also the query mock.\nprivate static BoolAndDuration successfulAfter(Duration duration) { ... }\nprivate static BoolAndDuration failedAfter(Duration duration) { ... }\nprivate static void setupStuff(BoolAndDuration... durations) {\n  // create arrays of the flag and stick it into the query mock\n  // create arrays of the duration and stick it into the clock mock\n}\n\npublic void test() {\n  setupStuff(\n    failedAfter(Duration.ofMillis(4)), \n    successfullAfter(Duration.ofMillis(5));\n\n  bool result = retryForTenMillisWaitingForSuccess();\n  ...\n}\nI'd probably go further and get rid of ints and just do this purely on booleans.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390962040", "createdAt": "2020-03-11T13:17:48Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void blockingDurationsDecreaseAsTimePasses() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        retryForTenMillisAcceptingOnlyFortyTwo();\n+\n+        ArgumentCaptor<IntAndDuration> captor = ArgumentCaptor.forClass(IntAndDuration.class);\n+        verify(query, times(3)).apply(captor.capture());\n+        assertThat(captor.getAllValues()).containsExactly(\n+                ImmutableIntAndDuration.of(QUERY_VALUE, Duration.ofMillis(10)),\n+                ImmutableIntAndDuration.of(QUERY_VALUE, Duration.ofMillis(6)),\n+                ImmutableIntAndDuration.of(QUERY_VALUE, Duration.ofMillis(2)));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void recoversFromFailureIfWeBecomeSuccessful() {\n+        setupDefaultClock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxMTQ0Ng==", "bodyText": "The BDD style thing could work. I think this is somewhat more complicated than what you've written above though: there are 4 cases, not 2 (retryable and non-retryable exceptions) so we can't just use arrays and thenReturn, there'll be some tricky conversions involved.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391211446", "createdAt": "2020-03-11T19:30:23Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/RemoteTimeoutRetryerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+@SuppressWarnings(\"unchecked\") // Mocks with generic types\n+public class RemoteTimeoutRetryerTest {\n+    private static final int DEFAULT_VALUE = -1;\n+    private static final int QUERY_VALUE = 3;\n+    private static final int FORTY_TWO = 42;\n+    private static final Exception TIMEOUT_EXCEPTION = new RuntimeException(new SocketTimeoutException(\"timeout\"));\n+    private static final Exception RUNTIME_EXCEPTION = new RuntimeException();\n+\n+    private final Clock clock = mock(Clock.class);\n+    private final RemoteTimeoutRetryer retryer = new RemoteTimeoutRetryer(clock);\n+    private final Function<IntAndDuration, Integer> query = mock(Function.class);\n+\n+    @Test\n+    public void returnsRequestImmediatelyIfSuccessful() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(FORTY_TWO);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(FORTY_TWO);\n+\n+        verify(query).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void returnsDefaultIfAlwaysFailing() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        int result = retryForTenMillisAcceptingOnlyFortyTwo();\n+        assertThat(result).isEqualTo(DEFAULT_VALUE);\n+\n+        verify(query, times(3)).apply(any(IntAndDuration.class));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void blockingDurationsDecreaseAsTimePasses() {\n+        setupDefaultClock();\n+        when(query.apply(any())).thenReturn(5);\n+\n+        retryForTenMillisAcceptingOnlyFortyTwo();\n+\n+        ArgumentCaptor<IntAndDuration> captor = ArgumentCaptor.forClass(IntAndDuration.class);\n+        verify(query, times(3)).apply(captor.capture());\n+        assertThat(captor.getAllValues()).containsExactly(\n+                ImmutableIntAndDuration.of(QUERY_VALUE, Duration.ofMillis(10)),\n+                ImmutableIntAndDuration.of(QUERY_VALUE, Duration.ofMillis(6)),\n+                ImmutableIntAndDuration.of(QUERY_VALUE, Duration.ofMillis(2)));\n+        verifyNoMoreInteractions(query);\n+    }\n+\n+    @Test\n+    public void recoversFromFailureIfWeBecomeSuccessful() {\n+        setupDefaultClock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2MjA0MA=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjk2Mzg3OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzoyMjoyMVrOF02mrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODoxNjoyM1rOF1DMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2NDkwOA==", "bodyText": "bit obscure, is there a way we can refer to ClientOptions.NON_BLOCKING_READ_TIMEOUT.plus(Duration.ofSeconds(1)) as the lock timeout here?", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390964908", "createdAt": "2020-03-11T13:22:21Z", "author": {"login": "felixdesouza"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -193,4 +197,29 @@ public void canCreateNewClientsDynamically() {\n         }\n     }\n \n+    @Test\n+    public void lockRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.\n+        LockToken token = client.lock(LockRequest.of(LOCKS, DEFAULT_LOCK_TIMEOUT_MS)).getToken();\n+\n+        try {\n+            LockResponse response = client.lock(LockRequest.of(LOCKS, 15_000));\n+            assertThat(response.wasSuccessful()).isFalse();\n+        } finally {\n+            client.unlock(token);\n+        }\n+    }\n+\n+    @Test\n+    public void waitForLocksRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2NTQ5Ng==", "bodyText": "as an aside, whilst trying to find that option, it's unclear to me why we have clientQoS enabled as a default, why is that?", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r390965496", "createdAt": "2020-03-11T13:23:11Z", "author": {"login": "felixdesouza"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -193,4 +197,29 @@ public void canCreateNewClientsDynamically() {\n         }\n     }\n \n+    @Test\n+    public void lockRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.\n+        LockToken token = client.lock(LockRequest.of(LOCKS, DEFAULT_LOCK_TIMEOUT_MS)).getToken();\n+\n+        try {\n+            LockResponse response = client.lock(LockRequest.of(LOCKS, 15_000));\n+            assertThat(response.wasSuccessful()).isFalse();\n+        } finally {\n+            client.unlock(token);\n+        }\n+    }\n+\n+    @Test\n+    public void waitForLocksRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2NDkwOA=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE3MTI1MA==", "bodyText": "Yep, I'm OK with making that public.\nClientQoS: I don't know as well, other than that the normal default for that in most uses outside of Atlas should be enabled.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r391171250", "createdAt": "2020-03-11T18:16:23Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -193,4 +197,29 @@ public void canCreateNewClientsDynamically() {\n         }\n     }\n \n+    @Test\n+    public void lockRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.\n+        LockToken token = client.lock(LockRequest.of(LOCKS, DEFAULT_LOCK_TIMEOUT_MS)).getToken();\n+\n+        try {\n+            LockResponse response = client.lock(LockRequest.of(LOCKS, 15_000));\n+            assertThat(response.wasSuccessful()).isFalse();\n+        } finally {\n+            client.unlock(token);\n+        }\n+    }\n+\n+    @Test\n+    public void waitForLocksRequestCanBlockForTheFullTimeout() {\n+        // Test proxy timeout is 12.5 seconds, so 15 seconds suffices.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk2NDkwOA=="}, "originalCommit": {"oid": "616bc764419bb0ef9bd2fee8ee6486ca8b54952b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQ0MTEyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozMzowNVrOF1-yvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozMzozMVrOF1-zlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NzY0Ng==", "bodyText": "waitForLocks should not need to be handled here", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392147646", "createdAt": "2020-03-13T10:33:05Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Ints;\n+import com.palantir.atlasdb.timelock.api.ConjureLockRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+final class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        // The addition of a UUID takes place only at the Conjure level, so we must retry the same request.\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleLockRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    WaitForLocksResponse waitForLocks(WaitForLocksRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0Nzg2Mw==", "bodyText": "actually, ignore, this is still better...", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392147863", "createdAt": "2020-03-13T10:33:31Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Ints;\n+import com.palantir.atlasdb.timelock.api.ConjureLockRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+final class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        // The addition of a UUID takes place only at the Conjure level, so we must retry the same request.\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleLockRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    WaitForLocksResponse waitForLocks(WaitForLocksRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NzY0Ng=="}, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQ0NDQ0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNDowMlrOF1-0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNDoyM1rOF2KJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0ODE0Nw==", "bodyText": "can we Ints.checkedCast this? This is only likely to be a long if we have a bug.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392148147", "createdAt": "2020-03-13T10:34:02Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Ints;\n+import com.palantir.atlasdb.timelock.api.ConjureLockRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+final class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        // The addition of a UUID takes place only at the Conjure level, so we must retry the same request.\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleLockRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    WaitForLocksResponse waitForLocks(WaitForLocksRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleWaitForLocksRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    private static ConjureLockRequest clampLockRequestToDeadline(ConjureLockRequest request, Duration remainingTime) {\n+        return ConjureLockRequest.builder()\n+                .from(request)\n+                .acquireTimeoutMs(Ints.saturatedCast(remainingTime.toMillis()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMzgxNg==", "bodyText": "Sure, yeah, agree checkedCast is more appropriate.", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392333816", "createdAt": "2020-03-13T16:24:23Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Ints;\n+import com.palantir.atlasdb.timelock.api.ConjureLockRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+final class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        // The addition of a UUID takes place only at the Conjure level, so we must retry the same request.\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleLockRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    WaitForLocksResponse waitForLocks(WaitForLocksRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleWaitForLocksRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    private static ConjureLockRequest clampLockRequestToDeadline(ConjureLockRequest request, Duration remainingTime) {\n+        return ConjureLockRequest.builder()\n+                .from(request)\n+                .acquireTimeoutMs(Ints.saturatedCast(remainingTime.toMillis()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0ODE0Nw=="}, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQ1MDA0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNjowNVrOF1-4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNjoyNVrOF2KOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTA3MQ==", "bodyText": "can this be a RuntimeException? Should not see any checked exceptions", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392149071", "createdAt": "2020-03-13T10:36:05Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Ints;\n+import com.palantir.atlasdb.timelock.api.ConjureLockRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+final class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        // The addition of a UUID takes place only at the Conjure level, so we must retry the same request.\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleLockRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    WaitForLocksResponse waitForLocks(WaitForLocksRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleWaitForLocksRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    private static ConjureLockRequest clampLockRequestToDeadline(ConjureLockRequest request, Duration remainingTime) {\n+        return ConjureLockRequest.builder()\n+                .from(request)\n+                .acquireTimeoutMs(Ints.saturatedCast(remainingTime.toMillis()))\n+                .build();\n+    }\n+\n+    private LockResponse performSingleLockRequest(ConjureLockRequest request) {\n+        return namespacedConjureTimelockService\n+                .lock(request)\n+                .accept(ToLeasedLockResponse.INSTANCE);\n+    }\n+\n+    private WaitForLocksResponse performSingleWaitForLocksRequest(ConjureLockRequest request) {\n+        return ConjureLockRequests.fromConjure(namespacedConjureTimelockService.waitForLocks(request));\n+    }\n+\n+    private enum ToLeasedLockResponse implements ConjureLockResponse.Visitor<LockResponse> {\n+        INSTANCE;\n+\n+        @Override\n+        public LockResponse visitSuccessful(SuccessfulLockResponse value) {\n+            return LockResponse.successful(LeasedLockToken.of(value.getLockToken(), value.getLease()));\n+        }\n+\n+        @Override\n+        public LockResponse visitUnsuccessful(UnsuccessfulLockResponse value) {\n+            return LockResponse.timedOut();\n+        }\n+\n+        @Override\n+        public LockResponse visitUnknown(String unknownType) {\n+            throw new SafeIllegalStateException(\"Unknown response type\", SafeArg.of(\"type\", unknownType));\n+        }\n+    }\n+\n+    static class RemoteTimeoutRetryer {\n+        private final Clock clock;\n+\n+        @VisibleForTesting\n+        RemoteTimeoutRetryer(Clock clock) {\n+            this.clock = clock;\n+        }\n+\n+        static BlockEnforcingLockService.RemoteTimeoutRetryer createDefault() {\n+            return new BlockEnforcingLockService.RemoteTimeoutRetryer(Clock.systemUTC());\n+        }\n+\n+        <S, T> T attemptUntilTimeLimitOrException(\n+                S request,\n+                Duration duration,\n+                BiFunction<S, Duration, S> durationLimiter,\n+                Function<S, T> query,\n+                Predicate<T> isTimedOutResponse) {\n+            Instant now = clock.instant();\n+            Instant deadline = now.plus(duration);\n+            S currentRequest = request;\n+            T currentResponse = null;\n+\n+            while (now.isBefore(deadline)) {\n+                Duration remainingTime = Duration.between(now, deadline);\n+                currentRequest = durationLimiter.apply(currentRequest, remainingTime);\n+\n+                try {\n+                    currentResponse = query.apply(currentRequest);\n+                    if (!isTimedOutResponse.test(currentResponse)) {\n+                        return currentResponse;\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTAxMw==", "bodyText": "Yep, good point. Changed", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392335013", "createdAt": "2020-03-13T16:26:25Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.net.SocketTimeoutException;\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Ints;\n+import com.palantir.atlasdb.timelock.api.ConjureLockRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureLockResponse;\n+import com.palantir.atlasdb.timelock.api.SuccessfulLockResponse;\n+import com.palantir.atlasdb.timelock.api.UnsuccessfulLockResponse;\n+import com.palantir.lock.v2.LockRequest;\n+import com.palantir.lock.v2.LockResponse;\n+import com.palantir.lock.v2.WaitForLocksRequest;\n+import com.palantir.lock.v2.WaitForLocksResponse;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Ensures that clients actually attempt to acquire the lock for the full duration they claim they will block for,\n+ * unless they run into an exception that is unlikely to actually be a timeout. This is done to account for the reality\n+ * of bounded timeouts beneath us (e.g. in terms of the networking layer) when communicating with remote services.\n+ *\n+ * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n+ */\n+final class BlockEnforcingLockService {\n+    private final NamespacedConjureTimelockService namespacedConjureTimelockService;\n+    private final RemoteTimeoutRetryer timeoutRetryer;\n+\n+    private BlockEnforcingLockService(NamespacedConjureTimelockService namespacedConjureTimelockService,\n+            RemoteTimeoutRetryer timeoutRetryer) {\n+        this.namespacedConjureTimelockService = namespacedConjureTimelockService;\n+        this.timeoutRetryer = timeoutRetryer;\n+    }\n+\n+    static BlockEnforcingLockService create(NamespacedConjureTimelockService namespacedConjureTimelockService) {\n+        return new BlockEnforcingLockService(namespacedConjureTimelockService, RemoteTimeoutRetryer.createDefault());\n+    }\n+\n+    LockResponse lock(LockRequest request) {\n+        // The addition of a UUID takes place only at the Conjure level, so we must retry the same request.\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleLockRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    WaitForLocksResponse waitForLocks(WaitForLocksRequest request) {\n+        return timeoutRetryer.attemptUntilTimeLimitOrException(\n+                ConjureLockRequests.toConjure(request),\n+                Duration.ofMillis(request.getAcquireTimeoutMs()),\n+                BlockEnforcingLockService::clampLockRequestToDeadline,\n+                this::performSingleWaitForLocksRequest,\n+                response -> !response.wasSuccessful());\n+    }\n+\n+    private static ConjureLockRequest clampLockRequestToDeadline(ConjureLockRequest request, Duration remainingTime) {\n+        return ConjureLockRequest.builder()\n+                .from(request)\n+                .acquireTimeoutMs(Ints.saturatedCast(remainingTime.toMillis()))\n+                .build();\n+    }\n+\n+    private LockResponse performSingleLockRequest(ConjureLockRequest request) {\n+        return namespacedConjureTimelockService\n+                .lock(request)\n+                .accept(ToLeasedLockResponse.INSTANCE);\n+    }\n+\n+    private WaitForLocksResponse performSingleWaitForLocksRequest(ConjureLockRequest request) {\n+        return ConjureLockRequests.fromConjure(namespacedConjureTimelockService.waitForLocks(request));\n+    }\n+\n+    private enum ToLeasedLockResponse implements ConjureLockResponse.Visitor<LockResponse> {\n+        INSTANCE;\n+\n+        @Override\n+        public LockResponse visitSuccessful(SuccessfulLockResponse value) {\n+            return LockResponse.successful(LeasedLockToken.of(value.getLockToken(), value.getLease()));\n+        }\n+\n+        @Override\n+        public LockResponse visitUnsuccessful(UnsuccessfulLockResponse value) {\n+            return LockResponse.timedOut();\n+        }\n+\n+        @Override\n+        public LockResponse visitUnknown(String unknownType) {\n+            throw new SafeIllegalStateException(\"Unknown response type\", SafeArg.of(\"type\", unknownType));\n+        }\n+    }\n+\n+    static class RemoteTimeoutRetryer {\n+        private final Clock clock;\n+\n+        @VisibleForTesting\n+        RemoteTimeoutRetryer(Clock clock) {\n+            this.clock = clock;\n+        }\n+\n+        static BlockEnforcingLockService.RemoteTimeoutRetryer createDefault() {\n+            return new BlockEnforcingLockService.RemoteTimeoutRetryer(Clock.systemUTC());\n+        }\n+\n+        <S, T> T attemptUntilTimeLimitOrException(\n+                S request,\n+                Duration duration,\n+                BiFunction<S, Duration, S> durationLimiter,\n+                Function<S, T> query,\n+                Predicate<T> isTimedOutResponse) {\n+            Instant now = clock.instant();\n+            Instant deadline = now.plus(duration);\n+            S currentRequest = request;\n+            T currentResponse = null;\n+\n+            while (now.isBefore(deadline)) {\n+                Duration remainingTime = Duration.between(now, deadline);\n+                currentRequest = durationLimiter.apply(currentRequest, remainingTime);\n+\n+                try {\n+                    currentResponse = query.apply(currentRequest);\n+                    if (!isTimedOutResponse.test(currentResponse)) {\n+                        return currentResponse;\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTA3MQ=="}, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDQ1MzA2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/ConjureLockRequests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzowOFrOF1-6RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNzozMlrOF1-7AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTU3Mw==", "bodyText": "is the line above also broken?", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392149573", "createdAt": "2020-03-13T10:37:08Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/ConjureLockRequests.java", "diffHunk": "@@ -47,7 +47,7 @@ public static ConjureLockRequest toConjure(WaitForLocksRequest request) {\n         return ConjureLockRequest.builder()\n                 .lockDescriptors(toConjure(request.getLockDescriptors()))\n                 .clientDescription(request.getClientDescription())\n-                .requestId(UUID.randomUUID())\n+                .requestId(request.getRequestId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTc2MQ==", "bodyText": "answer - no", "url": "https://github.com/palantir/atlasdb/pull/4645#discussion_r392149761", "createdAt": "2020-03-13T10:37:32Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/client/ConjureLockRequests.java", "diffHunk": "@@ -47,7 +47,7 @@ public static ConjureLockRequest toConjure(WaitForLocksRequest request) {\n         return ConjureLockRequest.builder()\n                 .lockDescriptors(toConjure(request.getLockDescriptors()))\n                 .clientDescription(request.getClientDescription())\n-                .requestId(UUID.randomUUID())\n+                .requestId(request.getRequestId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTU3Mw=="}, "originalCommit": {"oid": "f922840ffd3192badbf10c817bf068e5cd8885fb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3123, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}