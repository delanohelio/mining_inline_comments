{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTAyMzE1", "number": 4806, "reviewThreads": {"totalCount": 114, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTozMTowN1rOEHiITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoyNjozNFrOEHkfow==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzM0NjY4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTozMTowN1rOGm8ulQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyNDoxNlrOGm-T-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5NDAzNw==", "bodyText": "So in JSON I believe these will be serialized as base64 or base32; can you make this visible in these constant for ease of reference? So like create the byte[] from base64/32 string.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443494037", "createdAt": "2020-06-22T11:31:07Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxOTk5Mw==", "bodyText": "cannot instantiate lock descriptors directly here as the constructor that takes bytes is package-private; I can add a comment for each descriptor though - I think that is probably the closest thing we can get here.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443519993", "createdAt": "2020-06-22T12:24:16Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5NDAzNw=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzM4MTAxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0Mzo0OFrOGm9E0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0Mzo0OFrOGm9E0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5OTczMQ==", "bodyText": "Reviewed, diff make sense.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443499731", "createdAt": "2020-06-22T11:43:48Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzM4ODUxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0NjoxMVrOGm9Jig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0NjoxMVrOGm9Jig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMDkzOA==", "bodyText": "Reviewed, diff makes sense.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443500938", "createdAt": "2020-06-22T11:46:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ1MzQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjowNzozOVrOGm9yWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjowNzozOVrOGm9yWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxMTM4Nw==", "bodyText": "Reviewed makes sense.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443511387", "createdAt": "2020-06-22T12:07:39Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ3NzA5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/resources/lockwatch-event-cache-output/getEventsForTransactionsReturnsSnapshotWithOldEvents/event-cache-2.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxNTowOFrOGm-A9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjozMjoxM1rOGm-koQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNTEyNg==", "bodyText": "So the fact that snapshot is at 6, but current version is 10, and you only have event 10 means, next snapshot computation would fail right? I think you should make sure your tests don't construct wrong situations. This also hints that we should probably put detection around this into the code?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443515126", "createdAt": "2020-06-22T12:15:08Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/resources/lockwatch-event-cache-output/getEventsForTransactionsReturnsSnapshotWithOldEvents/event-cache-2.json", "diffHunk": "@@ -0,0 +1,51 @@\n+{\n+  \"eventLog\" : {\n+    \"snapshot\" : {\n+      \"watches\" : [ {\n+        \"type\" : \"fullTable\",\n+        \"qualifiedTableRef\" : \"table\"\n+      } ],\n+      \"locked\" : [ {\n+        \"bytes\" : \"dGFibGUAAQ==\"\n+      }, {\n+        \"bytes\" : \"dGFibGUAAw==\"\n+      } ],\n+      \"snapshotVersion\" : {\n+        \"id\" : \"470c855e-f77b-44df-b56a-14d3df085dbc\",\n+        \"version\" : 6", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNDI1Nw==", "bodyText": "There is detection in the code, but it happens when events are pushed to the snapshotter - this is tested in both nonContiguousEventsThrows and snapshotMissedEventThrows. However, this only occurs when events are aged out and passed to the snapshotter. I think the key thing here is that I should just fix the version here as you are right, should not construct bad situations unless we want them.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443524257", "createdAt": "2020-06-22T12:32:13Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/resources/lockwatch-event-cache-output/getEventsForTransactionsReturnsSnapshotWithOldEvents/event-cache-2.json", "diffHunk": "@@ -0,0 +1,51 @@\n+{\n+  \"eventLog\" : {\n+    \"snapshot\" : {\n+      \"watches\" : [ {\n+        \"type\" : \"fullTable\",\n+        \"qualifiedTableRef\" : \"table\"\n+      } ],\n+      \"locked\" : [ {\n+        \"bytes\" : \"dGFibGUAAQ==\"\n+      }, {\n+        \"bytes\" : \"dGFibGUAAw==\"\n+      } ],\n+      \"snapshotVersion\" : {\n+        \"id\" : \"470c855e-f77b-44df-b56a-14d3df085dbc\",\n+        \"version\" : 6", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNTEyNg=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ4NDQzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/resources/lockwatch-event-cache-output/leaderChangeClearsCaches/event-cache-1.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxNzoyN1rOGm-Fkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjozNDozN1rOGm-plw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNjMwNw==", "bodyText": "Why isn't latestVersion set here?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443516307", "createdAt": "2020-06-22T12:17:27Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/resources/lockwatch-event-cache-output/leaderChangeClearsCaches/event-cache-1.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"eventLog\" : {\n+    \"snapshot\" : {\n+      \"watches\" : [ ],\n+      \"locked\" : [ ],\n+      \"snapshotVersion\" : null\n+    },\n+    \"eventStore\" : {\n+      \"eventMap\" : { }\n+    },\n+    \"latestVersion\" : null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNTUyNw==", "bodyText": "there has been a leader change, but has received a successful response - therefore we cannot take that response, but instead we want to treat it like a failed situation.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443525527", "createdAt": "2020-06-22T12:34:37Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/resources/lockwatch-event-cache-output/leaderChangeClearsCaches/event-cache-1.json", "diffHunk": "@@ -0,0 +1,17 @@\n+{\n+  \"eventLog\" : {\n+    \"snapshot\" : {\n+      \"watches\" : [ ],\n+      \"locked\" : [ ],\n+      \"snapshotVersion\" : null\n+    },\n+    \"eventStore\" : {\n+      \"eventMap\" : { }\n+    },\n+    \"latestVersion\" : null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNjMwNw=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ4OTM5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxODo1OFrOGm-Ipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjozNjowNVrOGm-sog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzA5NA==", "bodyText": "Actually shouldn't this throw? You have received a success update from timelock by you don't know what the snapshot is.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443517094", "createdAt": "2020-06-22T12:18:58Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzk3OA==", "bodyText": "Ah, I see you handle this. I would just say that this is probably an unexpected state to be in, but maybe possible if leaders switch quickly somehow, and given concurrency between startTransaction and commitTimestamp calls.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443517978", "createdAt": "2020-06-22T12:20:34Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzA5NA=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNjMwNg==", "bodyText": "yeah - you can imagine a case where the success update comes before the snapshot somehow, so in that case we just clear the cache outright, and wait for the snapshot update.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443526306", "createdAt": "2020-06-22T12:36:05Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzA5NA=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzUwNTA0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMzoxMVrOGm-R3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMzoxMVrOGm-R3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxOTQ1NA==", "bodyText": "Reviewed", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443519454", "createdAt": "2020-06-22T12:23:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzUwNzA2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMzo1MlrOGm-TKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjozNjo0MFrOGm-t6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxOTc4NA==", "bodyText": "Yeah, I think this is what I mean: you should throw immediately when you discover a discontinuity, so probably that validation should be pushed up from snapshot to event cache.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443519784", "createdAt": "2020-06-22T12:23:52Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void nonContiguousEventsThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(WATCH_EVENT, LOCK_EVENT, LOCK_EVENT_2)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 20L,\n+                        ImmutableList.of(UnlockEvent.builder(ImmutableSet.of()).build(20L))));\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(START_TS))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events form a non-contiguous sequence\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNjYzNA==", "bodyText": "Reasonable - I'll see what that looks like now.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443526634", "createdAt": "2020-06-22T12:36:40Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void nonContiguousEventsThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(WATCH_EVENT, LOCK_EVENT, LOCK_EVENT_2)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 20L,\n+                        ImmutableList.of(UnlockEvent.builder(ImmutableSet.of()).build(20L))));\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(START_TS))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events form a non-contiguous sequence\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxOTc4NA=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzUwNzc4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyNDowOVrOGm-Ttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyNDowOVrOGm-Ttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxOTkyNw==", "bodyText": "Same here.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443519927", "createdAt": "2020-06-22T12:24:09Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void nonContiguousEventsThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(WATCH_EVENT, LOCK_EVENT, LOCK_EVENT_2)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 20L,\n+                        ImmutableList.of(UnlockEvent.builder(ImmutableSet.of()).build(20L))));\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(START_TS))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events form a non-contiguous sequence\");\n+    }\n+\n+    @Test\n+    public void snapshotMissedEventThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 5L, ImmutableList.of(UNLOCK_EVENT)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(LOCK_EVENT)));\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(16L))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events missing between last snapshot and this batch of events\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzUxODIxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyNzoxN1rOGm-aZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyNzoxN1rOGm-aZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMTYzOQ==", "bodyText": "I think I am missing a test where you have at least 2 successful updates.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443521639", "createdAt": "2020-06-22T12:27:17Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzUyNjk5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyOTo1MlrOGm-f2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjo0Nzo1NFrOGm_GYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMzAzMg==", "bodyText": "Let's add a test where you race some updates, to simulate 2 concurrent calls (startTransactions and commitTimestamps): they will both start with the same version being sent to timelock, and let's say return same events, so second update should be no-op.\nSo basically something like:\neventCache.processStartTranscationUpdate(TIMESTAMPS, UPDATE);\neventCache.processStartTransactionUpdate(TIMESTAMPS2, UPDATE);\n\nEvents are the same, so you should remember the new timestamps, but event store should not change.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443523032", "createdAt": "2020-06-22T12:29:52Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void nonContiguousEventsThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(WATCH_EVENT, LOCK_EVENT, LOCK_EVENT_2)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 20L,\n+                        ImmutableList.of(UnlockEvent.builder(ImmutableSet.of()).build(20L))));\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(START_TS))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events form a non-contiguous sequence\");\n+    }\n+\n+    @Test\n+    public void snapshotMissedEventThrows() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzMjg5OA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443532898", "createdAt": "2020-06-22T12:47:54Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void nonContiguousEventsThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(WATCH_EVENT, LOCK_EVENT, LOCK_EVENT_2)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 20L,\n+                        ImmutableList.of(UnlockEvent.builder(ImmutableSet.of()).build(20L))));\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(START_TS))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events form a non-contiguous sequence\");\n+    }\n+\n+    @Test\n+    public void snapshotMissedEventThrows() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyMzAzMg=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzU0MDQ1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjozNDowNVrOGm-oXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjozNDowNVrOGm-oXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUyNTIxNQ==", "bodyText": "Another test to simulate concurrent calls: 2 calls come back but one of them has more events then the other. So again, second call with less events is no-op. So something like:\neventCache.processStartTranscationUpdate(TIMESTAMPS, BIG_UPDATE);\neventCache.processStartTranscationUpdate(TIMESTAMPS2, SMALL_UPDATE)\n\nWhere BIG_UPDATE, say, has events [1,2,3,4,5] and SMALL_UPDATE has [1,2,3]. Again, transactions should be remembered, by nothing in the event log should change.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443525215", "createdAt": "2020-06-22T12:34:05Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        verifyStage();\n+\n+        Set<Long> secondTimestamps = ImmutableSet.of(5L, 123L);\n+        eventCache.processStartTransactionsUpdate(secondTimestamps, SUCCESS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getCommitUpdateDoesNotContainCommitLocks() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        verifyStage();\n+\n+        CommitUpdate commitUpdate = eventCache.getCommitUpdate(1L);\n+        assertThat(commitUpdate.accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);\n+    }\n+\n+    @Test\n+    public void cacheClearedOnSnapshotUpdate() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate snapshot2 = LockWatchStateUpdate.snapshot(LEADER, 7L, ImmutableSet.of(DESCRIPTOR),\n+                ImmutableSet.of());\n+        Set<Long> timestamps3 = ImmutableSet.of(123L, 1255L);\n+        eventCache.processStartTransactionsUpdate(timestamps3, snapshot2);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processGetCommitTimestampsUpdate(COMMIT_UPDATE, SUCCESS);\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+\n+        LockWatchStateUpdate success2 = LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(LOCK_EVENT_2));\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, success2);\n+        verifyStage();\n+\n+        TransactionsLockWatchUpdate results = eventCache.getUpdateForTransactions(TIMESTAMPS_2, Optional.empty());\n+        assertThat(results.clearCache()).isTrue();\n+        assertThat(results.startTsToSequence()).containsExactlyInAnyOrderEntriesOf(\n+                ImmutableMap.of(16L, IdentifiedVersion.of(LEADER, 10L)));\n+        assertThat(results.events()).containsExactly(\n+                LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                LOCK_EVENT_2);\n+    }\n+\n+    @Test\n+    public void failedUpdateClearsAllCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, LockWatchStateUpdate.failed(LEADER));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void leaderChangeClearsCaches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(EVENT2_UUID, 4L, ImmutableList.of()));\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void removingEntriesRetentionsEventsInLog() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n+        verifyStage();\n+\n+        eventCache.removeTransactionStateFromCache(START_TS);\n+        verifyStage();\n+    }\n+\n+    @Test\n+    public void nonContiguousEventsThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS_2,\n+                LockWatchStateUpdate.success(LEADER, 10L, ImmutableList.of(WATCH_EVENT, LOCK_EVENT, LOCK_EVENT_2)));\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(23L, 55L),\n+                LockWatchStateUpdate.success(LEADER, 20L,\n+                        ImmutableList.of(UnlockEvent.builder(ImmutableSet.of()).build(20L))));\n+        verifyStage();\n+        assertThatThrownBy(() -> eventCache.removeTransactionStateFromCache(START_TS))\n+                .isExactlyInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Events form a non-contiguous sequence\");\n+    }\n+\n+    @Test\n+    public void snapshotMissedEventThrows() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzczNDExOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/CacheUpdate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoyNjozNFrOGnAhKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoyNjozNFrOGnAhKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1NjEzOQ==", "bodyText": "Wonky diff!", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443556139", "createdAt": "2020-06-22T13:26:34Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/CacheUpdate.java", "diffHunk": "@@ -14,19 +14,28 @@\n  * limitations under the License.\n  */\n \n-package com.palantir.lock.watch;\n+package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n-\n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchUpdate getUpdateForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+\n+import com.palantir.lock.watch.IdentifiedVersion;\n+\n+final class CacheUpdate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18748986c0709df9422558798214a38502733c2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTk2ODk1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTozMTo1OVrOGbQfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjowNDo1NFrOGbSImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIzNDgzNw==", "bodyText": "What happens when timestampToVersion is empty?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431234837", "createdAt": "2020-05-27T15:31:59Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final ConcurrentSkipListMap<Long, LockWatchEvent> eventLog;\n+    private volatile Optional<IdentifiedVersion> latestVersion;\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return new ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+        this.eventLog = new ConcurrentSkipListMap<>();\n+        this.latestVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(\n+            LockWatchStateUpdate update,\n+            Optional<IdentifiedVersion> earliestVersion) {\n+        ProcessingVisitor visitor;\n+        if (newLeader(update)) {\n+            visitor = new NewLeaderVisitor(earliestVersion);\n+        } else {\n+            visitor = new ProcessingVisitor(earliestVersion);\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        Optional<IdentifiedVersion> versionInclusive =\n+                version.map(oldVersion -> IdentifiedVersion.of(oldVersion.id(), oldVersion.version() + 1));\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        /*\n+        There are three cases to consider where we would return a snapshot:\n+            1: they provide an empty version;\n+            2. their version has a different UUID (i.e. refers to the wrong leader);\n+            3. their version is behind our log.\n+        Note that if their version is ahead of our log, or we do not have a version, an exception is thrown instead.\n+         */\n+        if (!versionInclusive.isPresent()\n+                || !versionInclusive.get().id().equals(currentVersion.id())\n+                || eventLog.floorKey(versionInclusive.get().version()) == null) {\n+            return TransactionsLockWatchEvents.failure(snapshotUpdater.getSnapshot(currentVersion));\n+        }\n+\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba284b1ae7e88d796761ec1ae4cb2d5a9439bf44"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2MTg0OA==", "bodyText": "According to Collections.max: @throws NoSuchElementException if the collection is empty.\nI think throwing is the right behaviour (if there are no elements, then there will be no updates anyway, so that does not make sense), but I'll change this to use a Preconditions instead.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431261848", "createdAt": "2020-05-27T16:04:54Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final ConcurrentSkipListMap<Long, LockWatchEvent> eventLog;\n+    private volatile Optional<IdentifiedVersion> latestVersion;\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return new ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+        this.eventLog = new ConcurrentSkipListMap<>();\n+        this.latestVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(\n+            LockWatchStateUpdate update,\n+            Optional<IdentifiedVersion> earliestVersion) {\n+        ProcessingVisitor visitor;\n+        if (newLeader(update)) {\n+            visitor = new NewLeaderVisitor(earliestVersion);\n+        } else {\n+            visitor = new ProcessingVisitor(earliestVersion);\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        Optional<IdentifiedVersion> versionInclusive =\n+                version.map(oldVersion -> IdentifiedVersion.of(oldVersion.id(), oldVersion.version() + 1));\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        /*\n+        There are three cases to consider where we would return a snapshot:\n+            1: they provide an empty version;\n+            2. their version has a different UUID (i.e. refers to the wrong leader);\n+            3. their version is behind our log.\n+        Note that if their version is ahead of our log, or we do not have a version, an exception is thrown instead.\n+         */\n+        if (!versionInclusive.isPresent()\n+                || !versionInclusive.get().id().equals(currentVersion.id())\n+                || eventLog.floorKey(versionInclusive.get().version()) == null) {\n+            return TransactionsLockWatchEvents.failure(snapshotUpdater.getSnapshot(currentVersion));\n+        }\n+\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIzNDgzNw=="}, "originalCommit": {"oid": "ba284b1ae7e88d796761ec1ae4cb2d5a9439bf44"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTc4NTU5OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CommitUpdate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1MzozNVrOGb2LdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NDozM1rOGb2OUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MjQwNQ==", "bodyText": "should this be aware of table references + cells?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431852405", "createdAt": "2020-05-28T13:53:35Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CommitUpdate.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface CommitUpdate {\n+    long commitTs();\n+\n+    <T> T accept(Visitor<T> visitor);\n+\n+    @Value.Immutable\n+    interface InvalidateAll extends CommitUpdate {\n+        @Override\n+        default <T> T accept(Visitor<T> visitor) {\n+            return visitor.visit(this);\n+        }\n+    }\n+\n+    @Value.Immutable\n+    interface InvalidateSome extends CommitUpdate {\n+        Set<LockDescriptor> invalidatedLocks();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MzEzOA==", "bodyText": "I don't actually know the answer here - could see it being easier or harder to implement in various places as a consequence", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431853138", "createdAt": "2020-05-28T13:54:33Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CommitUpdate.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface CommitUpdate {\n+    long commitTs();\n+\n+    <T> T accept(Visitor<T> visitor);\n+\n+    @Value.Immutable\n+    interface InvalidateAll extends CommitUpdate {\n+        @Override\n+        default <T> T accept(Visitor<T> visitor) {\n+            return visitor.visit(this);\n+        }\n+    }\n+\n+    @Value.Immutable\n+    interface InvalidateSome extends CommitUpdate {\n+        Set<LockDescriptor> invalidatedLocks();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MjQwNQ=="}, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTc5MjE4OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NTowMlrOGb2PuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NToxN1rOGb2Qag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MzQ5Ng==", "bodyText": "you should probably throw if they're incomparable?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431853496", "createdAt": "2020-05-28T13:55:02Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -21,9 +21,19 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n-public interface IdentifiedVersion {\n+public interface IdentifiedVersion extends Comparable<IdentifiedVersion> {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    @Override\n+    default int compareTo(IdentifiedVersion otherVersion) {\n+        // Compare on version only; if used for equality, will not consider leader id\n+        return Long.compare(version(), otherVersion.version());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MzY3NA==", "bodyText": "and then probably have a comparator and not make them be comparable?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431853674", "createdAt": "2020-05-28T13:55:17Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -21,9 +21,19 @@\n import org.immutables.value.Value;\n \n @Value.Immutable\n-public interface IdentifiedVersion {\n+public interface IdentifiedVersion extends Comparable<IdentifiedVersion> {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    @Override\n+    default int compareTo(IdentifiedVersion otherVersion) {\n+        // Compare on version only; if used for equality, will not consider leader id\n+        return Long.compare(version(), otherVersion.version());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MzQ5Ng=="}, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTc5NTExOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionsLockWatchEvents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NTo0MFrOGb2Rpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NTo0MFrOGb2Rpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1Mzk5MQ==", "bodyText": "IdentifiedVersion needs to change name", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431853991", "createdAt": "2020-05-28T13:55:40Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionsLockWatchEvents.java", "diffHunk": "@@ -50,7 +50,7 @@ static ForcedSnapshot failure(LockWatchStateUpdate.Snapshot snapshot) {\n         @Value.Parameter\n         List<LockWatchEvent> events();\n         @Value.Parameter\n-        Map<Long, Long> startTsToSequence();\n+        Map<Long, IdentifiedVersion> startTsToSequence();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTgwMjMwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NzowNVrOGb2WLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NzowNVrOGb2WLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1NTE1MQ==", "bodyText": "split process update and aging out older entries", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431855151", "createdAt": "2020-05-28T13:57:05Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface ClientLockWatchEventLog {\n+    TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version);\n+    Optional<Set<LockDescriptor>> getEventsBetweenVersions(\n+            IdentifiedVersion startVersion,\n+            IdentifiedVersion endVersion);\n+    Optional<IdentifiedVersion> getLatestKnownVersion();\n+    Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update, Optional<IdentifiedVersion> earliestVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTgwNDY2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NzozOVrOGb2Xzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1ODowNFrOGb2ZAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1NTU2Ng==", "bodyText": "remove Concurrent + volatile", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431855566", "createdAt": "2020-05-28T13:57:39Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final ConcurrentSkipListMap<Long, LockWatchEvent> eventMap = new ConcurrentSkipListMap<>();\n+    private volatile Optional<IdentifiedVersion> latestVersion = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1NTg3Mg==", "bodyText": "@GuardedBy(\"this\")", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431855872", "createdAt": "2020-05-28T13:58:04Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final ConcurrentSkipListMap<Long, LockWatchEvent> eventMap = new ConcurrentSkipListMap<>();\n+    private volatile Optional<IdentifiedVersion> latestVersion = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1NTU2Ng=="}, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTgxMDA3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1ODo1NlrOGb2bYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1ODo1NlrOGb2bYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1NjQ4Mw==", "bodyText": "either mark final or just factor into separate method createVisitor", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431856483", "createdAt": "2020-05-28T13:58:56Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final ConcurrentSkipListMap<Long, LockWatchEvent> eventMap = new ConcurrentSkipListMap<>();\n+    private volatile Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(\n+            LockWatchStateUpdate update,\n+            Optional<IdentifiedVersion> earliestVersion) {\n+        ProcessingVisitor visitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTgxNzQxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowMDoyNVrOGb2f-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowMDoyNVrOGb2f-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1NzY1Nw==", "bodyText": "boolean providedEmptyVersion = ...\nboolean versionHasDifferentUuid = ...\nboolean tooFarBehindLog =...\nif (providedEmptyVersion || versionHasDifferentUuid || tooFarBehindLog) {\n    return snapshot\n}", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431857657", "createdAt": "2020-05-28T14:00:25Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final ConcurrentSkipListMap<Long, LockWatchEvent> eventMap = new ConcurrentSkipListMap<>();\n+    private volatile Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(\n+            LockWatchStateUpdate update,\n+            Optional<IdentifiedVersion> earliestVersion) {\n+        ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor(earliestVersion);\n+        } else {\n+            visitor = new ProcessingVisitor(earliestVersion);\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Optional<IdentifiedVersion> versionInclusive = version.map(this::getInclusiveVersion);\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values());\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(toVersion);\n+\n+        /*\n+        There are three cases to consider where we would return a snapshot:\n+            1: they provide an empty version;\n+            2. their version has a different UUID (i.e. refers to the wrong leader);\n+            3. their version is behind our log.\n+        Note that if their version is ahead of our log, or we do not have a version, an exception is thrown instead.\n+         */\n+        if (!versionInclusive.isPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38e8dd49dca47ec5460a8c2fa40d079bf463d7c6"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDA1MjgyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDo0NzozN1rOGb41sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowODozOFrOGcWz1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTk4NA==", "bodyText": "Maybe I'm missing something here, but I don't see how it is possible to have sufficient information to exclude a set of locks based solely on the LockToken. At the time that this is taken out in the commit flow, we do have access to Set<LockDescriptor> which we register; I wonder if it is worth changing this interface to use that instead - it would certainly be easier and potentially just the right thing to do, but open to suggestions.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431895984", "createdAt": "2020-05-28T14:47:37Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.v2.LockToken;\n+\n+public interface LockWatchEventCache {\n+    /**\n+     * Returns the last known lock watch version for the cache.\n+     */\n+    Optional<IdentifiedVersion> lastKnownVersion();\n+\n+    /**\n+     * Updates the cache with the update, and identifies the given timestamps with that lock watch state.\n+     */\n+    void processTransactionUpdate(Collection<Long> startTimestamps, LockWatchStateUpdate update);\n+\n+    /**\n+     * Updates the cache with the update, and calculates the {@link CommitUpdate} taking into account all changes to\n+     * lock watch state since the start of the transaction, excluding the transaction's own commit locks.\n+     *\n+     * @param startTs          start timestamp of the transaction\n+     * @param commitTs         commit timestamp of the transaction\n+     * @param commitLocksToken lock token for the transactions's commit locks\n+     * @return the commit update for this transaction's precommit condition\n+     */\n+    CommitUpdate getCommitUpdate(long startTs, long commitTs, LockToken commitLocksToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94446d78465b0a42c646c0a747d20a45a5d7d561"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMTU4NA==", "bodyText": "Should be possible: each LockEvent/UnlockEvent has the LockToken; just need to figure out what the right id for filtering is?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431921584", "createdAt": "2020-05-28T15:22:08Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.v2.LockToken;\n+\n+public interface LockWatchEventCache {\n+    /**\n+     * Returns the last known lock watch version for the cache.\n+     */\n+    Optional<IdentifiedVersion> lastKnownVersion();\n+\n+    /**\n+     * Updates the cache with the update, and identifies the given timestamps with that lock watch state.\n+     */\n+    void processTransactionUpdate(Collection<Long> startTimestamps, LockWatchStateUpdate update);\n+\n+    /**\n+     * Updates the cache with the update, and calculates the {@link CommitUpdate} taking into account all changes to\n+     * lock watch state since the start of the transaction, excluding the transaction's own commit locks.\n+     *\n+     * @param startTs          start timestamp of the transaction\n+     * @param commitTs         commit timestamp of the transaction\n+     * @param commitLocksToken lock token for the transactions's commit locks\n+     * @return the commit update for this transaction's precommit condition\n+     */\n+    CommitUpdate getCommitUpdate(long startTs, long commitTs, LockToken commitLocksToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTk4NA=="}, "originalCommit": {"oid": "94446d78465b0a42c646c0a747d20a45a5d7d561"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMzM4Mg==", "bodyText": "aaah\nLockWatchEvent obscures things by a layer, I missed that. Good catch!", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431923382", "createdAt": "2020-05-28T15:24:44Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.v2.LockToken;\n+\n+public interface LockWatchEventCache {\n+    /**\n+     * Returns the last known lock watch version for the cache.\n+     */\n+    Optional<IdentifiedVersion> lastKnownVersion();\n+\n+    /**\n+     * Updates the cache with the update, and identifies the given timestamps with that lock watch state.\n+     */\n+    void processTransactionUpdate(Collection<Long> startTimestamps, LockWatchStateUpdate update);\n+\n+    /**\n+     * Updates the cache with the update, and calculates the {@link CommitUpdate} taking into account all changes to\n+     * lock watch state since the start of the transaction, excluding the transaction's own commit locks.\n+     *\n+     * @param startTs          start timestamp of the transaction\n+     * @param commitTs         commit timestamp of the transaction\n+     * @param commitLocksToken lock token for the transactions's commit locks\n+     * @return the commit update for this transaction's precommit condition\n+     */\n+    CommitUpdate getCommitUpdate(long startTs, long commitTs, LockToken commitLocksToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTk4NA=="}, "originalCommit": {"oid": "94446d78465b0a42c646c0a747d20a45a5d7d561"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NzAzMA==", "bodyText": "Unlock events don't have a lock token, but then we don't strictly care about unlock events in this update at all; we only want the set of lock descriptors (excluding commit locks) that have been taken out at some point in this transaction; if lock X was locked then unlocked, we clearly still want to return X (i.e. the unlock events are irrelevant for the commit update / conflict checking of cached reads).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r432387030", "createdAt": "2020-05-29T10:08:38Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.v2.LockToken;\n+\n+public interface LockWatchEventCache {\n+    /**\n+     * Returns the last known lock watch version for the cache.\n+     */\n+    Optional<IdentifiedVersion> lastKnownVersion();\n+\n+    /**\n+     * Updates the cache with the update, and identifies the given timestamps with that lock watch state.\n+     */\n+    void processTransactionUpdate(Collection<Long> startTimestamps, LockWatchStateUpdate update);\n+\n+    /**\n+     * Updates the cache with the update, and calculates the {@link CommitUpdate} taking into account all changes to\n+     * lock watch state since the start of the transaction, excluding the transaction's own commit locks.\n+     *\n+     * @param startTs          start timestamp of the transaction\n+     * @param commitTs         commit timestamp of the transaction\n+     * @param commitLocksToken lock token for the transactions's commit locks\n+     * @return the commit update for this transaction's precommit condition\n+     */\n+    CommitUpdate getCommitUpdate(long startTs, long commitTs, LockToken commitLocksToken);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTk4NA=="}, "originalCommit": {"oid": "94446d78465b0a42c646c0a747d20a45a5d7d561"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDA1NzQ4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDo0ODoyNVrOGb44Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDo0ODoyNVrOGb44Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NjY3OQ==", "bodyText": "Todo - consider how to handle the commitLocksToken - there is a comment above discussing my concern here.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431896679", "createdAt": "2020-05-28T14:48:25Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * Notes on concurrency: all public methods in this class are synchronised: this removes any concern that the timestamp\n+ * mapping will be modified while also being cleared or read. For processing updates and getting events, this should not\n+ * have a performance impact as these methods will be called in a single-threaded manner anyway (via an autobatcher),\n+ * but the method to remove entries is not necessarily called as such, and may cause some impact on performance.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, IdentifiedVersion> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions = TreeMultimap.create();\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processTransactionUpdate(\n+            Collection<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        Optional<IdentifiedVersion> latestVersion = eventLog.processUpdate(update);\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+\n+        if (!(latestVersion.isPresent()\n+                && currentVersion.isPresent()\n+                && latestVersion.get().id().equals(currentVersion.get().id())\n+                && update.accept(SuccessVisitor.INSTANCE))) {\n+            timestampMap.clear();\n+            aliveVersions.clear();\n+        }\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> {\n+                    timestampMap.put(timestamp, version);\n+                    aliveVersions.put(version, timestamp);\n+                }));\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs, long commitTs, LockToken commitLocksToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94446d78465b0a42c646c0a747d20a45a5d7d561"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDIyMTE4OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNToyMVrOGb6ikQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNToyMVrOGb6ikQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMzg1Nw==", "bodyText": "worth having an error message", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431923857", "createdAt": "2020-05-28T15:25:21Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    static Comparator<IdentifiedVersion> comparator() {\n+        return (version1, version2) -> {\n+            Preconditions.checkArgument(version1.id().equals(version2.id()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDIyMjIwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNTozN1rOGb6jQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNzo1MlrOGb6p-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDAzNQ==", "bodyText": "why is this Optional?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431924035", "createdAt": "2020-05-28T15:25:37Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface ClientLockWatchEventLog {\n+    TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version);\n+    Optional<Set<LockDescriptor>> getEventsBetweenVersions(\n+            IdentifiedVersion startVersion,\n+            IdentifiedVersion endVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDI2MA==", "bodyText": "also, why does this not return a TransactionsLockWatchEvents?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431924260", "createdAt": "2020-05-28T15:25:55Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface ClientLockWatchEventLog {\n+    TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version);\n+    Optional<Set<LockDescriptor>> getEventsBetweenVersions(\n+            IdentifiedVersion startVersion,\n+            IdentifiedVersion endVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDAzNQ=="}, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNTc1Mw==", "bodyText": "I could equally return that and have the above (i.e. the cache) turn that into a commit update; this approach just makes the cache not worry about events themselves.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431925753", "createdAt": "2020-05-28T15:27:52Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface ClientLockWatchEventLog {\n+    TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version);\n+    Optional<Set<LockDescriptor>> getEventsBetweenVersions(\n+            IdentifiedVersion startVersion,\n+            IdentifiedVersion endVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDAzNQ=="}, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDIyNDg1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNjoxM1rOGb6lAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNjoxM1rOGb6lAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDQ4Mg==", "bodyText": "probably add this annotation to all the fields", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431924482", "createdAt": "2020-05-28T15:26:13Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDIzODMyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyOTowMlrOGb6tjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMDoxNlrOGb6xXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNjY3MQ==", "bodyText": "factor out constants 'INCLUSIVE', so the reader doesn't have to understand what 'true' means. Also, for stuff like this, do ImmutableList.copyOf(", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431926671", "createdAt": "2020-05-28T15:29:02Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    @Override\n+    public synchronized void removeOldEntries(IdentifiedVersion earliestVersion) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved =\n+                eventMap.headMap(earliestVersion.version()).entrySet();\n+        snapshotUpdater.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Optional<IdentifiedVersion> versionInclusive = version.map(this::createInclusiveVersion);\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values(), IdentifiedVersion.comparator());\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(toVersion);\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            return TransactionsLockWatchEvents.failure(snapshotUpdater.getSnapshot(currentVersion));\n+        }\n+\n+        if (eventMap.isEmpty()) {\n+            return TransactionsLockWatchEvents.success(ImmutableList.of(), timestampToVersion);\n+        }\n+\n+        IdentifiedVersion fromVersion = versionInclusive.get();\n+\n+        return TransactionsLockWatchEvents.success(\n+                new ArrayList<>(eventMap.subMap(fromVersion.version(), true, toVersion.version(), true).values()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNzY0Ng==", "bodyText": "(because when it can be immutable for free, it should be :))\nadvantages: frequently immutables style classes will copy to ensure immutability, and ImmutableList.copyOf() is a no-op if you're copying an immutable list.\nAlso, immutablelist is marginally faster than arraylist because you don't have to do bounds checking. But really immutability is what you want.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431927646", "createdAt": "2020-05-28T15:30:16Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    @Override\n+    public synchronized void removeOldEntries(IdentifiedVersion earliestVersion) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved =\n+                eventMap.headMap(earliestVersion.version()).entrySet();\n+        snapshotUpdater.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Optional<IdentifiedVersion> versionInclusive = version.map(this::createInclusiveVersion);\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values(), IdentifiedVersion.comparator());\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(toVersion);\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            return TransactionsLockWatchEvents.failure(snapshotUpdater.getSnapshot(currentVersion));\n+        }\n+\n+        if (eventMap.isEmpty()) {\n+            return TransactionsLockWatchEvents.success(ImmutableList.of(), timestampToVersion);\n+        }\n+\n+        IdentifiedVersion fromVersion = versionInclusive.get();\n+\n+        return TransactionsLockWatchEvents.success(\n+                new ArrayList<>(eventMap.subMap(fromVersion.version(), true, toVersion.version(), true).values()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNjY3MQ=="}, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI0ODY1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMToxMFrOGb60Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMToxMFrOGb60Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyODM2Nw==", "bodyText": "you should define this method (in as far as it has to be a different method) in terms of the other one. The logic is basically the same. But I don't think should have its own return type, so should basically be the same method.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431928367", "createdAt": "2020-05-28T15:31:10Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    @Override\n+    public synchronized void removeOldEntries(IdentifiedVersion earliestVersion) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved =\n+                eventMap.headMap(earliestVersion.version()).entrySet();\n+        snapshotUpdater.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Optional<IdentifiedVersion> versionInclusive = version.map(this::createInclusiveVersion);\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values(), IdentifiedVersion.comparator());\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(toVersion);\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            return TransactionsLockWatchEvents.failure(snapshotUpdater.getSnapshot(currentVersion));\n+        }\n+\n+        if (eventMap.isEmpty()) {\n+            return TransactionsLockWatchEvents.success(ImmutableList.of(), timestampToVersion);\n+        }\n+\n+        IdentifiedVersion fromVersion = versionInclusive.get();\n+\n+        return TransactionsLockWatchEvents.success(\n+                new ArrayList<>(eventMap.subMap(fromVersion.version(), true, toVersion.version(), true).values()),\n+                timestampToVersion);\n+    }\n+\n+    @Override\n+    public synchronized Optional<Set<LockDescriptor>> getEventsBetweenVersions(\n+            IdentifiedVersion startVersion,\n+            IdentifiedVersion endVersion) {\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        IdentifiedVersion fromVersion = createInclusiveVersion(startVersion);\n+\n+        if (differentLeaderOrTooFarBehind(currentVersion, fromVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI3ODk5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozNzo1N1rOGb7HpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozNzo1N1rOGb7HpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMzM0OA==", "bodyText": "so there's an interesting class of bug with this sort of thing. Basically, you can partially succeed - accept some but not all of the writes, and then fail (e.g. what if resetWithSnapshot fails below for some reason). Then you're in a corrupt state.\nIt's relatively straightforward to cover this. Basically, you have a boolean field 'failed' and before you mutate any state, you set it to true, and then false before you're done. Before your reading methods, you checkState(!failed) and if it fails for any reason you know you have a bug.\nA different thing is to have immutable state which you replace on success (e.g. make transactional), but that changes your code style a fair bit.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431933348", "createdAt": "2020-05-28T15:37:57Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        update.accept(visitor);\n+        return latestVersion;\n+    }\n+\n+    @Override\n+    public synchronized void removeOldEntries(IdentifiedVersion earliestVersion) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved =\n+                eventMap.headMap(earliestVersion.version()).entrySet();\n+        snapshotUpdater.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    /**\n+     * @param timestampToVersion mapping from timestamp to identified version from client-side event cache;\n+     * @param version            latest version that the client knows about; should be before timestamps in the\n+     *                           mapping;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Map<Long, IdentifiedVersion> timestampToVersion,\n+            Optional<IdentifiedVersion> version) {\n+        Optional<IdentifiedVersion> versionInclusive = version.map(this::createInclusiveVersion);\n+        IdentifiedVersion toVersion = Collections.max(timestampToVersion.values(), IdentifiedVersion.comparator());\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(toVersion);\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            return TransactionsLockWatchEvents.failure(snapshotUpdater.getSnapshot(currentVersion));\n+        }\n+\n+        if (eventMap.isEmpty()) {\n+            return TransactionsLockWatchEvents.success(ImmutableList.of(), timestampToVersion);\n+        }\n+\n+        IdentifiedVersion fromVersion = versionInclusive.get();\n+\n+        return TransactionsLockWatchEvents.success(\n+                new ArrayList<>(eventMap.subMap(fromVersion.version(), true, toVersion.version(), true).values()),\n+                timestampToVersion);\n+    }\n+\n+    @Override\n+    public synchronized Optional<Set<LockDescriptor>> getEventsBetweenVersions(\n+            IdentifiedVersion startVersion,\n+            IdentifiedVersion endVersion) {\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        IdentifiedVersion fromVersion = createInclusiveVersion(startVersion);\n+\n+        if (differentLeaderOrTooFarBehind(currentVersion, fromVersion)) {\n+            return Optional.empty();\n+        }\n+\n+        if (eventMap.isEmpty()) {\n+            return Optional.of(ImmutableSet.of());\n+        }\n+\n+        List<LockWatchEvent> events =\n+                new ArrayList<>(eventMap.subMap(fromVersion.version(), true, endVersion.version(), true).values());\n+        Set<LockDescriptor> locksTakenOut = new HashSet<>();\n+        events.forEach(event -> locksTakenOut.addAll(event.accept(LockEventVisitor.INSTANCE)));\n+\n+        return Optional.of(locksTakenOut);\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        return latestVersion;\n+    }\n+\n+    private boolean differentLeaderOrTooFarBehind(IdentifiedVersion currentVersion, IdentifiedVersion startVersion) {\n+        return !startVersion.id().equals(currentVersion.id()) || eventMap.floorKey(startVersion.version()) == null;\n+    }\n+\n+    private IdentifiedVersion createInclusiveVersion(IdentifiedVersion startVersion) {\n+        return IdentifiedVersion.of(startVersion.id(), startVersion.version() + 1);\n+    }\n+\n+    private IdentifiedVersion getLatestVersionAndVerify(IdentifiedVersion endVersion) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        Preconditions.checkArgument(IdentifiedVersion.comparator().compare(endVersion, currentVersion) > -1,\n+                \"Transactions' view of the world is more up-to-date than the log\");\n+        return currentVersion;\n+    }\n+\n+    private void processSuccess(LockWatchStateUpdate.Success success) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Must have a known version to process successful updates\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI4NjMyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozOTo1MVrOGb7MeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozOTo1MVrOGb7MeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzNDU4NA==", "bodyText": "lower case long. Never use Long where you can avoid it - prefer long which is guaranteed to not be null, or something like OptionalLong most of the time. With generics, you can't avoid it a lot of the time.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r431934584", "createdAt": "2020-05-28T15:39:51Z", "author": {"login": "j-baker"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.palantir.lock.v2.LockToken;\n+\n+public interface LockWatchEventCache {\n+    /**\n+     * Returns the last known lock watch version for the cache.\n+     */\n+    Optional<IdentifiedVersion> lastKnownVersion();\n+\n+    /**\n+     * Updates the cache with the update, and identifies the given timestamps with that lock watch state.\n+     */\n+    void processTransactionUpdate(Collection<Long> startTimestamps, LockWatchStateUpdate update);\n+\n+    /**\n+     * Updates the cache with the update, and calculates the {@link CommitUpdate} taking into account all changes to\n+     * lock watch state since the start of the transaction, excluding the transaction's own commit locks.\n+     *\n+     * @param startTs          start timestamp of the transaction\n+     * @param commitTs         commit timestamp of the transaction\n+     * @param commitLocksToken lock token for the transactions's commit locks\n+     * @return the commit update for this transaction's precommit condition\n+     */\n+    CommitUpdate getCommitUpdate(long startTs, long commitTs, LockToken commitLocksToken);\n+\n+    /**\n+     * Given a set of start timestamps, and a lock watch state version, returns a list of all events that occurred since\n+     * that version, and a map associating each start timestamp with its respective lock watch state version.\n+     */\n+    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> version);\n+\n+    /**\n+     * Removes the given timestamp from the cache. If no timestamps exist for a given version, events before that\n+     * version in the underlying {@link ClientLockWatchEventLog} will be deleted on next update.\n+     */\n+    void removeTimestampFromCache(Long timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356c7496ccd0727309e0a17b14881d888af70bb8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg0NDI0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMToyOVrOGceOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMToyOVrOGceOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODYwMw==", "bodyText": "This is a dodgy diff, as I moved the location of some of these files (lock-api-objects doesn't have tests, whereas lock-api does).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r432508603", "createdAt": "2020-05-29T14:11:29Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -19,10 +19,12 @@\n import java.util.Optional;\n import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    IdentifiedVersion processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processUpdate(LockWatchStateUpdate update);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface ClientLockWatchEventLog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d4b59b0627bc567dae341d6672d02013bab272"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzkxMDI0OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionsLockWatchEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo1NTozM1rOGdDcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTozNDo0OVrOGdEewQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExODI2Mg==", "bodyText": "I'm just wondering if this map should actually be on both results of this class, or if we even need a union here, and here is why:\nThe client of Atlas may receive a snapshot because their version is too old, but the version that each transaction holds is definitely not too old (by the definition of our cache system). Therefore, it surely makes sense that we can return a snapshot that resets the cache state, along with all the events that have happened between that snapshot and the latest version in the timestamp map. This would mean that the only difference between success and failure is that failure contains a snapshot also. Since a snapshot is essentially just a LockWatchCreatedEvent, this would mean that we could condense this interface to have a single return type, but with a boolean flag of whether the cache needs to be reset or not.\n@jkozlowski @j-baker thoughts? This would make more sense with the Atlasdb-proxy implementation too (simplifying the types and so forth).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433118262", "createdAt": "2020-06-01T08:55:33Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionsLockWatchEvents.java", "diffHunk": "@@ -50,7 +50,7 @@ static ForcedSnapshot failure(LockWatchStateUpdate.Snapshot snapshot) {\n         @Value.Parameter\n         List<LockWatchEvent> events();\n         @Value.Parameter\n-        Map<Long, Long> startTsToSequence();\n+        Map<Long, IdentifiedVersion> startTsToSequence();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dc51f725e1b0c63252579b16432b8e6c0f6874f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNTI5Nw==", "bodyText": "Chatted with @jkozlowski offline, and we think it's the right thing to do. Will change that now.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433135297", "createdAt": "2020-06-01T09:34:49Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionsLockWatchEvents.java", "diffHunk": "@@ -50,7 +50,7 @@ static ForcedSnapshot failure(LockWatchStateUpdate.Snapshot snapshot) {\n         @Value.Parameter\n         List<LockWatchEvent> events();\n         @Value.Parameter\n-        Map<Long, Long> startTsToSequence();\n+        Map<Long, IdentifiedVersion> startTsToSequence();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExODI2Mg=="}, "originalCommit": {"oid": "4dc51f725e1b0c63252579b16432b8e6c0f6874f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTkwOTQwOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo0OToyNlrOGdqWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjowOTozOVrOGdur2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1NTY4OQ==", "bodyText": "As per James' comment, would like to rename this (in this PR or another).\nAny thoughts to a good name?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433755689", "createdAt": "2020-06-02T09:49:26Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48150debb67cfd5d28a2d740ee5ec8edf928913"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyNjc3OA==", "bodyText": "Let's worry about it for another PR.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433826778", "createdAt": "2020-06-02T12:09:39Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1NTY4OQ=="}, "originalCommit": {"oid": "b48150debb67cfd5d28a2d740ee5ec8edf928913"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTkyNTAyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo1NDowNVrOGdqgYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoxMDowMFrOGdusnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1ODMwNQ==", "bodyText": "Diff is strange - should be same as previous LockWatchEventCache (with added javadoc)", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433758305", "createdAt": "2020-06-02T09:54:05Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface LockWatchEventCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b48150debb67cfd5d28a2d740ee5ec8edf928913"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyNjk3Mg==", "bodyText": "Strange indeed.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433826972", "createdAt": "2020-06-02T12:10:00Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface LockWatchEventCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1ODMwNQ=="}, "originalCommit": {"oid": "b48150debb67cfd5d28a2d740ee5ec8edf928913"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTkzNzA1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo1NzozMlrOGdqn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwOTo1NzozMlrOGdqn9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MDI0NA==", "bodyText": "Will only be empty on case of failure as an update.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433760244", "createdAt": "2020-06-02T09:57:32Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad59559662a1f18b8ad05e3c8bb21d059d6f8cf"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTk1NzA2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDowMzoyM1rOGdq0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDozMjozMlrOGd0mwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MzQ5OA==", "bodyText": "This, getCommitUpdate, and getEventsForTransactions can all fail (and indeed, throw) if a leader election occurs between the start and end of the transaction. Presumably, this is the correct behaviour, but that does require the callers to catch these cases.\nOpen to ideas for alternatives. getCommitUpdate should probably invalidateAll, this method should maybe not fail (it's only used for getCommitUpdate), but not sure about what we should do for getEventsForTransactions, given that it is intended to be called outside Atlas.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433763498", "createdAt": "2020-06-02T10:03:23Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad59559662a1f18b8ad05e3c8bb21d059d6f8cf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1OTAzOQ==", "bodyText": "As per my other comment, let's review this carefully because a lot of cases you need to recover from by retrying the transactions, so we can't throw Illegal(State|Argument) exceptions.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433859039", "createdAt": "2020-06-02T13:05:55Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MzQ5OA=="}, "originalCommit": {"oid": "dad59559662a1f18b8ad05e3c8bb21d059d6f8cf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2Mzg0Mw==", "bodyText": "Yeah, I agree.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433863843", "createdAt": "2020-06-02T13:13:25Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MzQ5OA=="}, "originalCommit": {"oid": "dad59559662a1f18b8ad05e3c8bb21d059d6f8cf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NzAzMA==", "bodyText": "ARGH\ncyclic dependency if I want to use TransactionFailedRetriableException as atlasdb-api depends on lock-api, and we would need to depend on atlasdb-api to get access to TransactionFailedRetriableException...", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433897030", "createdAt": "2020-06-02T13:59:17Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MzQ5OA=="}, "originalCommit": {"oid": "dad59559662a1f18b8ad05e3c8bb21d059d6f8cf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyMzc3OA==", "bodyText": "I have a work around but it's not super nice.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433923778", "createdAt": "2020-06-02T14:32:32Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MzQ5OA=="}, "originalCommit": {"oid": "dad59559662a1f18b8ad05e3c8bb21d059d6f8cf"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTk4MDgzOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMDoxMDoyNVrOGdrDxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjowMDo0MlrOGduZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2NzM2NA==", "bodyText": "Sanity check: This should be the only place where we need to wire in the real cache over the NoOp one (I checked this by looking at where LockWatchManagerImpl is created, and it appears the only real one is here).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433767364", "createdAt": "2020-06-02T10:10:25Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1077,7 +1078,7 @@ private static LockAndTimestampServices getLockAndTimestampServices(\n         NamespacedConjureTimelockService namespacedConjureTimelockService\n                 = new NamespacedConjureTimelockService(withDiagnosticsConjureTimelockService, timelockNamespace);\n \n-        LockWatchEventCache lockWatchEventCache = NoOpLockWatchEventCache.INSTANCE;\n+        LockWatchEventCache lockWatchEventCache = LockWatchEventCacheImpl.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37f0b3357c7717268efec75c15489a0f74be40a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyMjE0Mw==", "bodyText": "Yep.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433822143", "createdAt": "2020-06-02T12:00:42Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1077,7 +1078,7 @@ private static LockAndTimestampServices getLockAndTimestampServices(\n         NamespacedConjureTimelockService namespacedConjureTimelockService\n                 = new NamespacedConjureTimelockService(withDiagnosticsConjureTimelockService, timelockNamespace);\n \n-        LockWatchEventCache lockWatchEventCache = NoOpLockWatchEventCache.INSTANCE;\n+        LockWatchEventCache lockWatchEventCache = LockWatchEventCacheImpl.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2NzM2NA=="}, "originalCommit": {"oid": "b37f0b3357c7717268efec75c15489a0f74be40a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjM0NTU5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjowOToxM1rOGduq-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyMjo1NlrOGdvHGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyNjU1Mw==", "bodyText": "I think this needs a fix, for in-memory: you need to put dummy values into startTsToSequence for the passed transactions. Otherwise, atlasdb-proxy will start throwing.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433826553", "createdAt": "2020-06-02T12:09:13Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -19,15 +19,13 @@\n import java.util.Collection;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.UUID;\n-\n-import com.google.common.collect.ImmutableSet;\n \n @SuppressWarnings(\"FinalClass\") // mocks\n public class NoOpLockWatchEventCache implements LockWatchEventCache {\n     public static final LockWatchEventCache INSTANCE = new NoOpLockWatchEventCache();\n-    private static final TransactionsLockWatchEvents NONE = TransactionsLockWatchEvents.failure(\n-            LockWatchStateUpdate.snapshot(UUID.randomUUID(), -1L, ImmutableSet.of(), ImmutableSet.of()));\n+    private static final TransactionsLockWatchEvents NONE = ImmutableTransactionsLockWatchEvents.builder()\n+            .clearCache(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37f0b3357c7717268efec75c15489a0f74be40a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMzc1NA==", "bodyText": "Good catch", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433833754", "createdAt": "2020-06-02T12:22:56Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -19,15 +19,13 @@\n import java.util.Collection;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.UUID;\n-\n-import com.google.common.collect.ImmutableSet;\n \n @SuppressWarnings(\"FinalClass\") // mocks\n public class NoOpLockWatchEventCache implements LockWatchEventCache {\n     public static final LockWatchEventCache INSTANCE = new NoOpLockWatchEventCache();\n-    private static final TransactionsLockWatchEvents NONE = TransactionsLockWatchEvents.failure(\n-            LockWatchStateUpdate.snapshot(UUID.randomUUID(), -1L, ImmutableSet.of(), ImmutableSet.of()));\n+    private static final TransactionsLockWatchEvents NONE = ImmutableTransactionsLockWatchEvents.builder()\n+            .clearCache(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyNjU1Mw=="}, "originalCommit": {"oid": "b37f0b3357c7717268efec75c15489a0f74be40a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjM1OTU5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoxMzoyM1rOGduzug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyNzoyOVrOGdxiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyODc5NA==", "bodyText": "The return type here feels wrong: why are you returning a builder?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433828794", "createdAt": "2020-06-02T12:13:23Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNDQwMA==", "bodyText": "Reason is that we need to return\na) whether we had a snapshot or not;\nb) a list of events\nThat's 2/3 of the return object at the cache level anyway. So we can either create a new type for this particular method, or return the builder for the cache to add the map and return it up. I'm open to going for the other route if you think that makes it cleaner.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433834400", "createdAt": "2020-06-02T12:24:08Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyODc5NA=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NTg3NA==", "bodyText": "Let's not do it the way you have it right now, it rather breaks the usual mental model with builders and whatnot. And you introduce a rather hidden and weird dependency between them.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433845874", "createdAt": "2020-06-02T12:44:29Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyODc5NA=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2MzM5OA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433863398", "createdAt": "2020-06-02T13:12:49Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyODc5NA=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MzUwMw==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433873503", "createdAt": "2020-06-02T13:27:29Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyODc5NA=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjM2ODUyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/watch/ClientLockWatchEventLogImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoxNjoxMFrOGdu5Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0MzozNlrOGeURrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMDIwNw==", "bodyText": "Going to read through these later, but given my gut feeling that these 2 classes will be rather coupled, would be good to have a single integration test that tests it end to end.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433830207", "createdAt": "2020-06-02T12:16:10Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/test/java/com/palantir/lock/watch/ClientLockWatchEventLogImplTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.v2.LockToken;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchEventLogImplTest {\n+    private static final UUID LEADER = UUID.randomUUID();\n+    private static final IdentifiedVersion VERSION_1 = IdentifiedVersion.of(LEADER, 17L);\n+    private static final IdentifiedVersion VERSION_2 = IdentifiedVersion.of(LEADER, 25L);\n+    private static final LockWatchEvent EVENT_1 =\n+            LockEvent.builder(ImmutableSet.of(), LockToken.of(UUID.randomUUID())).build(17L);\n+    private static final LockWatchEvent EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(), LockToken.of(UUID.randomUUID())).build(25L);\n+    private static final LockWatchStateUpdate.Snapshot SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(VERSION_1.id(), VERSION_1.version(), ImmutableSet.of(), ImmutableSet.of());\n+    private static final LockWatchStateUpdate.Success SUCCESS =\n+            LockWatchStateUpdate.success(VERSION_2.id(), VERSION_2.version(), ImmutableList.of(EVENT_1, EVENT_2));\n+    private static final LockWatchStateUpdate.Failed FAILED =\n+            LockWatchStateUpdate.failed(LEADER);\n+\n+    @Mock\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4NjE2Mw==", "bodyText": "I agree with this, will write an integration test once I'm done with other comments", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433886163", "createdAt": "2020-06-02T13:44:52Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/test/java/com/palantir/lock/watch/ClientLockWatchEventLogImplTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.v2.LockToken;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchEventLogImplTest {\n+    private static final UUID LEADER = UUID.randomUUID();\n+    private static final IdentifiedVersion VERSION_1 = IdentifiedVersion.of(LEADER, 17L);\n+    private static final IdentifiedVersion VERSION_2 = IdentifiedVersion.of(LEADER, 25L);\n+    private static final LockWatchEvent EVENT_1 =\n+            LockEvent.builder(ImmutableSet.of(), LockToken.of(UUID.randomUUID())).build(17L);\n+    private static final LockWatchEvent EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(), LockToken.of(UUID.randomUUID())).build(25L);\n+    private static final LockWatchStateUpdate.Snapshot SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(VERSION_1.id(), VERSION_1.version(), ImmutableSet.of(), ImmutableSet.of());\n+    private static final LockWatchStateUpdate.Success SUCCESS =\n+            LockWatchStateUpdate.success(VERSION_2.id(), VERSION_2.version(), ImmutableList.of(EVENT_1, EVENT_2));\n+    private static final LockWatchStateUpdate.Failed FAILED =\n+            LockWatchStateUpdate.failed(LEADER);\n+\n+    @Mock\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMDIwNw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MjY3MA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434442670", "createdAt": "2020-06-03T09:43:36Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/test/java/com/palantir/lock/watch/ClientLockWatchEventLogImplTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.v2.LockToken;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchEventLogImplTest {\n+    private static final UUID LEADER = UUID.randomUUID();\n+    private static final IdentifiedVersion VERSION_1 = IdentifiedVersion.of(LEADER, 17L);\n+    private static final IdentifiedVersion VERSION_2 = IdentifiedVersion.of(LEADER, 25L);\n+    private static final LockWatchEvent EVENT_1 =\n+            LockEvent.builder(ImmutableSet.of(), LockToken.of(UUID.randomUUID())).build(17L);\n+    private static final LockWatchEvent EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(), LockToken.of(UUID.randomUUID())).build(25L);\n+    private static final LockWatchStateUpdate.Snapshot SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(VERSION_1.id(), VERSION_1.version(), ImmutableSet.of(), ImmutableSet.of());\n+    private static final LockWatchStateUpdate.Success SUCCESS =\n+            LockWatchStateUpdate.success(VERSION_2.id(), VERSION_2.version(), ImmutableList.of(EVENT_1, EVENT_2));\n+    private static final LockWatchStateUpdate.Failed FAILED =\n+            LockWatchStateUpdate.failed(LEADER);\n+\n+    @Mock\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMDIwNw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjM4NTkwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyMToyMVrOGdvEEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowMzoyMlrOGdwj3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjk3Nw==", "bodyText": "So I understand that you added this in response to @j-baker comment, but I think as it is it's not really adding much value, beyond detecting a failure and not letting yourself continue to get corrupted. I quite like the defensiveness here in case we have bugs, but I think you need to finish the stroke and switch to a NoOpCache at runtime.\nAlso, I would argue this will be implemented cleaner as FailureCheckingLockWatchEventCache, as a proxy.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433832977", "createdAt": "2020-06-02T12:21:21Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+    @GuardedBy(\"this\")\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            final ProcessingVisitor visitor;\n+            if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+                visitor = new NewLeaderVisitor();\n+            } else {\n+                visitor = new ProcessingVisitor();\n+            }\n+            update.accept(visitor);\n+        });\n+        return latestVersion;\n+    }\n+\n+    @Override\n+    public synchronized void removeOldEntries(IdentifiedVersion earliestVersion) {\n+        ensureNotFailed(() -> {\n+            Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved =\n+                    eventMap.headMap(earliestVersion.version()).entrySet();\n+            snapshotUpdater.processEvents(\n+                    eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()));\n+            eventsToBeRemoved.clear();\n+        });\n+    }\n+\n+    /**\n+     * @param startVersion latest version that the client knows about; should be before timestamps in the mapping;\n+     * @param endVersion   mapping from timestamp to identified version from client-side event cache;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        checkNotFailed();\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ImmutableTransactionsLockWatchEvents.Builder eventBuilder = ImmutableTransactionsLockWatchEvents.builder();\n+        List<LockWatchEvent> events = new ArrayList<>();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            events.add(LockWatchCreatedEvent.fromSnapshot(snapshotUpdater.getSnapshot(currentVersion)));\n+            fromSequence = eventMap.firstKey();\n+            eventBuilder.clearCache(true);\n+        } else {\n+            fromSequence = versionInclusive.get().version();\n+            eventBuilder.clearCache(false);\n+        }\n+\n+        events.addAll(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.events(events);\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        checkNotFailed();\n+        return latestVersion;\n+    }\n+\n+    private synchronized void ensureNotFailed(Runnable runnable) {\n+        checkNotFailed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzUwMA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433857500", "createdAt": "2020-06-02T13:03:22Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final TreeMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+    @GuardedBy(\"this\")\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    public static ClientLockWatchEventLogImpl create() {\n+        return create(ClientLockWatchSnapshotUpdaterImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static ClientLockWatchEventLogImpl create(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        return new ClientLockWatchEventLogImpl(snapshotUpdater);\n+    }\n+\n+    private ClientLockWatchEventLogImpl(ClientLockWatchSnapshotUpdater snapshotUpdater) {\n+        this.snapshotUpdater = snapshotUpdater;\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            final ProcessingVisitor visitor;\n+            if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+                visitor = new NewLeaderVisitor();\n+            } else {\n+                visitor = new ProcessingVisitor();\n+            }\n+            update.accept(visitor);\n+        });\n+        return latestVersion;\n+    }\n+\n+    @Override\n+    public synchronized void removeOldEntries(IdentifiedVersion earliestVersion) {\n+        ensureNotFailed(() -> {\n+            Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved =\n+                    eventMap.headMap(earliestVersion.version()).entrySet();\n+            snapshotUpdater.processEvents(\n+                    eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()));\n+            eventsToBeRemoved.clear();\n+        });\n+    }\n+\n+    /**\n+     * @param startVersion latest version that the client knows about; should be before timestamps in the mapping;\n+     * @param endVersion   mapping from timestamp to identified version from client-side event cache;\n+     * @return lock watch events that occurred from (exclusive) the provided version, up to (inclusive) the latest\n+     * version in the timestamp to version map.\n+     */\n+    @Override\n+    public synchronized ImmutableTransactionsLockWatchEvents.Builder getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        checkNotFailed();\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ImmutableTransactionsLockWatchEvents.Builder eventBuilder = ImmutableTransactionsLockWatchEvents.builder();\n+        List<LockWatchEvent> events = new ArrayList<>();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            events.add(LockWatchCreatedEvent.fromSnapshot(snapshotUpdater.getSnapshot(currentVersion)));\n+            fromSequence = eventMap.firstKey();\n+            eventBuilder.clearCache(true);\n+        } else {\n+            fromSequence = versionInclusive.get().version();\n+            eventBuilder.clearCache(false);\n+        }\n+\n+        events.addAll(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.events(events);\n+    }\n+\n+    @Override\n+    public synchronized Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        checkNotFailed();\n+        return latestVersion;\n+    }\n+\n+    private synchronized void ensureNotFailed(Runnable runnable) {\n+        checkNotFailed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMjk3Nw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjM5MzMyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyMzo0MVrOGdvIsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoxMjozOVrOGdw6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNDE2Mg==", "bodyText": "Similarly to previous comments, you probably want this implemented just once and poison the entire thing.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433834162", "createdAt": "2020-06-02T12:23:41Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2MzI0Mg==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433863242", "createdAt": "2020-06-02T13:12:39Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNDE2Mg=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQyNTUyOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMzowM1rOGdvc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDozMzo1MVrOGd0qUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTMzMw==", "bodyText": "I don't feel like this comparator should be here: it's a pretty specific assumption/underlying design decision in your LockWatchEventCacheImpl, so should be implemented there.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433839333", "createdAt": "2020-06-02T12:33:03Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    static Comparator<IdentifiedVersion> comparator() {\n+        return (version1, version2) -> {\n+            Preconditions.checkArgument(version1.id().equals(version2.id()), \"Versions do not have same leader id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2OTMzMA==", "bodyText": "I use it once in ClientLockWatchEventLogImpl too, hence my reluctance to remove from that class.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433869330", "createdAt": "2020-06-02T13:21:36Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    static Comparator<IdentifiedVersion> comparator() {\n+        return (version1, version2) -> {\n+            Preconditions.checkArgument(version1.id().equals(version2.id()), \"Versions do not have same leader id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTMzMw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyNDY5MQ==", "bodyText": "And now is used across three classes (since I split it out), so I will leave there.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433924691", "createdAt": "2020-06-02T14:33:51Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    static Comparator<IdentifiedVersion> comparator() {\n+        return (version1, version2) -> {\n+            Preconditions.checkArgument(version1.id().equals(version2.id()), \"Versions do not have same leader id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTMzMw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQ3ODE0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0NzozN1rOGdv-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0ODozOFrOGdwAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0Nzg1Mw==", "bodyText": "Is this the only case here? I feel like there's a legitimate case of \"leader switched\", in which case you should throw an exception that will cause the transaction to retry.\nPlease review all places that you throw here and probably introduce some custom exceptions that extend TransactionFailedRetriableException.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433847853", "createdAt": "2020-06-02T12:47:37Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                                CommitInfo.of(transactionUpdate.commitTs(),\n+                                        transactionUpdate.writesToken(),\n+                                        version)));\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        checkNotFailed();\n+        MapEntry entry = timestampMap.get(startTs);\n+        Preconditions.checkState(entry.commitInfo().isPresent(), \"Commit timestamp update not yet processed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0ODMwNQ==", "bodyText": "Oh wait, this one is fine.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433848305", "createdAt": "2020-06-02T12:48:22Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                                CommitInfo.of(transactionUpdate.commitTs(),\n+                                        transactionUpdate.writesToken(),\n+                                        version)));\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        checkNotFailed();\n+        MapEntry entry = timestampMap.get(startTs);\n+        Preconditions.checkState(entry.commitInfo().isPresent(), \"Commit timestamp update not yet processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0Nzg1Mw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0ODQ1OQ==", "bodyText": "I mentioned this in a comment today - I think throwing a retriable exception sounds reasonable.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433848459", "createdAt": "2020-06-02T12:48:38Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                                CommitInfo.of(transactionUpdate.commitTs(),\n+                                        transactionUpdate.writesToken(),\n+                                        version)));\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        checkNotFailed();\n+        MapEntry entry = timestampMap.get(startTs);\n+        Preconditions.checkState(entry.commitInfo().isPresent(), \"Commit timestamp update not yet processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0Nzg1Mw=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQ4MzE1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0ODo1OFrOGdwBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0NTozN1rOGdyWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0ODYzMQ==", "bodyText": "What if this returns null? I feel like there's a legitimate case of \"leader switched therefore I nuked all my state\", in which case you should throw an exception that will cause the transaction to retry.\nPlease review all places that you throw here and probably introduce some custom exceptions that extend TransactionFailedRetriableException.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433848631", "createdAt": "2020-06-02T12:48:58Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                                CommitInfo.of(transactionUpdate.commitTs(),\n+                                        transactionUpdate.writesToken(),\n+                                        version)));\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        checkNotFailed();\n+        MapEntry entry = timestampMap.get(startTs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4Njc2Mg==", "bodyText": "Done for this class; the places that throw in the underlying class should only throw if it is in some inconsistent state.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433886762", "createdAt": "2020-06-02T13:45:37Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(\n+                    version -> startTimestamps.forEach(timestamp -> {\n+                        timestampMap.put(timestamp, MapEntry.of(version));\n+                        aliveVersions.put(version, timestamp);\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        ensureNotFailed(() -> {\n+            Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+            latestVersion.ifPresent(version ->\n+                    transactionUpdates.forEach(transactionUpdate -> {\n+                        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                        Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                                CommitInfo.of(transactionUpdate.commitTs(),\n+                                        transactionUpdate.writesToken(),\n+                                        version)));\n+                    }));\n+        });\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        checkNotFailed();\n+        MapEntry entry = timestampMap.get(startTs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0ODYzMQ=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUwMDY1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1MzozOFrOGdwMYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyNDo1N1rOGd0QvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MTQ4OQ==", "bodyText": "I think you should make this whole class use synchronized on all it's methods, and not bother with synchronized everywhere else, feels to me like unnecessary noise.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433851489", "createdAt": "2020-06-02T12:53:38Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODE0MA==", "bodyText": "Done via the proxy.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433918140", "createdAt": "2020-06-02T14:24:57Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    @GuardedBy(\"this\")\n+    private boolean failed = false;\n+\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MTQ4OQ=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUwNTk0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1NTowNFrOGdwPvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyNTozMlrOGdxc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MjM0OA==", "bodyText": "This should hopefully go away once we get rid of Failure case in the timelock API.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433852348", "createdAt": "2020-06-02T12:55:04Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdater.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.List;\n+\n+public interface ClientLockWatchSnapshotUpdater {\n+    LockWatchStateUpdate.Snapshot getSnapshot(IdentifiedVersion identifiedVersion);\n+    void processEvents(List<LockWatchEvent> events);\n+    void resetWithSnapshot(LockWatchStateUpdate.Snapshot snapshot);\n+    void reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MjEwMw==", "bodyText": "Yes it will.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433872103", "createdAt": "2020-06-02T13:25:32Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdater.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.List;\n+\n+public interface ClientLockWatchSnapshotUpdater {\n+    LockWatchStateUpdate.Snapshot getSnapshot(IdentifiedVersion identifiedVersion);\n+    void processEvents(List<LockWatchEvent> events);\n+    void resetWithSnapshot(LockWatchStateUpdate.Snapshot snapshot);\n+    void reset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MjM0OA=="}, "originalCommit": {"oid": "166d1e5a081cb800d7f2be010ad796e60e4efa5c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUxMjY4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1Njo0NVrOGdwT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo1MDozM1rOGdykWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MzQwNg==", "bodyText": "Now that you have this proxy, perhaps you can remove sychronized everywhere else?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433853406", "createdAt": "2020-06-02T12:56:45Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+public final class FailureCheckingLockWatchEventCache extends AbstractInvocationHandler {\n+\n+    public static LockWatchEventCache newProxyInstance(LockWatchEventCache defaultCache) {\n+        return (LockWatchEventCache) Proxy.newProxyInstance(\n+                LockWatchEventCache.class.getClassLoader(),\n+                new Class<?>[] {LockWatchEventCache.class},\n+                new FailureCheckingLockWatchEventCache(defaultCache));\n+    }\n+\n+    private final LockWatchEventCache defaultCache;\n+    private final LockWatchEventCache noOpCache;\n+\n+    @GuardedBy(\"this\")\n+    private boolean hasFailed = false;\n+\n+    private FailureCheckingLockWatchEventCache(LockWatchEventCache defaultCache) {\n+        this.defaultCache = defaultCache;\n+        this.noOpCache = NoOpLockWatchEventCache.INSTANCE;\n+    }\n+\n+    @Override\n+    protected synchronized Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MDM5NQ==", "bodyText": "Done, although the downside is that it makes it a little less clear from the outside that this is a single-threaded class (I've added some javadoc to hopefully remediate that).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433890395", "createdAt": "2020-06-02T13:50:33Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+public final class FailureCheckingLockWatchEventCache extends AbstractInvocationHandler {\n+\n+    public static LockWatchEventCache newProxyInstance(LockWatchEventCache defaultCache) {\n+        return (LockWatchEventCache) Proxy.newProxyInstance(\n+                LockWatchEventCache.class.getClassLoader(),\n+                new Class<?>[] {LockWatchEventCache.class},\n+                new FailureCheckingLockWatchEventCache(defaultCache));\n+    }\n+\n+    private final LockWatchEventCache defaultCache;\n+    private final LockWatchEventCache noOpCache;\n+\n+    @GuardedBy(\"this\")\n+    private boolean hasFailed = false;\n+\n+    private FailureCheckingLockWatchEventCache(LockWatchEventCache defaultCache) {\n+        this.defaultCache = defaultCache;\n+        this.noOpCache = NoOpLockWatchEventCache.INSTANCE;\n+    }\n+\n+    @Override\n+    protected synchronized Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MzQwNg=="}, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUxODc0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1ODoyNVrOGdwXwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyNToxNlrOGdxcQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NDQwMg==", "bodyText": "This constructor should ideally return LockWatchEventCache and be already wrapped in the FailureDetecting thing", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433854402", "createdAt": "2020-06-02T12:58:25Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MTkzOQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433871939", "createdAt": "2020-06-02T13:25:16Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NDQwMg=="}, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUzOTg3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowMzo0MlrOGdwkpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyNDozOFrOGd0Pxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzcwMA==", "bodyText": "I feel you might want to have a separate class that manipulates these 2 datastructures in tandem, separate from this class which orchestrates all the datastructures.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433857700", "createdAt": "2020-06-02T13:03:42Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNzg5NQ==", "bodyText": "Done, and I think its a bit nicer.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433917895", "createdAt": "2020-06-02T14:24:38Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzcwMA=="}, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjU0NTQ4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowNTowOFrOGdwoLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyNjo0MFrOGdxgKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1ODYwNQ==", "bodyText": "You probably want:\nOptional.ofNullable(timestampMap.remove(startTimestamp)).ifPresent(entry -> {\n  aliveVersions.remove(...);\n});", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433858605", "createdAt": "2020-06-02T13:05:08Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> {\n+                    timestampMap.put(timestamp, MapEntry.of(version));\n+                    aliveVersions.put(version, timestamp);\n+                }));\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version ->\n+                transactionUpdates.forEach(transactionUpdate -> {\n+                    MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                    Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                    timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                            CommitInfo.of(transactionUpdate.commitTs(),\n+                                    transactionUpdate.writesToken(),\n+                                    version)));\n+                }));\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        MapEntry entry = timestampMap.get(startTs);\n+        Preconditions.checkState(entry.commitInfo().isPresent(), \"Commit timestamp update not yet processed\");\n+        CommitInfo commitInfo = entry.commitInfo().get();\n+\n+        TransactionsLockWatchEvents update =\n+                eventLog.getEventsBetweenVersions(Optional.of(entry.version()), commitInfo.commitVersion()).build();\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of tranasctions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampToVersionMap(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(), IdentifiedVersion.comparator());\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion)\n+                .startTsToSequence(timestampToVersion)\n+                .build();\n+    }\n+\n+    @Override\n+    public synchronized void removeTransactionStateFromCache(long startTimestamp) {\n+        MapEntry entryToRemove = timestampMap.get(startTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MjkzOA==", "bodyText": "That's pretty inspired, done.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r433872938", "createdAt": "2020-06-02T13:26:40Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    private LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+    }\n+\n+    public static LockWatchEventCacheImpl create() {\n+        return create(ClientLockWatchEventLogImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventCacheImpl create(ClientLockWatchEventLog eventLog) {\n+        return new LockWatchEventCacheImpl(eventLog);\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public synchronized void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> {\n+                    timestampMap.put(timestamp, MapEntry.of(version));\n+                    aliveVersions.put(version, timestamp);\n+                }));\n+    }\n+\n+    @Override\n+    public synchronized void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version ->\n+                transactionUpdates.forEach(transactionUpdate -> {\n+                    MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+                    Preconditions.checkNotNull(previousEntry, \"Start timestamp missing from cache\");\n+                    timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                            CommitInfo.of(transactionUpdate.commitTs(),\n+                                    transactionUpdate.writesToken(),\n+                                    version)));\n+                }));\n+    }\n+\n+    @Override\n+    public synchronized CommitUpdate getCommitUpdate(long startTs) {\n+        MapEntry entry = timestampMap.get(startTs);\n+        Preconditions.checkState(entry.commitInfo().isPresent(), \"Commit timestamp update not yet processed\");\n+        CommitInfo commitInfo = entry.commitInfo().get();\n+\n+        TransactionsLockWatchEvents update =\n+                eventLog.getEventsBetweenVersions(Optional.of(entry.version()), commitInfo.commitVersion()).build();\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public synchronized TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of tranasctions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampToVersionMap(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(), IdentifiedVersion.comparator());\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion)\n+                .startTsToSequence(timestampToVersion)\n+                .build();\n+    }\n+\n+    @Override\n+    public synchronized void removeTransactionStateFromCache(long startTimestamp) {\n+        MapEntry entryToRemove = timestampMap.get(startTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1ODYwNQ=="}, "originalCommit": {"oid": "355f5e2029025c9ee5a89497eab6c6d8c96f7dcb"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjEyMTA0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMTozMVrOGeTzyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowNDozOFrOGe-zCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTAxNw==", "bodyText": "It's a bit awkward, but the only way to properly put these as TransactionFailedRetriableExceptions given the awkward dependency loop.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434435017", "createdAt": "2020-06-03T09:31:31Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyNzY1NA==", "bodyText": "Can you explain the dependency loop? This is weird and there should be a different solution. i.e. it feels to me like all the cache code should live alongside this class, or at least in this sub-project?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434627654", "createdAt": "2020-06-03T14:51:04Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTAxNw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDIzNg==", "bodyText": "TransactionFailedRetriableException, and others like it, live in com.palantir.atlasdb.transaction.api, which depends on lock-api (which in turn depends on lock-api-objects). To use retriable exceptions in this piece would require lock-api to depend on com.palantir.atlasdb.transaction.api, which creates a loop.\nSomething needs to move to avoid this awkwardness.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434630236", "createdAt": "2020-06-03T14:54:45Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTAxNw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NDY0NQ==", "bodyText": "That's what I mean, you should probably move the event cache code somewhere else. It feels weird that it's in an *-api subproject, where it clearly is an implementation?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434654645", "createdAt": "2020-06-03T15:27:26Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTAxNw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4NjA2OQ==", "bodyText": "com.palantir.atlasdb.keyvalue.api.watch is used for LockWatchManagerImpl so clearly there are impls in *-apis elsewhere.\nStill, absolutely not averse to moving it - I will try and see where makes sense (without break decencies on the things that use it).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434686069", "createdAt": "2020-06-03T16:08:43Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTAxNw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzOTMzNw==", "bodyText": "Moved to the same place as LockWatchManagerImpl - I think this is a better place.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435139337", "createdAt": "2020-06-04T10:04:38Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNTAxNw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjEzOTM3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdaterImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNjoxNVrOGeT_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozNjoxNVrOGeT_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNzkxMg==", "bodyText": "Turns out it makes sense for the snapshot to know the version that it has processed thus far. This version is essentially the latest version that is no longer in the log.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434437912", "createdAt": "2020-06-03T09:36:15Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdaterImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotUpdaterImpl implements ClientLockWatchSnapshotUpdater {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjE1NzU0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0MDozOVrOGeUKCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzozMjoyM1rOGeb9Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MDcxMw==", "bodyText": "Just wondering if perhaps, for the sake of atlasdb-proxy, that we should fall through on this case instead (i.e. return no updates, and an empty map).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434440713", "createdAt": "2020-06-03T09:40:39Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return FailureCheckingLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()));\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> startTimestamps.forEach(timestamp -> timestampMap.put(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.replace(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<MapEntry> maybeEntry = timestampMap.get(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = maybeEntry.flatMap(MapEntry::commitInfo);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent(), \"commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update =\n+                eventLog.getEventsBetweenVersions(Optional.of(maybeEntry.get().version()), commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of tranasctions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MzgwMA==", "bodyText": "Let's go with what you have and see how we handle this upstream. And adjust if we need to. But this feels correct, it already has something similar by starting a throwaway transaction for getting a schema version, so we probably can just bundle those together.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434563800", "createdAt": "2020-06-03T13:25:30Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return FailureCheckingLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()));\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> startTimestamps.forEach(timestamp -> timestampMap.put(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.replace(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<MapEntry> maybeEntry = timestampMap.get(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = maybeEntry.flatMap(MapEntry::commitInfo);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent(), \"commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update =\n+                eventLog.getEventsBetweenVersions(Optional.of(maybeEntry.get().version()), commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of tranasctions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MDcxMw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2ODUzMA==", "bodyText": "Ok, lets see how that goes.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434568530", "createdAt": "2020-06-03T13:32:23Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return FailureCheckingLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()));\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> startTimestamps.forEach(timestamp -> timestampMap.put(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.replace(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<MapEntry> maybeEntry = timestampMap.get(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = maybeEntry.flatMap(MapEntry::commitInfo);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent(), \"commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update =\n+                eventLog.getEventsBetweenVersions(Optional.of(maybeEntry.get().version()), commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of tranasctions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MDcxMw=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjgzMzkyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowNDoxOFrOGea1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzozOToyNVrOGecQkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MDExNQ==", "bodyText": "Entries are only ever removed when a certain method is called, which is called on finish. However, we do not guarantee that a user calls finish; as such, there is a potential case where throwaway transactions are created, added to this map, but never deleted.\nHow do we want to go about handling this case? We could implement a retention policy but would that be a problem for long-running transactions (or do we care about those)?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434550115", "createdAt": "2020-06-03T13:04:18Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MjI1MA==", "bodyText": "Or is this just a matter of letting people be responsible for calling finish on their transactions? I feel like that is an approach prone to memory leaks.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434552250", "createdAt": "2020-06-03T13:07:43Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MDExNQ=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2MDM4MQ==", "bodyText": "So, 2 pieces:\n\nWe need to make sure that this cleanup always happens when users are using #runWithRetry. I think this is happening right now:\n\nOpenTransaction openTransaction =\n                    runTimed(() -> Iterables.getOnlyElement(startTransactions(ImmutableList.of(condition))),\n                            \"setupTask\");\n            return openTransaction.finish(transaction -> task.execute(transaction, condition));\n\n\nFor anyone using OpenTransaction, we need to rely on them calling #finish.\n\nThe only potentially problematic piece right now feels like SnapshotTransactionManager#startTransactions will not call #finish if anything in that try-catch block throws, so that needs fixing.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434560381", "createdAt": "2020-06-03T13:20:25Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MDExNQ=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3MzQ1OQ==", "bodyText": "Fixed.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434573459", "createdAt": "2020-06-03T13:39:25Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.lock.watch.TimestampToVersionMap.MapEntry;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link FailureCheckingLockWatchEventCache} as a proxy; failure to do so will\n+ * result in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1MDExNQ=="}, "originalCommit": {"oid": "4af7d98c71f2340c390ea5aabf71e918bc62f28e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzI1MDczOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDozNzo0NlrOGee-Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0MDozNlrOGefGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNzkxMQ==", "bodyText": "So this is fine, only because of the way we wire things up: the timelockService above is TimeLockClient, and in there the tryUnlock is non-blocking and does not throw. Ideally we would not rely on that, but I think it's fine here, and you can follow up with a PR to not rely on that later.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434617911", "createdAt": "2020-06-03T14:37:46Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -205,6 +205,8 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n                     responses.stream()\n                             .map(response -> response.immutableTimestamp().getLock())\n                             .collect(Collectors.toSet()));\n+            responses.forEach(response -> lockWatchEventCache.removeTransactionStateFromCache(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxOTk1MQ==", "bodyText": "Discussed offline", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434619951", "createdAt": "2020-06-03T14:40:36Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -205,6 +205,8 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n                     responses.stream()\n                             .map(response -> response.immutableTimestamp().getLock())\n                             .collect(Collectors.toSet()));\n+            responses.forEach(response -> lockWatchEventCache.removeTransactionStateFromCache(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxNzkxMQ=="}, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzMzNDA1OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo1Njo0MFrOGefz6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDozMjo1OVrOGe_wwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMTY1OQ==", "bodyText": "So I still don't think this is the right place for this. e.g.\n\nin TimestampToVersionMap, your map should be keyed on Long, not IdentifiedVersion. This instance is always cleared on leader election, so it can only ever contain things pertaining to a single leader. So it's weird it then maintain a datastructure keyed based off the whole key", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434631659", "createdAt": "2020-06-03T14:56:40Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    static Comparator<IdentifiedVersion> comparator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NTEzNw==", "bodyText": "Keying on IdentifiedVersion makes a few things a bit simpler, but changed anyway.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435155137", "createdAt": "2020-06-04T10:32:59Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -16,14 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import java.util.Comparator;\n import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.palantir.logsafe.Preconditions;\n+\n @Value.Immutable\n public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n     long version();\n+\n+    static IdentifiedVersion of(UUID id, long version) {\n+        return ImmutableIdentifiedVersion.of(id, version);\n+    }\n+\n+    static Comparator<IdentifiedVersion> comparator() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMTY1OQ=="}, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM0MTAxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo1ODowOVrOGef4aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo1ODowOVrOGef4aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMjgwOQ==", "bodyText": "This terseness is probably fine, but I'd consider something along the lines of: \"Unable to retrieve information for this transaction; this means there was a leader election and this transaction will be retried\". Similarly below. But up to you", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434632809", "createdAt": "2020-06-03T14:58:09Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -55,12 +57,20 @@ public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n     }\n \n     CommitUpdate getCommitUpdate(long startTs) {\n-        return lockWatchEventCache.getCommitUpdate(startTs);\n+        try {\n+            return lockWatchEventCache.getCommitUpdate(startTs);\n+        } catch (LockWatchFailedException e) {\n+            throw new TransactionLockWatchFailedException(\"Failed to get commit update\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM1NjEyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMToxOFrOGegB0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDo0Mzo1NlrOGfAGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNTIxOA==", "bodyText": "This whole block should be:\nOptional.ofNullable(aliveVersions.keySet().pollFirst())", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434635218", "createdAt": "2020-06-03T15:01:18Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version, startTimestamp);\n+    }\n+\n+    boolean replace(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+        if (previousEntry == null) {\n+            return false;\n+        }\n+\n+        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                CommitInfo.of(transactionUpdate.commitTs(), transactionUpdate.writesToken(), newVersion)));\n+\n+        return true;\n+    }\n+\n+    void remove(long startTimestamp) {\n+        Optional.ofNullable(timestampMap.remove(startTimestamp))\n+                .ifPresent(entry -> aliveVersions.remove(entry.version(), startTimestamp));\n+    }\n+\n+    void clear() {\n+        timestampMap.clear();\n+        aliveVersions.clear();\n+    }\n+\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        if (aliveVersions.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY4MjU4Nw==", "bodyText": "It should not use pollFirst as that removes the version, which we do not want. And first throws if the set is empty.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434682587", "createdAt": "2020-06-03T16:04:19Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version, startTimestamp);\n+    }\n+\n+    boolean replace(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+        if (previousEntry == null) {\n+            return false;\n+        }\n+\n+        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                CommitInfo.of(transactionUpdate.commitTs(), transactionUpdate.writesToken(), newVersion)));\n+\n+        return true;\n+    }\n+\n+    void remove(long startTimestamp) {\n+        Optional.ofNullable(timestampMap.remove(startTimestamp))\n+                .ifPresent(entry -> aliveVersions.remove(entry.version(), startTimestamp));\n+    }\n+\n+    void clear() {\n+        timestampMap.clear();\n+        aliveVersions.clear();\n+    }\n+\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        if (aliveVersions.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNTIxOA=="}, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE2MDcwOQ==", "bodyText": "Optional.ofNullable(Iterables.getFirst(aliveVersions.keySet(), null))\n\nMaybe that then", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435160709", "createdAt": "2020-06-04T10:43:56Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final HashMap<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version, startTimestamp);\n+    }\n+\n+    boolean replace(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+        if (previousEntry == null) {\n+            return false;\n+        }\n+\n+        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                CommitInfo.of(transactionUpdate.commitTs(), transactionUpdate.writesToken(), newVersion)));\n+\n+        return true;\n+    }\n+\n+    void remove(long startTimestamp) {\n+        Optional.ofNullable(timestampMap.remove(startTimestamp))\n+                .ifPresent(entry -> aliveVersions.remove(entry.version(), startTimestamp));\n+    }\n+\n+    void clear() {\n+        timestampMap.clear();\n+        aliveVersions.clear();\n+    }\n+\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        if (aliveVersions.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNTIxOA=="}, "originalCommit": {"oid": "8a2570ed072df9b7adcfa7484adc0f178b4ccb1a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM2NzExOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMzo0NlrOGegI0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MjozOVrOGe8JHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzAwOA==", "bodyText": "I think you should throw somewhere in here if this is called twice, i.e. you already have the commit info. Just to be extra defensive.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434637008", "createdAt": "2020-06-03T15:03:46Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version, startTimestamp);\n+    }\n+\n+    boolean replace(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NTgzNg==", "bodyText": "Returning false would be equivalent - i.e. it denotes a failure of some kind. Will do that.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435095836", "createdAt": "2020-06-04T08:52:39Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version, startTimestamp);\n+    }\n+\n+    boolean replace(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzAwOA=="}, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM3NTI1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNToyNFrOGegN2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1NDoyNFrOGe8NTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzODI5OA==", "bodyText": "nit: maybe think about different names for put/replace. Maybe putLogVersion and putTransactionUpdate? or onStartTransaction and onCommit or something to indicate when they are called, because there is an encoded state machine here (i.e. you call put and then replace;", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434638298", "createdAt": "2020-06-03T15:05:24Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NjkwOQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435096909", "createdAt": "2020-06-04T08:54:24Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzODI5OA=="}, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM5MDU1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowODo0NFrOGegXlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowODo0NFrOGegXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0MDc5MQ==", "bodyText": "nit: this might be a stylistic thing, but similar to how you have put/replace, I've have 2 different getters, so you are not exposing your internal datastructure (MapEntry).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434640791", "createdAt": "2020-06-03T15:08:44Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    private final TreeMultimap<IdentifiedVersion, Long> aliveVersions =\n+            TreeMultimap.create(IdentifiedVersion.comparator(), Ordering.natural());\n+\n+    void put(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version, startTimestamp);\n+    }\n+\n+    boolean replace(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+        if (previousEntry == null) {\n+            return false;\n+        }\n+\n+        timestampMap.replace(transactionUpdate.startTs(), previousEntry.withCommitInfo(\n+                CommitInfo.of(transactionUpdate.commitTs(), transactionUpdate.writesToken(), newVersion)));\n+\n+        return true;\n+    }\n+\n+    void remove(long startTimestamp) {\n+        Optional.ofNullable(timestampMap.remove(startTimestamp))\n+                .ifPresent(entry -> aliveVersions.remove(entry.version(), startTimestamp));\n+    }\n+\n+    void clear() {\n+        timestampMap.clear();\n+        aliveVersions.clear();\n+    }\n+\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        if (aliveVersions.isEmpty()) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(aliveVersions.keySet().first());\n+        }\n+    }\n+\n+    Optional<MapEntry> get(long startTimestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQwODY5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxMjo1N1rOGegjUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxMjo1N1rOGegjUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0Mzc5NQ==", "bodyText": "Nice! For extra safety, I would probably generate a new UUID every time, but I think this will translate to a snapshot and a clear cache for each transaction that starts this way.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434643795", "createdAt": "2020-06-03T15:12:57Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -55,7 +53,11 @@ public CommitUpdate getCommitUpdate(long startTs) {\n     @Override\n     public TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n             Optional<IdentifiedVersion> version) {\n-        return NONE;\n+        return ImmutableTransactionsLockWatchEvents.builder()\n+                .clearCache(true)\n+                .startTsToSequence(\n+                        startTimestamps.stream().collect(Collectors.toMap(startTs -> startTs, $ -> FAKE_VERSION)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQwOTk5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxMzoxNFrOGegkKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxMzoxNFrOGegkKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NDAxMQ==", "bodyText": "Let's keep the eventId as -1 here, it indicates the log is empty.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434644011", "createdAt": "2020-06-03T15:13:14Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -20,14 +20,12 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.UUID;\n-\n-import com.google.common.collect.ImmutableSet;\n+import java.util.stream.Collectors;\n \n @SuppressWarnings(\"FinalClass\") // mocks\n public class NoOpLockWatchEventCache implements LockWatchEventCache {\n     public static final LockWatchEventCache INSTANCE = new NoOpLockWatchEventCache();\n-    private static final TransactionsLockWatchEvents NONE = TransactionsLockWatchEvents.failure(\n-            LockWatchStateUpdate.snapshot(UUID.randomUUID(), -1L, ImmutableSet.of(), ImmutableSet.of()));\n+    private static final IdentifiedVersion FAKE_VERSION = IdentifiedVersion.of(UUID.randomUUID(), 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQ1MTQ0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyMjoyNVrOGeg-qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTo1MzozMVrOGe-Y2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MDc5NA==", "bodyText": "This is quite clever, but kinda non-trivial to read and also not entirely correct. You are missing not failing on your expected exceptions!\nI would rewrite it to:\nprivate final LockWatchEventCache delegate;\n\nprivate FailureCheckingLockWatchEventCache(LockWatchEventCache defaultCache) {\n        this.delegate = defaultCache;\n}\n\nand then #handleInvocation:\ntry {\n  return method.invoke(noOpCache, args);\n} catch (Throwable e) {\n  if (e instance of TransactionLockWatchFailedException) {\n   throw e;\n  }\n  delegate = NoOpLockWatchEventCache.INSTANCE;\n  // You still don't want to cause an outage, so should make the transaction retry.\n  throw new TransactionLockWatchFailedException(\"Unexpected failure\", e);\n}\n\nOr something to that effect.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434650794", "createdAt": "2020-06-03T15:22:25Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+final class FailureCheckingLockWatchEventCache extends AbstractInvocationHandler {\n+\n+    static LockWatchEventCache newProxyInstance(LockWatchEventCache defaultCache) {\n+        return (LockWatchEventCache) Proxy.newProxyInstance(\n+                LockWatchEventCache.class.getClassLoader(),\n+                new Class<?>[] {LockWatchEventCache.class},\n+                new FailureCheckingLockWatchEventCache(defaultCache));\n+    }\n+\n+    private final LockWatchEventCache defaultCache;\n+    private final LockWatchEventCache noOpCache;\n+\n+    @GuardedBy(\"this\")\n+    private boolean hasFailed = false;\n+\n+    private FailureCheckingLockWatchEventCache(LockWatchEventCache defaultCache) {\n+        this.defaultCache = defaultCache;\n+        this.noOpCache = NoOpLockWatchEventCache.INSTANCE;\n+    }\n+\n+    @Override\n+    protected synchronized Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {\n+        if (hasFailed) {\n+            return method.invoke(noOpCache, args);\n+        } else {\n+            hasFailed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzMjYzMw==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435132633", "createdAt": "2020-06-04T09:53:31Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+final class FailureCheckingLockWatchEventCache extends AbstractInvocationHandler {\n+\n+    static LockWatchEventCache newProxyInstance(LockWatchEventCache defaultCache) {\n+        return (LockWatchEventCache) Proxy.newProxyInstance(\n+                LockWatchEventCache.class.getClassLoader(),\n+                new Class<?>[] {LockWatchEventCache.class},\n+                new FailureCheckingLockWatchEventCache(defaultCache));\n+    }\n+\n+    private final LockWatchEventCache defaultCache;\n+    private final LockWatchEventCache noOpCache;\n+\n+    @GuardedBy(\"this\")\n+    private boolean hasFailed = false;\n+\n+    private FailureCheckingLockWatchEventCache(LockWatchEventCache defaultCache) {\n+        this.defaultCache = defaultCache;\n+        this.noOpCache = NoOpLockWatchEventCache.INSTANCE;\n+    }\n+\n+    @Override\n+    protected synchronized Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {\n+        if (hasFailed) {\n+            return method.invoke(noOpCache, args);\n+        } else {\n+            hasFailed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MDc5NA=="}, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQ1OTMyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCacheTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyNDowNlrOGehDnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowMjo0MFrOGe-uoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MjA2MA==", "bodyText": "You probably want to just pass the cache you want to fallback to into its constructor. It is weird to rely on this behavior for something you're testing, when there's a simple solution like I described.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434652060", "createdAt": "2020-06-03T15:24:06Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/test/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCacheTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class FailureCheckingLockWatchEventCacheTest {\n+\n+    @Mock\n+    private LockWatchEventCache defaultCache;\n+    private LockWatchEventCache proxyCache;\n+\n+    @Before\n+    public void before() {\n+        proxyCache = FailureCheckingLockWatchEventCache.newProxyInstance(defaultCache);\n+    }\n+\n+    @Test\n+    public void failCausesNoOpCacheToBeUsed() {\n+        RuntimeException runtimeException = new RuntimeException();\n+        when(defaultCache.getCommitUpdate(anyLong())).thenThrow(runtimeException);\n+        assertThatThrownBy(() -> proxyCache.getCommitUpdate(0L)).hasRootCause(runtimeException);\n+\n+        when(defaultCache.lastKnownVersion()).thenReturn(Optional.of(IdentifiedVersion.of(UUID.randomUUID(), 1L)));\n+\n+        // no op cache returns empty on last known version, so this should prove that we delegate there correctly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzODIwOQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435138209", "createdAt": "2020-06-04T10:02:40Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/test/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCacheTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class FailureCheckingLockWatchEventCacheTest {\n+\n+    @Mock\n+    private LockWatchEventCache defaultCache;\n+    private LockWatchEventCache proxyCache;\n+\n+    @Before\n+    public void before() {\n+        proxyCache = FailureCheckingLockWatchEventCache.newProxyInstance(defaultCache);\n+    }\n+\n+    @Test\n+    public void failCausesNoOpCacheToBeUsed() {\n+        RuntimeException runtimeException = new RuntimeException();\n+        when(defaultCache.getCommitUpdate(anyLong())).thenThrow(runtimeException);\n+        assertThatThrownBy(() -> proxyCache.getCommitUpdate(0L)).hasRootCause(runtimeException);\n+\n+        when(defaultCache.lastKnownVersion()).thenReturn(Optional.of(IdentifiedVersion.of(UUID.randomUUID(), 1L)));\n+\n+        // no op cache returns empty on last known version, so this should prove that we delegate there correctly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MjA2MA=="}, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQ2NjkwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyNTo0M1rOGehITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDowNDowMFrOGe-xxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MzI2MA==", "bodyText": "nit: Maaaybe consider a different name, because we also rely on the synchronized being here for correctness! First thing that came to my mind was \"ResilientLockWatchEventCache\", or \"SynchronizedLockWatchEventCache\".", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434653260", "createdAt": "2020-06-03T15:25:43Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+final class FailureCheckingLockWatchEventCache extends AbstractInvocationHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzOTAxNA==", "bodyText": "Went with the former.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435139014", "createdAt": "2020-06-04T10:04:00Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/FailureCheckingLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+\n+final class FailureCheckingLockWatchEventCache extends AbstractInvocationHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MzI2MA=="}, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQ4NjE3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyOTozOFrOGehUQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDozMzowNlrOGe_w7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NjMyMQ==", "bodyText": "I would consider tests for this, for anything that's hard to test in your integration test. I haven't read through that yet, so unclear if this comment is useful.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r434656321", "createdAt": "2020-06-03T15:29:38Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NTE4Mw==", "bodyText": "Done.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435155183", "createdAt": "2020-06-04T10:33:06Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Ordering;\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+\n+final class TimestampToVersionMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NjMyMQ=="}, "originalCommit": {"oid": "7341d3dc89d901986325c8ac143045a3c42d1867"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc1MTcyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ResilientLockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMToyNTowNlrOGfBYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxMDowN1rOGfE8Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTU3Mg==", "bodyText": "At least a logline, but ideally a metric so you can setup some alerts for rollout.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435181572", "createdAt": "2020-06-04T11:25:06Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ResilientLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+\n+final class ResilientLockWatchEventCache extends AbstractInvocationHandler {\n+\n+    static LockWatchEventCache newProxyInstance(LockWatchEventCache defaultCache, LockWatchEventCache fallbackCache) {\n+        return (LockWatchEventCache) Proxy.newProxyInstance(\n+                LockWatchEventCache.class.getClassLoader(),\n+                new Class<?>[] {LockWatchEventCache.class},\n+                new ResilientLockWatchEventCache(defaultCache, fallbackCache));\n+    }\n+\n+    private final LockWatchEventCache fallbackCache;\n+\n+    @GuardedBy(\"this\")\n+    private LockWatchEventCache delegate;\n+\n+    private ResilientLockWatchEventCache(LockWatchEventCache defaultCache, LockWatchEventCache fallbackCache) {\n+        this.delegate = defaultCache;\n+        this.fallbackCache = fallbackCache;\n+    }\n+\n+    @Override\n+    protected synchronized Object handleInvocation(Object proxy, Method method, Object[] args) {\n+        try {\n+            return method.invoke(delegate, args);\n+        } catch (TransactionLockWatchFailedException e) {\n+            throw e;\n+        } catch (Throwable t) {\n+            delegate = fallbackCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzOTkzOQ==", "bodyText": "Done both", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435239939", "createdAt": "2020-06-04T13:10:07Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ResilientLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+\n+import com.google.common.reflect.AbstractInvocationHandler;\n+import com.google.errorprone.annotations.concurrent.GuardedBy;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+\n+final class ResilientLockWatchEventCache extends AbstractInvocationHandler {\n+\n+    static LockWatchEventCache newProxyInstance(LockWatchEventCache defaultCache, LockWatchEventCache fallbackCache) {\n+        return (LockWatchEventCache) Proxy.newProxyInstance(\n+                LockWatchEventCache.class.getClassLoader(),\n+                new Class<?>[] {LockWatchEventCache.class},\n+                new ResilientLockWatchEventCache(defaultCache, fallbackCache));\n+    }\n+\n+    private final LockWatchEventCache fallbackCache;\n+\n+    @GuardedBy(\"this\")\n+    private LockWatchEventCache delegate;\n+\n+    private ResilientLockWatchEventCache(LockWatchEventCache defaultCache, LockWatchEventCache fallbackCache) {\n+        this.delegate = defaultCache;\n+        this.fallbackCache = fallbackCache;\n+    }\n+\n+    @Override\n+    protected synchronized Object handleInvocation(Object proxy, Method method, Object[] args) {\n+        try {\n+            return method.invoke(delegate, args);\n+        } catch (TransactionLockWatchFailedException e) {\n+            throw e;\n+        } catch (Throwable t) {\n+            delegate = fallbackCache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTU3Mg=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc2MTkzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMToyODoyNFrOGfBeYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxMTowM1rOGfE-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MzIwMg==", "bodyText": "If commit info is present, you should throw right? It's unexpected and indicates a bug?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435183202", "createdAt": "2020-06-04T11:28:24Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")\n+    private final TreeMultimap<Long, Long> aliveVersions = TreeMultimap.create();\n+\n+    void putStartVersion(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version.version(), startTimestamp);\n+    }\n+\n+    boolean putCommitUpdate(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+        if (previousEntry == null || previousEntry.commitInfo().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MDU1MQ==", "bodyText": "I suppose if previousEntry is null, then it is a retriable exception (i.e. we had a leader election), but if the commitInfo is present, then it is a bug as we should not put the update more than once. Will change.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435240551", "createdAt": "2020-06-04T13:11:03Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")\n+    private final TreeMultimap<Long, Long> aliveVersions = TreeMultimap.create();\n+\n+    void putStartVersion(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));\n+        aliveVersions.put(version.version(), startTimestamp);\n+    }\n+\n+    boolean putCommitUpdate(TransactionUpdate transactionUpdate, IdentifiedVersion newVersion) {\n+        MapEntry previousEntry = timestampMap.get(transactionUpdate.startTs());\n+        if (previousEntry == null || previousEntry.commitInfo().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MzIwMg=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc2NTUwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMToyOTozOVrOGfBgqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxMjo0NFrOGfFCpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4Mzc4Nw==", "bodyText": "nit: This should be something like TransactionStateStore or something. You don't only store versions here, and *Map is also not accurate because 1. it tells you about it's internal implementation. 2. It actually contains multiple maps!", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435183787", "createdAt": "2020-06-04T11:29:39Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MTYzNg==", "bodyText": "I'm reluctant to put Store in the name given the connotation of store with some sort of internal table, but I'll think of something\neh I think it is good enough, can't think of something", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435241636", "createdAt": "2020-06-04T13:12:44Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4Mzc4Nw=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc2OTk1OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionLockWatchFailedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozMTowN1rOGfBjfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxNjo0NVrOGfFNWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NDUwOA==", "bodyText": "I think by convention, cause can be nullable, so you shouldn't need the second constructor.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435184508", "createdAt": "2020-06-04T11:31:07Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionLockWatchFailedException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.api;\n+\n+public final class TransactionLockWatchFailedException extends TransactionFailedRetriableException {\n+    public TransactionLockWatchFailedException(String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NDM3OA==", "bodyText": "Just following the standard in TransactionFailedRetriableException and all the other exceptions it inherits from", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435244378", "createdAt": "2020-06-04T13:16:45Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionLockWatchFailedException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.api;\n+\n+public final class TransactionLockWatchFailedException extends TransactionFailedRetriableException {\n+    public TransactionLockWatchFailedException(String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NDUwOA=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc4Nzk0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozNjo0OVrOGfBu3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxOTowN1rOGfFTug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzQyMQ==", "bodyText": "Same here, I have a feeling you should use putIfAbsent and throw if already present.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435187421", "createdAt": "2020-06-04T11:36:49Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")\n+    private final TreeMultimap<Long, Long> aliveVersions = TreeMultimap.create();\n+\n+    void putStartVersion(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NjAxMA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435246010", "createdAt": "2020-06-04T13:19:07Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")\n+    private final TreeMultimap<Long, Long> aliveVersions = TreeMultimap.create();\n+\n+    void putStartVersion(long startTimestamp, IdentifiedVersion version) {\n+        timestampMap.put(startTimestamp, MapEntry.of(version));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzQyMQ=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDc4OTA0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozNzoxMVrOGfBviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyMDoyMFrOGfFXIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzU5Mw==", "bodyText": "What does this mean?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435187593", "createdAt": "2020-06-04T11:37:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0Njg4MQ==", "bodyText": "Removed; needed it when I was using aliveVersions.keySet().first() as only TreeMultiMap guarantees that keySet() is a NavigableMap and checkstyle doesn't like that; but using Iterables.getFirst circumnavigates this and I need only use a SortedSetMultiMap.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435246881", "createdAt": "2020-06-04T13:20:20Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzU5Mw=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgwMzkwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0MTo1OVrOGfB5DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyMToyMVrOGfFZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MDAyOQ==", "bodyText": "Should take long here, that will probably simplify your upstream code.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435190029", "createdAt": "2020-06-04T11:41:59Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion, IdentifiedVersion endVersion);\n+    Optional<IdentifiedVersion> getLatestKnownVersion();\n+    Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update);\n+    void removeOldEntries(IdentifiedVersion earliestVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0NzU3NQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435247575", "createdAt": "2020-06-04T13:21:21Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchEventLog.java", "diffHunk": "@@ -16,17 +16,12 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n import java.util.Optional;\n-import java.util.Set;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchEventLog {\n+    ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion, IdentifiedVersion endVersion);\n+    Optional<IdentifiedVersion> getLatestKnownVersion();\n+    Optional<IdentifiedVersion> processUpdate(LockWatchStateUpdate update);\n+    void removeOldEntries(IdentifiedVersion earliestVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MDAyOQ=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgxMjkxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NDo0NlrOGfB-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyMjoyMFrOGfFcgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTQzNA==", "bodyText": "I feel like you should invert this, you use it as checkConditionOrThrow(! everywhere. And maybe call assertTrue.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435191434", "createdAt": "2020-06-04T11:44:46Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);\n+    }\n+\n+    @VisibleForTesting\n+    Map<Long, IdentifiedVersion> getTimestampMappings(Set<Long> startTimestamps) {\n+        Map<Long, IdentifiedVersion> timestampToVersion = new HashMap<>();\n+        startTimestamps.forEach(timestamp -> {\n+            Optional<IdentifiedVersion> entry = timestampMap.getStartVersion(timestamp);\n+            checkConditionOrThrow(!entry.isPresent(), \"start timestamp missing from map\");\n+            timestampToVersion.put(timestamp, entry.get());\n+        });\n+        return timestampToVersion;\n+    }\n+\n+    @VisibleForTesting\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        return timestampMap.getEarliestVersion().flatMap(sequence ->\n+                currentVersion.map(version -> IdentifiedVersion.of(version.id(), sequence)));\n+    }\n+\n+    private void checkConditionOrThrow(boolean condition, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0ODI1OQ==", "bodyText": "Good call", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435248259", "createdAt": "2020-06-04T13:22:20Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);\n+    }\n+\n+    @VisibleForTesting\n+    Map<Long, IdentifiedVersion> getTimestampMappings(Set<Long> startTimestamps) {\n+        Map<Long, IdentifiedVersion> timestampToVersion = new HashMap<>();\n+        startTimestamps.forEach(timestamp -> {\n+            Optional<IdentifiedVersion> entry = timestampMap.getStartVersion(timestamp);\n+            checkConditionOrThrow(!entry.isPresent(), \"start timestamp missing from map\");\n+            timestampToVersion.put(timestamp, entry.get());\n+        });\n+        return timestampToVersion;\n+    }\n+\n+    @VisibleForTesting\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        return timestampMap.getEarliestVersion().flatMap(sequence ->\n+                currentVersion.map(version -> IdentifiedVersion.of(version.id(), sequence)));\n+    }\n+\n+    private void checkConditionOrThrow(boolean condition, String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTQzNA=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgxNjg4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NjowMVrOGfCA_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NjowMVrOGfCA_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MjA2MQ==", "bodyText": "This should be a hard failure, it's a bug?\nActually, it's hard to know, because this is legitimate on a leader switch once we've cleared the cache. Good catch!", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435192061", "createdAt": "2020-06-04T11:46:01Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgyODM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo1MDoxMlrOGfCIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0MzowMlrOGfGd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5Mzk0Ng==", "bodyText": "This looks rather scary here: I would think you'd want the return type of #processUpdate to indicate whether there was an event that should cause everything to be reset?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435193946", "createdAt": "2020-06-04T11:50:12Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);\n+    }\n+\n+    @VisibleForTesting\n+    Map<Long, IdentifiedVersion> getTimestampMappings(Set<Long> startTimestamps) {\n+        Map<Long, IdentifiedVersion> timestampToVersion = new HashMap<>();\n+        startTimestamps.forEach(timestamp -> {\n+            Optional<IdentifiedVersion> entry = timestampMap.getStartVersion(timestamp);\n+            checkConditionOrThrow(!entry.isPresent(), \"start timestamp missing from map\");\n+            timestampToVersion.put(timestamp, entry.get());\n+        });\n+        return timestampToVersion;\n+    }\n+\n+    @VisibleForTesting\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        return timestampMap.getEarliestVersion().flatMap(sequence ->\n+                currentVersion.map(version -> IdentifiedVersion.of(version.id(), sequence)));\n+    }\n+\n+    private void checkConditionOrThrow(boolean condition, String message) {\n+        if (condition) {\n+            throw new TransactionLockWatchFailedException(message);\n+        }\n+    }\n+\n+    private CommitUpdate constructCommitUpdate(CommitInfo commitInfo, List<LockWatchEvent> events) {\n+        LockEventVisitor eventVisitor = new LockEventVisitor(commitInfo.commitLockToken());\n+        Set<LockDescriptor> locksTakenOut = new HashSet<>();\n+        events.forEach(event -> locksTakenOut.addAll(event.accept(eventVisitor)));\n+        return ImmutableInvalidateSome.builder().invalidatedLocks(locksTakenOut).build();\n+    }\n+\n+    private Optional<IdentifiedVersion> processEventLogUpdate(LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        Optional<IdentifiedVersion> latestVersion = eventLog.processUpdate(update);\n+\n+        if (!(latestVersion.isPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MjgwNA==", "bodyText": "there are 4 checks here:\n\nis the version at all present? This corresponds to a failure LockWatchStateUpdate\nis the current version (i.e. the one before the update) present? Should only be if we are going from either initialisation or a failure to a snapshot/success (and in which case, we want to reset the timestamp store)\ndid the version change?\nwas it a successful update?\n\nJust thinking this through, I could just as easily return a boolean that states whether it was a successful update or not, and then just ask for the latest version on the next line; since this is all synchronised, this won't cause problems and would handle this.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435252804", "createdAt": "2020-06-04T13:28:23Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);\n+    }\n+\n+    @VisibleForTesting\n+    Map<Long, IdentifiedVersion> getTimestampMappings(Set<Long> startTimestamps) {\n+        Map<Long, IdentifiedVersion> timestampToVersion = new HashMap<>();\n+        startTimestamps.forEach(timestamp -> {\n+            Optional<IdentifiedVersion> entry = timestampMap.getStartVersion(timestamp);\n+            checkConditionOrThrow(!entry.isPresent(), \"start timestamp missing from map\");\n+            timestampToVersion.put(timestamp, entry.get());\n+        });\n+        return timestampToVersion;\n+    }\n+\n+    @VisibleForTesting\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        return timestampMap.getEarliestVersion().flatMap(sequence ->\n+                currentVersion.map(version -> IdentifiedVersion.of(version.id(), sequence)));\n+    }\n+\n+    private void checkConditionOrThrow(boolean condition, String message) {\n+        if (condition) {\n+            throw new TransactionLockWatchFailedException(message);\n+        }\n+    }\n+\n+    private CommitUpdate constructCommitUpdate(CommitInfo commitInfo, List<LockWatchEvent> events) {\n+        LockEventVisitor eventVisitor = new LockEventVisitor(commitInfo.commitLockToken());\n+        Set<LockDescriptor> locksTakenOut = new HashSet<>();\n+        events.forEach(event -> locksTakenOut.addAll(event.accept(eventVisitor)));\n+        return ImmutableInvalidateSome.builder().invalidatedLocks(locksTakenOut).build();\n+    }\n+\n+    private Optional<IdentifiedVersion> processEventLogUpdate(LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        Optional<IdentifiedVersion> latestVersion = eventLog.processUpdate(update);\n+\n+        if (!(latestVersion.isPresent()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5Mzk0Ng=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2NDk4OA==", "bodyText": "Changed.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435264988", "createdAt": "2020-06-04T13:43:02Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);\n+    }\n+\n+    @VisibleForTesting\n+    Map<Long, IdentifiedVersion> getTimestampMappings(Set<Long> startTimestamps) {\n+        Map<Long, IdentifiedVersion> timestampToVersion = new HashMap<>();\n+        startTimestamps.forEach(timestamp -> {\n+            Optional<IdentifiedVersion> entry = timestampMap.getStartVersion(timestamp);\n+            checkConditionOrThrow(!entry.isPresent(), \"start timestamp missing from map\");\n+            timestampToVersion.put(timestamp, entry.get());\n+        });\n+        return timestampToVersion;\n+    }\n+\n+    @VisibleForTesting\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        return timestampMap.getEarliestVersion().flatMap(sequence ->\n+                currentVersion.map(version -> IdentifiedVersion.of(version.id(), sequence)));\n+    }\n+\n+    private void checkConditionOrThrow(boolean condition, String message) {\n+        if (condition) {\n+            throw new TransactionLockWatchFailedException(message);\n+        }\n+    }\n+\n+    private CommitUpdate constructCommitUpdate(CommitInfo commitInfo, List<LockWatchEvent> events) {\n+        LockEventVisitor eventVisitor = new LockEventVisitor(commitInfo.commitLockToken());\n+        Set<LockDescriptor> locksTakenOut = new HashSet<>();\n+        events.forEach(event -> locksTakenOut.addAll(event.accept(eventVisitor)));\n+        return ImmutableInvalidateSome.builder().invalidatedLocks(locksTakenOut).build();\n+    }\n+\n+    private Optional<IdentifiedVersion> processEventLogUpdate(LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        Optional<IdentifiedVersion> latestVersion = eventLog.processUpdate(update);\n+\n+        if (!(latestVersion.isPresent()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5Mzk0Ng=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDgzMjk1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo1MTo0MlrOGfCLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo0NjowN1rOGfOzGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5NDcwMQ==", "bodyText": "This feels like it's in the wrong place? You should be cleaning up when transactions are removed from the cache, not when they're added right? Otherwise, this will not be prompt.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435194701", "createdAt": "2020-06-04T11:51:42Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2NzU2Ng==", "bodyText": "I've considered this before - the reason I went for it is that this will be called once per batch, as opposed to once per every transaction. But then again, this should be fast and I probably shouldn't micro-optimise at the cost of clarity, so I'll move it.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435267566", "createdAt": "2020-06-04T13:45:34Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5NDcwMQ=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwMTQ5Nw==", "bodyText": "Went back on this decision, as I think it's more correct in process on start: what if you are tracking events before you ever put a timestamp in? This way, you will clear all of those events out when you do a first put.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435401497", "createdAt": "2020-06-04T16:46:07Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5NDcwMQ=="}, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDg0NDUyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo1NTozMFrOGfCSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo1NTozMFrOGfCSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5NjUzNw==", "bodyText": "Both of these, I feel, should take the Collection/Collection, so the code upstairs doesn't have to iterate by itself.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435196537", "createdAt": "2020-06-04T11:55:30Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampToVersionMap.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.TreeMultimap;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class TimestampToVersionMap {\n+    private final Map<Long, MapEntry> timestampMap = new HashMap<>();\n+    @SuppressWarnings(\"IllegalTypeCheck\")\n+    private final TreeMultimap<Long, Long> aliveVersions = TreeMultimap.create();\n+\n+    void putStartVersion(long startTimestamp, IdentifiedVersion version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a98885bd273bf5e49dc5e7c4d8cd2a129b7b6344"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDk1NzkzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoyOTowNlrOGfDYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoyOTowNlrOGfDYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNDUzMg==", "bodyText": "nit: createCommitUpdate", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435214532", "createdAt": "2020-06-04T12:29:06Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);\n+    }\n+\n+    @VisibleForTesting\n+    Map<Long, IdentifiedVersion> getTimestampMappings(Set<Long> startTimestamps) {\n+        Map<Long, IdentifiedVersion> timestampToVersion = new HashMap<>();\n+        startTimestamps.forEach(timestamp -> {\n+            Optional<IdentifiedVersion> entry = timestampMap.getStartVersion(timestamp);\n+            checkConditionOrThrow(!entry.isPresent(), \"start timestamp missing from map\");\n+            timestampToVersion.put(timestamp, entry.get());\n+        });\n+        return timestampToVersion;\n+    }\n+\n+    @VisibleForTesting\n+    Optional<IdentifiedVersion> getEarliestVersion() {\n+        Optional<IdentifiedVersion> currentVersion = eventLog.getLatestKnownVersion();\n+        return timestampMap.getEarliestVersion().flatMap(sequence ->\n+                currentVersion.map(version -> IdentifiedVersion.of(version.id(), sequence)));\n+    }\n+\n+    private void checkConditionOrThrow(boolean condition, String message) {\n+        if (condition) {\n+            throw new TransactionLockWatchFailedException(message);\n+        }\n+    }\n+\n+    private CommitUpdate constructCommitUpdate(CommitInfo commitInfo, List<LockWatchEvent> events) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDk3ODM3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjozNDozMFrOGfDldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzo0NzoxNVrOGfGu0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNzc4MQ==", "bodyText": "Again, this is where you should clear out your stale events.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435217781", "createdAt": "2020-06-04T12:34:30Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2OTMyOA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435269328", "createdAt": "2020-06-04T13:47:15Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampToVersionMap.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    private final ClientLockWatchEventLog eventLog;\n+    private final TimestampToVersionMap timestampMap;\n+\n+    public static LockWatchEventCache create() {\n+        return ResilientLockWatchEventCache.newProxyInstance(\n+                new LockWatchEventCacheImpl(ClientLockWatchEventLogImpl.create()), NoOpLockWatchEventCache.INSTANCE);\n+    }\n+\n+    @VisibleForTesting\n+    LockWatchEventCacheImpl(ClientLockWatchEventLog eventLog) {\n+        this.eventLog = eventLog;\n+        timestampMap = new TimestampToVersionMap();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> lastKnownVersion() {\n+        return eventLog.getLatestKnownVersion();\n+    }\n+\n+    @Override\n+    public void processStartTransactionsUpdate(\n+            Set<Long> startTimestamps,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(\n+                version -> startTimestamps.forEach(timestamp -> timestampMap.putStartVersion(timestamp, version)));\n+\n+        getEarliestVersion().ifPresent(eventLog::removeOldEntries);\n+    }\n+\n+    @Override\n+    public void processGetCommitTimestampsUpdate(\n+            Collection<TransactionUpdate> transactionUpdates,\n+            LockWatchStateUpdate update) {\n+        Optional<IdentifiedVersion> latestVersion = processEventLogUpdate(update);\n+\n+        latestVersion.ifPresent(version -> transactionUpdates.forEach(\n+                transactionUpdate -> checkConditionOrThrow(!timestampMap.putCommitUpdate(transactionUpdate, version),\n+                        \"start timestamp missing from map\")));\n+    }\n+\n+    @Override\n+    public CommitUpdate getCommitUpdate(long startTs) {\n+        Optional<IdentifiedVersion> startVersion = timestampMap.getStartVersion(startTs);\n+        Optional<CommitInfo> maybeCommitInfo = timestampMap.getCommitInfo(startTs);\n+\n+        checkConditionOrThrow(!maybeCommitInfo.isPresent() || !startVersion.isPresent(),\n+                \"start or commit info not processed for start timestamp\");\n+\n+        CommitInfo commitInfo = maybeCommitInfo.get();\n+\n+        ClientLogEvents update = eventLog.getEventsBetweenVersions(startVersion, commitInfo.commitVersion());\n+\n+        if (update.clearCache()) {\n+            return ImmutableInvalidateAll.builder().build();\n+        }\n+\n+        return constructCommitUpdate(commitInfo, update.events());\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchEvents getEventsForTransactions(\n+            Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> startVersion) {\n+        Preconditions.checkArgument(!startTimestamps.isEmpty(), \"Cannot get events for empty set of transactions\");\n+        Map<Long, IdentifiedVersion> timestampToVersion = getTimestampMappings(startTimestamps);\n+        IdentifiedVersion endVersion = Collections.max(timestampToVersion.values(),\n+                Comparator.comparingLong(IdentifiedVersion::version));\n+        return eventLog.getEventsBetweenVersions(startVersion, endVersion).map(timestampToVersion);\n+    }\n+\n+    @Override\n+    public void removeTransactionStateFromCache(long startTimestamp) {\n+        timestampMap.remove(startTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNzc4MQ=="}, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDk4NDQ1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjozNjoxMVrOGfDpUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjozOTo1MlrOGfOjnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxODc3MQ==", "bodyText": "nit: This name is weird and we should change it. My suggestion would actually be to flip things around:\n\nLockWatchEventCache -> LockWatchStateStore\nClientLockWatchEventLog -> LockWatchEventLog\n\nOr something to that effect, but \"Client\" is just not very good.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435218771", "createdAt": "2020-06-04T12:36:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NzUzMw==", "bodyText": "I'm going to hold off on the rename to the cache, since that is used in a lot of places, and that would bloat the review by quite a lot. Renamed the log, although it is very similar to LockEventLog which is an entirely distinct piece.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435397533", "createdAt": "2020-06-04T16:39:52Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxODc3MQ=="}, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDk4OTk1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjozNzo0MFrOGfDsyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjozNDo0N1rOGfOXTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxOTY1OA==", "bodyText": "I would maybe again suggest splitting a small datastructure class that has the API you need here.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435219658", "createdAt": "2020-06-04T12:37:40Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM5NDM4Mg==", "bodyText": "I personally disagree with this one. The other split made sense to me as it was strongly coupled (i.e. two maps), but I don't think we get much from wrapping this map in another class (other than a longer diff!). Unless you feel strongly about this I would rather keep as-is.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r435394382", "createdAt": "2020-06-04T16:34:47Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchEventLog;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchEventLogImpl implements ClientLockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshotUpdater snapshotUpdater;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxOTY1OA=="}, "originalCommit": {"oid": "0b5c5163688e4a03b23acb148c627c6adacad271"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYwMzg1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo1NzozN1rOGhF0oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzozMDoyM1rOGh046w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MTU4NA==", "bodyText": "nit: Maybe \"ClientLockWatchSnapshot\", not sure Updater adds much.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437351584", "createdAt": "2020-06-09T11:57:37Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotUpdaterImpl implements ClientLockWatchSnapshotUpdater {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMjczMQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438122731", "createdAt": "2020-06-10T13:30:23Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotUpdaterImpl implements ClientLockWatchSnapshotUpdater {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MTU4NA=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYwNTA4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo1ODowMFrOGhF1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1NDo0N1rOGh1_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MTc3OQ==", "bodyText": "I don't think you need synchronized here anymore?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437351779", "createdAt": "2020-06-09T11:58:00Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotUpdaterImpl implements ClientLockWatchSnapshotUpdater {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshotUpdater create() {\n+        return new ClientLockWatchSnapshotUpdaterImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotUpdaterImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public synchronized LockWatchStateUpdate.Snapshot getSnapshot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MDcyNA==", "bodyText": "Removed", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438140724", "createdAt": "2020-06-10T13:54:47Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotUpdaterImpl implements ClientLockWatchSnapshotUpdater {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshotUpdater create() {\n+        return new ClientLockWatchSnapshotUpdaterImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotUpdaterImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public synchronized LockWatchStateUpdate.Snapshot getSnapshot() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MTc3OQ=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYxNDU2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMDo0OFrOGhF7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1Nzo0M1rOGh2HrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MzMwNA==", "bodyText": "Does this interface need to be public here? Can you not keep it next to the implementation? I feel like this is implementation detail", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437353304", "createdAt": "2020-06-09T12:00:48Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdater.java", "diffHunk": "@@ -16,17 +16,11 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n-import java.util.Optional;\n-import java.util.Set;\n+import java.util.List;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchSnapshotUpdater {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Mjg5Mw==", "bodyText": "Moved to be in same area as impl, and therefore removed public tag.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438142893", "createdAt": "2020-06-10T13:57:43Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLockWatchSnapshotUpdater.java", "diffHunk": "@@ -16,17 +16,11 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n-import java.util.Optional;\n-import java.util.Set;\n+import java.util.List;\n \n-public interface LockWatchEventCache {\n-    Optional<IdentifiedVersion> lastKnownVersion();\n-    void processStartTransactionsUpdate(Set<Long> startTimestamps, LockWatchStateUpdate update);\n-    void processGetCommitTimestampsUpdate(Collection<TransactionUpdate> transactionUpdates,\n-            LockWatchStateUpdate update);\n-    CommitUpdate getCommitUpdate(long startTs);\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> version);\n-    void removeTransactionStateFromCache(long startTimestamp);\n+public interface ClientLockWatchSnapshotUpdater {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MzMwNA=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYxNjI4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLogEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMToyMFrOGhF8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1Nzo1MFrOGh2IBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MzU2NA==", "bodyText": "Does this interface need to be public here? Can you not keep it next to the implementation? I feel like this is implementation detail", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437353564", "createdAt": "2020-06-09T12:01:20Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLogEvents.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ClientLogEvents {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Mjk4MQ==", "bodyText": "Done.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438142981", "createdAt": "2020-06-10T13:57:50Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/ClientLogEvents.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ClientLogEvents {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MzU2NA=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYxNzA3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMTozNlrOGhF82Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1ODowMVrOGh2IoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MzY4OQ==", "bodyText": "I think this is the only API we need possibly?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437353689", "createdAt": "2020-06-09T12:01:36Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface LockWatchEventCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MzEzNw==", "bodyText": "Agreed", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438143137", "createdAt": "2020-06-10T13:58:01Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public interface LockWatchEventCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1MzY4OQ=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYxNzUwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMTo0NFrOGhF9GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1ODoxMVrOGh2JMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1Mzc1Mg==", "bodyText": "Does this interface need to be public here? Can you not keep it next to the implementation? I feel like this is implementation detail", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437353752", "createdAt": "2020-06-09T12:01:44Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventLog.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Optional;\n+\n+public interface LockWatchEventLog {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MzI4Mw==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438143283", "createdAt": "2020-06-10T13:58:11Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEventLog.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Optional;\n+\n+public interface LockWatchEventLog {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1Mzc1Mg=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYxOTI5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMjoyMFrOGhF-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzo1ODozOVrOGh2Kkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDA1Nw==", "bodyText": "Where are the mocks?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437354057", "createdAt": "2020-06-09T12:02:20Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+\n+@RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0MzYzNA==", "bodyText": "Good catch!", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438143634", "createdAt": "2020-06-10T13:58:39Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+\n+@RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDA1Nw=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYyMTI3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMjo1NVrOGhF_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoxNDo0MFrOGh24xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDM5OA==", "bodyText": "Test for what happens after a reset?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437354398", "createdAt": "2020-06-09T12:02:55Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchSnapshotUpdaterImplTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2))\n+                    .build(0L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(1L);\n+    private static final LockWatchEvent LOCK_EVENT = LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3),\n+            LockToken.of(UUID.randomUUID())).build(2L);\n+    private static final IdentifiedVersion VERSION = IdentifiedVersion.of(UUID.randomUUID(), 999L);\n+\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;\n+\n+    @Before\n+    public void before() {\n+        snapshotUpdater = ClientLockWatchSnapshotUpdaterImpl.create();\n+    }\n+\n+    @Test\n+    public void eventsProcessedAsExpected() {\n+        snapshotUpdater.processEvents(ImmutableList.of(WATCH_EVENT), VERSION);\n+        LockWatchStateUpdate.Snapshot snapshot = snapshotUpdater.getSnapshot();\n+        assertThat(snapshot.locked()).containsExactlyInAnyOrder(DESCRIPTOR, DESCRIPTOR_2);\n+        assertThat(snapshot.lockWatches()).containsExactlyInAnyOrder(REFERENCE);\n+\n+        snapshotUpdater.processEvents(ImmutableList.of(UNLOCK_EVENT, LOCK_EVENT), VERSION);\n+        LockWatchStateUpdate.Snapshot snapshot2 = snapshotUpdater.getSnapshot();\n+        assertThat(snapshot2.locked()).containsExactlyInAnyOrder(DESCRIPTOR, DESCRIPTOR_3);\n+        assertThat(snapshot2.lockWatches()).containsExactlyInAnyOrder(REFERENCE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NTQ2MA==", "bodyText": "Done for both snapshot and failure case; can always remove failure case when we need to.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438155460", "createdAt": "2020-06-10T14:14:40Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchSnapshotUpdaterImplTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2))\n+                    .build(0L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(1L);\n+    private static final LockWatchEvent LOCK_EVENT = LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3),\n+            LockToken.of(UUID.randomUUID())).build(2L);\n+    private static final IdentifiedVersion VERSION = IdentifiedVersion.of(UUID.randomUUID(), 999L);\n+\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;\n+\n+    @Before\n+    public void before() {\n+        snapshotUpdater = ClientLockWatchSnapshotUpdaterImpl.create();\n+    }\n+\n+    @Test\n+    public void eventsProcessedAsExpected() {\n+        snapshotUpdater.processEvents(ImmutableList.of(WATCH_EVENT), VERSION);\n+        LockWatchStateUpdate.Snapshot snapshot = snapshotUpdater.getSnapshot();\n+        assertThat(snapshot.locked()).containsExactlyInAnyOrder(DESCRIPTOR, DESCRIPTOR_2);\n+        assertThat(snapshot.lockWatches()).containsExactlyInAnyOrder(REFERENCE);\n+\n+        snapshotUpdater.processEvents(ImmutableList.of(UNLOCK_EVENT, LOCK_EVENT), VERSION);\n+        LockWatchStateUpdate.Snapshot snapshot2 = snapshotUpdater.getSnapshot();\n+        assertThat(snapshot2.locked()).containsExactlyInAnyOrder(DESCRIPTOR, DESCRIPTOR_3);\n+        assertThat(snapshot2.lockWatches()).containsExactlyInAnyOrder(REFERENCE);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDM5OA=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDYyNDM4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjowMzo1MFrOGhGBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNToxMVrOGh2dPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDkyMQ==", "bodyText": "You probably want to extract this into a variable that is shared with the WATCH_EVENT", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r437354921", "createdAt": "2020-06-09T12:03:50Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchSnapshotUpdaterImplTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2))\n+                    .build(0L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(1L);\n+    private static final LockWatchEvent LOCK_EVENT = LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3),\n+            LockToken.of(UUID.randomUUID())).build(2L);\n+    private static final IdentifiedVersion VERSION = IdentifiedVersion.of(UUID.randomUUID(), 999L);\n+\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;\n+\n+    @Before\n+    public void before() {\n+        snapshotUpdater = ClientLockWatchSnapshotUpdaterImpl.create();\n+    }\n+\n+    @Test\n+    public void eventsProcessedAsExpected() {\n+        snapshotUpdater.processEvents(ImmutableList.of(WATCH_EVENT), VERSION);\n+        LockWatchStateUpdate.Snapshot snapshot = snapshotUpdater.getSnapshot();\n+        assertThat(snapshot.locked()).containsExactlyInAnyOrder(DESCRIPTOR, DESCRIPTOR_2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0ODQxMg==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438148412", "createdAt": "2020-06-10T14:05:11Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotUpdaterImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ClientLockWatchSnapshotUpdater;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class ClientLockWatchSnapshotUpdaterImplTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2))\n+                    .build(0L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(1L);\n+    private static final LockWatchEvent LOCK_EVENT = LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3),\n+            LockToken.of(UUID.randomUUID())).build(2L);\n+    private static final IdentifiedVersion VERSION = IdentifiedVersion.of(UUID.randomUUID(), 999L);\n+\n+    private ClientLockWatchSnapshotUpdater snapshotUpdater;\n+\n+    @Before\n+    public void before() {\n+        snapshotUpdater = ClientLockWatchSnapshotUpdaterImpl.create();\n+    }\n+\n+    @Test\n+    public void eventsProcessedAsExpected() {\n+        snapshotUpdater.processEvents(ImmutableList.of(WATCH_EVENT), VERSION);\n+        LockWatchStateUpdate.Snapshot snapshot = snapshotUpdater.getSnapshot();\n+        assertThat(snapshot.locked()).containsExactlyInAnyOrder(DESCRIPTOR, DESCRIPTOR_2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1NDkyMQ=="}, "originalCommit": {"oid": "5e65abf7fda4e6435c36ed024f1883ae19ceec65"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTIyNjM2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0OTo0N1rOGhzNGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNToxOFrOGh2dhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NTEyOA==", "bodyText": "This extends here is really trippy. I'd rather you copy paste some code than use inheritance, for clarity what happens in what state.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438095128", "createdAt": "2020-06-10T12:49:47Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventMap.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventMap.firstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = versionInclusive.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeOldEntries(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventMap.headMap(earliestSequence).entrySet();\n+        Optional<Long> latestDeletedVersion = Streams.findLast(eventsToBeRemoved.stream()).map(Map.Entry::getKey);\n+        Optional<IdentifiedVersion> currentVersion = getLatestKnownVersion();\n+\n+        if (eventsToBeRemoved.isEmpty() || !latestDeletedVersion.isPresent() || !currentVersion.isPresent()) {\n+            return;\n+        }\n+\n+        snapshot.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()),\n+                IdentifiedVersion.of(currentVersion.get().id(), latestDeletedVersion.get()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        return latestVersion;\n+    }\n+\n+    private boolean differentLeaderOrTooFarBehind(IdentifiedVersion currentVersion,\n+            IdentifiedVersion startVersion) {\n+        return !startVersion.id().equals(currentVersion.id()) || eventMap.floorKey(startVersion.version()) == null;\n+    }\n+\n+    private IdentifiedVersion createInclusiveVersion(IdentifiedVersion startVersion) {\n+        return IdentifiedVersion.of(startVersion.id(), startVersion.version() + 1);\n+    }\n+\n+    private IdentifiedVersion getLatestVersionAndVerify(IdentifiedVersion endVersion) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        Preconditions.checkArgument(endVersion.version() <= currentVersion.version(),\n+                \"Transactions' view of the world is more up-to-date than the log\");\n+        return currentVersion;\n+    }\n+\n+    private void processSuccess(LockWatchStateUpdate.Success success) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Must have a known version to process successful updates\");\n+\n+        if (success.lastKnownVersion() > latestVersion.get().version()) {\n+            success.events().forEach(event -> eventMap.put(event.sequence(), event));\n+            latestVersion = Optional.of(IdentifiedVersion.of(success.logId(), eventMap.lastKey()));\n+        }\n+    }\n+\n+    private void processSnapshot(LockWatchStateUpdate.Snapshot snapshotUpdate) {\n+        eventMap.clear();\n+        this.snapshot.resetWithSnapshot(snapshotUpdate);\n+        latestVersion = Optional.of(IdentifiedVersion.of(snapshotUpdate.logId(), snapshotUpdate.lastKnownVersion()));\n+    }\n+\n+    private void processFailed() {\n+        eventMap.clear();\n+        snapshot.reset();\n+        latestVersion = Optional.empty();\n+    }\n+\n+    private class ProcessingVisitor implements LockWatchStateUpdate.Visitor<Boolean> {\n+        @Override\n+        public Boolean visit(LockWatchStateUpdate.Failed failed) {\n+            processFailed();\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visit(LockWatchStateUpdate.Success success) {\n+            processSuccess(success);\n+            return true;\n+        }\n+\n+        @Override\n+        public Boolean visit(LockWatchStateUpdate.Snapshot snapshotUpdate) {\n+            processSnapshot(snapshotUpdate);\n+            return false;\n+        }\n+    }\n+\n+    private final class NewLeaderVisitor extends ProcessingVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0ODQ4NQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438148485", "createdAt": "2020-06-10T14:05:18Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventMap.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventMap.firstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = versionInclusive.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeOldEntries(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventMap.headMap(earliestSequence).entrySet();\n+        Optional<Long> latestDeletedVersion = Streams.findLast(eventsToBeRemoved.stream()).map(Map.Entry::getKey);\n+        Optional<IdentifiedVersion> currentVersion = getLatestKnownVersion();\n+\n+        if (eventsToBeRemoved.isEmpty() || !latestDeletedVersion.isPresent() || !currentVersion.isPresent()) {\n+            return;\n+        }\n+\n+        snapshot.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()),\n+                IdentifiedVersion.of(currentVersion.get().id(), latestDeletedVersion.get()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        return latestVersion;\n+    }\n+\n+    private boolean differentLeaderOrTooFarBehind(IdentifiedVersion currentVersion,\n+            IdentifiedVersion startVersion) {\n+        return !startVersion.id().equals(currentVersion.id()) || eventMap.floorKey(startVersion.version()) == null;\n+    }\n+\n+    private IdentifiedVersion createInclusiveVersion(IdentifiedVersion startVersion) {\n+        return IdentifiedVersion.of(startVersion.id(), startVersion.version() + 1);\n+    }\n+\n+    private IdentifiedVersion getLatestVersionAndVerify(IdentifiedVersion endVersion) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        Preconditions.checkArgument(endVersion.version() <= currentVersion.version(),\n+                \"Transactions' view of the world is more up-to-date than the log\");\n+        return currentVersion;\n+    }\n+\n+    private void processSuccess(LockWatchStateUpdate.Success success) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Must have a known version to process successful updates\");\n+\n+        if (success.lastKnownVersion() > latestVersion.get().version()) {\n+            success.events().forEach(event -> eventMap.put(event.sequence(), event));\n+            latestVersion = Optional.of(IdentifiedVersion.of(success.logId(), eventMap.lastKey()));\n+        }\n+    }\n+\n+    private void processSnapshot(LockWatchStateUpdate.Snapshot snapshotUpdate) {\n+        eventMap.clear();\n+        this.snapshot.resetWithSnapshot(snapshotUpdate);\n+        latestVersion = Optional.of(IdentifiedVersion.of(snapshotUpdate.logId(), snapshotUpdate.lastKnownVersion()));\n+    }\n+\n+    private void processFailed() {\n+        eventMap.clear();\n+        snapshot.reset();\n+        latestVersion = Optional.empty();\n+    }\n+\n+    private class ProcessingVisitor implements LockWatchStateUpdate.Visitor<Boolean> {\n+        @Override\n+        public Boolean visit(LockWatchStateUpdate.Failed failed) {\n+            processFailed();\n+            return false;\n+        }\n+\n+        @Override\n+        public Boolean visit(LockWatchStateUpdate.Success success) {\n+            processSuccess(success);\n+            return true;\n+        }\n+\n+        @Override\n+        public Boolean visit(LockWatchStateUpdate.Snapshot snapshotUpdate) {\n+            processSnapshot(snapshotUpdate);\n+            return false;\n+        }\n+    }\n+\n+    private final class NewLeaderVisitor extends ProcessingVisitor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NTEyOA=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTIyOTU1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo1MDozMFrOGhzPCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowNToyNFrOGh2d3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NTYyNw==", "bodyText": "using a boolean to indicate something here is really hard to reason about, and probably easy to screw up. Have an enum ShouldClearCache or something", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438095627", "createdAt": "2020-06-10T12:50:30Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0ODU3Mw==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438148573", "createdAt": "2020-06-10T14:05:24Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NTYyNw=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTI5MDc5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzowNToxNlrOGhz1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzozNzo1M1rOGh1OOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTQ1NA==", "bodyText": "So I think this is good, because you should not assume that startTransaction requests are processed in a single-threaded way. BUT startTransaction and getCommitTimestamp can run concurrently. And I wonder if we should assume that there can't be more concurrent executions in general.\nI wonder if the below if statement is enough to catch reordered execution between these and therefore I'm wondering if the callers should pass their lastKnown version. So imagine you have:\nThread 1: calls startTransactions on timelock with latestVersion 1\nThread 2: calls getCommitTimestamp with latestVersion 1 (because Thread 1 hasn't returned yet)\nThread 2: returns events [2,3]\nThread 1: returns events [2,3,4]\nIs there some reordering where you would loose events somehow and end up with holes?  Should we have the eventMap also know what the last eventId it has is and know what to expect afterwards, and double check they're coming back in the right order?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438105454", "createdAt": "2020-06-10T13:05:16Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventMap.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventMap.firstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = versionInclusive.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeOldEntries(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventMap.headMap(earliestSequence).entrySet();\n+        Optional<Long> latestDeletedVersion = Streams.findLast(eventsToBeRemoved.stream()).map(Map.Entry::getKey);\n+        Optional<IdentifiedVersion> currentVersion = getLatestKnownVersion();\n+\n+        if (eventsToBeRemoved.isEmpty() || !latestDeletedVersion.isPresent() || !currentVersion.isPresent()) {\n+            return;\n+        }\n+\n+        snapshot.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()),\n+                IdentifiedVersion.of(currentVersion.get().id(), latestDeletedVersion.get()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        return latestVersion;\n+    }\n+\n+    private boolean differentLeaderOrTooFarBehind(IdentifiedVersion currentVersion,\n+            IdentifiedVersion startVersion) {\n+        return !startVersion.id().equals(currentVersion.id()) || eventMap.floorKey(startVersion.version()) == null;\n+    }\n+\n+    private IdentifiedVersion createInclusiveVersion(IdentifiedVersion startVersion) {\n+        return IdentifiedVersion.of(startVersion.id(), startVersion.version() + 1);\n+    }\n+\n+    private IdentifiedVersion getLatestVersionAndVerify(IdentifiedVersion endVersion) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        Preconditions.checkArgument(endVersion.version() <= currentVersion.version(),\n+                \"Transactions' view of the world is more up-to-date than the log\");\n+        return currentVersion;\n+    }\n+\n+    private void processSuccess(LockWatchStateUpdate.Success success) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Must have a known version to process successful updates\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyODE4NQ==", "bodyText": "I have thought about this a lot, and I do not think that the above causes problems. Thread 2 would return events [2, 3] and they are put into the cache; the cache's latest version is now 3. Now, thread 1 returns [2, 3, 4] and the latest version of that update, 4, is greater than 3. Therefore it would process those events again. Now, you are possibly thinking: 2, 3 are double-processed; can we get into a state where:\nCache contains values [3 ... X]\nupdate which started ages ago comes back with values [2 ... X + 1]\nWe've already retentioned 2, but now it's been re-processed. However, this is still fine.\na) Events are only retentioned when the earliest version in the cache above are gone. If an old event (2 in the above example) re-appears, it would never be used, as all timestamps have versions after it anyway.\nb) We assume that there are no holes, and I believe this to be a fair assumption: I believe the ordering:\nThread A returns [2,3]\nThread B returns [5, 6]\nThread C returns [4] (which we miss since 4 < 5)\nis impossible; there is no way that thread B can return [5, 6] without also containing [4], as it must have started with the latest version in the cache, 3.\nThe bottom line is that I do not believe that there is a way that we leave a hole. Let me know if this makes sense; I don't think anything else is needed for correctness, but if there is anything to make this less potentially scary then maybe it is worth doing.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438128185", "createdAt": "2020-06-10T13:37:53Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventMap.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventMap.firstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = versionInclusive.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeOldEntries(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventMap.headMap(earliestSequence).entrySet();\n+        Optional<Long> latestDeletedVersion = Streams.findLast(eventsToBeRemoved.stream()).map(Map.Entry::getKey);\n+        Optional<IdentifiedVersion> currentVersion = getLatestKnownVersion();\n+\n+        if (eventsToBeRemoved.isEmpty() || !latestDeletedVersion.isPresent() || !currentVersion.isPresent()) {\n+            return;\n+        }\n+\n+        snapshot.processEvents(\n+                eventsToBeRemoved.stream().map(Map.Entry::getValue).collect(Collectors.toList()),\n+                IdentifiedVersion.of(currentVersion.get().id(), latestDeletedVersion.get()));\n+        eventsToBeRemoved.clear();\n+    }\n+\n+    @Override\n+    public Optional<IdentifiedVersion> getLatestKnownVersion() {\n+        return latestVersion;\n+    }\n+\n+    private boolean differentLeaderOrTooFarBehind(IdentifiedVersion currentVersion,\n+            IdentifiedVersion startVersion) {\n+        return !startVersion.id().equals(currentVersion.id()) || eventMap.floorKey(startVersion.version()) == null;\n+    }\n+\n+    private IdentifiedVersion createInclusiveVersion(IdentifiedVersion startVersion) {\n+        return IdentifiedVersion.of(startVersion.id(), startVersion.version() + 1);\n+    }\n+\n+    private IdentifiedVersion getLatestVersionAndVerify(IdentifiedVersion endVersion) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Cannot get events when log does not know its version\");\n+        IdentifiedVersion currentVersion = latestVersion.get();\n+        Preconditions.checkArgument(endVersion.version() <= currentVersion.version(),\n+                \"Transactions' view of the world is more up-to-date than the log\");\n+        return currentVersion;\n+    }\n+\n+    private void processSuccess(LockWatchStateUpdate.Success success) {\n+        Preconditions.checkState(latestVersion.isPresent(), \"Must have a known version to process successful updates\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTQ1NA=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTM0MzM2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoxODoxNlrOGh0XPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoxODoxNlrOGh0XPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNDEwOA==", "bodyText": "This is quite gnarly to read, but I think correct.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438114108", "createdAt": "2020-06-10T13:18:16Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTM1MjQ3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoyMDozMlrOGh0dKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowOTowM1rOGh2oTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNTYyNw==", "bodyText": "I think you should review your code to make sure this naming is the same everywhere. The name in the API is \"lastKnownVersion\" meaning the client knows of events up to and including this version.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438115627", "createdAt": "2020-06-10T13:20:32Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MTI0Ng==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438151246", "createdAt": "2020-06-10T14:09:03Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNTYyNw=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTM1NTA1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoyMToxMVrOGh0e2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowOToxNFrOGh2o4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNjA1Ng==", "bodyText": "This is why the \"inclusiveVersion\" is kinda misleading here: the version is already inclusive, you are trying to compute the next eventId after that.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438116056", "createdAt": "2020-06-10T13:21:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMDQwNg==", "bodyText": "Well, the client passes down the last version that they know about - i.e. \"I have all events up to and including this version\". Therefore the earliest event possible that is still useful is one immediately after that version, right? i.e. X+1?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438130406", "createdAt": "2020-06-10T13:41:00Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNjA1Ng=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMDYyNg==", "bodyText": "Although I agree that the naming is perhaps a bit hard to parse", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438130626", "createdAt": "2020-06-10T13:41:18Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNjA1Ng=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MDg5OA==", "bodyText": "ah, so the client's version is \"inclusive\" of the events they know, whereas this is the version that is \"inclusive\" of what I want to know.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438150898", "createdAt": "2020-06-10T14:08:38Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNjA1Ng=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1MTM5NQ==", "bodyText": "I think I've made it clearer", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438151395", "createdAt": "2020-06-10T14:09:14Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNjA1Ng=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTM2NjMyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoyMzozNlrOGh0l0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoxNTo0M1rOGh275A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzg0MQ==", "bodyText": "This is more like \"eventIdToKeep\"", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438117841", "createdAt": "2020-06-10T13:23:36Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventMap.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventMap.firstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = versionInclusive.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeOldEntries(long earliestSequence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE1NjI2MA==", "bodyText": "I think I would prefer removeEventsBefore - will change it to that (as that still implies that there is some removing occurring).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438156260", "createdAt": "2020-06-10T14:15:43Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.ClientLogEvents;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventLog;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public boolean processUpdate(LockWatchStateUpdate update) {\n+        final ProcessingVisitor visitor;\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            visitor = new NewLeaderVisitor();\n+        } else {\n+            visitor = new ProcessingVisitor();\n+        }\n+        return update.accept(visitor);\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> startVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> versionInclusive = startVersion.map(this::createInclusiveVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!versionInclusive.isPresent() || differentLeaderOrTooFarBehind(currentVersion, versionInclusive.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventMap.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventMap.firstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = versionInclusive.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventMap.subMap(fromSequence, INCLUSIVE, endVersion.version(), INCLUSIVE).values());\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeOldEntries(long earliestSequence) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzg0MQ=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTM3NzgwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoyNjoxM1rOGh0tGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDoyNToyMVrOGh3ZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExOTcwNQ==", "bodyText": "I don't think it would hurt to be defensive here and check that the events are contiguous and the first event in \"events\" has id that is the next if after your snapshot version.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438119705", "createdAt": "2020-06-10T13:26:13Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotImpl implements ClientLockWatchSnapshot {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshot create() {\n+        return new ClientLockWatchSnapshotImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public synchronized LockWatchStateUpdate.Snapshot getSnapshot() {\n+        Preconditions.checkState(snapshotVersion.isPresent(),\n+                \"Snapshot was reset on fail and has not been seeded since\");\n+        return LockWatchStateUpdate.snapshot(\n+                snapshotVersion.get().id(),\n+                snapshotVersion.get().version(),\n+                ImmutableSet.copyOf(locked),\n+                ImmutableSet.copyOf(watches));\n+    }\n+\n+    @Override\n+    public void processEvents(List<LockWatchEvent> events, IdentifiedVersion lastVersion) {\n+        events.forEach(event -> event.accept(visitor));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2Mzc3MQ==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438163771", "createdAt": "2020-06-10T14:25:21Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.ClientLockWatchSnapshot;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotImpl implements ClientLockWatchSnapshot {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshot create() {\n+        return new ClientLockWatchSnapshotImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public synchronized LockWatchStateUpdate.Snapshot getSnapshot() {\n+        Preconditions.checkState(snapshotVersion.isPresent(),\n+                \"Snapshot was reset on fail and has not been seeded since\");\n+        return LockWatchStateUpdate.snapshot(\n+                snapshotVersion.get().id(),\n+                snapshotVersion.get().version(),\n+                ImmutableSet.copyOf(locked),\n+                ImmutableSet.copyOf(watches));\n+    }\n+\n+    @Override\n+    public void processEvents(List<LockWatchEvent> events, IdentifiedVersion lastVersion) {\n+        events.forEach(event -> event.accept(visitor));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExOTcwNQ=="}, "originalCommit": {"oid": "711e9bf5dca4a299e62330f05c3b88d0ceee0962"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDA0ODU0OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CacheStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTo1MTo0MlrOGh7bpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTo1MTo0MlrOGh7bpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyOTkyNQ==", "bodyText": "Dodgy diff, because I moved a load of things", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r438229925", "createdAt": "2020-06-10T15:51:42Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CacheStatus.java", "diffHunk": "@@ -16,17 +16,17 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.Collection;\n-import java.util.Optional;\n-import java.util.Set;\n+public enum CacheStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDcyMTgzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozNDowOFrOGlDmaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowNjoxNVrOGlKPgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwOTQ4MQ==", "bodyText": "This should be long putAll(Iterable events), then your code that uses it becomes:\nlatestVersion = Optional.of(IdentifiedVersion.of(success.logId(), eventStore.putAll(success.events())));\n\nAnd you can make #getFirstKey private.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441509481", "createdAt": "2020-06-17T12:34:08Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {\n+        return eventMap.isEmpty();\n+    }\n+\n+    long getFirstKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get first key from empty map\");\n+        return eventMap.firstKey();\n+    }\n+\n+    long getLastKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get last key from empty map\");\n+        return eventMap.lastKey();\n+    }\n+\n+    Collection<LockWatchEvent> getEventsBetweenVersionsInclusive(long startVersion, long endVersion) {\n+        return eventMap.subMap(startVersion, INCLUSIVE, endVersion, INCLUSIVE).values();\n+    }\n+\n+    Set<Map.Entry<Long, LockWatchEvent>> getElementsUpToExclusive(long endVersion) {\n+        return ImmutableSet.copyOf(eventMap.headMap(endVersion).entrySet());\n+    }\n+\n+    void clearElementsUpToExclusive(long endVersion) {\n+        eventMap.headMap(endVersion).entrySet().clear();\n+    }\n+\n+    boolean hasFloorKey(long key) {\n+        return eventMap.floorKey(key) != null;\n+    }\n+\n+    void clear() {\n+        eventMap.clear();\n+    }\n+\n+    void put(long version, LockWatchEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxODMwNg==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441618306", "createdAt": "2020-06-17T15:06:15Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {\n+        return eventMap.isEmpty();\n+    }\n+\n+    long getFirstKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get first key from empty map\");\n+        return eventMap.firstKey();\n+    }\n+\n+    long getLastKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get last key from empty map\");\n+        return eventMap.lastKey();\n+    }\n+\n+    Collection<LockWatchEvent> getEventsBetweenVersionsInclusive(long startVersion, long endVersion) {\n+        return eventMap.subMap(startVersion, INCLUSIVE, endVersion, INCLUSIVE).values();\n+    }\n+\n+    Set<Map.Entry<Long, LockWatchEvent>> getElementsUpToExclusive(long endVersion) {\n+        return ImmutableSet.copyOf(eventMap.headMap(endVersion).entrySet());\n+    }\n+\n+    void clearElementsUpToExclusive(long endVersion) {\n+        eventMap.headMap(endVersion).entrySet().clear();\n+    }\n+\n+    boolean hasFloorKey(long key) {\n+        return eventMap.floorKey(key) != null;\n+    }\n+\n+    void clear() {\n+        eventMap.clear();\n+    }\n+\n+    void put(long version, LockWatchEvent event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwOTQ4MQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDcyNTkwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjozNToxNFrOGlDo9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowNjozNVrOGlKQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDEzMw==", "bodyText": "This should be #contains.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441510133", "createdAt": "2020-06-17T12:35:14Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {\n+        return eventMap.isEmpty();\n+    }\n+\n+    long getFirstKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get first key from empty map\");\n+        return eventMap.firstKey();\n+    }\n+\n+    long getLastKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get last key from empty map\");\n+        return eventMap.lastKey();\n+    }\n+\n+    Collection<LockWatchEvent> getEventsBetweenVersionsInclusive(long startVersion, long endVersion) {\n+        return eventMap.subMap(startVersion, INCLUSIVE, endVersion, INCLUSIVE).values();\n+    }\n+\n+    Set<Map.Entry<Long, LockWatchEvent>> getElementsUpToExclusive(long endVersion) {\n+        return ImmutableSet.copyOf(eventMap.headMap(endVersion).entrySet());\n+    }\n+\n+    void clearElementsUpToExclusive(long endVersion) {\n+        eventMap.headMap(endVersion).entrySet().clear();\n+    }\n+\n+    boolean hasFloorKey(long key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxODU3Nw==", "bodyText": "done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441618577", "createdAt": "2020-06-17T15:06:35Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {\n+        return eventMap.isEmpty();\n+    }\n+\n+    long getFirstKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get first key from empty map\");\n+        return eventMap.firstKey();\n+    }\n+\n+    long getLastKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get last key from empty map\");\n+        return eventMap.lastKey();\n+    }\n+\n+    Collection<LockWatchEvent> getEventsBetweenVersionsInclusive(long startVersion, long endVersion) {\n+        return eventMap.subMap(startVersion, INCLUSIVE, endVersion, INCLUSIVE).values();\n+    }\n+\n+    Set<Map.Entry<Long, LockWatchEvent>> getElementsUpToExclusive(long endVersion) {\n+        return ImmutableSet.copyOf(eventMap.headMap(endVersion).entrySet());\n+    }\n+\n+    void clearElementsUpToExclusive(long endVersion) {\n+        eventMap.headMap(endVersion).entrySet().clear();\n+    }\n+\n+    boolean hasFloorKey(long key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMDEzMw=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDc0MjkzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0MDowMVrOGlD0Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNzoxN1rOGlM1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMjk2Mw==", "bodyText": "I think this should be something like:\ngetLatestKnownVersion().ifPresent(currentVersion -> {\nSet<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventStore.removeEventsUpToExlusive(earliestSequence);\n  snapshot.processEvents(\n                removedEvents.stream().map(Map.Entry::getValue).collect(Collectors.toList()),\n                IdentifiedVersion.of(currentVersion.get().id(), latestDeletedVersion.get()))\n}) ;\n\nThis should allow you to get rid of VersionedEventStore#getElementsUpToExclusive and generally clean this up.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441512963", "createdAt": "2020-06-17T12:40:01Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!startVersion.isPresent() || differentLeaderOrTooFarBehind(currentVersion, startVersion.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventStore.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventStore.getFirstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = startVersion.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventStore.getEventsBetweenVersionsInclusive(fromSequence, endVersion.version()));\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeEventsBefore(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventStore.getElementsUpToExclusive(earliestSequence);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0Nzg4MQ==", "bodyText": "Impl is a bit cleaner now, although the need to still compute latestDeletedVersion is a little meh.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441647881", "createdAt": "2020-06-17T15:47:25Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!startVersion.isPresent() || differentLeaderOrTooFarBehind(currentVersion, startVersion.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventStore.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventStore.getFirstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = startVersion.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventStore.getEventsBetweenVersionsInclusive(fromSequence, endVersion.version()));\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeEventsBefore(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventStore.getElementsUpToExclusive(earliestSequence);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMjk2Mw=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDczMA==", "bodyText": "also just saw later comment.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441660730", "createdAt": "2020-06-17T16:07:17Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;\n+\n+        if (!startVersion.isPresent() || differentLeaderOrTooFarBehind(currentVersion, startVersion.get())) {\n+            eventBuilder.addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()));\n+            eventBuilder.clearCache(true);\n+            if (eventStore.isEmpty()) {\n+                return eventBuilder.build();\n+            }\n+            fromSequence = eventStore.getFirstKey();\n+        } else {\n+            eventBuilder.clearCache(false);\n+            fromSequence = startVersion.get().version();\n+        }\n+\n+        eventBuilder.addAllEvents(eventStore.getEventsBetweenVersionsInclusive(fromSequence, endVersion.version()));\n+        return eventBuilder.build();\n+    }\n+\n+    @Override\n+    public void removeEventsBefore(long earliestSequence) {\n+        Set<Map.Entry<Long, LockWatchEvent>> eventsToBeRemoved = eventStore.getElementsUpToExclusive(earliestSequence);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMjk2Mw=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDc0ODc0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0MTozNlrOGlD3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowOTozMVrOGlM6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzg5MQ==", "bodyText": "I feel like you could clean this up if this was Optional and then VersionedEventStore#getEventsBetweenVersionsInclusive takes an Optional. And you would get rid of VersionedStore#getFirstKey", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441513891", "createdAt": "2020-06-17T12:41:36Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzNDA1Mg==", "bodyText": "Even better: I would just have an if statement that run the whole codepath, it is clearly a different codepath depending on whether you have a snapshot or not. The way you have it you're saving 1 line of duplication (to do the getEventsBetweenVersionsInclusive in one place), but in order to do that you are making the code non-linear and creating a builder half way through. My opinion is that this would be easier to read if you just had:\nif (rebuildFromSnapshot()) {\n  return new ClientLogEvents.Builder()\n    .clearCache(true)\n    .addEvents(LockWatchCreatedEvent.fromSnapshot(snapshot.getSnapshot()))\n    .addAllEvents(eventStore.getEventsBetweenVersionsInclusive(Optional.empty(), endVersion.version()))\n}\n\nreturn new ClientLogEvents.Builder()\n    .clearCache(false)\n    .addAllEvents(eventStore.getEventsBetweenVersionsInclusive(Optional.of(theVersion), endVersion.version()));", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441634052", "createdAt": "2020-06-17T15:26:48Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzg5MQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1NjQzOQ==", "bodyText": "Done, although I feel like there is maybe a nicer optional functional method to use in my impl to make it nicer.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441656439", "createdAt": "2020-06-17T16:00:13Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzg5MQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDU5NA==", "bodyText": "ah, didn't see later comment.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441660594", "createdAt": "2020-06-17T16:07:04Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzg5MQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MjE0Nw==", "bodyText": "Actually that does work out pretty nicely.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441662147", "createdAt": "2020-06-17T16:09:31Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLogImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class LockWatchEventLogImpl implements LockWatchEventLog {\n+    private final ClientLockWatchSnapshot snapshot;\n+    private final VersionedEventStore eventStore = new VersionedEventStore();\n+\n+    private Optional<IdentifiedVersion> latestVersion = Optional.empty();\n+\n+    static LockWatchEventLog create() {\n+        return create(ClientLockWatchSnapshotImpl.create());\n+    }\n+\n+    @VisibleForTesting\n+    static LockWatchEventLog create(ClientLockWatchSnapshot snapshot) {\n+        return new LockWatchEventLogImpl(snapshot);\n+    }\n+\n+    private LockWatchEventLogImpl(ClientLockWatchSnapshot snapshot) {\n+        this.snapshot = snapshot;\n+    }\n+\n+    @Override\n+    public CacheStatus processUpdate(LockWatchStateUpdate update) {\n+        if (!latestVersion.isPresent() || !update.logId().equals(latestVersion.get().id())) {\n+            return update.accept(new NewLeaderVisitor());\n+        } else {\n+            return update.accept(new ProcessingVisitor());\n+        }\n+    }\n+\n+    @Override\n+    public ClientLogEvents getEventsBetweenVersions(\n+            Optional<IdentifiedVersion> lastKnownVersion,\n+            IdentifiedVersion endVersion) {\n+        Optional<IdentifiedVersion> startVersion = lastKnownVersion.map(this::createStartVersion);\n+        IdentifiedVersion currentVersion = getLatestVersionAndVerify(endVersion);\n+        ClientLogEvents.Builder eventBuilder = new ClientLogEvents.Builder();\n+        final long fromSequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxMzg5MQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDc1MjkwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0Mjo0NVrOGlD6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNDo0NFrOGlMvEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDU2MA==", "bodyText": "Why do you sometimes copy and sometimes not? I feel like you should stick to one, and maybe consider Collections.unmodifiable* wrappers.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441514560", "createdAt": "2020-06-17T12:42:45Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {\n+        return eventMap.isEmpty();\n+    }\n+\n+    long getFirstKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get first key from empty map\");\n+        return eventMap.firstKey();\n+    }\n+\n+    long getLastKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get last key from empty map\");\n+        return eventMap.lastKey();\n+    }\n+\n+    Collection<LockWatchEvent> getEventsBetweenVersionsInclusive(long startVersion, long endVersion) {\n+        return eventMap.subMap(startVersion, INCLUSIVE, endVersion, INCLUSIVE).values();\n+    }\n+\n+    Set<Map.Entry<Long, LockWatchEvent>> getElementsUpToExclusive(long endVersion) {\n+        return ImmutableSet.copyOf(eventMap.headMap(endVersion).entrySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1OTE1NQ==", "bodyText": "As I understand it, that wrapper returns a view, so if I modify the underlying structure, that will possibly be reflected in the returned one. So this is not a problem in some of the internal cases as it is synchronised, but we want to be careful when returning to the user that it is decoupled from the underlying implementation.\nIn this particular case (after latest refactor), we need to do a copy as we immediately delete the elements in the underlying structure before processing them in the snapshot updater.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441659155", "createdAt": "2020-06-17T16:04:44Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {\n+        return eventMap.isEmpty();\n+    }\n+\n+    long getFirstKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get first key from empty map\");\n+        return eventMap.firstKey();\n+    }\n+\n+    long getLastKey() {\n+        Preconditions.checkState(!eventMap.isEmpty(), \"Cannot get last key from empty map\");\n+        return eventMap.lastKey();\n+    }\n+\n+    Collection<LockWatchEvent> getEventsBetweenVersionsInclusive(long startVersion, long endVersion) {\n+        return eventMap.subMap(startVersion, INCLUSIVE, endVersion, INCLUSIVE).values();\n+    }\n+\n+    Set<Map.Entry<Long, LockWatchEvent>> getElementsUpToExclusive(long endVersion) {\n+        return ImmutableSet.copyOf(eventMap.headMap(endVersion).entrySet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNDU2MA=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDc1ODA3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0NDowOFrOGlD9kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0NDowOFrOGlD9kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNTQxMQ==", "bodyText": "In general I like this more, because reading floorKey etc. is not great in the other class. But you should just make sure you have API on this class that is not just a wrapping of NavigableMap without any renames that make sense. I suggested a few strategies above.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441515411", "createdAt": "2020-06-17T12:44:08Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class VersionedEventStore {\n+    private static final boolean INCLUSIVE = true;\n+\n+    private final NavigableMap<Long, LockWatchEvent> eventMap = new TreeMap<>();\n+\n+    boolean isEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDc2NjU4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo0NjoyMFrOGlEC4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNTowM1rOGlMvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNjc2OA==", "bodyText": "nit: contiguous", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441516768", "createdAt": "2020-06-17T12:46:20Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotImpl implements ClientLockWatchSnapshot {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshot create() {\n+        return new ClientLockWatchSnapshotImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public LockWatchStateUpdate.Snapshot getSnapshot() {\n+        Preconditions.checkState(snapshotVersion.isPresent(),\n+                \"Snapshot was reset on fail and has not been seeded since\");\n+        return LockWatchStateUpdate.snapshot(\n+                snapshotVersion.get().id(),\n+                snapshotVersion.get().version(),\n+                ImmutableSet.copyOf(locked),\n+                ImmutableSet.copyOf(watches));\n+    }\n+\n+    @Override\n+    public void processEvents(List<LockWatchEvent> events, IdentifiedVersion lastVersion) {\n+        assertEventsAreContinguous(events);\n+        events.forEach(event -> event.accept(visitor));\n+        snapshotVersion = Optional.of(lastVersion);\n+    }\n+\n+    @Override\n+    public void resetWithSnapshot(LockWatchStateUpdate.Snapshot snapshot) {\n+        reset();\n+        watches.addAll(snapshot.lockWatches());\n+        locked.addAll(snapshot.locked());\n+        snapshotVersion = Optional.of(IdentifiedVersion.of(snapshot.logId(), snapshot.lastKnownVersion()));\n+    }\n+\n+    @Override\n+    public void reset() {\n+        snapshotVersion = Optional.empty();\n+        watches.clear();\n+        locked.clear();\n+    }\n+\n+    private void assertEventsAreContinguous(List<LockWatchEvent> events) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY1OTMyOA==", "bodyText": "Good catch.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441659328", "createdAt": "2020-06-17T16:05:03Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotImpl implements ClientLockWatchSnapshot {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshot create() {\n+        return new ClientLockWatchSnapshotImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public LockWatchStateUpdate.Snapshot getSnapshot() {\n+        Preconditions.checkState(snapshotVersion.isPresent(),\n+                \"Snapshot was reset on fail and has not been seeded since\");\n+        return LockWatchStateUpdate.snapshot(\n+                snapshotVersion.get().id(),\n+                snapshotVersion.get().version(),\n+                ImmutableSet.copyOf(locked),\n+                ImmutableSet.copyOf(watches));\n+    }\n+\n+    @Override\n+    public void processEvents(List<LockWatchEvent> events, IdentifiedVersion lastVersion) {\n+        assertEventsAreContinguous(events);\n+        events.forEach(event -> event.accept(visitor));\n+        snapshotVersion = Optional.of(lastVersion);\n+    }\n+\n+    @Override\n+    public void resetWithSnapshot(LockWatchStateUpdate.Snapshot snapshot) {\n+        reset();\n+        watches.addAll(snapshot.lockWatches());\n+        locked.addAll(snapshot.locked());\n+        snapshotVersion = Optional.of(IdentifiedVersion.of(snapshot.logId(), snapshot.lastKnownVersion()));\n+    }\n+\n+    @Override\n+    public void reset() {\n+        snapshotVersion = Optional.empty();\n+        watches.clear();\n+        locked.clear();\n+    }\n+\n+    private void assertEventsAreContinguous(List<LockWatchEvent> events) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUxNjc2OA=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDc4ODIzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjo1MjowOVrOGlEQiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjoyMzo1NFrOGlNcgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyMDI2NQ==", "bodyText": "I have a feeling that this would be much nicer if:\n\nOnce you have my other suggestions about the code in LockWatchEventLogImpl#removeEvents\nclearElementsUpToExclusive actually returns a LockWatchEvents little type.\nprocessEvents in this class accepts that, and only that. It then computes the latest version by getting the last event itself. Basically it feels weird to pass it something that it then needs to trust was computed correctly.\n\nAnd then LockWatchEvents is a small wrapper around a list of events that validates continuity. And then", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441520265", "createdAt": "2020-06-17T12:52:09Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotImpl implements ClientLockWatchSnapshot {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshot create() {\n+        return new ClientLockWatchSnapshotImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public LockWatchStateUpdate.Snapshot getSnapshot() {\n+        Preconditions.checkState(snapshotVersion.isPresent(),\n+                \"Snapshot was reset on fail and has not been seeded since\");\n+        return LockWatchStateUpdate.snapshot(\n+                snapshotVersion.get().id(),\n+                snapshotVersion.get().version(),\n+                ImmutableSet.copyOf(locked),\n+                ImmutableSet.copyOf(watches));\n+    }\n+\n+    @Override\n+    public void processEvents(List<LockWatchEvent> events, IdentifiedVersion lastVersion) {\n+        assertEventsAreContinguous(events);\n+        events.forEach(event -> event.accept(visitor));\n+        snapshotVersion = Optional.of(lastVersion);\n+    }\n+\n+    @Override\n+    public void resetWithSnapshot(LockWatchStateUpdate.Snapshot snapshot) {\n+        reset();\n+        watches.addAll(snapshot.lockWatches());\n+        locked.addAll(snapshot.locked());\n+        snapshotVersion = Optional.of(IdentifiedVersion.of(snapshot.logId(), snapshot.lastKnownVersion()));\n+    }\n+\n+    @Override\n+    public void reset() {\n+        snapshotVersion = Optional.empty();\n+        watches.clear();\n+        locked.clear();\n+    }\n+\n+    private void assertEventsAreContinguous(List<LockWatchEvent> events) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MDc4Ng==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441670786", "createdAt": "2020-06-17T16:23:54Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshotImpl.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class ClientLockWatchSnapshotImpl implements ClientLockWatchSnapshot {\n+    private final Set<LockWatchReferences.LockWatchReference> watches;\n+    private final Set<LockDescriptor> locked;\n+    private final EventVisitor visitor;\n+    private Optional<IdentifiedVersion> snapshotVersion;\n+\n+    static ClientLockWatchSnapshot create() {\n+        return new ClientLockWatchSnapshotImpl();\n+    }\n+\n+    private ClientLockWatchSnapshotImpl() {\n+        this.watches = new HashSet<>();\n+        this.locked = new HashSet<>();\n+        this.visitor = new EventVisitor();\n+        this.snapshotVersion = Optional.empty();\n+    }\n+\n+    @Override\n+    public LockWatchStateUpdate.Snapshot getSnapshot() {\n+        Preconditions.checkState(snapshotVersion.isPresent(),\n+                \"Snapshot was reset on fail and has not been seeded since\");\n+        return LockWatchStateUpdate.snapshot(\n+                snapshotVersion.get().id(),\n+                snapshotVersion.get().version(),\n+                ImmutableSet.copyOf(locked),\n+                ImmutableSet.copyOf(watches));\n+    }\n+\n+    @Override\n+    public void processEvents(List<LockWatchEvent> events, IdentifiedVersion lastVersion) {\n+        assertEventsAreContinguous(events);\n+        events.forEach(event -> event.accept(visitor));\n+        snapshotVersion = Optional.of(lastVersion);\n+    }\n+\n+    @Override\n+    public void resetWithSnapshot(LockWatchStateUpdate.Snapshot snapshot) {\n+        reset();\n+        watches.addAll(snapshot.lockWatches());\n+        locked.addAll(snapshot.locked());\n+        snapshotVersion = Optional.of(IdentifiedVersion.of(snapshot.logId(), snapshot.lastKnownVersion()));\n+    }\n+\n+    @Override\n+    public void reset() {\n+        snapshotVersion = Optional.empty();\n+        watches.clear();\n+        locked.clear();\n+    }\n+\n+    private void assertEventsAreContinguous(List<LockWatchEvent> events) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyMDI2NQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDg2NDcxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoxMToyNlrOGlFA7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowODoyMlrOGlHiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjY1NQ==", "bodyText": "I will put one comment for LockWatchEventCacheImplTest and LockWatchEventLogImplTest (and kinda LockWattchEventCacheIntegrationTest):\nI feel that the tests in LockWatchEventCacheImplTest and LockWatchEventLogImplTest, where you mock all the datastructures underneath them, are quite fragile in general. What I kinda had in mind is:\n\nLockWatchEventCacheImpl has a package private method called #getSnapshot which returns a Snapshot of all the internal datastructures (so it contains log of events, all the open transactions and their state, and current snapshot). That thing is Json serializable\nYou only have 1 big integration test, that tests a bunch of scenarios where you poke the LockWatchEventCacheImpl, but after each step take a snapshot and compare it to a golden file (and do as many steps as you want).\nThe review is just a matter of: read a test case in LockWAtchEventCacheImplIntegrationTest, understand what it should do to the internal datastructures, and go diff each step and see that the right thing happened.\n\nThis is a bit of extra code that will only be used for tests, however I would argue that the implementation of this cache is the critical piece to all of lock watches (this and the timelock code).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441532655", "createdAt": "2020-06-17T13:11:26Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImplTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class LockWatchEventCacheImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MzkwNg==", "bodyText": "I think this does describe a useful test, although it does depend on the creation of the \"golden file\" being correct: given that this is the first implementation, I feel like it is hard to convince oneself that \"this golden file is actually 100% super correct\", other than by manual review. Still, I absolutely agree about the tests being pretty fragile, and I think this could be pretty good. I'll experiment and see what it looks like.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r441573906", "createdAt": "2020-06-17T14:08:22Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImplTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public final class LockWatchEventCacheImplTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjY1NQ=="}, "originalCommit": {"oid": "a311fcd0f3b3833f664d435b534eb38ad556deae"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzIyMDA2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDo0ODoxNFrOGm7fAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxOToyM1rOGm-Jew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3MzY2Nw==", "bodyText": "I think we discussed that ideally we won't have these directly on this class. Either have a small Snapshot class defined or remove these and it will likely still work (cause Jackson is magic).", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443473667", "createdAt": "2020-06-22T10:48:14Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampStateStore.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzMwNw==", "bodyText": "I don't think removing worked, but gone for a few state classes instead.", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443517307", "createdAt": "2020-06-22T12:19:23Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.watch.TimestampStateStore.CommitInfo;\n+import com.palantir.atlasdb.transaction.api.TransactionLockWatchFailedException;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CacheStatus;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableInvalidateAll;\n+import com.palantir.lock.watch.ImmutableInvalidateSome;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.Preconditions;\n+\n+/**\n+ * This class should only be used through {@link ResilientLockWatchEventCache} as a proxy; failure to do so will result\n+ * in concurrency issues and inconsistency in the cache state.\n+ */\n+public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    @JsonProperty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ3MzY2Nw=="}, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzI2NzQzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTowMzo0MFrOGm787Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTowMzo0MFrOGm787Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4MTMyNQ==", "bodyText": "All the tests start in exactly the same way, can you refactor this somehow?", "url": "https://github.com/palantir/atlasdb/pull/4806#discussion_r443481325", "createdAt": "2020-06-22T11:03:40Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.datatype.guava.GuavaModule;\n+import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.TransactionUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public class LockWatchEventCacheIntegrationTest {\n+    private static final String TABLE = \"table\";\n+    private static final LockDescriptor DESCRIPTOR = AtlasRowLockDescriptor.of(TABLE, new byte[] {1});\n+    private static final LockDescriptor DESCRIPTOR_2 = AtlasRowLockDescriptor.of(TABLE, new byte[] {2});\n+    private static final LockDescriptor DESCRIPTOR_3 = AtlasRowLockDescriptor.of(TABLE, new byte[] {3});\n+    private static final LockWatchReferences.LockWatchReference REFERENCE = LockWatchReferences.entireTable(\"table\");\n+    private static final UUID COMMIT_UUID = UUID.fromString(\"203fcd7a-b3d7-4c2a-9d2c-3d61cde1ba59\");\n+    private static final LockToken COMMIT_TOKEN = LockToken.of(COMMIT_UUID);\n+\n+    private static final LockWatchEvent WATCH_EVENT =\n+            LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE), ImmutableSet.of(DESCRIPTOR)).build(4L);\n+    private static final LockWatchEvent UNLOCK_EVENT = UnlockEvent.builder(ImmutableSet.of(DESCRIPTOR_2)).build(5L);\n+    private static final LockWatchEvent LOCK_EVENT =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR_3), COMMIT_TOKEN).build(6L);\n+    private static final UUID EVENT2_UUID = UUID.fromString(\"888fcd7a-b3d7-4d2a-9d2c-3d61cde1ba44\");\n+    private static final LockWatchEvent LOCK_EVENT_2 =\n+            LockEvent.builder(ImmutableSet.of(DESCRIPTOR), LockToken.of(EVENT2_UUID)).build(10L);\n+\n+    private static final UUID LEADER = UUID.fromString(\"470c855e-f77b-44df-b56a-14d3df085dbc\");\n+    private static final LockWatchStateUpdate SNAPSHOT =\n+            LockWatchStateUpdate.snapshot(LEADER, 3L, ImmutableSet.of(DESCRIPTOR_2), ImmutableSet.of());\n+    private static final LockWatchStateUpdate SUCCESS =\n+            LockWatchStateUpdate.success(LEADER, 6L, ImmutableList.of(WATCH_EVENT, UNLOCK_EVENT, LOCK_EVENT));\n+    private static final long START_TS = 1L;\n+    private static final Set<TransactionUpdate> COMMIT_UPDATE = ImmutableSet.of(\n+            ImmutableTransactionUpdate.builder().startTs(START_TS).commitTs(5L).writesToken(COMMIT_TOKEN).build());\n+    private static final Set<Long> TIMESTAMPS = ImmutableSet.of(START_TS);\n+    private static final Set<Long> TIMESTAMPS_2 = ImmutableSet.of(16L);\n+    private static final String BASE = \"src/test/resources/lockwatch-event-cache-output/\";\n+    private static final Mode MODE = Mode.CI;\n+\n+    private enum Mode {\n+        DEV,\n+        CI;\n+\n+        boolean isDev() {\n+            return this.equals(Mode.DEV);\n+        }\n+\n+    }\n+\n+    private LockWatchEventCache eventCache;\n+    private int part;\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Before\n+    public void before() {\n+        eventCache = new LockWatchEventCacheImpl(LockWatchEventLogImpl.create());\n+        part = 1;\n+    }\n+\n+    private void verifyStage() {\n+        ObjectMapper mapper = new ObjectMapper()\n+                .enable(SerializationFeature.INDENT_OUTPUT)\n+                .registerModule(new Jdk8Module())\n+                .registerModule(new GuavaModule());\n+        try {\n+            Path path = Paths.get(BASE + name.getMethodName() + \"/event-cache-\" + part + \".json\");\n+\n+            if (MODE.isDev()) {\n+                mapper.writeValue(path.toFile(), eventCache);\n+            } else {\n+                String ourJson = mapper.writeValueAsString(eventCache);\n+                String theirJson = new String(Files.readAllBytes(path), Charset.defaultCharset());\n+                assertThat(ourJson).isEqualTo(theirJson);\n+            }\n+            part++;\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Test\n+    public void processStartTimestampUpdateOnMultipleBatches() {\n+        eventCache.processStartTransactionsUpdate(TIMESTAMPS, SNAPSHOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752379c0f334106ef69ab5dc8ae04ff2af0e2557"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2892, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}