{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDIzMDcz", "number": 4692, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDozMzoyMlrODtj3Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0NTowM1rODtqPOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTAwMDc1OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TestableTimelockServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDozMzoyMlrOF_DjhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMToxODo1MFrOF_mloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2Mjg1Mw==", "bodyText": "Eh... not really a fan of this, but I guess the alternative is adding another mode to install config, and we want this to be runtime configurable. I wouldn't block on this, though maybe we should add a TODO to consider going via runtime configuration once this becomes available.", "url": "https://github.com/palantir/atlasdb/pull/4692#discussion_r401662853", "createdAt": "2020-04-01T14:33:22Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TestableTimelockServer.java", "diffHunk": "@@ -77,9 +81,24 @@ void start() {\n         serverHolder.start();\n     }\n \n+    void startUsingBatchedSingleLeader() {\n+        switchToBatched = true;\n+    }\n+\n+    void stopUsingBatchedSingleLeader() {\n+        switchToBatched = false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701a376e3057f915a8b253bd5e8b104ed5d8b2ad"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzNjgzMw==", "bodyText": "That's reasonable, yup", "url": "https://github.com/palantir/atlasdb/pull/4692#discussion_r402236833", "createdAt": "2020-04-02T11:18:50Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TestableTimelockServer.java", "diffHunk": "@@ -77,9 +81,24 @@ void start() {\n         serverHolder.start();\n     }\n \n+    void startUsingBatchedSingleLeader() {\n+        switchToBatched = true;\n+    }\n+\n+    void stopUsingBatchedSingleLeader() {\n+        switchToBatched = false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY2Mjg1Mw=="}, "originalCommit": {"oid": "701a376e3057f915a8b253bd5e8b104ed5d8b2ad"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjA0NTM4OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/SingleLeaderMultiNodePaxosTimeLockIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0NTowM1rOF_N41g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxODo0NTowM1rOF_N41g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMjE1MA==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/palantir/atlasdb/pull/4692#discussion_r401832150", "createdAt": "2020-04-01T18:45:03Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/SingleLeaderMultiNodePaxosTimeLockIntegrationTest.java", "diffHunk": "@@ -84,4 +98,61 @@ public void noConflictIfLeaderAndNonLeadersSeparatelyInitializeClient() {\n         long ts2 = namespace.getFreshTimestamp();\n         assertThat(ts1).isLessThan(ts2);\n     }\n+\n+    @Test\n+    public void migrationToBatchedSingleLeaderHasConsistentSequenceNumbers() {\n+        NamespacedClients client = cluster.clientForRandomNamespace().throughWireMockProxy();\n+        cluster.waitUntilAllServersOnlineAndReadyToServeNamespaces(ImmutableList.of(client.namespace()));\n+\n+        List<Long> sequenceNumbers = new ArrayList<>();\n+\n+        for (TestableTimelockServer server : cluster.servers()) {\n+            server.startUsingBatchedSingleLeader();\n+            cluster.failoverToNewLeader(client.namespace());\n+            long sequenceForBatchedEndpoint = getSequenceForServerUsingBatchedEndpoint(server);\n+            long sequenceForOldEndpoint = getSequenceForServerUsingOldEndpoint(server);\n+            assertThat(sequenceForBatchedEndpoint).isLessThanOrEqualTo(sequenceForOldEndpoint);\n+            sequenceNumbers.add(sequenceForBatchedEndpoint);\n+        }\n+\n+        assertThat(sequenceNumbers).isSorted();\n+        assertThat(ImmutableSet.copyOf(sequenceNumbers)).hasSameSizeAs(sequenceNumbers);\n+    }\n+\n+    @Test\n+    public void reverseMigrationFromBatchedSingleLeaderHasConsistentSequenceNumbers() {\n+        NamespacedClients client = cluster.clientForRandomNamespace().throughWireMockProxy();\n+        cluster.waitUntilAllServersOnlineAndReadyToServeNamespaces(ImmutableList.of(client.namespace()));\n+        cluster.servers().forEach(TestableTimelockServer::startUsingBatchedSingleLeader);\n+        List<Long> sequenceNumbers = new ArrayList<>();\n+\n+        for (TestableTimelockServer server : cluster.servers()) {\n+            server.stopUsingBatchedSingleLeader();\n+            cluster.failoverToNewLeader(client.namespace());\n+            long sequenceForBatchedEndpoint = getSequenceForServerUsingBatchedEndpoint(server);\n+            long sequenceForOldEndpoint = getSequenceForServerUsingOldEndpoint(server);\n+            assertThat(sequenceForBatchedEndpoint).isLessThanOrEqualTo(sequenceForOldEndpoint);\n+            sequenceNumbers.add(sequenceForBatchedEndpoint);\n+        }\n+\n+        assertThat(sequenceNumbers).isSorted();\n+        assertThat(ImmutableSet.copyOf(sequenceNumbers)).hasSameSizeAs(sequenceNumbers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701a376e3057f915a8b253bd5e8b104ed5d8b2ad"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3040, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}