{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTU5MTIy", "number": 4690, "title": "[PDS-111849] Rolling in the Deep, Part 2: Bounded Executors for Acceptors (Single and Batched)", "bodyText": "Goals (and why):\n\nEnforce some concurrency limitation of parallel requests: specifically, restrict PaxosAcceptor and AutobatchingPaxosAcceptor Functions to only be allowed to open up to 100 threads that are doing work on each separate remote.\nSee PDS-111849 for how not having this manifests as badness.\nDon't have ignored tests :)\n\nImplementation Description (bullets):\n\nSingle Leader\n\nDon't use the shared executor on acceptor codepaths, instead use a separately generated map of executors that maps local to a direct executor, and the remotes to bounded thread pools of core size 1 and burst size 100.\n\n\nMultiple Leaders\n\nThis case is more difficult: I wired all PaxosAcceptor functions inside an AutobatchingPaxosAcceptorNetworkClientFactory to share a set of executors - across these, the number of threads permitted per remote is 100.\n\n\nUn-ignore the stress test in MNPTLSIT, and add a couple of executor tests.\n\nTesting (What was existing testing like?  What have you done to improve it?):\nNew tests validate that executor construction should hopefully be sane.\nConcerns (what feedback would you like?):\n\nIdeally the core pool size for the multi-leader case should be 3, not 1. I did think about making it configurable, but don't think we lose anything significant going this way as we'll end up keeping a couple of threads alive after the first requests come in. Not really a fan of hard-coding a number here as well, since it depends on the number of distinct autobatcher functions running. Is this a reasonable decision?\nLimiting Acceptors is likely to be the most critical piece of this work, since that is the endpoint that tends to have the highest concurrency. Pingers and Learners are hit much less so I didn't include them in this PR - and still our stress tests pass. Would it make sense to add this to the other classes as well? The caveat here is that the other endpoints are never really barraged, and so I think a shared executor is actually not unreasonable for efficiency.\nI've wired up the executors so they'll throw a RejectedExecutionException if the pools get filled. This is largely handled by PaxosQuorumChecker, and it's pretty clear to see that this is correct in single leader. I'm less confident in multi-leader (I'm relatively less comfortable with that part of the code).\nIs 100 a reasonable number? Is this too high, since in theory most of these calls get autobatched? Didn't want to be too strict.\nI had to make the stress test a bit more lenient because in a multi-leader world we get 100 threads blocked on the new node plus another 100 threads blocking in the autobatcher. This may be reducible to some extent after #4664.\n\nWhere should we start reviewing?: TimeLockPaxosExecutors\nPriority (whenever / two weeks / yesterday): yesterday \ud83d\udd25", "createdAt": "2020-03-31T19:46:14Z", "url": "https://github.com/palantir/atlasdb/pull/4690", "merged": true, "mergeCommit": {"oid": "da812e7c2dfbc2c2354b665724e87e832babfd8e"}, "closed": true, "closedAt": "2020-04-02T08:21:55Z", "author": {"login": "jeremyk-91"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTEmzlgH2gAyMzk2NTU5MTIyOjVlZGU0YWU2M2I4NDU1ZjVhYWQ2NThmZWY1NmI4NGQ2NTMyMjEyY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTcpYVgH2gAyMzk2NTU5MTIyOjAzNWQyMTJjNThmNGM5YzRjYTI1NDVmYTBlNDQxNGM3YWM0ZTEwY2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ede4ae63b8455f5aad658fef56b84d6532212cc", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/5ede4ae63b8455f5aad658fef56b84d6532212cc", "committedDate": "2020-03-31T15:12:39Z", "message": "Fix single leader version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e24ac439c564969cdf55f5e98de4475099ca3d1", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/8e24ac439c564969cdf55f5e98de4475099ca3d1", "committedDate": "2020-03-31T18:07:56Z", "message": "Wire up everything"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d845aa6be7928f6fc25a15a90bbd31b81fed7d58", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/d845aa6be7928f6fc25a15a90bbd31b81fed7d58", "committedDate": "2020-03-31T18:58:16Z", "message": "Explain reasoning around paxos executors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60a4f3f9599deb0d50625751b711a42336f44907", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/60a4f3f9599deb0d50625751b711a42336f44907", "committedDate": "2020-03-31T19:24:53Z", "message": "Testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce12989a17d6f666fef09d35808503ff5730dd0f", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/ce12989a17d6f666fef09d35808503ff5730dd0f", "committedDate": "2020-03-31T19:24:53Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a67c954d8512c35e648750819ad62fa856d7aaa", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/0a67c954d8512c35e648750819ad62fa856d7aaa", "committedDate": "2020-03-31T19:50:06Z", "message": "aargh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350575b3be8e331245dc48771e34e9d7a3a048cd", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/350575b3be8e331245dc48771e34e9d7a3a048cd", "committedDate": "2020-03-31T19:50:16Z", "message": "Merge branch 'jkong/roll-diff-execs' of github.com:palantir/atlasdb into jkong/roll-diff-execs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDYxNjQ3", "url": "https://github.com/palantir/atlasdb/pull/4690#pullrequestreview-385061647", "createdAt": "2020-03-31T20:02:13Z", "commit": {"oid": "350575b3be8e331245dc48771e34e9d7a3a048cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMjoxM1rOF-mCow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowMjoxM1rOF-mCow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ==", "bodyText": "can we slap a limit on the executor?", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401179299", "createdAt": "2020-03-31T20:02:13Z", "author": {"login": "j-baker"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/Dependencies.java", "diffHunk": "@@ -50,6 +50,12 @@\n         PaxosRemoteClients remoteClients();\n         LocalPaxosComponents components();\n         int quorumSize();\n+\n+        /**\n+         * Caution! The shared executor should only be used for tasks that are expected to complete quickly.\n+         * DO NOT use the shared executor when the concurrency of requests may be very high (e.g. for Paxos round\n+         * verification). This may lead to thread explosion.\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "350575b3be8e331245dc48771e34e9d7a3a048cd"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7669f892058d0c04a07178d0c6e319199c01f43e", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/7669f892058d0c04a07178d0c6e319199c01f43e", "committedDate": "2020-03-31T20:06:29Z", "message": "baseline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc88d3d236bfccb4d8e214e1e297a901bde07852", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/bc88d3d236bfccb4d8e214e1e297a901bde07852", "committedDate": "2020-03-31T21:10:45Z", "message": "Fix underprovisioned circle boxes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "348e3d6640d6776632823c20b54c3e65febe7105", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/348e3d6640d6776632823c20b54c3e65febe7105", "committedDate": "2020-03-31T21:19:49Z", "message": "watch the parallelism on container 7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c65213ea8129f73c14398d9ea3907ce3a52f277", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/8c65213ea8129f73c14398d9ea3907ce3a52f277", "committedDate": "2020-03-31T21:21:28Z", "message": "Kick the Circle build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "committedDate": "2020-04-01T11:30:48Z", "message": "bounded shared executor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDc2MDIz", "url": "https://github.com/palantir/atlasdb/pull/4690#pullrequestreview-385476023", "createdAt": "2020-04-01T10:57:10Z", "commit": {"oid": "8c65213ea8129f73c14398d9ea3907ce3a52f277"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDo1NzoxMFrOF-7ZRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxNDozOVrOF-9yOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyOTE1Nw==", "bodyText": "SINGLE_THREAD_FOR_AUTOBATCHER?", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401529157", "createdAt": "2020-04-01T10:57:10Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.paxos;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.codahale.metrics.InstrumentedExecutorService;\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.common.streams.KeyedStream;\n+\n+final class TimeLockPaxosExecutors {\n+    @VisibleForTesting\n+    static final int MAXIMUM_POOL_SIZE = 100;\n+\n+    private static final Duration THREAD_KEEP_ALIVE = Duration.ofSeconds(5);\n+\n+    private TimeLockPaxosExecutors() {\n+        // no\n+    }\n+\n+    /**\n+     * Creates a mapping of services to {@link ExecutorService}s indicating that tasks oriented towards the relevant\n+     * node should be run on the associated executor.\n+     *\n+     * It is assumed that tasks run on the local node will return quickly (hence the use of the direct executor).\n+     */\n+    static <T> Map<T, ExecutorService> createBoundedExecutors(\n+            MetricRegistry metricRegistry, LocalAndRemotes<T> localAndRemotes, String useCase) {\n+        Map<T, ExecutorService> remoteExecutors = KeyedStream.of(localAndRemotes.remotes())\n+                .map(remote -> createBoundedExecutor(metricRegistry, useCase))\n+                .collectToMap();\n+        remoteExecutors.put(localAndRemotes.local(), MoreExecutors.newDirectExecutorService());\n+        return remoteExecutors;\n+    }\n+\n+    private static ExecutorService createBoundedExecutor(MetricRegistry metricRegistry, String useCase) {\n+        return new InstrumentedExecutorService(\n+                PTExecutors.newThreadPoolExecutor(\n+                        1, // Many operations are autobatched, so under ordinary circumstances 1 thread will do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65213ea8129f73c14398d9ea3907ce3a52f277"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTA3OQ==", "bodyText": "Maybe have a top level comment on the decisions made here to avoid inline comments? Something along the lines of \"This executor is intentionally constrained to prevent OOMs if it gets inundated by tasks\"? Feel free to ignore if you think this is more helpful", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401531079", "createdAt": "2020-04-01T11:00:52Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.paxos;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.codahale.metrics.InstrumentedExecutorService;\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.common.streams.KeyedStream;\n+\n+final class TimeLockPaxosExecutors {\n+    @VisibleForTesting\n+    static final int MAXIMUM_POOL_SIZE = 100;\n+\n+    private static final Duration THREAD_KEEP_ALIVE = Duration.ofSeconds(5);\n+\n+    private TimeLockPaxosExecutors() {\n+        // no\n+    }\n+\n+    /**\n+     * Creates a mapping of services to {@link ExecutorService}s indicating that tasks oriented towards the relevant\n+     * node should be run on the associated executor.\n+     *\n+     * It is assumed that tasks run on the local node will return quickly (hence the use of the direct executor).\n+     */\n+    static <T> Map<T, ExecutorService> createBoundedExecutors(\n+            MetricRegistry metricRegistry, LocalAndRemotes<T> localAndRemotes, String useCase) {\n+        Map<T, ExecutorService> remoteExecutors = KeyedStream.of(localAndRemotes.remotes())\n+                .map(remote -> createBoundedExecutor(metricRegistry, useCase))\n+                .collectToMap();\n+        remoteExecutors.put(localAndRemotes.local(), MoreExecutors.newDirectExecutorService());\n+        return remoteExecutors;\n+    }\n+\n+    private static ExecutorService createBoundedExecutor(MetricRegistry metricRegistry, String useCase) {\n+        return new InstrumentedExecutorService(\n+                PTExecutors.newThreadPoolExecutor(\n+                        1, // Many operations are autobatched, so under ordinary circumstances 1 thread will do\n+                        MAXIMUM_POOL_SIZE, // Want to bound the number of threads that might be stuck", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65213ea8129f73c14398d9ea3907ce3a52f277"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzYxNA==", "bodyText": "Wanted to add a test that local is not using the same executor as remotes and is not bounded in the same way, maybe this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n                @Test\n          \n          \n            \n                public void localExecutorsAreNotBoundedByMaximumPoolSize() {\n          \n          \n            \n                    int numThreads = TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE * 2;\n          \n          \n            \n                    ExecutorService executor = PTExecutors.newFixedThreadPool(numThreads);\n          \n          \n            \n                    List<Future<Integer>> results = IntStream.range(0, numThreads)\n          \n          \n            \n                            .mapToObj(ignore -> executor.submit(this::submitToLocalAndGetUnchecked))\n          \n          \n            \n                            .collect(Collectors.toList());\n          \n          \n            \n                    results.forEach(future -> assertThatCode(() -> AtlasFutures.getUnchecked(future))\n          \n          \n            \n                            .doesNotThrowAnyException());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private Integer submitToLocalAndGetUnchecked() {\n          \n          \n            \n                    return AtlasFutures.getUnchecked(executors.get(local).submit(SLEEP_FOR_ONE_SECOND));\n          \n          \n            \n                }\n          \n          \n            \n            }", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401557614", "createdAt": "2020-04-01T11:53:40Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/test/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutorsTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import com.palantir.atlasdb.util.MetricsManagers;\n+\n+public class TimeLockPaxosExecutorsTest {\n+    private static final String TEST = \"test\";\n+    private static final Callable<Integer> SLEEP_FOR_ONE_SECOND = () -> {\n+        Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);\n+        return 42;\n+    };\n+\n+    private final Object local = new Object();\n+    private final Object remote1 = new Object();\n+    private final Object remote2 = new Object();\n+    private final List<Object> remotes = ImmutableList.of(remote1, remote2);\n+\n+    private final LocalAndRemotes<Object> localAndRemotes = LocalAndRemotes.of(local, remotes);\n+\n+    private final Map<Object, ExecutorService> executors = TimeLockPaxosExecutors.createBoundedExecutors(\n+            MetricsManagers.createForTests().getRegistry(),\n+            localAndRemotes,\n+            TEST);\n+\n+    @Test\n+    public void hasKeysCollectivelyMatchingLocalAndRemoteElements() {\n+        assertThat(executors.keySet()).hasSameElementsAs(localAndRemotes.all());\n+    }\n+\n+    @Test\n+    public void remoteExecutorsAreBounded() {\n+        for (int i = 0; i < TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE; i++) {\n+            executors.get(remote1).submit(SLEEP_FOR_ONE_SECOND);\n+        }\n+        assertThatThrownBy(() -> executors.get(remote1).submit(SLEEP_FOR_ONE_SECOND))\n+                .isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    @Test\n+    public void remoteExecutorsAreLimitedSeparately() {\n+        for (int i = 0; i < TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE; i++) {\n+            executors.get(remote1).submit(SLEEP_FOR_ONE_SECOND);\n+        }\n+        assertThatCode(() -> executors.get(remote2).submit(SLEEP_FOR_ONE_SECOND))\n+                .doesNotThrowAnyException();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c65213ea8129f73c14398d9ea3907ce3a52f277"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDQyNg==", "bodyText": "The idea here is that we expect the source of overloading is a few bad actors hammering, so this will effectively throttle them?", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401560426", "createdAt": "2020-04-01T11:59:09Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -140,11 +147,17 @@ private TimeLockAgent(MetricsManager metricsManager,\n \n     private static ExecutorService createSharedExecutor(MetricsManager metricsManager) {\n         return new InstrumentedExecutorService(\n-                PTExecutors.newCachedThreadPool(\n+                PTExecutors.newThreadPoolExecutor(\n+                        CORE_SHARED_EXECUTOR_THREADS,\n+                        MAX_SHARED_EXECUTOR_THREADS,\n+                        5,\n+                        TimeUnit.SECONDS,\n+                        new SynchronousQueue<>(),\n                         new InstrumentedThreadFactory(new ThreadFactoryBuilder()\n                                 .setNameFormat(\"paxos-timestamp-creator-%d\")\n                                 .setDaemon(true)\n-                                .build(), metricsManager.getRegistry())),\n+                                .build(), metricsManager.getRegistry()),\n+                        new ThreadPoolExecutor.CallerRunsPolicy()), // Be resilient-ish to overloading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MjI3NA==", "bodyText": "We should remove this comment before merging. +1 for keeping the ordering", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401562274", "createdAt": "2020-04-01T12:03:09Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java", "diffHunk": "@@ -96,27 +108,28 @@ public PaxosQuorumCheckingCoalescingFunction(\n     public static <REQ, RESP extends PaxosResponse, SERVICE, F extends CoalescingRequestFunction<REQ, RESP>>\n     PaxosQuorumCheckingCoalescingFunction<REQ, RESP, F> wrapWithRemotes(\n             List<SERVICE> services,\n-            ExecutorService executor,\n+            Map<SERVICE, ExecutorService> executors,\n             int quorumSize,\n             Function<SERVICE, F> functionFactory) {\n-        return services.stream()\n-                .map(functionFactory)\n-                .collect(collectingAndThen(\n-                        toList(), functions -> new PaxosQuorumCheckingCoalescingFunction<>(\n-                                functions,\n-                                Maps.toMap(functions, $ -> executor),\n-                                quorumSize)));\n+        // Not 100% sure if ordering is important, but assuming so here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NzkxNg==", "bodyText": "I think we went a bit overboard with fanciness to keep it fluent as opposed to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new PaxosQuorumCheckingCoalescingFunction<>(functionsAndExecutors, quorumSize);\n          \n          \n            \n                    List<F> functions = new ArrayList<>(services.size());\n          \n          \n            \n                    Map<F, ExecutorService> executorMap = new HashMap<>(services.size());\n          \n          \n            \n                    for (SERVICE service: services) {\n          \n          \n            \n                        F function = functionFactory.apply(service);\n          \n          \n            \n                        functions.add(function);\n          \n          \n            \n                        executorMap.put(function, executors.get(service));\n          \n          \n            \n                    }\n          \n          \n            \n                    return new PaxosQuorumCheckingCoalescingFunction<>(functions, executorMap, quorumSize);", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401567916", "createdAt": "2020-04-01T12:14:00Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java", "diffHunk": "@@ -96,27 +108,28 @@ public PaxosQuorumCheckingCoalescingFunction(\n     public static <REQ, RESP extends PaxosResponse, SERVICE, F extends CoalescingRequestFunction<REQ, RESP>>\n     PaxosQuorumCheckingCoalescingFunction<REQ, RESP, F> wrapWithRemotes(\n             List<SERVICE> services,\n-            ExecutorService executor,\n+            Map<SERVICE, ExecutorService> executors,\n             int quorumSize,\n             Function<SERVICE, F> functionFactory) {\n-        return services.stream()\n-                .map(functionFactory)\n-                .collect(collectingAndThen(\n-                        toList(), functions -> new PaxosQuorumCheckingCoalescingFunction<>(\n-                                functions,\n-                                Maps.toMap(functions, $ -> executor),\n-                                quorumSize)));\n+        // Not 100% sure if ordering is important, but assuming so here\n+        List<FunctionAndExecutor<F>> functionsAndExecutors = KeyedStream.of(services)\n+                .map(executors::get)\n+                .mapKeys(functionFactory)\n+                .entries()\n+                .<FunctionAndExecutor<F>>map(entry -> ImmutableFunctionAndExecutor.of(entry.getKey(), entry.getValue()))\n+                .collect(Collectors.toList());\n+        return new PaxosQuorumCheckingCoalescingFunction<>(functionsAndExecutors, quorumSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2ODMxMg==", "bodyText": "\ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401568312", "createdAt": "2020-04-01T12:14:39Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -286,7 +285,6 @@ public void multipleLockRequestsWithTheSameIdAreGranted() {\n     }\n \n     @Test\n-    @Ignore // TODO (jkong): Fix this test by reworking the threading model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "committedDate": "2020-04-01T15:29:11Z", "message": "smaller PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e0e0d129585224110c0db061c78074a975c138", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/c4e0e0d129585224110c0db061c78074a975c138", "committedDate": "2020-04-01T15:29:57Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: gmaretic <gmaretic@palantir.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450614cd524ef1619671928eb6da30a1239827dd", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/450614cd524ef1619671928eb6da30a1239827dd", "committedDate": "2020-04-01T18:34:04Z", "message": "Rejection tracking policy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "370aa39e920b2fef20e9b33f0a4ddf70426d1224", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/370aa39e920b2fef20e9b33f0a4ddf70426d1224", "committedDate": "2020-04-01T18:34:12Z", "message": "Merge branch 'jkong/roll-diff-execs' of github.com:palantir/atlasdb into jkong/roll-diff-execs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b6eb94baed13f54402c4074413d95891546729", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/54b6eb94baed13f54402c4074413d95891546729", "committedDate": "2020-04-01T18:46:03Z", "message": "Compile break"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d77378b2da5d33122143002945adc09352f357", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/99d77378b2da5d33122143002945adc09352f357", "committedDate": "2020-04-01T18:50:14Z", "message": "More compile breaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035d212c58f4c9c4ca2545fa0e4414c7ac4e10cf", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/035d212c58f4c9c4ca2545fa0e4414c7ac4e10cf", "committedDate": "2020-04-01T19:13:11Z", "message": "checkstyleg"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3037, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}