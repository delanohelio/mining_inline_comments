{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NjQyNTM1", "number": 4907, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTozNToyNlrOERAb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MzoyMFrOES0VwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjY4Mzg4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTozNToyNlrOG1ed3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzo0NDoyMVrOG2v4jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNjg3Ng==", "bodyText": "How hard would it be to add a test?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r458726876", "createdAt": "2020-07-22T11:35:26Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.health;\n+\n+import com.palantir.leader.LeaderElectionServiceMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeaderElectionHealthCheck {\n+    private static final double MAX_ALLOWED_5_MIN_RATE = 5;\n+    private static final double MAX_ALLOWED_15_MIN_RATE = 15;\n+\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics;\n+\n+    public LeaderElectionHealthCheck(TaggedMetricRegistry taggedMetricRegistry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2e096e22335b91cb10ad536cf51b417aab1aa7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2MDgxMw==", "bodyText": "Test added for the health check.", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r460060813", "createdAt": "2020-07-24T13:44:21Z", "author": {"login": "sudiksha27"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.health;\n+\n+import com.palantir.leader.LeaderElectionServiceMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeaderElectionHealthCheck {\n+    private static final double MAX_ALLOWED_5_MIN_RATE = 5;\n+    private static final double MAX_ALLOWED_15_MIN_RATE = 15;\n+\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics;\n+\n+    public LeaderElectionHealthCheck(TaggedMetricRegistry taggedMetricRegistry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNjg3Ng=="}, "originalCommit": {"oid": "ff2e096e22335b91cb10ad536cf51b417aab1aa7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjY4NTg4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMTozNjowOVrOG1efKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoyMDowOFrOG2xOYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNzIxMQ==", "bodyText": "This means 5 in the last minute? or 5 in the last 5 minutes?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r458727211", "createdAt": "2020-07-22T11:36:09Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.health;\n+\n+import com.palantir.leader.LeaderElectionServiceMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeaderElectionHealthCheck {\n+    private static final double MAX_ALLOWED_5_MIN_RATE = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2e096e22335b91cb10ad536cf51b417aab1aa7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4Mjc4Ng==", "bodyText": "This constant is incorrect; i am fixing this.", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r460082786", "createdAt": "2020-07-24T14:20:08Z", "author": {"login": "sudiksha27"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.health;\n+\n+import com.palantir.leader.LeaderElectionServiceMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeaderElectionHealthCheck {\n+    private static final double MAX_ALLOWED_5_MIN_RATE = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcyNzIxMQ=="}, "originalCommit": {"oid": "ff2e096e22335b91cb10ad536cf51b417aab1aa7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTY0MTEyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/metrics/leader-election.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToxMTo0MVrOG2zNWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MjowNVrOG4NJ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTI5MQ==", "bodyText": "It may be good to say what the metrics are, as opposed to what specifically they do.", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r460115291", "createdAt": "2020-07-24T15:11:41Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/metrics/leader-election.yml", "diffHunk": "@@ -0,0 +1,31 @@\n+options:\n+  javaPackage: 'com.palantir.leader'\n+\n+namespaces:\n+  leaderElectionService:\n+    docs: Metrics helpful for TimeLock adjudication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f3973942739ff0137e696374e91d6c6997a464"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4ODk5MA==", "bodyText": "(I think we still need to fix this in round 2)", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461588990", "createdAt": "2020-07-28T13:42:05Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/metrics/leader-election.yml", "diffHunk": "@@ -0,0 +1,31 @@\n+options:\n+  javaPackage: 'com.palantir.leader'\n+\n+namespaces:\n+  leaderElectionService:\n+    docs: Metrics helpful for TimeLock adjudication.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTI5MQ=="}, "originalCommit": {"oid": "74f3973942739ff0137e696374e91d6c6997a464"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTY0MjM2OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4907.v2.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToxMjowMVrOG2zOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToxMjowMVrOG2zOMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTUwNA==", "bodyText": "nit: remember to clean this up", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r460115504", "createdAt": "2020-07-24T15:12:01Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4907.v2.yml", "diffHunk": "@@ -0,0 +1,11 @@\n+type: improvement\n+improvement:\n+  description: |-\n+    This change adds a health check to track the leader election rate on TimeLock.\n+    <!---\n+    Please remember to:\n+    - Add any necessary release notes (including breaking changes)\n+    - Make sure the documentation is up to date for your change\n+    --->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f3973942739ff0137e696374e91d6c6997a464"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjE2NDI5OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MTo0N1rOG24OLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MTo0N1rOG24OLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NzQyMQ==", "bodyText": "This feels a bit high: one election per second is pretty unstable. Based on metrics we've seen internally I think we want this to be maybe one in 30 seconds?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r460197421", "createdAt": "2020-07-24T17:41:47Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.health;\n+\n+import com.palantir.leader.LeaderElectionServiceMetrics;\n+\n+public class LeaderElectionHealthCheck {\n+    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f3973942739ff0137e696374e91d6c6997a464"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTYzNTk4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/LeadershipEvents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNTowN1rOG4M2HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNTowN1rOG4M2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4MzkwMQ==", "bodyText": "Nice work!", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461583901", "createdAt": "2020-07-28T13:35:07Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/LeadershipEvents.java", "diffHunk": "@@ -35,64 +34,49 @@\n \n     private static final String LEADER_LOG_NAME = \"leadership\";\n     private static final Logger leaderLog = LoggerFactory.getLogger(LEADER_LOG_NAME);\n-\n-    private final Meter gainedLeadership;\n-    private final Meter lostLeadership;\n-    private final Meter noQuorum;\n-    private final Meter proposedLeadership;\n-    private final Meter proposalFailure;\n-    private final Meter leaderPingFailure;\n-    private final Meter leaderPingTimeout;\n-    private final Meter leaderPingReturnedFalse;\n     private final Object[] contextArgs;\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY0NjkzOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNzozMFrOG4M81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozNzozMFrOG4M81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTYyMg==", "bodyText": "nit: registry", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461585622", "createdAt": "2020-07-28T13:37:30Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Meter;\n+import com.palantir.leader.health.LeaderElectionHealthCheck;\n+import com.palantir.leader.health.LeaderElectionHealthStatus;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeadershipElectionCheckTest {\n+    private final FakeTimeClock fakeTimeClock = new FakeTimeClock();\n+    private final TaggedMetricRegistry registry1 = mock(TaggedMetricRegistry.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY1MDY0OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozODoyNVrOG4M_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozODoyNVrOG4M_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NjI2NA==", "bodyText": "Sorry - despite the comment I'm not sure what the significance of the 6 seconds here is?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461586264", "createdAt": "2020-07-28T13:38:25Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Meter;\n+import com.palantir.leader.health.LeaderElectionHealthCheck;\n+import com.palantir.leader.health.LeaderElectionHealthStatus;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeadershipElectionCheckTest {\n+    private final FakeTimeClock fakeTimeClock = new FakeTimeClock();\n+    private final TaggedMetricRegistry registry1 = mock(TaggedMetricRegistry.class);\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics =\n+            LeaderElectionServiceMetrics.of(registry1);\n+    private final LeaderElectionHealthCheck leaderElectionHealthCheck =\n+            new LeaderElectionHealthCheck(leaderElectionServiceMetrics);\n+\n+    @Before\n+    public void setup() {\n+        when(registry1.meter(any())).thenReturn(new Meter(fakeTimeClock));\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(3, 60);\n+\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+    }\n+\n+    @Test\n+    public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(7, 30);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+    }\n+\n+    public void markLeaderElectionsAtSpecifiedInterval(int leaderElectionCount, long timeIntervalInSeconds) {\n+        // First tick\n+        fakeTimeClock.advance(6, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY1MTY4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozODo0MVrOG4NABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozODo0MVrOG4NABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NjQzOQ==", "bodyText": "\u2764\ufe0f", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461586439", "createdAt": "2020-07-28T13:38:41Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Meter;\n+import com.palantir.leader.health.LeaderElectionHealthCheck;\n+import com.palantir.leader.health.LeaderElectionHealthStatus;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeadershipElectionCheckTest {\n+    private final FakeTimeClock fakeTimeClock = new FakeTimeClock();\n+    private final TaggedMetricRegistry registry1 = mock(TaggedMetricRegistry.class);\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics =\n+            LeaderElectionServiceMetrics.of(registry1);\n+    private final LeaderElectionHealthCheck leaderElectionHealthCheck =\n+            new LeaderElectionHealthCheck(leaderElectionServiceMetrics);\n+\n+    @Before\n+    public void setup() {\n+        when(registry1.meter(any())).thenReturn(new Meter(fakeTimeClock));\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(3, 60);\n+\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+    }\n+\n+    @Test\n+    public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(7, 30);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+    }\n+\n+    public void markLeaderElectionsAtSpecifiedInterval(int leaderElectionCount, long timeIntervalInSeconds) {\n+        // First tick\n+        fakeTimeClock.advance(6, TimeUnit.SECONDS);\n+\n+        IntStream.range(0, leaderElectionCount).forEach(idx -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY1NDc3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozOToxN1rOG4NB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozOToxN1rOG4NB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NjkwMw==", "bodyText": "nit: I'd pass Duration into markLeaderElections(...) for readability", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461586903", "createdAt": "2020-07-28T13:39:17Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Meter;\n+import com.palantir.leader.health.LeaderElectionHealthCheck;\n+import com.palantir.leader.health.LeaderElectionHealthStatus;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeadershipElectionCheckTest {\n+    private final FakeTimeClock fakeTimeClock = new FakeTimeClock();\n+    private final TaggedMetricRegistry registry1 = mock(TaggedMetricRegistry.class);\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics =\n+            LeaderElectionServiceMetrics.of(registry1);\n+    private final LeaderElectionHealthCheck leaderElectionHealthCheck =\n+            new LeaderElectionHealthCheck(leaderElectionServiceMetrics);\n+\n+    @Before\n+    public void setup() {\n+        when(registry1.meter(any())).thenReturn(new Meter(fakeTimeClock));\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(3, 60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY1NTIyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozOToyM1rOG4NCJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozOToyM1rOG4NCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4Njk4Mg==", "bodyText": "nit: private?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461586982", "createdAt": "2020-07-28T13:39:23Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Meter;\n+import com.palantir.leader.health.LeaderElectionHealthCheck;\n+import com.palantir.leader.health.LeaderElectionHealthStatus;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class LeadershipElectionCheckTest {\n+    private final FakeTimeClock fakeTimeClock = new FakeTimeClock();\n+    private final TaggedMetricRegistry registry1 = mock(TaggedMetricRegistry.class);\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics =\n+            LeaderElectionServiceMetrics.of(registry1);\n+    private final LeaderElectionHealthCheck leaderElectionHealthCheck =\n+            new LeaderElectionHealthCheck(leaderElectionServiceMetrics);\n+\n+    @Before\n+    public void setup() {\n+        when(registry1.meter(any())).thenReturn(new Meter(fakeTimeClock));\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(3, 60);\n+\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+    }\n+\n+    @Test\n+    public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(7, 30);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+    }\n+\n+    public void markLeaderElectionsAtSpecifiedInterval(int leaderElectionCount, long timeIntervalInSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY1NzcxOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozOTo1NlrOG4NDqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzozOTo1NlrOG4NDqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NzM2OA==", "bodyText": "nit: the name of the constant implies <=?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461587368", "createdAt": "2020-07-28T13:39:56Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.health;\n+\n+import com.palantir.leader.LeaderElectionServiceMetrics;\n+\n+public class LeaderElectionHealthCheck {\n+    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.016;\n+\n+    private final LeaderElectionServiceMetrics leaderElectionServiceMetrics;\n+\n+    public LeaderElectionHealthCheck(LeaderElectionServiceMetrics leaderElectionServiceMetrics) {\n+        this.leaderElectionServiceMetrics = leaderElectionServiceMetrics;\n+    }\n+\n+    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n+        return leaderElectionServiceMetrics.proposedLeadership().getFiveMinuteRate() < MAX_ALLOWED_LAST_5_MINUTE_RATE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTY3MzYwOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/metrics/leader-election.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MzoyMFrOG4NNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0MzoyMFrOG4NNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4OTk0NQ==", "bodyText": "We should standardise between Number of times(per second) and Rate. I think I slightly prefer the former - or maybe Rate (frequency per second)?", "url": "https://github.com/palantir/atlasdb/pull/4907#discussion_r461589945", "createdAt": "2020-07-28T13:43:20Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/metrics/leader-election.yml", "diffHunk": "@@ -0,0 +1,31 @@\n+options:\n+  javaPackage: 'com.palantir.leader'\n+\n+namespaces:\n+  leaderElectionService:\n+    docs: Metrics helpful for TimeLock adjudication.\n+    metrics:\n+      gainedLeadership:\n+        type: meter\n+        docs: Number of times(per second) leadership was gained successully.\n+      lostLeadership:\n+        type: meter\n+        docs: Number of times(per second) leadership was lost.\n+      noQuorum:\n+        type: meter\n+        docs: Number of times(per second) there was no quorum while determining leadership status.\n+      proposedLeadership:\n+        type: meter\n+        docs: Number of times(per second) leadership was proposed.\n+      proposalFailure:\n+        type: meter\n+        docs: Number of times(per second) leadership could not be gained after proposal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18aca492fe87271e7fe037333273ad76e4e808f5"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2738, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}