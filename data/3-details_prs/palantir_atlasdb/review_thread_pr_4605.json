{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNDE1NTQx", "number": 4605, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowMTozNFrODktnUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyMDoxOVrODkuIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODIyNjcyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/NoOpLockWatchManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowMTozNFrOFxL-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjozOTozM1rOFxNnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMDcwNA==", "bodyText": "can this ever be hit via api? can we just throw a Http level error? or have an exception mapper that captures said exception? otherwise we just get a 500", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387120704", "createdAt": "2020-03-03T16:01:34Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/NoOpLockWatchManager.java", "diffHunk": "@@ -17,30 +17,27 @@\n package com.palantir.atlasdb.keyvalue.api.watch;\n \n import java.util.Set;\n-import java.util.UUID;\n \n-import com.google.common.collect.ImmutableSet;\n import com.palantir.lock.watch.IdentifiedVersion;\n import com.palantir.lock.watch.LockWatchReferences;\n-import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n import com.palantir.lock.watch.TransactionsLockWatchEvents;\n \n public final class NoOpLockWatchManager implements LockWatchManager {\n     public static final LockWatchManager INSTANCE = new NoOpLockWatchManager();\n-    public static final TransactionsLockWatchEvents NONE = TransactionsLockWatchEvents.failure(\n-            LockWatchStateUpdate.snapshot(UUID.randomUUID(), 0L, ImmutableSet.of(), ImmutableSet.of()));\n \n     private NoOpLockWatchManager() {\n         // ...\n     }\n \n     @Override\n-    public void registerWatches(Set<LockWatchReferences.LockWatchReference> lockWatchEntries) {\n-        // noop\n+    public void registerWatches(Set<LockWatchReferences.LockWatchReference> lockWatchReferences) {\n+        throw new UnsupportedOperationException(\"Lock watch registration not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzcwNg==", "bodyText": "This is completely on the client side, just doesn't support lock watching in general", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387147706", "createdAt": "2020-03-03T16:39:33Z", "author": {"login": "gmaretic"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/NoOpLockWatchManager.java", "diffHunk": "@@ -17,30 +17,27 @@\n package com.palantir.atlasdb.keyvalue.api.watch;\n \n import java.util.Set;\n-import java.util.UUID;\n \n-import com.google.common.collect.ImmutableSet;\n import com.palantir.lock.watch.IdentifiedVersion;\n import com.palantir.lock.watch.LockWatchReferences;\n-import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n import com.palantir.lock.watch.TransactionsLockWatchEvents;\n \n public final class NoOpLockWatchManager implements LockWatchManager {\n     public static final LockWatchManager INSTANCE = new NoOpLockWatchManager();\n-    public static final TransactionsLockWatchEvents NONE = TransactionsLockWatchEvents.failure(\n-            LockWatchStateUpdate.snapshot(UUID.randomUUID(), 0L, ImmutableSet.of(), ImmutableSet.of()));\n \n     private NoOpLockWatchManager() {\n         // ...\n     }\n \n     @Override\n-    public void registerWatches(Set<LockWatchReferences.LockWatchReference> lockWatchEntries) {\n-        // noop\n+    public void registerWatches(Set<LockWatchReferences.LockWatchReference> lockWatchReferences) {\n+        throw new UnsupportedOperationException(\"Lock watch registration not supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMDcwNA=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODIzOTE5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNDozN1rOFxMGGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoyMTozNFrOFxPPpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMjcxMg==", "bodyText": "why have this be optional if you have a noop version?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387122712", "createdAt": "2020-03-03T16:04:37Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1204,6 +1218,7 @@ private static MultiTableSweepQueueWriter uninitializedTargetedSweeper(\n         TimestampManagementService timestampManagement();\n         TimelockService timelock();\n         Optional<TimeLockMigrator> migrator();\n+        Optional<LockWatchManager> lockWatcher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NDMwOA==", "bodyText": "I think when this was originally written we needed an rpc client for the noop impl, but given that we have timelock here, we can just derive what we need when get commit timestamp gets added", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387174308", "createdAt": "2020-03-03T17:21:34Z", "author": {"login": "gmaretic"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1204,6 +1218,7 @@ private static MultiTableSweepQueueWriter uninitializedTargetedSweeper(\n         TimestampManagementService timestampManagement();\n         TimelockService timelock();\n         Optional<TimeLockMigrator> migrator();\n+        Optional<LockWatchManager> lockWatcher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMjcxMg=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI0NTgyOnYy", "diffSide": "RIGHT", "path": "atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNjowMVrOFxMJ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNjowMVrOFxMJ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMzcwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService,\n          \n          \n            \n                            NoOpLockWatchEventCache.INSTANCE);\n          \n          \n            \n                    this.timelockService = RemoteTimelockServiceAdapter.create(\n          \n          \n            \n                            timelockService, \n          \n          \n            \n                            conjureTimelockService,\n          \n          \n            \n                            NoOpLockWatchEventCache.INSTANCE);", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387123707", "createdAt": "2020-03-03T16:06:01Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java", "diffHunk": "@@ -38,7 +39,8 @@\n \n     private AsyncLockClient(NamespacedTimelockRpcClient timelockService,\n             NamespacedConjureTimelockService conjureTimelockService) {\n-        this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService);\n+        this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService,\n+                NoOpLockWatchEventCache.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI0OTUyOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNjo1NFrOFxMMXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1MDo1NVrOFxwSHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDMxOQ==", "bodyText": "how does this tie in with conjure objects? or this \"above\" the rpc layer so to speak?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124319", "createdAt": "2020-03-03T16:06:54Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java", "diffHunk": "@@ -32,4 +32,13 @@\n     UUID requestorId();\n     OptionalLong lastKnownLockLogVersion();\n     int numTransactions();\n+\n+    static StartTransactionRequestV5 createForRequestor(UUID requestorId, OptionalLong lockVersion, int number) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzE4Nw==", "bodyText": "Yeah some things can get cleaned up, but outside the scope of this PR", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387193187", "createdAt": "2020-03-03T17:55:54Z", "author": {"login": "gmaretic"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java", "diffHunk": "@@ -32,4 +32,13 @@\n     UUID requestorId();\n     OptionalLong lastKnownLockLogVersion();\n     int numTransactions();\n+\n+    static StartTransactionRequestV5 createForRequestor(UUID requestorId, OptionalLong lockVersion, int number) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDMxOQ=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNTYxNA==", "bodyText": "is it within the scope of lock watches though? like if there's a chance to clear some things up, it would be ideal, before it gets too annoying to actually change etc.", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387715614", "createdAt": "2020-03-04T14:50:55Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java", "diffHunk": "@@ -32,4 +32,13 @@\n     UUID requestorId();\n     OptionalLong lastKnownLockLogVersion();\n     int numTransactions();\n+\n+    static StartTransactionRequestV5 createForRequestor(UUID requestorId, OptionalLong lockVersion, int number) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDMxOQ=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI1MDI1OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionResponseV5.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNzowNFrOFxMM0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNzowNFrOFxMM0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDQzNA==", "bodyText": "similar to above", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124434", "createdAt": "2020-03-03T16:07:04Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionResponseV5.java", "diffHunk": "@@ -40,4 +40,17 @@ static StartTransactionResponseV5 fromV4(StartTransactionResponseV4 v4response,\n                 .lockWatchUpdate(lockWatch)\n                 .build();\n     }\n+\n+    static StartTransactionResponseV5 of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI1MTA2OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNzoxM1rOFxMNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo1MDo0NlrOFxwRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDU1NA==", "bodyText": "?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124554", "createdAt": "2020-03-03T16:07:13Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -25,5 +26,5 @@\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n-    long version();\n+    OptionalLong version();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzM3NA==", "bodyText": "We need to support unknown version", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387193374", "createdAt": "2020-03-03T17:56:13Z", "author": {"login": "gmaretic"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -25,5 +26,5 @@\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n-    long version();\n+    OptionalLong version();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDU1NA=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNTUwMQ==", "bodyText": "probably a silly question simply because I'm not aware of lock watch intricacies, but why do we need to? this is all new code right?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387715501", "createdAt": "2020-03-04T14:50:46Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -25,5 +26,5 @@\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n-    long version();\n+    OptionalLong version();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDU1NA=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI1MzQ5OnYy", "diffSide": "LEFT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/LockWatchingRpcClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNzo1MFrOFxMO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowNzo1MFrOFxMO0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDk0NA==", "bodyText": "why is this class in lock-api-objects? it doesn't appear in an actual object does it..?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124944", "createdAt": "2020-03-03T16:07:50Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/LockWatchingRpcClient.java", "diffHunk": "@@ -31,10 +31,6 @@\n     @Path(\"start-watching\")\n     void startWatching(@PathParam(\"namespace\") String namespace, LockWatchRequest lockWatchRequest);\n \n-    @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI1NTQ4OnYy", "diffSide": "LEFT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NamespacedLockWatchingRpcClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowODoxNlrOFxMQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowODoxNlrOFxMQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNTI2Mg==", "bodyText": "similarly this class, likely a separate pr, but it's probably a bit misleading", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387125262", "createdAt": "2020-03-03T16:08:16Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NamespacedLockWatchingRpcClient.java", "diffHunk": "@@ -17,22 +17,18 @@\n package com.palantir.lock.watch;\n \n public class NamespacedLockWatchingRpcClient {\n-    private final String namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI1NzAyOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NamespacedLockWatchingRpcClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowODozOVrOFxMREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowODozOVrOFxMREg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNTUyMg==", "bodyText": "revert?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387125522", "createdAt": "2020-03-03T16:08:39Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NamespacedLockWatchingRpcClient.java", "diffHunk": "@@ -17,22 +17,18 @@\n package com.palantir.lock.watch;\n \n public class NamespacedLockWatchingRpcClient {\n-    private final String namespace;\n     private final LockWatchingRpcClient lockWatchingRpcClient;\n+    private final String namespace;\n \n-    public NamespacedLockWatchingRpcClient(String namespace, LockWatchingRpcClient lockWatchingRpcClient) {\n-        this.namespace = namespace;\n+    public NamespacedLockWatchingRpcClient(LockWatchingRpcClient lockWatchingRpcClient, String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI2MDY5OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjowOToyN1rOFxMTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxMDowMVrOFxMU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjA3OQ==", "bodyText": "just make it final and use mock-maker-inline which can mock final types: https://www.baeldung.com/mockito-final", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387126079", "createdAt": "2020-03-03T16:09:27Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+@SuppressWarnings(\"FinalClass\") // mocks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjQ5Ng==", "bodyText": "is this used in prod? or is this just used for tests, haven't really processed where everything is used just yet", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387126496", "createdAt": "2020-03-03T16:10:01Z", "author": {"login": "felixdesouza"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+@SuppressWarnings(\"FinalClass\") // mocks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjA3OQ=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI3NzUyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxMzowNVrOFxMdhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1ODo0NlrOFxQfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODcxMA==", "bodyText": "this is weird? but I can't think of another way :S", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387128710", "createdAt": "2020-03-03T16:13:05Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -88,6 +90,26 @@ StartTransactionResponseV4 startTransactions(int batchSize) {\n                 lease);\n     }\n \n+    StartTransactionResponseV5 startTransactionsWithWatches(OptionalLong version, int batchSize) {\n+        ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()\n+                .requestorId(clientId)\n+                .requestId(UUID.randomUUID())\n+                .numTransactions(batchSize)\n+                .lastKnownVersion(version.isPresent() ? Optional.of(version.getAsLong()) : Optional.empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTYxNg==", "bodyText": "why even have it be OptionalLong if you're going to have to box unbox everywhere?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387129616", "createdAt": "2020-03-03T16:14:16Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -88,6 +90,26 @@ StartTransactionResponseV4 startTransactions(int batchSize) {\n                 lease);\n     }\n \n+    StartTransactionResponseV5 startTransactionsWithWatches(OptionalLong version, int batchSize) {\n+        ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()\n+                .requestorId(clientId)\n+                .requestId(UUID.randomUUID())\n+                .numTransactions(batchSize)\n+                .lastKnownVersion(version.isPresent() ? Optional.of(version.getAsLong()) : Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODcxMA=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NDc5Mw==", "bodyText": "Fair, had to make it Optional to avoid breaking wire format and failed to update this", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387194793", "createdAt": "2020-03-03T17:58:46Z", "author": {"login": "gmaretic"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -88,6 +90,26 @@ StartTransactionResponseV4 startTransactions(int batchSize) {\n                 lease);\n     }\n \n+    StartTransactionResponseV5 startTransactionsWithWatches(OptionalLong version, int batchSize) {\n+        ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()\n+                .requestorId(clientId)\n+                .requestId(UUID.randomUUID())\n+                .numTransactions(batchSize)\n+                .lastKnownVersion(version.isPresent() ? Optional.of(version.getAsLong()) : Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODcxMA=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI4NjU5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxNTowMFrOFxMjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxNTowMFrOFxMjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMDE0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace,\n          \n          \n            \n                        LockWatchEventCache lockWatchEventCache) {\n          \n          \n            \n                        TimelockRpcClient rpcClient, \n          \n          \n            \n                        ConjureTimelockService conjureClient, \n          \n          \n            \n                        String timelockNamespace,\n          \n          \n            \n                        LockWatchEventCache lockWatchEventCache) {", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387130144", "createdAt": "2020-03-03T16:15:00Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java", "diffHunk": "@@ -37,23 +38,27 @@\n     private final TransactionStarter transactionStarter;\n \n     private RemoteTimelockServiceAdapter(NamespacedTimelockRpcClient rpcClient,\n-            NamespacedConjureTimelockService conjureTimelockService) {\n+            NamespacedConjureTimelockService conjureTimelockService,\n+            LockWatchEventCache lockWatchEventCache) {\n         this.rpcClient = rpcClient;\n         this.lockLeaseService = LockLeaseService.create(rpcClient, conjureTimelockService);\n-        this.transactionStarter = TransactionStarter.create(lockLeaseService);\n+        this.transactionStarter = TransactionStarter.create(lockLeaseService, lockWatchEventCache);\n     }\n \n     public static RemoteTimelockServiceAdapter create(\n             NamespacedTimelockRpcClient rpcClient,\n-            NamespacedConjureTimelockService conjureClient) {\n-        return new RemoteTimelockServiceAdapter(rpcClient, conjureClient);\n+            NamespacedConjureTimelockService conjureClient,\n+            LockWatchEventCache lockWatchEventCache) {\n+        return new RemoteTimelockServiceAdapter(rpcClient, conjureClient, lockWatchEventCache);\n     }\n \n     public static RemoteTimelockServiceAdapter create(\n-            TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace) {\n+            TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace,\n+            LockWatchEventCache lockWatchEventCache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODI4ODczOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxNToyOVrOFxMkhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxNToyOVrOFxMkhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMDUwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache,\n          \n          \n            \n                        int numberOfTransactions) {\n          \n          \n            \n                        LockLeaseService lockLeaseService, \n          \n          \n            \n                        LockWatchEventCache lockWatchEventCache,\n          \n          \n            \n                        int numberOfTransactions) {", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387130501", "createdAt": "2020-03-03T16:15:29Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -152,15 +153,21 @@ public void close() {\n     }\n \n     private static List<StartIdentifiedAtlasDbTransactionResponse> getStartTransactionResponses(\n-            LockLeaseService lockLeaseService, int numberOfTransactions) {\n+            LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache,\n+            int numberOfTransactions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODMwMTg3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoxODoyM1rOFxMsjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODowMDoxMlrOFxQihw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMjU1Ng==", "bodyText": "as a meta point, if StartTransaction(Request|Response) is not transferred over the wire, can we get rid of the V5 etc?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387132556", "createdAt": "2020-03-03T16:18:23Z", "author": {"login": "felixdesouza"}, "path": "lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java", "diffHunk": "@@ -78,19 +96,19 @@ public void after() {\n \n     @Test\n     public void shouldDeriveStartTransactionResponseFromBatchedResponse_singleTransaction() {\n-        StartTransactionResponseV4 startTransactionResponse = getStartTransactionResponse(12, 1);\n+        StartTransactionResponseV5 startTransactionResponse = getStartTransactionResponse(12, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NTUyNw==", "bodyText": "Yup, will open a follow-up PR", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387195527", "createdAt": "2020-03-03T18:00:12Z", "author": {"login": "gmaretic"}, "path": "lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java", "diffHunk": "@@ -78,19 +96,19 @@ public void after() {\n \n     @Test\n     public void shouldDeriveStartTransactionResponseFromBatchedResponse_singleTransaction() {\n-        StartTransactionResponseV4 startTransactionResponse = getStartTransactionResponse(12, 1);\n+        StartTransactionResponseV5 startTransactionResponse = getStartTransactionResponse(12, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMjU1Ng=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODMxMTg0OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/NamespacedClients.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyMDoxOVrOFxMyeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODowMjoxNFrOFxQmwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNDA3Mw==", "bodyText": "it's unclear to me why you need this here? is this used anywhere? or are you only creating it here to be used inside timelockService above?", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387134073", "createdAt": "2020-03-03T16:20:19Z", "author": {"login": "felixdesouza"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/NamespacedClients.java", "diffHunk": "@@ -59,7 +61,13 @@ static NamespacedClients from(String namespace, ProxyFactory proxyFactory) {\n     default TimelockService timelockService() {\n         return RemoteTimelockServiceAdapter.create(\n                 namespacedTimelockRpcClient(),\n-                namespacedConjureTimelockService());\n+                namespacedConjureTimelockService(),\n+                lockWatchEventCache());\n+    }\n+\n+    @Value.Default\n+    default LockWatchEventCache lockWatchEventCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NjYwOA==", "bodyText": "For tests that don't exist yet I guess", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387196608", "createdAt": "2020-03-03T18:02:14Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/NamespacedClients.java", "diffHunk": "@@ -59,7 +61,13 @@ static NamespacedClients from(String namespace, ProxyFactory proxyFactory) {\n     default TimelockService timelockService() {\n         return RemoteTimelockServiceAdapter.create(\n                 namespacedTimelockRpcClient(),\n-                namespacedConjureTimelockService());\n+                namespacedConjureTimelockService(),\n+                lockWatchEventCache());\n+    }\n+\n+    @Value.Default\n+    default LockWatchEventCache lockWatchEventCache() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNDA3Mw=="}, "originalCommit": {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2337, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}