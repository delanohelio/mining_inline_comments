{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjIwMzEw", "number": 4933, "title": "Bound lock acquire timeout", "bodyText": "Goals (and why):\nBound lock acquire timeout by client read timeout because 1. the async request expires before server cancels the request thus avoiding java.util.concurrent.CancellationException and 2. this ensures locks are not given out to phantom client.\nImplementation Description (bullets):\nBELS limits lock acquire timeout to client read timeout via duration limiter.\nTesting (What was existing testing like?  What have you done to improve it?):\nTBD\nConcerns (what feedback would you like?):\n\n\nIf extended timeout is not used, the client read timeout will be - ClientOptionsConstants.SHORT_READ_TIMEOUT and phantom client problem would not be solved.\n\n\nMaintaining two constants is not a good idea.\n\n\nWhere should we start reviewing?:\nBlockEnforcingLockService\nPriority (whenever / two weeks / yesterday):\nNext week", "createdAt": "2020-08-07T13:57:02Z", "url": "https://github.com/palantir/atlasdb/pull/4933", "merged": true, "mergeCommit": {"oid": "cfefef624013dbaacce08fb8b51ec75802f1eb6f"}, "closed": true, "closedAt": "2020-08-10T17:43:17Z", "author": {"login": "sudiksha27"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8k1dpgH2gAyNDY0NjIwMzEwOjcwZGI5MjQ5MjAzNmIxMzAyYWZlNTM1MWU0MWUyMmFkNWNhMDdlODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9lkCpgH2gAyNDY0NjIwMzEwOmFiOWIyM2JhODcyNzhhMWM2YzljZGIzMjc5Mzk4ZmVmZTVkZmE3Yzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "70db92492036b1302afe5351e41e22ad5ca07e88", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/70db92492036b1302afe5351e41e22ad5ca07e88", "committedDate": "2020-08-07T13:56:31Z", "message": "Bound lock acquire timeout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzU1MDEy", "url": "https://github.com/palantir/atlasdb/pull/4933#pullrequestreview-463355012", "createdAt": "2020-08-07T14:24:03Z", "commit": {"oid": "70db92492036b1302afe5351e41e22ad5ca07e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoyNDowM1rOG9b5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoyNDowM1rOG9b5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MzQzOQ==", "bodyText": "This needs to be slightly less - a client's connect timeout also covers the time timelock takes to deserialize the request, check it is the leader etc.", "url": "https://github.com/palantir/atlasdb/pull/4933#discussion_r467073439", "createdAt": "2020-08-07T14:24:03Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/BlockEnforcingLockService.java", "diffHunk": "@@ -46,6 +46,13 @@\n  * Fairness is admittedly compromised, but this is a closer approximation than the previous behaviour.\n  */\n final class BlockEnforcingLockService {\n+    /**\n+     * Bound lock acquire timeout by client read timeout because 1. the async request expires before server cancels\n+     * the request thus avoiding {@link java.util.concurrent.CancellationException} and\n+     * 2. this ensures locks are not given out to phantom client.\n+     */\n+    private static final Duration MAX_PERMISSIBLE_LOCK_ACQUIRE_TIMEOUT = Duration.ofSeconds(65);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70db92492036b1302afe5351e41e22ad5ca07e88"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b96f0a0858adf9f3423e24645da499cf564eab8", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/7b96f0a0858adf9f3423e24645da499cf564eab8", "committedDate": "2020-08-10T15:15:36Z", "message": "Test effort 1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzU4ODU3", "url": "https://github.com/palantir/atlasdb/pull/4933#pullrequestreview-464358857", "createdAt": "2020-08-10T15:51:30Z", "commit": {"oid": "7b96f0a0858adf9f3423e24645da499cf564eab8"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1MTozMFrOG-U3MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjozMjo0MlrOG-WaVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNjcwNA==", "bodyText": "Not sure I understand the separate verifies here.", "url": "https://github.com/palantir/atlasdb/pull/4933#discussion_r468006704", "createdAt": "2020-08-10T15:51:30Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/LockLeaseServiceTest.java", "diffHunk": "@@ -141,6 +148,33 @@ public void leasedTokenShouldHaveValidLeaseForTheLeasePeriod() {\n         assertValid(lockResponse.getToken());\n     }\n \n+    @Test\n+    public void lockAcquireTimeoutIsBounded() {\n+        when(lockRequest.getAcquireTimeoutMs()).thenReturn(TIMEOUT_GREATER_THAN_MAX_PERMISSIBLE_TIMEOUT.toMillis());\n+        when(timelock.lock(any()))\n+                .thenReturn(ConjureLockResponse.successful(SuccessfulLockResponse.of(LOCK_TOKEN, getLease())));\n+        LockResponse lockResponse = lockLeaseService.lock(lockRequest);\n+        assertValid(lockResponse.getToken());\n+        verify(timelock, times(1)).lock(any());\n+        verify(timelock)\n+                .lock(argThat(req -> req.getAcquireTimeoutMs()\n+                        == BlockEnforcingLockService.MAX_PERMISSIBLE_LOCK_ACQUIRE_TIMEOUT.toMillis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b96f0a0858adf9f3423e24645da499cf564eab8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNjg4Mw==", "bodyText": "Can we have a test for retrying until failure?", "url": "https://github.com/palantir/atlasdb/pull/4933#discussion_r468006883", "createdAt": "2020-08-10T15:51:47Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/LockLeaseServiceTest.java", "diffHunk": "@@ -141,6 +148,33 @@ public void leasedTokenShouldHaveValidLeaseForTheLeasePeriod() {\n         assertValid(lockResponse.getToken());\n     }\n \n+    @Test\n+    public void lockAcquireTimeoutIsBounded() {\n+        when(lockRequest.getAcquireTimeoutMs()).thenReturn(TIMEOUT_GREATER_THAN_MAX_PERMISSIBLE_TIMEOUT.toMillis());\n+        when(timelock.lock(any()))\n+                .thenReturn(ConjureLockResponse.successful(SuccessfulLockResponse.of(LOCK_TOKEN, getLease())));\n+        LockResponse lockResponse = lockLeaseService.lock(lockRequest);\n+        assertValid(lockResponse.getToken());\n+        verify(timelock, times(1)).lock(any());\n+        verify(timelock)\n+                .lock(argThat(req -> req.getAcquireTimeoutMs()\n+                        == BlockEnforcingLockService.MAX_PERMISSIBLE_LOCK_ACQUIRE_TIMEOUT.toMillis()));\n+    }\n+\n+    @Test\n+    public void lockAcquireTimeoutIsBoundedAndRequestRetried() {\n+        when(lockRequest.getAcquireTimeoutMs()).thenReturn(TIMEOUT_GREATER_THAN_MAX_PERMISSIBLE_TIMEOUT.toMillis());\n+        when(timelock.lock(any()))\n+                .thenThrow(TIMEOUT_EXCEPTION)\n+                .thenReturn(ConjureLockResponse.successful(SuccessfulLockResponse.of(LOCK_TOKEN, getLease())));\n+\n+        LockResponse lockResponse = lockLeaseService.lock(lockRequest);\n+        assertValid(lockResponse.getToken());\n+        verify(timelock, times(2)).lock(any());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b96f0a0858adf9f3423e24645da499cf564eab8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzMjA4NQ==", "bodyText": "Discussed offline: That's hard because it requires you to inject a clock.", "url": "https://github.com/palantir/atlasdb/pull/4933#discussion_r468032085", "createdAt": "2020-08-10T16:32:42Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/LockLeaseServiceTest.java", "diffHunk": "@@ -141,6 +148,33 @@ public void leasedTokenShouldHaveValidLeaseForTheLeasePeriod() {\n         assertValid(lockResponse.getToken());\n     }\n \n+    @Test\n+    public void lockAcquireTimeoutIsBounded() {\n+        when(lockRequest.getAcquireTimeoutMs()).thenReturn(TIMEOUT_GREATER_THAN_MAX_PERMISSIBLE_TIMEOUT.toMillis());\n+        when(timelock.lock(any()))\n+                .thenReturn(ConjureLockResponse.successful(SuccessfulLockResponse.of(LOCK_TOKEN, getLease())));\n+        LockResponse lockResponse = lockLeaseService.lock(lockRequest);\n+        assertValid(lockResponse.getToken());\n+        verify(timelock, times(1)).lock(any());\n+        verify(timelock)\n+                .lock(argThat(req -> req.getAcquireTimeoutMs()\n+                        == BlockEnforcingLockService.MAX_PERMISSIBLE_LOCK_ACQUIRE_TIMEOUT.toMillis()));\n+    }\n+\n+    @Test\n+    public void lockAcquireTimeoutIsBoundedAndRequestRetried() {\n+        when(lockRequest.getAcquireTimeoutMs()).thenReturn(TIMEOUT_GREATER_THAN_MAX_PERMISSIBLE_TIMEOUT.toMillis());\n+        when(timelock.lock(any()))\n+                .thenThrow(TIMEOUT_EXCEPTION)\n+                .thenReturn(ConjureLockResponse.successful(SuccessfulLockResponse.of(LOCK_TOKEN, getLease())));\n+\n+        LockResponse lockResponse = lockLeaseService.lock(lockRequest);\n+        assertValid(lockResponse.getToken());\n+        verify(timelock, times(2)).lock(any());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAwNjg4Mw=="}, "originalCommit": {"oid": "7b96f0a0858adf9f3423e24645da499cf564eab8"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99c8524f20a001091dceeb76786cc0b69e618f21", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/99c8524f20a001091dceeb76786cc0b69e618f21", "committedDate": "2020-08-10T17:21:19Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9b23ba87278a1c6c9cdb3279398fefe5dfa7c8", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/ab9b23ba87278a1c6c9cdb3279398fefe5dfa7c8", "committedDate": "2020-08-10T17:21:19Z", "message": "Add generated changelog entries"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2774, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}