{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjM3NDE4", "number": 4658, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMDo1NlrODqY-Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzoyMFrODqZIjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc1OTYzOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowMDo1NlrOF6GvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMzowN1rOF6rcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ==", "bodyText": "do we want one on each invocation that it retries?", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396472105", "createdAt": "2020-03-23T14:00:56Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -214,7 +218,8 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         Object maybeValidDelegate = delegateRef.get();\n \n         ListenableFuture<StillLeadingStatus> leadingFuture =\n-                statusRetrier.execute(() -> leaderElectionService.isStillLeading(leadershipToken));\n+                Tracers.wrapListenableFuture(\"validate-leadership\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3Mjk3NA==", "bodyText": "this would still remain as the overall trace for the validate-leadership portion, but I imagine that each invocation inside statusRetrier should be wrapped in one where it's like validate-leadership attempt 0 etc.", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396472974", "createdAt": "2020-03-23T14:02:18Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -214,7 +218,8 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         Object maybeValidDelegate = delegateRef.get();\n \n         ListenableFuture<StillLeadingStatus> leadingFuture =\n-                statusRetrier.execute(() -> leaderElectionService.isStillLeading(leadershipToken));\n+                Tracers.wrapListenableFuture(\"validate-leadership\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3ODQ2NA==", "bodyText": "Yeah, I think this makes sense. Extracting the attempt numbers is a bit messy, but I've rewritten this so there are validate-leadership-attempt traces there.", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396578464", "createdAt": "2020-03-23T16:20:42Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -214,7 +218,8 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         Object maybeValidDelegate = delegateRef.get();\n \n         ListenableFuture<StillLeadingStatus> leadingFuture =\n-                statusRetrier.execute(() -> leaderElectionService.isStillLeading(leadershipToken));\n+                Tracers.wrapListenableFuture(\"validate-leadership\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzQ3NA==", "bodyText": "fair enough, not strictly necessary tbf", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397073474", "createdAt": "2020-03-24T11:13:07Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -214,7 +218,8 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         Object maybeValidDelegate = delegateRef.get();\n \n         ListenableFuture<StillLeadingStatus> leadingFuture =\n-                statusRetrier.execute(() -> leaderElectionService.isStillLeading(leadershipToken));\n+                Tracers.wrapListenableFuture(\"validate-leadership\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc3NTE1OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNDozNVrOF6G4_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyNTo0MlrOF6yvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA==", "bodyText": "do you think it's worth doing the golden master thing? my proposal is that it could be, because this codepath is fragile, and we want to make sure that we're not undoing any async work as a result by accident (which is quite hard to test atm). Perhaps we don't need it for this PR, but it's something I've been thinking about with all the partitioning/perf work i.e. how do we avoid regressing things that aren't easily tested?", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396474620", "createdAt": "2020-03-23T14:04:35Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "diffHunk": "@@ -64,6 +65,9 @@\n \n     @Rule public final ExpectedException expect = ExpectedException.none();\n \n+    @Rule\n+    public final RenderTracingRule rule = new RenderTracingRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyODM3OA==", "bodyText": "I'd like to, but we need to migrate to JUnit 5 for that which may prove to be messy. Probably worth tracking in internal tracking engine?", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396628378", "createdAt": "2020-03-23T17:30:09Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "diffHunk": "@@ -64,6 +65,9 @@\n \n     @Rule public final ExpectedException expect = ExpectedException.none();\n \n+    @Rule\n+    public final RenderTracingRule rule = new RenderTracingRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4Mzg5MQ==", "bodyText": "you needn't migrate big bang, that'd be way too much effort, could be a similar policy to assertj i.e. use it moving forward etc. or just for this rule if we think it has value", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397083891", "createdAt": "2020-03-24T11:32:05Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "diffHunk": "@@ -64,6 +65,9 @@\n \n     @Rule public final ExpectedException expect = ExpectedException.none();\n \n+    @Rule\n+    public final RenderTracingRule rule = new RenderTracingRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MzkyMg==", "bodyText": "The issue was more bumping the Guava dependency, though we checked internally and determined that this was almost certainly acceptable.", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397153922", "createdAt": "2020-03-24T13:32:54Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "diffHunk": "@@ -64,6 +65,9 @@\n \n     @Rule public final ExpectedException expect = ExpectedException.none();\n \n+    @Rule\n+    public final RenderTracingRule rule = new RenderTracingRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5Mjk4NA==", "bodyText": "Turns out this causes more problems than expected because e.g. of dev breaks within this codebase, so not proceeding with this right now.", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397192984", "createdAt": "2020-03-24T14:25:42Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "diffHunk": "@@ -64,6 +65,9 @@\n \n     @Rule public final ExpectedException expect = ExpectedException.none();\n \n+    @Rule\n+    public final RenderTracingRule rule = new RenderTracingRule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzc4NTc1OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDowNzoyMFrOF6G_9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozMzowNVrOF6sG_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQwNw==", "bodyText": "Do we not want to handle the IAE below? not that I think it'll come up that often, I don't think we handled it previously anyway, but seems a bit odd, and it'll come out as a 500 iirc.", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396476407", "createdAt": "2020-03-23T14:07:20Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -234,14 +239,21 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n \n         if (!method.getReturnType().equals(ListenableFuture.class)) {\n             Object delegate = AtlasFutures.getUnchecked(delegateFuture);\n-            try {\n+            try (CloseableTracer ignored = CloseableTracer.startSpan(\"execute-on-delegate\")) {\n                 return method.invoke(delegate, args);\n             } catch (InvocationTargetException e) {\n                 throw handleDelegateThrewException(leadershipToken, e);\n             }\n         } else {\n             return FluentFuture.from(delegateFuture)\n-                    .transformAsync(delegate -> (ListenableFuture<Object>) method.invoke(delegate, args),\n+                    .transformAsync(delegate ->\n+                                    Tracers.wrapListenableFuture(\"execute-on-delegate-async\", () -> {\n+                                        try {\n+                                            return (ListenableFuture<Object>) method.invoke(delegate, args);\n+                                        } catch (IllegalAccessException | InvocationTargetException e) {\n+                                            return Futures.immediateFailedFuture(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyODk4Ng==", "bodyText": "Yeah, I think it comes out as a 500. How do you think we should handle it? It shouldn't happen unless something is genuinely wrong server-side so I wouldn't be opposed to a 500. Maybe we should log something?", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396628986", "createdAt": "2020-03-23T17:30:56Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -234,14 +239,21 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n \n         if (!method.getReturnType().equals(ListenableFuture.class)) {\n             Object delegate = AtlasFutures.getUnchecked(delegateFuture);\n-            try {\n+            try (CloseableTracer ignored = CloseableTracer.startSpan(\"execute-on-delegate\")) {\n                 return method.invoke(delegate, args);\n             } catch (InvocationTargetException e) {\n                 throw handleDelegateThrewException(leadershipToken, e);\n             }\n         } else {\n             return FluentFuture.from(delegateFuture)\n-                    .transformAsync(delegate -> (ListenableFuture<Object>) method.invoke(delegate, args),\n+                    .transformAsync(delegate ->\n+                                    Tracers.wrapListenableFuture(\"execute-on-delegate-async\", () -> {\n+                                        try {\n+                                            return (ListenableFuture<Object>) method.invoke(delegate, args);\n+                                        } catch (IllegalAccessException | InvocationTargetException e) {\n+                                            return Futures.immediateFailedFuture(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQwNw=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NDQxMg==", "bodyText": "unclear, if it's unhandled before, and we haven't really seen instances of it, I'll leave it up to you if you want to change it, it just caught my eye with the try-catch in the new diff but was surprised it was missing from the old diff, not fussed either way", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397084412", "createdAt": "2020-03-24T11:33:05Z", "author": {"login": "felixdesouza"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -234,14 +239,21 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n \n         if (!method.getReturnType().equals(ListenableFuture.class)) {\n             Object delegate = AtlasFutures.getUnchecked(delegateFuture);\n-            try {\n+            try (CloseableTracer ignored = CloseableTracer.startSpan(\"execute-on-delegate\")) {\n                 return method.invoke(delegate, args);\n             } catch (InvocationTargetException e) {\n                 throw handleDelegateThrewException(leadershipToken, e);\n             }\n         } else {\n             return FluentFuture.from(delegateFuture)\n-                    .transformAsync(delegate -> (ListenableFuture<Object>) method.invoke(delegate, args),\n+                    .transformAsync(delegate ->\n+                                    Tracers.wrapListenableFuture(\"execute-on-delegate-async\", () -> {\n+                                        try {\n+                                            return (ListenableFuture<Object>) method.invoke(delegate, args);\n+                                        } catch (IllegalAccessException | InvocationTargetException e) {\n+                                            return Futures.immediateFailedFuture(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQwNw=="}, "originalCommit": {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2987, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}