{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjUyNzY3", "number": 4831, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNDo1MVrOEEgGMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo0Mjo1MFrOEEsDwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1NjM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNDo1MVrOGiKhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoyNDowMlrOGinR6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzI2Mw==", "bodyText": "I'm not sure I totally understand this test (even before this change). Why would the returned map be missing nodes?", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438477263", "createdAt": "2020-06-11T00:24:51Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "diffHunk": "@@ -85,16 +85,16 @@ public void waitThrowsForAllUnreachableSchemaVersion() throws TException {\n     }\n \n     @Test\n-    public void waitThrowsForFewerThanQuorumOnSameVersion() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersion() throws TException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5NDMxMA==", "bodyText": "I think it was feared that bootstrapping might mean we don't know about some of the nodes in the cluster (if the coordinator for some reason doesn't know about these yet).", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438894310", "createdAt": "2020-06-11T15:53:56Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "diffHunk": "@@ -85,16 +85,16 @@ public void waitThrowsForAllUnreachableSchemaVersion() throws TException {\n     }\n \n     @Test\n-    public void waitThrowsForFewerThanQuorumOnSameVersion() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersion() throws TException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzI2Mw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0ODMzMA==", "bodyText": "I've renamed the test to waitSucceedsWithClusterHavingDownsizedAtRuntime, since now that's what the test should be testing in practice", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438948330", "createdAt": "2020-06-11T17:24:02Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "diffHunk": "@@ -85,16 +85,16 @@ public void waitThrowsForAllUnreachableSchemaVersion() throws TException {\n     }\n \n     @Test\n-    public void waitThrowsForFewerThanQuorumOnSameVersion() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersion() throws TException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzI2Mw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTU1NzE1OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNToxNFrOGiKiRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo1MzowM1rOGij7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzM4Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438477383", "createdAt": "2020-06-11T00:25:14Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "diffHunk": "@@ -85,16 +85,16 @@ public void waitThrowsForAllUnreachableSchemaVersion() throws TException {\n     }\n \n     @Test\n-    public void waitThrowsForFewerThanQuorumOnSameVersion() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersion() throws TException {\n         when(client.describe_schema_versions()).thenReturn(ImmutableMap.of(VERSION_1, REST_OF_NODES));\n-        assertWaitForSchemaVersionsThrowsAndContainsConfigNodesInformation();\n+        assertWaitForSchemaVersionsDoesNotThrow();\n     }\n \n     @Test\n-    public void waitThrowsForQuorumOfUnreachableNodes() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersionAndRestUnreachable() throws TException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MzQ4NQ==", "bodyText": "(Note: Changed to fails now, going along with the discussion on the later comment.)", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438893485", "createdAt": "2020-06-11T15:53:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServicesSchemaConsensusTest.java", "diffHunk": "@@ -85,16 +85,16 @@ public void waitThrowsForAllUnreachableSchemaVersion() throws TException {\n     }\n \n     @Test\n-    public void waitThrowsForFewerThanQuorumOnSameVersion() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersion() throws TException {\n         when(client.describe_schema_versions()).thenReturn(ImmutableMap.of(VERSION_1, REST_OF_NODES));\n-        assertWaitForSchemaVersionsThrowsAndContainsConfigNodesInformation();\n+        assertWaitForSchemaVersionsDoesNotThrow();\n     }\n \n     @Test\n-    public void waitThrowsForQuorumOfUnreachableNodes() throws TException {\n+    public void waitSucceedsOnMinorityOnSameVersionAndRestUnreachable() throws TException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzM4Mw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU1MzAxOnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo0NzoxOVrOGiUNpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowNjozN1rOGicM2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNTk0Mw==", "bodyText": "Why do we return false if no nodes are reachable? I mean, should the case where there is no reachable part be handled differently?", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438635943", "createdAt": "2020-06-11T08:47:19Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -137,18 +136,8 @@ static void runWithWaitingForSchemas(\n         waitForSchemaVersions(config, client, \"after \" + unsafeSchemaChangeDescription);\n     }\n \n-    static boolean uniqueSchemaWithQuorumAgreementAndOtherNodesUnreachable(\n-            CassandraKeyValueServiceConfig config,\n-            Map<String, List<String>> versions) {\n-        List<String> reachableSchemas = getDistinctReachableSchemas(versions);\n-        if (reachableSchemas.size() > 1) {\n-            return false;\n-        }\n-\n-        int numberOfServers = config.servers().numberOfThriftHosts();\n-        int numberOfVisibleNodes = getNumberOfReachableNodes(versions);\n-\n-        return numberOfVisibleNodes >= ((numberOfServers / 2) + 1);\n+    static boolean reachablePartOfClusterHasConsistentSchemaVersions(Map<String, List<String>> versions) {\n+        return getDistinctReachableSchemas(versions).size() == 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NjgwOA==", "bodyText": "it probably doesn't matter what we return in that case? expectation being your schema mutation will fail because there is no online node for it to succeed against.", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438766808", "createdAt": "2020-06-11T13:06:37Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -137,18 +136,8 @@ static void runWithWaitingForSchemas(\n         waitForSchemaVersions(config, client, \"after \" + unsafeSchemaChangeDescription);\n     }\n \n-    static boolean uniqueSchemaWithQuorumAgreementAndOtherNodesUnreachable(\n-            CassandraKeyValueServiceConfig config,\n-            Map<String, List<String>> versions) {\n-        List<String> reachableSchemas = getDistinctReachableSchemas(versions);\n-        if (reachableSchemas.size() > 1) {\n-            return false;\n-        }\n-\n-        int numberOfServers = config.servers().numberOfThriftHosts();\n-        int numberOfVisibleNodes = getNumberOfReachableNodes(versions);\n-\n-        return numberOfVisibleNodes >= ((numberOfServers / 2) + 1);\n+    static boolean reachablePartOfClusterHasConsistentSchemaVersions(Map<String, List<String>> versions) {\n+        return getDistinctReachableSchemas(versions).size() == 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzNTk0Mw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU4NDU3OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4831.v2.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NjowMVrOGiUhVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxOTo1N1rOGinI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDk4Mg==", "bodyText": "Should we explicitly say cluster size of Cassandra/if a Cassandra cluster was downsized?", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438640982", "createdAt": "2020-06-11T08:56:01Z", "author": {"login": "sudiksha27"}, "path": "changelog/@unreleased/pr-4831.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: improvement\n+improvement:\n+  description: AtlasDB is now more resilient to migrations involving changes in the\n+    cluster size relative to the original install config. Previously, if a cluster\n+    was downsized at runtime, schema operations would consistently fail until the\n+    service was bounced.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NjAxOA==", "bodyText": "Yep, fair enough - good call, the description should mention Cassandra somewhere :)", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438946018", "createdAt": "2020-06-11T17:19:57Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4831.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: improvement\n+improvement:\n+  description: AtlasDB is now more resilient to migrations involving changes in the\n+    cluster size relative to the original install config. Previously, if a cluster\n+    was downsized at runtime, schema operations would consistently fail until the\n+    service was bounced.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDk4Mg=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzM4MDk5OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/cassandra/CassandraKeyValueServiceConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoxMzo1NVrOGiceiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjozMToxNFrOGilc1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MTMzNw==", "bodyText": "maybe change the wording to \"must only be used on KVS initialization to generate the initial connection(s) to the cluster\"?", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438771337", "createdAt": "2020-06-11T13:13:55Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/cassandra/CassandraKeyValueServiceConfig.java", "diffHunk": "@@ -48,6 +48,13 @@\n \n     String TYPE = \"cassandra\";\n \n+    /**\n+     * These are only the initial 'contact points' that will be used in connecting with the cluster. AtlasDB will\n+     * subsequently discover additional hosts in the cluster. (This is true for both Thrift and CQL endpoints.)\n+     *\n+     * This value, or values derived from it (e.g. the number of Thrift hosts) MUST NOT be used to ascertain the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MDUyOA==", "bodyText": "Tf we haven't already I think we should audit use of this method across the codebase and ensure it aligns with the expectations of this javadoc. The method below we've altered in this PR, even after these changes actually calls this method when it should not (even if it is only for logging purposes, it is still incorrect).", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438790528", "createdAt": "2020-06-11T13:40:20Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/cassandra/CassandraKeyValueServiceConfig.java", "diffHunk": "@@ -48,6 +48,13 @@\n \n     String TYPE = \"cassandra\";\n \n+    /**\n+     * These are only the initial 'contact points' that will be used in connecting with the cluster. AtlasDB will\n+     * subsequently discover additional hosts in the cluster. (This is true for both Thrift and CQL endpoints.)\n+     *\n+     * This value, or values derived from it (e.g. the number of Thrift hosts) MUST NOT be used to ascertain the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MTMzNw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxODM1OA==", "bodyText": "Yep, changed. I did do this audit actually, though agree that the log message makes more sense when it actually uses the servers discovered in the cluster.", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438918358", "createdAt": "2020-06-11T16:31:14Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/cassandra/CassandraKeyValueServiceConfig.java", "diffHunk": "@@ -48,6 +48,13 @@\n \n     String TYPE = \"cassandra\";\n \n+    /**\n+     * These are only the initial 'contact points' that will be used in connecting with the cluster. AtlasDB will\n+     * subsequently discover additional hosts in the cluster. (This is true for both Thrift and CQL endpoints.)\n+     *\n+     * This value, or values derived from it (e.g. the number of Thrift hosts) MUST NOT be used to ascertain the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3MTMzNw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQxMjgzOnYy", "diffSide": "LEFT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzoyMjozNlrOGicyxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo1MTo1MVrOGimLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NjUxNw==", "bodyText": "we should delete the CassandraKeyValueServiceConfig config from this method's signature and remove its usage across the entirety fo the method", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438776517", "createdAt": "2020-06-11T13:22:36Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,\n+            // this existed largely as a defense against performance issues with concurrent schema modifications.\n             versions = client.describe_schema_versions();\n-            if (uniqueSchemaWithQuorumAgreementAndOtherNodesUnreachable(config, versions)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMDMxMw==", "bodyText": "It's still used for the blocking interval, though I've changed that to passing in an int.", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438930313", "createdAt": "2020-06-11T16:51:51Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,\n+            // this existed largely as a defense against performance issues with concurrent schema modifications.\n             versions = client.describe_schema_versions();\n-            if (uniqueSchemaWithQuorumAgreementAndOtherNodesUnreachable(config, versions)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc3NjUxNw=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzQ4ODY1OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzozODoxNFrOGidh6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxODo0OVrOGinGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODU4Ng==", "bodyText": "As far as I know this state is impossible to be in provided you have a quorum nodes, and therefore I don't believe is a legitimate concern.\nThe primary goal of this method in my opinion (and we should directly document this in the javadoc is):\n\nbackoff doing schema mutations if the cluster is known to be in disagreement currently\n\nI think this is just sensible and a natural thing to do, but admit given recent (read: when we did all the rescue restore optimization work) schema optimization work in our fork that this is less of a concern\n\n\ndon't do a schema mutation if it can potentially result in \"split-brain\" (from the schema's point of view) in the future\n\nThe code as written in this PR allows for the case that we 1 out of 3 nodes are online, we push a schema mutation to that node. That node goes down, two other nodes come online, a schema mutation is pushed to those two nodes (whether by us or by another atlasdb client). The original node comes online, the nodes are in disagreement. While cassandra in theory should handle this case fine, the more divergent the schemas get the harder it will be for it to rectify them. Additionally there is the nuance/complexity around each different version of the schema having matching new pieces (like same keyspace/table name), but with a different cf_id. While I believe we've resolved this via deterministic cf_ids its worth pointing out that for that case, we would treat the situation as an outage and require manual intervention. We can prevent all the risks of the \"split-brain\" case here, by ensuring we only apply changes when we believe a majority of nodes are going to receive. From a maintain \"HA\" perspective this should be fine: see my next bullet.\n\n\nschema mutations are HA\n\nWe want to make sure critical path operations in AtlasDb are HA. We believe modifying a schema to be one of those things and thus it should be HA. That being said the rest of the critical path operations in AtlasDb, even when HA, have limitations to their availability. The most obvious of which are basic reads/writes to cassandra: they require quorum. Given the way we deploy cassandra (network topology aware RF=3), at any given moment [in the best case] if we have more than a third of the nodes of the cluster offline we have lost availability and can no longer read/write. Because of this I do not view being able to do a schema mutation where less than 2/3 of the nodes of the cluster are online as necessary.", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438788586", "createdAt": "2020-06-11T13:38:14Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNjM0MA==", "bodyText": "Given my statements above, even if there was a fear that describe_schema_versions() might not return a node that is freshly bootstrapping/about-to-bootstrap (which we only have at most 1 of at a time), we could set the requirement to simple-majority i.e. floor(N/2)+1 rather than quorum (which is actually hard to accurately calculate in terms of raw numbers but is a stricter requirement to meet than simple-majority).", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438806340", "createdAt": "2020-06-11T13:56:54Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODU4Ng=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5MjMyNw==", "bodyText": "Yep, I'll change this to require a simple-majority. I'll push that first, and then look at the docs/reorganisation of the code here.", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438892327", "createdAt": "2020-06-11T15:51:52Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODU4Ng=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0NTM0MQ==", "bodyText": "(Added the docs now.)", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438945341", "createdAt": "2020-06-11T17:18:49Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4ODU4Ng=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzUxNjE3OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo0Mjo1MFrOGidyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjo0NDowMVrOGil6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5Mjg5MQ==", "bodyText": "all of the error message stuff below should talk about the cluster as being in terms of node returned in the describe_schema_versions() call above (regardless of if they're unreachable or not). none of it should use config.servers() as that isn't correct and also just isn't even how the checks of the rest of the method are done anymore.", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438792891", "createdAt": "2020-06-11T13:42:50Z", "author": {"login": "tpetracca"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,\n+            // this existed largely as a defense against performance issues with concurrent schema modifications.\n             versions = client.describe_schema_versions();\n-            if (uniqueSchemaWithQuorumAgreementAndOtherNodesUnreachable(config, versions)) {\n+            if (reachablePartOfClusterHasConsistentSchemaVersions(versions)) {\n                 return;\n             }\n             sleepTime = sleepAndGetNextBackoffTime(sleepTime);\n         } while (System.currentTimeMillis() < start + config.schemaMutationTimeoutMillis());\n \n         StringBuilder schemaVersions = new StringBuilder();\n         for (Entry<String, List<String>> version : versions.entrySet()) {\n-            schemaVersions = addNodeInformation(schemaVersions,\n+            addNodeInformation(schemaVersions,\n                     String.format(\"%nAt schema version %s:\", version.getKey()),\n                     version.getValue());\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkyNTgzNw==", "bodyText": "Yep, now updated to refer to the output returned from the describe_schema_versions call", "url": "https://github.com/palantir/atlasdb/pull/4831#discussion_r438925837", "createdAt": "2020-06-11T16:44:01Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServices.java", "diffHunk": "@@ -88,19 +88,18 @@ static void waitForSchemaVersions(\n         long sleepTime = INITIAL_SLEEP_TIME;\n         Map<String, List<String>> versions;\n         do {\n-            // This only returns the schema versions of nodes that the client knows exist. In particular, if a node we\n-            // shook hands with goes down, it will have schema version UNREACHABLE; however, if we never shook hands\n-            // with a node, there will simply be no entry for it in the map. Hence the check for the number of nodes.\n+            // This may only include some of the nodes if the coordinator hasn't shaken hands with someone; however,\n+            // this existed largely as a defense against performance issues with concurrent schema modifications.\n             versions = client.describe_schema_versions();\n-            if (uniqueSchemaWithQuorumAgreementAndOtherNodesUnreachable(config, versions)) {\n+            if (reachablePartOfClusterHasConsistentSchemaVersions(versions)) {\n                 return;\n             }\n             sleepTime = sleepAndGetNextBackoffTime(sleepTime);\n         } while (System.currentTimeMillis() < start + config.schemaMutationTimeoutMillis());\n \n         StringBuilder schemaVersions = new StringBuilder();\n         for (Entry<String, List<String>> version : versions.entrySet()) {\n-            schemaVersions = addNodeInformation(schemaVersions,\n+            addNodeInformation(schemaVersions,\n                     String.format(\"%nAt schema version %s:\", version.getKey()),\n                     version.getValue());\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5Mjg5MQ=="}, "originalCommit": {"oid": "44cdd512c73db8afebec8b97ae34d14dd4d1fe75"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2936, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}