{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTYyMTIy", "number": 4811, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1Mzo1NlrOEAkkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo0MDo1MVrOEBeN4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDM0NTUzOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchTransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1Mzo1NlrOGb7yyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo0ODo0N1rOGcGLqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NDM5NA==", "bodyText": "we've found extending txn manager to be a bit of a folly in the past. Would much appreciate if this method were not an interface method, or were otherwise on TransactionManager. At a minimum, it means you get to pick if SchemaAwareTransactionManager should implement LockWatchTransactionManager facepalm", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431944394", "createdAt": "2020-05-28T15:53:56Z", "author": {"login": "j-baker"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchTransactionManager.java", "diffHunk": "@@ -16,20 +16,13 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n+import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n \n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n import com.palantir.lock.watch.IdentifiedVersion;\n-import com.palantir.lock.watch.TransactionsLockWatchEvents;\n \n-public interface InternalLockWatchManager extends LockWatchManager {\n-    /**\n-     * Returns a condensed view of new lock watch events since lastKnownVersion for a set of transactions identified by\n-     * their start timestamps.\n-     *\n-     * @param startTimestamps  a set of start timestamps identifying transactions\n-     * @param lastKnownVersion exclusive start version to get events from\n-     */\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> lastKnownVersion);\n+public interface LockWatchTransactionManager extends TransactionManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNDYwMQ==", "bodyText": "Removed", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432114601", "createdAt": "2020-05-28T20:48:47Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchTransactionManager.java", "diffHunk": "@@ -16,20 +16,13 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n+import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n \n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n import com.palantir.lock.watch.IdentifiedVersion;\n-import com.palantir.lock.watch.TransactionsLockWatchEvents;\n \n-public interface InternalLockWatchManager extends LockWatchManager {\n-    /**\n-     * Returns a condensed view of new lock watch events since lastKnownVersion for a set of transactions identified by\n-     * their start timestamps.\n-     *\n-     * @param startTimestamps  a set of start timestamps identifying transactions\n-     * @param lastKnownVersion exclusive start version to get events from\n-     */\n-    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n-            Optional<IdentifiedVersion> lastKnownVersion);\n+public interface LockWatchTransactionManager extends TransactionManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NDM5NA=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDM1NDUzOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1NjowMVrOGb74jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo0OTowMlrOGcGMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NTg3MA==", "bodyText": "yeah, this change can't happen - breaks too much binary backcompat internally", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431945870", "createdAt": "2020-05-28T15:56:01Z", "author": {"login": "j-baker"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -331,6 +333,12 @@ public static TransactionManager createInMemory(Set<Schema> schemas) {\n     @JsonIgnore\n     @Value.Derived\n     public TransactionManager serializable() {\n+        return lockWatch();\n+    }\n+\n+    @JsonIgnore\n+    @Value.Derived\n+    public LockWatchTransactionManager lockWatch() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNDcwNQ==", "bodyText": "Removed", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432114705", "createdAt": "2020-05-28T20:49:02Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -331,6 +333,12 @@ public static TransactionManager createInMemory(Set<Schema> schemas) {\n     @JsonIgnore\n     @Value.Derived\n     public TransactionManager serializable() {\n+        return lockWatch();\n+    }\n+\n+    @JsonIgnore\n+    @Value.Derived\n+    public LockWatchTransactionManager lockWatch() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NTg3MA=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQyMDAyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoxMjowMVrOGb8imQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo0OToxOVrOGcGMoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1NjYzMw==", "bodyText": "you only need the start timestamp from the txn here. You might want to pass that to the precommit condition explicitly as a new (default) method.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431956633", "createdAt": "2020-05-28T16:12:01Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.WatchCommitCondition;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class WatchPreCommitCondition implements PreCommitCondition {\n+\n+    private final LockWatchEventCache cache;\n+    private final WatchCommitCondition watchCommitCondition;\n+    private AtomicReference<Transaction> txn = new AtomicReference<>(null);\n+\n+    public WatchPreCommitCondition(LockWatchEventCache cache, WatchCommitCondition watchCommitCondition) {\n+        this.cache = cache;\n+        this.watchCommitCondition = watchCommitCondition;\n+    }\n+\n+    void initialize(Transaction newTxn) {\n+        Preconditions.checkState(txn.compareAndSet(null, newTxn), \"Already initialized\");\n+    }\n+\n+    @Override\n+    public void throwIfConditionInvalid(long timestamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1OTMyNA==", "bodyText": "like, seems reasonable that we'd have method that initializes with the start timestamp... but fine with this for now.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431959324", "createdAt": "2020-05-28T16:15:14Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.WatchCommitCondition;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class WatchPreCommitCondition implements PreCommitCondition {\n+\n+    private final LockWatchEventCache cache;\n+    private final WatchCommitCondition watchCommitCondition;\n+    private AtomicReference<Transaction> txn = new AtomicReference<>(null);\n+\n+    public WatchPreCommitCondition(LockWatchEventCache cache, WatchCommitCondition watchCommitCondition) {\n+        this.cache = cache;\n+        this.watchCommitCondition = watchCommitCondition;\n+    }\n+\n+    void initialize(Transaction newTxn) {\n+        Preconditions.checkState(txn.compareAndSet(null, newTxn), \"Already initialized\");\n+    }\n+\n+    @Override\n+    public void throwIfConditionInvalid(long timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1NjYzMw=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNDg0OA==", "bodyText": "Added default method to initialize with startTs.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432114848", "createdAt": "2020-05-28T20:49:19Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.WatchCommitCondition;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class WatchPreCommitCondition implements PreCommitCondition {\n+\n+    private final LockWatchEventCache cache;\n+    private final WatchCommitCondition watchCommitCondition;\n+    private AtomicReference<Transaction> txn = new AtomicReference<>(null);\n+\n+    public WatchPreCommitCondition(LockWatchEventCache cache, WatchCommitCondition watchCommitCondition) {\n+        this.cache = cache;\n+        this.watchCommitCondition = watchCommitCondition;\n+    }\n+\n+    void initialize(Transaction newTxn) {\n+        Preconditions.checkState(txn.compareAndSet(null, newTxn), \"Already initialized\");\n+    }\n+\n+    @Override\n+    public void throwIfConditionInvalid(long timestamp) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1NjYzMw=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQ0MzU0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoxNzowMVrOGb8xlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo1MDoxNVrOGcGOhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2MDQ3MQ==", "bodyText": "can we just get rid of the 'CommitUpdate' type? Like, to me there should be no difference between the commit update and the start update.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431960471", "createdAt": "2020-05-28T16:17:01Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.WatchCommitCondition;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class WatchPreCommitCondition implements PreCommitCondition {\n+\n+    private final LockWatchEventCache cache;\n+    private final WatchCommitCondition watchCommitCondition;\n+    private AtomicReference<Transaction> txn = new AtomicReference<>(null);\n+\n+    public WatchPreCommitCondition(LockWatchEventCache cache, WatchCommitCondition watchCommitCondition) {\n+        this.cache = cache;\n+        this.watchCommitCondition = watchCommitCondition;\n+    }\n+\n+    void initialize(Transaction newTxn) {\n+        Preconditions.checkState(txn.compareAndSet(null, newTxn), \"Already initialized\");\n+    }\n+\n+    @Override\n+    public void throwIfConditionInvalid(long timestamp) {\n+        if (timestamp != getTransaction().getTimestamp()) {\n+            CommitUpdate commitUpdate = cache.getCommitUpdate(getTransaction().getTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNTMzNQ==", "bodyText": "I think this was added for ease of use: it gives you the descriptors that had any events, so the cache dedupes everything for you. Could just return raw events if you want.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432115335", "createdAt": "2020-05-28T20:50:15Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPreCommitCondition.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.WatchCommitCondition;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.logsafe.Preconditions;\n+\n+final class WatchPreCommitCondition implements PreCommitCondition {\n+\n+    private final LockWatchEventCache cache;\n+    private final WatchCommitCondition watchCommitCondition;\n+    private AtomicReference<Transaction> txn = new AtomicReference<>(null);\n+\n+    public WatchPreCommitCondition(LockWatchEventCache cache, WatchCommitCondition watchCommitCondition) {\n+        this.cache = cache;\n+        this.watchCommitCondition = watchCommitCondition;\n+    }\n+\n+    void initialize(Transaction newTxn) {\n+        Preconditions.checkState(txn.compareAndSet(null, newTxn), \"Already initialized\");\n+    }\n+\n+    @Override\n+    public void throwIfConditionInvalid(long timestamp) {\n+        if (timestamp != getTransaction().getTimestamp()) {\n+            CommitUpdate commitUpdate = cache.getCommitUpdate(getTransaction().getTimestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2MDQ3MQ=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQ0NjEyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPrecommitCondition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoxNzozNFrOGb8zLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo1MDoyMlrOGcGOvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2MDg3Nw==", "bodyText": "kill?", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431960877", "createdAt": "2020-05-28T16:17:34Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPrecommitCondition.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+public class WatchPrecommitCondition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNTM5MA==", "bodyText": "Gone", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432115390", "createdAt": "2020-05-28T20:50:22Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/WatchPrecommitCondition.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+public class WatchPrecommitCondition {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2MDg3Nw=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQ1MDYwOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CommitUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoxODozN1rOGb81-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo1MDo0M1rOGcGPdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2MTU5NA==", "bodyText": "think this should not exist, rather, this should be implemented at the level of the precommit condition.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431961594", "createdAt": "2020-05-28T16:18:37Z", "author": {"login": "j-baker"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CommitUpdate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface CommitUpdate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNTU3NQ==", "bodyText": "As per previous comment, can remove if you want.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432115575", "createdAt": "2020-05-28T20:50:43Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/CommitUpdate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.lock.LockDescriptor;\n+\n+public interface CommitUpdate {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2MTU5NA=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQ5MDI2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/LockWatchTransactionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoyODozNFrOGb9PbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjozMjo1M1rOGb9Z3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2ODEwOA==", "bodyText": "this API is a bit goofy. The point of a PrecommitCondition is that you should just be able to pass it in, it should be entirely pluggable.\nHere, the reason you need the extra method is because you need to get the start timestamp of the transactions that have been passed in.\nThis would be much easier if we just passed the precommit condition the start timestamp at some point (and it's a default method, so no breaks).", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431968108", "createdAt": "2020-05-28T16:28:34Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/LockWatchTransactionManagerImpl.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.Streams;\n+import com.palantir.atlasdb.keyvalue.api.watch.ImmutableStartTransactionsResponse;\n+import com.palantir.atlasdb.keyvalue.api.watch.LockWatchTransactionManager;\n+import com.palantir.atlasdb.keyvalue.api.watch.StartTransactionRequest;\n+import com.palantir.atlasdb.keyvalue.api.watch.StartTransactionsResponse;\n+import com.palantir.atlasdb.transaction.api.AutoDelegate_TransactionManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionFailedRetriableException;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.atlasdb.transaction.api.TransactionTask;\n+import com.palantir.atlasdb.transaction.impl.ForwardingTransaction;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+\n+public class LockWatchTransactionManagerImpl implements AutoDelegate_TransactionManager, LockWatchTransactionManager {\n+\n+    private final TransactionManager transactionManager;\n+    private final LockWatchEventCache lockWatchEventCache;\n+\n+    public LockWatchTransactionManagerImpl(\n+            TransactionManager transactionManager,\n+            LockWatchEventCache lockWatchEventCache) {\n+        this.transactionManager = transactionManager;\n+        this.lockWatchEventCache = lockWatchEventCache;\n+    }\n+\n+    @Override\n+    public TransactionManager delegate() {\n+        return transactionManager;\n+    }\n+\n+    @Override\n+    public StartTransactionsResponse startTransactions(Optional<IdentifiedVersion> lastKnownVersion,\n+            List<StartTransactionRequest> requests) {\n+        List<CombinedCondition> amendedConditions = requests.stream().map(\n+                request -> new CombinedCondition(request.preCommitCondition(),\n+                        new WatchPreCommitCondition(lockWatchEventCache, request.watchCommitCondition())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDc4MQ==", "bodyText": "like, the rough minimal thing i'm advocating for here is that I should be able to write a\ninterface CacheLocator extends PrecommitCondition {}\n\ninterface CacheFactory {\n    Cache getCache(CacheLocator initializedLocator, Transaction transactionForFallbacks);\n    CacheLocator newLocator();\n}\n\nand then use it like:\n\nCacheLocator locator = cacheFactory.newLocator();\ntxnManager.runWithConditionWithRetry(locator, txn -> {\n    Cache cache = cacheFactory.getCache(locator, txn);\n});\nOf course, the consumer doesn't use this API, but in Atlas it should read like this.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r431970781", "createdAt": "2020-05-28T16:32:53Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/LockWatchTransactionManagerImpl.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.Streams;\n+import com.palantir.atlasdb.keyvalue.api.watch.ImmutableStartTransactionsResponse;\n+import com.palantir.atlasdb.keyvalue.api.watch.LockWatchTransactionManager;\n+import com.palantir.atlasdb.keyvalue.api.watch.StartTransactionRequest;\n+import com.palantir.atlasdb.keyvalue.api.watch.StartTransactionsResponse;\n+import com.palantir.atlasdb.transaction.api.AutoDelegate_TransactionManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionFailedRetriableException;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.atlasdb.transaction.api.TransactionTask;\n+import com.palantir.atlasdb.transaction.impl.ForwardingTransaction;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+\n+public class LockWatchTransactionManagerImpl implements AutoDelegate_TransactionManager, LockWatchTransactionManager {\n+\n+    private final TransactionManager transactionManager;\n+    private final LockWatchEventCache lockWatchEventCache;\n+\n+    public LockWatchTransactionManagerImpl(\n+            TransactionManager transactionManager,\n+            LockWatchEventCache lockWatchEventCache) {\n+        this.transactionManager = transactionManager;\n+        this.lockWatchEventCache = lockWatchEventCache;\n+    }\n+\n+    @Override\n+    public TransactionManager delegate() {\n+        return transactionManager;\n+    }\n+\n+    @Override\n+    public StartTransactionsResponse startTransactions(Optional<IdentifiedVersion> lastKnownVersion,\n+            List<StartTransactionRequest> requests) {\n+        List<CombinedCondition> amendedConditions = requests.stream().map(\n+                request -> new CombinedCondition(request.preCommitCondition(),\n+                        new WatchPreCommitCondition(lockWatchEventCache, request.watchCommitCondition())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2ODEwOA=="}, "originalCommit": {"oid": "10b728e20ccc494f27d5e7deabc1e1c6ef4a4d80"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTM5MTE1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/LockWatchManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo1MTo0NlrOGcGRZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTowNjoyMlrOGcGuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNjA2OA==", "bodyText": "I think I can just make this have a thread that calls this on timelock once every few seconds and not bother with being clever.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432116068", "createdAt": "2020-05-28T20:51:46Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.LockWatchManager;\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.lock.client.NamespacedConjureLockWatchingService;\n+import com.palantir.lock.watch.LockWatchReferences;\n+\n+public final class LockWatchManagerImpl implements LockWatchManager {\n+\n+    private final Set<LockWatchReferences.LockWatchReference> lockWatchReferences = new HashSet<>();\n+    private final NamespacedConjureLockWatchingService lockWatchingService;\n+\n+    public LockWatchManagerImpl(NamespacedConjureLockWatchingService lockWatchingService) {\n+        this.lockWatchingService = lockWatchingService;\n+    }\n+\n+    @Override\n+    public synchronized void registerWatches(Set<LockWatchReferences.LockWatchReference> newLockwatches) {\n+        lockWatchReferences.addAll(newLockwatches);\n+    }\n+\n+    public synchronized void reregisterWatches() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a46ec1f407cd8fc7de7341e639d4c84554e6d1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyMzQ2MA==", "bodyText": "Gonna do it", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r432123460", "createdAt": "2020-05-28T21:06:22Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.watch;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.palantir.atlasdb.keyvalue.api.watch.LockWatchManager;\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.lock.client.NamespacedConjureLockWatchingService;\n+import com.palantir.lock.watch.LockWatchReferences;\n+\n+public final class LockWatchManagerImpl implements LockWatchManager {\n+\n+    private final Set<LockWatchReferences.LockWatchReference> lockWatchReferences = new HashSet<>();\n+    private final NamespacedConjureLockWatchingService lockWatchingService;\n+\n+    public LockWatchManagerImpl(NamespacedConjureLockWatchingService lockWatchingService) {\n+        this.lockWatchingService = lockWatchingService;\n+    }\n+\n+    @Override\n+    public synchronized void registerWatches(Set<LockWatchReferences.LockWatchReference> newLockwatches) {\n+        lockWatchReferences.addAll(newLockwatches);\n+    }\n+\n+    public synchronized void reregisterWatches() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNjA2OA=="}, "originalCommit": {"oid": "16a46ec1f407cd8fc7de7341e639d4c84554e6d1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTUwODQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoxMzo0N1rOGdS7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDoxOToyMFrOGdYtiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MTkyNg==", "bodyText": "Do we need protection from exceptions in remoteTimelockServiceAdapter.close()?", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433371926", "createdAt": "2020-06-01T17:13:47Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1101,8 +1100,12 @@ private static LockAndTimestampServices getLockAndTimestampServices(\n                 .timestamp(new TimelockTimestampServiceAdapter(remoteTimelockServiceAdapter))\n                 .timestampManagement(timestampManagementService)\n                 .timelock(remoteTimelockServiceAdapter)\n-                .lockWatcher(lockWatcher)\n-                .close(remoteTimelockServiceAdapter::close)\n+                .lockWatcher(lockWatchManager)\n+                .eventCache(lockWatchEventCache)\n+                .close(() -> {\n+                    remoteTimelockServiceAdapter.close();\n+                    lockWatchManager.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2Njc2Mw==", "bodyText": "I thought about that, but not many places in the codebase really do this very well, and in general this is a little bit all over the place. e.g. see TransactionManagers#withRefreshingLockService does the exact same thing.\nI fixed it now, but I think this whole class needs a bit of a cleanup wrt. resource handling potentially.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433466763", "createdAt": "2020-06-01T20:19:20Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1101,8 +1100,12 @@ private static LockAndTimestampServices getLockAndTimestampServices(\n                 .timestamp(new TimelockTimestampServiceAdapter(remoteTimelockServiceAdapter))\n                 .timestampManagement(timestampManagementService)\n                 .timelock(remoteTimelockServiceAdapter)\n-                .lockWatcher(lockWatcher)\n-                .close(remoteTimelockServiceAdapter::close)\n+                .lockWatcher(lockWatchManager)\n+                .eventCache(lockWatchEventCache)\n+                .close(() -> {\n+                    remoteTimelockServiceAdapter.close();\n+                    lockWatchManager.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MTkyNg=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU1MDc0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyNjozMFrOGdTVvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDoxOTo0NlrOGdYuYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3ODc1MA==", "bodyText": "nit: typo in arg name (newLockWatches?)", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433378750", "createdAt": "2020-06-01T17:26:30Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.lock.client.NamespacedConjureLockWatchingService;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.logsafe.UnsafeArg;\n+\n+public final class LockWatchManagerImpl extends LockWatchManager implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(LockWatchManagerImpl.class);\n+\n+    private final Set<LockWatchReferences.LockWatchReference> lockWatchReferences = new HashSet<>();\n+    private final LockWatchEventCache lockWatchEventCache;\n+    private final NamespacedConjureLockWatchingService lockWatchingService;\n+    private final ScheduledExecutorService executorService = PTExecutors.newSingleThreadScheduledExecutor();\n+    private final ScheduledFuture<?> refreshTask;\n+\n+    public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n+            NamespacedConjureLockWatchingService lockWatchingService) {\n+        this.lockWatchEventCache = lockWatchEventCache;\n+        this.lockWatchingService = lockWatchingService;\n+        refreshTask = executorService.scheduleWithFixedDelay(this::reregisterWatches, 0, 5,\n+                TimeUnit.SECONDS);\n+    }\n+\n+    CommitUpdate getCommitUpdate(long startTs) {\n+        return lockWatchEventCache.getCommitUpdate(startTs);\n+    }\n+\n+    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> version) {\n+        return lockWatchEventCache.getEventsForTransactions(startTimestamps, version);\n+    }\n+\n+    @Override\n+    public void close() {\n+        refreshTask.cancel(false);\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    public synchronized void registerWatches(Set<LockWatchReferences.LockWatchReference> newLockwatches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2Njk3OQ==", "bodyText": "Fixed", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433466979", "createdAt": "2020-06-01T20:19:46Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.lock.client.NamespacedConjureLockWatchingService;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.logsafe.UnsafeArg;\n+\n+public final class LockWatchManagerImpl extends LockWatchManager implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(LockWatchManagerImpl.class);\n+\n+    private final Set<LockWatchReferences.LockWatchReference> lockWatchReferences = new HashSet<>();\n+    private final LockWatchEventCache lockWatchEventCache;\n+    private final NamespacedConjureLockWatchingService lockWatchingService;\n+    private final ScheduledExecutorService executorService = PTExecutors.newSingleThreadScheduledExecutor();\n+    private final ScheduledFuture<?> refreshTask;\n+\n+    public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n+            NamespacedConjureLockWatchingService lockWatchingService) {\n+        this.lockWatchEventCache = lockWatchEventCache;\n+        this.lockWatchingService = lockWatchingService;\n+        refreshTask = executorService.scheduleWithFixedDelay(this::reregisterWatches, 0, 5,\n+                TimeUnit.SECONDS);\n+    }\n+\n+    CommitUpdate getCommitUpdate(long startTs) {\n+        return lockWatchEventCache.getCommitUpdate(startTs);\n+    }\n+\n+    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> version) {\n+        return lockWatchEventCache.getEventsForTransactions(startTimestamps, version);\n+    }\n+\n+    @Override\n+    public void close() {\n+        refreshTask.cancel(false);\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    public synchronized void registerWatches(Set<LockWatchReferences.LockWatchReference> newLockwatches) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3ODc1MA=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU1NDQ0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzoyNzo0MFrOGdTYOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDoyNTowMlrOGdY4gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3OTM4Nw==", "bodyText": "interesting - I suppose it doesn't matter massively, but was there a reason we went for this as opposed to a concurrent set? Since we only add it should be eventually consistent in either case", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433379387", "createdAt": "2020-06-01T17:27:40Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.lock.client.NamespacedConjureLockWatchingService;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.logsafe.UnsafeArg;\n+\n+public final class LockWatchManagerImpl extends LockWatchManager implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(LockWatchManagerImpl.class);\n+\n+    private final Set<LockWatchReferences.LockWatchReference> lockWatchReferences = new HashSet<>();\n+    private final LockWatchEventCache lockWatchEventCache;\n+    private final NamespacedConjureLockWatchingService lockWatchingService;\n+    private final ScheduledExecutorService executorService = PTExecutors.newSingleThreadScheduledExecutor();\n+    private final ScheduledFuture<?> refreshTask;\n+\n+    public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n+            NamespacedConjureLockWatchingService lockWatchingService) {\n+        this.lockWatchEventCache = lockWatchEventCache;\n+        this.lockWatchingService = lockWatchingService;\n+        refreshTask = executorService.scheduleWithFixedDelay(this::reregisterWatches, 0, 5,\n+                TimeUnit.SECONDS);\n+    }\n+\n+    CommitUpdate getCommitUpdate(long startTs) {\n+        return lockWatchEventCache.getCommitUpdate(startTs);\n+    }\n+\n+    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> version) {\n+        return lockWatchEventCache.getEventsForTransactions(startTimestamps, version);\n+    }\n+\n+    @Override\n+    public void close() {\n+        refreshTask.cancel(false);\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    public synchronized void registerWatches(Set<LockWatchReferences.LockWatchReference> newLockwatches) {\n+        lockWatchReferences.addAll(newLockwatches);\n+    }\n+\n+    private synchronized void reregisterWatches() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2OTU2OQ==", "bodyText": "ah yes, good catch. I didn't consider that this will block calls where we add it, while we're calling timelock.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433469569", "createdAt": "2020-06-01T20:25:02Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchManagerImpl.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.timelock.api.LockWatchRequest;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.lock.client.NamespacedConjureLockWatchingService;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.IdentifiedVersion;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchEvents;\n+import com.palantir.logsafe.UnsafeArg;\n+\n+public final class LockWatchManagerImpl extends LockWatchManager implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(LockWatchManagerImpl.class);\n+\n+    private final Set<LockWatchReferences.LockWatchReference> lockWatchReferences = new HashSet<>();\n+    private final LockWatchEventCache lockWatchEventCache;\n+    private final NamespacedConjureLockWatchingService lockWatchingService;\n+    private final ScheduledExecutorService executorService = PTExecutors.newSingleThreadScheduledExecutor();\n+    private final ScheduledFuture<?> refreshTask;\n+\n+    public LockWatchManagerImpl(LockWatchEventCache lockWatchEventCache,\n+            NamespacedConjureLockWatchingService lockWatchingService) {\n+        this.lockWatchEventCache = lockWatchEventCache;\n+        this.lockWatchingService = lockWatchingService;\n+        refreshTask = executorService.scheduleWithFixedDelay(this::reregisterWatches, 0, 5,\n+                TimeUnit.SECONDS);\n+    }\n+\n+    CommitUpdate getCommitUpdate(long startTs) {\n+        return lockWatchEventCache.getCommitUpdate(startTs);\n+    }\n+\n+    TransactionsLockWatchEvents getEventsForTransactions(Set<Long> startTimestamps,\n+            Optional<IdentifiedVersion> version) {\n+        return lockWatchEventCache.getEventsForTransactions(startTimestamps, version);\n+    }\n+\n+    @Override\n+    public void close() {\n+        refreshTask.cancel(false);\n+        executorService.shutdown();\n+    }\n+\n+    @Override\n+    public synchronized void registerWatches(Set<LockWatchReferences.LockWatchReference> newLockwatches) {\n+        lockWatchReferences.addAll(newLockwatches);\n+    }\n+\n+    private synchronized void reregisterWatches() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3OTM4Nw=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU3NDM2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMzozOVrOGdTk5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDoyNjo1NlrOGdY8SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjYzMQ==", "bodyText": "non-actionable: I guess this is already there so it doesn't really matter, but collecting to a list here is kind of unnecessary", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433382631", "createdAt": "2020-06-01T17:33:39Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -164,38 +161,35 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n             throws E, TransactionFailedRetriableException {\n         checkOpen();\n         try {\n-            List<StartTransactionRequest> request = ImmutableList.of(ImmutableStartTransactionRequest.builder()\n-                            .preCommitCondition(condition)\n-                            .build());\n-\n             OpenTransaction openTransaction =\n-                    runTimed(() -> Iterables.getOnlyElement(startTransactions(request).getTransactions()), \"setupTask\");\n+                    runTimed(() -> Iterables.getOnlyElement(startTransactions(ImmutableList.of(condition))),\n+                            \"setupTask\");\n             return openTransaction.finish(transaction -> task.execute(transaction, condition));\n         } finally {\n             condition.cleanup();\n         }\n     }\n \n     @Override\n-    public StartTransactionsResponse startTransactions(List<StartTransactionRequest> requests) {\n-        if (requests.isEmpty()) {\n-            return new DefaultStartTransactionsResponse(ImmutableList.of());\n+    public List<OpenTransaction> startTransactions(List<? extends PreCommitCondition> conditions) {\n+        if (conditions.isEmpty()) {\n+            return ImmutableList.of();\n         }\n \n         List<StartIdentifiedAtlasDbTransactionResponse> responses =\n-                timelockService.startIdentifiedAtlasDbTransactionBatch(requests.size());\n-        Preconditions.checkState(requests.size() == responses.size(), \"Different number of responses and conditions\");\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n+        Preconditions.checkState(conditions.size() == responses.size(), \"Different number of responses and conditions\");\n         try {\n             long immutableTs = Collections.max(responses.stream()\n                     .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n                     .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ3MDUzNg==", "bodyText": "Fixed", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433470536", "createdAt": "2020-06-01T20:26:56Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -164,38 +161,35 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n             throws E, TransactionFailedRetriableException {\n         checkOpen();\n         try {\n-            List<StartTransactionRequest> request = ImmutableList.of(ImmutableStartTransactionRequest.builder()\n-                            .preCommitCondition(condition)\n-                            .build());\n-\n             OpenTransaction openTransaction =\n-                    runTimed(() -> Iterables.getOnlyElement(startTransactions(request).getTransactions()), \"setupTask\");\n+                    runTimed(() -> Iterables.getOnlyElement(startTransactions(ImmutableList.of(condition))),\n+                            \"setupTask\");\n             return openTransaction.finish(transaction -> task.execute(transaction, condition));\n         } finally {\n             condition.cleanup();\n         }\n     }\n \n     @Override\n-    public StartTransactionsResponse startTransactions(List<StartTransactionRequest> requests) {\n-        if (requests.isEmpty()) {\n-            return new DefaultStartTransactionsResponse(ImmutableList.of());\n+    public List<OpenTransaction> startTransactions(List<? extends PreCommitCondition> conditions) {\n+        if (conditions.isEmpty()) {\n+            return ImmutableList.of();\n         }\n \n         List<StartIdentifiedAtlasDbTransactionResponse> responses =\n-                timelockService.startIdentifiedAtlasDbTransactionBatch(requests.size());\n-        Preconditions.checkState(requests.size() == responses.size(), \"Different number of responses and conditions\");\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n+        Preconditions.checkState(conditions.size() == responses.size(), \"Different number of responses and conditions\");\n         try {\n             long immutableTs = Collections.max(responses.stream()\n                     .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n                     .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjYzMQ=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU4NTQ3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozNzoyM1rOGdTscg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODoxNjozMVrOGdm94g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDU2Mg==", "bodyText": "We're probably going to need to declare a product dependency in the manifest on the first version of timelock-server when getCommitTimestamps was introduced (I doubt that is 0.144.0).", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433384562", "createdAt": "2020-06-01T17:37:23Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -49,6 +51,10 @@ public ConjureGetFreshTimestampsResponse getFreshTimestamps(ConjureGetFreshTimes\n         return conjureTimelockService.getFreshTimestamps(AUTH_HEADER, namespace, request);\n     }\n \n+    public GetCommitTimestampsResponse getCommitTimestamps(GetCommitTimestampsRequest request) {\n+        return conjureTimelockService.getCommitTimestamps(AUTH_HEADER, namespace, request);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMDA2Nw==", "bodyText": "Found it! good catch", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433700067", "createdAt": "2020-06-02T08:16:05Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -49,6 +51,10 @@ public ConjureGetFreshTimestampsResponse getFreshTimestamps(ConjureGetFreshTimes\n         return conjureTimelockService.getFreshTimestamps(AUTH_HEADER, namespace, request);\n     }\n \n+    public GetCommitTimestampsResponse getCommitTimestamps(GetCommitTimestampsRequest request) {\n+        return conjureTimelockService.getCommitTimestamps(AUTH_HEADER, namespace, request);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDU2Mg=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcwMDMyMg==", "bodyText": "I got the version as earliest that had this commit: 69610e0", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433700322", "createdAt": "2020-06-02T08:16:31Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedConjureTimelockService.java", "diffHunk": "@@ -49,6 +51,10 @@ public ConjureGetFreshTimestampsResponse getFreshTimestamps(ConjureGetFreshTimes\n         return conjureTimelockService.getFreshTimestamps(AUTH_HEADER, namespace, request);\n     }\n \n+    public GetCommitTimestampsResponse getCommitTimestamps(GetCommitTimestampsRequest request) {\n+        return conjureTimelockService.getCommitTimestamps(AUTH_HEADER, namespace, request);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDU2Mg=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTYwMDE5OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionUpdate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzo0MjowMlrOGdT2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMzowNlrOGdmf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NzA2MA==", "bodyText": "Could we have some docs to explain exactly what this is? I'm tempted to name this PossibleTransactionUpdate or MaybeUncommittedTransactionUpdate but it does feel like it will make stuff unreadable so wouldn't mind just documenting.\ne.g. This is a record of a transaction that successfully retrieved a commit timestamp, along with the lock token it acquired for its writes. Users MUST NOT assume that this transaction has successfully committed - it may or may not have.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433387060", "createdAt": "2020-06-01T17:42:02Z", "author": {"login": "jeremyk-91"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionUpdate.java", "diffHunk": "@@ -14,11 +14,15 @@\n  * limitations under the License.\n  */\n \n-package com.palantir.atlasdb.transaction.api;\n+package com.palantir.lock.watch;\n \n import org.immutables.value.Value;\n \n+import com.palantir.lock.v2.LockToken;\n+\n @Value.Immutable\n-public interface StartTransactionRequest {\n-    PreCommitCondition preCommitCondition();\n+public interface TransactionUpdate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MjY1NA==", "bodyText": "Really, this is just an internal type for the cache to hold onto (and Jolyon might adjust to fit whatever he needs). But I'm happy to add the docs in the meantime.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433692654", "createdAt": "2020-06-02T08:03:06Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/TransactionUpdate.java", "diffHunk": "@@ -14,11 +14,15 @@\n  * limitations under the License.\n  */\n \n-package com.palantir.atlasdb.transaction.api;\n+package com.palantir.lock.watch;\n \n import org.immutables.value.Value;\n \n+import com.palantir.lock.v2.LockToken;\n+\n @Value.Immutable\n-public interface StartTransactionRequest {\n-    PreCommitCondition preCommitCondition();\n+public interface TransactionUpdate {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NzA2MA=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc5MTA3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/CommitTimestampGetter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo0MDo1MVrOGdVvjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowNzowMVrOGdmoVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxODEyNQ==", "bodyText": "non-actionable: This is a little tricky, but makes sense (the cache updates itself so in the next batch you only ask for the updates from that point onwards).", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433418125", "createdAt": "2020-06-01T18:40:51Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/CommitTimestampGetter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.atlasdb.autobatch.Autobatchers;\n+import com.palantir.atlasdb.autobatch.BatchElement;\n+import com.palantir.atlasdb.autobatch.DisruptorAutobatcher;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class CommitTimestampGetter implements AutoCloseable {\n+    private final DisruptorAutobatcher<Request, Long> autobatcher;\n+\n+    private CommitTimestampGetter(DisruptorAutobatcher<Request, Long> autobatcher) {\n+        this.autobatcher = autobatcher;\n+    }\n+\n+    public static CommitTimestampGetter create(LockLeaseService leaseService, LockWatchEventCache cache) {\n+        DisruptorAutobatcher<Request, Long> autobatcher = Autobatchers\n+                .independent(consumer(leaseService, cache))\n+                .safeLoggablePurpose(\"get-commit-timestamp\")\n+                .build();\n+        return new CommitTimestampGetter(autobatcher);\n+    }\n+\n+    public long getCommitTimestamp(long startTs, LockToken commitLocksToken) {\n+        return AtlasFutures.getUnchecked(autobatcher.apply(ImmutableRequest.builder()\n+                .startTs(startTs)\n+                .commitLocksToken(commitLocksToken)\n+                .build()));\n+    }\n+\n+    @VisibleForTesting\n+    static Consumer<List<BatchElement<Request, Long>>> consumer(LockLeaseService leaseService,\n+            LockWatchEventCache cache) {\n+        return batch -> {\n+            int count = batch.size();\n+            List<Long> commitTimestamps = new ArrayList<>();\n+            while (commitTimestamps.size() < count) {\n+                GetCommitTimestampsResponse response = leaseService.getCommitTimestamps(cache.lastKnownVersion(),\n+                        count - commitTimestamps.size());\n+                commitTimestamps.addAll(process(batch.subList(commitTimestamps.size(), count), response, cache));\n+            }\n+\n+            for (int i = 0; i < count; i++) {\n+                batch.get(i).result().set(commitTimestamps.get(i));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5NDgwNA==", "bodyText": "Yeah, this stitching is annoying, but I believe it's correct.", "url": "https://github.com/palantir/atlasdb/pull/4811#discussion_r433694804", "createdAt": "2020-06-02T08:07:01Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/CommitTimestampGetter.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Streams;\n+import com.palantir.atlasdb.autobatch.Autobatchers;\n+import com.palantir.atlasdb.autobatch.BatchElement;\n+import com.palantir.atlasdb.autobatch.DisruptorAutobatcher;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n+import com.palantir.lock.v2.LockToken;\n+import com.palantir.lock.watch.ImmutableTransactionUpdate;\n+import com.palantir.lock.watch.LockWatchEventCache;\n+import com.palantir.lock.watch.TransactionUpdate;\n+\n+final class CommitTimestampGetter implements AutoCloseable {\n+    private final DisruptorAutobatcher<Request, Long> autobatcher;\n+\n+    private CommitTimestampGetter(DisruptorAutobatcher<Request, Long> autobatcher) {\n+        this.autobatcher = autobatcher;\n+    }\n+\n+    public static CommitTimestampGetter create(LockLeaseService leaseService, LockWatchEventCache cache) {\n+        DisruptorAutobatcher<Request, Long> autobatcher = Autobatchers\n+                .independent(consumer(leaseService, cache))\n+                .safeLoggablePurpose(\"get-commit-timestamp\")\n+                .build();\n+        return new CommitTimestampGetter(autobatcher);\n+    }\n+\n+    public long getCommitTimestamp(long startTs, LockToken commitLocksToken) {\n+        return AtlasFutures.getUnchecked(autobatcher.apply(ImmutableRequest.builder()\n+                .startTs(startTs)\n+                .commitLocksToken(commitLocksToken)\n+                .build()));\n+    }\n+\n+    @VisibleForTesting\n+    static Consumer<List<BatchElement<Request, Long>>> consumer(LockLeaseService leaseService,\n+            LockWatchEventCache cache) {\n+        return batch -> {\n+            int count = batch.size();\n+            List<Long> commitTimestamps = new ArrayList<>();\n+            while (commitTimestamps.size() < count) {\n+                GetCommitTimestampsResponse response = leaseService.getCommitTimestamps(cache.lastKnownVersion(),\n+                        count - commitTimestamps.size());\n+                commitTimestamps.addAll(process(batch.subList(commitTimestamps.size(), count), response, cache));\n+            }\n+\n+            for (int i = 0; i < count; i++) {\n+                batch.get(i).result().set(commitTimestamps.get(i));\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxODEyNQ=="}, "originalCommit": {"oid": "fec920760689dbc3844f49b19bdc0e5f0e30af10"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2912, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}