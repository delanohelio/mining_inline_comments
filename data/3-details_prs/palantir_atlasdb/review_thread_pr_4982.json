{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0ODIwMzc5", "number": 4982, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowOToyNlrOEjiktg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNzoxOFrOEjl57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzAyMDcwOnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-corruption.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowOToyNlrOHR8nng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowOToyNlrOHR8nng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MTAyMg==", "bodyText": "Maybe TimeLock Corruption Notifier?", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488581022", "createdAt": "2020-09-15T11:09:26Z", "author": {"login": "gmaretic"}, "path": "timelock-api/src/main/conjure/timelock-corruption.yml", "diffHunk": "@@ -0,0 +1,12 @@\n+services:\n+  TimeLockCorruptionPinger:\n+    name: TimeLock Corruption Pinger", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzAyMzg2OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxMDoxN1rOHR8pew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxMDoxN1rOHR8pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MTQ5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return !(corruptionDetectors.stream().anyMatch(detector -> detector.hasDetectedCorruption()));\n          \n          \n            \n                    return corruptionDetectors.stream().noneMatch(CorruptionDetector::hasDetectedCorruption);", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488581499", "createdAt": "2020-09-15T11:10:17Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionHealthCheck.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+\n+public class TimeLockCorruptionHealthCheck {\n+    private final List<CorruptionDetector> corruptionDetectors;\n+\n+    public TimeLockCorruptionHealthCheck(List<CorruptionDetector> corruptionDetectors) {\n+        this.corruptionDetectors = corruptionDetectors;\n+    }\n+\n+    public boolean isHealthy() {\n+        return !(corruptionDetectors.stream().anyMatch(detector -> detector.hasDetectedCorruption()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzAzMDg4OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxMjozNFrOHR8t1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxMjozNFrOHR8t1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MjYxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean hasCorruption;\n          \n          \n            \n                private final boolean hasCorruption;", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488582612", "createdAt": "2020-09-15T11:12:34Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionStatus.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+public enum TimeLockCorruptionStatus {\n+    HEALTHY(false),\n+    CORRUPTION(true);\n+\n+    private boolean hasCorruption;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzAzMjM0OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxMzowNVrOHR8uyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxMzowNVrOHR8uyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4Mjg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n          \n          \n            \n                private volatile TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488582856", "createdAt": "2020-09-15T11:13:05Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzA0ODA3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxNzo0MVrOHR84hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxNzo0MVrOHR84hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTM1MQ==", "bodyText": "Depends on what this task exactly does, but would be nice if we could avoid checking every 5 minutes and detect corruption as part of normal operation", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488585351", "createdAt": "2020-09-15T11:17:41Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n+\n+    public static TimeLockLocalCorruptionDetector create(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        TimeLockLocalCorruptionDetector timeLockLocalCorruptionDetector\n+                = new TimeLockLocalCorruptionDetector(corruptionPingers);\n+\n+//        TODO(snanda) - uncomment when TL corruption detection goes live\n+//        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n+        return timeLockLocalCorruptionDetector;\n+    }\n+\n+    private TimeLockLocalCorruptionDetector(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        this.corruptionPingers = corruptionPingers;\n+    }\n+\n+    private void scheduleWithFixedDelay() {\n+        executor.scheduleWithFixedDelay(() -> {\n+                    if (detectedSignsOfCorruption()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzA1MjA1OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxODo0NFrOHR865g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxODo0NFrOHR865g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTk1OA==", "bodyText": "We will retry in 5 minutes I guess, but maybe we should retry sooner here", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488585958", "createdAt": "2020-09-15T11:18:44Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n+\n+    public static TimeLockLocalCorruptionDetector create(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        TimeLockLocalCorruptionDetector timeLockLocalCorruptionDetector\n+                = new TimeLockLocalCorruptionDetector(corruptionPingers);\n+\n+//        TODO(snanda) - uncomment when TL corruption detection goes live\n+//        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n+        return timeLockLocalCorruptionDetector;\n+    }\n+\n+    private TimeLockLocalCorruptionDetector(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        this.corruptionPingers = corruptionPingers;\n+    }\n+\n+    private void scheduleWithFixedDelay() {\n+        executor.scheduleWithFixedDelay(() -> {\n+                    if (detectedSignsOfCorruption()) {\n+                        killTimeLock();\n+                    }\n+                },\n+                TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n+                TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n+                TimeUnit.SECONDS);\n+    }\n+\n+    private void killTimeLock() {\n+        corruptionPingers.forEach(this::reportCorruptionToRemote);\n+        localDetectedCorruption();\n+    }\n+\n+    private void localDetectedCorruption() {\n+        localCorruptionState = TimeLockCorruptionStatus.CORRUPTION;\n+    }\n+\n+    private void reportCorruptionToRemote(TimeLockCorruptionPinger pinger) {\n+        try {\n+            pinger.corruptionDetected(AUTH_HEADER);\n+        } catch (Exception e) {\n+            log.warn(\"Failed to report corruption to remote.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzU2NDg3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNjo1NVrOHSByZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNjo1NVrOHSByZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    corruptionNotifiers.forEach(this::submitTask);\n          \n          \n            \n                    corruptionNotifiers.forEach(this::reportCorruptionToRemote);", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488665703", "createdAt": "2020-09-15T13:26:55Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());\n+        this.corruptionNotifyRetryer = new Retryer<>(StopStrategies.stopAfterAttempt(5),\n+                WaitStrategies.fixedWait(200, TimeUnit.MILLISECONDS),\n+                attempt -> !attempt.hasResult());\n+    }\n+\n+    public void notifyRemoteServersOfCorruption() {\n+        corruptionNotifiers.forEach(this::submitTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzU2NjU0OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNzoxOFrOHSBzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzozMjoxOFrOHSCCLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTk5MA==", "bodyText": "This is a bit too resource intensive now, as we are always creating this executor service, even when no corruption happened (also you forgot to shut it down eventually).\nAlso there is no need to do this asynchronously at this point really, so just run it synchronously", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488665990", "createdAt": "2020-09-15T13:27:18Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2OTc0Mw==", "bodyText": "Ah right, that makes sense.", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488669743", "createdAt": "2020-09-15T13:32:18Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTk5MA=="}, "originalCommit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2566, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}