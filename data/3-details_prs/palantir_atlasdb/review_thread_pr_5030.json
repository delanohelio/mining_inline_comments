{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjc5OTY4", "number": 5030, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyMDoyNFrOEtlcLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDozNToxMVrOEt7pXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjM0Nzk2OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/ServiceDiscoveringDatabaseTimeLockSupplier.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzoyMDoyNFrOHhdUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDoxMzoyOFrOHhjZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTQ1Ng==", "bodyText": "Can we add tests for both these conditions above?", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504845456", "createdAt": "2020-10-14T17:20:24Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/ServiceDiscoveringDatabaseTimeLockSupplier.java", "diffHunk": "@@ -64,10 +68,21 @@ public void close() {\n     }\n \n     public synchronized ManagedTimestampService getManagedTimestampService(DbTimestampCreationSetting setting) {\n+        Preconditions.checkState(\n+                DbTimestampCreationSettings.caseOf(setting)\n+                .multipleSeries((tableReference, series) ->\n+                        tableReference.equals(AtlasDbConstants.DB_TIMELOCK_TIMESTAMP_TABLE))\n+                .otherwise_(false),\n+                \"Attempted to create a managed timestamp service in db timelock that was not the normal db timelock\"\n+                        + \" timestamp table! This is unexpected, and we are prohibiting this creation for safety.\",\n+                SafeArg.of(\"setting\", setting));\n         return timestampServiceFactory.apply(setting);\n     }\n \n-    public synchronized TimestampSeriesProvider getTimestampSeriesProvider() {\n-        return timestampSeriesProvider;\n+    public synchronized TimestampSeriesProvider getTimestampSeriesProvider(TableReference tableReference) {\n+        Preconditions.checkState(tableReference.equals(AtlasDbConstants.DB_TIMELOCK_TIMESTAMP_TABLE),\n+                \"Attempted to create a timestamp series provider in db timelock that was not the normal db timelock\"\n+                        + \" timestamp table! This is unexpected, and we are prohibiting this creation for safety.\");\n+        return timestampSeriesProvider.apply(tableReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0NDQ2Nw==", "bodyText": "Will do!", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504944467", "createdAt": "2020-10-14T20:12:31Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/ServiceDiscoveringDatabaseTimeLockSupplier.java", "diffHunk": "@@ -64,10 +68,21 @@ public void close() {\n     }\n \n     public synchronized ManagedTimestampService getManagedTimestampService(DbTimestampCreationSetting setting) {\n+        Preconditions.checkState(\n+                DbTimestampCreationSettings.caseOf(setting)\n+                .multipleSeries((tableReference, series) ->\n+                        tableReference.equals(AtlasDbConstants.DB_TIMELOCK_TIMESTAMP_TABLE))\n+                .otherwise_(false),\n+                \"Attempted to create a managed timestamp service in db timelock that was not the normal db timelock\"\n+                        + \" timestamp table! This is unexpected, and we are prohibiting this creation for safety.\",\n+                SafeArg.of(\"setting\", setting));\n         return timestampServiceFactory.apply(setting);\n     }\n \n-    public synchronized TimestampSeriesProvider getTimestampSeriesProvider() {\n-        return timestampSeriesProvider;\n+    public synchronized TimestampSeriesProvider getTimestampSeriesProvider(TableReference tableReference) {\n+        Preconditions.checkState(tableReference.equals(AtlasDbConstants.DB_TIMELOCK_TIMESTAMP_TABLE),\n+                \"Attempted to create a timestamp series provider in db timelock that was not the normal db timelock\"\n+                        + \" timestamp table! This is unexpected, and we are prohibiting this creation for safety.\");\n+        return timestampSeriesProvider.apply(tableReference);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTQ1Ng=="}, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0NDk1MQ==", "bodyText": "will add, yeah admittedly the testing of error cases on this pr was a bit weak", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504944951", "createdAt": "2020-10-14T20:13:28Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/ServiceDiscoveringDatabaseTimeLockSupplier.java", "diffHunk": "@@ -64,10 +68,21 @@ public void close() {\n     }\n \n     public synchronized ManagedTimestampService getManagedTimestampService(DbTimestampCreationSetting setting) {\n+        Preconditions.checkState(\n+                DbTimestampCreationSettings.caseOf(setting)\n+                .multipleSeries((tableReference, series) ->\n+                        tableReference.equals(AtlasDbConstants.DB_TIMELOCK_TIMESTAMP_TABLE))\n+                .otherwise_(false),\n+                \"Attempted to create a managed timestamp service in db timelock that was not the normal db timelock\"\n+                        + \" timestamp table! This is unexpected, and we are prohibiting this creation for safety.\",\n+                SafeArg.of(\"setting\", setting));\n         return timestampServiceFactory.apply(setting);\n     }\n \n-    public synchronized TimestampSeriesProvider getTimestampSeriesProvider() {\n-        return timestampSeriesProvider;\n+    public synchronized TimestampSeriesProvider getTimestampSeriesProvider(TableReference tableReference) {\n+        Preconditions.checkState(tableReference.equals(AtlasDbConstants.DB_TIMELOCK_TIMESTAMP_TABLE),\n+                \"Attempted to create a timestamp series provider in db timelock that was not the normal db timelock\"\n+                        + \" timestamp table! This is unexpected, and we are prohibiting this creation for safety.\");\n+        return timestampSeriesProvider.apply(tableReference);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg0NTQ1Ng=="}, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQwNzAzOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequenceTimestampSeriesProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzozNjowNVrOHhd5cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDoxMzoxMFrOHhjYsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NDg5OQ==", "bodyText": "Might be hard to write but would be good to have tests for this.", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504854899", "createdAt": "2020-10-14T17:36:05Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequenceTimestampSeriesProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Set;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeries;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+\n+/**\n+ * Reads all of the series from a timestamp table written to by timestamp bound stores using the\n+ * {@link MultiSequencePhysicalBoundStoreStrategy} strategy.\n+ */\n+public final class MultiSequenceTimestampSeriesProvider implements TimestampSeriesProvider {\n+    private static final Logger log = LoggerFactory.getLogger(MultiSequenceTimestampSeriesProvider.class);\n+\n+    private final ConnectionManager connManager;\n+    private final TableReference timestampTable;\n+\n+    private MultiSequenceTimestampSeriesProvider(ConnectionManager connManager,\n+            TableReference timestampTable) {\n+        this.connManager = connManager;\n+        this.timestampTable = timestampTable;\n+    }\n+\n+    public static TimestampSeriesProvider create(\n+            KeyValueService rawKvs,\n+            TableReference tableReference,\n+            boolean initializeAsync) {\n+        if (initializeAsync) {\n+            log.warn(\"Asynchronous initialization not implemented, will initialize synchronously.\");\n+        }\n+\n+        Preconditions.checkArgument(rawKvs instanceof ConnectionManagerAwareDbKvs,\n+                \"DbAtlasDbFactory expects a raw kvs of type ConnectionManagerAwareDbKvs, found %s\", rawKvs.getClass());\n+        ConnectionManagerAwareDbKvs dbkvs = (ConnectionManagerAwareDbKvs) rawKvs;\n+        return new MultiSequenceTimestampSeriesProvider(dbkvs.getConnectionManager(), tableReference);\n+    }\n+\n+    @Override\n+    public Set<TimestampSeries> getKnownSeries() {\n+        try (Connection connection = connManager.getConnection()) {\n+            String sql = String.format(\"SELECT client FROM %s FOR UPDATE\", timestampTable.getQualifiedName());\n+            QueryRunner runner = new QueryRunner();\n+            return runner.query(connection, sql, rs -> {\n+                ImmutableSet.Builder<TimestampSeries> series = ImmutableSet.builder();\n+                while (rs.next()) {\n+                    series.add(TimestampSeries.of(rs.getString(\"client\")));\n+                }\n+                return series.build();\n+            });\n+        } catch (SQLException e) {\n+            throw PalantirSqlException.create(e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0NDgxOA==", "bodyText": "Yeah, I'm relying a bit strongly on the MultiNodePaxosTimeLockServerIntegrationTest here. I'll see what I can do", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504944818", "createdAt": "2020-10-14T20:13:10Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequenceTimestampSeriesProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Set;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeries;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+\n+/**\n+ * Reads all of the series from a timestamp table written to by timestamp bound stores using the\n+ * {@link MultiSequencePhysicalBoundStoreStrategy} strategy.\n+ */\n+public final class MultiSequenceTimestampSeriesProvider implements TimestampSeriesProvider {\n+    private static final Logger log = LoggerFactory.getLogger(MultiSequenceTimestampSeriesProvider.class);\n+\n+    private final ConnectionManager connManager;\n+    private final TableReference timestampTable;\n+\n+    private MultiSequenceTimestampSeriesProvider(ConnectionManager connManager,\n+            TableReference timestampTable) {\n+        this.connManager = connManager;\n+        this.timestampTable = timestampTable;\n+    }\n+\n+    public static TimestampSeriesProvider create(\n+            KeyValueService rawKvs,\n+            TableReference tableReference,\n+            boolean initializeAsync) {\n+        if (initializeAsync) {\n+            log.warn(\"Asynchronous initialization not implemented, will initialize synchronously.\");\n+        }\n+\n+        Preconditions.checkArgument(rawKvs instanceof ConnectionManagerAwareDbKvs,\n+                \"DbAtlasDbFactory expects a raw kvs of type ConnectionManagerAwareDbKvs, found %s\", rawKvs.getClass());\n+        ConnectionManagerAwareDbKvs dbkvs = (ConnectionManagerAwareDbKvs) rawKvs;\n+        return new MultiSequenceTimestampSeriesProvider(dbkvs.getConnectionManager(), tableReference);\n+    }\n+\n+    @Override\n+    public Set<TimestampSeries> getKnownSeries() {\n+        try (Connection connection = connManager.getConnection()) {\n+            String sql = String.format(\"SELECT client FROM %s FOR UPDATE\", timestampTable.getQualifiedName());\n+            QueryRunner runner = new QueryRunner();\n+            return runner.query(connection, sql, rs -> {\n+                ImmutableSet.Builder<TimestampSeries> series = ImmutableSet.builder();\n+                while (rs.next()) {\n+                    series.add(TimestampSeries.of(rs.getString(\"client\")));\n+                }\n+                return series.build();\n+            });\n+        } catch (SQLException e) {\n+            throw PalantirSqlException.create(e);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg1NDg5OQ=="}, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjQ2NjQ4OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/RelationalDbTimeLockFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNzo1MjoxOFrOHhee6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDoxODoyN1rOHhjjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NDQ4OA==", "bodyText": "Apologies in advance - why is singleSeries needed? As far as I see, dbKvs accepts only multiSeries; otherwise ServiceDiscoveringAtlasSupplier takes Optional creationParameters, so why an assertion that creationParameters should be empty not enough here?", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504864488", "createdAt": "2020-10-14T17:52:18Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/RelationalDbTimeLockFactory.java", "diffHunk": "@@ -59,15 +63,23 @@ public KeyValueService createRawKeyValueService(\n     @Override\n     public ManagedTimestampService createManagedTimestampService(\n             KeyValueService rawKvs,\n-            Optional<DbTimestampCreationSetting> dbTimestampCreationSetting,\n+            DbTimestampCreationSetting dbTimestampCreationSetting,\n             boolean initializeAsync) {\n-        return delegate.createManagedTimestampService(rawKvs, dbTimestampCreationSetting, initializeAsync);\n+        return DbTimestampCreationSettings.caseOf(dbTimestampCreationSetting)\n+                .multipleSeries((un, used) ->\n+                        delegate.createManagedTimestampService(\n+                                rawKvs, Optional.of(dbTimestampCreationSetting), initializeAsync))\n+                .singleSeries(unused -> {\n+                    throw new SafeIllegalStateException(\"DB TimeLock cannot be used with\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0NzUxMQ==", "bodyText": "You're right that we currently call into this method only with multiSeries. DbKVS does accept singleSeries too, though (it has to for large internal product), unless I'm missing something, and I'd want to be resilient to anyone changing this in the future without knowing this.\n... that said, based on this I think we can simplify the design here substantially - because we split DbAtlasDbFactory and RelationalDbTimeLockFactory, we don't actually need the DbTimestampCreationSetting at all I think. Probably not for this PR, and it does not need to be finished this week, but we should get that in before we call this workstream complete.", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r504947511", "createdAt": "2020-10-14T20:18:27Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/RelationalDbTimeLockFactory.java", "diffHunk": "@@ -59,15 +63,23 @@ public KeyValueService createRawKeyValueService(\n     @Override\n     public ManagedTimestampService createManagedTimestampService(\n             KeyValueService rawKvs,\n-            Optional<DbTimestampCreationSetting> dbTimestampCreationSetting,\n+            DbTimestampCreationSetting dbTimestampCreationSetting,\n             boolean initializeAsync) {\n-        return delegate.createManagedTimestampService(rawKvs, dbTimestampCreationSetting, initializeAsync);\n+        return DbTimestampCreationSettings.caseOf(dbTimestampCreationSetting)\n+                .multipleSeries((un, used) ->\n+                        delegate.createManagedTimestampService(\n+                                rawKvs, Optional.of(dbTimestampCreationSetting), initializeAsync))\n+                .singleSeries(unused -> {\n+                    throw new SafeIllegalStateException(\"DB TimeLock cannot be used with\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg2NDQ4OA=="}, "originalCommit": {"oid": "faafc8e388b437e69bf1aca07a67ed20a38406c1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTk4NjIzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/memory/InMemoryDbTimeLockFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDozNToxMVrOHiBgng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDozNToxMVrOHiBgng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzODM2Ng==", "bodyText": "Nice! Thanks for adding the tests", "url": "https://github.com/palantir/atlasdb/pull/5030#discussion_r505438366", "createdAt": "2020-10-15T10:35:11Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/memory/InMemoryDbTimeLockFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.memory;\n+\n+import java.util.Map;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.config.DbTimestampCreationSetting;\n+import com.palantir.atlasdb.config.DbTimestampCreationSettings;\n+import com.palantir.atlasdb.config.LeaderConfig;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeries;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.keyvalue.impl.InMemoryKeyValueService;\n+import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.timestamp.DbTimeLockFactory;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.timestamp.InMemoryTimestampService;\n+import com.palantir.timestamp.ManagedTimestampService;\n+\n+@AutoService(DbTimeLockFactory.class)\n+public class InMemoryDbTimeLockFactory implements DbTimeLockFactory {\n+    private final Map<TimestampSeries, ManagedTimestampService> services = Maps.newHashMap();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "199fc9fd0b017e888e72c8f15ecbd76e3475002f"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2631, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}