{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTQ3NTQ3", "number": 5102, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozMjozOFrOE1tf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDowMTo1N1rOE-Ac9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzU1NDExOnYy", "diffSide": "RIGHT", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozMjozOFrOHuI1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozMjozOFrOHuI1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0MTMxNg==", "bodyText": "I know I don't need so many annotations - will remove when I want to get this in.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518141316", "createdAt": "2020-11-05T15:32:38Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"lock-watch\")\n+public interface EteLockWatchResource {\n+    @POST\n+    @Path(\"start-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjAzODI0OnYy", "diffSide": "RIGHT", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ExposedLockWatchManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo0ODoxOVrOHuzXkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0ODo1OFrOH6_D1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzODE2Mw==", "bodyText": "This class is necessary as we have hidden some of the methods on LockWatchManager to stop the average consumer from using it.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518838163", "createdAt": "2020-11-06T15:48:19Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ExposedLockWatchManager.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class ExposedLockWatchManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjYyOQ==", "bodyText": "Fair enough, this is the same deal as what we have in atlasdb-proxy :)", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531612629", "createdAt": "2020-11-27T13:48:58Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ExposedLockWatchManager.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class ExposedLockWatchManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzODE2Mw=="}, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjA1MDAyOnYy", "diffSide": "RIGHT", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1MToxMVrOHuzevw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1MTozNlrOH6_JAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzOTk5OQ==", "bodyText": "I don't know why, but I kept getting issues where the input table name was \"blah\" instead of blah.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518839999", "createdAt": "2020-11-06T15:51:11Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public LockWatchVersion getVersion(TransactionId transactionId) {\n+        return lockWatchManager\n+                .getUpdateForTransactions(ImmutableSet.of(transactionId.startTs()), Optional.empty())\n+                .startTsToSequence()\n+                .get(transactionId.startTs());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzk1Mg==", "bodyText": "ah, see the comment above - I'm pretty sure this has to do with string encodings.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531613952", "createdAt": "2020-11-27T13:51:36Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public LockWatchVersion getVersion(TransactionId transactionId) {\n+        return lockWatchManager\n+                .getUpdateForTransactions(ImmutableSet.of(transactionId.startTs()), Optional.empty())\n+                .startTsToSequence()\n+                .get(transactionId.startTs());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzOTk5OQ=="}, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjA1MzA2OnYy", "diffSide": "RIGHT", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1MTo1MVrOHuzgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1Mjo0NFrOH6_LWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MDQ3Ng==", "bodyText": "This is necessary as we only want the commit update when we are passed the commit timestamp, not the start.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518840476", "createdAt": "2020-11-06T15:51:51Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");\n+        lockWatchTable = TableReference.create(NAMESPACE, table);\n+        createTable();\n+    }\n+\n+    private void createTable() {\n+        KeyValueService keyValueService = transactionManager.getKeyValueService();\n+        keyValueService.createTable(lockWatchTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n+        transactionManager\n+                .getLockWatchManager()\n+                .registerWatches(ImmutableSet.of(LockWatchReferences.entireTable(lockWatchTable.getQualifiedName())));\n+    }\n+\n+    private Map<Cell, byte[]> getValueMap(Set<String> rows) {\n+        return KeyedStream.of(rows)\n+                .mapKeys(PtBytes::toBytes)\n+                .mapKeys(row -> Cell.create(row, COLUMN))\n+                .map(unused -> VALUE)\n+                .collectToMap();\n+    }\n+\n+    @Value.Immutable\n+    interface TransactionAndCondition {\n+        @Value.Parameter\n+        OpenTransaction transaction();\n+\n+        @Value.Parameter\n+        CommitUpdateCondition condition();\n+\n+        static TransactionAndCondition of(OpenTransaction transaction, CommitUpdateCondition condition) {\n+            return ImmutableTransactionAndCondition.of(transaction, condition);\n+        }\n+    }\n+\n+    class CommitUpdateCondition implements PreCommitCondition {\n+        private final AtomicReference<CommitUpdate> commitUpdate = new AtomicReference<>();\n+        private Optional<Long> startTs = Optional.empty();\n+\n+        CommitUpdateCondition() {}\n+\n+        void setStartTs(long startTs) {\n+            this.startTs = Optional.of(startTs);\n+        }\n+\n+        CommitUpdate getCommitUpdate() {\n+            return commitUpdate.get();\n+        }\n+\n+        @Override\n+        public void throwIfConditionInvalid(long timestamp) {\n+            if (startTs.filter(ts -> ts != timestamp).isPresent()) {\n+                commitUpdate.set(lockWatchManager.getCommitUpdate(startTs.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da6943bde382276356513ef53307a92fe1b90b2"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNDU1NQ==", "bodyText": "I think this might be a bit simpler if we just use ifPresent(...)?", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531614555", "createdAt": "2020-11-27T13:52:44Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");\n+        lockWatchTable = TableReference.create(NAMESPACE, table);\n+        createTable();\n+    }\n+\n+    private void createTable() {\n+        KeyValueService keyValueService = transactionManager.getKeyValueService();\n+        keyValueService.createTable(lockWatchTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n+        transactionManager\n+                .getLockWatchManager()\n+                .registerWatches(ImmutableSet.of(LockWatchReferences.entireTable(lockWatchTable.getQualifiedName())));\n+    }\n+\n+    private Map<Cell, byte[]> getValueMap(Set<String> rows) {\n+        return KeyedStream.of(rows)\n+                .mapKeys(PtBytes::toBytes)\n+                .mapKeys(row -> Cell.create(row, COLUMN))\n+                .map(unused -> VALUE)\n+                .collectToMap();\n+    }\n+\n+    @Value.Immutable\n+    interface TransactionAndCondition {\n+        @Value.Parameter\n+        OpenTransaction transaction();\n+\n+        @Value.Parameter\n+        CommitUpdateCondition condition();\n+\n+        static TransactionAndCondition of(OpenTransaction transaction, CommitUpdateCondition condition) {\n+            return ImmutableTransactionAndCondition.of(transaction, condition);\n+        }\n+    }\n+\n+    class CommitUpdateCondition implements PreCommitCondition {\n+        private final AtomicReference<CommitUpdate> commitUpdate = new AtomicReference<>();\n+        private Optional<Long> startTs = Optional.empty();\n+\n+        CommitUpdateCondition() {}\n+\n+        void setStartTs(long startTs) {\n+            this.startTs = Optional.of(startTs);\n+        }\n+\n+        CommitUpdate getCommitUpdate() {\n+            return commitUpdate.get();\n+        }\n+\n+        @Override\n+        public void throwIfConditionInvalid(long timestamp) {\n+            if (startTs.filter(ts -> ts != timestamp).isPresent()) {\n+                commitUpdate.set(lockWatchManager.getCommitUpdate(startTs.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MDQ3Ng=="}, "originalCommit": {"oid": "5da6943bde382276356513ef53307a92fe1b90b2"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDUwODg0OnYy", "diffSide": "RIGHT", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1MDo0OFrOH6_HYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1MDo0OFrOH6_HYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzUzNg==", "bodyText": "We typically consume TEXT_PLAIN for Strings, not APPLICATION_JSON I think.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531613536", "createdAt": "2020-11-27T13:50:48Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"lock-watch\")\n+public interface EteLockWatchResource {\n+    @POST\n+    @Path(\"start-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    TransactionId startTransaction();\n+\n+    @POST\n+    @Path(\"end-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    Optional<CommitUpdate> endTransaction(TransactionId transactionId);\n+\n+    @POST\n+    @Path(\"write\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    void write(WriteRequest writeRequest);\n+\n+    @POST\n+    @Path(\"get-update\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest);\n+\n+    @POST\n+    @Path(\"set-table\")\n+    @Consumes(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDUzNTgwOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1ODo1NFrOH6_XlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyMTo1OFrOH7B42w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNzY4NA==", "bodyText": "maybe non-actionable: While this is fine, at some point I think this quickly gets unreadable, and maybe I'd prefer something like\nprivate static final Set<String> BANNED_CLIENTS = ImmutableSet.of(\"tl\", \"lw\");\nprivate static final String PATH_REGEX = String.format(\"^(?!((%s)$))[a-zA-Z0-9_-]+$\",\n        BANNED_CLIENTS.stream().collect(Collectors.joining(\"|\")));\nprivate static final Predicate<String> IS_VALID_NAME = Pattern.compile(PATH_REGEX).asPredicate();\n\n(Also, it's kind of funky this isn't named IS_VALID_NAME)", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531617684", "createdAt": "2020-11-27T13:58:54Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java", "diffHunk": "@@ -42,8 +42,10 @@\n     @VisibleForTesting\n     static final String MAX_CLIENTS = \"maxClients\";\n \n-    private static final Predicate<String> isValidName =\n-            Pattern.compile(\"^(?!tl$)[a-zA-Z0-9_-]+$\").asPredicate();\n+    @VisibleForTesting\n+    static final Predicate<String> isValidName =\n+            Pattern.compile(\"^(?!((tl|lw)$))[a-zA-Z0-9_-]+$\").asPredicate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODk3MQ==", "bodyText": "Fixed in this one", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531658971", "createdAt": "2020-11-27T15:21:58Z", "author": {"login": "Jolyon-S"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java", "diffHunk": "@@ -42,8 +42,10 @@\n     @VisibleForTesting\n     static final String MAX_CLIENTS = \"maxClients\";\n \n-    private static final Predicate<String> isValidName =\n-            Pattern.compile(\"^(?!tl$)[a-zA-Z0-9_-]+$\").asPredicate();\n+    @VisibleForTesting\n+    static final Predicate<String> isValidName =\n+            Pattern.compile(\"^(?!((tl|lw)$))[a-zA-Z0-9_-]+$\").asPredicate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNzY4NA=="}, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDUzODIxOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1OTo0MlrOH6_ZGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1OTo0MlrOH6_ZGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxODA3Mg==", "bodyText": "This should have changelog, just for the sake of completeness/defense.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531618072", "createdAt": "2020-11-27T13:59:42Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -25,7 +25,7 @@\n /**\n  * DO NOT add new endpoints in here. Instead, define them as Conjure endpoints.\n  */\n-@Path(\"/{namespace: (?!tl/)[a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!(tl|lw)/)[a-zA-Z0-9_-]+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDU0NTgwOnYy", "diffSide": "RIGHT", "path": "atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDowMTo1N1rOH6_dkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDowMTo1N1rOH6_dkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxOTIxOQ==", "bodyText": "nit: standard in other tests is to replace with _, not X.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");\n          \n          \n            \n                    String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"_\");", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531619219", "createdAt": "2020-11-27T14:01:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.ete;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.AtlasLockDescriptorUtils;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.lock.EteLockWatchResource;\n+import com.palantir.atlasdb.lock.GetLockWatchUpdateRequest;\n+import com.palantir.atlasdb.lock.SimpleEteLockWatchResource;\n+import com.palantir.atlasdb.lock.TransactionId;\n+import com.palantir.atlasdb.lock.WriteRequest;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.CommitUpdate.Visitor;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public final class LockWatchEteTest {\n+    private static final String SEED = \"seed\";\n+    private static final String ROW_1 = row(1);\n+    private static final String ROW_2 = row(2);\n+    private static final String ROW_3 = row(3);\n+\n+    private final EteLockWatchResource lockWatcher = EteSetup.createClientToSingleNode(EteLockWatchResource.class);\n+\n+    private TableReference tableReference;\n+\n+    @Before\n+    public void before() {\n+        String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2488, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}