{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTY5Mjcy", "number": 4896, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1NDowMFrOENuPqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMDo0N1rOEQNFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI0NjE2OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1NDowMFrOGwfMIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjowMDozOFrOGwvL1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg0MQ==", "bodyText": "Why unsafe?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453495841", "createdAt": "2020-07-13T08:54:00Z", "author": {"login": "sudiksha27"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "diffHunk": "@@ -63,18 +64,23 @@ public SingleLeaderLearnerNetworkClient(\n     public void learn(long seq, PaxosValue value) {\n         // broadcast learned value\n         for (final PaxosLearner learner : remoteLearners) {\n-            executors.get(learner).execute(() -> {\n-                try {\n-                    learner.learn(seq, value);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner the value {} at sequence {}\",\n-                            UnsafeArg.of(\"value\", Optional.ofNullable(value.data)\n-                                    .map(bytes -> BaseEncoding.base16().encode(bytes))\n-                                    .orElse(null)),\n-                            SafeArg.of(\"sequence\", seq),\n-                            e);\n-                }\n-            });\n+            try {\n+                executors.get(learner).execute(() -> {\n+                    try {\n+                        learner.learn(seq, value);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner the value {} at sequence {}, after attempting execution.\",\n+                                UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                                SafeArg.of(\"sequence\", seq),\n+                                e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner the value {} at sequence {}, because we could not execute the task.\",\n+                        UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                        SafeArg.of(\"sequence\", seq),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NzkwOQ==", "bodyText": "I followed the other Learner usage. It's true that TimeLock's usage is safe (this value is null in leader election Paxos, and the value of the timestamp bound in timestamp Paxos), but would prefer not to require this offhand.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453757909", "createdAt": "2020-07-13T16:00:38Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "diffHunk": "@@ -63,18 +64,23 @@ public SingleLeaderLearnerNetworkClient(\n     public void learn(long seq, PaxosValue value) {\n         // broadcast learned value\n         for (final PaxosLearner learner : remoteLearners) {\n-            executors.get(learner).execute(() -> {\n-                try {\n-                    learner.learn(seq, value);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner the value {} at sequence {}\",\n-                            UnsafeArg.of(\"value\", Optional.ofNullable(value.data)\n-                                    .map(bytes -> BaseEncoding.base16().encode(bytes))\n-                                    .orElse(null)),\n-                            SafeArg.of(\"sequence\", seq),\n-                            e);\n-                }\n-            });\n+            try {\n+                executors.get(learner).execute(() -> {\n+                    try {\n+                        learner.learn(seq, value);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner the value {} at sequence {}, after attempting execution.\",\n+                                UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                                SafeArg.of(\"sequence\", seq),\n+                                e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner the value {} at sequence {}, because we could not execute the task.\",\n+                        UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                        SafeArg.of(\"sequence\", seq),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg0MQ=="}, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI0ODQzOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1NDozMlrOGwfNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDowMjoyM1rOG0OT_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NjE5MQ==", "bodyText": "When would this happen?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453496191", "createdAt": "2020-07-13T08:54:32Z", "author": {"login": "sudiksha27"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "diffHunk": "@@ -63,18 +64,23 @@ public SingleLeaderLearnerNetworkClient(\n     public void learn(long seq, PaxosValue value) {\n         // broadcast learned value\n         for (final PaxosLearner learner : remoteLearners) {\n-            executors.get(learner).execute(() -> {\n-                try {\n-                    learner.learn(seq, value);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner the value {} at sequence {}\",\n-                            UnsafeArg.of(\"value\", Optional.ofNullable(value.data)\n-                                    .map(bytes -> BaseEncoding.base16().encode(bytes))\n-                                    .orElse(null)),\n-                            SafeArg.of(\"sequence\", seq),\n-                            e);\n-                }\n-            });\n+            try {\n+                executors.get(learner).execute(() -> {\n+                    try {\n+                        learner.learn(seq, value);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner the value {} at sequence {}, after attempting execution.\",\n+                                UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                                SafeArg.of(\"sequence\", seq),\n+                                e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner the value {} at sequence {}, because we could not execute the task.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NzIyOA==", "bodyText": "As below: this happens if the executor has the max number of threads running (e.g. because the calls to that endpoint are slow). Abort policy is standard for executors.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453757228", "createdAt": "2020-07-13T15:59:34Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "diffHunk": "@@ -63,18 +64,23 @@ public SingleLeaderLearnerNetworkClient(\n     public void learn(long seq, PaxosValue value) {\n         // broadcast learned value\n         for (final PaxosLearner learner : remoteLearners) {\n-            executors.get(learner).execute(() -> {\n-                try {\n-                    learner.learn(seq, value);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner the value {} at sequence {}\",\n-                            UnsafeArg.of(\"value\", Optional.ofNullable(value.data)\n-                                    .map(bytes -> BaseEncoding.base16().encode(bytes))\n-                                    .orElse(null)),\n-                            SafeArg.of(\"sequence\", seq),\n-                            e);\n-                }\n-            });\n+            try {\n+                executors.get(learner).execute(() -> {\n+                    try {\n+                        learner.learn(seq, value);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner the value {} at sequence {}, after attempting execution.\",\n+                                UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                                SafeArg.of(\"sequence\", seq),\n+                                e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner the value {} at sequence {}, because we could not execute the task.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NjE5MQ=="}, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxMzYyOQ==", "bodyText": "as an aside, what are your thoughts on making the logging message the same across all instances of this particular exception (as far as this PR goes, at least). It would make analysing issues easier - you could just look for log lines with the same exact message.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457413629", "createdAt": "2020-07-20T14:02:23Z", "author": {"login": "Jolyon-S"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderLearnerNetworkClient.java", "diffHunk": "@@ -63,18 +64,23 @@ public SingleLeaderLearnerNetworkClient(\n     public void learn(long seq, PaxosValue value) {\n         // broadcast learned value\n         for (final PaxosLearner learner : remoteLearners) {\n-            executors.get(learner).execute(() -> {\n-                try {\n-                    learner.learn(seq, value);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner the value {} at sequence {}\",\n-                            UnsafeArg.of(\"value\", Optional.ofNullable(value.data)\n-                                    .map(bytes -> BaseEncoding.base16().encode(bytes))\n-                                    .orElse(null)),\n-                            SafeArg.of(\"sequence\", seq),\n-                            e);\n-                }\n-            });\n+            try {\n+                executors.get(learner).execute(() -> {\n+                    try {\n+                        learner.learn(seq, value);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner the value {} at sequence {}, after attempting execution.\",\n+                                UnsafeArg.of(\"value\", base16EncodePaxosValue(value)),\n+                                SafeArg.of(\"sequence\", seq),\n+                                e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner the value {} at sequence {}, because we could not execute the task.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NjE5MQ=="}, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODM1MDQxOnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOToxODo1MVrOGwgJYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjo0OToyN1rOGwnDvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxMTUyMw==", "bodyText": "How did we compute this?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453511523", "createdAt": "2020-07-13T09:18:51Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n final class TimeLockPaxosExecutors {\n     @VisibleForTesting\n-    static final int MAXIMUM_POOL_SIZE = 100;\n+    static final int MAXIMUM_POOL_SIZE = 256;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyNDc2NQ==", "bodyText": "We did some more digging into the metrics and we are changing the number to 384 after some discussion.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453624765", "createdAt": "2020-07-13T12:49:27Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n final class TimeLockPaxosExecutors {\n     @VisibleForTesting\n-    static final int MAXIMUM_POOL_SIZE = 100;\n+    static final int MAXIMUM_POOL_SIZE = 256;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxMTUyMw=="}, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODgyOTY5OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LearnCoalescingConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTozMTo1M1rOGwkoBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTo1OToyNlrOGwvIzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDkwMg==", "bodyText": "When would this happen?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453584902", "createdAt": "2020-07-13T11:31:53Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LearnCoalescingConsumer.java", "diffHunk": "@@ -38,35 +39,36 @@\n     private static final Logger log = LoggerFactory.getLogger(LearnCoalescingConsumer.class);\n     private static final PaxosResponse SUCCESSFUL_RESPONSE = new PaxosResponseImpl(true);\n \n-    private final BatchPaxosLearner localLearner;\n-    private final List<BatchPaxosLearner> remoteLearners;\n-    private final ExecutorService executor;\n+    private final WithDedicatedExecutor<BatchPaxosLearner> localLearner;\n+    private final List<WithDedicatedExecutor<BatchPaxosLearner>> remoteLearners;\n \n     LearnCoalescingConsumer(\n-            BatchPaxosLearner localLearner,\n-            List<BatchPaxosLearner> remoteLearners,\n-            ExecutorService executor) {\n+            WithDedicatedExecutor<BatchPaxosLearner> localLearner,\n+            List<WithDedicatedExecutor<BatchPaxosLearner>> remoteLearners) {\n         this.localLearner = localLearner;\n         this.remoteLearners = remoteLearners;\n-        this.executor = executor;\n     }\n \n     @Override\n     public Map<Map.Entry<Client, PaxosValue>, PaxosResponse> apply(Set<Map.Entry<Client, PaxosValue>> request) {\n         SetMultimap<Client, PaxosValue> requestAsMultimap = ImmutableSetMultimap.copyOf(request);\n \n-        for (BatchPaxosLearner remoteLearner : remoteLearners) {\n-            executor.execute(() -> {\n-                try {\n-                    remoteLearner.learn(requestAsMultimap);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner.\", e);\n-                }\n-            });\n+        for (WithDedicatedExecutor<BatchPaxosLearner> remoteLearner : remoteLearners) {\n+            try {\n+                remoteLearner.executor().execute(() -> {\n+                    try {\n+                        remoteLearner.service().learn(requestAsMultimap);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner after scheduling the task.\", e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner, because we could not schedule the task at all\", e);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1NzEzNA==", "bodyText": "This happens if the executor has the max number of threads running (e.g. because the calls to that endpoint are slow).", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r453757134", "createdAt": "2020-07-13T15:59:26Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LearnCoalescingConsumer.java", "diffHunk": "@@ -38,35 +39,36 @@\n     private static final Logger log = LoggerFactory.getLogger(LearnCoalescingConsumer.class);\n     private static final PaxosResponse SUCCESSFUL_RESPONSE = new PaxosResponseImpl(true);\n \n-    private final BatchPaxosLearner localLearner;\n-    private final List<BatchPaxosLearner> remoteLearners;\n-    private final ExecutorService executor;\n+    private final WithDedicatedExecutor<BatchPaxosLearner> localLearner;\n+    private final List<WithDedicatedExecutor<BatchPaxosLearner>> remoteLearners;\n \n     LearnCoalescingConsumer(\n-            BatchPaxosLearner localLearner,\n-            List<BatchPaxosLearner> remoteLearners,\n-            ExecutorService executor) {\n+            WithDedicatedExecutor<BatchPaxosLearner> localLearner,\n+            List<WithDedicatedExecutor<BatchPaxosLearner>> remoteLearners) {\n         this.localLearner = localLearner;\n         this.remoteLearners = remoteLearners;\n-        this.executor = executor;\n     }\n \n     @Override\n     public Map<Map.Entry<Client, PaxosValue>, PaxosResponse> apply(Set<Map.Entry<Client, PaxosValue>> request) {\n         SetMultimap<Client, PaxosValue> requestAsMultimap = ImmutableSetMultimap.copyOf(request);\n \n-        for (BatchPaxosLearner remoteLearner : remoteLearners) {\n-            executor.execute(() -> {\n-                try {\n-                    remoteLearner.learn(requestAsMultimap);\n-                } catch (Throwable e) {\n-                    log.warn(\"Failed to teach learner.\", e);\n-                }\n-            });\n+        for (WithDedicatedExecutor<BatchPaxosLearner> remoteLearner : remoteLearners) {\n+            try {\n+                remoteLearner.executor().execute(() -> {\n+                    try {\n+                        remoteLearner.service().learn(requestAsMultimap);\n+                    } catch (Throwable e) {\n+                        log.warn(\"Failed to teach learner after scheduling the task.\", e);\n+                    }\n+                });\n+            } catch (RejectedExecutionException e) {\n+                log.warn(\"Failed to teach learner, because we could not schedule the task at all\", e);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU4NDkwMg=="}, "originalCommit": {"oid": "cb0bbd4ef86e72e07825c33fbf89873f347e3ad9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTk5Njk0OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/SingleLeaderNetworkClientFactories.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODo0OTowNlrOGyhSxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToxNjowMFrOGyv0gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyNzQ2MA==", "bodyText": "nit: This doesn't feel necessary - is there a reason why you can't just pass in local and remote (mapping away the WithExecutor) into the constructor at the end?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r455627460", "createdAt": "2020-07-16T08:49:06Z", "author": {"login": "Jolyon-S"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/SingleLeaderNetworkClientFactories.java", "diffHunk": "@@ -75,17 +78,30 @@\n     @Override\n     public Factory<PaxosLearnerNetworkClient> learner() {\n         return client -> {\n-            List<PaxosLearner> remoteLearners = TimelockPaxosLearnerAdapters\n-                    .create(useCase(), remoteClients(), useBatchedEndpoints(), client);\n+            List<WithDedicatedExecutor<PaxosLearner>> remoteLearners = TimelockPaxosLearnerAdapters\n+                    .create(useCase(), remoteClients(), useBatchedEndpoints(), client)\n+                    .stream()\n+                    .map(withExecutor -> withExecutor.transformService(\n+                            remote -> metrics().instrument(PaxosLearner.class, remote, client)))\n+                    .collect(Collectors.toList());\n             PaxosLearner localLearner = components().learner(client);\n \n-            LocalAndRemotes<PaxosLearner> allLearners = LocalAndRemotes.of(localLearner, remoteLearners)\n-                    .enhanceRemotes(remote -> metrics().instrument(PaxosLearner.class, remote, client));\n+            LocalAndRemotes<PaxosLearner> allLearners = LocalAndRemotes.of(localLearner,\n+                    remoteLearners.stream().map(WithDedicatedExecutor::service).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779963b27bd3967a7e6454389d083744edcb33ed"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg2NTQ3Mg==", "bodyText": "Yep, no reason we couldn't - I guess this must have been more used previously. I've removed it.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r455865472", "createdAt": "2020-07-16T15:16:00Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/SingleLeaderNetworkClientFactories.java", "diffHunk": "@@ -75,17 +78,30 @@\n     @Override\n     public Factory<PaxosLearnerNetworkClient> learner() {\n         return client -> {\n-            List<PaxosLearner> remoteLearners = TimelockPaxosLearnerAdapters\n-                    .create(useCase(), remoteClients(), useBatchedEndpoints(), client);\n+            List<WithDedicatedExecutor<PaxosLearner>> remoteLearners = TimelockPaxosLearnerAdapters\n+                    .create(useCase(), remoteClients(), useBatchedEndpoints(), client)\n+                    .stream()\n+                    .map(withExecutor -> withExecutor.transformService(\n+                            remote -> metrics().instrument(PaxosLearner.class, remote, client)))\n+                    .collect(Collectors.toList());\n             PaxosLearner localLearner = components().learner(client);\n \n-            LocalAndRemotes<PaxosLearner> allLearners = LocalAndRemotes.of(localLearner, remoteLearners)\n-                    .enhanceRemotes(remote -> metrics().instrument(PaxosLearner.class, remote, client));\n+            LocalAndRemotes<PaxosLearner> allLearners = LocalAndRemotes.of(localLearner,\n+                    remoteLearners.stream().map(WithDedicatedExecutor::service).collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyNzQ2MA=="}, "originalCommit": {"oid": "779963b27bd3967a7e6454389d083744edcb33ed"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjAwMDI4OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODo1MDowMFrOGyhU9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjoyNzozM1rOGyoo3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyODAyMg==", "bodyText": "Do we want a comment for this constant so we can understand how we got here in the future?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r455628022", "createdAt": "2020-07-16T08:50:00Z", "author": {"login": "Jolyon-S"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n final class TimeLockPaxosExecutors {\n     @VisibleForTesting\n-    static final int MAXIMUM_POOL_SIZE = 100;\n+    static final int MAXIMUM_POOL_SIZE = 384;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779963b27bd3967a7e6454389d083744edcb33ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0Nzc2Mw==", "bodyText": "Yep. This was basically derived from looking at the spikes on internal metrics platform, and was selected to permit most instances where a spike in shared executor tasks was serviced and the system recovered afterward (the idea being that the pool being full effectively acts as a QoS mechanism against the bad node).", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r455747763", "createdAt": "2020-07-16T12:27:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n final class TimeLockPaxosExecutors {\n     @VisibleForTesting\n-    static final int MAXIMUM_POOL_SIZE = 100;\n+    static final int MAXIMUM_POOL_SIZE = 384;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyODAyMg=="}, "originalCommit": {"oid": "779963b27bd3967a7e6454389d083744edcb33ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc0NzgwNw==", "bodyText": "I'll add a comment.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r455747807", "createdAt": "2020-07-16T12:27:33Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -27,7 +27,7 @@\n \n final class TimeLockPaxosExecutors {\n     @VisibleForTesting\n-    static final int MAXIMUM_POOL_SIZE = 100;\n+    static final int MAXIMUM_POOL_SIZE = 384;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyODAyMg=="}, "originalCommit": {"oid": "779963b27bd3967a7e6454389d083744edcb33ed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODU1MTIxOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/AutobatchingPaxosLearnerNetworkClientFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo1ODoxOFrOGzfhXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyNzo1MVrOG0E74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NzAwNQ==", "bodyText": "Sorry I missed in this before, why not use WithDedicatedExecutor.convert(learners.all())?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r456647005", "createdAt": "2020-07-17T19:58:18Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/AutobatchingPaxosLearnerNetworkClientFactory.java", "diffHunk": "@@ -52,20 +55,37 @@ private AutobatchingPaxosLearnerNetworkClientFactory(\n         this.getLearnedValuesSince = getLearnedValuesSince;\n     }\n \n-    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+    public static AutobatchingPaxosLearnerNetworkClientFactory createForTests(\n             LocalAndRemotes<BatchPaxosLearner> learners,\n-            ExecutorService executor,\n+            ExecutorService executorService,\n+            int quorumSize) {\n+        return create(\n+                learners.map(batchPaxosLearner -> WithDedicatedExecutor.of(batchPaxosLearner, executorService)),\n+                quorumSize);\n+    }\n+\n+    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+            LocalAndRemotes<WithDedicatedExecutor<BatchPaxosLearner>> learners,\n             int quorumSize) {\n         DisruptorAutobatcher<Map.Entry<Client, PaxosValue>, PaxosResponse> learn =\n-                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes(), executor))\n+                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes()))\n                         .safeLoggablePurpose(\"batch-paxos-learner.learn\")\n                         .build();\n \n+        Map<BatchPaxosLearner, ExecutorService> executors = KeyedStream.of(learners.all())\n+                .map(WithDedicatedExecutor::executor)\n+                .mapKeys(WithDedicatedExecutor::service)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6abae6a0370eb3acb4478d3f505e77e334d10ac9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2MDAwMw==", "bodyText": "No worries: I forgot that was a thing", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457260003", "createdAt": "2020-07-20T10:27:51Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/AutobatchingPaxosLearnerNetworkClientFactory.java", "diffHunk": "@@ -52,20 +55,37 @@ private AutobatchingPaxosLearnerNetworkClientFactory(\n         this.getLearnedValuesSince = getLearnedValuesSince;\n     }\n \n-    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+    public static AutobatchingPaxosLearnerNetworkClientFactory createForTests(\n             LocalAndRemotes<BatchPaxosLearner> learners,\n-            ExecutorService executor,\n+            ExecutorService executorService,\n+            int quorumSize) {\n+        return create(\n+                learners.map(batchPaxosLearner -> WithDedicatedExecutor.of(batchPaxosLearner, executorService)),\n+                quorumSize);\n+    }\n+\n+    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+            LocalAndRemotes<WithDedicatedExecutor<BatchPaxosLearner>> learners,\n             int quorumSize) {\n         DisruptorAutobatcher<Map.Entry<Client, PaxosValue>, PaxosResponse> learn =\n-                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes(), executor))\n+                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes()))\n                         .safeLoggablePurpose(\"batch-paxos-learner.learn\")\n                         .build();\n \n+        Map<BatchPaxosLearner, ExecutorService> executors = KeyedStream.of(learners.all())\n+                .map(WithDedicatedExecutor::executor)\n+                .mapKeys(WithDedicatedExecutor::service)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NzAwNQ=="}, "originalCommit": {"oid": "6abae6a0370eb3acb4478d3f505e77e334d10ac9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODU1NTQxOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/AutobatchingPaxosLearnerNetworkClientFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo1OTo1OFrOGzfkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyODowNVrOG0E8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0Nzc0NA==", "bodyText": "Use copy of keyset from executors?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r456647744", "createdAt": "2020-07-17T19:59:58Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/AutobatchingPaxosLearnerNetworkClientFactory.java", "diffHunk": "@@ -52,20 +55,37 @@ private AutobatchingPaxosLearnerNetworkClientFactory(\n         this.getLearnedValuesSince = getLearnedValuesSince;\n     }\n \n-    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+    public static AutobatchingPaxosLearnerNetworkClientFactory createForTests(\n             LocalAndRemotes<BatchPaxosLearner> learners,\n-            ExecutorService executor,\n+            ExecutorService executorService,\n+            int quorumSize) {\n+        return create(\n+                learners.map(batchPaxosLearner -> WithDedicatedExecutor.of(batchPaxosLearner, executorService)),\n+                quorumSize);\n+    }\n+\n+    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+            LocalAndRemotes<WithDedicatedExecutor<BatchPaxosLearner>> learners,\n             int quorumSize) {\n         DisruptorAutobatcher<Map.Entry<Client, PaxosValue>, PaxosResponse> learn =\n-                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes(), executor))\n+                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes()))\n                         .safeLoggablePurpose(\"batch-paxos-learner.learn\")\n                         .build();\n \n+        Map<BatchPaxosLearner, ExecutorService> executors = KeyedStream.of(learners.all())\n+                .map(WithDedicatedExecutor::executor)\n+                .mapKeys(WithDedicatedExecutor::service)\n+                .collectToMap();\n+        List<BatchPaxosLearner> remotes = learners.all()\n+                .stream()\n+                .map(WithDedicatedExecutor::service)\n+                .collect(Collectors.toList());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6abae6a0370eb3acb4478d3f505e77e334d10ac9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2MDE2Ng==", "bodyText": "Needs a list, but good point - I changed to ImmutableList.copyOf(executors.keySet())", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457260166", "createdAt": "2020-07-20T10:28:05Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/AutobatchingPaxosLearnerNetworkClientFactory.java", "diffHunk": "@@ -52,20 +55,37 @@ private AutobatchingPaxosLearnerNetworkClientFactory(\n         this.getLearnedValuesSince = getLearnedValuesSince;\n     }\n \n-    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+    public static AutobatchingPaxosLearnerNetworkClientFactory createForTests(\n             LocalAndRemotes<BatchPaxosLearner> learners,\n-            ExecutorService executor,\n+            ExecutorService executorService,\n+            int quorumSize) {\n+        return create(\n+                learners.map(batchPaxosLearner -> WithDedicatedExecutor.of(batchPaxosLearner, executorService)),\n+                quorumSize);\n+    }\n+\n+    public static AutobatchingPaxosLearnerNetworkClientFactory create(\n+            LocalAndRemotes<WithDedicatedExecutor<BatchPaxosLearner>> learners,\n             int quorumSize) {\n         DisruptorAutobatcher<Map.Entry<Client, PaxosValue>, PaxosResponse> learn =\n-                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes(), executor))\n+                Autobatchers.coalescing(new LearnCoalescingConsumer(learners.local(), learners.remotes()))\n                         .safeLoggablePurpose(\"batch-paxos-learner.learn\")\n                         .build();\n \n+        Map<BatchPaxosLearner, ExecutorService> executors = KeyedStream.of(learners.all())\n+                .map(WithDedicatedExecutor::executor)\n+                .mapKeys(WithDedicatedExecutor::service)\n+                .collectToMap();\n+        List<BatchPaxosLearner> remotes = learners.all()\n+                .stream()\n+                .map(WithDedicatedExecutor::service)\n+                .collect(Collectors.toList());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0Nzc0NA=="}, "originalCommit": {"oid": "6abae6a0370eb3acb4478d3f505e77e334d10ac9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDIyMDk3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderPinger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDowMzoxMlrOG0OXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyMzoyN1rOG0Pf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNDQyOQ==", "bodyText": "nit: while this follows the above, normal usage is e instead of ex, including in other places in this PR.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457414429", "createdAt": "2020-07-20T14:03:12Z", "author": {"login": "Jolyon-S"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderPinger.java", "diffHunk": "@@ -72,15 +73,17 @@ public LeaderPingResult pingLeaderWithUuid(UUID uuid) {\n         MultiplexingCompletionService<LeaderPingerContext<PingableLeader>, Boolean> multiplexingCompletionService\n                 = MultiplexingCompletionService.create(leaderPingExecutors);\n \n-        multiplexingCompletionService.submit(leader, () -> leader.pinger().ping());\n-\n         try {\n+            multiplexingCompletionService.submit(leader, () -> leader.pinger().ping());\n             Future<Map.Entry<LeaderPingerContext<PingableLeader>, Boolean>> pingFuture = multiplexingCompletionService\n                     .poll(leaderPingResponseWait.toMillis(), TimeUnit.MILLISECONDS);\n             return getLeaderPingResult(uuid, pingFuture);\n         } catch (InterruptedException ex) {\n             Thread.currentThread().interrupt();\n             return LeaderPingResults.pingCallFailure(ex);\n+        } catch (RejectedExecutionException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2d7440dacf29193b740cb4b7ba06214adcdeb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMzA1Mg==", "bodyText": "Yeah, I just copied the above. I'll change both.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457433052", "createdAt": "2020-07-20T14:23:27Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SingleLeaderPinger.java", "diffHunk": "@@ -72,15 +73,17 @@ public LeaderPingResult pingLeaderWithUuid(UUID uuid) {\n         MultiplexingCompletionService<LeaderPingerContext<PingableLeader>, Boolean> multiplexingCompletionService\n                 = MultiplexingCompletionService.create(leaderPingExecutors);\n \n-        multiplexingCompletionService.submit(leader, () -> leader.pinger().ping());\n-\n         try {\n+            multiplexingCompletionService.submit(leader, () -> leader.pinger().ping());\n             Future<Map.Entry<LeaderPingerContext<PingableLeader>, Boolean>> pingFuture = multiplexingCompletionService\n                     .poll(leaderPingResponseWait.toMillis(), TimeUnit.MILLISECONDS);\n             return getLeaderPingResult(uuid, pingFuture);\n         } catch (InterruptedException ex) {\n             Thread.currentThread().interrupt();\n             return LeaderPingResults.pingCallFailure(ex);\n+        } catch (RejectedExecutionException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNDQyOQ=="}, "originalCommit": {"oid": "ddd2d7440dacf29193b740cb4b7ba06214adcdeb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDI3MDY1OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/LockCreator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoxMDo0N1rOG0OzrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozMDo1NVrOG0P8ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTc0MA==", "bodyText": "A quick search across Atlas shows this is the last SharedExecutor (at least by name). Presumably we're good to leave this one in?", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457421740", "createdAt": "2020-07-20T14:10:47Z", "author": {"login": "Jolyon-S"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/LockCreator.java", "diffHunk": "@@ -31,8 +31,7 @@\n     private final Supplier<TimeLockRuntimeConfiguration> runtime;\n     private final long blockingTimeoutMs;\n     private final Semaphore sharedThreadPool;\n-    private final ExecutorService sharedExecutor = PTExecutors\n-            .newCachedThreadPool(LockServiceImpl.class.getName());\n+    private final ExecutorService sharedExecutor = PTExecutors.newCachedThreadPool(LockServiceImpl.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd2d7440dacf29193b740cb4b7ba06214adcdeb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMjgxMA==", "bodyText": "Yes - this executor pertains to the reaper that collects unrefreshed tokens, and so is bounded by the number of clients.", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457432810", "createdAt": "2020-07-20T14:23:13Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/LockCreator.java", "diffHunk": "@@ -31,8 +31,7 @@\n     private final Supplier<TimeLockRuntimeConfiguration> runtime;\n     private final long blockingTimeoutMs;\n     private final Semaphore sharedThreadPool;\n-    private final ExecutorService sharedExecutor = PTExecutors\n-            .newCachedThreadPool(LockServiceImpl.class.getName());\n+    private final ExecutorService sharedExecutor = PTExecutors.newCachedThreadPool(LockServiceImpl.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTc0MA=="}, "originalCommit": {"oid": "ddd2d7440dacf29193b740cb4b7ba06214adcdeb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0MDQ0Mg==", "bodyText": "Just wanted to sanity check. Thanks!", "url": "https://github.com/palantir/atlasdb/pull/4896#discussion_r457440442", "createdAt": "2020-07-20T14:30:55Z", "author": {"login": "Jolyon-S"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/LockCreator.java", "diffHunk": "@@ -31,8 +31,7 @@\n     private final Supplier<TimeLockRuntimeConfiguration> runtime;\n     private final long blockingTimeoutMs;\n     private final Semaphore sharedThreadPool;\n-    private final ExecutorService sharedExecutor = PTExecutors\n-            .newCachedThreadPool(LockServiceImpl.class.getName());\n+    private final ExecutorService sharedExecutor = PTExecutors.newCachedThreadPool(LockServiceImpl.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMTc0MA=="}, "originalCommit": {"oid": "ddd2d7440dacf29193b740cb4b7ba06214adcdeb"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2724, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}