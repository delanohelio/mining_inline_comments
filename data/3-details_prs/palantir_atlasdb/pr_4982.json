{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0ODIwMzc5", "number": 4982, "title": "[Part 1] | TimeLock shoots itself", "bodyText": "Goals (and why):\nSkeleton for TimeLock shooting itself if theres are signs of corruption.\nImplementation Description (bullets):\n\n\nCorruption detecting thread on local that kills itself and communicates to peers upon detecting TL corruption\n\n\nAdd corruption pinger so TL can flag detection of corruption to its peers.\n\n\nTesting (What was existing testing like?  What have you done to improve it?):\nN/A\nConcerns (what feedback would you like?):\n\nDoes the design seem reasonable?\n\nWhere should we start reviewing?:\nTimeLockLocalCorruptionDetector.java\nPriority (whenever / two weeks / yesterday):\nMonday EOD would be great.", "createdAt": "2020-09-11T08:43:53Z", "url": "https://github.com/palantir/atlasdb/pull/4982", "merged": true, "mergeCommit": {"oid": "3520a5affb635d2e856241aa529338562c234190"}, "closed": true, "closedAt": "2020-09-15T13:57:59Z", "author": {"login": "sudiksha27"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHxMiigH2gAyNDg0ODIwMzc5OmUwN2I5Yjk0Y2FjYTAzN2ZhMzM0MjUzYmQ2ZmYxMzNmNjk5ZjcyZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJIF4UgFqTQ4ODcwMjQwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e07b9b94caca037fa334253bd6ff133f699f72e7", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/e07b9b94caca037fa334253bd6ff133f699f72e7", "committedDate": "2020-09-11T08:33:45Z", "message": "TimeLock corruption pingers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d78ed07f04634f96c6d6fa1911a920d02b3d468", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/2d78ed07f04634f96c6d6fa1911a920d02b3d468", "committedDate": "2020-09-11T08:51:59Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d91e82e6c27d1cd405ff18d46b2c4afd70e839", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/84d91e82e6c27d1cd405ff18d46b2c4afd70e839", "committedDate": "2020-09-13T21:25:23Z", "message": "Redesign"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933", "committedDate": "2020-09-14T20:29:52Z", "message": "Refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NTY2MDk1", "url": "https://github.com/palantir/atlasdb/pull/4982#pullrequestreview-488566095", "createdAt": "2020-09-15T11:02:00Z", "commit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTowOToyNlrOHR8nng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToxODo0NFrOHR865g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MTAyMg==", "bodyText": "Maybe TimeLock Corruption Notifier?", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488581022", "createdAt": "2020-09-15T11:09:26Z", "author": {"login": "gmaretic"}, "path": "timelock-api/src/main/conjure/timelock-corruption.yml", "diffHunk": "@@ -0,0 +1,12 @@\n+services:\n+  TimeLockCorruptionPinger:\n+    name: TimeLock Corruption Pinger", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MTQ5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return !(corruptionDetectors.stream().anyMatch(detector -> detector.hasDetectedCorruption()));\n          \n          \n            \n                    return corruptionDetectors.stream().noneMatch(CorruptionDetector::hasDetectedCorruption);", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488581499", "createdAt": "2020-09-15T11:10:17Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionHealthCheck.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+\n+public class TimeLockCorruptionHealthCheck {\n+    private final List<CorruptionDetector> corruptionDetectors;\n+\n+    public TimeLockCorruptionHealthCheck(List<CorruptionDetector> corruptionDetectors) {\n+        this.corruptionDetectors = corruptionDetectors;\n+    }\n+\n+    public boolean isHealthy() {\n+        return !(corruptionDetectors.stream().anyMatch(detector -> detector.hasDetectedCorruption()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4MjYxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean hasCorruption;\n          \n          \n            \n                private final boolean hasCorruption;", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488582612", "createdAt": "2020-09-15T11:12:34Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockCorruptionStatus.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+public enum TimeLockCorruptionStatus {\n+    HEALTHY(false),\n+    CORRUPTION(true);\n+\n+    private boolean hasCorruption;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4Mjg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n          \n          \n            \n                private volatile TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488582856", "createdAt": "2020-09-15T11:13:05Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTM1MQ==", "bodyText": "Depends on what this task exactly does, but would be nice if we could avoid checking every 5 minutes and detect corruption as part of normal operation", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488585351", "createdAt": "2020-09-15T11:17:41Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n+\n+    public static TimeLockLocalCorruptionDetector create(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        TimeLockLocalCorruptionDetector timeLockLocalCorruptionDetector\n+                = new TimeLockLocalCorruptionDetector(corruptionPingers);\n+\n+//        TODO(snanda) - uncomment when TL corruption detection goes live\n+//        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n+        return timeLockLocalCorruptionDetector;\n+    }\n+\n+    private TimeLockLocalCorruptionDetector(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        this.corruptionPingers = corruptionPingers;\n+    }\n+\n+    private void scheduleWithFixedDelay() {\n+        executor.scheduleWithFixedDelay(() -> {\n+                    if (detectedSignsOfCorruption()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU4NTk1OA==", "bodyText": "We will retry in 5 minutes I guess, but maybe we should retry sooner here", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488585958", "createdAt": "2020-09-15T11:18:44Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/TimeLockLocalCorruptionDetector.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.timelock.corruption.TimeLockCorruptionPinger;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class TimeLockLocalCorruptionDetector implements CorruptionDetector {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockLocalCorruptionDetector.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private static final Duration TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL = Duration.ofMinutes(5);\n+    private static final String CORRUPTION_DETECTOR_THREAD_PREFIX = \"timelock-corruption-detector\";\n+\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+            new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+    private final List<TimeLockCorruptionPinger> corruptionPingers;\n+\n+    private TimeLockCorruptionStatus localCorruptionState = TimeLockCorruptionStatus.HEALTHY;\n+\n+    public static TimeLockLocalCorruptionDetector create(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        TimeLockLocalCorruptionDetector timeLockLocalCorruptionDetector\n+                = new TimeLockLocalCorruptionDetector(corruptionPingers);\n+\n+//        TODO(snanda) - uncomment when TL corruption detection goes live\n+//        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n+        return timeLockLocalCorruptionDetector;\n+    }\n+\n+    private TimeLockLocalCorruptionDetector(List<TimeLockCorruptionPinger> corruptionPingers) {\n+        this.corruptionPingers = corruptionPingers;\n+    }\n+\n+    private void scheduleWithFixedDelay() {\n+        executor.scheduleWithFixedDelay(() -> {\n+                    if (detectedSignsOfCorruption()) {\n+                        killTimeLock();\n+                    }\n+                },\n+                TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n+                TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n+                TimeUnit.SECONDS);\n+    }\n+\n+    private void killTimeLock() {\n+        corruptionPingers.forEach(this::reportCorruptionToRemote);\n+        localDetectedCorruption();\n+    }\n+\n+    private void localDetectedCorruption() {\n+        localCorruptionState = TimeLockCorruptionStatus.CORRUPTION;\n+    }\n+\n+    private void reportCorruptionToRemote(TimeLockCorruptionPinger pinger) {\n+        try {\n+            pinger.corruptionDetected(AUTH_HEADER);\n+        } catch (Exception e) {\n+            log.warn(\"Failed to report corruption to remote.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e1fdb0d3bb0b0423000cc3b23773e9e1c31933"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d6ff4abf1ee82a3a2b99ea3835f08964acba89", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/35d6ff4abf1ee82a3a2b99ea3835f08964acba89", "committedDate": "2020-09-15T12:38:56Z", "message": "Address comments - 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285139c428f6e70f057608e4ba33069d43fc02eb", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/285139c428f6e70f057608e4ba33069d43fc02eb", "committedDate": "2020-09-15T12:56:32Z", "message": "Parallel notification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/8d5f6eeee769214e9dc3fe3853c4abc280cb5d11", "committedDate": "2020-09-15T12:59:54Z", "message": "Volatile state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjgwNDQ5", "url": "https://github.com/palantir/atlasdb/pull/4982#pullrequestreview-488680449", "createdAt": "2020-09-15T13:26:54Z", "commit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNjo1NVrOHSByZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoyNzoxOFrOHSBzhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    corruptionNotifiers.forEach(this::submitTask);\n          \n          \n            \n                    corruptionNotifiers.forEach(this::reportCorruptionToRemote);", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488665703", "createdAt": "2020-09-15T13:26:55Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());\n+        this.corruptionNotifyRetryer = new Retryer<>(StopStrategies.stopAfterAttempt(5),\n+                WaitStrategies.fixedWait(200, TimeUnit.MILLISECONDS),\n+                attempt -> !attempt.hasResult());\n+    }\n+\n+    public void notifyRemoteServersOfCorruption() {\n+        corruptionNotifiers.forEach(this::submitTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY2NTk5MA==", "bodyText": "This is a bit too resource intensive now, as we are always creating this executor service, even when no corruption happened (also you forgot to shut it down eventually).\nAlso there is no need to do this asynchronously at this point really, so just run it synchronously", "url": "https://github.com/palantir/atlasdb/pull/4982#discussion_r488665990", "createdAt": "2020-09-15T13:27:18Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/LocalCorruptionHandler.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.StopStrategies;\n+import com.github.rholder.retry.WaitStrategies;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.corruption.TimeLockCorruptionNotifier;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class LocalCorruptionHandler {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            LocalCorruptionHandler.class);\n+\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    private final List<TimeLockCorruptionNotifier> corruptionNotifiers;\n+    private final Retryer<Void> corruptionNotifyRetryer;\n+    private final ExecutorService executorService;\n+\n+    public LocalCorruptionHandler(\n+            List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.corruptionNotifiers = corruptionNotifiers;\n+        this.executorService = PTExecutors.newFixedThreadPool(corruptionNotifiers.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5f6eeee769214e9dc3fe3853c4abc280cb5d11"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72465a9fdefb5abb5895cbb08109708933fcc5cb", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/72465a9fdefb5abb5895cbb08109708933fcc5cb", "committedDate": "2020-09-15T13:30:08Z", "message": "Revert \"Parallel notification\"\n\nThis reverts commit 285139c428f6e70f057608e4ba33069d43fc02eb."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e537c2696c30eb6cf532f356364f02de88e7c6e", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/2e537c2696c30eb6cf532f356364f02de88e7c6e", "committedDate": "2020-09-15T13:44:47Z", "message": "Do not kill"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzAyNDA2", "url": "https://github.com/palantir/atlasdb/pull/4982#pullrequestreview-488702406", "createdAt": "2020-09-15T13:48:13Z", "commit": {"oid": "2e537c2696c30eb6cf532f356364f02de88e7c6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2570, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}