{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjYzOTcz", "number": 4836, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzozNTowMFrOEF8LmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNDoxNlrOEF94tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjY0MzQ0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzozNTowMFrOGkbllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo1MDoyMVrOGkfH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1MzkwOQ==", "bodyText": "Why did we switch to counter?", "url": "https://github.com/palantir/atlasdb/pull/4836#discussion_r440853909", "createdAt": "2020-06-16T13:35:00Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2234,7 +2234,7 @@ private String getStartTimestampAsClientDescription(TransactionConfig currentTra\n             logLargeNumberOfTransactions(tableRef, gets);\n         }\n \n-        getHistogram(AtlasDbMetricNames.NUMBER_OF_TRANSACTIONS_READ_FROM_DB, tableRef).update(gets.size());\n+        getCounter(AtlasDbMetricNames.NUMBER_OF_TRANSACTIONS_READ_FROM_DB, tableRef).inc(gets.size());\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef637fd3c57b1f3304333b1c52895dc488a9f5c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkxMTg0NA==", "bodyText": "Good catch! This was supposed to be in #4838, not here. I'll remove this", "url": "https://github.com/palantir/atlasdb/pull/4836#discussion_r440911844", "createdAt": "2020-06-16T14:50:21Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2234,7 +2234,7 @@ private String getStartTimestampAsClientDescription(TransactionConfig currentTra\n             logLargeNumberOfTransactions(tableRef, gets);\n         }\n \n-        getHistogram(AtlasDbMetricNames.NUMBER_OF_TRANSACTIONS_READ_FROM_DB, tableRef).update(gets.size());\n+        getCounter(AtlasDbMetricNames.NUMBER_OF_TRANSACTIONS_READ_FROM_DB, tableRef).inc(gets.size());\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1MzkwOQ=="}, "originalCommit": {"oid": "bef637fd3c57b1f3304333b1c52895dc488a9f5c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjkyMjc5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNDoxNlrOGkeXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNDoxNlrOGkeXew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg5OTQ1MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/4836#discussion_r440899451", "createdAt": "2020-06-16T14:34:16Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -76,49 +100,65 @@ private static long getMillisForTimestampBoundedAtOneWeek(KeyValueService kvs, l\n     }\n \n     public void updateEnqueuedWrites(ShardAndStrategy shardStrategy, long writes) {\n-        getMetrics(shardStrategy).updateEnqueuedWrites(writes);\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateEnqueuedWrites(writes));\n     }\n \n-    public void updateEntriesRead(ShardAndStrategy shardStrategy, long writes) {\n-        getMetrics(shardStrategy).updateEntriesRead(writes);\n+    public void updateEntriesRead(ShardAndStrategy shardStrategy, long reads) {\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateEntriesRead(reads));\n     }\n \n     public void updateNumberOfTombstones(ShardAndStrategy shardStrategy, long tombstones) {\n-        getMetrics(shardStrategy).updateNumberOfTombstones(tombstones);\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateNumberOfTombstones(tombstones));\n     }\n \n     public void updateAbortedWritesDeleted(ShardAndStrategy shardStrategy, long deletes) {\n-        getMetrics(shardStrategy).updateAbortedWritesDeleted(deletes);\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateAbortedWritesDeleted(deletes));\n     }\n \n     public void updateSweepTimestamp(ShardAndStrategy shardStrategy, long value) {\n-        getMetrics(shardStrategy).updateSweepTimestamp(value);\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateSweepTimestamp(value));\n     }\n \n     public void updateProgressForShard(ShardAndStrategy shardStrategy, long lastSweptTs) {\n-        getMetrics(shardStrategy).updateProgressForShard(shardStrategy.shard(), lastSweptTs);\n+        updateMetricsIfPresent(\n+                shardStrategy, metrics -> metrics.updateProgressForShard(shardStrategy.shard(), lastSweptTs));\n     }\n \n     public void registerOccurrenceOf(ShardAndStrategy shardStrategy, SweepOutcome outcome) {\n-        registerOccurrenceOf(shardStrategy.strategy(), outcome);\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.registerOccurrenceOf(outcome));\n     }\n \n     public void registerOccurrenceOf(SweeperStrategy strategy, SweepOutcome outcome) {\n-        getMetrics(strategy).registerOccurrenceOf(outcome);\n+        updateMetricsIfPresent(strategy, metrics -> metrics.registerOccurrenceOf(outcome));\n     }\n \n     public void registerEntriesReadInBatch(ShardAndStrategy shardStrategy, long batchSize) {\n-        getMetrics(shardStrategy).registerEntriesReadInBatch(batchSize);\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.registerEntriesReadInBatch(batchSize));\n     }\n \n-    private MetricsForStrategy getMetrics(ShardAndStrategy shardStrategy) {\n-        return getMetrics(shardStrategy.strategy());\n+    private void updateMetricsIfPresent(ShardAndStrategy shardStrategy, Consumer<MetricsForStrategy> update) {\n+        updateMetricsIfPresent(shardStrategy.strategy(), update);\n+    }\n+\n+    private void updateMetricsIfPresent(SweeperStrategy strategy, Consumer<MetricsForStrategy> update) {\n+        Optional.ofNullable(getMetrics(strategy)).ifPresent(update);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef637fd3c57b1f3304333b1c52895dc488a9f5c"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2947, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}