{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTMwMDQw", "number": 5011, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODo1M1rOEpdXJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowNDoyMlrOEpdv5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4MTM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODo1M1rOHbIxrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODo1M1rOHbIxrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzM5MA==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498217390", "createdAt": "2020-10-01T12:48:53Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -72,32 +62,39 @@ public static InDbTimestampBoundStore create(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n             String tablePrefixString) {\n-        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(\n-                connManager,\n-                timestampTable,\n-                tablePrefixString);\n+        return createWithStrategy(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString));\n+    }\n \n-        inDbTimestampBoundStore.init();\n+    public static InDbTimestampBoundStore createForMultiSeries(\n+            ConnectionManager connManager,\n+            TableReference timestampTable,\n+            String series) {\n+        return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n+    }\n \n+    private static InDbTimestampBoundStore createWithStrategy(ConnectionManager connManager,\n+            PhysicalBoundStoreStrategy strategy) {\n+        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(connManager, strategy);\n+        inDbTimestampBoundStore.init();\n         return inDbTimestampBoundStore;\n     }\n \n-    private InDbTimestampBoundStore(ConnectionManager connManager, TableReference timestampTable, String tablePrefix) {\n+    private InDbTimestampBoundStore(ConnectionManager connManager,\n+            PhysicalBoundStoreStrategy physicalBoundStoreStrategy) {\n         this.connManager = Preconditions.checkNotNull(connManager, \"connectionManager is required\");\n-        this.timestampTable = Preconditions.checkNotNull(timestampTable, \"timestampTable is required\");\n-        this.tablePrefix = tablePrefix;\n+        this.physicalBoundStoreStrategy = physicalBoundStoreStrategy;\n     }\n \n     private void init() {\n         try (Connection conn = connManager.getConnection()) {\n-            createTimestampTable(conn);\n+            physicalBoundStoreStrategy.createTimestampTable(conn, this::getDbType);\n         } catch (SQLException error) {\n             throw PalantirSqlException.create(error);\n         }\n     }\n \n     private interface Operation {\n-        long run(Connection connection, @Nullable Long oldLimit) throws SQLException;\n+        long run(Connection connection, OptionalLong oldLimit) throws SQLException;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTEwOTcwOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1NTo0MlrOHbJCyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyNjo1N1rOHbUO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMTc3MQ==", "bodyText": "nit: this is not being used anymore?", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498221771", "createdAt": "2020-10-01T12:55:42Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+\n+public class LegacyPhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(LegacyPhysicalBoundStoreStrategy.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTExOA==", "bodyText": "Doh! Yeah, this went away since I extracted this before factoring out the createTimestampTable() stuff. Removed", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498405118", "createdAt": "2020-10-01T17:26:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+\n+public class LegacyPhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(LegacyPhysicalBoundStoreStrategy.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMTc3MQ=="}, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTExODYyOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1Nzo1MFrOHbJIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1Nzo1MFrOHbJIZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzIwNA==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498223204", "createdAt": "2020-10-01T12:57:50Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.nexus.db.DBType;\n+\n+public class MultiSequencePhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(MultiSequencePhysicalBoundStoreStrategy.class);\n+\n+    private final TableReference timestampTable;\n+    private final String series;\n+\n+    public MultiSequencePhysicalBoundStoreStrategy(TableReference timestampTable, String series) {\n+        this.timestampTable = timestampTable;\n+        this.series = series;\n+    }\n+\n+    @Override\n+    public void createTimestampTable(Connection connection, Function<Connection, DBType> dbTypeExtractor)\n+            throws SQLException {\n+        PhysicalBoundStoreDatabaseUtils.createTimestampTable(\n+                connection,\n+                dbTypeExtractor,\n+                ImmutableCreateTimestampTableQueries.builder().postgresQuery(\n+                        String.format(\"CREATE TABLE IF NOT EXISTS %s (\"\n+                                        + \" client VARCHAR(2000) NOT NULL,\"\n+                                        + \" last_allocated int8 NOT NULL,\"\n+                                        + \" PRIMARY KEY (client))\",\n+                                timestampTable.getQualifiedName()))\n+                .oracleQuery(\n+                        String.format(\"CREATE TABLE %s (\"\n+                                        + \" client VARCHAR(2000) NOT NULL,\"\n+                                        + \" last_allocated NUMBER(38) NOT NULL,\"\n+                                        + \" CONSTRAINT %s_pk PRIMARY KEY (client))\",\n+                                timestampTable.getQualifiedName(),\n+                                timestampTable.getQualifiedName()))\n+                .build());\n+    }\n+\n+    @Override\n+    public OptionalLong readLimit(Connection connection) throws SQLException {\n+        String sql = String.format(\"SELECT last_allocated FROM %s WHERE client = ? FOR UPDATE\",\n+                timestampTable.getQualifiedName());\n+        QueryRunner run = new QueryRunner();\n+        return run.query(connection, sql, PhysicalBoundStoreDatabaseUtils::getLastAllocatedColumn, series);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTEzODc5OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowMjo1MVrOHbJU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyOToyNVrOHbUUgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjQwMQ==", "bodyText": "I see we're removing the option of providing tablePrefix for multi series, which should be fine. Maybe we should should use Client rather than String for type checking?", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498226401", "createdAt": "2020-10-01T13:02:51Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -72,32 +62,39 @@ public static InDbTimestampBoundStore create(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n             String tablePrefixString) {\n-        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(\n-                connManager,\n-                timestampTable,\n-                tablePrefixString);\n+        return createWithStrategy(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString));\n+    }\n \n-        inDbTimestampBoundStore.init();\n+    public static InDbTimestampBoundStore createForMultiSeries(\n+            ConnectionManager connManager,\n+            TableReference timestampTable,\n+            String series) {\n+        return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjUzMA==", "bodyText": "Ah. We can't use Client, because that's a part of leader-election-api and this is in atlasdb-dbkvs. However, I agree that having a string wrapper type is a good suggestion, I'll add one.", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498406530", "createdAt": "2020-10-01T17:29:25Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -72,32 +62,39 @@ public static InDbTimestampBoundStore create(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n             String tablePrefixString) {\n-        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(\n-                connManager,\n-                timestampTable,\n-                tablePrefixString);\n+        return createWithStrategy(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString));\n+    }\n \n-        inDbTimestampBoundStore.init();\n+    public static InDbTimestampBoundStore createForMultiSeries(\n+            ConnectionManager connManager,\n+            TableReference timestampTable,\n+            String series) {\n+        return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjQwMQ=="}, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTEzOTg5OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowMzoxMVrOHbJVoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowMzoxMVrOHbJVoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjU5Mw==", "bodyText": "Same as above.", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498226593", "createdAt": "2020-10-01T13:03:11Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.nexus.db.DBType;\n+\n+public class MultiSequencePhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(MultiSequencePhysicalBoundStoreStrategy.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTE0NDcxOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzowNDoyMlrOHbJYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyODozMVrOHbUShw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNzM2NA==", "bodyText": "Maybe add a comment that pg query to create table already accommodates this check?", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498227364", "createdAt": "2020-10-01T13:04:22Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.OracleErrorConstants;\n+import com.palantir.nexus.db.DBType;\n+\n+public final class PhysicalBoundStoreDatabaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PhysicalBoundStoreDatabaseUtils.class);\n+\n+    private PhysicalBoundStoreDatabaseUtils() {\n+        // utilities\n+    }\n+\n+    public static void createTimestampTable(Connection connection,\n+            Function<Connection, DBType> dbTypeExtractor,\n+            CreateTimestampTableQueries queries) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (dbTypeExtractor.apply(connection).equals(DBType.ORACLE)) {\n+                createTimestampTableIgnoringAlreadyExistsError(statement, queries.oracleQuery());\n+            } else {\n+                statement.execute(queries.postgresQuery());\n+            }\n+        }\n+    }\n+\n+    private static void createTimestampTableIgnoringAlreadyExistsError(\n+            Statement statement, String oracleQuery) throws SQLException {\n+        try {\n+            statement.execute(oracleQuery);\n+        } catch (SQLException e) {\n+            if (!e.getMessage().contains(OracleErrorConstants.ORACLE_ALREADY_EXISTS_ERROR)) {\n+                log.error(\"Error occurred creating the Oracle timestamp table\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjAyMw==", "bodyText": "Alright, added a comment below this if-block. I think it makes sense actually, since it looks a bit like a bug at first that you don't throw the exception in that case.", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498406023", "createdAt": "2020-10-01T17:28:31Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.OracleErrorConstants;\n+import com.palantir.nexus.db.DBType;\n+\n+public final class PhysicalBoundStoreDatabaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PhysicalBoundStoreDatabaseUtils.class);\n+\n+    private PhysicalBoundStoreDatabaseUtils() {\n+        // utilities\n+    }\n+\n+    public static void createTimestampTable(Connection connection,\n+            Function<Connection, DBType> dbTypeExtractor,\n+            CreateTimestampTableQueries queries) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (dbTypeExtractor.apply(connection).equals(DBType.ORACLE)) {\n+                createTimestampTableIgnoringAlreadyExistsError(statement, queries.oracleQuery());\n+            } else {\n+                statement.execute(queries.postgresQuery());\n+            }\n+        }\n+    }\n+\n+    private static void createTimestampTableIgnoringAlreadyExistsError(\n+            Statement statement, String oracleQuery) throws SQLException {\n+        try {\n+            statement.execute(oracleQuery);\n+        } catch (SQLException e) {\n+            if (!e.getMessage().contains(OracleErrorConstants.ORACLE_ALREADY_EXISTS_ERROR)) {\n+                log.error(\"Error occurred creating the Oracle timestamp table\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNzM2NA=="}, "originalCommit": {"oid": "70b87434c3c58e1938baadd30e39d934b1582894"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2599, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}