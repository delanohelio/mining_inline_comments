{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjgyODg4", "number": 4620, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyMDo1OVrODkNo4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyMDo1OVrODkNo4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk4Nzg0OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AsyncRetrier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyMDo1OVrOFwaRng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo0MjozMFrOFwa79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNjQ2Mg==", "bodyText": "This if statement feels a bit odd: it exits when the predicate is satisfied (which makes sense), but also when you run out of retries. However, running out of retries will return the result even though it doesn't satisfy the predicate - meaning the name of the method retryUntilSatisfied is a little misleading, as it can return a result when the predicate is not satisfied. I think this is a bit misleading.", "url": "https://github.com/palantir/atlasdb/pull/4620#discussion_r386306462", "createdAt": "2020-03-02T10:20:59Z", "author": {"login": "Jolyon-S"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AsyncRetrier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.proxy;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.common.util.concurrent.ListeningScheduledExecutorService;\n+\n+/**\n+ * Class that uses ListenableFuture primitives to provide a simple delay-retry loop. Should be kept very simple.\n+ */\n+final class AsyncRetrier<T> {\n+    private final int maxAttempts;\n+    private final Duration delayBetweenAttempts;\n+    private final ListeningScheduledExecutorService schedulingExecutor;\n+    private final ListeningExecutorService executionExecutor;\n+    private final Predicate<T> predicate;\n+\n+    AsyncRetrier(\n+            int maxAttempts,\n+            Duration delayBetweenAttempts,\n+            ListeningScheduledExecutorService schedulingExecutor,\n+            ListeningExecutorService executionExecutor,\n+            Predicate<T> predicate) {\n+        this.maxAttempts = maxAttempts;\n+        this.delayBetweenAttempts = delayBetweenAttempts;\n+        this.schedulingExecutor = schedulingExecutor;\n+        this.executionExecutor = executionExecutor;\n+        this.predicate = predicate;\n+    }\n+\n+    public ListenableFuture<T> retryUntilSatistfied(Supplier<ListenableFuture<T>> supplier) {\n+        return retryUntilSatistfied(supplier, maxAttempts);\n+    }\n+\n+    private ListenableFuture<T> retryUntilSatistfied(Supplier<ListenableFuture<T>> supplier, int retriesRemaining) {\n+        return Futures.transformAsync(Futures.submitAsync(supplier::get, executionExecutor),\n+                result -> {\n+                    int newRetriesRemaining = retriesRemaining - 1;\n+                    if (predicate.test(result) || newRetriesRemaining == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf3719ee0cdd3d058b828c6bf78f3c649d4dfc6d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNzMwMg==", "bodyText": "Renamed to execute()", "url": "https://github.com/palantir/atlasdb/pull/4620#discussion_r386317302", "createdAt": "2020-03-02T10:42:30Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AsyncRetrier.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader.proxy;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.ListeningExecutorService;\n+import com.google.common.util.concurrent.ListeningScheduledExecutorService;\n+\n+/**\n+ * Class that uses ListenableFuture primitives to provide a simple delay-retry loop. Should be kept very simple.\n+ */\n+final class AsyncRetrier<T> {\n+    private final int maxAttempts;\n+    private final Duration delayBetweenAttempts;\n+    private final ListeningScheduledExecutorService schedulingExecutor;\n+    private final ListeningExecutorService executionExecutor;\n+    private final Predicate<T> predicate;\n+\n+    AsyncRetrier(\n+            int maxAttempts,\n+            Duration delayBetweenAttempts,\n+            ListeningScheduledExecutorService schedulingExecutor,\n+            ListeningExecutorService executionExecutor,\n+            Predicate<T> predicate) {\n+        this.maxAttempts = maxAttempts;\n+        this.delayBetweenAttempts = delayBetweenAttempts;\n+        this.schedulingExecutor = schedulingExecutor;\n+        this.executionExecutor = executionExecutor;\n+        this.predicate = predicate;\n+    }\n+\n+    public ListenableFuture<T> retryUntilSatistfied(Supplier<ListenableFuture<T>> supplier) {\n+        return retryUntilSatistfied(supplier, maxAttempts);\n+    }\n+\n+    private ListenableFuture<T> retryUntilSatistfied(Supplier<ListenableFuture<T>> supplier, int retriesRemaining) {\n+        return Futures.transformAsync(Futures.submitAsync(supplier::get, executionExecutor),\n+                result -> {\n+                    int newRetriesRemaining = retriesRemaining - 1;\n+                    if (predicate.test(result) || newRetriesRemaining == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNjQ2Mg=="}, "originalCommit": {"oid": "bf3719ee0cdd3d058b828c6bf78f3c649d4dfc6d"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2357, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}