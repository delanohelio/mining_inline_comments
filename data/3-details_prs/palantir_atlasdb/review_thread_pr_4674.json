{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDg3MDY0", "number": 4674, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo0NzowM1rODrzqVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MzoxN1rODrzztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjYxNzgyOnYy", "diffSide": "RIGHT", "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo0NzowM1rOF8XrtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo0NTozMFrOF8dLBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NjkwMA==", "bodyText": "Does this need to be volatile? Specifically I'm thinking of a race condition where one thread assigns runningSpan, but another cancels the future and runs the listener: thread 2 won't see thread 1's write. Maybe this is ok if GC is sufficient to clean out 'leaked' spans", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398846900", "createdAt": "2020-03-26T19:47:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -98,19 +106,60 @@ public void close() {\n \n     private static final class DefaultBatchElement<T, R> implements BatchElement<T, R> {\n         private T argument;\n-        private SettableFuture<R> result;\n+        private DisruptorFuture<R> result;\n \n         @Override\n         public T argument() {\n             return argument;\n         }\n \n         @Override\n-        public SettableFuture<R> result() {\n+        public DisruptorFuture<R> result() {\n             return result;\n         }\n     }\n \n+    public static final class DisruptorFuture<R> extends AbstractFuture<R> {\n+\n+        private final DetachedSpan parent;\n+        private final DetachedSpan waitingSpan;\n+\n+        @Nullable\n+        private DetachedSpan runningSpan = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjgzNw==", "bodyText": "nah, this is only updated in the disruptor thread, so it's safe, see the TracingEventHandler.", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398936837", "createdAt": "2020-03-26T22:45:30Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -98,19 +106,60 @@ public void close() {\n \n     private static final class DefaultBatchElement<T, R> implements BatchElement<T, R> {\n         private T argument;\n-        private SettableFuture<R> result;\n+        private DisruptorFuture<R> result;\n \n         @Override\n         public T argument() {\n             return argument;\n         }\n \n         @Override\n-        public SettableFuture<R> result() {\n+        public DisruptorFuture<R> result() {\n             return result;\n         }\n     }\n \n+    public static final class DisruptorFuture<R> extends AbstractFuture<R> {\n+\n+        private final DetachedSpan parent;\n+        private final DetachedSpan waitingSpan;\n+\n+        @Nullable\n+        private DetachedSpan runningSpan = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NjkwMA=="}, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjYzMDQ4OnYy", "diffSide": "LEFT", "path": "atlasdb-autobatch/src/test/java/com/palantir/atlasdb/autobatch/TracingEventHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo0OTo1MFrOF8XzyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo0OTo1MFrOF8XzyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0ODk2OQ==", "bodyText": "nicely done", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398848969", "createdAt": "2020-03-26T19:49:50Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-autobatch/src/test/java/com/palantir/atlasdb/autobatch/TracingEventHandlerTest.java", "diffHunk": "@@ -16,107 +16,66 @@\n \n package com.palantir.atlasdb.autobatch;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.verify;\n-\n-import java.util.List;\n-\n import org.junit.Rule;\n import org.junit.Test;\n-import org.junit.rules.ExternalResource;\n import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n \n-import com.google.common.collect.Lists;\n-import com.google.common.util.concurrent.SettableFuture;\n import com.lmax.disruptor.EventHandler;\n-import com.palantir.tracing.Observability;\n-import com.palantir.tracing.Tracer;\n-import com.palantir.tracing.api.Span;\n+import com.palantir.atlasdb.autobatch.DisruptorAutobatcher.DisruptorFuture;\n+import com.palantir.tracing.RenderTracingRule;\n+import com.palantir.tracing.Tracers;\n \n @RunWith(MockitoJUnitRunner.class)\n public class TracingEventHandlerTest {\n \n     @Rule\n-    public TraceCapturingRule traceRule = new TraceCapturingRule();\n-\n-    @Mock\n-    private EventHandler<BatchElement<Integer, Long>> delegate;\n-    private static final TestBatchElement ELEMENT = new TestBatchElement();\n-\n-    @Test\n-    public void nonFlushesDoNotHaveTraces() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjY0MTgwOnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4674.v2.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MzoxN1rOF8X69g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MzoxN1rOF8X69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MDgwNg==", "bodyText": "nit: I'd word this a bit more directly towards how users will consume the tracking.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              description: Disruptor Autobatchers now has a special future that allows it track\n          \n          \n            \n                the different phases of the batching process.\n          \n          \n            \n              description: Disruptor Autobatchers now trace their calls. Time spent waiting for the\n          \n          \n            \n                batch to start and for the batch to be processed are also tracked in child spans.", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398850806", "createdAt": "2020-03-26T19:53:17Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4674.v2.yml", "diffHunk": "@@ -0,0 +1,6 @@\n+type: improvement\n+improvement:\n+  description: Disruptor Autobatchers now has a special future that allows it track\n+    the different phases of the batching process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3005, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}