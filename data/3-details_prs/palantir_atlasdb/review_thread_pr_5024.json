{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODA5NzEw", "number": 5024, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODozMTo1NFrOEs7Taw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozMTozN1rOEtZgxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQ0NDI3OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODozMTo1NFrOHgbb9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyMzozMVrOHgh3mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NjAwNA==", "bodyText": "There is some code duplication here, but I don't know if we want to clean that up in this PR or at all.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503766004", "createdAt": "2020-10-13T08:31:54Z", "author": {"login": "sudiksha27"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.net.InetSocketAddress;\n+import java.sql.Connection;\n+import java.util.concurrent.Callable;\n+\n+import org.awaitility.Awaitility;\n+import org.awaitility.Duration;\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.DbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutableDbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutablePostgresDdlConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.conjure.java.api.config.service.HumanReadableDuration;\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.configuration.ShutdownStrategy;\n+import com.palantir.docker.compose.connection.Container;\n+import com.palantir.docker.compose.connection.DockerPort;\n+import com.palantir.docker.compose.logging.LogDirectory;\n+import com.palantir.nexus.db.pool.config.ConnectionConfig;\n+import com.palantir.nexus.db.pool.config.ImmutableMaskedValue;\n+import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n+\n+public class DbKvsRule implements TestRule {\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final int FIVE_SECONDS = 5;\n+\n+    private final DockerComposeRule docker = DockerComposeRule.builder()\n+            .file(\"src/testCommon/resources/docker-compose.yml\")\n+            .waitingForService(\"postgres\", Container::areAllPortsOpen)\n+            .saveLogsTo(LogDirectory.circleAwareLogDirectory(DbKvsRule.class))\n+            .shutdownStrategy(ShutdownStrategy.AGGRESSIVE_WITH_NETWORK_CLEANUP)\n+            .build();\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return RuleChain.outerRule(docker)\n+                .around(new ExternalResource() {\n+                    @Override\n+                    protected void before() {\n+                        waitUntilDbkvsIsUp();\n+                    }\n+\n+                    @Override\n+                    protected void after() {\n+                        // no op\n+                    }\n+                }).apply(base, description);\n+    }\n+\n+    private void waitUntilDbkvsIsUp() {\n+        Awaitility.await()\n+                .atMost(Duration.ONE_MINUTE)\n+                .pollInterval(Duration.ONE_SECOND)\n+                .until(canCreateKeyValueService());\n+    }\n+\n+    private DbKeyValueServiceConfig getKvsConfig() {\n+        DockerPort port = docker.containers()\n+                .container(\"postgres\")\n+                .port(POSTGRES_PORT);\n+\n+        InetSocketAddress postgresAddress = new InetSocketAddress(port.getIp(), port.getExternalPort());\n+\n+        ConnectionConfig connectionConfig = ImmutablePostgresConnectionConfig.builder()\n+                .dbName(\"atlas\")\n+                .dbLogin(\"palantir\")\n+                .dbPassword(ImmutableMaskedValue.of(\"palantir\"))\n+                .host(postgresAddress.getHostName())\n+                .port(postgresAddress.getPort())\n+                .build();\n+\n+        return ImmutableDbKeyValueServiceConfig.builder()\n+                .connection(connectionConfig)\n+                .ddl(ImmutablePostgresDdlConfig.builder()\n+                        .compactInterval(HumanReadableDuration.days(2))\n+                        .build())\n+                .build();\n+    }\n+\n+    private Callable<Boolean> canCreateKeyValueService() {\n+        return () -> {\n+            ConnectionManagerAwareDbKvs kvs = null;\n+            try {\n+                kvs = createKvs();\n+                try (Connection connection = kvs.getConnectionManager().getConnection()) {\n+                    return connection.isValid(FIVE_SECONDS);\n+                }\n+            } catch (Exception ex) {\n+                if (ex.getMessage().contains(\"The connection attempt failed.\")\n+                        || ex.getMessage().contains(\"the database system is starting up\")) {\n+                    return false;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                if (kvs != null) {\n+                    kvs.close();\n+                }\n+            }\n+        };\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MTM4Nw==", "bodyText": "I think as mentioned in #5025 it does make sense to clean that up (e.g. move this to container test utils), just that I wouldn't prioritise it right now.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503871387", "createdAt": "2020-10-13T11:23:31Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.net.InetSocketAddress;\n+import java.sql.Connection;\n+import java.util.concurrent.Callable;\n+\n+import org.awaitility.Awaitility;\n+import org.awaitility.Duration;\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.DbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutableDbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutablePostgresDdlConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.conjure.java.api.config.service.HumanReadableDuration;\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.configuration.ShutdownStrategy;\n+import com.palantir.docker.compose.connection.Container;\n+import com.palantir.docker.compose.connection.DockerPort;\n+import com.palantir.docker.compose.logging.LogDirectory;\n+import com.palantir.nexus.db.pool.config.ConnectionConfig;\n+import com.palantir.nexus.db.pool.config.ImmutableMaskedValue;\n+import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n+\n+public class DbKvsRule implements TestRule {\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final int FIVE_SECONDS = 5;\n+\n+    private final DockerComposeRule docker = DockerComposeRule.builder()\n+            .file(\"src/testCommon/resources/docker-compose.yml\")\n+            .waitingForService(\"postgres\", Container::areAllPortsOpen)\n+            .saveLogsTo(LogDirectory.circleAwareLogDirectory(DbKvsRule.class))\n+            .shutdownStrategy(ShutdownStrategy.AGGRESSIVE_WITH_NETWORK_CLEANUP)\n+            .build();\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return RuleChain.outerRule(docker)\n+                .around(new ExternalResource() {\n+                    @Override\n+                    protected void before() {\n+                        waitUntilDbkvsIsUp();\n+                    }\n+\n+                    @Override\n+                    protected void after() {\n+                        // no op\n+                    }\n+                }).apply(base, description);\n+    }\n+\n+    private void waitUntilDbkvsIsUp() {\n+        Awaitility.await()\n+                .atMost(Duration.ONE_MINUTE)\n+                .pollInterval(Duration.ONE_SECOND)\n+                .until(canCreateKeyValueService());\n+    }\n+\n+    private DbKeyValueServiceConfig getKvsConfig() {\n+        DockerPort port = docker.containers()\n+                .container(\"postgres\")\n+                .port(POSTGRES_PORT);\n+\n+        InetSocketAddress postgresAddress = new InetSocketAddress(port.getIp(), port.getExternalPort());\n+\n+        ConnectionConfig connectionConfig = ImmutablePostgresConnectionConfig.builder()\n+                .dbName(\"atlas\")\n+                .dbLogin(\"palantir\")\n+                .dbPassword(ImmutableMaskedValue.of(\"palantir\"))\n+                .host(postgresAddress.getHostName())\n+                .port(postgresAddress.getPort())\n+                .build();\n+\n+        return ImmutableDbKeyValueServiceConfig.builder()\n+                .connection(connectionConfig)\n+                .ddl(ImmutablePostgresDdlConfig.builder()\n+                        .compactInterval(HumanReadableDuration.days(2))\n+                        .build())\n+                .build();\n+    }\n+\n+    private Callable<Boolean> canCreateKeyValueService() {\n+        return () -> {\n+            ConnectionManagerAwareDbKvs kvs = null;\n+            try {\n+                kvs = createKvs();\n+                try (Connection connection = kvs.getConnectionManager().getConnection()) {\n+                    return connection.isValid(FIVE_SECONDS);\n+                }\n+            } catch (Exception ex) {\n+                if (ex.getMessage().contains(\"The connection attempt failed.\")\n+                        || ex.getMessage().contains(\"the database system is starting up\")) {\n+                    return false;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                if (kvs != null) {\n+                    kvs.close();\n+                }\n+            }\n+        };\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NjAwNA=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTQ2NTc0OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODozNjo1N1rOHgbpFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyMDo0OVrOHhMR2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw==", "bodyText": "Why are we doing this?", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503769367", "createdAt": "2020-10-13T08:36:57Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3NDU0OA==", "bodyText": "This is overridden in DbTimestampCreator: when the service is shut down, it needs to gracefully close its connections to the key-value-service. Because of encapsulation we (rightly, IMO) don't expose the KVS above the ServiceDiscoveringDatabaseTimeLockSupplier.\nOr do you mean why are we providing a default no-op impl? I don't mind changing that and having PaxosTimestampCreator explicitly say that it does nothing - fine either way.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503874548", "createdAt": "2020-10-13T11:29:15Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3MDQ4OA==", "bodyText": "I meant the latter, apologies it was not clear; I thought it would be good to force overriding close() so it can not be ignored.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504170488", "createdAt": "2020-10-13T18:27:53Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMzY4NA==", "bodyText": "I agree with no default here", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504533684", "createdAt": "2020-10-14T09:26:47Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2NjIzMg==", "bodyText": "Cool, added no-op close to PaxosTimestampCreator and removed the default impl. Makes sense", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504566232", "createdAt": "2020-10-14T10:20:49Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimestampCreator.java", "diffHunk": "@@ -21,6 +21,11 @@\n import com.palantir.paxos.Client;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-public interface TimestampCreator {\n+public interface TimestampCreator extends AutoCloseable {\n     Supplier<ManagedTimestampService> createTimestampService(Client client, LeaderConfig leaderConfig);\n+\n+    @Override\n+    default void close() {\n+        // Do nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2OTM2Nw=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTYxNzI3OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxMjoyMlrOHgdGVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMToyMjoyNlrOHgh1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MzIzOQ==", "bodyText": "When do we have runtimeConfig?", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503793239", "createdAt": "2020-10-13T09:12:22Z", "author": {"login": "sudiksha27"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "diffHunk": "@@ -18,46 +18,45 @@\n import java.util.Optional;\n import java.util.function.Supplier;\n \n-import com.codahale.metrics.MetricRegistry;\n import com.palantir.atlasdb.AtlasDbConstants;\n import com.palantir.atlasdb.config.LeaderConfig;\n-import com.palantir.atlasdb.factory.ServiceDiscoveringAtlasSupplier;\n-import com.palantir.atlasdb.spi.AtlasDbFactory;\n import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.spi.KeyValueServiceRuntimeConfig;\n import com.palantir.atlasdb.util.MetricsManager;\n-import com.palantir.logsafe.Preconditions;\n import com.palantir.paxos.Client;\n-import com.palantir.timestamp.DelegatingManagedTimestampService;\n+import com.palantir.timelock.ServiceDiscoveringDatabaseTimeLockSupplier;\n import com.palantir.timestamp.ManagedTimestampService;\n-import com.palantir.timestamp.TimestampManagementService;\n-import com.palantir.timestamp.TimestampService;\n-import com.palantir.tritium.metrics.registry.SharedTaggedMetricRegistries;\n \n-public class DbBoundTimestampCreator implements TimestampCreator {\n+public final class DbBoundTimestampCreator implements TimestampCreator {\n \n-    private KeyValueServiceConfig kvsConfig;\n+    private final ServiceDiscoveringDatabaseTimeLockSupplier serviceDiscoveringDatabaseTimeLockSupplier;\n \n-    public DbBoundTimestampCreator(KeyValueServiceConfig kvsConfig) {\n-        this.kvsConfig = kvsConfig;\n+    private DbBoundTimestampCreator(\n+            ServiceDiscoveringDatabaseTimeLockSupplier serviceDiscoveringDatabaseTimeLockSupplier) {\n+        this.serviceDiscoveringDatabaseTimeLockSupplier = serviceDiscoveringDatabaseTimeLockSupplier;\n+    }\n+\n+    public static TimestampCreator create(\n+            KeyValueServiceConfig kvsConfig,\n+            MetricsManager metricsManager,\n+            Supplier<Optional<KeyValueServiceRuntimeConfig>> kvsRuntimeConfig,\n+            LeaderConfig leaderConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDgxOQ==", "bodyText": "Currently we don't. It's fair to remove it for now, so I will", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503870819", "createdAt": "2020-10-13T11:22:26Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "diffHunk": "@@ -18,46 +18,45 @@\n import java.util.Optional;\n import java.util.function.Supplier;\n \n-import com.codahale.metrics.MetricRegistry;\n import com.palantir.atlasdb.AtlasDbConstants;\n import com.palantir.atlasdb.config.LeaderConfig;\n-import com.palantir.atlasdb.factory.ServiceDiscoveringAtlasSupplier;\n-import com.palantir.atlasdb.spi.AtlasDbFactory;\n import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.spi.KeyValueServiceRuntimeConfig;\n import com.palantir.atlasdb.util.MetricsManager;\n-import com.palantir.logsafe.Preconditions;\n import com.palantir.paxos.Client;\n-import com.palantir.timestamp.DelegatingManagedTimestampService;\n+import com.palantir.timelock.ServiceDiscoveringDatabaseTimeLockSupplier;\n import com.palantir.timestamp.ManagedTimestampService;\n-import com.palantir.timestamp.TimestampManagementService;\n-import com.palantir.timestamp.TimestampService;\n-import com.palantir.tritium.metrics.registry.SharedTaggedMetricRegistries;\n \n-public class DbBoundTimestampCreator implements TimestampCreator {\n+public final class DbBoundTimestampCreator implements TimestampCreator {\n \n-    private KeyValueServiceConfig kvsConfig;\n+    private final ServiceDiscoveringDatabaseTimeLockSupplier serviceDiscoveringDatabaseTimeLockSupplier;\n \n-    public DbBoundTimestampCreator(KeyValueServiceConfig kvsConfig) {\n-        this.kvsConfig = kvsConfig;\n+    private DbBoundTimestampCreator(\n+            ServiceDiscoveringDatabaseTimeLockSupplier serviceDiscoveringDatabaseTimeLockSupplier) {\n+        this.serviceDiscoveringDatabaseTimeLockSupplier = serviceDiscoveringDatabaseTimeLockSupplier;\n+    }\n+\n+    public static TimestampCreator create(\n+            KeyValueServiceConfig kvsConfig,\n+            MetricsManager metricsManager,\n+            Supplier<Optional<KeyValueServiceRuntimeConfig>> kvsRuntimeConfig,\n+            LeaderConfig leaderConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5MzIzOQ=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTYzMjk1OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxNTo1OVrOHgdP6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTozODoyNlrOHgiZAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NTY4OA==", "bodyText": "Are we using the kvsConfig OR plan on using it? If so, It might be worth adding a comment otherwise, I am skeptical of passing around the config.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503795688", "createdAt": "2020-10-13T09:15:59Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "diffHunk": "@@ -101,6 +100,9 @@ public static TimeLockManagementService jersey(\n \n     private static Set<PersistentNamespaceLoader> createNamespaceLoaders(\n             PersistentNamespaceContext persistentNamespaceContext) {\n+        if (persistentNamespaceContext.databasePersistence().isPresent()) {\n+            return ImmutableSet.of(new DatabaseNamespaceLoader());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3OTkzNg==", "bodyText": "I was originally planning on using it (at some point we should implement support for this in db-timelock as well), though actually it probably won't be enough in that we should use the same KVS as the timestamp creator.\nWill switch to a boolean for now, though this will change again soon.", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r503879936", "createdAt": "2020-10-13T11:38:26Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "diffHunk": "@@ -101,6 +100,9 @@ public static TimeLockManagementService jersey(\n \n     private static Set<PersistentNamespaceLoader> createNamespaceLoaders(\n             PersistentNamespaceContext persistentNamespaceContext) {\n+        if (persistentNamespaceContext.databasePersistence().isPresent()) {\n+            return ImmutableSet.of(new DatabaseNamespaceLoader());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NTY4OA=="}, "originalCommit": {"oid": "4c866b9fd60588df6a68308013de5ae2a5562fda"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDMyMTkzOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ServiceDiscoveringAtlasSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToxMzoyOFrOHhJxVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyMTo0MlrOHhMTnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyNTE0MQ==", "bodyText": "Not in scope (?) but the inversion of parameters here and in atlasFactory.createRawKeyValueService is infuriating", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504525141", "createdAt": "2020-10-14T09:13:28Z", "author": {"login": "gmaretic"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ServiceDiscoveringAtlasSupplier.java", "diffHunk": "@@ -66,7 +63,7 @@ public ServiceDiscoveringAtlasSupplier(\n             LongSupplier timestampSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2NjY4Nw==", "bodyText": "Yeah, now's not a good time to touch this class's API (and above)", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504566687", "createdAt": "2020-10-14T10:21:42Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ServiceDiscoveringAtlasSupplier.java", "diffHunk": "@@ -66,7 +63,7 @@ public ServiceDiscoveringAtlasSupplier(\n             LongSupplier timestampSupplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUyNTE0MQ=="}, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDM3MDY1OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/DatabaseNamespaceLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyNTozN1rOHhKPsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyMzoxMlrOHhMWoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMjkxMg==", "bodyText": "This will eventually be implemented?", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504532912", "createdAt": "2020-10-14T09:25:37Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/DatabaseNamespaceLoader.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import java.util.Set;\n+\n+import com.palantir.paxos.Client;\n+\n+public class DatabaseNamespaceLoader implements PersistentNamespaceLoader {\n+    @Override\n+    public Set<Client> getAllPersistedNamespaces() {\n+        throw new UnsupportedOperationException(\"Loading all namespaces from the database is not supported yet!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2NzQ1Nw==", "bodyText": "Yep! I probably should have given a bit more context. Internally this part of the workstream has two phases: 3B (which is ensuring db timelock runs single client namespace integration tests correctly) and 3C (which is giving full compatibility with MNPTLSIT, including the getAllNamespaces tests). Eventually in 3C.3 this will be implemented :)", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504567457", "createdAt": "2020-10-14T10:23:12Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/DatabaseNamespaceLoader.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.management;\n+\n+import java.util.Set;\n+\n+import com.palantir.paxos.Client;\n+\n+public class DatabaseNamespaceLoader implements PersistentNamespaceLoader {\n+    @Override\n+    public Set<Client> getAllPersistedNamespaces() {\n+        throw new UnsupportedOperationException(\"Loading all namespaces from the database is not supported yet!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMjkxMg=="}, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDM5MzY2OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozMTozN1rOHhKeGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoyODoyNVrOHhMhXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNjYwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        ConnectionManagerAwareDbKvs kvs = null;\n          \n          \n            \n                        try {\n          \n          \n            \n                            kvs = createKvs();\n          \n          \n            \n                            try (Connection connection = kvs.getConnectionManager().getConnection()) {\n          \n          \n            \n                                return connection.isValid(FIVE_SECONDS);\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ex) {\n          \n          \n            \n                            if (ex.getMessage().contains(\"The connection attempt failed.\")\n          \n          \n            \n                                    || ex.getMessage().contains(\"the database system is starting up\")) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                throw ex;\n          \n          \n            \n                            }\n          \n          \n            \n                        } finally {\n          \n          \n            \n                            if (kvs != null) {\n          \n          \n            \n                                kvs.close();\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        try (ConnectionManagerAwareDbKvs kvs = createKvs()) {\n          \n          \n            \n                            try (Connection connection = kvs.getConnectionManager().getConnection()) {\n          \n          \n            \n                                return connection.isValid(FIVE_SECONDS);\n          \n          \n            \n                            }\n          \n          \n            \n                        } catch (Exception ex) {\n          \n          \n            \n                            if (ex.getMessage().contains(\"The connection attempt failed.\")\n          \n          \n            \n                                    || ex.getMessage().contains(\"the database system is starting up\")) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                throw ex;\n          \n          \n            \n                            }\n          \n          \n            \n                        }", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504536600", "createdAt": "2020-10-14T09:31:37Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.net.InetSocketAddress;\n+import java.sql.Connection;\n+import java.util.concurrent.Callable;\n+\n+import org.awaitility.Awaitility;\n+import org.awaitility.Duration;\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.DbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutableDbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutablePostgresDdlConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.conjure.java.api.config.service.HumanReadableDuration;\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.configuration.ShutdownStrategy;\n+import com.palantir.docker.compose.connection.Container;\n+import com.palantir.docker.compose.connection.DockerPort;\n+import com.palantir.docker.compose.logging.LogDirectory;\n+import com.palantir.nexus.db.pool.config.ConnectionConfig;\n+import com.palantir.nexus.db.pool.config.ImmutableMaskedValue;\n+import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n+\n+public class DbKvsRule implements TestRule {\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final int FIVE_SECONDS = 5;\n+\n+    private final DockerComposeRule docker = DockerComposeRule.builder()\n+            .file(\"src/testCommon/resources/docker-compose.yml\")\n+            .waitingForService(\"postgres\", Container::areAllPortsOpen)\n+            .saveLogsTo(LogDirectory.circleAwareLogDirectory(DbKvsRule.class))\n+            .shutdownStrategy(ShutdownStrategy.AGGRESSIVE_WITH_NETWORK_CLEANUP)\n+            .build();\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return RuleChain.outerRule(docker)\n+                .around(new ExternalResource() {\n+                    @Override\n+                    protected void before() {\n+                        waitUntilDbkvsIsUp();\n+                    }\n+\n+                    @Override\n+                    protected void after() {\n+                        // no op\n+                    }\n+                }).apply(base, description);\n+    }\n+\n+    private void waitUntilDbkvsIsUp() {\n+        Awaitility.await()\n+                .atMost(Duration.ONE_MINUTE)\n+                .pollInterval(Duration.ONE_SECOND)\n+                .until(canCreateKeyValueService());\n+    }\n+\n+    private DbKeyValueServiceConfig getKvsConfig() {\n+        DockerPort port = docker.containers()\n+                .container(\"postgres\")\n+                .port(POSTGRES_PORT);\n+\n+        InetSocketAddress postgresAddress = new InetSocketAddress(port.getIp(), port.getExternalPort());\n+\n+        ConnectionConfig connectionConfig = ImmutablePostgresConnectionConfig.builder()\n+                .dbName(\"atlas\")\n+                .dbLogin(\"palantir\")\n+                .dbPassword(ImmutableMaskedValue.of(\"palantir\"))\n+                .host(postgresAddress.getHostName())\n+                .port(postgresAddress.getPort())\n+                .build();\n+\n+        return ImmutableDbKeyValueServiceConfig.builder()\n+                .connection(connectionConfig)\n+                .ddl(ImmutablePostgresDdlConfig.builder()\n+                        .compactInterval(HumanReadableDuration.days(2))\n+                        .build())\n+                .build();\n+    }\n+\n+    private Callable<Boolean> canCreateKeyValueService() {\n+        return () -> {\n+            ConnectionManagerAwareDbKvs kvs = null;\n+            try {\n+                kvs = createKvs();\n+                try (Connection connection = kvs.getConnectionManager().getConnection()) {\n+                    return connection.isValid(FIVE_SECONDS);\n+                }\n+            } catch (Exception ex) {\n+                if (ex.getMessage().contains(\"The connection attempt failed.\")\n+                        || ex.getMessage().contains(\"the database system is starting up\")) {\n+                    return false;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                if (kvs != null) {\n+                    kvs.close();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MDIwNQ==", "bodyText": "Good call, yeah I copypasted this one", "url": "https://github.com/palantir/atlasdb/pull/5024#discussion_r504570205", "createdAt": "2020-10-14T10:28:25Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/DbKvsRule.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.net.InetSocketAddress;\n+import java.sql.Connection;\n+import java.util.concurrent.Callable;\n+\n+import org.awaitility.Awaitility;\n+import org.awaitility.Duration;\n+import org.junit.rules.ExternalResource;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.DbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutableDbKeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.ImmutablePostgresDdlConfig;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.conjure.java.api.config.service.HumanReadableDuration;\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.configuration.ShutdownStrategy;\n+import com.palantir.docker.compose.connection.Container;\n+import com.palantir.docker.compose.connection.DockerPort;\n+import com.palantir.docker.compose.logging.LogDirectory;\n+import com.palantir.nexus.db.pool.config.ConnectionConfig;\n+import com.palantir.nexus.db.pool.config.ImmutableMaskedValue;\n+import com.palantir.nexus.db.pool.config.ImmutablePostgresConnectionConfig;\n+\n+public class DbKvsRule implements TestRule {\n+    private static final int POSTGRES_PORT = 5432;\n+    private static final int FIVE_SECONDS = 5;\n+\n+    private final DockerComposeRule docker = DockerComposeRule.builder()\n+            .file(\"src/testCommon/resources/docker-compose.yml\")\n+            .waitingForService(\"postgres\", Container::areAllPortsOpen)\n+            .saveLogsTo(LogDirectory.circleAwareLogDirectory(DbKvsRule.class))\n+            .shutdownStrategy(ShutdownStrategy.AGGRESSIVE_WITH_NETWORK_CLEANUP)\n+            .build();\n+\n+    @Override\n+    public Statement apply(Statement base, Description description) {\n+        return RuleChain.outerRule(docker)\n+                .around(new ExternalResource() {\n+                    @Override\n+                    protected void before() {\n+                        waitUntilDbkvsIsUp();\n+                    }\n+\n+                    @Override\n+                    protected void after() {\n+                        // no op\n+                    }\n+                }).apply(base, description);\n+    }\n+\n+    private void waitUntilDbkvsIsUp() {\n+        Awaitility.await()\n+                .atMost(Duration.ONE_MINUTE)\n+                .pollInterval(Duration.ONE_SECOND)\n+                .until(canCreateKeyValueService());\n+    }\n+\n+    private DbKeyValueServiceConfig getKvsConfig() {\n+        DockerPort port = docker.containers()\n+                .container(\"postgres\")\n+                .port(POSTGRES_PORT);\n+\n+        InetSocketAddress postgresAddress = new InetSocketAddress(port.getIp(), port.getExternalPort());\n+\n+        ConnectionConfig connectionConfig = ImmutablePostgresConnectionConfig.builder()\n+                .dbName(\"atlas\")\n+                .dbLogin(\"palantir\")\n+                .dbPassword(ImmutableMaskedValue.of(\"palantir\"))\n+                .host(postgresAddress.getHostName())\n+                .port(postgresAddress.getPort())\n+                .build();\n+\n+        return ImmutableDbKeyValueServiceConfig.builder()\n+                .connection(connectionConfig)\n+                .ddl(ImmutablePostgresDdlConfig.builder()\n+                        .compactInterval(HumanReadableDuration.days(2))\n+                        .build())\n+                .build();\n+    }\n+\n+    private Callable<Boolean> canCreateKeyValueService() {\n+        return () -> {\n+            ConnectionManagerAwareDbKvs kvs = null;\n+            try {\n+                kvs = createKvs();\n+                try (Connection connection = kvs.getConnectionManager().getConnection()) {\n+                    return connection.isValid(FIVE_SECONDS);\n+                }\n+            } catch (Exception ex) {\n+                if (ex.getMessage().contains(\"The connection attempt failed.\")\n+                        || ex.getMessage().contains(\"the database system is starting up\")) {\n+                    return false;\n+                } else {\n+                    throw ex;\n+                }\n+            } finally {\n+                if (kvs != null) {\n+                    kvs.close();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNjYwMA=="}, "originalCommit": {"oid": "aeda6db14cb3e4103d4be94ea9143c4282b214cf"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2617, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}