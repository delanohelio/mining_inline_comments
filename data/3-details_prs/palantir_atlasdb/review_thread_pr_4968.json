{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjA4MjYz", "number": 4968, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMDowNFrOEkDSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0NjoyOVrOEkFzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjM4MTMxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzoyMDowNFrOHSwenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo1NDo1NlrOHSyEPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMDY4Nw==", "bodyText": "Actually this should take into account if they're thorough or not, gimme a sec...", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489430687", "createdAt": "2020-09-16T13:20:04Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -1629,13 +1635,13 @@ private void checkConstraints() {\n \n     private void commitWrites(TransactionService transactionService) {\n         if (!hasWrites()) {\n-            if (hasReads()) {\n+            if (hasReads() || hasAnyInvolvedTables()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e14aa54e6e12ab26821ccddfd9a718a0ce3996f0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1NjcwMg==", "bodyText": "Fixed", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489456702", "createdAt": "2020-09-16T13:54:56Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -1629,13 +1635,13 @@ private void checkConstraints() {\n \n     private void commitWrites(TransactionService transactionService) {\n         if (!hasWrites()) {\n-            if (hasReads()) {\n+            if (hasReads() || hasAnyInvolvedTables()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQzMDY4Nw=="}, "originalCommit": {"oid": "e14aa54e6e12ab26821ccddfd9a718a0ce3996f0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjU2NjcwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMzo1OToxNFrOHSyQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjowNjo0M1rOHTStfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1OTkwMw==", "bodyText": "Since this is private, do we really need the parameter? Seems like we should just call hasReads() in here", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489459903", "createdAt": "2020-09-16T13:59:14Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n-    private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n+    private boolean validationNecessaryForInvolvedTablesOnCommit(boolean hasReads) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6150760459d9c147a07c919b1c5840f4665092"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTUwMTA5MQ==", "bodyText": "ah, you fixed this", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489501091", "createdAt": "2020-09-16T14:52:47Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n-    private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n+    private boolean validationNecessaryForInvolvedTablesOnCommit(boolean hasReads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1OTkwMw=="}, "originalCommit": {"oid": "fc6150760459d9c147a07c919b1c5840f4665092"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk5MTU1MA==", "bodyText": "Yep, sorry checkstyle was complaining too...", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489991550", "createdAt": "2020-09-17T06:06:43Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n-    private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n+    private boolean validationNecessaryForInvolvedTablesOnCommit(boolean hasReads) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ1OTkwMw=="}, "originalCommit": {"oid": "fc6150760459d9c147a07c919b1c5840f4665092"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MjczNDc1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDozNDoyNlrOHSz5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNzo0M1rOHTlBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjY5Nw==", "bodyText": "So we validate if there's an interesting table AND either there were no reads (because lock watches), or validate locks on reads was false.\nThere are potentially cases where this might behave differently from the original:\nuser reads table A, checks lock\n<loses immutable timestamp lock>\nuser reads table B via notifications, marked B as used\ntxn.commit()\n\nThis would previously throw, but now reads the value from the cache, which is fine - the goal of the immutable timestamp lock is resilience against a delete clearing the value we want out from under us by Thorough Sweep.\nIs the above understanding correct? May be good to have a quick check with @gmaretic here", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489486697", "createdAt": "2020-09-16T14:34:26Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n     private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+        boolean anyTableRequiresImmutableTimestampLocking = involvedTables.stream().anyMatch(\n+                this::requiresImmutableTimestampLocking);\n+        boolean needsToValidate = !validateLocksOnReads || !hasReads();\n+        return anyTableRequiresImmutableTimestampLocking && needsToValidate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk5NzkzNg==", "bodyText": "Where would it throw? Let me clarify my understanding: I understand your timeline as \"table A read checks lock and still has it, but lock expires just afterwards\". With that:\nBefore my change the behavior would be to not throw: when A does the read, it checks the lock, then user does some reads from a cache (AtlasDB is not aware of those reads), and then user calls commit. Then #hasReads is true (because of the A read) so we recheck PreCommitCondition, but #validationNecessaryForInvolvedTablesOnCommit returns false, because #isValidationNecessaryOnCommit checks !validateLocksOnReads. And validateLocksOnReads is a preeety deep rabbit hole, but if you follow it it ultimately is set from TransactionManagers#validateLocksOnReads where the default is true.\nAfter my change, hasReads is true, so again we check PreCommitCondition, and then anyTableRequiresImmutableTimestampLocking is true, because I'm assuming that's what your example does, !validateLocksOnReads is false, but !hasReads() is true, so we do it. I guess I could add a recheck for !hasReads() && hasAnyInvolvedTables() just to be nice?\nUltimately, I think what I care about most is the PreCommitCondition check: the immutable timestamp lock, as you say, is just for TargetedSweep to not nuke the cells under us, but we kinda don't care (because we have them in-memory!). So if you think this is just too complicated I can ignore, but I think I'd rather have this behave roughly the same as the case of only cache reads (the only difference is that the immutable lock check will be checked at commit time).", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489997936", "createdAt": "2020-09-17T06:23:32Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n     private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+        boolean anyTableRequiresImmutableTimestampLocking = involvedTables.stream().anyMatch(\n+                this::requiresImmutableTimestampLocking);\n+        boolean needsToValidate = !validateLocksOnReads || !hasReads();\n+        return anyTableRequiresImmutableTimestampLocking && needsToValidate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjY5Nw=="}, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA2MTQ4MQ==", "bodyText": "In my post when I meant \"original\" I meant \"before lock watches even exist\", so the operation is reading A and then reading B - i.e. my concern is about the difference between\nuser reads table A, checks lock\n<loses immutable timestamp lock>\nuser reads table B without notifications (because they don't exist), checks lock, fails\n\nand\nuser reads table A, checks lock\n<loses immutable timestamp lock>\nuser reads table B via notifications, marked B as used\ntxn.commit()\n\nYep, I think the thing I wanted to verify was that this is only for sweep protection, which I believe is correct - if that's the case then I'm pretty sure this is fine", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r490061481", "createdAt": "2020-09-17T08:23:02Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n     private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+        boolean anyTableRequiresImmutableTimestampLocking = involvedTables.stream().anyMatch(\n+                this::requiresImmutableTimestampLocking);\n+        boolean needsToValidate = !validateLocksOnReads || !hasReads();\n+        return anyTableRequiresImmutableTimestampLocking && needsToValidate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjY5Nw=="}, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE0NjYyNw==", "bodyText": "Yep, discussed offline. I think we don't need to make it this strict, as long as there's a check during the transaction's lifetime, I think that's fine by me.", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r490146627", "createdAt": "2020-09-17T10:43:54Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n     private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+        boolean anyTableRequiresImmutableTimestampLocking = involvedTables.stream().anyMatch(\n+                this::requiresImmutableTimestampLocking);\n+        boolean needsToValidate = !validateLocksOnReads || !hasReads();\n+        return anyTableRequiresImmutableTimestampLocking && needsToValidate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjY5Nw=="}, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MTUyOA==", "bodyText": "Just as a note for future awareness, we had a number of bad legacy users which did goofy things like read data read by a transaction (that was not the thing returned) outside of the scope of that transaction. Among other things, this is why we had to have the whole checkLocksOnReads true by default thing (and so \"check during the transaction's lifetime\" might actually not be sufficient in general - though I don't have concrete examples to hand), but within the parameters of our usage is definitely fine.", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r490291528", "createdAt": "2020-09-17T14:27:43Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -2384,13 +2386,22 @@ public void useTable(TableReference tableRef, ConstraintCheckable table) {\n     /** The similarly-named-and-intentioned useTable method is only called on writes.\n      *  This one is more comprehensive and covers read paths as well\n      * (necessary because we wish to get the sweep strategies of tables in read-only transactions)\n+     *\n+     * A table can be involved in a transaction, even if there were no reads done on it, see #markTableInvolved.\n      */\n     private void markTableAsInvolvedInThisTransaction(TableReference tableRef) {\n         involvedTables.add(tableRef);\n     }\n \n+    private boolean hasAnyInvolvedTables() {\n+        return !involvedTables.isEmpty();\n+    }\n+\n     private boolean validationNecessaryForInvolvedTablesOnCommit() {\n-        return involvedTables.stream().anyMatch(this::isValidationNecessaryOnCommit);\n+        boolean anyTableRequiresImmutableTimestampLocking = involvedTables.stream().anyMatch(\n+                this::requiresImmutableTimestampLocking);\n+        boolean needsToValidate = !validateLocksOnReads || !hasReads();\n+        return anyTableRequiresImmutableTimestampLocking && needsToValidate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjY5Nw=="}, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mjc5MzMwOnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4968.v2.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDo0NjoyOVrOHS0eJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjozNDoyN1rOHTTYjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NjEwMA==", "bodyText": "Might be good to have a bit more detail here (in particular, don't use this unless you really know what you're doing type of warnings)", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r489496100", "createdAt": "2020-09-16T14:46:29Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4968.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: improvement\n+improvement:\n+  description: Transaction#markTableInvolved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwMjU3Mw==", "bodyText": "Updated, but without the warning. I don't think anyone really reads these, and if someone were to use this, I'm sure they'd reach out first, or if not, I doubt a warning would make them do it...", "url": "https://github.com/palantir/atlasdb/pull/4968#discussion_r490002573", "createdAt": "2020-09-17T06:34:27Z", "author": {"login": "jkozlowski"}, "path": "changelog/@unreleased/pr-4968.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: improvement\n+improvement:\n+  description: Transaction#markTableInvolved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ5NjEwMA=="}, "originalCommit": {"oid": "d454acfe867d283ee999ef08948e09db2857f464"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2549, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}