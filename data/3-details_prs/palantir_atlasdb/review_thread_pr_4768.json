{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzEzMjA5", "number": 4768, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNDoxMVrOD8Feqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNzoxOVrOD8FkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzMwOTIyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNDoxMVrOGUzrDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNDoxMVrOGUzrDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MTMwOA==", "bodyText": "\ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/4768#discussion_r424471308", "createdAt": "2020-05-13T14:14:11Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.paxos.PaxosStateLogTestUtils.NAMESPACE;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.generateRounds;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.readRoundUnchecked;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class FileToSqlitePaxosStateLogIntegrationTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private PaxosStateLog<PaxosValue> source;\n+    private PaxosStateLog<PaxosValue> target;\n+    private SqlitePaxosStateLogMigrationState migrationState;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        source = new PaxosStateLogImpl<>(tempFolder.newFolder(\"source\").getPath());\n+        Supplier<Connection> targetConnSupplier = SqliteConnections\n+                .createDefaultNamedSqliteDatabaseAtPath(tempFolder.newFolder(\"target\").toPath());\n+        target = SqlitePaxosStateLog.create(NAMESPACE, targetConnSupplier);\n+        migrationState = SqlitePaxosStateLogMigrationState.create(NAMESPACE, targetConnSupplier);\n+    }\n+\n+    @Test\n+    public void emptyMigrationSucceeds() {\n+        migrate();\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(0, 100));\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromGreaterThanZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(50, 130));\n+    }\n+\n+    @Test\n+    public void nonContiguousMigrationSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.iterate(0, x -> x + 1_301).limit(100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507cf24374726de547c5bdd86347441559ce2411"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzMyNDMyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNzoxOVrOGUz0gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNzoxOVrOGUz0gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MzcyOA==", "bodyText": "not actionable: it's ok that this explodes if null is returned (since this is a test and we don't want nulls)", "url": "https://github.com/palantir/atlasdb/pull/4768#discussion_r424473728", "createdAt": "2020-05-13T14:17:19Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.paxos.PaxosStateLogTestUtils.NAMESPACE;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.generateRounds;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.readRoundUnchecked;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class FileToSqlitePaxosStateLogIntegrationTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private PaxosStateLog<PaxosValue> source;\n+    private PaxosStateLog<PaxosValue> target;\n+    private SqlitePaxosStateLogMigrationState migrationState;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        source = new PaxosStateLogImpl<>(tempFolder.newFolder(\"source\").getPath());\n+        Supplier<Connection> targetConnSupplier = SqliteConnections\n+                .createDefaultNamedSqliteDatabaseAtPath(tempFolder.newFolder(\"target\").toPath());\n+        target = SqlitePaxosStateLog.create(NAMESPACE, targetConnSupplier);\n+        migrationState = SqlitePaxosStateLogMigrationState.create(NAMESPACE, targetConnSupplier);\n+    }\n+\n+    @Test\n+    public void emptyMigrationSucceeds() {\n+        migrate();\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(0, 100));\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromGreaterThanZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(50, 130));\n+    }\n+\n+    @Test\n+    public void nonContiguousMigrationSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.iterate(0, x -> x + 1_301).limit(100));\n+    }\n+\n+    private void migrateAndVerifyValuesForSequences(LongStream sequences) {\n+        List<PaxosRound<PaxosValue>> rounds = generateRounds(sequences);\n+        List<PaxosValue> expectedValues = roundsToValues(rounds);\n+\n+        source.writeBatchOfRounds(rounds);\n+\n+        migrate();\n+        List<PaxosValue> migratedValues = readMigratedValuesFor(expectedValues);\n+\n+        assertThat(migratedValues).isEqualTo(roundsToValues(rounds));\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    private List<PaxosValue> roundsToValues(List<PaxosRound<PaxosValue>> rounds) {\n+        return rounds.stream().map(PaxosRound::value).collect(Collectors.toList());\n+    }\n+\n+    private void migrate() {\n+        PaxosStateLogMigrator.migrate(ImmutableMigrationContext.<PaxosValue>builder()\n+                .sourceLog(source)\n+                .destinationLog(target)\n+                .hydrator(PaxosValue.BYTES_HYDRATOR)\n+                .migrationState(migrationState)\n+                .build());\n+    }\n+\n+    private List<PaxosValue> readMigratedValuesFor(List<PaxosValue> values) {\n+        return values.stream()\n+                .map(value -> PaxosValue.BYTES_HYDRATOR.hydrateFromBytes(readRoundUnchecked(target, value.seq)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507cf24374726de547c5bdd86347441559ce2411"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}