{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3Njk2Njk0", "number": 4590, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1NDoyMVrODh-nEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1NDoyMVrODh-nEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU1NDExOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/watch/LockWatchingServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1NDoyMVrOFtBI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1NDoyMVrOFtBI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0ODg5Ng==", "bodyText": "nit: unnecessary this", "url": "https://github.com/palantir/atlasdb/pull/4590#discussion_r382748896", "createdAt": "2020-02-21T18:54:21Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/watch/LockWatchingServiceImpl.java", "diffHunk": "@@ -59,19 +75,38 @@ public LockWatchStateUpdate getWatchStateUpdate(OptionalLong lastKnownVersion) {\n \n     @Override\n     public void registerLock(Set<LockDescriptor> locksTakenOut, LockToken token) {\n-        lockEventLog.logLock(locksTakenOut.stream().filter(this::hasLockWatch).collect(Collectors.toSet()), token);\n+        watchesLock.readLock().lock();\n+        try {\n+            lockEventLog.logLock(locksTakenOut.stream().filter(this::hasLockWatch).collect(Collectors.toSet()), token);\n+        } finally {\n+            watchesLock.readLock().unlock();\n+        }\n     }\n \n     @Override\n     public void registerUnlock(Set<LockDescriptor> unlocked) {\n+        watchesLock.readLock().lock();\n+        try {\n         lockEventLog.logUnlock(unlocked.stream().filter(this::hasLockWatch).collect(Collectors.toSet()));\n+        } finally {\n+            watchesLock.readLock().unlock();\n+        }\n     }\n \n     private synchronized void addToWatches(LockWatchRequest request) {\n         RangeSet<LockDescriptor> oldRanges = ranges.get();\n+        List<Range<LockDescriptor>> requestAsRanges = toRanges(request);\n+        if (oldRanges.enclosesAll(requestAsRanges)) {\n+            return;\n+        }\n         RangeSet<LockDescriptor> newRanges = TreeRangeSet.create(oldRanges);\n-        newRanges.addAll(toRanges(request));\n-        ranges.set(newRanges);\n+        newRanges.addAll(requestAsRanges);\n+        watchesLock.writeLock().lock();\n+        try {\n+            this.ranges.set(newRanges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8740ab9b0eb8e8daf4d2d8152231738d07d4248e"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2315, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}