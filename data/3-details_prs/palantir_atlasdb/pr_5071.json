{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTQ0MDQ4", "number": 5071, "title": "[Timelock Corruption]: Final Wiring part 1", "bodyText": "Goals (and why):\nWire corruption components\nImplementation Description (bullets):\n\nBasically connects all pieces together\n\nTesting (What was existing testing like?  What have you done to improve it?):\nModified existing tests\nConcerns (what feedback would you like?):\n\n\nIs it correct to initialize the PaxosHistoryProvider in PaxosResourceFactory?\n\n\nDid I miss something?\n\n\nWhere should we start reviewing?:\n\nPaxosResourceFactory\n\nPriority (whenever / two weeks / yesterday):\nASAP \ud83c\udfc3\u200d\u2640\ufe0f", "createdAt": "2020-10-22T09:20:04Z", "url": "https://github.com/palantir/atlasdb/pull/5071", "merged": true, "mergeCommit": {"oid": "ce7ec744e1fe66d20a77c42e202b34b9d74c71fa"}, "closed": true, "closedAt": "2020-10-23T11:37:18Z", "author": {"login": "sudiksha27"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU-TDpgH2gAyNTA4MTQ0MDQ4OjJlMDg5OTEwMWMzOTU4YjM2OTUzMGIwOTI3ZTY4YmIxYmYyYzEwYTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVT9-WAH2gAyNTA4MTQ0MDQ4OmJiZTgzNGQyOTc4Y2MzZDExMmE2YWQ0NzcyMzExNGJjNGQyMzNjODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2e0899101c3958b369530b0927e68bb1bf2c10a8", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/2e0899101c3958b369530b0927e68bb1bf2c10a8", "committedDate": "2020-10-22T09:10:39Z", "message": "Wire through - part 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5594fe0b14679eb55cdee28427720bbe6f2d67b", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/d5594fe0b14679eb55cdee28427720bbe6f2d67b", "committedDate": "2020-10-22T11:25:54Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd0d732e98fdf361bdc2233de454317ec970cb3", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/9bd0d732e98fdf361bdc2233de454317ec970cb3", "committedDate": "2020-10-22T14:57:05Z", "message": "Fix + tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/ddd99f2053a61a0d6f050e6b717b5875b45211de", "committedDate": "2020-10-22T14:59:54Z", "message": "Refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODM2OTky", "url": "https://github.com/palantir/atlasdb/pull/5071#pullrequestreview-514836992", "createdAt": "2020-10-22T15:11:12Z", "commit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToxMToxM1rOHmmsgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToxMzowMFrOHmmxYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0MTkyMA==", "bodyText": "this feels a bit weird (although maybe it's an Atlas thing?) - that is, using a List to represent two and exactly two distinct things here. I'd prefer if you just made a small Immutables to hold the local and remote, then you only need one field and can call something like corruptionDetectors.local() (although naturally this doesn't lend itself trivially to your streams).", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510241920", "createdAt": "2020-10-22T15:11:13Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/CorruptionHealthCheck.java", "diffHunk": "@@ -16,16 +16,24 @@\n \n package com.palantir.timelock.corruption.detection;\n \n+import com.google.common.collect.ImmutableList;\n import java.util.List;\n \n public class CorruptionHealthCheck {\n-    private final List<CorruptionDetector> corruptionDetectors;\n+    private final LocalCorruptionDetector localCorruptionDetector;\n+    private final List<CorruptionDetector> localAndRemoteCorruptionDetectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0MjY3MQ==", "bodyText": "nit: unnecessary diff.", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510242671", "createdAt": "2020-10-22T15:12:18Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/LocalCorruptionDetector.java", "diffHunk": "@@ -31,46 +32,63 @@\n \n     private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n             new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0MzE2OQ==", "bodyText": "I'm not really a fan of shootTimelock - it feels pretty ambiguous (particularly as this is a boolean!)", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510243169", "createdAt": "2020-10-22T15:13:00Z", "author": {"login": "Jolyon-S"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/handle/JerseyCorruptionFilter.java", "diffHunk": "@@ -32,7 +32,7 @@ public JerseyCorruptionFilter(CorruptionHealthCheck healthCheck) {\n \n     @Override\n     public void filter(ContainerRequestContext requestContext) {\n-        if (!healthCheck.isHealthy()) {\n+        if (healthCheck.shootTimeLock()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0ODk1NzA3", "url": "https://github.com/palantir/atlasdb/pull/5071#pullrequestreview-514895707", "createdAt": "2020-10-22T16:10:22Z", "commit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoxMDoyM1rOHmpYwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjozMToyN1rOHmqRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4NjAxOA==", "bodyText": "maybe shouldRejectRequests()? The impression I get if I come across a method like this is that it actually makes the server stop requests and returns true if successful/false if not", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510286018", "createdAt": "2020-10-22T16:10:23Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/CorruptionDetector.java", "diffHunk": "@@ -17,5 +17,5 @@\n package com.palantir.timelock.corruption.detection;\n \n public interface CorruptionDetector {\n-    boolean hasDetectedCorruption();\n+    boolean shootTimeLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI4NzQ5OA==", "bodyText": "Have a look at LocalAndRemotes? It's a bit more powerful than what you need here, but has a nice way of accessing all or specifically the local.", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510287498", "createdAt": "2020-10-22T16:12:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/CorruptionHealthCheck.java", "diffHunk": "@@ -16,16 +16,24 @@\n \n package com.palantir.timelock.corruption.detection;\n \n+import com.google.common.collect.ImmutableList;\n import java.util.List;\n \n public class CorruptionHealthCheck {\n-    private final List<CorruptionDetector> corruptionDetectors;\n+    private final LocalCorruptionDetector localCorruptionDetector;\n+    private final List<CorruptionDetector> localAndRemoteCorruptionDetectors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0MTkyMA=="}, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MDM4Mw==", "bodyText": "Let's name this based on what the map actually does: namespacesExhibitingViolations or something like this.", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510290383", "createdAt": "2020-10-22T16:16:31Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -36,15 +43,49 @@ private HistoryAnalyzer() {\n         // do not create instance of this class\n     }\n \n+    public static CorruptionHealthReport corruptionHealthReportForHistory(\n+            List<CompletePaxosHistoryForNamespaceAndUseCase> history) {\n+\n+        Map<NamespaceAndUseCase, CorruptionCheckViolation> namespaceAndUseCaseCorruptionCheckViolationMap =\n+                history.stream()\n+                        .collect(Collectors.toMap(\n+                                HistoryAnalyzer::extractNamespaceAndUseCase,\n+                                HistoryAnalyzer::violatedCorruptionChecksForNamespaceAndUseCase));\n+\n+        SetMultimap<CorruptionCheckViolation, NamespaceAndUseCase> entryEntrySetMultimap = KeyedStream.stream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDEzMg==", "bodyText": "I think this should return List or some Collection given the name?", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510294132", "createdAt": "2020-10-22T16:21:58Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -36,15 +43,49 @@ private HistoryAnalyzer() {\n         // do not create instance of this class\n     }\n \n+    public static CorruptionHealthReport corruptionHealthReportForHistory(\n+            List<CompletePaxosHistoryForNamespaceAndUseCase> history) {\n+\n+        Map<NamespaceAndUseCase, CorruptionCheckViolation> namespaceAndUseCaseCorruptionCheckViolationMap =\n+                history.stream()\n+                        .collect(Collectors.toMap(\n+                                HistoryAnalyzer::extractNamespaceAndUseCase,\n+                                HistoryAnalyzer::violatedCorruptionChecksForNamespaceAndUseCase));\n+\n+        SetMultimap<CorruptionCheckViolation, NamespaceAndUseCase> entryEntrySetMultimap = KeyedStream.stream(\n+                        namespaceAndUseCaseCorruptionCheckViolationMap)\n+                .mapEntries((k, v) -> Maps.immutableEntry(v, k))\n+                .filterKeys(CorruptionCheckViolation::raiseErrorAlert)\n+                .collectToSetMultimap();\n+\n+        return ImmutableCorruptionHealthReport.builder()\n+                .statusesToNamespaceAndUseCase(entryEntrySetMultimap)\n+                .build();\n+    }\n+\n+    private static NamespaceAndUseCase extractNamespaceAndUseCase(\n+            CompletePaxosHistoryForNamespaceAndUseCase historyForNamespaceAndUseCase) {\n+        return ImmutableNamespaceAndUseCase.builder()\n+                .namespace(historyForNamespaceAndUseCase.namespace())\n+                .useCase(historyForNamespaceAndUseCase.useCase())\n+                .build();\n+    }\n+\n     @VisibleForTesting\n-    static List<CorruptionCheckViolation> violatedCorruptionChecksForNamespaceAndUseCase(\n+    static CorruptionCheckViolation violatedCorruptionChecksForNamespaceAndUseCase(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5NDYwMg==", "bodyText": "Might be worth extracting a constant for the set of checks", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510294602", "createdAt": "2020-10-22T16:22:44Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -36,15 +43,49 @@ private HistoryAnalyzer() {\n         // do not create instance of this class\n     }\n \n+    public static CorruptionHealthReport corruptionHealthReportForHistory(\n+            List<CompletePaxosHistoryForNamespaceAndUseCase> history) {\n+\n+        Map<NamespaceAndUseCase, CorruptionCheckViolation> namespaceAndUseCaseCorruptionCheckViolationMap =\n+                history.stream()\n+                        .collect(Collectors.toMap(\n+                                HistoryAnalyzer::extractNamespaceAndUseCase,\n+                                HistoryAnalyzer::violatedCorruptionChecksForNamespaceAndUseCase));\n+\n+        SetMultimap<CorruptionCheckViolation, NamespaceAndUseCase> entryEntrySetMultimap = KeyedStream.stream(\n+                        namespaceAndUseCaseCorruptionCheckViolationMap)\n+                .mapEntries((k, v) -> Maps.immutableEntry(v, k))\n+                .filterKeys(CorruptionCheckViolation::raiseErrorAlert)\n+                .collectToSetMultimap();\n+\n+        return ImmutableCorruptionHealthReport.builder()\n+                .statusesToNamespaceAndUseCase(entryEntrySetMultimap)\n+                .build();\n+    }\n+\n+    private static NamespaceAndUseCase extractNamespaceAndUseCase(\n+            CompletePaxosHistoryForNamespaceAndUseCase historyForNamespaceAndUseCase) {\n+        return ImmutableNamespaceAndUseCase.builder()\n+                .namespace(historyForNamespaceAndUseCase.namespace())\n+                .useCase(historyForNamespaceAndUseCase.useCase())\n+                .build();\n+    }\n+\n     @VisibleForTesting\n-    static List<CorruptionCheckViolation> violatedCorruptionChecksForNamespaceAndUseCase(\n+    static CorruptionCheckViolation violatedCorruptionChecksForNamespaceAndUseCase(\n             CompletePaxosHistoryForNamespaceAndUseCase history) {\n-        return Stream.of(\n-                        divergedLearners(history),\n-                        learnedValueWithoutQuorum(history),\n-                        greatestAcceptedValueNotLearned(history))\n-                .filter(CorruptionCheckViolation::raiseErrorAlert)\n-                .collect(Collectors.toList());\n+        Function<CompletePaxosHistoryForNamespaceAndUseCase, CorruptionCheckViolation> divergedLearnedCheck =\n+                HistoryAnalyzer::divergedLearners;\n+        Function<CompletePaxosHistoryForNamespaceAndUseCase, CorruptionCheckViolation> learnedValueWithoutQuorum =\n+                HistoryAnalyzer::learnedValueWithoutQuorum;\n+        Function<CompletePaxosHistoryForNamespaceAndUseCase, CorruptionCheckViolation> greatestAcceptedValueNotLearned =\n+                HistoryAnalyzer::greatestAcceptedValueNotLearned;\n+\n+        return Stream.of(divergedLearnedCheck, learnedValueWithoutQuorum, greatestAcceptedValueNotLearned)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5ODI4Ng==", "bodyText": "as flagged elsewhere, this gets confusing, I think because it looks like a command, but it's not", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510298286", "createdAt": "2020-10-22T16:28:17Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/LocalCorruptionDetector.java", "diffHunk": "@@ -31,46 +32,63 @@\n \n     private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n             new NamedThreadFactory(CORRUPTION_DETECTOR_THREAD_PREFIX, true));\n+\n     private final LocalCorruptionHandler corruptionHandler;\n+    private final PaxosLogHistoryProvider historyProvider;\n \n     private volatile CorruptionStatus localCorruptionState = CorruptionStatus.HEALTHY;\n+    private volatile CorruptionHealthReport localCorruptionReport = CorruptionHealthReport.defaultHealthyReport();\n \n-    public static LocalCorruptionDetector create(List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n-        LocalCorruptionDetector localCorruptionDetector = new LocalCorruptionDetector(corruptionNotifiers);\n+    public static LocalCorruptionDetector create(\n+            PaxosLogHistoryProvider historyProvider, List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        LocalCorruptionDetector localCorruptionDetector =\n+                new LocalCorruptionDetector(historyProvider, corruptionNotifiers);\n \n         //        TODO(snanda) - uncomment when TL corruption detection goes live\n         //        timeLockLocalCorruptionDetector.scheduleWithFixedDelay();\n         return localCorruptionDetector;\n     }\n \n-    private LocalCorruptionDetector(List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+    private LocalCorruptionDetector(\n+            PaxosLogHistoryProvider historyProvider, List<TimeLockCorruptionNotifier> corruptionNotifiers) {\n+        this.historyProvider = historyProvider;\n         this.corruptionHandler = new LocalCorruptionHandler(corruptionNotifiers);\n     }\n \n     private void scheduleWithFixedDelay() {\n         executor.scheduleWithFixedDelay(\n                 () -> {\n-                    if (detectedSignsOfCorruption()) {\n-                        killTimeLock();\n-                    }\n+                    localCorruptionReport = analyzeHistoryAndBuildCorruptionHealthReport();\n+                    processLocalHealthReport();\n                 },\n                 TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n                 TIMELOCK_CORRUPTION_ANALYSIS_INTERVAL.getSeconds(),\n                 TimeUnit.SECONDS);\n     }\n \n-    private void killTimeLock() {\n-        localCorruptionState = CorruptionStatus.DEFINITIVE_CORRUPTION_DETECTED_BY_LOCAL;\n-        corruptionHandler.notifyRemoteServersOfCorruption();\n+    private CorruptionHealthReport analyzeHistoryAndBuildCorruptionHealthReport() {\n+        return HistoryAnalyzer.corruptionHealthReportForHistory(historyProvider.getHistory());\n+    }\n+\n+    private void processLocalHealthReport() {\n+        localCorruptionState = getLocalCorruptionState(localCorruptionReport);\n+        if (localCorruptionState.shootTimeLock()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwMDA5OQ==", "bodyText": "nit: Prefer isEmpty()", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510300099", "createdAt": "2020-10-22T16:30:58Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/corruption/detection/HistoryAnalyzerTest.java", "diffHunk": "@@ -81,9 +83,15 @@ public void correctlyPassesIfThereIsNotCorruption() {\n         remoteStateLogComponents.stream().forEach(server -> writeLogsOnServer(server, 1, 10));\n \n         List<CompletePaxosHistoryForNamespaceAndUseCase> historyForAll = paxosLogHistoryProvider.getHistory();\n+\n         assertThat(HistoryAnalyzer.violatedCorruptionChecksForNamespaceAndUseCase(\n                         Iterables.getOnlyElement(historyForAll)))\n-                .hasSize(0);\n+                .isEqualTo(CorruptionCheckViolation.NONE);\n+\n+        assertThat(HistoryAnalyzer.corruptionHealthReportForHistory(historyForAll)\n+                        .statusesToNamespaceAndUseCase()\n+                        .size())\n+                .isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwMDQyOQ==", "bodyText": "could we rename this violatingStatuses... or something like that?", "url": "https://github.com/palantir/atlasdb/pull/5071#discussion_r510300429", "createdAt": "2020-10-22T16:31:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/corruption/detection/HistoryAnalyzerTest.java", "diffHunk": "@@ -81,9 +83,15 @@ public void correctlyPassesIfThereIsNotCorruption() {\n         remoteStateLogComponents.stream().forEach(server -> writeLogsOnServer(server, 1, 10));\n \n         List<CompletePaxosHistoryForNamespaceAndUseCase> historyForAll = paxosLogHistoryProvider.getHistory();\n+\n         assertThat(HistoryAnalyzer.violatedCorruptionChecksForNamespaceAndUseCase(\n                         Iterables.getOnlyElement(historyForAll)))\n-                .hasSize(0);\n+                .isEqualTo(CorruptionCheckViolation.NONE);\n+\n+        assertThat(HistoryAnalyzer.corruptionHealthReportForHistory(historyForAll)\n+                        .statusesToNamespaceAndUseCase()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd99f2053a61a0d6f050e6b717b5875b45211de"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0285652f06c8c5f7801ee12fc7b906defbbeb2", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/bd0285652f06c8c5f7801ee12fc7b906defbbeb2", "committedDate": "2020-10-22T18:11:52Z", "message": "Address comments - part 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c6c7574d5810274688274671218cda4ae95a3e2", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/4c6c7574d5810274688274671218cda4ae95a3e2", "committedDate": "2020-10-22T21:26:21Z", "message": "Fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NTI5NzY5", "url": "https://github.com/palantir/atlasdb/pull/5071#pullrequestreview-515529769", "createdAt": "2020-10-23T10:13:16Z", "commit": {"oid": "4c6c7574d5810274688274671218cda4ae95a3e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe834d2978cc3d112a6ad47723114bc4d233c84", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/bbe834d2978cc3d112a6ad47723114bc4d233c84", "committedDate": "2020-10-23T10:25:32Z", "message": "Refactor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2419, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}