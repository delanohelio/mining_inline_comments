{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzg1MTA3", "number": 4790, "title": "[Dialogue] Part 7: Conjure for Selected Legacy Lock Endpoints", "bodyText": "Goals (and why):\n\nWe've seen that Dialogue is broadly beneficial for the performance of RPCs. However, it is difficult to benefit completely from Dialogue while our APIs do not conform to Conjure. ConjureTimelockResource covers 70 to 85 percent of traffic; most of the remainder is through the V1 LockService, and specifically three main endpoints: refreshLockRefreshTokens, unlockSimple, and lockAndGetHeldLocks. The first is about 2.3-2.5x more frequent than the latter two, which have about the same frequency.\nThe legacy lock service is a bit scary and is a source of technical debt, so it would be good to move it to Conjure. There is however a wealth of classes and APIs which are not particularly well understood. Given broad usage across a multitude of consumers that is not well understood, it's also very dangerous to break APIs here.\n\nImplementation Description (bullets):\n\nExpose a conjure API on TimeLock that is able to delegate RLRT and US to the same lock service as exposed on the legacy endpoints. Do not actually stop exposing old endpoints.\n\nTesting (What was existing testing like?  What have you done to improve it?):\nAdded a new test that going through either API will affect the locks on the other side in the way we expect.\nConcerns (what feedback would you like?):\n\nI only did the first two endpoints: the last has a more complicated serialized form in terms of the request that needs to be sent, and should be forthcoming in a separate PR. (It's also only about ~20 percent of this part of the traffic.)\nDon't like the copypasta in timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java, but not sure how to do it nicer without either some weird abusive use of interfaces or reflection.\n\nWhere should we start reviewing?: lock-api.yml\nPriority (whenever / two weeks / yesterday): this week", "createdAt": "2020-05-19T21:52:48Z", "url": "https://github.com/palantir/atlasdb/pull/4790", "merged": true, "mergeCommit": {"oid": "b4611c51dff592da8cf1078b93f2eda3625721f8"}, "closed": true, "closedAt": "2020-06-01T19:12:45Z", "author": {"login": "jeremyk-91"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci5-7lAH2gAyNDIwMzg1MTA3OmY4NGMwOGMxODhjNDRjMmRiNWZjMDA1YjI5NmJjMjg5MmExYTZiNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl09zdgH2gAyNDIwMzg1MTA3OmJjZWRjYzYyZWFiZTllOWExZWJjOWE5M2Y0ZTFmYThlZWVmZjY1NDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f84c08c188c44c2db5fc005b296bc2892a1a6b46", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/f84c08c188c44c2db5fc005b296bc2892a1a6b46", "committedDate": "2020-05-19T19:52:50Z", "message": "conjurize lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e45494fd878455b41899709fa63b01ebb5ee09d1", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/e45494fd878455b41899709fa63b01ebb5ee09d1", "committedDate": "2020-05-19T21:04:33Z", "message": "Gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00f258242935e25093bbf7838f58651030142a8d", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/00f258242935e25093bbf7838f58651030142a8d", "committedDate": "2020-05-19T21:04:42Z", "message": "New resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca1b12ebadb49c303fccb7036ee0c83fb11b7642", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/ca1b12ebadb49c303fccb7036ee0c83fb11b7642", "committedDate": "2020-05-19T21:05:08Z", "message": "Git out of here"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8811b164db51e0e1325e618c2477d45487231fd", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/d8811b164db51e0e1325e618c2477d45487231fd", "committedDate": "2020-05-19T21:28:20Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e97410458a4379482f6f46325cc4f309f89e9425", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/e97410458a4379482f6f46325cc4f309f89e9425", "committedDate": "2020-05-19T21:43:14Z", "message": "JAXRS is tough"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/78ecc2642c7b94a0b0bb2a845a311456bfad8111", "committedDate": "2020-05-19T21:43:09Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTU5NDg4", "url": "https://github.com/palantir/atlasdb/pull/4790#pullrequestreview-418159488", "createdAt": "2020-05-26T10:15:48Z", "commit": {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoxNTo0OFrOGaXx3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoxOTozN1rOGaX5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTc1OA==", "bodyText": "Rename to toLegacyTokens?", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430305758", "createdAt": "2020-05-26T10:15:48Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.lock.ConjureLockRefreshToken;\n+import com.palantir.lock.ConjureLockV1Service;\n+import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n+import com.palantir.lock.ConjureSimpleHeldLocksToken;\n+import com.palantir.lock.LockRefreshToken;\n+import com.palantir.lock.LockService;\n+import com.palantir.lock.SimpleHeldLocksToken;\n+import com.palantir.lock.UndertowConjureLockV1Service;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class ConjureLockV1Resource implements UndertowConjureLockV1Service {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, LockService> lockServices;\n+\n+    private ConjureLockV1Resource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.lockServices = lockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return ConjureLockV1ServiceEndpoints.of(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    public static ConjureLockV1ShimService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return new ConjureLockV1Resource.JerseyAdapter(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<Set<ConjureLockRefreshToken>> refreshLockRefreshTokens(AuthHeader authHeader,\n+            String namespace, List<ConjureLockRefreshToken> request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            ListenableFuture<Set<LockRefreshToken>> serviceTokens = Futures.immediateFuture(\n+                    lockServices.apply(namespace).refreshLockRefreshTokens(getLegacyTokens(request)));\n+            return Futures.transform(\n+                    serviceTokens,\n+                    ConjureLockV1Resource::getConjureTokens,\n+                    MoreExecutors.directExecutor());\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<Boolean> unlockSimple(AuthHeader authHeader, String namespace,\n+            ConjureSimpleHeldLocksToken request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            SimpleHeldLocksToken serverToken = new SimpleHeldLocksToken(\n+                    request.getTokenId(), request.getCreationDateMs());\n+            return Futures.immediateFuture(lockServices.apply(namespace).unlockSimple(serverToken));\n+        });\n+    }\n+\n+    @VisibleForTesting\n+    static List<LockRefreshToken> getLegacyTokens(List<ConjureLockRefreshToken> request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTgyMQ==", "bodyText": "as above", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430305821", "createdAt": "2020-05-26T10:15:56Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.lock.ConjureLockRefreshToken;\n+import com.palantir.lock.ConjureLockV1Service;\n+import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n+import com.palantir.lock.ConjureSimpleHeldLocksToken;\n+import com.palantir.lock.LockRefreshToken;\n+import com.palantir.lock.LockService;\n+import com.palantir.lock.SimpleHeldLocksToken;\n+import com.palantir.lock.UndertowConjureLockV1Service;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class ConjureLockV1Resource implements UndertowConjureLockV1Service {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, LockService> lockServices;\n+\n+    private ConjureLockV1Resource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.lockServices = lockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return ConjureLockV1ServiceEndpoints.of(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    public static ConjureLockV1ShimService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return new ConjureLockV1Resource.JerseyAdapter(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<Set<ConjureLockRefreshToken>> refreshLockRefreshTokens(AuthHeader authHeader,\n+            String namespace, List<ConjureLockRefreshToken> request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            ListenableFuture<Set<LockRefreshToken>> serviceTokens = Futures.immediateFuture(\n+                    lockServices.apply(namespace).refreshLockRefreshTokens(getLegacyTokens(request)));\n+            return Futures.transform(\n+                    serviceTokens,\n+                    ConjureLockV1Resource::getConjureTokens,\n+                    MoreExecutors.directExecutor());\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<Boolean> unlockSimple(AuthHeader authHeader, String namespace,\n+            ConjureSimpleHeldLocksToken request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            SimpleHeldLocksToken serverToken = new SimpleHeldLocksToken(\n+                    request.getTokenId(), request.getCreationDateMs());\n+            return Futures.immediateFuture(lockServices.apply(namespace).unlockSimple(serverToken));\n+        });\n+    }\n+\n+    @VisibleForTesting\n+    static List<LockRefreshToken> getLegacyTokens(List<ConjureLockRefreshToken> request) {\n+        return request.stream()\n+                .map(token -> new LockRefreshToken(token.getTokenId(), token.getExpirationDateMs()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @VisibleForTesting\n+    static Set<ConjureLockRefreshToken> getConjureTokens(Set<LockRefreshToken> serverTokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNjgxNQ==", "bodyText": "Also, these two methods should just live in a separate utility class and be public imo", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430306815", "createdAt": "2020-05-26T10:17:47Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.lock.ConjureLockRefreshToken;\n+import com.palantir.lock.ConjureLockV1Service;\n+import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n+import com.palantir.lock.ConjureSimpleHeldLocksToken;\n+import com.palantir.lock.LockRefreshToken;\n+import com.palantir.lock.LockService;\n+import com.palantir.lock.SimpleHeldLocksToken;\n+import com.palantir.lock.UndertowConjureLockV1Service;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class ConjureLockV1Resource implements UndertowConjureLockV1Service {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, LockService> lockServices;\n+\n+    private ConjureLockV1Resource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.lockServices = lockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return ConjureLockV1ServiceEndpoints.of(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    public static ConjureLockV1ShimService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return new ConjureLockV1Resource.JerseyAdapter(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<Set<ConjureLockRefreshToken>> refreshLockRefreshTokens(AuthHeader authHeader,\n+            String namespace, List<ConjureLockRefreshToken> request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            ListenableFuture<Set<LockRefreshToken>> serviceTokens = Futures.immediateFuture(\n+                    lockServices.apply(namespace).refreshLockRefreshTokens(getLegacyTokens(request)));\n+            return Futures.transform(\n+                    serviceTokens,\n+                    ConjureLockV1Resource::getConjureTokens,\n+                    MoreExecutors.directExecutor());\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<Boolean> unlockSimple(AuthHeader authHeader, String namespace,\n+            ConjureSimpleHeldLocksToken request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            SimpleHeldLocksToken serverToken = new SimpleHeldLocksToken(\n+                    request.getTokenId(), request.getCreationDateMs());\n+            return Futures.immediateFuture(lockServices.apply(namespace).unlockSimple(serverToken));\n+        });\n+    }\n+\n+    @VisibleForTesting\n+    static List<LockRefreshToken> getLegacyTokens(List<ConjureLockRefreshToken> request) {\n+        return request.stream()\n+                .map(token -> new LockRefreshToken(token.getTokenId(), token.getExpirationDateMs()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @VisibleForTesting\n+    static Set<ConjureLockRefreshToken> getConjureTokens(Set<LockRefreshToken> serverTokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTgyMQ=="}, "originalCommit": {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNzc1Ng==", "bodyText": "Test is a bit verbose, but thorough \ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430307756", "createdAt": "2020-05-26T10:19:37Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -320,6 +326,42 @@ public void canGetAllNamespaces() {\n                 .collect(Collectors.toSet());\n     }\n \n+    @Test\n+    public void directLegacyAndConjureLockServicesInteractCorrectly() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0260b6e17cda19f2db8ffcb233d32c38a414a694", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/0260b6e17cda19f2db8ffcb233d32c38a414a694", "committedDate": "2020-05-28T20:21:31Z", "message": "CR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcedcc62eabe9e9a1ebc9a93f4e1fa8eeeff6545", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/bcedcc62eabe9e9a1ebc9a93f4e1fa8eeeff6545", "committedDate": "2020-05-28T21:43:51Z", "message": "import ordering"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2861, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}