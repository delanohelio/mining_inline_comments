{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzI1NTgy", "number": 4724, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1MjowNVrOD0Scvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1ODoxMFrOD0dLXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTU0ODE0OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1MjowNVrOGJKEHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1MjowNVrOGJKEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTI2Mg==", "bodyText": "Not now, and we'll change this: should we enforce this?", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412255262", "createdAt": "2020-04-21T14:52:05Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.function.Supplier;\n+\n+import com.google.common.base.Suppliers;\n+\n+/**\n+ * This class is responsible for creating Sqlite connections to an instance.\n+ * There should be one instance per timelock.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14dd16d03376e57a4b48e88863d868ac0d1c38c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTU1MTI0OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1Mjo0NVrOGJKGNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1Mjo0NVrOGJKGNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stateLog =  SqlitePaxosStateLog.createInitialized(connectionSupplier);\n          \n          \n            \n                    stateLog = SqlitePaxosStateLog.createInitialized(connectionSupplier);", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412255799", "createdAt": "2020-04-21T14:52:45Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.function.Supplier;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.base.Suppliers;\n+\n+public class SqlitePaxosStateLogTest {\n+    private PaxosStateLog<PaxosValue> stateLog;\n+\n+    @Before\n+    public void setup() {\n+        Supplier<Connection> connectionSupplier = Suppliers.memoize(SqliteConnections.createDatabaseForTest()::get);\n+        stateLog =  SqlitePaxosStateLog.createInitialized(connectionSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14dd16d03376e57a4b48e88863d868ac0d1c38c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTU2MjM3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1NDo0MVrOGJKNJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1NDo0MVrOGJKNJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NzU3Mw==", "bodyText": "will be fixed in next PR: the constraint is funky", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412257573", "createdAt": "2020-04-21T14:54:41Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14dd16d03376e57a4b48e88863d868ac0d1c38c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTU2NTg3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1NToxOVrOGJKPPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1NToxOVrOGJKPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1ODExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s;\", seq))\n          \n          \n            \n                    return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412258111", "createdAt": "2020-04-21T14:55:19Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s;\", seq))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14dd16d03376e57a4b48e88863d868ac0d1c38c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjAzMDY2OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNjo1ODo0OVrOGJOkqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxOTo1NVrOGJSHKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTEyOA==", "bodyText": "please can we use jooq here? Direct Java sql is kind of shitty...", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412329128", "createdAt": "2020-04-21T16:58:49Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTQwMg==", "bodyText": "or JDBI - JDBI's pretty great.", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412329402", "createdAt": "2020-04-21T16:59:12Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTEyOA=="}, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzExMw==", "bodyText": "Explicitly, you can get something like this out of JDBI\npublic interface UserDao {\n    @SqlUpdate(\"CREATE TABLE user (id INTEGER PRIMARY KEY, name VARCHAR)\")\n    void createTable();\n\n    @SqlUpdate(\"INSERT INTO user(id, name) VALUES (?, ?)\")\n    void insertPositional(int id, String name);\n\n    @SqlUpdate(\"INSERT INTO user(id, name) VALUES (:id, :name)\")\n    void insertNamed(@Bind(\"id\") int id, @Bind(\"name\") String name);\n\n    @SqlUpdate(\"INSERT INTO user(id, name) VALUES (:id, :name)\")\n    void insertBean(@BindBean User user);\n\n    @SqlQuery(\"SELECT * FROM user ORDER BY name\")\n    @RegisterBeanMapper(User.class)\n    List<User> listUsers();\n}", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412387113", "createdAt": "2020-04-21T18:19:55Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTEyOA=="}, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjQxNTk5OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyMDozN1rOGJSI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoyMDo0NFrOGJSJKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzU1NQ==", "bodyText": "Connection is closeable :)", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412387555", "createdAt": "2020-04-21T18:20:37Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n+                .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return executeStatement(\"SELECT MIN(seq) FROM paxosLog\")\n+                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n+                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return executeStatement(\"SELECT MAX(seq) FROM paxosLog\")\n+                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n+                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+    }\n+\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        executeVoid(String.format(\"DELETE FROM paxosLog WHERE seq <= %s\", toDeleteInclusive));\n+    }\n+\n+    private void executeVoid(String statement) {\n+        try {\n+            connectionSupplier.get().prepareStatement(statement).execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    private Optional<ResultSet> executeStatement(String statement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzYyNg==", "bodyText": "JDBI handles that for you :)", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412387626", "createdAt": "2020-04-21T18:20:44Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n+                .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return executeStatement(\"SELECT MIN(seq) FROM paxosLog\")\n+                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n+                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return executeStatement(\"SELECT MAX(seq) FROM paxosLog\")\n+                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n+                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+    }\n+\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        executeVoid(String.format(\"DELETE FROM paxosLog WHERE seq <= %s\", toDeleteInclusive));\n+    }\n+\n+    private void executeVoid(String statement) {\n+        try {\n+            connectionSupplier.get().prepareStatement(statement).execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    private Optional<ResultSet> executeStatement(String statement) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzU1NQ=="}, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzI5ODQxOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1NjowNVrOGJaKsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1NjowNVrOGJaKsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxOTA4OA==", "bodyText": "Do we not need an index for these queries?", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412519088", "createdAt": "2020-04-21T21:56:05Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n+                .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return executeStatement(\"SELECT MIN(seq) FROM paxosLog\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzMwNTkxOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1ODoxMFrOGJaO7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo1ODoxMFrOGJaO7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDE3Mg==", "bodyText": "Who closes the connection?", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412520172", "createdAt": "2020-04-21T21:58:10Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3074, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}