{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTk3MDQ0", "number": 4669, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo0NToyN1rODrJ-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1NjoyM1rODrLgcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTc4ODI5OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo0NToyN1rOF7VU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1NToxNVrOF7XrAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    T perceivedDelegate = delegate;\n          \n          \n            \n                    if (delegate == null) {\n          \n          \n            \n                        synchronized (this) {\n          \n          \n            \n                            if (delegate == null) {\n          \n          \n            \n                                delegate = delegateFactory.get();\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397759742", "createdAt": "2020-03-25T10:45:27Z", "author": {"login": "gmaretic"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3e55b96e665c73dc4392dd8eeece4edf75be58"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NTQ0NQ==", "bodyText": "I guess we need a return delegate after that though, which again means we do 2 volatile reads in the happy path?", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397785445", "createdAt": "2020-03-25T11:31:37Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTc0Mg=="}, "originalCommit": {"oid": "7d3e55b96e665c73dc4392dd8eeece4edf75be58"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5ODE0Ng==", "bodyText": "That wasn't there when I reviewed, but agree this is more performant", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397798146", "createdAt": "2020-03-25T11:55:15Z", "author": {"login": "gmaretic"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTc0Mg=="}, "originalCommit": {"oid": "7d3e55b96e665c73dc4392dd8eeece4edf75be58"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTgyOTM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1NjozNVrOF7VuAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0NDozNVrOF7XUwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjE0NQ==", "bodyText": "This is kinda funky, because the expected behaviour depends on delegateFactory.get() being memoized both for this check to even make sense and to avoid a \"creation storm\". I think the memoization should be explicitly done in this class, maybe by having factory method that takes a non-memoized delegateFactory, and an expiration time and then memoizes it?", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397766145", "createdAt": "2020-03-25T10:56:35Z", "author": {"login": "gmaretic"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;\n+        if (perceivedDelegate == null) {\n+            synchronized (this) {\n+                perceivedDelegate = delegate;\n+                if (perceivedDelegate == null) {\n+                    delegate = delegateFactory.get();\n+                }\n+            }\n+        }\n+    }\n+\n     private void replaceIfNecessary(Throwable thrown) {\n         if (shouldReplace.test(thrown)) {\n             synchronized (this) {\n                 T replacement = delegateFactory.get();\n                 if (delegate != replacement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3e55b96e665c73dc4392dd8eeece4edf75be58"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjQ0OQ==", "bodyText": "Yep, the factory method suggestion is good", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397792449", "createdAt": "2020-03-25T11:44:35Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;\n+        if (perceivedDelegate == null) {\n+            synchronized (this) {\n+                perceivedDelegate = delegate;\n+                if (perceivedDelegate == null) {\n+                    delegate = delegateFactory.get();\n+                }\n+            }\n+        }\n+    }\n+\n     private void replaceIfNecessary(Throwable thrown) {\n         if (shouldReplace.test(thrown)) {\n             synchronized (this) {\n                 T replacement = delegateFactory.get();\n                 if (delegate != replacement) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjE0NQ=="}, "originalCommit": {"oid": "7d3e55b96e665c73dc4392dd8eeece4edf75be58"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NjAzODkxOnYy", "diffSide": "LEFT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/http/AtlasDbHttpClients.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1NjoyM1rOF7XtKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo1NjoyM1rOF7XtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5ODY5Nw==", "bodyText": ":P", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397798697", "createdAt": "2020-03-25T11:56:23Z", "author": {"login": "gmaretic"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/http/AtlasDbHttpClients.java", "diffHunk": "@@ -111,7 +111,7 @@ private AtlasDbHttpClients() {\n     private static <T> T wrapWithOkHttpBugHandling(Class<T> type, Supplier<T> supplier) {\n         return ReplaceIfExceptionMatchingProxy.create(\n                 type,\n-                supplier::get,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44937a2daa4de721c868cf9e776d46e12c4ec70a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2996, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}