{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Njg0ODQ1", "number": 4837, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0MjoyMlrOEF62Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0NTozN1rOEF67VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQyNDUwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0MjoyMlrOGkZb0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozODowOFrOGkmJ3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODY0Mg==", "bodyText": "I think this comment, in isolation, is not that useful: I assume it is explaining why this is not timed, but outside of the context of this PR it doesn't really imply. Perhaps:\n// Not timed because TransactionService.putUnlessExists actually commits the transaction, and is timed", "url": "https://github.com/palantir/atlasdb/pull/4837#discussion_r440818642", "createdAt": "2020-06-16T12:42:22Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -1700,28 +1703,33 @@ private void commitWrites(TransactionService transactionService) {\n                 // We check the pre-commit conditions first since they may operate similarly to read write conflict\n                 // handling - we should check lock validity last to ensure that sweep hasn't affected the checks.\n                 timedAndTraced(\"userPreCommitCondition\", () -> throwIfPreCommitConditionInvalid(commitTimestamp));\n-                timedAndTraced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));\n+                traced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));\n \n-                timedAndTraced(\"commitPutCommitTs\",\n+                // TransactionService.putUnlessExists: actually commits the transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918c617f1d9aa2034dbcf3c2aa6640ee565df423"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNzAzNw==", "bodyText": "That's a fair point. Makes sense", "url": "https://github.com/palantir/atlasdb/pull/4837#discussion_r441027037", "createdAt": "2020-06-16T17:38:08Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -1700,28 +1703,33 @@ private void commitWrites(TransactionService transactionService) {\n                 // We check the pre-commit conditions first since they may operate similarly to read write conflict\n                 // handling - we should check lock validity last to ensure that sweep hasn't affected the checks.\n                 timedAndTraced(\"userPreCommitCondition\", () -> throwIfPreCommitConditionInvalid(commitTimestamp));\n-                timedAndTraced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));\n+                traced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));\n \n-                timedAndTraced(\"commitPutCommitTs\",\n+                // TransactionService.putUnlessExists: actually commits the transaction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODY0Mg=="}, "originalCommit": {"oid": "918c617f1d9aa2034dbcf3c2aa6640ee565df423"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQzNzk2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0NTozN1rOGkZj2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozODo0MlrOGkmLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMDY5Nw==", "bodyText": "You've mentioned:\n\"refreshing commit locks: consider ConjureTimelockServiceBlocking.refreshLockLeases\"\nin the changelog, but I don't see a comment here in the code (where you have for others that are no longer timed). Is it perhaps adding a comment?", "url": "https://github.com/palantir/atlasdb/pull/4837#discussion_r440820697", "createdAt": "2020-06-16T12:45:37Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -1700,28 +1703,33 @@ private void commitWrites(TransactionService transactionService) {\n                 // We check the pre-commit conditions first since they may operate similarly to read write conflict\n                 // handling - we should check lock validity last to ensure that sweep hasn't affected the checks.\n                 timedAndTraced(\"userPreCommitCondition\", () -> throwIfPreCommitConditionInvalid(commitTimestamp));\n-                timedAndTraced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));\n+                traced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "918c617f1d9aa2034dbcf3c2aa6640ee565df423"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNzM0OQ==", "bodyText": "Yep, I'll add one. I think I left this out as I thought it was obvious, but probably worth doing for the sake of completeness", "url": "https://github.com/palantir/atlasdb/pull/4837#discussion_r441027349", "createdAt": "2020-06-16T17:38:42Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -1700,28 +1703,33 @@ private void commitWrites(TransactionService transactionService) {\n                 // We check the pre-commit conditions first since they may operate similarly to read write conflict\n                 // handling - we should check lock validity last to ensure that sweep hasn't affected the checks.\n                 timedAndTraced(\"userPreCommitCondition\", () -> throwIfPreCommitConditionInvalid(commitTimestamp));\n-                timedAndTraced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));\n+                traced(\"preCommitLockCheck\", () -> throwIfImmutableTsOrCommitLocksExpired(commitLocksToken));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMDY5Nw=="}, "originalCommit": {"oid": "918c617f1d9aa2034dbcf3c2aa6640ee565df423"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2950, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}