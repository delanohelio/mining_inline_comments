{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjA4NTUw", "number": 4599, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTozM1rODkRZQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowMDoxMFrODkRs5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYwMzIyOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTozM1rOFwf_sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToyMDo0OVrOFxB2iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDE3OQ==", "bodyText": "don't think you can ever get into this case, but I imagine this is to just satisfy the type checker", "url": "https://github.com/palantir/atlasdb/pull/4599#discussion_r386400179", "createdAt": "2020-03-02T13:45:33Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "diffHunk": "@@ -199,4 +207,16 @@ protected final void check() {\n                     \"a keystore password without enabling ConnectionProtocol.TCPS\");\n         }\n     }\n+\n+    private String getConnectionDataString() {\n+        if (getSid().isPresent()) {\n+            return \"SID=\" + getSid().get();\n+        }\n+\n+        if (getServiceName().isPresent()) {\n+            return \"SERVICE_NAME=\" + getServiceName().get();\n+        }\n+\n+        throw new IllegalArgumentException(\"Both the sid and service name are absent! One needs to be specified.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f0e74daeb1ac35e7c5272ac93adecf06bea0db"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMTk4MQ==", "bodyText": "I think we do actually, checks happen after the computation of all attributes (docs)", "url": "https://github.com/palantir/atlasdb/pull/4599#discussion_r386631981", "createdAt": "2020-03-02T20:28:42Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "diffHunk": "@@ -199,4 +207,16 @@ protected final void check() {\n                     \"a keystore password without enabling ConnectionProtocol.TCPS\");\n         }\n     }\n+\n+    private String getConnectionDataString() {\n+        if (getSid().isPresent()) {\n+            return \"SID=\" + getSid().get();\n+        }\n+\n+        if (getServiceName().isPresent()) {\n+            return \"SERVICE_NAME=\" + getServiceName().get();\n+        }\n+\n+        throw new IllegalArgumentException(\"Both the sid and service name are absent! One needs to be specified.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDE3OQ=="}, "originalCommit": {"oid": "40f0e74daeb1ac35e7c5272ac93adecf06bea0db"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1NDg4OA==", "bodyText": "of all the derived attributes no?", "url": "https://github.com/palantir/atlasdb/pull/4599#discussion_r386954888", "createdAt": "2020-03-03T11:20:49Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "diffHunk": "@@ -199,4 +207,16 @@ protected final void check() {\n                     \"a keystore password without enabling ConnectionProtocol.TCPS\");\n         }\n     }\n+\n+    private String getConnectionDataString() {\n+        if (getSid().isPresent()) {\n+            return \"SID=\" + getSid().get();\n+        }\n+\n+        if (getServiceName().isPresent()) {\n+            return \"SERVICE_NAME=\" + getServiceName().get();\n+        }\n+\n+        throw new IllegalArgumentException(\"Both the sid and service name are absent! One needs to be specified.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDE3OQ=="}, "originalCommit": {"oid": "40f0e74daeb1ac35e7c5272ac93adecf06bea0db"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY1MzQ4OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDowMDoxMVrOFwgeNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozODo1N1rOFwub9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzk4OQ==", "bodyText": "somewhat confused, if you've specified serviceName you can no longer specify sid meaning that you get screwed over here whenever you call namespace i.e. you go from having a namespace to not having a namespace. What are the implications of this in atlas?\nIf anything it feels like getConnectionDataString should return the service name if it is specified, otherwise it returns the sid and that sid is always provided OR that if you specify serviceName, then you need to specify namespace explicitly when migrating over.\nLet's chat about this face to face.", "url": "https://github.com/palantir/atlasdb/pull/4599#discussion_r386407989", "createdAt": "2020-03-02T14:00:11Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "diffHunk": "@@ -48,22 +48,25 @@ public String getUrl() {\n         if (getServerDn().isPresent()) {\n             return String.format(\"jdbc:oracle:thin:@(DESCRIPTION=\"\n                             + \"(ADDRESS=(PROTOCOL=%s)(HOST=%s)(PORT=%s))\"\n-                            + \"(CONNECT_DATA=(SID=%s))\"\n+                            + \"(CONNECT_DATA=(%s))\"\n                             + \"(SECURITY=(SSL_SERVER_CERT_DN=\\\"%s\\\")))\",\n-                    getProtocol().getUrlString(), getHost(), getPort(), getSid(), getServerDn().get());\n+                    getProtocol().getUrlString(), getHost(), getPort(), getConnectionDataString(), getServerDn().get());\n         } else {\n             return String.format(\"jdbc:oracle:thin:@(DESCRIPTION=\"\n                             + \"(ADDRESS=(PROTOCOL=%s)(HOST=%s)(PORT=%s))\"\n-                            + \"(CONNECT_DATA=(SID=%s)))\",\n-                    getProtocol().getUrlString(), getHost(), getPort(), getSid());\n+                            + \"(CONNECT_DATA=(%s)))\",\n+                    getProtocol().getUrlString(), getHost(), getPort(), getConnectionDataString());\n         }\n     }\n \n     @Override\n     @Value.Derived\n     @JsonIgnore\n     public Optional<String> namespace() {\n-        return Optional.of(getSid());\n+        // If an SID is provided, maintain it - this is needed for legacy compatibility. But if a service name\n+        // is provided, that identifies the database and we don't want to enforce consistency checks with the\n+        // TimeLock client.\n+        return getSid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f0e74daeb1ac35e7c5272ac93adecf06bea0db"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzNjc5MQ==", "bodyText": "In AtlasDB config, users can specify:\n\na KVS-level namespace K (equals keyspace in Cassandra, dbName in Postgres, sid in Oracle)\na timelock-level client T\na global namespace G\n\nAll of them are optional. The current rules are\nNon TimeLock users\n\nG is specified OR K is specified\nIf both are specified G == K\n\nTimeLock users\n\nG is specified OR (T and K are specified)\nIf both are specified, G == T\nIf both are specified, G == K\n\nThe interesting cases here are those where K is specified, since this change prevents you from specifying a value of K for this Oracle database.\nNo TimeLock\n\nIf G and K are both specified, then they must already be equal, and the behaviour of removing K is identical to the baseline.\nIf G is not specified, then K doesn't matter as the timestamp bound is stored in the database being referenced.\n\nTimeLock\n\nIf G and K are specified, they are necessarily equal, and no change is needed.\nIf T and K are specified while G is not, when migrating users must set the new value of G to be T (this is correct even if K was previously different from T), so that clients use the same namespace in TimeLock. Failure to do so will cause the service to not start.\n\nWe can discuss tomorrow. SID is always provided is not an option, as the deployment in question does not have that information as they do not operate the Oracle database in question. The second solution might be better if we decide it's needed, though it makes Oracle configs repetitive for TimeLock users.", "url": "https://github.com/palantir/atlasdb/pull/4599#discussion_r386636791", "createdAt": "2020-03-02T20:38:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs-hikari/src/main/java/com/palantir/nexus/db/pool/config/OracleConnectionConfig.java", "diffHunk": "@@ -48,22 +48,25 @@ public String getUrl() {\n         if (getServerDn().isPresent()) {\n             return String.format(\"jdbc:oracle:thin:@(DESCRIPTION=\"\n                             + \"(ADDRESS=(PROTOCOL=%s)(HOST=%s)(PORT=%s))\"\n-                            + \"(CONNECT_DATA=(SID=%s))\"\n+                            + \"(CONNECT_DATA=(%s))\"\n                             + \"(SECURITY=(SSL_SERVER_CERT_DN=\\\"%s\\\")))\",\n-                    getProtocol().getUrlString(), getHost(), getPort(), getSid(), getServerDn().get());\n+                    getProtocol().getUrlString(), getHost(), getPort(), getConnectionDataString(), getServerDn().get());\n         } else {\n             return String.format(\"jdbc:oracle:thin:@(DESCRIPTION=\"\n                             + \"(ADDRESS=(PROTOCOL=%s)(HOST=%s)(PORT=%s))\"\n-                            + \"(CONNECT_DATA=(SID=%s)))\",\n-                    getProtocol().getUrlString(), getHost(), getPort(), getSid());\n+                            + \"(CONNECT_DATA=(%s)))\",\n+                    getProtocol().getUrlString(), getHost(), getPort(), getConnectionDataString());\n         }\n     }\n \n     @Override\n     @Value.Derived\n     @JsonIgnore\n     public Optional<String> namespace() {\n-        return Optional.of(getSid());\n+        // If an SID is provided, maintain it - this is needed for legacy compatibility. But if a service name\n+        // is provided, that identifies the database and we don't want to enforce consistency checks with the\n+        // TimeLock client.\n+        return getSid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNzk4OQ=="}, "originalCommit": {"oid": "40f0e74daeb1ac35e7c5272ac93adecf06bea0db"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2324, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}