{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjgyNzM4", "number": 4508, "title": "Better coalescing supplier", "bodyText": "This is a more readable version of the present coalescing supplier. Won't describe present state of world (algorithm is confusing) but the new implementation is easier to understand, and in some cases demonstrates better performance.\nFor each round, either we are the first to arrive (execute and return)\nor we are not.\nIn the case we are not, we await the current round ending and then\nperform the check again. If not this time, we wait for the executor to\nfinish and return their result.\nThe improvement is hard to measure in synthetic benchmarks. With spinning threads it's actually slower than the present day (due to the fair queue, the present code maximizes the likelihood that the batch will be full, whereas the new code will likely ensure that the completing task starts the next batch.\nWith some random noise delays added to smooth out this effect, performance is very similar to at present, possibly slightly less variance. It's possible to tweak any benchmark by adding extraneous loading.\n\nThe delays we're seeing are unpredictable - the sorts of things that would be the fault of the OS scheduler.\nThis solution does not show the bad behaviour that we think we're seeing of a thread waking another thread up and that thread not being scheduled for a while.", "createdAt": "2020-01-13T19:28:23Z", "url": "https://github.com/palantir/atlasdb/pull/4508", "merged": true, "mergeCommit": {"oid": "070851464f66a3214f67fb5b31ab230fc364145a"}, "closed": true, "closedAt": "2020-01-14T18:48:19Z", "author": {"login": "j-baker"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6AQBNAH2gAyMzYyMjgyNzM4OjFkMDFjYTk2MWJjZWFkODhhNDA5ZTBiMjNiN2JjOGFkNzI0NWNiOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6ViP0gFqTM0Mjc1NzUzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d01ca961bcead88a409e0b23b7bc8ad7245cb8c", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/1d01ca961bcead88a409e0b23b7bc8ad7245cb8c", "committedDate": "2020-01-13T18:00:02Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c45509a374347540374f6c55d96e09d36a2efda", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/7c45509a374347540374f6c55d96e09d36a2efda", "committedDate": "2020-01-13T19:25:18Z", "message": "Faster coalescing supplier\n\nThis is a moderate improvement on the present coalescing supplier.\nWon't describe present state of the world, but the new implementation\nhopefully describes the algorithm better.\n\nFor each round, either we are the first to arrive (execute and return)\nor we are not.\n\nIn the case we are not, we await the current round ending and then\nperform the check again. If not this time, we wait for the executor to\nfinish and return their result.\n\nThe improvement is modest - with 16 threads looping and a task that takes\n2ms (the benchmark) we see throughput of 6886 +- 73 operations per\nsecond. With this change, we see a result of 7232 +- 89 operations per\nsecond.\n\nWhile the change is minimal, the result is closer to optimal;\n16 / 0.002 = 8000 as perfect (which we can never really achieve in such\na benchmark)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf67f1a2c66ba3c89e4c0c74ea1852e957d7eda", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/ccf67f1a2c66ba3c89e4c0c74ea1852e957d7eda", "committedDate": "2020-01-13T19:42:26Z", "message": "Make more simple"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "129ffe70c2e4b47020657877baf9dbe87366442b", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/129ffe70c2e4b47020657877baf9dbe87366442b", "committedDate": "2020-01-13T19:42:39Z", "message": "Merge branch 'jbaker/faster_coalescing_supplier' of github.com:palantir/atlasdb into jbaker/faster_coalescing_supplier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/04f70e6939bb51fb581bf87f7b4fce70f1e05eff", "committedDate": "2020-01-13T19:42:39Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDk2MjA5", "url": "https://github.com/palantir/atlasdb/pull/4508#pullrequestreview-342096209", "createdAt": "2020-01-13T19:49:24Z", "commit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTo0OToyNFrOFdCllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTo0OToyNFrOFdCllQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NTQxMw==", "bodyText": "it's unclear to me based on Java semantics whether this needs to be volatile or not. But I'm gonna leave it as such.", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r365995413", "createdAt": "2020-01-13T19:49:24Z", "author": {"login": "j-baker"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +29,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        awaitDone(present.future);\n+        Round next = present.next;\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDk3MDc3", "url": "https://github.com/palantir/atlasdb/pull/4508#pullrequestreview-342097077", "createdAt": "2020-01-13T19:50:50Z", "commit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTo1MDo1MFrOFdCoLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTo1MDo1MFrOFdCoLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NjA3OQ==", "bodyText": "This is much faster than the equivalent 'hasStarted.compareAndSet(false, true)'. I believe this is because the proposed solution can do the read in a MESI shared state, whereas the CAS will always make it exclusive.", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r365996079", "createdAt": "2020-01-13T19:50:50Z", "author": {"login": "j-baker"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +29,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        awaitDone(present.future);\n+        Round next = present.next;\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;\n+\n+        boolean isFirstToArrive() {\n+            return !hasStarted.get() && hasStarted.compareAndSet(false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6740acc0ac8c2af35e33a8d553c9002e223a64ad", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/6740acc0ac8c2af35e33a8d553c9002e223a64ad", "committedDate": "2020-01-13T19:53:56Z", "message": "Cleaner still"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34fb12b4a37b26fd05424629a3b6b4a073708db", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/c34fb12b4a37b26fd05424629a3b6b4a073708db", "committedDate": "2020-01-13T19:54:15Z", "message": "Merge branch 'jbaker/faster_coalescing_supplier' of github.com:palantir/atlasdb into jbaker/faster_coalescing_supplier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a973bab8cb723403369532c2779382460698aab1", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/a973bab8cb723403369532c2779382460698aab1", "committedDate": "2020-01-13T19:54:51Z", "message": "imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e901538ea2cdfc547950c4cc45072569c37b136a", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/e901538ea2cdfc547950c4cc45072569c37b136a", "committedDate": "2020-01-13T19:57:56Z", "message": "Fix the bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f508977a98ef83b2074bfb7748cd9dcf90a103d9", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/f508977a98ef83b2074bfb7748cd9dcf90a103d9", "committedDate": "2020-01-13T19:58:12Z", "message": "Oops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTAzMTg2", "url": "https://github.com/palantir/atlasdb/pull/4508#pullrequestreview-342103186", "createdAt": "2020-01-13T20:01:24Z", "commit": {"oid": "f508977a98ef83b2074bfb7748cd9dcf90a103d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDowMToyNVrOFdC6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDowMToyNVrOFdC6eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwMDc2MQ==", "bodyText": "why are we eating this and not at least logging at lower level?", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366000761", "createdAt": "2020-01-13T20:01:25Z", "author": {"login": "schlosna"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +28,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        Round next = present.awaitDone();\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;\n+\n+        boolean isFirstToArrive() {\n+            return !hasStarted.get() && hasStarted.compareAndSet(false, true);\n         }\n-    }\n \n-    private void resetAndCompleteIfNotCompleted(CompletableFuture<T> future) {\n-        if (future.isDone()) {\n-            return;\n+        Round awaitDone() {\n+            try {\n+                future.join();\n+            } catch (CompletionException e) {\n+                // ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f508977a98ef83b2074bfb7748cd9dcf90a103d9"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654ef39ee53b28c8902c3434a3becfd824ded000", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/654ef39ee53b28c8902c3434a3becfd824ded000", "committedDate": "2020-01-13T20:12:34Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d89f3618c4fd4cf6858b381987caf407b027f7", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/f1d89f3618c4fd4cf6858b381987caf407b027f7", "committedDate": "2020-01-13T20:23:49Z", "message": "Make the benchmark parallel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f46444762b8f2ea2c021709405596272943fb49", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/8f46444762b8f2ea2c021709405596272943fb49", "committedDate": "2020-01-13T20:57:52Z", "message": "Remove the benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c90c299afb04986a595378838af61cd4a87cfc", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/14c90c299afb04986a595378838af61cd4a87cfc", "committedDate": "2020-01-13T20:57:52Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTc4OTEw", "url": "https://github.com/palantir/atlasdb/pull/4508#pullrequestreview-342178910", "createdAt": "2020-01-13T22:19:37Z", "commit": {"oid": "14c90c299afb04986a595378838af61cd4a87cfc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoxOTozN1rOFdGf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyMDo0OFrOFdGiDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA1OTUxOQ==", "bodyText": "I think not, since completing a future does happen before a join on that future. Not 100% confident in this one so agree with leaving it as such.", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366059519", "createdAt": "2020-01-13T22:19:37Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +29,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        awaitDone(present.future);\n+        Round next = present.next;\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NTQxMw=="}, "originalCommit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MDA0Nw==", "bodyText": "Makes sense. I think we should document this in a comment here.", "url": "https://github.com/palantir/atlasdb/pull/4508#discussion_r366060047", "createdAt": "2020-01-13T22:20:48Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -29,52 +29,61 @@\n  * requested; requests will not receive results for computations that started prior to the request.\n  */\n public class CoalescingSupplier<T> implements Supplier<T> {\n-\n     private final Supplier<T> delegate;\n-    private volatile CompletableFuture<T> nextResult = new CompletableFuture<T>();\n-    private final Lock fairLock = new ReentrantLock(true);\n+    private volatile Round nextResult = new Round();\n \n     public CoalescingSupplier(Supplier<T> delegate) {\n         this.delegate = delegate;\n     }\n \n     @Override\n     public T get() {\n-        CompletableFuture<T> future = nextResult;\n-\n-        completeOrWaitForCompletion(future);\n-\n-        return getResult(future);\n+        Round present = nextResult;\n+        if (present.isFirstToArrive()) {\n+            present.execute();\n+            return present.getResult();\n+        }\n+        awaitDone(present.future);\n+        Round next = present.next;\n+        if (next.isFirstToArrive()) {\n+            next.execute();\n+        }\n+        return next.getResult();\n     }\n \n-    private void completeOrWaitForCompletion(CompletableFuture<T> future) {\n-        fairLock.lock();\n-        try {\n-            resetAndCompleteIfNotCompleted(future);\n-        } finally {\n-            fairLock.unlock();\n+    private final class Round {\n+        private final AtomicBoolean hasStarted = new AtomicBoolean(false);\n+        private final CompletableFuture<T> future = new CompletableFuture<>();\n+        private volatile Round next;\n+\n+        boolean isFirstToArrive() {\n+            return !hasStarted.get() && hasStarted.compareAndSet(false, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk5NjA3OQ=="}, "originalCommit": {"oid": "04f70e6939bb51fb581bf87f7b4fce70f1e05eff"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b509f89f643edc9c42b5f703e6b7a3f7c6c3916", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/9b509f89f643edc9c42b5f703e6b7a3f7c6c3916", "committedDate": "2020-01-14T11:29:19Z", "message": "Merge branch 'develop' into jbaker/faster_coalescing_supplier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc24f0411a9166b521aa89098567ac2c219f981c", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/fc24f0411a9166b521aa89098567ac2c219f981c", "committedDate": "2020-01-14T11:29:29Z", "message": "Merge branch 'jbaker/faster_coalescing_supplier' of github.com:palantir/atlasdb into jbaker/faster_coalescing_supplier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3ab37087dae53d150a9e3fa907ea49a2c5e907", "author": {"user": {"login": "j-baker", "name": "James Baker"}}, "url": "https://github.com/palantir/atlasdb/commit/8a3ab37087dae53d150a9e3fa907ea49a2c5e907", "committedDate": "2020-01-14T11:31:31Z", "message": "PR comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzU3NTMz", "url": "https://github.com/palantir/atlasdb/pull/4508#pullrequestreview-342757533", "createdAt": "2020-01-14T18:47:58Z", "commit": {"oid": "8a3ab37087dae53d150a9e3fa907ea49a2c5e907"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2376, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}