{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjI1Njgy", "number": 4723, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMDowMFrOD0NHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyODowM1rOD0bBKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDY3NDQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMDowMFrOGJB62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo0MzoxMlrOGJZvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMTgxNg==", "bodyText": "This isn't ideal, but if this occurs the application is doing something really rather bad.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412121816", "createdAt": "2020-04-21T12:00:00Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {\n+        return new ConfigRefreshable(delegate, () -> {});\n+    }\n+\n+    @SuppressWarnings(\"FutureReturnValueIgnored\")\n+    static ConfigRefreshable createPolling(Supplier<Optional<AtlasDbRuntimeConfig>> config) {\n+        DefaultRefreshable<Optional<AtlasDbRuntimeConfig>> refreshable = new DefaultRefreshable<>(call(config));\n+\n+        ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor();\n+        executor.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshable.update(config.get());\n+                    } catch (Throwable e) {\n+                        // This should not occur in practice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMjE3Nw==", "bodyText": "Or we are really.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412512177", "createdAt": "2020-04-21T21:43:12Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {\n+        return new ConfigRefreshable(delegate, () -> {});\n+    }\n+\n+    @SuppressWarnings(\"FutureReturnValueIgnored\")\n+    static ConfigRefreshable createPolling(Supplier<Optional<AtlasDbRuntimeConfig>> config) {\n+        DefaultRefreshable<Optional<AtlasDbRuntimeConfig>> refreshable = new DefaultRefreshable<>(call(config));\n+\n+        ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor();\n+        executor.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshable.update(config.get());\n+                    } catch (Throwable e) {\n+                        // This should not occur in practice", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMTgxNg=="}, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDY3OTI4OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMTowNlrOGJB9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTozMzowN1rOGJZa7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjQ5Nw==", "bodyText": "This change should be fine, the autogenerated immutables class should still have the same #runtimeConfigSupplier(Supplier) method, so should not be a break for users.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412122497", "createdAt": "2020-04-21T12:01:06Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -202,10 +202,13 @@\n \n     abstract AtlasDbConfig config();\n \n-    @Value.Default\n-    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfigSupplier() {\n-        return Optional::empty;\n-    }\n+    abstract Optional<Refreshable<Optional<AtlasDbRuntimeConfig>>> runtimeConfig();\n+\n+    /**\n+     * @deprecated use {@link #runtimeConfig} instead.\n+     */\n+    @Deprecated\n+    abstract Optional<Supplier<Optional<AtlasDbRuntimeConfig>>> runtimeConfigSupplier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTQwMQ==", "bodyText": "See test in TransactionManagers I added, it's using this method.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412131401", "createdAt": "2020-04-21T12:15:17Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -202,10 +202,13 @@\n \n     abstract AtlasDbConfig config();\n \n-    @Value.Default\n-    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfigSupplier() {\n-        return Optional::empty;\n-    }\n+    abstract Optional<Refreshable<Optional<AtlasDbRuntimeConfig>>> runtimeConfig();\n+\n+    /**\n+     * @deprecated use {@link #runtimeConfig} instead.\n+     */\n+    @Deprecated\n+    abstract Optional<Supplier<Optional<AtlasDbRuntimeConfig>>> runtimeConfigSupplier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjQ5Nw=="}, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MTk2MQ==", "bodyText": "I guess my bigger concern is if someone calls txMgr.runtimeConfigSupplier() though a code search suggests that no one does so.\nIf someone did (especially if that someone is one of our friendly supporting libs) that would be a spicy break \ud83d\udd25but thankfully looks like that's not the case.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412461961", "createdAt": "2020-04-21T20:16:54Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -202,10 +202,13 @@\n \n     abstract AtlasDbConfig config();\n \n-    @Value.Default\n-    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfigSupplier() {\n-        return Optional::empty;\n-    }\n+    abstract Optional<Refreshable<Optional<AtlasDbRuntimeConfig>>> runtimeConfig();\n+\n+    /**\n+     * @deprecated use {@link #runtimeConfig} instead.\n+     */\n+    @Deprecated\n+    abstract Optional<Supplier<Optional<AtlasDbRuntimeConfig>>> runtimeConfigSupplier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjQ5Nw=="}, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwNjg2MA==", "bodyText": "Hmmm, I don't think runtimeConfigSupplier() would've compiled before? immutables shouldn't generate it, it only generates them when the type is Optional of something.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412506860", "createdAt": "2020-04-21T21:33:07Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -202,10 +202,13 @@\n \n     abstract AtlasDbConfig config();\n \n-    @Value.Default\n-    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfigSupplier() {\n-        return Optional::empty;\n-    }\n+    abstract Optional<Refreshable<Optional<AtlasDbRuntimeConfig>>> runtimeConfig();\n+\n+    /**\n+     * @deprecated use {@link #runtimeConfig} instead.\n+     */\n+    @Deprecated\n+    abstract Optional<Supplier<Optional<AtlasDbRuntimeConfig>>> runtimeConfigSupplier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjQ5Nw=="}, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDY4MTg1OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMTozNFrOGJB-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTo0Mjo0NFrOGJZuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjg0Mg==", "bodyText": "This maintains the current setup, where it's possible to not provide the runtime config (used for InMemory configuration).", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412122842", "createdAt": "2020-04-21T12:01:34Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -279,6 +282,12 @@ LockWatchingCache lockWatchingCache() {\n         thread.start();\n     };\n \n+    @Value.Check\n+    protected void check() {\n+        Preconditions.checkState(!(runtimeConfigSupplier().isPresent() && runtimeConfig().isPresent()),\n+                \"Either Refreshable or Supplier of runtime config must be provided or none, but not both\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjMyOA==", "bodyText": "nit: probably enough to just say Cannot provide both Refreshable and Supplier of runtime config?", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412462328", "createdAt": "2020-04-21T20:17:36Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -279,6 +282,12 @@ LockWatchingCache lockWatchingCache() {\n         thread.start();\n     };\n \n+    @Value.Check\n+    protected void check() {\n+        Preconditions.checkState(!(runtimeConfigSupplier().isPresent() && runtimeConfig().isPresent()),\n+                \"Either Refreshable or Supplier of runtime config must be provided or none, but not both\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjg0Mg=="}, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMTkzNA==", "bodyText": "Done", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412511934", "createdAt": "2020-04-21T21:42:44Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -279,6 +282,12 @@ LockWatchingCache lockWatchingCache() {\n         thread.start();\n     };\n \n+    @Value.Check\n+    protected void check() {\n+        Preconditions.checkState(!(runtimeConfigSupplier().isPresent() && runtimeConfig().isPresent()),\n+                \"Either Refreshable or Supplier of runtime config must be provided or none, but not both\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMjg0Mg=="}, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDY4NTc1OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMjozNFrOGJCBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjowMjozNFrOGJCBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyMzQyOA==", "bodyText": "I removed all uses of Suppliers.compose in this class.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412123428", "createdAt": "2020-04-21T12:02:34Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -375,11 +388,11 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n \n             // Even if sweep queue writes are enabled, unless targeted sweep is enabled we generally still want to\n             // at least retain the option to perform background sweep, which requires updating the priority table.\n-            if (!targetedSweepIsFullyEnabled()) {\n+            if (!targetedSweepIsFullyEnabled(config(), runtime)) {\n                 kvs = SweepStatsKeyValueService.create(kvs,\n                         new TimelockTimestampServiceAdapter(lockAndTimestampServices.timelock()),\n-                        Suppliers.compose(SweepConfig::writeThreshold, sweepConfig::get),\n-                        Suppliers.compose(SweepConfig::writeSizeThreshold, sweepConfig::get)\n+                        sweepConfig.map(SweepConfig::writeThreshold),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec50f30351e1fa17835d70dabd6bde561e01beb6"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTYxMTc5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNTowMzoxMFrOGJKq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0MjozNFrOGJVY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ==", "bodyText": "Seems kinda odd to wrap the refreshable in this way. I think it was expose a way to convert a supplier to an optional using some executor, and handle the lifecycle of the executor seperately", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412265171", "createdAt": "2020-04-21T15:03:10Z", "author": {"login": "ferozco"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzMDYxMA==", "bodyText": "Can you explain a bit more? I don\u2019t quite understand the suggested solution", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412330610", "createdAt": "2020-04-21T17:00:53Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NTM2OQ==", "bodyText": "The suggestion is to just get rid of the extra level of abstraction and manage the lifecycle of the executor used to update the refreshables separately. This is especially beneficial since it allows you to reuse the executor across refreshables and allows you to avoid unnecessarily wrapping existing refreshables.\nHence:\nConfigRefreshable<T> config1 = ConfigRefreshable.createPolling(mySupplier1);\nConfigRefreshable<T> config2 = ConfigRefreshable.createPolling(mySupplier2);\n...\n\nconfig1.close();\nconfig2.close();\n\nbecomes:\nScheduledExecutorService refreshableExecutor = PTExecutors.newSingleThreadScheduledExecutor();\n\nRefreshable<T> config1 = Refreshables.create(mySupplier1, refreshableExecutor);\nRefreshable<T> config2 = Refreshables.create(mySupplier2, refreshableExecutor);\n...\n\nrefreshableExecutor.shutdown()", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412365369", "createdAt": "2020-04-21T17:49:03Z", "author": {"login": "ferozco"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwMzg4NQ==", "bodyText": "I don\u2019t expect to be using refreshables anywhere else. Handling this separately in TransactionManagers will be messy, because you don\u2019t create the executor if someone provides the Refreshable. I can see what it would look like though", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412403885", "createdAt": "2020-04-21T18:45:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzNzUxNA==", "bodyText": "So I tried to come up with something that's not messy and I can't: the fact that you only sometimes create the executor, and then you need to add it to the closeables list AND THEN, but only after TransactionManager is created, call #shutdownCallbacks with it makes me not want to do it.\nThis is actually a nice small abstraction of a closeable refreshable, and everything falls through nicely.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412437514", "createdAt": "2020-04-21T19:37:11Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzODIyNg==", "bodyText": "Instead, I don't expose any special wrap methods, but instead the only way to create this special refreshable is from the TransactionManagers builder.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412438226", "createdAt": "2020-04-21T19:38:20Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQzOTgxOQ==", "bodyText": "And if we excavate this so we can remove the deprecated method, we'll just remove all this code.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412439819", "createdAt": "2020-04-21T19:41:00Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MDgzMA==", "bodyText": "sure, whatever you're happy with", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412440830", "createdAt": "2020-04-21T19:42:34Z", "author": {"login": "ferozco"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/ConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class ConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+\n+    private final Refreshable<Optional<AtlasDbRuntimeConfig>> delegate;\n+    private final Runnable closer;\n+\n+    private ConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate;\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<Optional<AtlasDbRuntimeConfig>> refreshable() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static ConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI2NTE3MQ=="}, "originalCommit": {"oid": "bc02955babc7055a937b95ea95bc9c5dd1821b50"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjc4NzQ4OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/AtlasDbRuntimeConfigRefreshable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0NzoxNlrOGJVkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTozNDozNFrOGJZd9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc0Mg==", "bodyText": "Famous last words: the danger here is that we write some sort of weird update code (since DefaultRefreshable.update propagates to all the children) and this throws, and we won't find out about it. This is a bit of a change in behavior, but I don't feel strongly that this is such high risk.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412443742", "createdAt": "2020-04-21T19:47:16Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/AtlasDbRuntimeConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class AtlasDbRuntimeConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(AtlasDbRuntimeConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+    private static final Duration GRACEFUL_SHUTDOWN = Duration.ofSeconds(5);\n+    private static final AtlasDbRuntimeConfig DEFAULT_RUNTIME = AtlasDbRuntimeConfig.defaultRuntimeConfig();\n+\n+    private final Refreshable<AtlasDbRuntimeConfig> delegate;\n+    private final Runnable closer;\n+\n+    private AtlasDbRuntimeConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate.map(config -> config.orElse(DEFAULT_RUNTIME));\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<AtlasDbRuntimeConfig> config() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static AtlasDbRuntimeConfigRefreshable create(TransactionManagers builder) {\n+        return builder.runtimeConfig()\n+                .map(AtlasDbRuntimeConfigRefreshable::wrap)\n+                .orElseGet(() -> {\n+                    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfig = builder.runtimeConfigSupplier()\n+                            .orElse(Optional::empty);\n+                    return AtlasDbRuntimeConfigRefreshable.createPolling(runtimeConfig);\n+                });\n+    }\n+\n+    private static AtlasDbRuntimeConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {\n+        return new AtlasDbRuntimeConfigRefreshable(delegate, () -> {\n+        });\n+    }\n+\n+    @SuppressWarnings(\"FutureReturnValueIgnored\")\n+    private static AtlasDbRuntimeConfigRefreshable createPolling(Supplier<Optional<AtlasDbRuntimeConfig>> config) {\n+        DefaultRefreshable<Optional<AtlasDbRuntimeConfig>> refreshable = new DefaultRefreshable<>(call(config));\n+\n+        ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor();\n+        executor.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshable.update(config.get());\n+                    } catch (Throwable e) {\n+                        // This should not occur in practice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ3MjA4Ng==", "bodyText": "Not sure I follow: do we mean a subscriber? If a subscriber throws it does look like the world could be in an inconsistent state, but right now I think we're fine", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412472086", "createdAt": "2020-04-21T20:33:52Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/AtlasDbRuntimeConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class AtlasDbRuntimeConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(AtlasDbRuntimeConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+    private static final Duration GRACEFUL_SHUTDOWN = Duration.ofSeconds(5);\n+    private static final AtlasDbRuntimeConfig DEFAULT_RUNTIME = AtlasDbRuntimeConfig.defaultRuntimeConfig();\n+\n+    private final Refreshable<AtlasDbRuntimeConfig> delegate;\n+    private final Runnable closer;\n+\n+    private AtlasDbRuntimeConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate.map(config -> config.orElse(DEFAULT_RUNTIME));\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<AtlasDbRuntimeConfig> config() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static AtlasDbRuntimeConfigRefreshable create(TransactionManagers builder) {\n+        return builder.runtimeConfig()\n+                .map(AtlasDbRuntimeConfigRefreshable::wrap)\n+                .orElseGet(() -> {\n+                    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfig = builder.runtimeConfigSupplier()\n+                            .orElse(Optional::empty);\n+                    return AtlasDbRuntimeConfigRefreshable.createPolling(runtimeConfig);\n+                });\n+    }\n+\n+    private static AtlasDbRuntimeConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {\n+        return new AtlasDbRuntimeConfigRefreshable(delegate, () -> {\n+        });\n+    }\n+\n+    @SuppressWarnings(\"FutureReturnValueIgnored\")\n+    private static AtlasDbRuntimeConfigRefreshable createPolling(Supplier<Optional<AtlasDbRuntimeConfig>> config) {\n+        DefaultRefreshable<Optional<AtlasDbRuntimeConfig>> refreshable = new DefaultRefreshable<>(call(config));\n+\n+        ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor();\n+        executor.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshable.update(config.get());\n+                    } catch (Throwable e) {\n+                        // This should not occur in practice", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc0Mg=="}, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwNzYzOA==", "bodyText": "Yes, I mean that Refreshables remember everyone who called #map on them and propagate the updates. Yes you could be in an inconsistent state, but I think this is by design of refreshables.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412507638", "createdAt": "2020-04-21T21:34:34Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/AtlasDbRuntimeConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class AtlasDbRuntimeConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(AtlasDbRuntimeConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+    private static final Duration GRACEFUL_SHUTDOWN = Duration.ofSeconds(5);\n+    private static final AtlasDbRuntimeConfig DEFAULT_RUNTIME = AtlasDbRuntimeConfig.defaultRuntimeConfig();\n+\n+    private final Refreshable<AtlasDbRuntimeConfig> delegate;\n+    private final Runnable closer;\n+\n+    private AtlasDbRuntimeConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate.map(config -> config.orElse(DEFAULT_RUNTIME));\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<AtlasDbRuntimeConfig> config() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static AtlasDbRuntimeConfigRefreshable create(TransactionManagers builder) {\n+        return builder.runtimeConfig()\n+                .map(AtlasDbRuntimeConfigRefreshable::wrap)\n+                .orElseGet(() -> {\n+                    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfig = builder.runtimeConfigSupplier()\n+                            .orElse(Optional::empty);\n+                    return AtlasDbRuntimeConfigRefreshable.createPolling(runtimeConfig);\n+                });\n+    }\n+\n+    private static AtlasDbRuntimeConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {\n+        return new AtlasDbRuntimeConfigRefreshable(delegate, () -> {\n+        });\n+    }\n+\n+    @SuppressWarnings(\"FutureReturnValueIgnored\")\n+    private static AtlasDbRuntimeConfigRefreshable createPolling(Supplier<Optional<AtlasDbRuntimeConfig>> config) {\n+        DefaultRefreshable<Optional<AtlasDbRuntimeConfig>> refreshable = new DefaultRefreshable<>(call(config));\n+\n+        ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor();\n+        executor.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshable.update(config.get());\n+                    } catch (Throwable e) {\n+                        // This should not occur in practice", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc0Mg=="}, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjc4NzgyOnYy", "diffSide": "LEFT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/debug/TransactionPostMortemRunner.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0NzoyMVrOGJVkig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjowOTowMlrOGJakpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc4Ng==", "bodyText": "Is this intentional? Seems strange that we'd deliberately make this not live reload", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412443786", "createdAt": "2020-04-21T19:47:21Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/debug/TransactionPostMortemRunner.java", "diffHunk": "@@ -69,7 +70,7 @@ public TransactionPostMortemRunner(\n             TransactionManager transactionManager,\n             TableReference tableReference,\n             AtlasDbConfig install,\n-            Supplier<AtlasDbRuntimeConfig> runtime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMDA0Nw==", "bodyText": "This is only instantiated in test code from what I can see? So it didn't make sense to keep it this way, and it was calling ServerListConfigs.parseInstallAndRuntimeConfigs, which now takes a Refreshable.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412510047", "createdAt": "2020-04-21T21:39:07Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/debug/TransactionPostMortemRunner.java", "diffHunk": "@@ -69,7 +70,7 @@ public TransactionPostMortemRunner(\n             TransactionManager transactionManager,\n             TableReference tableReference,\n             AtlasDbConfig install,\n-            Supplier<AtlasDbRuntimeConfig> runtime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc4Ng=="}, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMDIwNw==", "bodyText": "Ah, nevermind, this is called in an internal product at runtime. Ok, lemme rejig this", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412510207", "createdAt": "2020-04-21T21:39:26Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/debug/TransactionPostMortemRunner.java", "diffHunk": "@@ -69,7 +70,7 @@ public TransactionPostMortemRunner(\n             TransactionManager transactionManager,\n             TableReference tableReference,\n             AtlasDbConfig install,\n-            Supplier<AtlasDbRuntimeConfig> runtime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc4Ng=="}, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxMTM5Ng==", "bodyText": "I'll change into Refreshable and we'll need to fixup internal product to do this properly.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412511396", "createdAt": "2020-04-21T21:41:36Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/debug/TransactionPostMortemRunner.java", "diffHunk": "@@ -69,7 +70,7 @@ public TransactionPostMortemRunner(\n             TransactionManager transactionManager,\n             TableReference tableReference,\n             AtlasDbConfig install,\n-            Supplier<AtlasDbRuntimeConfig> runtime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc4Ng=="}, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNTczMg==", "bodyText": "Donezo", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412525732", "createdAt": "2020-04-21T22:09:02Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/debug/TransactionPostMortemRunner.java", "diffHunk": "@@ -69,7 +70,7 @@ public TransactionPostMortemRunner(\n             TransactionManager transactionManager,\n             TableReference tableReference,\n             AtlasDbConfig install,\n-            Supplier<AtlasDbRuntimeConfig> runtime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0Mzc4Ng=="}, "originalCommit": {"oid": "f481f13e73c7768a26df544668a386734364d801"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjk0NjIxOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyNjozNFrOGJXCCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTozNTo1M1rOGJZgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NzcyMg==", "bodyText": "I think you drive-by fixed a bug here! Previously if you don't specify a runtime config, targeted sweep is enabled in practice, but the check here thinks it is disabled. Now it correctly recognises that targeted sweep is enabled by default.", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412467722", "createdAt": "2020-04-21T20:26:34Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -538,9 +550,11 @@ TransactionConfig withConsolidatedGrabImmutableTsLockFlag(TransactionConfig tran\n \n     }\n \n-    private boolean targetedSweepIsFullyEnabled() {\n-        return config().targetedSweep().enableSweepQueueWrites()\n-                && runtimeConfigSupplier().get().map(config -> config.targetedSweep().enabled()).orElse(false);\n+    private static boolean targetedSweepIsFullyEnabled(\n+            AtlasDbConfig installConfig,\n+            Supplier<AtlasDbRuntimeConfig> runtime) {\n+        return installConfig.targetedSweep().enableSweepQueueWrites()\n+                && runtime.get().targetedSweep().enabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eedd86888e2e76d5566bdc9e0987770500b77c"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwODMyMg==", "bodyText": "Yep", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412508322", "createdAt": "2020-04-21T21:35:53Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -538,9 +550,11 @@ TransactionConfig withConsolidatedGrabImmutableTsLockFlag(TransactionConfig tran\n \n     }\n \n-    private boolean targetedSweepIsFullyEnabled() {\n-        return config().targetedSweep().enableSweepQueueWrites()\n-                && runtimeConfigSupplier().get().map(config -> config.targetedSweep().enabled()).orElse(false);\n+    private static boolean targetedSweepIsFullyEnabled(\n+            AtlasDbConfig installConfig,\n+            Supplier<AtlasDbRuntimeConfig> runtime) {\n+        return installConfig.targetedSweep().enableSweepQueueWrites()\n+                && runtime.get().targetedSweep().enabled();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NzcyMg=="}, "originalCommit": {"oid": "41eedd86888e2e76d5566bdc9e0987770500b77c"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjk1MjA4OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/AtlasDbRuntimeConfigRefreshable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyODowM1rOGJXFaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyODowM1rOGJXFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2ODU4Nw==", "bodyText": "nit: I'd prefer warn, this is probably not super actionable for us?", "url": "https://github.com/palantir/atlasdb/pull/4723#discussion_r412468587", "createdAt": "2020-04-21T20:28:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/AtlasDbRuntimeConfigRefreshable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.config.AtlasDbRuntimeConfig;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.palantir.refreshable.DefaultRefreshable;\n+import com.palantir.refreshable.Refreshable;\n+\n+final class AtlasDbRuntimeConfigRefreshable implements AutoCloseable {\n+\n+    private static final Logger log = LoggerFactory.getLogger(AtlasDbRuntimeConfigRefreshable.class);\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(1);\n+    private static final Duration GRACEFUL_SHUTDOWN = Duration.ofSeconds(5);\n+    private static final AtlasDbRuntimeConfig DEFAULT_RUNTIME = AtlasDbRuntimeConfig.defaultRuntimeConfig();\n+\n+    private final Refreshable<AtlasDbRuntimeConfig> delegate;\n+    private final Runnable closer;\n+\n+    private AtlasDbRuntimeConfigRefreshable(\n+            Refreshable<Optional<AtlasDbRuntimeConfig>> delegate,\n+            Runnable closer) {\n+        this.delegate = delegate.map(config -> config.orElse(DEFAULT_RUNTIME));\n+        this.closer = closer;\n+    }\n+\n+    public Refreshable<AtlasDbRuntimeConfig> config() {\n+        return delegate;\n+    }\n+\n+    @Override\n+    public void close() {\n+        closer.run();\n+    }\n+\n+    static AtlasDbRuntimeConfigRefreshable create(TransactionManagers builder) {\n+        return builder.runtimeConfig()\n+                .map(AtlasDbRuntimeConfigRefreshable::wrap)\n+                .orElseGet(() -> {\n+                    Supplier<Optional<AtlasDbRuntimeConfig>> runtimeConfig = builder.runtimeConfigSupplier()\n+                            .orElse(Optional::empty);\n+                    return AtlasDbRuntimeConfigRefreshable.createPolling(runtimeConfig);\n+                });\n+    }\n+\n+    private static AtlasDbRuntimeConfigRefreshable wrap(Refreshable<Optional<AtlasDbRuntimeConfig>> delegate) {\n+        return new AtlasDbRuntimeConfigRefreshable(delegate, () -> {\n+        });\n+    }\n+\n+    @SuppressWarnings(\"FutureReturnValueIgnored\")\n+    private static AtlasDbRuntimeConfigRefreshable createPolling(Supplier<Optional<AtlasDbRuntimeConfig>> config) {\n+        DefaultRefreshable<Optional<AtlasDbRuntimeConfig>> refreshable = new DefaultRefreshable<>(call(config));\n+\n+        ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor();\n+        executor.scheduleWithFixedDelay(\n+                () -> {\n+                    try {\n+                        refreshable.update(config.get());\n+                    } catch (Throwable e) {\n+                        // This should not occur in practice\n+                        log.error(\"Failed to reload runtime config\", e);\n+                    }\n+                },\n+                REFRESH_INTERVAL.toNanos(),\n+                REFRESH_INTERVAL.toNanos(),\n+                TimeUnit.NANOSECONDS);\n+\n+        return new AtlasDbRuntimeConfigRefreshable(refreshable, () -> {\n+            if (!MoreExecutors.shutdownAndAwaitTermination(\n+                    executor, GRACEFUL_SHUTDOWN.toMillis(), TimeUnit.MILLISECONDS)) {\n+                log.error(\"Executor did not terminate within graceful shutdown duration\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41eedd86888e2e76d5566bdc9e0987770500b77c"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3070, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}