{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzk2Nzgw", "number": 5032, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowNTowNVrOEtgGGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoxMTo1MFrOEtj0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTQ3MjI0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowNTowNVrOHhUxXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowODoyNlrOHhX3yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTM3Mw==", "bodyText": "If I understand correctly, this just updates a metric? Can you rename to updateSweepDelayMetric to make sure it is unambiguous?\nAlso, will this be an expensive metric? Just making sure we're not going back to our old $$$ ways.", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504705373", "createdAt": "2020-10-14T14:05:05Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -137,6 +137,10 @@ public void registerEntriesReadInBatch(ShardAndStrategy shardStrategy, long batc\n         updateMetricsIfPresent(shardStrategy, metrics -> metrics.registerEntriesReadInBatch(batchSize));\n     }\n \n+    public void updateSweepDelay(ShardAndStrategy shardStrategy, long delay) {\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateSweepDelay(delay));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjE2OA==", "bodyText": "it updates sweep delay only. I didn't include metrics from the beginning to try to avoid costs and that got us into this mess in the first place so not going to worry about it -- we can remove it when we have confidence it works well and it is just a long gauge per strategy", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504756168", "createdAt": "2020-10-14T15:08:26Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -137,6 +137,10 @@ public void registerEntriesReadInBatch(ShardAndStrategy shardStrategy, long batc\n         updateMetricsIfPresent(shardStrategy, metrics -> metrics.registerEntriesReadInBatch(batchSize));\n     }\n \n+    public void updateSweepDelay(ShardAndStrategy shardStrategy, long delay) {\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateSweepDelay(delay));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTM3Mw=="}, "originalCommit": {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTQ3Mzk5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDowNToyMVrOHhUyTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowOTowOVrOHhanJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg==", "bodyText": "nit: as above, rename to sweepDelayMetric", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504705612", "createdAt": "2020-10-14T14:05:21Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -172,6 +176,7 @@ private static String getTagForStrategy(SweeperStrategy strategy) {\n         private final Gauge<Long> millisSinceLastSwept;\n         private final SweepOutcomeMetrics outcomeMetrics;\n         private final SlidingWindowMeanGauge batchSizeMean;\n+        private final CurrentValueMetric<Long> sweepDelay;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjUyMQ==", "bodyText": "ah now I understand, will do \ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504756521", "createdAt": "2020-10-14T15:08:54Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -172,6 +176,7 @@ private static String getTagForStrategy(SweeperStrategy strategy) {\n         private final Gauge<Long> millisSinceLastSwept;\n         private final SweepOutcomeMetrics outcomeMetrics;\n         private final SlidingWindowMeanGauge batchSizeMean;\n+        private final CurrentValueMetric<Long> sweepDelay;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg=="}, "originalCommit": {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3Mjc3OA==", "bodyText": "you didn't rename this", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504772778", "createdAt": "2020-10-14T15:29:58Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -172,6 +176,7 @@ private static String getTagForStrategy(SweeperStrategy strategy) {\n         private final Gauge<Long> millisSinceLastSwept;\n         private final SweepOutcomeMetrics outcomeMetrics;\n         private final SlidingWindowMeanGauge batchSizeMean;\n+        private final CurrentValueMetric<Long> sweepDelay;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg=="}, "originalCommit": {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMTA2MA==", "bodyText": "ping \ud83d\ude05", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504801060", "createdAt": "2020-10-14T16:09:09Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -172,6 +176,7 @@ private static String getTagForStrategy(SweeperStrategy strategy) {\n         private final Gauge<Long> millisSinceLastSwept;\n         private final SweepOutcomeMetrics outcomeMetrics;\n         private final SlidingWindowMeanGauge batchSizeMean;\n+        private final CurrentValueMetric<Long> sweepDelay;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg=="}, "originalCommit": {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTYxNzMzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozNDoyNVrOHhWMTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxMToxMVrOHhYAIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyODY1NA==", "bodyText": "nit: overloaded methods should be next to each other", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504728654", "createdAt": "2020-10-14T14:34:25Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -278,13 +285,17 @@ private void updateProgressForShard(int shard, long sweptTs) {\n             lastSweptTs.update(shard, sweptTs);\n         }\n \n-        public void registerOccurrenceOf(SweepOutcome outcome) {\n+        private void registerOccurrenceOf(SweepOutcome outcome) {\n             outcomeMetrics.registerOccurrenceOf(outcome);\n         }\n \n-        public void registerEntriesReadInBatch(long batchSize) {\n+        private void registerEntriesReadInBatch(long batchSize) {\n             batchSizeMean.update(batchSize);\n         }\n+\n+        private void updateSweepDelay(long delay) {\n+            sweepDelay.setValue(delay);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51aaccbc47153588f864a548cac64647be793179"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1ODMwNw==", "bodyText": "they are in the same order as the metrics", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504758307", "createdAt": "2020-10-14T15:11:11Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -278,13 +285,17 @@ private void updateProgressForShard(int shard, long sweptTs) {\n             lastSweptTs.update(shard, sweptTs);\n         }\n \n-        public void registerOccurrenceOf(SweepOutcome outcome) {\n+        private void registerOccurrenceOf(SweepOutcome outcome) {\n             outcomeMetrics.registerOccurrenceOf(outcome);\n         }\n \n-        public void registerEntriesReadInBatch(long batchSize) {\n+        private void registerEntriesReadInBatch(long batchSize) {\n             batchSizeMean.update(batchSize);\n         }\n+\n+        private void updateSweepDelay(long delay) {\n+            sweepDelay.setValue(delay);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyODY1NA=="}, "originalCommit": {"oid": "51aaccbc47153588f864a548cac64647be793179"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTYyNjU4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/metrics/targeted-sweep.yml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDozNTo1OFrOHhWR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToyNzoxMFrOHhYwEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMDA2Nw==", "bodyText": "Can we get a numThreads metric? Does that still scale?", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504730067", "createdAt": "2020-10-14T14:35:58Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/metrics/targeted-sweep.yml", "diffHunk": "@@ -49,3 +49,8 @@ namespaces:\n         tags:\n           - strategy\n         docs: Mean number of entries read in a batch from the targeted sweep queue.\n+      sweepDelay:\n+        type: gauge\n+        tags:\n+          - strategy\n+        docs: The latest delay between iterations of targeted sweep.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51aaccbc47153588f864a548cac64647be793179"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NzM5MQ==", "bodyText": "We removed the thread scaling part because we can't do it without implementing some nontrivial scheduler, so it is back to using the install config", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504757391", "createdAt": "2020-10-14T15:09:59Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/metrics/targeted-sweep.yml", "diffHunk": "@@ -49,3 +49,8 @@ namespaces:\n         tags:\n           - strategy\n         docs: Mean number of entries read in a batch from the targeted sweep queue.\n+      sweepDelay:\n+        type: gauge\n+        tags:\n+          - strategy\n+        docs: The latest delay between iterations of targeted sweep.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMDA2Nw=="}, "originalCommit": {"oid": "51aaccbc47153588f864a548cac64647be793179"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2Mzk2NA==", "bodyText": "that's a bit of a pain - presumably the change of sweep delay will mean that if someone has configured more threads than they should, they will mostly be idle (presumably desirable, as that's still less work being done)? Does this mean we should make the default more threads, or still go through a bump-when-we-need workflow?", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504763964", "createdAt": "2020-10-14T15:18:38Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/metrics/targeted-sweep.yml", "diffHunk": "@@ -49,3 +49,8 @@ namespaces:\n         tags:\n           - strategy\n         docs: Mean number of entries read in a batch from the targeted sweep queue.\n+      sweepDelay:\n+        type: gauge\n+        tags:\n+          - strategy\n+        docs: The latest delay between iterations of targeted sweep.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMDA2Nw=="}, "originalCommit": {"oid": "51aaccbc47153588f864a548cac64647be793179"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MDU3Nw==", "bodyText": "Yeah, they will be idle, but tbh no one really configures this unnecessarily. Bumping manually is sad, but implementing a scheduler is probably not something we want to get into right now.", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504770577", "createdAt": "2020-10-14T15:27:10Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/metrics/targeted-sweep.yml", "diffHunk": "@@ -49,3 +49,8 @@ namespaces:\n         tags:\n           - strategy\n         docs: Mean number of entries read in a batch from the targeted sweep queue.\n+      sweepDelay:\n+        type: gauge\n+        tags:\n+          - strategy\n+        docs: The latest delay between iterations of targeted sweep.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMDA2Nw=="}, "originalCommit": {"oid": "51aaccbc47153588f864a548cac64647be793179"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTkwODI4OnYy", "diffSide": "LEFT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/sweep/queue/SweepDelayTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozMjo0NVrOHhZBAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozMjo0NVrOHhZBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDkxNA==", "bodyText": "This was passing because it was 1 \ud83d\ude13", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504774914", "createdAt": "2020-10-14T15:32:45Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/sweep/queue/SweepDelayTest.java", "diffHunk": "@@ -33,69 +34,81 @@\n             .success((BATCH_CELLS_LOW_THRESHOLD + SWEEP_BATCH_SIZE) / 2);\n     private static final long INITIAL_DELAY = 250L;\n \n-    private SweepDelay delay = new SweepDelay(INITIAL_DELAY);\n+    private final AtomicLong metrics = new AtomicLong();\n+    private SweepDelay delay = new SweepDelay(INITIAL_DELAY, metrics::set);\n \n     @Test\n     public void iterationWithNormalBatchReturnsInitialPause() {\n         assertThat(delay.getNextPause(SUCCESS)).isEqualTo(INITIAL_DELAY);\n+        assertThat(metrics).hasValue(INITIAL_DELAY);\n     }\n \n     @Test\n     public void configurationBelowMinimumIsSetToMinimum() {\n-        SweepDelay negativeDelay = new SweepDelay(-5L);\n+        SweepDelay negativeDelay = new SweepDelay(-5L, metrics::set);\n \n         assertThat(negativeDelay.getNextPause(SUCCESS)).isEqualTo(MIN_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(MIN_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void configurationAboveDefaultMaximumIsRespected() {\n-        SweepDelay largeDelay = new SweepDelay(2 * DEFAULT_MAX_PAUSE_MILLIS);\n+        SweepDelay largeDelay = new SweepDelay(2 * DEFAULT_MAX_PAUSE_MILLIS, metrics::set);\n \n         assertThat(largeDelay.getNextPause(SUCCESS)).isEqualTo(2 * DEFAULT_MAX_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(2 * DEFAULT_MAX_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void unableToAcquireShardReturnsMaxPause() {\n         assertThat(delay.getNextPause(SweepIterationResults.unableToAcquireShard()))\n                 .isEqualTo(DEFAULT_MAX_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(DEFAULT_MAX_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void insufficientConsistencyReturnsBackoff() {\n         assertThat(delay.getNextPause(SweepIterationResults.insufficientConsistency())).isEqualTo(BACKOFF);\n+        assertThat(metrics).hasValue(BACKOFF);\n     }\n \n     @Test\n     public void otherErrorReturnsMaxPause() {\n         assertThat(delay.getNextPause(SweepIterationResults.otherError())).isEqualTo(DEFAULT_MAX_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(DEFAULT_MAX_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void disabledReturnsBackoff() {\n         assertThat(delay.getNextPause(SweepIterationResults.disabled())).isEqualTo(BACKOFF);\n+        assertThat(metrics).hasValue(BACKOFF);\n     }\n \n     @Test\n     public void iterationWithSmallBatchIncreasesPause() {\n         assertThat(delay.getNextPause(SUCCESS_TOO_FAST)).isGreaterThan(INITIAL_DELAY);\n+        assertThat(metrics).hasValueGreaterThan(INITIAL_DELAY);\n     }\n \n     @Test\n     public void iterationWithFullBatchReducesPause() {\n         assertThat(delay.getNextPause(SUCCESS_TOO_SLOW)).isLessThan(INITIAL_DELAY);\n+        assertThat(metrics).hasValueLessThan(INITIAL_DELAY);\n     }\n \n     @Test\n     public void consistentSmallBatchesGravitatesTowardsMaximumPause() {\n         sweepTwentyIterationsWithResult(SUCCESS_TOO_FAST);\n         assertThat(delay.getNextPause(SUCCESS_TOO_FAST))\n                 .isGreaterThanOrEqualTo((long) (DEFAULT_MAX_PAUSE_MILLIS * 0.95));\n+        assertThat(metrics).hasValueGreaterThanOrEqualTo((long) (DEFAULT_MAX_PAUSE_MILLIS * 0.95));\n     }\n \n     @Test\n     public void consistentFullBatchesGravitatesTowardsMinimumPause() {\n         sweepTwentyIterationsWithResult(SUCCESS_TOO_SLOW);\n-        assertThat(delay.getNextPause(SUCCESS_TOO_SLOW)).isGreaterThanOrEqualTo((long) (MIN_PAUSE_MILLIS * 1.05));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872b88af248dc9fe999b61487df7f520b8467ad1"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjA2OTk4OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/AtlasDbMetricNames.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowODo0NVrOHhamIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowODo0NVrOHhamIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMDgwMA==", "bodyText": "\ud83d\ude22", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504800800", "createdAt": "2020-10-14T16:08:45Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/AtlasDbMetricNames.java", "diffHunk": "@@ -73,7 +74,8 @@ private CellFilterMetrics() {\n             SWEEP_TS,\n             LAST_SWEPT_TS,\n             LAG_MILLIS,\n-            BATCH_SIZE_MEAN);\n+            BATCH_SIZE_MEAN,\n+            SWEEP_DELAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872b88af248dc9fe999b61487df7f520b8467ad1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjA4MjUzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/queue/SweepDelay.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoxMTo1MFrOHhaueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoxMTo1MFrOHhaueA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMjkzNg==", "bodyText": "nit: this name is a bit meh, I would normally name this like sweepDelayMetricsUpdater or something. Not too concerned as it's in the SweepDelay class.", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504802936", "createdAt": "2020-10-14T16:11:50Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/queue/SweepDelay.java", "diffHunk": "@@ -41,11 +42,13 @@\n \n     private final long initialPause;\n     private final long maxPauseMillis;\n+    private final LongConsumer updateMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872b88af248dc9fe999b61487df7f520b8467ad1"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2634, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}