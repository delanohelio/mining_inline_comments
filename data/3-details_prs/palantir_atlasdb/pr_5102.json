{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTQ3NTQ3", "number": 5102, "title": "[LW] ETE tests", "bodyText": "Goals (and why):\n\nTest lock watches ETE. This has already discovered one bug!\n\nImplementation Description (bullets):\n\nImplement using the same pattern as other Atlas ETEs.\n\nTesting (What was existing testing like?  What have you done to improve it?):\n\nThis is a testing PR.\n\nConcerns (what feedback would you like?):\n\nThere are some annoying constraints - I'd like to cause a leader election but I don't think that is possible.\n\nWhere should we start reviewing?:\n\nLockWatchEteTest\n\nPriority (whenever / two weeks / yesterday):\nProbably within a week, but not urgent.", "createdAt": "2020-11-05T15:31:54Z", "url": "https://github.com/palantir/atlasdb/pull/5102", "merged": true, "mergeCommit": {"oid": "10d03f7aa0f8c3171dd8bbbd2e74de716d612fae"}, "closed": true, "closedAt": "2020-11-27T17:04:38Z", "author": {"login": "Jolyon-S"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZf95AAH2gAyNTE2MTQ3NTQ3OjZiOTA4ZjIwNTI5YzQ2YjNiYzVmYTYyMjBkNmVlZTMwZTU3NGE4MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgqbJ0gFqTU0MDA5ODM4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b908f20529c46b3bc5fa6220d6eee30e574a835", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/6b908f20529c46b3bc5fa6220d6eee30e574a835", "committedDate": "2020-11-05T10:40:00Z", "message": "actually filter out the right token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7fe6271790c889988405a3490b5885ab2863e9", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/db7fe6271790c889988405a3490b5885ab2863e9", "committedDate": "2020-11-05T10:40:00Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7", "committedDate": "2020-11-05T15:30:17Z", "message": "fresh start"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzgzODE2", "url": "https://github.com/palantir/atlasdb/pull/5102#pullrequestreview-524383816", "createdAt": "2020-11-05T15:32:38Z", "commit": {"oid": "9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozMjozOFrOHuI1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTozMjozOFrOHuI1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0MTMxNg==", "bodyText": "I know I don't need so many annotations - will remove when I want to get this in.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518141316", "createdAt": "2020-11-05T15:32:38Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"lock-watch\")\n+public interface EteLockWatchResource {\n+    @POST\n+    @Path(\"start-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "280c50c93e3083e1a5b1333179872da52492771a", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/280c50c93e3083e1a5b1333179872da52492771a", "committedDate": "2020-11-05T17:24:02Z", "message": "better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44980e5f9c28bcef4c3302de04c1012dc3c54998", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/44980e5f9c28bcef4c3302de04c1012dc3c54998", "committedDate": "2020-11-05T17:26:53Z", "message": "force circle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e447cbec24d32a3f06609e74e5ad1b4cf5c7f3c", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/0e447cbec24d32a3f06609e74e5ad1b4cf5c7f3c", "committedDate": "2020-11-05T17:27:38Z", "message": "revert change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b079728b9acd8ba1f838370b4d9ef7a994832db", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/0b079728b9acd8ba1f838370b4d9ef7a994832db", "committedDate": "2020-11-05T17:28:38Z", "message": "Merge branch 'lw/lease-lock-token' into lw/ete-tests-4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24744e54cd4ffaa2baffc47318327fe45437da48", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/24744e54cd4ffaa2baffc47318327fe45437da48", "committedDate": "2020-11-06T10:02:13Z", "message": "changeup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8091367ac0434447f4d44a291ea3c2ca795d144f", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/8091367ac0434447f4d44a291ea3c2ca795d144f", "committedDate": "2020-11-06T10:35:00Z", "message": "temp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e143c0de5ace25fe42c2659c7e7af7d80b113e0", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/2e143c0de5ace25fe42c2659c7e7af7d80b113e0", "committedDate": "2020-11-06T12:51:19Z", "message": "Merge branch 'develop' into lw/ete-tests-4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "411a490ad203744448d7bd8e950db7288ab2e055", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/411a490ad203744448d7bd8e950db7288ab2e055", "committedDate": "2020-11-06T13:23:03Z", "message": "step in the right dir"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0ce2db5c0cc4801b9bed4fef1b97454d71f98bd", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/c0ce2db5c0cc4801b9bed4fef1b97454d71f98bd", "committedDate": "2020-11-06T15:15:58Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6574e06c81ab5f84860cb87862ac976c52cac45d", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/6574e06c81ab5f84860cb87862ac976c52cac45d", "committedDate": "2020-11-06T15:45:53Z", "message": "cleanup tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/c1c8f5859d4cbf054ff6a3663134df500862b176", "committedDate": "2020-11-06T15:46:52Z", "message": "make non private"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mjc0MzQw", "url": "https://github.com/palantir/atlasdb/pull/5102#pullrequestreview-525274340", "createdAt": "2020-11-06T15:48:19Z", "commit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo0ODoxOVrOHuzXkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo0ODoxOVrOHuzXkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzODE2Mw==", "bodyText": "This class is necessary as we have hidden some of the methods on LockWatchManager to stop the average consumer from using it.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518838163", "createdAt": "2020-11-06T15:48:19Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ExposedLockWatchManager.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class ExposedLockWatchManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da6943bde382276356513ef53307a92fe1b90b2", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/5da6943bde382276356513ef53307a92fe1b90b2", "committedDate": "2020-11-06T15:50:50Z", "message": "remove redundant method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mjc2NzQz", "url": "https://github.com/palantir/atlasdb/pull/5102#pullrequestreview-525276743", "createdAt": "2020-11-06T15:51:11Z", "commit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1MToxMVrOHuzevw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1MToxMVrOHuzevw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzOTk5OQ==", "bodyText": "I don't know why, but I kept getting issues where the input table name was \"blah\" instead of blah.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518839999", "createdAt": "2020-11-06T15:51:11Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public LockWatchVersion getVersion(TransactionId transactionId) {\n+        return lockWatchManager\n+                .getUpdateForTransactions(ImmutableSet.of(transactionId.startTs()), Optional.empty())\n+                .startTsToSequence()\n+                .get(transactionId.startTs());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1Mjc3MzA5", "url": "https://github.com/palantir/atlasdb/pull/5102#pullrequestreview-525277309", "createdAt": "2020-11-06T15:51:51Z", "commit": {"oid": "5da6943bde382276356513ef53307a92fe1b90b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1MTo1MVrOHuzgnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTo1MTo1MVrOHuzgnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MDQ3Ng==", "bodyText": "This is necessary as we only want the commit update when we are passed the commit timestamp, not the start.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518840476", "createdAt": "2020-11-06T15:51:51Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");\n+        lockWatchTable = TableReference.create(NAMESPACE, table);\n+        createTable();\n+    }\n+\n+    private void createTable() {\n+        KeyValueService keyValueService = transactionManager.getKeyValueService();\n+        keyValueService.createTable(lockWatchTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n+        transactionManager\n+                .getLockWatchManager()\n+                .registerWatches(ImmutableSet.of(LockWatchReferences.entireTable(lockWatchTable.getQualifiedName())));\n+    }\n+\n+    private Map<Cell, byte[]> getValueMap(Set<String> rows) {\n+        return KeyedStream.of(rows)\n+                .mapKeys(PtBytes::toBytes)\n+                .mapKeys(row -> Cell.create(row, COLUMN))\n+                .map(unused -> VALUE)\n+                .collectToMap();\n+    }\n+\n+    @Value.Immutable\n+    interface TransactionAndCondition {\n+        @Value.Parameter\n+        OpenTransaction transaction();\n+\n+        @Value.Parameter\n+        CommitUpdateCondition condition();\n+\n+        static TransactionAndCondition of(OpenTransaction transaction, CommitUpdateCondition condition) {\n+            return ImmutableTransactionAndCondition.of(transaction, condition);\n+        }\n+    }\n+\n+    class CommitUpdateCondition implements PreCommitCondition {\n+        private final AtomicReference<CommitUpdate> commitUpdate = new AtomicReference<>();\n+        private Optional<Long> startTs = Optional.empty();\n+\n+        CommitUpdateCondition() {}\n+\n+        void setStartTs(long startTs) {\n+            this.startTs = Optional.of(startTs);\n+        }\n+\n+        CommitUpdate getCommitUpdate() {\n+            return commitUpdate.get();\n+        }\n+\n+        @Override\n+        public void throwIfConditionInvalid(long timestamp) {\n+            if (startTs.filter(ts -> ts != timestamp).isPresent()) {\n+                commitUpdate.set(lockWatchManager.getCommitUpdate(startTs.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da6943bde382276356513ef53307a92fe1b90b2"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26d9d2c68e510724b4296b140a03116b84b8af2f", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/26d9d2c68e510724b4296b140a03116b84b8af2f", "committedDate": "2020-11-06T15:53:02Z", "message": "remove unreleased"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd567d2d8f3436041ba3f57f2f3bbd3262c5d90b", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/fd567d2d8f3436041ba3f57f2f3bbd3262c5d90b", "committedDate": "2020-11-06T15:53:14Z", "message": "Merge branch 'develop' into lw/ete-tests-4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71889b8266f6f7a6237eff7a11bb4c1043d380db", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/71889b8266f6f7a6237eff7a11bb4c1043d380db", "committedDate": "2020-11-06T15:56:13Z", "message": "add cheeky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d7036a8401eff9ce858b7c0b266274e79c501b9", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/4d7036a8401eff9ce858b7c0b266274e79c501b9", "committedDate": "2020-11-06T15:57:11Z", "message": "uncomment tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8251e512eb42567c9c0ab4440f4c87bdc0dc7ea8", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/8251e512eb42567c9c0ab4440f4c87bdc0dc7ea8", "committedDate": "2020-11-06T16:00:46Z", "message": "add test to other suites"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "944a4c81ce297782cac2c5225326c7647b898b47", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/944a4c81ce297782cac2c5225326c7647b898b47", "committedDate": "2020-11-09T10:38:16Z", "message": "fix compile issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85acd0d4e3420cd89e9ffdb793c56401dd9f1945", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/85acd0d4e3420cd89e9ffdb793c56401dd9f1945", "committedDate": "2020-11-09T12:55:02Z", "message": "fix another bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f81dabe0c08e6756718960608acf0dc024319d", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/56f81dabe0c08e6756718960608acf0dc024319d", "committedDate": "2020-11-09T13:16:06Z", "message": "use boxed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3bda9865a5b413db4c1dd97d576b43aee5005fc", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/d3bda9865a5b413db4c1dd97d576b43aee5005fc", "committedDate": "2020-11-09T13:35:13Z", "message": "fix stupid fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d16fa316cff0ae73a89f1be876272d8d361ae82", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/9d16fa316cff0ae73a89f1be876272d8d361ae82", "committedDate": "2020-11-09T13:58:41Z", "message": "make tests simpler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cf732a167ab7c6c2eba2f3f5e706a1db58a6246", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/9cf732a167ab7c6c2eba2f3f5e706a1db58a6246", "committedDate": "2020-11-09T14:03:18Z", "message": "remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/92b242edcc7ce11b7b338650f1fea4341abdf785", "committedDate": "2020-11-09T14:33:52Z", "message": "please work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTkzMTIw", "url": "https://github.com/palantir/atlasdb/pull/5102#pullrequestreview-539993120", "createdAt": "2020-11-27T13:48:58Z", "commit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo0ODo1OFrOH6_D1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDowMTo1N1rOH6_dkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjYyOQ==", "bodyText": "Fair enough, this is the same deal as what we have in atlasdb-proxy :)", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531612629", "createdAt": "2020-11-27T13:48:58Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ExposedLockWatchManager.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class ExposedLockWatchManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzODE2Mw=="}, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzUzNg==", "bodyText": "We typically consume TEXT_PLAIN for Strings, not APPLICATION_JSON I think.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531613536", "createdAt": "2020-11-27T13:50:48Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"lock-watch\")\n+public interface EteLockWatchResource {\n+    @POST\n+    @Path(\"start-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    TransactionId startTransaction();\n+\n+    @POST\n+    @Path(\"end-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    Optional<CommitUpdate> endTransaction(TransactionId transactionId);\n+\n+    @POST\n+    @Path(\"write\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    void write(WriteRequest writeRequest);\n+\n+    @POST\n+    @Path(\"get-update\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest);\n+\n+    @POST\n+    @Path(\"set-table\")\n+    @Consumes(MediaType.APPLICATION_JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzk1Mg==", "bodyText": "ah, see the comment above - I'm pretty sure this has to do with string encodings.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531613952", "createdAt": "2020-11-27T13:51:36Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public LockWatchVersion getVersion(TransactionId transactionId) {\n+        return lockWatchManager\n+                .getUpdateForTransactions(ImmutableSet.of(transactionId.startTs()), Optional.empty())\n+                .startTsToSequence()\n+                .get(transactionId.startTs());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzOTk5OQ=="}, "originalCommit": {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNDU1NQ==", "bodyText": "I think this might be a bit simpler if we just use ifPresent(...)?", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531614555", "createdAt": "2020-11-27T13:52:44Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");\n+        lockWatchTable = TableReference.create(NAMESPACE, table);\n+        createTable();\n+    }\n+\n+    private void createTable() {\n+        KeyValueService keyValueService = transactionManager.getKeyValueService();\n+        keyValueService.createTable(lockWatchTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n+        transactionManager\n+                .getLockWatchManager()\n+                .registerWatches(ImmutableSet.of(LockWatchReferences.entireTable(lockWatchTable.getQualifiedName())));\n+    }\n+\n+    private Map<Cell, byte[]> getValueMap(Set<String> rows) {\n+        return KeyedStream.of(rows)\n+                .mapKeys(PtBytes::toBytes)\n+                .mapKeys(row -> Cell.create(row, COLUMN))\n+                .map(unused -> VALUE)\n+                .collectToMap();\n+    }\n+\n+    @Value.Immutable\n+    interface TransactionAndCondition {\n+        @Value.Parameter\n+        OpenTransaction transaction();\n+\n+        @Value.Parameter\n+        CommitUpdateCondition condition();\n+\n+        static TransactionAndCondition of(OpenTransaction transaction, CommitUpdateCondition condition) {\n+            return ImmutableTransactionAndCondition.of(transaction, condition);\n+        }\n+    }\n+\n+    class CommitUpdateCondition implements PreCommitCondition {\n+        private final AtomicReference<CommitUpdate> commitUpdate = new AtomicReference<>();\n+        private Optional<Long> startTs = Optional.empty();\n+\n+        CommitUpdateCondition() {}\n+\n+        void setStartTs(long startTs) {\n+            this.startTs = Optional.of(startTs);\n+        }\n+\n+        CommitUpdate getCommitUpdate() {\n+            return commitUpdate.get();\n+        }\n+\n+        @Override\n+        public void throwIfConditionInvalid(long timestamp) {\n+            if (startTs.filter(ts -> ts != timestamp).isPresent()) {\n+                commitUpdate.set(lockWatchManager.getCommitUpdate(startTs.get()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MDQ3Ng=="}, "originalCommit": {"oid": "5da6943bde382276356513ef53307a92fe1b90b2"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNzY4NA==", "bodyText": "maybe non-actionable: While this is fine, at some point I think this quickly gets unreadable, and maybe I'd prefer something like\nprivate static final Set<String> BANNED_CLIENTS = ImmutableSet.of(\"tl\", \"lw\");\nprivate static final String PATH_REGEX = String.format(\"^(?!((%s)$))[a-zA-Z0-9_-]+$\",\n        BANNED_CLIENTS.stream().collect(Collectors.joining(\"|\")));\nprivate static final Predicate<String> IS_VALID_NAME = Pattern.compile(PATH_REGEX).asPredicate();\n\n(Also, it's kind of funky this isn't named IS_VALID_NAME)", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531617684", "createdAt": "2020-11-27T13:58:54Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java", "diffHunk": "@@ -42,8 +42,10 @@\n     @VisibleForTesting\n     static final String MAX_CLIENTS = \"maxClients\";\n \n-    private static final Predicate<String> isValidName =\n-            Pattern.compile(\"^(?!tl$)[a-zA-Z0-9_-]+$\").asPredicate();\n+    @VisibleForTesting\n+    static final Predicate<String> isValidName =\n+            Pattern.compile(\"^(?!((tl|lw)$))[a-zA-Z0-9_-]+$\").asPredicate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxODA3Mg==", "bodyText": "This should have changelog, just for the sake of completeness/defense.", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531618072", "createdAt": "2020-11-27T13:59:42Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -25,7 +25,7 @@\n /**\n  * DO NOT add new endpoints in here. Instead, define them as Conjure endpoints.\n  */\n-@Path(\"/{namespace: (?!tl/)[a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!(tl|lw)/)[a-zA-Z0-9_-]+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxOTIxOQ==", "bodyText": "nit: standard in other tests is to replace with _, not X.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");\n          \n          \n            \n                    String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"_\");", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531619219", "createdAt": "2020-11-27T14:01:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.ete;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.AtlasLockDescriptorUtils;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.lock.EteLockWatchResource;\n+import com.palantir.atlasdb.lock.GetLockWatchUpdateRequest;\n+import com.palantir.atlasdb.lock.SimpleEteLockWatchResource;\n+import com.palantir.atlasdb.lock.TransactionId;\n+import com.palantir.atlasdb.lock.WriteRequest;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.CommitUpdate.Visitor;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public final class LockWatchEteTest {\n+    private static final String SEED = \"seed\";\n+    private static final String ROW_1 = row(1);\n+    private static final String ROW_2 = row(2);\n+    private static final String ROW_3 = row(3);\n+\n+    private final EteLockWatchResource lockWatcher = EteSetup.createClientToSingleNode(EteLockWatchResource.class);\n+\n+    private TableReference tableReference;\n+\n+    @Before\n+    public void before() {\n+        String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0b1a61f3a122144277ca928c45b23d50b626baf", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/c0b1a61f3a122144277ca928c45b23d50b626baf", "committedDate": "2020-11-27T15:23:23Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0c4bea7a02d79b9127da9aec488a648d2f40f0d", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/f0c4bea7a02d79b9127da9aec488a648d2f40f0d", "committedDate": "2020-11-27T15:24:13Z", "message": "Merge branch 'develop' into lw/ete-tests-4\n\n# Conflicts:\n#\tatlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36754f1fa3bf1929763a215b5a368b90a8bb302b", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/36754f1fa3bf1929763a215b5a368b90a8bb302b", "committedDate": "2020-11-27T15:24:13Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ecafaad2365f8bc032335763485f0140e95a6be", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/8ecafaad2365f8bc032335763485f0140e95a6be", "committedDate": "2020-11-27T16:47:12Z", "message": "grgur you are a champion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMDk4Mzgy", "url": "https://github.com/palantir/atlasdb/pull/5102#pullrequestreview-540098382", "createdAt": "2020-11-27T16:48:29Z", "commit": {"oid": "36754f1fa3bf1929763a215b5a368b90a8bb302b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2489, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}