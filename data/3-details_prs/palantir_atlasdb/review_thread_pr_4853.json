{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTE1MDYz", "number": 4853, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDowMzoxMFrOEH5rbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1NDozMlrOEH6tWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzIwNDk1OnYy", "diffSide": "RIGHT", "path": "timelock-api/src/main/conjure/timelock-feedback.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDowMzoxMFrOGniTRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDowMzoxMFrOGniTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwOTYzNw==", "bodyText": "Unfortunately, this breaks compatibility.\n\nFor backward compatibility (old clients can talk to new servers), the minRate and errorRate need to be optional\nFor forward compatibility (new clients can talk to old servers), that isn't readily possible in Conjure so you'll want to add a product dependency. Servers are required to reject unknown fields.\n\nIt's not ideal but I'd suggest leaving oneMin as it was named", "url": "https://github.com/palantir/atlasdb/pull/4853#discussion_r444109637", "createdAt": "2020-06-23T10:03:10Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-feedback.yml", "diffHunk": "@@ -12,7 +12,8 @@ types:\n       EndpointStatistics:\n         fields:\n           p99: double\n-          oneMin: double\n+          minRate: double\n+          errorRate: double", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb28671d18c01c914046cb5759883848b14f8e26"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzM3MzcxOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1NDozMlrOGnj9hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDo1NDozMlrOGnj9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEzNjgzNw==", "bodyText": "nit - Missed this in round 1: I'd suggest verifying that the exception thrown by the timelock service is the exception that's also thrown out of the Dialogue adapting service.", "url": "https://github.com/palantir/atlasdb/pull/4853#discussion_r444136837", "createdAt": "2020-06-23T10:54:32Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackMetricsTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsRequest;\n+import com.palantir.atlasdb.timelock.api.ConjureStartTransactionsResponse;\n+import com.palantir.atlasdb.timelock.api.ConjureTimelockServiceBlocking;\n+import com.palantir.atlasdb.util.MetricsManagers;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.lock.client.DialogueAdaptingConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class FeedbackMetricsTest {\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer test\");\n+    private static final String NAMESPACE = \"test\";\n+    private ConjureTimelockServiceBlockingMetrics metrics;\n+    private ConjureTimelockServiceBlocking conjureTimelockServiceBlocking = mock(ConjureTimelockServiceBlocking.class);\n+    private DialogueAdaptingConjureTimelockService service;\n+\n+    @Mock private LeaderTime leaderTime;\n+    @Mock private ConjureStartTransactionsRequest request;\n+    @Mock private ConjureStartTransactionsResponse conjureStartTransactionsResponse;\n+\n+    @Before\n+    public void cleanMetrics() {\n+        metrics = ConjureTimelockServiceBlockingMetrics.of(\n+                        MetricsManagers.createForTests().getTaggedRegistry());\n+        service = new DialogueAdaptingConjureTimelockService(conjureTimelockServiceBlocking, metrics);\n+    }\n+\n+    @Test\n+    public void leaderTimeMetricsAreRecordedOnSuccess() {\n+        when(conjureTimelockServiceBlocking.leaderTime(AUTH_HEADER, NAMESPACE)).thenReturn(leaderTime);\n+        service.leaderTime(AUTH_HEADER, NAMESPACE);\n+        assertThat(metrics.leaderTime().getCount()).isEqualTo(1L);\n+        assertThat(metrics.leaderTime().getSnapshot().get99thPercentile()).isNotZero();\n+        assertThat(metrics.leaderTimeErrors().getCount()).isEqualTo(0);\n+    }\n+\n+    @Test\n+    public void leaderTimeErrorMetricsAreRecordedOnException() {\n+        when(conjureTimelockServiceBlocking.leaderTime(AUTH_HEADER, NAMESPACE)).thenThrow(new RuntimeException());\n+        try {\n+            service.leaderTime(AUTH_HEADER, NAMESPACE);\n+        } catch (RuntimeException e) {\n+            // no op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4d9bac8909035d52618361ab44e08954727c27"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2976, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}