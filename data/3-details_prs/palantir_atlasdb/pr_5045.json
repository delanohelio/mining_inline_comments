{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NzkzMjE3", "number": 5045, "title": "Read from palantir system table to try and use hostnames instead of ips", "bodyText": "Goals (and why):\nThis allows Atlas services to work in scenarios when Cassandra is running in a different VPC than the Atlas service.\nIt builds on top of the address translation feature that was added here #3040 by reading the hostname <-> private IP mappings from Cassandra itself. We have added this mapping to all internal Cassandra clusters but for clusters that don't have it, this PR will simply no-op.\nImplementation Description (bullets):\nTesting (What was existing testing like?  What have you done to improve it?):\nHave tested this e2e with the multi VPC scenario internally.\nConcerns (what feedback would you like?):\nis there a better way to do this?\nWhere should we start reviewing?:\nPriority (whenever / two weeks / yesterday):\nASAP to unblock work on multi VPC setups.", "createdAt": "2020-10-19T08:31:32Z", "url": "https://github.com/palantir/atlasdb/pull/5045", "merged": true, "mergeCommit": {"oid": "c3c76366f77c600f9bf4cf999a54bcec7f449867"}, "closed": true, "closedAt": "2020-10-19T13:57:02Z", "author": {"login": "ashrayjain"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTwu9gAH2gAyNTA1NzkzMjE3OjFhODVhNmZhYjMyZWQ4OWZkYWZjM2U5MDAwZWE3NmM5ZjZhZDQ0ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUEZebABqjM4OTM1MDM5MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1a85a6fab32ed89fdafc3e9000ea76c9f6ad4486", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/1a85a6fab32ed89fdafc3e9000ea76c9f6ad4486", "committedDate": "2020-10-18T14:48:32Z", "message": "Read from palantir system table to try and use hostnames instead of ips"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a159d10afe59685e534398229a31c4faa3b9df7", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/1a159d10afe59685e534398229a31c4faa3b9df7", "committedDate": "2020-10-17T10:28:33Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d448bc039c115dc1adfb59d613bf0a96f6d2968a", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/d448bc039c115dc1adfb59d613bf0a96f6d2968a", "committedDate": "2020-10-19T10:05:31Z", "message": "Refactor code to be better"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjA5OTkz", "url": "https://github.com/palantir/atlasdb/pull/5045#pullrequestreview-511609993", "createdAt": "2020-10-19T10:11:49Z", "commit": {"oid": "d448bc039c115dc1adfb59d613bf0a96f6d2968a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoxMTo0OVrOHkHRWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDoxMTo0OVrOHkHRWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyOTkxNA==", "bodyText": "is this necessary? is 2min good enough?", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507629914", "createdAt": "2020-10-19T10:11:49Z", "author": {"login": "ashrayjain"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraService.java", "diffHunk": "@@ -95,6 +98,9 @@ public CassandraService(\n         this.myLocationSupplier = new HostLocationSupplier(this::getSnitch, config.overrideHostLocation());\n         this.blacklist = blacklist;\n         this.poolMetrics = poolMetrics;\n+\n+        Supplier<Map<String, String>> hostnamesByIpSupplier = new HostnamesByIpSupplier(this::getRandomGoodHost);\n+        this.hostnameByIpSupplier = Suppliers.memoizeWithExpiration(hostnamesByIpSupplier::get, 2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d448bc039c115dc1adfb59d613bf0a96f6d2968a"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/48e403074f176ba2dfa9ecc43356b93057f7cb80", "committedDate": "2020-10-19T10:20:28Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzEwNDgx", "url": "https://github.com/palantir/atlasdb/pull/5045#pullrequestreview-511710481", "createdAt": "2020-10-19T12:33:49Z", "commit": {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjozMzo0OVrOHkMGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzowNzoyOVrOHkNZ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwODk2Mg==", "bodyText": "Extract doesNotContain method to make it a bit more readable?", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507708962", "createdAt": "2020-10-19T12:33:49Z", "author": {"login": "gmaretic"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.cassandra.thrift.Compression;\n+import org.apache.cassandra.thrift.ConsistencyLevel;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.atlasdb.keyvalue.cassandra.CqlQuery;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class HostnamesByIpSupplier implements Supplier<Map<String, String>> {\n+    private static final Logger logger = LoggerFactory.getLogger(HostnamesByIpSupplier.class);\n+\n+    private static final String SYSTEM_PALANTIR_KEYSPACE = \"system_palantir\";\n+    private static final String HOSTNAMES_BY_IP_TABLE = \"hostnames_by_ip\";\n+    private static final String HOSTNAME_COLUMN = \"hostname\";\n+    private static final String IP_COLUMN = \"ip\";\n+\n+    private final Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier;\n+\n+    public HostnamesByIpSupplier(Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier) {\n+        this.randomGoodHostSupplier = randomGoodHostSupplier;\n+    }\n+\n+    @Override\n+    public Map<String, String> get() {\n+        try {\n+            return randomGoodHostSupplier.get().runWithPooledResource(getHostnamesByIp());\n+        } catch (Exception e) {\n+            logger.warn(\"Could not get hostnames by ip from Cassandra\", e);\n+            return ImmutableMap.of();\n+        }\n+    }\n+\n+    public FunctionCheckedException<CassandraClient, Map<String, String>, Exception> getHostnamesByIp() {\n+        return client -> {\n+            KsDef systemPalantir;\n+            try {\n+                systemPalantir = client.describe_keyspace(SYSTEM_PALANTIR_KEYSPACE);\n+            }  catch (NotFoundException e) {\n+                logger.debug(\"Did not find keyspace with hostnames by ip, moving on without them\");\n+                return ImmutableMap.of();\n+            }\n+            if (systemPalantir.getCf_defs().stream().noneMatch(cfDef -> cfDef.name.equals(HOSTNAMES_BY_IP_TABLE))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTE0OQ==", "bodyText": "I imagine this consistency level is fine as all nodes should have the same info? How is it populated?", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507711149", "createdAt": "2020-10-19T12:37:24Z", "author": {"login": "gmaretic"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.cassandra.thrift.Compression;\n+import org.apache.cassandra.thrift.ConsistencyLevel;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.atlasdb.keyvalue.cassandra.CqlQuery;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class HostnamesByIpSupplier implements Supplier<Map<String, String>> {\n+    private static final Logger logger = LoggerFactory.getLogger(HostnamesByIpSupplier.class);\n+\n+    private static final String SYSTEM_PALANTIR_KEYSPACE = \"system_palantir\";\n+    private static final String HOSTNAMES_BY_IP_TABLE = \"hostnames_by_ip\";\n+    private static final String HOSTNAME_COLUMN = \"hostname\";\n+    private static final String IP_COLUMN = \"ip\";\n+\n+    private final Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier;\n+\n+    public HostnamesByIpSupplier(Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier) {\n+        this.randomGoodHostSupplier = randomGoodHostSupplier;\n+    }\n+\n+    @Override\n+    public Map<String, String> get() {\n+        try {\n+            return randomGoodHostSupplier.get().runWithPooledResource(getHostnamesByIp());\n+        } catch (Exception e) {\n+            logger.warn(\"Could not get hostnames by ip from Cassandra\", e);\n+            return ImmutableMap.of();\n+        }\n+    }\n+\n+    public FunctionCheckedException<CassandraClient, Map<String, String>, Exception> getHostnamesByIp() {\n+        return client -> {\n+            KsDef systemPalantir;\n+            try {\n+                systemPalantir = client.describe_keyspace(SYSTEM_PALANTIR_KEYSPACE);\n+            }  catch (NotFoundException e) {\n+                logger.debug(\"Did not find keyspace with hostnames by ip, moving on without them\");\n+                return ImmutableMap.of();\n+            }\n+            if (systemPalantir.getCf_defs().stream().noneMatch(cfDef -> cfDef.name.equals(HOSTNAMES_BY_IP_TABLE))) {\n+                logger.debug(\"Did not find table with hostnames by ip, moving on without them\");\n+                return ImmutableMap.of();\n+            }\n+\n+            CqlQuery query = CqlQuery.builder()\n+                    .safeQueryFormat(\"SELECT * FROM \\\"%s\\\".\\\"%s\\\";\")\n+                    .addArgs(\n+                            SafeArg.of(\"keyspace\", SYSTEM_PALANTIR_KEYSPACE),\n+                            SafeArg.of(\"table\", HOSTNAMES_BY_IP_TABLE))\n+                    .build();\n+\n+            return client.execute_cql3_query(query, Compression.NONE, ConsistencyLevel.LOCAL_ONE).getRows().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMjU5NQ==", "bodyText": "This and line 59 can be a global variable to clean up tests a bit", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507712595", "createdAt": "2020-10-19T12:39:40Z", "author": {"login": "gmaretic"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.cassandra.thrift.CfDef;\n+import org.apache.cassandra.thrift.Column;\n+import org.apache.cassandra.thrift.CqlResult;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HostnamesByIpSupplierTest {\n+    @Mock\n+    CassandraClient client;\n+\n+    @Test\n+    public void keyspaceNotAccessibleDoesNotError() throws Exception {\n+        when(client.describe_keyspace(\"system_palantir\")).thenThrow(new NotFoundException());\n+        DummyClientPool clientPool = new DummyClientPool(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNDQ0NA==", "bodyText": "extract method", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507714444", "createdAt": "2020-10-19T12:42:46Z", "author": {"login": "gmaretic"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.cassandra.thrift.CfDef;\n+import org.apache.cassandra.thrift.Column;\n+import org.apache.cassandra.thrift.CqlResult;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HostnamesByIpSupplierTest {\n+    @Mock\n+    CassandraClient client;\n+\n+    @Test\n+    public void keyspaceNotAccessibleDoesNotError() throws Exception {\n+        when(client.describe_keyspace(\"system_palantir\")).thenThrow(new NotFoundException());\n+        DummyClientPool clientPool = new DummyClientPool(client);\n+\n+        Supplier<Map<String, String>> hostnamesByIpSupplier = new HostnamesByIpSupplier(() -> clientPool);\n+        assertThatCode(hostnamesByIpSupplier::get).doesNotThrowAnyException();\n+        assertThat(hostnamesByIpSupplier.get()).isEmpty();\n+    }\n+\n+    @Test\n+    public void tableNotAccessibleDoesNotError() throws Exception {\n+        when(client.describe_keyspace(\"system_palantir\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDQxNg==", "bodyText": "This is only ever called in the call to refresh pool, which happens (by default) every 2 minutes. Hardcoding to 2 minutes seems reasonable, but I also see an argument to tie it to the poolRefreshIntervalSeconds config and make it expire slightly faster to ensure we get a relatively fresh value on each iteration. We definitely do want the memoization since it's called multiple times in a single refresh call.", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507730416", "createdAt": "2020-10-19T13:07:29Z", "author": {"login": "gmaretic"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraService.java", "diffHunk": "@@ -95,6 +98,9 @@ public CassandraService(\n         this.myLocationSupplier = new HostLocationSupplier(this::getSnitch, config.overrideHostLocation());\n         this.blacklist = blacklist;\n         this.poolMetrics = poolMetrics;\n+\n+        Supplier<Map<String, String>> hostnamesByIpSupplier = new HostnamesByIpSupplier(this::getRandomGoodHost);\n+        this.hostnameByIpSupplier = Suppliers.memoizeWithExpiration(hostnamesByIpSupplier::get, 2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyOTkxNA=="}, "originalCommit": {"oid": "d448bc039c115dc1adfb59d613bf0a96f6d2968a"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6444af288902e8042b2bc86ad6895271adb08eed", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/6444af288902e8042b2bc86ad6895271adb08eed", "committedDate": "2020-10-19T13:19:13Z", "message": "Address comments"}, "afterCommit": {"oid": "90df304bcea20891a1f00de80297a44165d28a0e", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/90df304bcea20891a1f00de80297a44165d28a0e", "committedDate": "2020-10-19T13:22:33Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzU1MzU4", "url": "https://github.com/palantir/atlasdb/pull/5045#pullrequestreview-511755358", "createdAt": "2020-10-19T13:24:07Z", "commit": {"oid": "90df304bcea20891a1f00de80297a44165d28a0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "committedDate": "2020-10-19T13:43:00Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90df304bcea20891a1f00de80297a44165d28a0e", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/90df304bcea20891a1f00de80297a44165d28a0e", "committedDate": "2020-10-19T13:22:33Z", "message": "Address comments"}, "afterCommit": {"oid": "1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "author": {"user": {"login": "ashrayjain", "name": "Ashray Jain"}}, "url": "https://github.com/palantir/atlasdb/commit/1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "committedDate": "2020-10-19T13:43:00Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2667, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}