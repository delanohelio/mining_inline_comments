{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwOTY0MDY2", "number": 4993, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowOTozNVrOEmOkGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMTo0OVrOEmrxzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTE5OTYxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowOTozNVrOHWImuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowOTozNVrOHWImuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTcwNQ==", "bodyText": "nit: no need to depend on objects project directly", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492971705", "createdAt": "2020-09-22T19:09:35Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/build.gradle", "diffHunk": "@@ -1,7 +1,21 @@\n apply from: \"../gradle/shared.gradle\"\n+apply plugin: 'com.palantir.conjure'\n+\n+conjure {\n+    java {\n+        undertowServicePrefixes = true\n+        undertowListenableFutures = true\n+        useImmutableBytes = true\n+    }\n+}\n \n dependencies {\n-    compile project(\":leader-election-impl\")\n+    conjureCompiler 'com.palantir.conjure:conjure'\n+    conjureJava 'com.palantir.conjure.java:conjure-java'\n+\n+    compile project(\":timelock-corruption-detection:timelock-corruption-detection-undertow\")\n+    compile project(\":timelock-corruption-detection:timelock-corruption-detection-jersey\")\n+    compile project(\":timelock-corruption-detection:timelock-corruption-detection-objects\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIxMzQzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxMzo1NVrOHWIvgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozNzozNFrOHWhPzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3Mzk1Mw==", "bodyText": "I'm afraid this won't actually work in its current form, because PaxosValue is not JSON serializable.", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492973953", "createdAt": "2020-09-22T19:13:55Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "diffHunk": "@@ -0,0 +1,52 @@\n+types:\n+  imports:\n+    PaxosValue:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.PaxosValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NTQzOQ==", "bodyText": "@jkong verified that PaxosValue is JSON serializable.", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r493375439", "createdAt": "2020-09-23T09:37:34Z", "author": {"login": "sudiksha27"}, "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "diffHunk": "@@ -0,0 +1,52 @@\n+types:\n+  imports:\n+    PaxosValue:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.PaxosValue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3Mzk1Mw=="}, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIxODAwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxNTowOFrOHWIyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxNTowOFrOHWIyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NDYxOA==", "bodyText": "I think for this one we should probably still have a separate layer, because this class is used internally within the Paxos implementation. (Unlike PaxosValue, this one isn't a part of TimeLock's internode API.)", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492974618", "createdAt": "2020-09-22T19:15:08Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "diffHunk": "@@ -0,0 +1,52 @@\n+types:\n+  imports:\n+    PaxosValue:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.PaxosValue\n+    PaxosAcceptorState:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.PaxosAcceptorState", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIyMzg5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxNjo1NVrOHWI11Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxNjo1NVrOHWI11Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTU3Mw==", "bodyText": "We should standardise on the package to be used (I think, unless I'm missing something - you've used both com.palantir.timelock.history and com.palantir.history). I think the former is the correct one (i.e. no changes here, but we might want to move the others around).", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492975573", "createdAt": "2020-09-22T19:16:55Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/conjure/timelock-history.yml", "diffHunk": "@@ -0,0 +1,52 @@\n+types:\n+  imports:\n+    PaxosValue:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.PaxosValue\n+    PaxosAcceptorState:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.PaxosAcceptorState\n+    NamespaceAndUseCase:\n+      base-type: any\n+      external:\n+        java: com.palantir.paxos.NamespaceAndUseCase\n+    Long:\n+      base-type: any\n+      external:\n+        java: java.lang.Long\n+  definitions:\n+    default-package: com.palantir.timelock.history\n+    objects:\n+      HistoryQuery:\n+        fields:\n+          namespaceAndUseCase: NamespaceAndUseCase\n+          seq: Long\n+      PaxosLogWithAcceptedAndLearnedValues:\n+        fields:\n+          acceptedState: optional<PaxosAcceptorState>\n+          paxosValue: optional<PaxosValue>\n+          seq: Long\n+      LogsForNamespaceAndUseCase:\n+        fields:\n+          namespaceAndUseCase: NamespaceAndUseCase\n+          logs: list<PaxosLogWithAcceptedAndLearnedValues>\n+      PaxosHistoryOnRemote:\n+        fields:\n+          logs: list<LogsForNamespaceAndUseCase>\n+\n+services:\n+  TimeLockPaxosHistoryProvider:\n+    name: TimeLock Paxos History Provider Service\n+    default-auth: header\n+    package: com.palantir.timelock.history", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIyNTI5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxNzozMFrOHWI26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxNzozMFrOHWI26A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTg0OA==", "bodyText": "nit: This is fine, but have a look at the documentation of get().", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492975848", "createdAt": "2020-09-22T19:17:30Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIzMTE1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxOToxMlrOHWI6mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxOToxMlrOHWI6mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3Njc5NQ==", "bodyText": "Yeah, I think this function is correct, though this is maybe a bit neater?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long minSeq = Long.MAX_VALUE;\n          \n          \n            \n                    if (!learnerRecords().isEmpty()) {\n          \n          \n            \n                        minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n          \n          \n            \n                    }\n          \n          \n            \n                    if (!acceptorRecords().isEmpty()) {\n          \n          \n            \n                        minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n          \n          \n            \n                    }\n          \n          \n            \n                    return minSeq;\n          \n          \n            \n                    return Stream.of(learnerRecords(), acceptorRecords())\n          \n          \n            \n                            .map(Map::keySet)\n          \n          \n            \n                            .flatMap(Set::stream)\n          \n          \n            \n                            .min(Comparator.naturalOrder())\n          \n          \n            \n                            .orElse(Long.MAX_VALUE);", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492976795", "createdAt": "2020-09-22T19:19:12Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    default long getMinSequence() {\n+        long minSeq = Long.MAX_VALUE;\n+        if (!learnerRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n+        }\n+        if (!acceptorRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n+        }\n+        return minSeq;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIzMzI0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxOTo0NlrOHWI77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToxOTo0NlrOHWI77A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NzEzMg==", "bodyText": "Looks like this could be @Value.Lazy", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492977132", "createdAt": "2020-09-22T19:19:46Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    default long getMinSequence() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIzNDMyOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyMDowNFrOHWI8lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyMDowNFrOHWI8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NzMwMg==", "bodyText": "as above, I don't know if we want to cache the value for recomputations, and I think streams give an easier pipeline.", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492977302", "createdAt": "2020-09-22T19:20:04Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    default long getMinSequence() {\n+        long minSeq = Long.MAX_VALUE;\n+        if (!learnerRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n+        }\n+        if (!acceptorRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n+        }\n+        return minSeq;\n+    }\n+\n+    default long getMaxSequence() {\n+        long maxSeq = Long.MIN_VALUE;\n+        if (!learnerRecords().isEmpty()) {\n+            maxSeq = Math.max(maxSeq, Collections.max(learnerRecords().keySet()));\n+        }\n+        if (!acceptorRecords().isEmpty()) {\n+            maxSeq = Math.max(maxSeq, Collections.max(acceptorRecords().keySet()));\n+        }\n+        return maxSeq;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTIzOTgyOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyMTo1MlrOHWJALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyMTo1MlrOHWJALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3ODIyMw==", "bodyText": "nice!", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492978223", "createdAt": "2020-09-22T19:21:52Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.remote;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import com.google.common.collect.Maps;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.LocalHistoryLoader;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public final class HistoryLoaderAndTransformer {\n+    private HistoryLoaderAndTransformer() {\n+        //no op\n+    }\n+\n+    public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(LocalHistoryLoader localHistoryLoader,\n+            List<HistoryQuery> historyQueries) {\n+        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream().collect(\n+                Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTI1NDkwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyNjoyNFrOHWJJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyNjoyNFrOHWJJpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MDY0Nw==", "bodyText": "Can we iterate over the map entries, as opposed to over this range? I'm a bit worried about this at deployments like big internal stack, where we truncated a good number of these entries so we have -1 and then a big gap, and then four million.", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492980647", "createdAt": "2020-09-22T19:26:24Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.remote;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import com.google.common.collect.Maps;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.LocalHistoryLoader;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public final class HistoryLoaderAndTransformer {\n+    private HistoryLoaderAndTransformer() {\n+        //no op\n+    }\n+\n+    public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(LocalHistoryLoader localHistoryLoader,\n+            List<HistoryQuery> historyQueries) {\n+        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream().collect(\n+                Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));\n+\n+        PaxosHistoryOnSingleNode localPaxosHistory = localHistoryLoader.getLocalPaxosHistory(lastVerifiedSequences);\n+\n+        return KeyedStream.stream(localPaxosHistory.history())\n+                .mapEntries(HistoryLoaderAndTransformer::processHistory)\n+                .values()\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static Map.Entry<NamespaceAndUseCase, LogsForNamespaceAndUseCase> processHistory(\n+            NamespaceAndUseCase namespaceAndUseCase, LearnerAndAcceptorRecords records) {\n+\n+        long minSeq = records.getMinSequence();\n+        long maxSeq = records.getMaxSequence();\n+\n+        List<PaxosLogWithAcceptedAndLearnedValues> logs = LongStream.rangeClosed(minSeq, maxSeq).boxed().map(\n+                sequence -> PaxosLogWithAcceptedAndLearnedValues.builder()\n+                        .paxosValue(records.getLearnedValueAtSeqIfExists(sequence))\n+                        .acceptedState(records.getAcceptedValueAtSeqIfExists(sequence))\n+                        .seq(sequence)\n+                        .build()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTI2NzA3OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyOTo1N1rOHWJRKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOToyOTo1N1rOHWJRKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MjU2OQ==", "bodyText": "This probably doesn't need to be exposed \ud83d\ude05", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492982569", "createdAt": "2020-09-22T19:29:57Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.history.remote.HistoryLoaderAndTransformer;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public class HistoryLoaderAndTransformerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTI3NDIwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozMjowNlrOHWJVig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozMjowNlrOHWJVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MzY5MA==", "bodyText": "This is pretty solid. I think you might want to add a test for a discontinuity (i.e. logs only exist from 45 - 100, and lastVerified was 3 or something like that), but other than that there's good coverage here.", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492983690", "createdAt": "2020-09-22T19:32:06Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.history.remote.HistoryLoaderAndTransformer;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public class HistoryLoaderAndTransformerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canFetchLogsForQuery() {\n+        writeToLogs(100);\n+        int lastVerified = 27;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+    }\n+\n+    @Test\n+    public void canHandleDuplicateQueries() {\n+        writeToLogs(100);\n+        int minLastVerified = 27;\n+\n+        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n+                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))\n+                .collect(Collectors.toList());\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, queries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - minLastVerified);\n+    }\n+\n+    @Test\n+    public void canHandleHistoryWithOnlyAcceptorLogs() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n+        });\n+\n+        int lastVerified = 27;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+\n+        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n+        assertThat(singleLog.getAcceptedState()).isPresent();\n+        assertThat(singleLog.getPaxosValue()).isNotPresent();\n+    }\n+\n+    @Test\n+    public void canHandleHistoryWithOnlyLearnerLogs() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            writeValueForLogAndRound(learnerLog, i + 1);\n+        });\n+\n+        int lastVerified = 52;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+\n+        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n+        assertThat(singleLog.getAcceptedState()).isNotPresent();\n+        assertThat(singleLog.getPaxosValue()).isPresent();\n+    }\n+\n+    @Test\n+    public void canHandleHistoryWithNoLogs() {\n+        int lastVerified = 102;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(0);\n+    }\n+\n+    private void writeToLogs(int range) {\n+        IntStream.range(0, range).forEach(i -> {\n+            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n+            writeValueForLogAndRound(learnerLog, i + 1);\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTI5MzMzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozODowMFrOHWJhkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTozODowMFrOHWJhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4Njc3MQ==", "bodyText": "nit: This object's used quite a bit, you can just extract it as a constant and then use it. Also for the assertions you can then use assertThat(bleh.getNamespaceAndUseCase()).isEqualTo(NAMESPACE_AND_USE_CASE)", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492986771", "createdAt": "2020-09-22T19:38:00Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.history.remote.HistoryLoaderAndTransformer;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public class HistoryLoaderAndTransformerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canFetchLogsForQuery() {\n+        writeToLogs(100);\n+        int lastVerified = 27;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+    }\n+\n+    @Test\n+    public void canHandleDuplicateQueries() {\n+        writeToLogs(100);\n+        int minLastVerified = 27;\n+\n+        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n+                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823dd176550db19f4740b1993a2953978d928b57"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk4NDkxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMTozMlrOHW28WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMTozMlrOHW28WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMDkwNQ==", "bodyText": "nit: as above", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r493730905", "createdAt": "2020-09-23T16:31:32Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +35,21 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().get(seq));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664dfc52858cb17941e619c15c7c9958c6de70e1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTk4NjA2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMTo0OVrOHW29CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjozMTo0OVrOHW29CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTA4MA==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r493731080", "createdAt": "2020-09-23T16:31:49Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +35,21 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().get(seq));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    // it is okay to have a set of longs as learner and acceptor records have a limit of 500 entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664dfc52858cb17941e619c15c7c9958c6de70e1"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2579, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}