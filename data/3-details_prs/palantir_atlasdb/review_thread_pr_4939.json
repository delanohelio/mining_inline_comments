{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjY2NjMx", "number": 4939, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMToyNDozOFrOEZAWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMToyNDozOFrOEZAWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjU1Njg1OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/ToplistDeltaFilteringTableLevelMetricsControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMToyNDozOFrOHBkzfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMToyNDozOFrOHBkzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQxMzYyOA==", "bodyText": "Neat!", "url": "https://github.com/palantir/atlasdb/pull/4939#discussion_r471413628", "createdAt": "2020-08-17T11:24:38Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/metrics/ToplistDeltaFilteringTableLevelMetricsControllerTest.java", "diffHunk": "@@ -75,10 +79,35 @@ public void selectsOnlyHighestMetricsForPublication() {\n                 .containsOnlyKeys(getMetricName(\"table2\"), getMetricName(\"table3\"), getMetricName(\"table4\"));\n     }\n \n+    @Test\n+    public void operatesCorrectlyWithSharedContexts() {\n+        MetricsManager otherManager = MetricsManagers.createAlwaysSafeAndFilteringForTests();\n+        ToplistDeltaFilteringTableLevelMetricsController otherController\n+                = new ToplistDeltaFilteringTableLevelMetricsController(context, otherManager, mockClock);\n+\n+        Map<Integer, Counter> counters = KeyedStream.of(ImmutableList.of(1, 2, 4))\n+                .map(value -> controller.createAndRegisterCounter(\n+                        Class.class,\n+                        \"metricName\",\n+                        TableReference.create(Namespace.create(\"namespace\"), \"table\" + value)))\n+                .collectToMap();\n+        counters.forEach((value, counter) -> counter.inc(value));\n+\n+        Counter otherControllersCounter = otherController.createAndRegisterCounter(\n+                Class.class,\n+                \"metricName\",\n+                TableReference.create(Namespace.create(\"namespace\"), \"table3\"));\n+        otherControllersCounter.inc(3);\n+\n+        assertThat(metricsManager.getPublishableMetrics().getMetrics())\n+                .containsOnlyKeys(getMetricName(\"table2\"), getMetricName(\"table4\"));\n+        assertThat(otherManager.getPublishableMetrics().getMetrics())\n+                .containsOnlyKeys(getMetricName(\"table3\"));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "779f8cfe4aac7c59c7b4f7c4e692c095db3c0af8"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2781, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}