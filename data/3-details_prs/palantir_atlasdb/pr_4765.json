{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2ODUwNTY1", "number": 4765, "title": "[PaxosStateLog] Migrator and unit tests", "bodyText": "Goals (and why):\nImplement PaxosStateLog migration\nImplementation Description (bullets):\nPretty straightforward: use SqlitePaxosStateLogMigrationState to maintain migration state, read entries from the source log using 100 threads in parallel, then write a batch after each 10k reads\nTesting (What was existing testing like?  What have you done to improve it?):\nUnit tests for both state and migrator\nConcerns (what feedback would you like?):\nDon't really have concerns about this, will add intergration tests going from file to sqlite in a follow up. This PR grew a bit, but it's mostly tests\nWhere should we start reviewing?:\nTests?\nPriority (whenever / two weeks / yesterday):\nTomorrow", "createdAt": "2020-05-12T16:56:11Z", "url": "https://github.com/palantir/atlasdb/pull/4765", "merged": true, "mergeCommit": {"oid": "1686e3f517d6198d6ed25248a3f49cb35f117001"}, "closed": true, "closedAt": "2020-05-13T11:53:11Z", "author": {"login": "gmaretic"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccFK7AgH2gAyNDE2ODUwNTY1OjQzMWUxM2M5MmY2ODUwNTdhMTM3NjNhNjhkYTE3ZTQzZjM5OTk3NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg2i5dgH2gAyNDE2ODUwNTY1OjkyNWVhZTQ1ZTJmYjhmNzQ0YTg1OGNjZjc1MTQ3OGZjMDI0MjMzZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "431e13c92f685057a13763a68da17e43f3999754", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/431e13c92f685057a13763a68da17e43f3999754", "committedDate": "2020-04-28T14:57:25Z", "message": "First impl, needs tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d572d5f345a796089bd96e74da375d8c6b6c23a", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/7d572d5f345a796089bd96e74da375d8c6b6c23a", "committedDate": "2020-05-12T12:22:02Z", "message": "Wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f6d72207367f9fcbc07e182d2cefceb5e83be19", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/0f6d72207367f9fcbc07e182d2cefceb5e83be19", "committedDate": "2020-05-12T13:22:34Z", "message": "Merge with develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bba086ba6fa3a7f2c9cf699880e325bc817261c8", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/bba086ba6fa3a7f2c9cf699880e325bc817261c8", "committedDate": "2020-05-12T16:26:41Z", "message": "Finish up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "494fb155d9589f34e982373c9d279e46d12401bc", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/494fb155d9589f34e982373c9d279e46d12401bc", "committedDate": "2020-05-12T16:36:10Z", "message": "Remove unused code and fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73902d110af21cf12241005aaa29ea785e649780", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/73902d110af21cf12241005aaa29ea785e649780", "committedDate": "2020-05-12T16:39:28Z", "message": "Clear up name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/d43594469c3921f79c3aa8418a5c99b8ef34d3c8", "committedDate": "2020-05-12T16:55:43Z", "message": "Clean up tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjU5MTQ4", "url": "https://github.com/palantir/atlasdb/pull/4765#pullrequestreview-410259148", "createdAt": "2020-05-12T17:19:52Z", "commit": {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxOTo1MlrOGURAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoyOTo0NlrOGURYhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMzM5MA==", "bodyText": "Non-actionable: sigh. This was almost entirely agnostic of SQLite. Given we aren't going to be implementing another migration state any time soon though, I'd say leave it.", "url": "https://github.com/palantir/atlasdb/pull/4765#discussion_r423903390", "createdAt": "2020-05-12T17:19:52Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.util.stream.LongStream;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class PaxosStateLogMigrator<V extends Persistable & Versionable> {\n+    @VisibleForTesting\n+    static final int BATCH_SIZE = 10_000;\n+\n+    private final PaxosStateLog<V> sourceLog;\n+    private final PaxosStateLog<V> destinationLog;\n+    private final Persistable.Hydrator<V> hydrator;\n+    private final SqlitePaxosStateLogMigrationState migrationState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNzU3Mg==", "bodyText": "It's benign, but to avoid future confusion we should handle the edge case here: this method returns PaxosAcceptor.NO_LOG_ENTRY if there are zero entries in the source log, meaning that numberOfBatches = (-1 - 0) / BATCH_SIZE + 1 which by Java semantics is actually 1. Then there is a batch from zero to BATCH_SIZE entries that the reader will try and read.", "url": "https://github.com/palantir/atlasdb/pull/4765#discussion_r423907572", "createdAt": "2020-05-12T17:26:45Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.util.stream.LongStream;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class PaxosStateLogMigrator<V extends Persistable & Versionable> {\n+    @VisibleForTesting\n+    static final int BATCH_SIZE = 10_000;\n+\n+    private final PaxosStateLog<V> sourceLog;\n+    private final PaxosStateLog<V> destinationLog;\n+    private final Persistable.Hydrator<V> hydrator;\n+    private final SqlitePaxosStateLogMigrationState migrationState;\n+\n+    private PaxosStateLogMigrator(PaxosStateLog<V> sourceLog,\n+            PaxosStateLog<V> destinationLog,\n+            Persistable.Hydrator<V> hydrator,\n+            SqlitePaxosStateLogMigrationState migrationState) {\n+        this.sourceLog = sourceLog;\n+        this.destinationLog = destinationLog;\n+        this.hydrator = hydrator;\n+        this.migrationState = migrationState;\n+    }\n+\n+    public static <V extends Persistable & Versionable> void migrate(MigrationContext<V> migrationContext) {\n+        PaxosStateLogMigrator<V> migrator = new PaxosStateLogMigrator<>(\n+                migrationContext.sourceLog(),\n+                migrationContext.destinationLog(),\n+                migrationContext.hydrator(),\n+                migrationContext.migrationState());\n+        migrator.runMigration();\n+    }\n+\n+    private void runMigration() {\n+        if (migrationState.hasAlreadyMigrated()) {\n+            return;\n+        }\n+        destinationLog.truncate(destinationLog.getGreatestLogEntry());\n+        long lowerBound = lowestSequenceToMigrate();\n+        long upperBound = sourceLog.getGreatestLogEntry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwNzk4MA==", "bodyText": "\ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/4765#discussion_r423907980", "createdAt": "2020-05-12T17:27:26Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -97,7 +96,7 @@ public void truncate(long toDeleteInclusive) {\n         @SqlUpdate(\"CREATE TABLE IF NOT EXISTS paxosLog (\"\n                 + \"namespace TEXT,\"\n                 + \"useCase TEXT,\"\n-                + \"seq BIGINT, \"\n+                + \"seq BIGINT,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwOTUwOA==", "bodyText": "nice!", "url": "https://github.com/palantir/atlasdb/pull/4765#discussion_r423909508", "createdAt": "2020-05-12T17:29:46Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/PaxosStateLogMigratorTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import static com.palantir.paxos.PaxosStateLogMigrator.BATCH_SIZE;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.common.base.Throwables;\n+\n+public class PaxosStateLogMigratorTest {\n+    private static final NamespaceAndUseCase NAMESPACE = ImmutableNamespaceAndUseCase.of(Client.of(\"client\"), \"tom\");\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private PaxosStateLog<PaxosValue> source;\n+    private PaxosStateLog<PaxosValue> target;\n+    private SqlitePaxosStateLogMigrationState migrationState;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        Supplier<Connection> sourceConnSupplier = SqliteConnections\n+                .createDefaultNamedSqliteDatabaseAtPath(tempFolder.newFolder(\"source\").toPath());\n+        Supplier<Connection> targetConnSupplier = SqliteConnections\n+                .createDefaultNamedSqliteDatabaseAtPath(tempFolder.newFolder(\"target\").toPath());\n+        source = SqlitePaxosStateLog.create(NAMESPACE, sourceConnSupplier);\n+        target = SqlitePaxosStateLog.create(NAMESPACE, targetConnSupplier);\n+        migrationState = SqlitePaxosStateLogMigrationState.create(NAMESPACE, targetConnSupplier);\n+    }\n+\n+    @Test\n+    public void emptyLogMigrationSuccessfullyMarksAsMigrated() {\n+        migrateFrom(source);\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    @Test\n+    public void logMigrationSuccessfullyMigratesEntries() {\n+        long lowerBound = 10;\n+        long upperBound = 25;\n+        List<PaxosValue> valuesWritten = insertValuesWithinBounds(lowerBound, upperBound, source);\n+\n+        migrateFrom(source);\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(lowerBound);\n+        assertThat(target.getGreatestLogEntry()).isEqualTo(upperBound);\n+\n+        valuesWritten.forEach(value ->\n+                assertThat(PaxosValue.BYTES_HYDRATOR.hydrateFromBytes(readRoundUnchecked(value.seq))).isEqualTo(value));\n+    }\n+\n+    @Test\n+    public void migrationDeletesExistingState() {\n+        long lowerBound = 13;\n+        long upperBound = 35;\n+        List<PaxosValue> valuesWritten = insertValuesWithinBounds(lowerBound, upperBound, target);\n+\n+        migrateFrom(source);\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(PaxosAcceptor.NO_LOG_ENTRY);\n+        assertThat(target.getGreatestLogEntry()).isEqualTo(PaxosAcceptor.NO_LOG_ENTRY);\n+        valuesWritten.forEach(value -> assertThat(readRoundUnchecked(value.seq)).isNull());\n+    }\n+\n+    @Test\n+    public void doNotMigrateIfAlreadyMigrated() {\n+        migrationState.finishMigration();\n+\n+        long lowerBound = 1;\n+        long upperBound = 22;\n+        List<PaxosValue> valuesWritten = insertValuesWithinBounds(lowerBound, upperBound, source);\n+\n+        migrateFrom(source);\n+\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+        assertThat(target.getLeastLogEntry()).isEqualTo(PaxosAcceptor.NO_LOG_ENTRY);\n+        assertThat(target.getGreatestLogEntry()).isEqualTo(PaxosAcceptor.NO_LOG_ENTRY);\n+        valuesWritten.forEach(value -> assertThat(readRoundUnchecked(value.seq)).isNull());\n+    }\n+\n+    @Test\n+    public void logMigrationSuccessfullyMigratesManyEntriesIncludingSingleEntryInLastBatch() throws IOException {\n+        long lowerBound = 10;\n+        long upperBound = lowerBound + BATCH_SIZE * 10;\n+\n+        PaxosStateLog<PaxosValue> mockLog = mock(PaxosStateLog.class);\n+\n+        when(mockLog.getLeastLogEntry()).thenReturn(lowerBound);\n+        when(mockLog.getGreatestLogEntry()).thenReturn(upperBound);\n+        when(mockLog.readRound(anyLong())).thenAnswer(invocation -> {\n+            long sequence = (long) invocation.getArguments()[0];\n+            if (sequence > upperBound || sequence < lowerBound) {\n+                return null;\n+            }\n+            return valueForRound(sequence).persistToBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19eb9f9a50374a715738623b6160bec10b968e83", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/19eb9f9a50374a715738623b6160bec10b968e83", "committedDate": "2020-05-13T09:53:46Z", "message": "Exit early if nothing to migrate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "925eae45e2fb8f744a858ccf751478fc024233fc", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/925eae45e2fb8f744a858ccf751478fc024233fc", "committedDate": "2020-05-13T10:44:39Z", "message": "Remove phantom spacing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2832, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}