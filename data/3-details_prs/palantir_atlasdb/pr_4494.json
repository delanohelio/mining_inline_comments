{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNTE1NTMy", "number": 4494, "title": "[Timelock Partitioning] Part 44f: More metrics fixes", "bodyText": "Goals (and why):\nSo, introduction of the new code path for partitioning makes use of hierarchical metric registries. LeadershipEvents, is a class that just logs/tracks metrics of events pertaining to leadership.\nThe issue here is that loggers are not hierarchical, and it would be nice to know the context we're in + the client we're talking for. Hence we pass both the paxosUseCase and the client as namespaceArgs. However, the metric registry that is passed in is a child registry keyed by paxosUseCase, so including the paxosUseCase as a safe tag to a metric that will be inserted into its parent with keyed by that is an error and we get the following exception:\nc.p.logsafe.e.SIAE: Base must not contain the extra key that is to be added\n\tat com.palantir.logsafe.Preconditions.checkArgument(Preconditions.java:52)\n\tat com.palantir.tritium.metrics.registry.ExtraEntrySortedMap.<init>(ExtraEntrySortedMap.java:53)\n\tat com.palantir.tritium.metrics.registry.RealMetricName.create(RealMetricName.java:81)\n\tat com.palantir.tritium.metrics.registry.AbstractTaggedMetricRegistry.lambda$getMetrics$3(AbstractTaggedMetricRegistry.java:156)\n\tat com.google.common.collect.RegularImmutableMap.forEach(RegularImmutableMap.java:154)\n\tat com.palantir.tritium.metrics.registry.AbstractTaggedMetricRegistry.lambda$getMetrics$4(AbstractTaggedMetricRegistry.java:155)\n\tat java.util.concurrent.ConcurrentHashMap.forEach(ConcurrentHashMap.java:1597)\n\tat com.palantir.tritium.metrics.registry.AbstractTaggedMetricRegistry.getMetrics(AbstractTaggedMetricRegistry.java:154)\n\t...\n\nImplementation Description (bullets):\n\nLeadership events now takes in a logging safe args and a metrics safe args. A bit janky, but don't want to leak timelock implementation details into leader-election-impl.\n\nTesting (What was existing testing like?  What have you done to improve it?):\nAdded the ability to get the TaggedMetricRegistry from Dropwizard. Added a smoke test/sanity check that we're able to iterate through the tagged metric registry. This was failing before I added the fix.\nPriority (whenever / two weeks / yesterday):\nASAP", "createdAt": "2020-01-08T15:30:12Z", "url": "https://github.com/palantir/atlasdb/pull/4494", "merged": true, "mergeCommit": {"oid": "2df934c0fe854aea4ad1ad569b565b1e45b44f7b"}, "closed": true, "closedAt": "2020-01-08T16:29:42Z", "author": {"login": "felixdesouza"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4W61qAH2gAyMzYwNTE1NTMyOjY3ZWYzODllZjNmYTVlMDBhZGI4YmVlNGFjYzIwNDkzM2Q4YzUxMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4pzEzgFqTM0MDUxMTA3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67ef389ef3fa5e00adb8bee4acc204933d8c5125", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/67ef389ef3fa5e00adb8bee4acc204933d8c5125", "committedDate": "2020-01-08T15:16:52Z", "message": "Failing test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2cca669d751f58986b81cb4676a6a54fa46affb", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/a2cca669d751f58986b81cb4676a6a54fa46affb", "committedDate": "2020-01-08T15:18:42Z", "message": "Fix for failing metrics."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a115759ae2f23469b024abf3c45adf2e8002a570", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/a115759ae2f23469b024abf3c45adf2e8002a570", "committedDate": "2020-01-08T15:18:42Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5OTQ4NDU0", "url": "https://github.com/palantir/atlasdb/pull/4494#pullrequestreview-339948454", "createdAt": "2020-01-08T15:37:25Z", "commit": {"oid": "a2cca669d751f58986b81cb4676a6a54fa46affb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNTA1MzQz", "url": "https://github.com/palantir/atlasdb/pull/4494#pullrequestreview-340505343", "createdAt": "2020-01-09T13:06:41Z", "commit": {"oid": "a115759ae2f23469b024abf3c45adf2e8002a570"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzowNjo0MVrOFb1M0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzowNjo0MVrOFb1M0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDcyNzUwNA==", "bodyText": "TaggedMetricRegistries are nice because of the:\nvoid addMetrics(String safeTagName, String safeTagValue, TaggedMetricSet metrics)\n\nMethod, which basically allows for establishing metric hierarchies. Using this, this class would not have to deal with tags at all, because it would be passed a TaggedMetricRegistry that is scoped to the exact thing it needs, and ALL metrics created underneath it would be tagged correctly.", "url": "https://github.com/palantir/atlasdb/pull/4494#discussion_r364727504", "createdAt": "2020-01-09T13:06:41Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/LeadershipEvents.java", "diffHunk": "@@ -48,8 +48,11 @@\n     private final Meter leaderPingReturnedFalse;\n     private final Object[] contextArgs;\n \n-    LeadershipEvents(TaggedMetricRegistry metrics, List<SafeArg<String>> contextArgs) {\n-        Map<String, String> safeTags = safeTags(contextArgs);\n+    LeadershipEvents(\n+            TaggedMetricRegistry metrics,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a115759ae2f23469b024abf3c45adf2e8002a570"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNTExMDcx", "url": "https://github.com/palantir/atlasdb/pull/4494#pullrequestreview-340511071", "createdAt": "2020-01-09T13:16:35Z", "commit": {"oid": "a115759ae2f23469b024abf3c45adf2e8002a570"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzoxNjozNVrOFb1dUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzoxNjozNVrOFb1dUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDczMTczMQ==", "bodyText": "This logging also feels rather cumbersome: it would be great to use MDC for this. The only problem is we can't assume anything about the logging framework, safe vs unsafe arg handling... :(", "url": "https://github.com/palantir/atlasdb/pull/4494#discussion_r364731731", "createdAt": "2020-01-09T13:16:35Z", "author": {"login": "jkozlowski"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/LeadershipEvents.java", "diffHunk": "@@ -58,7 +61,7 @@\n         leaderPingFailure = metrics.meter(withName(\"leadership.ping-leader.failure\", safeTags));\n         leaderPingTimeout = metrics.meter(withName(\"leadership.ping-leader.timeout\", safeTags));\n         leaderPingReturnedFalse = metrics.meter(withName(\"leadership.ping-leader.returned-false\", safeTags));\n-        this.contextArgs = contextArgs.toArray(new Object[0]);\n+        this.contextArgs = safeLoggingArgs.toArray(new Object[0]);\n     }\n \n     void proposedLeadershipFor(long round) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a115759ae2f23469b024abf3c45adf2e8002a570"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2347, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}