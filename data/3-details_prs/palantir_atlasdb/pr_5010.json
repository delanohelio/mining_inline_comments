{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDc3MDE5", "number": 5010, "title": "Dbkvs invalidate", "bodyText": "Goals (and why):\nMechanism for reading a timestamp bound from a DbKVS store and poisoning it.\nImplementation Description (bullets):\n\n\nAdded an invalidation runner that reads the state of DBKVS (this includes last_allocated ts), decides if the table should be poisoned or is already poisoned and returns the last_allocated ts\n\n\nPoison - The table is poisoned by renaming the last_allocated column to legacy_last_allocated\n\n\nTesting (What was existing testing like?  What have you done to improve it?):\n\nAdded tests for PostgresKvs\n\nConcerns (what feedback would you like?):\n\n\nRace conditions I may have missed\n\n\nThe invalidation algorithm is correct and transactional\n\n\nDid I accidentally break something in refactoring?\n\n\nNo tests for OracleKvs\n\n\nWhere should we start reviewing?:\nInvalidationRunner\nPriority (whenever / two weeks / yesterday):\nASAP \ud83c\udfc3\u200d\u2640\ufe0f", "createdAt": "2020-09-30T12:35:06Z", "url": "https://github.com/palantir/atlasdb/pull/5010", "merged": true, "mergeCommit": {"oid": "8d295b61ec71e10f86b87be703be657a92af2550"}, "closed": true, "closedAt": "2020-10-02T10:41:20Z", "author": {"login": "sudiksha27"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN_jSmgFqTQ5OTQ0NTIwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOW5YrAH2gAyNDk1NDc3MDE5OjhkZTk2NzA2YTg3ZjcyYTY0ZTFjNDdiMWVjMDMwOGQwOGI5NjAxZWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDQ1MjA0", "url": "https://github.com/palantir/atlasdb/pull/5010#pullrequestreview-499445204", "createdAt": "2020-09-30T13:44:16Z", "commit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo0NDoxNlrOHaePlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjoxOTozM1rOHalbeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDUzNQ==", "bodyText": "InDbTimestampBoundStoreInitializer", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497520535", "createdAt": "2020-09-30T13:44:16Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStoreHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.OracleErrorConstants;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+\n+public class InDbTimestampBoundStoreHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDk0OA==", "bodyText": "Uh, I don't see any snchronisation mechanism, although this is not a regression", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497520948", "createdAt": "2020-09-30T13:44:48Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStoreHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.OracleErrorConstants;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+\n+public class InDbTimestampBoundStoreHelper {\n+    private static final Logger log = LoggerFactory.getLogger(InDbTimestampBoundStore.class);\n+    private final ConnectionManager connManager;\n+\n+    @GuardedBy(\"this\") // lazy init to avoid db connections in constructors\n+    private DBType dbType;\n+\n+    public InDbTimestampBoundStoreHelper(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+    }\n+\n+    public void createTableIfDoesNotExist(String prefixedTimestampTableName) {\n+        try (Connection conn = connManager.getConnection()) {\n+            createTimestampTable(conn, prefixedTimestampTableName);\n+        } catch (SQLException error) {\n+            throw PalantirSqlException.create(error);\n+        }\n+    }\n+\n+    private void createTimestampTable(Connection connection, String prefixedTimestampTableName) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (getDbType(connection).equals(DBType.ORACLE)) {\n+                createTimestampTableIgnoringAlreadyExistsError(statement, prefixedTimestampTableName);\n+            } else {\n+                statement.execute(String.format(\"CREATE TABLE IF NOT EXISTS %s ( last_allocated int8 NOT NULL )\",\n+                        prefixedTimestampTableName));\n+            }\n+        }\n+    }\n+\n+    private void createTimestampTableIgnoringAlreadyExistsError(Statement statement, String prefixedTimestampTableName)\n+            throws SQLException {\n+        try {\n+            statement.execute(String.format(\"CREATE TABLE %s ( last_allocated NUMBER(38) NOT NULL )\",\n+                    prefixedTimestampTableName));\n+        } catch (SQLException e) {\n+            if (!e.getMessage().contains(OracleErrorConstants.ORACLE_ALREADY_EXISTS_ERROR)) {\n+                log.error(\"Error occurred creating the Oracle timestamp table\", e);\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @GuardedBy(\"this\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMTgwNg==", "bodyText": "Maybe just remove the annotation since it's not true? Or just make it synchronized to be on the safe side", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497521806", "createdAt": "2020-09-30T13:45:55Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStoreHelper.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.OracleErrorConstants;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+\n+public class InDbTimestampBoundStoreHelper {\n+    private static final Logger log = LoggerFactory.getLogger(InDbTimestampBoundStore.class);\n+    private final ConnectionManager connManager;\n+\n+    @GuardedBy(\"this\") // lazy init to avoid db connections in constructors\n+    private DBType dbType;\n+\n+    public InDbTimestampBoundStoreHelper(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+    }\n+\n+    public void createTableIfDoesNotExist(String prefixedTimestampTableName) {\n+        try (Connection conn = connManager.getConnection()) {\n+            createTimestampTable(conn, prefixedTimestampTableName);\n+        } catch (SQLException error) {\n+            throw PalantirSqlException.create(error);\n+        }\n+    }\n+\n+    private void createTimestampTable(Connection connection, String prefixedTimestampTableName) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (getDbType(connection).equals(DBType.ORACLE)) {\n+                createTimestampTableIgnoringAlreadyExistsError(statement, prefixedTimestampTableName);\n+            } else {\n+                statement.execute(String.format(\"CREATE TABLE IF NOT EXISTS %s ( last_allocated int8 NOT NULL )\",\n+                        prefixedTimestampTableName));\n+            }\n+        }\n+    }\n+\n+    private void createTimestampTableIgnoringAlreadyExistsError(Statement statement, String prefixedTimestampTableName)\n+            throws SQLException {\n+        try {\n+            statement.execute(String.format(\"CREATE TABLE %s ( last_allocated NUMBER(38) NOT NULL )\",\n+                    prefixedTimestampTableName));\n+        } catch (SQLException e) {\n+            if (!e.getMessage().contains(OracleErrorConstants.ORACLE_ALREADY_EXISTS_ERROR)) {\n+                log.error(\"Error occurred creating the Oracle timestamp table\", e);\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    @GuardedBy(\"this\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDk0OA=="}, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyNjM5NA==", "bodyText": "feature", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497526394", "createdAt": "2020-09-30T13:51:33Z", "author": {"login": "gmaretic"}, "path": "changelog/@unreleased/pr-5010.v2.yml", "diffHunk": "@@ -0,0 +1,7 @@\n+type: fix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzMTQxOA==", "bodyText": "It's not ideal to have this hardcoded, but then again we do the same for Cassandra", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497531418", "createdAt": "2020-09-30T13:57:49Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreHelper;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+import com.palantir.nexus.db.pool.RetriableWriteTransaction;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreHelper helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreHelper(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedAndPoison() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                new RetriableWriteTransaction<Long>() {\n+                    @Override\n+                    public Long run(Connection connection) throws SQLException {\n+                        Limits limits = getLimits(connection);\n+                        TableStatus tableStatus = checkTableStatus(limits);\n+\n+                        if (tableStatus == TableStatus.POISONED) {\n+                            return limits.legacyUpperLimit().value()\n+                                    .orElse(AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP);\n+                        }\n+\n+                        long lastAllocated;\n+\n+                        if (tableStatus == TableStatus.NO_DATA) {\n+                            lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                        } else {\n+                            lastAllocated = limits.upperLimit().value()\n+                                    .orElse(AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP);\n+                        }\n+\n+                        poisonTable(connection);\n+                        return lastAllocated;\n+                    }\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        ImmutableLimits.Builder limitsBuilder = ImmutableLimits.builder();\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return limitsBuilder\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, metaData, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, metaData, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, DatabaseMetaData metaData, Connection connection)\n+            throws SQLException {\n+        ImmutableColumnStatus.Builder columnStatusBuilder = ImmutableColumnStatus.builder();\n+        ResultSet columns = metaData.getColumns(null, null, prefixedTimestampTableName(), colName);\n+\n+        if (columns.next()) {\n+            columnStatusBuilder.exists(true);\n+\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return columnStatusBuilder.value(rs.getLong(colName)).build();\n+                }\n+                return columnStatusBuilder.build();\n+            });\n+\n+        } else {\n+            return columnStatusBuilder.build();\n+        }\n+    }\n+\n+    private String prefixedTimestampTableName() {\n+        return AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE.getQualifiedName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU3MzE5Ng==", "bodyText": "Move to after the tests", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497573196", "createdAt": "2020-09-30T14:50:55Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbKvsPostgresInvalidationRunnerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import static com.palantir.atlasdb.spi.AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStore;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.timestamp.TimestampBoundStore;\n+\n+public class DbKvsPostgresInvalidationRunnerTest {\n+    private final ConnectionManagerAwareDbKvs kvs = DbkvsPostgresTestSuite.createKvs();\n+    private final TimestampBoundStore store = getStore();\n+    private final InvalidationRunner invalidationRunner = new InvalidationRunner(kvs.getConnectionManager());\n+    private static final long TIMESTAMP_1 = 12000;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        kvs.dropTable(AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE);\n+        invalidationRunner.createTableIfDoesNotExist();\n+    }\n+\n+    public InDbTimestampBoundStore getStore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e017b134c21d314822c2d6b901a9fa3869db848d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMDMwNQ==", "bodyText": "Currently this keeps retrying for a long time and then fails. So also when we poison the store, readers will behave the same. This is good because there is no risk of corruption, but it would be better to fail more quickly. We can change the read behaviour to allow for that, but in general we cannot succeed in this in case of an atlasdb downgrade.", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497630305", "createdAt": "2020-09-30T16:07:44Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbKvsPostgresInvalidationRunnerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import static com.palantir.atlasdb.spi.AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStore;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.timestamp.TimestampBoundStore;\n+\n+public class DbKvsPostgresInvalidationRunnerTest {\n+    private final ConnectionManagerAwareDbKvs kvs = DbkvsPostgresTestSuite.createKvs();\n+    private final TimestampBoundStore store = getStore();\n+    private final InvalidationRunner invalidationRunner = new InvalidationRunner(kvs.getConnectionManager());\n+    private static final long TIMESTAMP_1 = 12000;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        kvs.dropTable(AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE);\n+        invalidationRunner.createTableIfDoesNotExist();\n+    }\n+\n+    public InDbTimestampBoundStore getStore() {\n+        return InDbTimestampBoundStore.create(\n+                kvs.getConnectionManager(),\n+                AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE,\n+                DbkvsPostgresTestSuite.getKvsConfig().ddl().tablePrefix());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        kvs.close();\n+    }\n+\n+    @Test\n+    public void poisonsEmptyTableAndReturnsNoOpTs() {\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+    }\n+\n+    @Test\n+    public void poisonsEmptyTableAndReturnsStoredBound() {\n+        store.getUpperLimit();\n+        store.storeUpperLimit(TIMESTAMP_1);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+    }\n+\n+    @Test\n+    public void cannotReadAfterBeingPoisoned() {\n+        invalidationRunner.getLastAllocatedAndPoison();\n+        assertBoundNotReadable();\n+    }\n+\n+    @Test\n+    public void poisoningMultipleTimesIsAllowed() {\n+        store.storeUpperLimit(TIMESTAMP_1);\n+        store.getUpperLimit();\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+    }\n+\n+    @Test\n+    public void poisoningEmptyTableMultipleTimesIsAllowed() {\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+        assertBoundNotReadable();\n+    }\n+\n+    private void assertBoundNotReadable() {\n+        assertThatThrownBy(store::getUpperLimit).isInstanceOf(PalantirSqlException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMDc5MQ==", "bodyText": "We can check in the store if there is the poison column first, and if yes, then fail immediately", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497630791", "createdAt": "2020-09-30T16:08:28Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbKvsPostgresInvalidationRunnerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import static com.palantir.atlasdb.spi.AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStore;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.timestamp.TimestampBoundStore;\n+\n+public class DbKvsPostgresInvalidationRunnerTest {\n+    private final ConnectionManagerAwareDbKvs kvs = DbkvsPostgresTestSuite.createKvs();\n+    private final TimestampBoundStore store = getStore();\n+    private final InvalidationRunner invalidationRunner = new InvalidationRunner(kvs.getConnectionManager());\n+    private static final long TIMESTAMP_1 = 12000;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        kvs.dropTable(AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE);\n+        invalidationRunner.createTableIfDoesNotExist();\n+    }\n+\n+    public InDbTimestampBoundStore getStore() {\n+        return InDbTimestampBoundStore.create(\n+                kvs.getConnectionManager(),\n+                AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE,\n+                DbkvsPostgresTestSuite.getKvsConfig().ddl().tablePrefix());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        kvs.close();\n+    }\n+\n+    @Test\n+    public void poisonsEmptyTableAndReturnsNoOpTs() {\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+    }\n+\n+    @Test\n+    public void poisonsEmptyTableAndReturnsStoredBound() {\n+        store.getUpperLimit();\n+        store.storeUpperLimit(TIMESTAMP_1);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+    }\n+\n+    @Test\n+    public void cannotReadAfterBeingPoisoned() {\n+        invalidationRunner.getLastAllocatedAndPoison();\n+        assertBoundNotReadable();\n+    }\n+\n+    @Test\n+    public void poisoningMultipleTimesIsAllowed() {\n+        store.storeUpperLimit(TIMESTAMP_1);\n+        store.getUpperLimit();\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(TIMESTAMP_1);\n+    }\n+\n+    @Test\n+    public void poisoningEmptyTableMultipleTimesIsAllowed() {\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+        assertThat(invalidationRunner.getLastAllocatedAndPoison()).isEqualTo(NO_OP_FAST_FORWARD_TIMESTAMP);\n+        assertBoundNotReadable();\n+    }\n+\n+    private void assertBoundNotReadable() {\n+        assertThatThrownBy(store::getUpperLimit).isInstanceOf(PalantirSqlException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMDMwNQ=="}, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMjk4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final ConnectionManagerAwareDbKvs kvs = DbkvsPostgresTestSuite.createKvs();\n          \n          \n            \n                @ClassRule\n          \n          \n            \n                public static final TestResourceManager TRM = new TestResourceManager(DbkvsPostgresTestSuite::createKvs);\n          \n          \n            \n                \n          \n          \n            \n                private final ConnectionManagerAwareDbKvs kvs = (ConnectionManagerAwareDbKvs) TRM.getDefaultKvs();\n          \n          \n            \n                private final TimestampBoundStore store = InDbTimestampBoundStore.create(\n          \n          \n            \n                        kvs.getConnectionManager(),\n          \n          \n            \n                        AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE,\n          \n          \n            \n                        DbkvsPostgresTestSuite.getKvsConfig().ddl().tablePrefix());\n          \n          \n            \n                private final InvalidationRunner invalidationRunner = new InvalidationRunner(kvs.getConnectionManager());\n          \n          \n            \n                private static final long TIMESTAMP_1 = 12000;\n          \n          \n            \n            \n          \n          \n            \n                @Before\n          \n          \n            \n                public void setUp() {\n          \n          \n            \n                    kvs.dropTable(AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE);\n          \n          \n            \n                    invalidationRunner.createTableIfDoesNotExist();\n          \n          \n            \n                }", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497632982", "createdAt": "2020-09-30T16:11:42Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbKvsPostgresInvalidationRunnerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import static com.palantir.atlasdb.spi.AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStore;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.timestamp.TimestampBoundStore;\n+\n+public class DbKvsPostgresInvalidationRunnerTest {\n+    private final ConnectionManagerAwareDbKvs kvs = DbkvsPostgresTestSuite.createKvs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMzcxOQ==", "bodyText": "Maybe add some java docs", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497633719", "createdAt": "2020-09-30T16:12:43Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreHelper;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+import com.palantir.nexus.db.pool.RetriableWriteTransaction;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreHelper helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreHelper(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedAndPoison() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzNTIyNw==", "bodyText": "Maybe whenTableIsEmpty...", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497635227", "createdAt": "2020-09-30T16:14:56Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbKvsPostgresInvalidationRunnerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import static com.palantir.atlasdb.spi.AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStore;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.timestamp.TimestampBoundStore;\n+\n+public class DbKvsPostgresInvalidationRunnerTest {\n+    private final ConnectionManagerAwareDbKvs kvs = DbkvsPostgresTestSuite.createKvs();\n+    private final TimestampBoundStore store = getStore();\n+    private final InvalidationRunner invalidationRunner = new InvalidationRunner(kvs.getConnectionManager());\n+    private static final long TIMESTAMP_1 = 12000;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        kvs.dropTable(AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE);\n+        invalidationRunner.createTableIfDoesNotExist();\n+    }\n+\n+    public InDbTimestampBoundStore getStore() {\n+        return InDbTimestampBoundStore.create(\n+                kvs.getConnectionManager(),\n+                AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE,\n+                DbkvsPostgresTestSuite.getKvsConfig().ddl().tablePrefix());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        kvs.close();\n+    }\n+\n+    @Test\n+    public void poisonsEmptyTableAndReturnsNoOpTs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzODI2NQ==", "bodyText": "Actually, implements TimestampStoreInvalidator", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r497638265", "createdAt": "2020-09-30T16:19:33Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreHelper;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+import com.palantir.nexus.db.pool.RetriableWriteTransaction;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreHelper helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreHelper(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedAndPoison() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYzMzcxOQ=="}, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjE0Njk0", "url": "https://github.com/palantir/atlasdb/pull/5010#pullrequestreview-500214694", "createdAt": "2020-10-01T10:32:37Z", "commit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDozMjozN1rOHbEVPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDo0NTo1M1rOHbEv_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0NDU3NQ==", "bodyText": "nit: static", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498144575", "createdAt": "2020-10-01T10:32:37Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return ImmutableLimits.builder()\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, Connection connection) throws SQLException {\n+        if (hasColumn(connection, colName)) {\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return ColumnStatus.columnStatusWithValue(rs.getLong(colName));\n+                }\n+                return ColumnStatus.columnStatusWithoutValue();\n+            });\n+\n+        } else {\n+            return ColumnStatus.voidColumnStatus();\n+        }\n+    }\n+\n+    private boolean hasColumn(Connection connection, String colName) throws SQLException {\n+        return connection.getMetaData()\n+                .getColumns(null, null, prefixedTimestampTableName(), colName)\n+                .next();\n+    }\n+\n+    private String prefixedTimestampTableName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0NjU3Ng==", "bodyText": "would suggest extracting a method for this part", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498146576", "createdAt": "2020-10-01T10:36:37Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0NzE4NQ==", "bodyText": "nit: please use SafeIllegalStateException/an arg", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498147185", "createdAt": "2020-10-01T10:37:50Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE0NzM5Mw==", "bodyText": "nit: you have constants :)", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498147393", "createdAt": "2020-10-01T10:38:13Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MDQ0Mg==", "bodyText": "I'd suggest having an OptionalLong for value here, and have users just use an Optional<ColumnStatus> rather than the null object pattern we're trying here", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498150442", "createdAt": "2020-10-01T10:43:53Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return ImmutableLimits.builder()\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, Connection connection) throws SQLException {\n+        if (hasColumn(connection, colName)) {\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return ColumnStatus.columnStatusWithValue(rs.getLong(colName));\n+                }\n+                return ColumnStatus.columnStatusWithoutValue();\n+            });\n+\n+        } else {\n+            return ColumnStatus.voidColumnStatus();\n+        }\n+    }\n+\n+    private boolean hasColumn(Connection connection, String colName) throws SQLException {\n+        return connection.getMetaData()\n+                .getColumns(null, null, prefixedTimestampTableName(), colName)\n+                .next();\n+    }\n+\n+    private String prefixedTimestampTableName() {\n+        return AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE.getQualifiedName();\n+    }\n+\n+    private TableStatus checkTableStatus(Limits limits) {\n+        TableStatus status = getTableStatus(limits);\n+\n+        Preconditions.checkState(status != TableStatus.ILLEGAL_COLUMNS,\n+                \"We detected the table has both current as well as legacy columns.\"\n+                        + \"This is unexpected. Please contact support.\");\n+        return status;\n+    }\n+\n+    private TableStatus getTableStatus(Limits limits) {\n+        boolean upperLimitExists = limits.upperLimit().exists();\n+        boolean legacyUpperLimitExists = limits.legacyUpperLimit().exists();\n+\n+        if (upperLimitExists) {\n+            return legacyUpperLimitExists ? TableStatus.ILLEGAL_COLUMNS : TableStatus.HEALTHY;\n+        }\n+        return legacyUpperLimitExists ? TableStatus.POISONED : TableStatus.NO_DATA; // no data in table\n+    }\n+\n+    @Value.Immutable\n+    interface Limits {\n+        ColumnStatus upperLimit();\n+        ColumnStatus legacyUpperLimit();\n+    }\n+\n+    @Value.Immutable\n+    interface ColumnStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MDkxNg==", "bodyText": "nit: the if above returns, so else here isn't needed.", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498150916", "createdAt": "2020-10-01T10:44:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return ImmutableLimits.builder()\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, Connection connection) throws SQLException {\n+        if (hasColumn(connection, colName)) {\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return ColumnStatus.columnStatusWithValue(rs.getLong(colName));\n+                }\n+                return ColumnStatus.columnStatusWithoutValue();\n+            });\n+\n+        } else {\n+            return ColumnStatus.voidColumnStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MTI4Ng==", "bodyText": "in fact, it's probably nicer to have if(!hasColumn(...)) return ... and then the rest doesn't need to be in an if-block", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498151286", "createdAt": "2020-10-01T10:45:35Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return ImmutableLimits.builder()\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, Connection connection) throws SQLException {\n+        if (hasColumn(connection, colName)) {\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return ColumnStatus.columnStatusWithValue(rs.getLong(colName));\n+                }\n+                return ColumnStatus.columnStatusWithoutValue();\n+            });\n+\n+        } else {\n+            return ColumnStatus.voidColumnStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MDkxNg=="}, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MTQyMQ==", "bodyText": "nit: Might be worth clarifying what ILLEGAL_COLUMNS means", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498151421", "createdAt": "2020-10-01T10:45:53Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedTimestampAndPoisonInDbStore() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().value();\n+                    }\n+\n+                    long lastAllocated;\n+                    if (tableStatus == TableStatus.NO_DATA) {\n+                        lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                    } else {\n+                        lastAllocated = limits.upperLimit().value();\n+                    }\n+\n+                    poisonTable(connection);\n+                    return lastAllocated;\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return ImmutableLimits.builder()\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, Connection connection) throws SQLException {\n+        if (hasColumn(connection, colName)) {\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return ColumnStatus.columnStatusWithValue(rs.getLong(colName));\n+                }\n+                return ColumnStatus.columnStatusWithoutValue();\n+            });\n+\n+        } else {\n+            return ColumnStatus.voidColumnStatus();\n+        }\n+    }\n+\n+    private boolean hasColumn(Connection connection, String colName) throws SQLException {\n+        return connection.getMetaData()\n+                .getColumns(null, null, prefixedTimestampTableName(), colName)\n+                .next();\n+    }\n+\n+    private String prefixedTimestampTableName() {\n+        return AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE.getQualifiedName();\n+    }\n+\n+    private TableStatus checkTableStatus(Limits limits) {\n+        TableStatus status = getTableStatus(limits);\n+\n+        Preconditions.checkState(status != TableStatus.ILLEGAL_COLUMNS,\n+                \"We detected the table has both current as well as legacy columns.\"\n+                        + \"This is unexpected. Please contact support.\");\n+        return status;\n+    }\n+\n+    private TableStatus getTableStatus(Limits limits) {\n+        boolean upperLimitExists = limits.upperLimit().exists();\n+        boolean legacyUpperLimitExists = limits.legacyUpperLimit().exists();\n+\n+        if (upperLimitExists) {\n+            return legacyUpperLimitExists ? TableStatus.ILLEGAL_COLUMNS : TableStatus.HEALTHY;\n+        }\n+        return legacyUpperLimitExists ? TableStatus.POISONED : TableStatus.NO_DATA; // no data in table\n+    }\n+\n+    @Value.Immutable\n+    interface Limits {\n+        ColumnStatus upperLimit();\n+        ColumnStatus legacyUpperLimit();\n+    }\n+\n+    @Value.Immutable\n+    interface ColumnStatus {\n+        @Value.Default\n+        default Boolean exists() {\n+            return false;\n+        }\n+\n+        @Value.Default\n+        default long value() {\n+            return AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+        }\n+\n+        static ColumnStatus columnStatusWithValue(long value) {\n+            return ImmutableColumnStatus.builder().exists(true).value(value).build();\n+        }\n+\n+        static ColumnStatus columnStatusWithoutValue() {\n+            return ImmutableColumnStatus.builder().exists(true).build();\n+        }\n+\n+        static ColumnStatus voidColumnStatus() {\n+            return ImmutableColumnStatus.builder().build();\n+        }\n+    }\n+\n+    private enum TableStatus {\n+        NO_DATA,\n+        POISONED,\n+        HEALTHY,\n+        ILLEGAL_COLUMNS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5e77fa5b822a83c401bb9682e53cc5df4a261b8"}, "originalPosition": 196}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTczNzg2", "url": "https://github.com/palantir/atlasdb/pull/5010#pullrequestreview-500573786", "createdAt": "2020-10-01T17:36:19Z", "commit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozNjoyMFrOHbUjGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzo0MTo0M1rOHbUuig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMDI2Ng==", "bodyText": "nit: didn't mention this first time, but initializer is maybe more accurate?", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498410266", "createdAt": "2020-10-01T17:36:20Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Optional;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.BoundStoreUtils;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMDg2Ng==", "bodyText": "nit: does this one need to be public? might have missed something but it feels like a private thing!", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498410866", "createdAt": "2020-10-01T17:37:30Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Optional;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.BoundStoreUtils;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreInitializer;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreInitializer helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreInitializer(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long ensureInDbStoreIsPoisonedAndGetLastAllocatedTimestamp() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().get().value();\n+                    }\n+                    return poisonStoreAndGetLastAllocatedTimestamp(connection, limits, tableStatus);\n+                });\n+\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new SafeIllegalStateException(\"Unrecognized transaction status.\",\n+                        SafeArg.of(\"status\", result.getStatus()));\n+        }\n+    }\n+\n+    public Long poisonStoreAndGetLastAllocatedTimestamp(Connection connection, Limits limits,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMTc2Mw==", "bodyText": "Actually, I don't think this is right: you want AtlasDbConstants.TIMESTAMP_TABLE, or maybe even take in an argument. This is meant to invalidate a timestamp table from embedded -> timelock migration, so it needs to be the table a user previously ran an InDbTimestampBoundStore against.\nI'm aware there is one internal deployment where some special handling is required, but we'll help them as a special case.\nHope this made sense! Happy to catch up offline to clarify things if needed.", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498411763", "createdAt": "2020-10-01T17:39:06Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStoreHelper;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+import com.palantir.nexus.db.pool.RetriableWriteTransaction;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final InDbTimestampBoundStoreHelper helper;\n+\n+    public InvalidationRunner(ConnectionManager connManager) {\n+        this.connManager = connManager;\n+        this.helper = new InDbTimestampBoundStoreHelper(connManager);\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        helper.createTableIfDoesNotExist(prefixedTimestampTableName());\n+    }\n+\n+    public long getLastAllocatedAndPoison() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                new RetriableWriteTransaction<Long>() {\n+                    @Override\n+                    public Long run(Connection connection) throws SQLException {\n+                        Limits limits = getLimits(connection);\n+                        TableStatus tableStatus = checkTableStatus(limits);\n+\n+                        if (tableStatus == TableStatus.POISONED) {\n+                            return limits.legacyUpperLimit().value()\n+                                    .orElse(AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP);\n+                        }\n+\n+                        long lastAllocated;\n+\n+                        if (tableStatus == TableStatus.NO_DATA) {\n+                            lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+                        } else {\n+                            lastAllocated = limits.upperLimit().value()\n+                                    .orElse(AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP);\n+                        }\n+\n+                        poisonTable(connection);\n+                        return lastAllocated;\n+                    }\n+                });\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new IllegalStateException(\"Unrecognized transaction status \" + result.getStatus());\n+        }\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME last_allocated TO LEGACY_last_allocated\",\n+                        prefixedTimestampTableName()));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        ImmutableLimits.Builder limitsBuilder = ImmutableLimits.builder();\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return limitsBuilder\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, metaData, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, metaData, connection))\n+                .build();\n+    }\n+\n+    private ColumnStatus getColumnStatus(String colName, DatabaseMetaData metaData, Connection connection)\n+            throws SQLException {\n+        ImmutableColumnStatus.Builder columnStatusBuilder = ImmutableColumnStatus.builder();\n+        ResultSet columns = metaData.getColumns(null, null, prefixedTimestampTableName(), colName);\n+\n+        if (columns.next()) {\n+            columnStatusBuilder.exists(true);\n+\n+            String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+            QueryRunner run = new QueryRunner();\n+            return run.query(connection, sql, rs -> {\n+                if (rs.next()) {\n+                    return columnStatusBuilder.value(rs.getLong(colName)).build();\n+                }\n+                return columnStatusBuilder.build();\n+            });\n+\n+        } else {\n+            return columnStatusBuilder.build();\n+        }\n+    }\n+\n+    private String prefixedTimestampTableName() {\n+        return AtlasDbConstants.TIMELOCK_TIMESTAMP_TABLE.getQualifiedName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzMTQxOA=="}, "originalCommit": {"oid": "e8e3e8874736f0a7662e7919eba515b6fba9af2d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjE4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public BoundStoreUtils() {\n          \n          \n            \n                private BoundStoreUtils() {\n          \n      \n    \n    \n  \n\n\ud83d\ude05", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498412187", "createdAt": "2020-10-01T17:39:50Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/BoundStoreUtils.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+public class BoundStoreUtils {\n+\n+    public BoundStoreUtils() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class BoundStoreUtils {\n          \n          \n            \n            public final class BoundStoreUtils {\n          \n      \n    \n    \n  \n\nsince there's no point extending this", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498412348", "createdAt": "2020-10-01T17:40:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/BoundStoreUtils.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+public class BoundStoreUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMjYzNA==", "bodyText": "Ah! This is a nice touch. I did not think of this...", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498412634", "createdAt": "2020-10-01T17:40:35Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -182,6 +170,10 @@ public synchronized void storeUpperLimit(final long limit) {\n     }\n \n     private Long readLimit(Connection connection) throws SQLException {\n+        if (!BoundStoreUtils.hasColumn(connection, prefixedTimestampTableName(), \"last_allocated\")) {\n+            throw new SafeIllegalStateException(\"The store will not service requests as it had been poisoned during\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzE5NA==", "bodyText": "Good coverage \ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498413194", "createdAt": "2020-10-01T17:41:43Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbKvsPostgresInvalidationRunnerTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import static com.palantir.atlasdb.spi.AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.InDbTimestampBoundStore;\n+import com.palantir.atlasdb.keyvalue.impl.TestResourceManager;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+import com.palantir.timestamp.TimestampBoundStore;\n+\n+public class DbKvsPostgresInvalidationRunnerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61daed52dd448a570c48bfd221b30738b72fc9ec", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/61daed52dd448a570c48bfd221b30738b72fc9ec", "committedDate": "2020-10-01T18:19:45Z", "message": "Invalidate DB Kvs store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685d72ed411512aa6e2d5c3cb404ec23903980be", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/685d72ed411512aa6e2d5c3cb404ec23903980be", "committedDate": "2020-10-01T18:19:45Z", "message": "Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "426a4918b84644e6c17905b13ecf5b2a25415730", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/426a4918b84644e6c17905b13ecf5b2a25415730", "committedDate": "2020-10-01T18:19:45Z", "message": "Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab7fc83ac5eaf126e9a6b1164ddc753f8c6c01c", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/8ab7fc83ac5eaf126e9a6b1164ddc753f8c6c01c", "committedDate": "2020-10-01T18:19:45Z", "message": "Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19a952c1fc74606e1b0c48c5004804687e51032", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/f19a952c1fc74606e1b0c48c5004804687e51032", "committedDate": "2020-10-01T18:19:45Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe38b6889cedf24bc56b6e054b9da525d32f92c0", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/fe38b6889cedf24bc56b6e054b9da525d32f92c0", "committedDate": "2020-10-01T18:20:33Z", "message": "Refactor + Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db05031c9cda531130c1ccaf65129dcc976aa0bd", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/db05031c9cda531130c1ccaf65129dcc976aa0bd", "committedDate": "2020-10-01T18:20:33Z", "message": "Address comments - 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c526d477d409e310ee850e597b356f4658a25230", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/c526d477d409e310ee850e597b356f4658a25230", "committedDate": "2020-10-01T18:20:33Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2198ed6fe347f18ee718a089a6af0b59a65b7b10", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/2198ed6fe347f18ee718a089a6af0b59a65b7b10", "committedDate": "2020-10-01T18:20:33Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88aece214077b7e181ad7542bb0dc4c3732e0fdf", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/88aece214077b7e181ad7542bb0dc4c3732e0fdf", "committedDate": "2020-10-01T18:21:06Z", "message": "Fail fast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/8b40b4dc645bc26fea3766a0fa27ae11b66a7593", "committedDate": "2020-10-01T19:07:21Z", "message": "Rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "091025420a282133a147ff2d04846841763afe7b", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/091025420a282133a147ff2d04846841763afe7b", "committedDate": "2020-10-01T16:39:58Z", "message": "Fail fast"}, "afterCommit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/8b40b4dc645bc26fea3766a0fa27ae11b66a7593", "committedDate": "2020-10-01T19:07:21Z", "message": "Rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjY2NzI4", "url": "https://github.com/palantir/atlasdb/pull/5010#pullrequestreview-500666728", "createdAt": "2020-10-01T19:47:25Z", "commit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTo0NzoyNVrOHbYnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTo1MDoxMVrOHbYsTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3Njg0MA==", "bodyText": "nit: missing line?", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498476840", "createdAt": "2020-10-01T19:47:25Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/DbTimestampStoreInvalidator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.dbkvs.impl.ConnectionManagerAwareDbKvs;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.timestamp.TimestampStoreInvalidator;\n+\n+public class DbTimestampStoreInvalidator implements TimestampStoreInvalidator {\n+    private final InvalidationRunner invalidationRunner;\n+\n+    public DbTimestampStoreInvalidator(ConnectionManagerAwareDbKvs kvs,\n+            TableReference timestampTable,\n+            String tablePrefixString) {\n+        this.invalidationRunner = new InvalidationRunner(kvs.getConnectionManager(), timestampTable, tablePrefixString);\n+    }\n+\n+    public static TimestampStoreInvalidator create(KeyValueService kvs,\n+            TableReference timestampTable,\n+            String tablePrefixString) {\n+        Preconditions.checkArgument(kvs instanceof ConnectionManagerAwareDbKvs,\n+                \"DbTimestampStoreInvalidator should be instantiated with a ConnectionManagerAwareDbKvs!\");\n+        return new DbTimestampStoreInvalidator((ConnectionManagerAwareDbKvs) kvs, timestampTable, tablePrefixString);\n+    }\n+\n+    @Override\n+    public long backupAndInvalidate() {\n+        invalidationRunner.createTableIfDoesNotExist();\n+        return invalidationRunner.ensureInDbStoreIsPoisonedAndGetLastAllocatedTimestamp();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3NzQzNw==", "bodyText": "as above: missing line", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498477437", "createdAt": "2020-10-01T19:48:42Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/CreateTimestampTableQueries.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface CreateTimestampTableQueries {\n+    String postgresQuery();\n+    String oracleQuery();\n+\n+    static CreateTimestampTableQueries getCreateTableQueriesForLegacyStore(String prefixedTimestampTableName) {\n+        return ImmutableCreateTimestampTableQueries.builder()\n+                .postgresQuery(String.format(\"CREATE TABLE IF NOT EXISTS %s ( last_allocated int8 NOT NULL )\",\n+                        prefixedTimestampTableName))\n+                .oracleQuery(String.format(\"CREATE TABLE %s ( last_allocated NUMBER(38) NOT NULL )\",\n+                        prefixedTimestampTableName))\n+                .build();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3NzY4Ng==", "bodyText": "nit: ?", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498477686", "createdAt": "2020-10-01T19:49:12Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -34,6 +34,7 @@\n import com.palantir.timestamp.MultipleRunningTimestampServiceError;\n import com.palantir.timestamp.TimestampBoundStore;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ3ODE1OQ==", "bodyText": "nit: I'd put these above the interfaces/enums here; typically inner classes come at the end of the file.", "url": "https://github.com/palantir/atlasdb/pull/5010#discussion_r498478159", "createdAt": "2020-10-01T19:50:11Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/InvalidationRunner.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Optional;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.immutables.value.Value;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.ConnectionDbTypes;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.CreateTimestampTableQueries;\n+import com.palantir.atlasdb.keyvalue.dbkvs.timestamp.PhysicalBoundStoreDatabaseUtils;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.exception.PalantirSqlException;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+import com.palantir.nexus.db.DBType;\n+import com.palantir.nexus.db.pool.ConnectionManager;\n+import com.palantir.nexus.db.pool.RetriableTransactions;\n+\n+public class InvalidationRunner {\n+    private static final String LAST_ALLOCATED = \"last_allocated\";\n+    private static final String LEGACY_LAST_ALLOCATED = \"legacy_last_allocated\";\n+\n+    private final ConnectionManager connManager;\n+    private final TableReference timestampTable;\n+    private final String tablePrefix;\n+\n+    public InvalidationRunner(ConnectionManager connManager, TableReference timestampTable, String tablePrefixString) {\n+        this.connManager = connManager;\n+        this.timestampTable = timestampTable;\n+        this.tablePrefix = tablePrefixString;\n+    }\n+\n+    public void createTableIfDoesNotExist() {\n+        try (Connection conn = connManager.getConnection()) {\n+            createTimestampTable(conn);\n+        } catch (SQLException error) {\n+            throw PalantirSqlException.create(error);\n+        }\n+    }\n+\n+    public void createTimestampTable(Connection conn) throws SQLException {\n+        PhysicalBoundStoreDatabaseUtils.createTimestampTable(\n+                conn,\n+                ConnectionDbTypes::getDbType,\n+                CreateTimestampTableQueries.getCreateTableQueriesForLegacyStore(prefixedTimestampTableName()));\n+    }\n+\n+    public long ensureInDbStoreIsPoisonedAndGetLastAllocatedTimestamp() {\n+        RetriableTransactions.TransactionResult<Long> result = RetriableTransactions.run(connManager,\n+                connection -> {\n+                    Limits limits = getLimits(connection);\n+                    TableStatus tableStatus = checkTableStatus(limits);\n+\n+                    if (tableStatus == TableStatus.POISONED) {\n+                        return limits.legacyUpperLimit().get().value();\n+                    }\n+                    return poisonStoreAndGetLastAllocatedTimestamp(connection, limits, tableStatus);\n+                });\n+\n+        switch (result.getStatus()) {\n+            case SUCCESSFUL:\n+                return result.getResultValue();\n+            case UNKNOWN:\n+            case FAILED:\n+                Throwable error = result.getError();\n+                if (error instanceof SQLException) {\n+                    throw PalantirSqlException.create((SQLException) error);\n+                }\n+                throw Throwables.rewrapAndThrowUncheckedException(error);\n+            default:\n+                throw new SafeIllegalStateException(\"Unrecognized transaction status.\",\n+                        SafeArg.of(\"status\", result.getStatus()));\n+        }\n+    }\n+\n+    private Long poisonStoreAndGetLastAllocatedTimestamp(Connection connection, Limits limits,\n+            TableStatus tableStatus) throws SQLException {\n+\n+        long lastAllocated;\n+        if (tableStatus == TableStatus.NO_DATA) {\n+            lastAllocated = AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+        } else {\n+            lastAllocated = limits.upperLimit().get().value();\n+        }\n+        poisonTable(connection);\n+        return lastAllocated;\n+    }\n+\n+    private void poisonTable(Connection connection) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (ConnectionDbTypes.getDbType(connection).equals(DBType.ORACLE)) {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME COLUMN %s TO %s\",\n+                        prefixedTimestampTableName(), LAST_ALLOCATED, LEGACY_LAST_ALLOCATED));\n+            } else {\n+                statement.execute(String.format(\"ALTER TABLE %s RENAME %s TO %s\",\n+                        prefixedTimestampTableName(), LAST_ALLOCATED, LEGACY_LAST_ALLOCATED));\n+            }\n+        }\n+    }\n+\n+    private Limits getLimits(Connection connection) throws SQLException {\n+        DatabaseMetaData metaData = connection.getMetaData();\n+        ResultSet res = metaData.getTables(null, null, prefixedTimestampTableName(), null);\n+\n+        Preconditions.checkState(res.next(), \"We are in the process of invalidating the \"\n+                + \"InDbTimestampBoundStore but the data table does not exist. \"\n+                + \"We should never reach here. Please contact support.\");\n+\n+        return ImmutableLimits.builder()\n+                .upperLimit(getColumnStatus(LAST_ALLOCATED, connection))\n+                .legacyUpperLimit(getColumnStatus(LEGACY_LAST_ALLOCATED, connection))\n+                .build();\n+    }\n+\n+    private Optional<ColumnStatus> getColumnStatus(String colName, Connection connection) throws SQLException {\n+        if (!PhysicalBoundStoreDatabaseUtils.hasColumn(connection, prefixedTimestampTableName(), colName)) {\n+            return Optional.empty();\n+        }\n+\n+        String sql = String.format(\"SELECT %s FROM %s FOR UPDATE\", colName, prefixedTimestampTableName());\n+        QueryRunner run = new QueryRunner();\n+        return run.query(connection, sql, rs -> {\n+            if (rs.next()) {\n+                return ColumnStatus.columnStatusWithValue(rs.getLong(colName));\n+            }\n+            return ColumnStatus.columnStatusWithoutValue();\n+        });\n+    }\n+\n+    private TableStatus checkTableStatus(Limits limits) {\n+        TableStatus status = getTableStatus(limits);\n+\n+        Preconditions.checkState(status != TableStatus.BOTH_COLUMNS,\n+                \"We detected the table has been poisoned but last_allocated column still exists.\"\n+                        + \"This is unexpected. Please contact support.\");\n+        return status;\n+    }\n+\n+    private TableStatus getTableStatus(Limits limits) {\n+        boolean upperLimitExists = limits.upperLimit().isPresent();\n+        boolean legacyUpperLimitExists = limits.legacyUpperLimit().isPresent();\n+\n+        if (upperLimitExists) {\n+            return legacyUpperLimitExists ? TableStatus.BOTH_COLUMNS : TableStatus.HEALTHY;\n+        }\n+        return legacyUpperLimitExists ? TableStatus.POISONED : TableStatus.NO_DATA; // no data in table\n+    }\n+\n+    @Value.Immutable\n+    interface Limits {\n+        Optional<ColumnStatus> upperLimit();\n+        Optional<ColumnStatus> legacyUpperLimit();\n+    }\n+\n+    @Value.Immutable\n+    interface ColumnStatus {\n+        @Value.Default\n+        default long value() {\n+            return AtlasDbFactory.NO_OP_FAST_FORWARD_TIMESTAMP;\n+        }\n+\n+        static Optional<ColumnStatus> columnStatusWithValue(long value) {\n+            return Optional.of(ImmutableColumnStatus.builder().value(value).build());\n+        }\n+\n+        static Optional<ColumnStatus> columnStatusWithoutValue() {\n+            return Optional.of(ImmutableColumnStatus.builder().build());\n+        }\n+    }\n+\n+    private String prefixedTimestampTableName() {\n+        return tablePrefix + timestampTable.getQualifiedName();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b40b4dc645bc26fea3766a0fa27ae11b66a7593"}, "originalPosition": 197}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb213d174c683827bb07eb78f7efbdf65ce2a5a", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/4fb213d174c683827bb07eb78f7efbdf65ce2a5a", "committedDate": "2020-10-01T19:52:46Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de96706a87f72a64e1c47b1ec0308d08b9601ed", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/8de96706a87f72a64e1c47b1ec0308d08b9601ed", "committedDate": "2020-10-01T19:52:46Z", "message": "Add generated changelog entries"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2608, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}