{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDk1OTU3", "number": 5012, "title": "[LW] Retention LWEC on max size", "bodyText": "Goals (and why):\n\nThere are cases where it doesn't make sense to only retention on in-flight transactions. In particular, if you have two clients, and one of them is slower than the other, and the slow one talks to Atlas on the fast server, then it will receive a snapshot and cancel all in-flight transactions on the slow one.\n\nImplementation Description (bullets):\n\nChange retention strategy in VersionedEventStore to go on max size instead of living transactions\nThis breaks the invariant that we always keep enough versions around - therefore, we need further checks that we have the right versions around.\nSome refactoring around how the checks are carried out improves clarity.\n\nTesting (What was existing testing like?  What have you done to improve it?):\nThere are several tests:\n\nTimestampStateStoreTest\nVersionedEventStoreTest\nLockWatchEventCacheIntegrationTest\nMuch of the behaviour stayed the same, apart from retention. Any retention-based tests were modified according to the new behaviour, and two tests were added.\n\nConcerns (what feedback would you like?):\n\nCorrectness most of all - I want to make sure we're not shooting ourselves at any point here.\nAlso, we want to make sure we're not making this inefficient (e.g. retrying too many transactions).\n\nWhere should we start reviewing?:\nVersionedEventStore is probably the best place to start, then spread out from there. Other key classes are LockWatchEventLog and LockWatchEventCacheImpl.\nPriority (whenever / two weeks / yesterday):\nWe want to get this merged before end of day tomorrow.", "createdAt": "2020-10-01T09:07:02Z", "url": "https://github.com/palantir/atlasdb/pull/5012", "merged": true, "mergeCommit": {"oid": "f7b19a3d5f4f7224fdb28d6a00017bb3df3922a2"}, "closed": true, "closedAt": "2020-10-02T15:22:45Z", "author": {"login": "Jolyon-S"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN8gd2gH2gAyNDk2MDk1OTU3OmI5OGM1Yzk5YzdkMTM1MTgwODk5ZjJlMzJiYjYxNzljY2FmNzRiMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOnoeegFqTUwMTIzMDcyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b98c5c99c7d135180899f2e32bb6179ccaf74b34", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/b98c5c99c7d135180899f2e32bb6179ccaf74b34", "committedDate": "2020-09-30T13:08:01Z", "message": "Initial pass on retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a806c2d20d2a6307dadd50b2c42f7eb99a48c7e1", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/a806c2d20d2a6307dadd50b2c42f7eb99a48c7e1", "committedDate": "2020-09-30T13:34:32Z", "message": "Initial pass on retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76b01f47ed328941d7e12c48b85d9a6d2d1d071", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/a76b01f47ed328941d7e12c48b85d9a6d2d1d071", "committedDate": "2020-09-30T13:34:58Z", "message": "initial processing around the broken invariant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9877074fe258f53774886d8ef0f2d1c7f2926ca", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/e9877074fe258f53774886d8ef0f2d1c7f2926ca", "committedDate": "2020-09-30T13:44:18Z", "message": "thing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "803bf2ea2c6506f4f3c082fde58f9d4d65a62228", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/803bf2ea2c6506f4f3c082fde58f9d4d65a62228", "committedDate": "2020-09-30T13:44:47Z", "message": "fix merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e462903fd13fe169c6ce195ae2740558ddbc30cf", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/e462903fd13fe169c6ce195ae2740558ddbc30cf", "committedDate": "2020-10-01T09:03:48Z", "message": "Further work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdc68d6a9ff0fbf2e1b6458cdcbc319b47659b9", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/cbdc68d6a9ff0fbf2e1b6458cdcbc319b47659b9", "committedDate": "2020-10-01T09:28:19Z", "message": "further refactors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28419081065cd8bf75563edfa5a9a26f29ab044b", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/28419081065cd8bf75563edfa5a9a26f29ab044b", "committedDate": "2020-10-01T09:31:24Z", "message": "Remove further extraneous things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edae5019986e3d9f29df8b797d1b2a1fa79800df", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/edae5019986e3d9f29df8b797d1b2a1fa79800df", "committedDate": "2020-10-01T10:07:21Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/75c97cd6ddc944447294262d38fa563f196a550a", "committedDate": "2020-10-01T10:15:37Z", "message": "add further tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjAzNjgw", "url": "https://github.com/palantir/atlasdb/pull/5012#pullrequestreview-500203680", "createdAt": "2020-10-01T10:16:46Z", "commit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNjo0NlrOHbD0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNjo0NlrOHbD0SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjEzNw==", "bodyText": "moved these around and made some static; the diff renders weirdly here", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498136137", "createdAt": "2020-10-01T10:16:46Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -153,27 +144,40 @@ LockWatchEventCacheState getStateForTesting() {\n     }\n \n \n-    private void assertTrue(boolean condition, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjA0Mzg1", "url": "https://github.com/palantir/atlasdb/pull/5012#pullrequestreview-500204385", "createdAt": "2020-10-01T10:17:45Z", "commit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNzo0NVrOHbD2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDoxNzo0NVrOHbD2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjczNQ==", "bodyText": "drive-by rename for clarity", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498136735", "createdAt": "2020-10-01T10:17:45Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -44,14 +51,15 @@\n                 .orElseGet(ImmutableList::of);\n     }\n \n-    LockWatchEvents getAndRemoveElementsUpToExclusive(long endVersion) {\n-        Set<Map.Entry<Long, LockWatchEvent>> elementsUpToVersion = eventMap.headMap(endVersion).entrySet();\n-        LockWatchEvents events = LockWatchEvents.create(elementsUpToVersion);\n-        elementsUpToVersion.clear();\n-        return events;\n+    LockWatchEvents retentionEvents() {\n+        int numToRetention = Math.max(0, eventMap.size() - maxEvents);\n+        LockWatchEvents.Builder builder = new LockWatchEvents.Builder();\n+        Iterators.consumingIterator(Iterators.limit(eventMap.entrySet().iterator(), numToRetention))\n+                .forEachRemaining(entry -> builder.addEvents(entry.getValue()));\n+        return builder.build();\n     }\n \n-    boolean contains(long key) {\n+    boolean containsEntriesLessThanOrEqualTo(long key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c97cd6ddc944447294262d38fa563f196a550a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d03124a6b16c8dbf940e732aa47ab408bac38333", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/d03124a6b16c8dbf940e732aa47ab408bac38333", "committedDate": "2020-10-01T10:22:59Z", "message": "further tidy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5d37d5e1695f806855e5e145b45800baa8af44", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/3e5d37d5e1695f806855e5e145b45800baa8af44", "committedDate": "2020-10-01T10:22:59Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d5e96f87b24b01d7969b5fa1c46595078d4bf7", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/e2d5e96f87b24b01d7969b5fa1c46595078d4bf7", "committedDate": "2020-10-01T10:44:55Z", "message": "Range refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4def152c8de2ba6cde33f650d5ffc730ccee4631", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/4def152c8de2ba6cde33f650d5ffc730ccee4631", "committedDate": "2020-10-01T10:45:16Z", "message": "Merge branch 'lw-max-size-retention' of github.com:palantir/atlasdb into lw-max-size-retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac87f2186a0c3820a114e978b247847be91e021", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/2ac87f2186a0c3820a114e978b247847be91e021", "committedDate": "2020-10-01T10:48:28Z", "message": "add leader check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4315e2a255f93765156fec77f59f74869b71e61b", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/4315e2a255f93765156fec77f59f74869b71e61b", "committedDate": "2020-10-01T10:55:49Z", "message": "add extra test for commit update too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc571ca1e351533cfda12e6c8db04994198af6d5", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/fc571ca1e351533cfda12e6c8db04994198af6d5", "committedDate": "2020-10-01T10:58:32Z", "message": "fix spaghetti"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169316f2143eab9fab3b5e325afff8ffec951095", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/169316f2143eab9fab3b5e325afff8ffec951095", "committedDate": "2020-10-01T12:57:21Z", "message": "a few minor tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0478b3f36399702adc0bda344e742ca19f564eb", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/c0478b3f36399702adc0bda344e742ca19f564eb", "committedDate": "2020-10-01T13:14:15Z", "message": "bad copy-pasta"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2ac05ac1a60f8fdbbcd4c274216ba597dcd7a5", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/7d2ac05ac1a60f8fdbbcd4c274216ba597dcd7a5", "committedDate": "2020-10-01T14:40:47Z", "message": "reorder a whole load of things to fix some bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc482b1c07802c6fce79d7f7b2c5986b943407c5", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/cc482b1c07802c6fce79d7f7b2c5986b943407c5", "committedDate": "2020-10-01T14:51:45Z", "message": "minor change to comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3ce13222f8887a9201502548beb273df63d714", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/6f3ce13222f8887a9201502548beb273df63d714", "committedDate": "2020-10-01T15:05:44Z", "message": "ugh puppycrawl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "committedDate": "2020-10-02T09:11:17Z", "message": "resolve yet another sneaky edge case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMDU5NDE0", "url": "https://github.com/palantir/atlasdb/pull/5012#pullrequestreview-501059414", "createdAt": "2020-10-02T11:33:51Z", "commit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTozMzo1MVrOHbqVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowNjowMlrOHbs3FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NzMwNQ==", "bodyText": "Feels impossible? Or if you think it's possible, this should really live in the LockWatchEvents?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498767305", "createdAt": "2020-10-02T11:33:51Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java", "diffHunk": "@@ -61,12 +62,16 @@ private ClientLockWatchSnapshot() {\n     }\n \n     void processEvents(LockWatchEvents events, UUID versionId) {\n-        if (!events.latestSequence().isPresent()) {\n+        if (events.events().isEmpty()) {\n             return;\n         }\n \n+        Preconditions.checkArgument(events.versionRange().isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA==", "bodyText": "I have a pretty strong opinion that your datastructures should not let themselves be instantiated in a way that makes them inconsistent. I think there's a pretty strong assumption everywhere that startTsToSequence should be contained within LockWatchEvents.\nSo I suggest moving the validation you have in LockWatchEventCacheImpl#getUpdateForTransactions to here.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498772104", "createdAt": "2020-10-02T11:46:19Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjY4OQ==", "bodyText": "While we're here, I missed this in one of the original reviews: this should not be called #map: map traditionally is a functor method, that transforms a value of some type T, but the T stays the same in the transformation. I would suggest something like #toTransactionsLockWatchUpdate or something else, but map is pretty misleading.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498772689", "createdAt": "2020-10-02T11:47:47Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NzQ3MQ==", "bodyText": "Not convinced on this comment. Just say this should be the same and provide a link to the timelock class.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498777471", "createdAt": "2020-10-02T11:59:35Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -53,12 +50,18 @@\n  * in concurrency issues and inconsistency in the cache state.\n  */\n public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    /**\n+     * This value should be at least as large as the max size in LockEventLogImpl. If it is smaller, it is possible that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4Mjc2Ng==", "bodyText": "Ok, I re-read the changes you actually added and it seems like there's obviously the case when the client is up-to-date, therefore the update is empty. I would actually suggest that we add the \"latestVersion\" field to both TransactionsLockWatchUpdate and ClientLogEvents, and basically do this validation in the datastructures. What do you think?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498782766", "createdAt": "2020-10-02T12:12:16Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4MzU5OA==", "bodyText": "Same here: I feel like the validation again should be done in the CommitUpdate.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498783598", "createdAt": "2020-10-02T12:14:13Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -106,42 +108,55 @@ public CommitUpdate getCommitUpdate(long startTs) {\n             return ImmutableInvalidateAll.builder().build();\n         }\n \n-        return createCommitUpdate(commitInfo, update.events());\n+        // We don't mind if the exact version is not present, as we are only interested in the events **since** the\n+        // transaction started.\n+        assertEventsContainRangeOfVersions(\n+                Range.closed(startVersion.get().version(), commitInfo.commitVersion().version()),\n+                update,\n+                true);\n+\n+        return createCommitUpdate(commitInfo, update.events().events());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NTQ2OA==", "bodyText": "I have a cute one:\ntimestampMapping().values().stream().mapToLong(\n                LockWatchVersion::version).summaryStatistics()\n\nshould get you sorted?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498785468", "createdAt": "2020-10-02T12:18:26Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg==", "bodyText": "You're doing the empty check twice, perhaps should be a @Value.Check.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498786126", "createdAt": "2020-10-02T12:19:59Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()\n+                .values()\n+                .stream()\n+                .findAny()\n+                .map(LockWatchVersion::id);\n+\n+        Preconditions.checkState(leader.isPresent(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw==", "bodyText": "I wonder if using #distinct and collecting and checking only single value is fine? You don't expect this ever fire, it's a bug, so shouldn't collect a huge amount of values.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498788877", "createdAt": "2020-10-02T12:26:08Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4OTUxMQ==", "bodyText": "aaactually, are we sure this is disallowed by atlas? I know we check for this in atlasdb-proxy and discard, but I think because Atlas can end up running multiple queries for a particular batch, this is actually possible?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498789511", "createdAt": "2020-10-02T12:27:33Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjU4NA==", "bodyText": "Would it be much of change in tests to change VersionedEventStore#putAll to take LockWatchEvents?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498792584", "createdAt": "2020-10-02T12:34:04Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java", "diffHunk": "@@ -133,29 +132,29 @@ private void processSuccess(LockWatchStateUpdate.Success success) {\n         }\n \n         if (success.lastKnownVersion() > latestVersion.get().version()) {\n-            assertEventsAreContiguousAndNoEventsMissing(success.events());\n+            assertNoEventsAreMissing(success.events());\n             latestVersion = Optional.of(LockWatchVersion.of(success.logId(), eventStore.putAll(success.events())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDk5Ng==", "bodyText": "This feels like more of a test of LockWatchEvents? I'd remove it, since you're checking the whole set of events in the line above.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498794996", "createdAt": "2020-10-02T12:39:13Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java", "diffHunk": "@@ -39,23 +40,24 @@\n \n     @Before\n     public void before() {\n-        eventStore = new VersionedEventStore();\n+        eventStore = new VersionedEventStore(2);\n     }\n \n     @Test\n-    public void getAndRemoveElementsUpToExclusiveDoesNotIncludeEndVersion() {\n+    public void getAndRemoveElementsRemovesOldestElements() {\n         eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3));\n-        LockWatchEvents events = eventStore.getAndRemoveElementsUpToExclusive(3L);\n+        eventStore.putAll(ImmutableList.of(EVENT_4));\n+        LockWatchEvents events = eventStore.retentionEvents();\n         assertThat(events.events().stream().map(LockWatchEvent::sequence)).containsExactly(1L, 2L);\n-        assertThat(events.latestSequence()).hasValue(2L);\n+        assertThat(events.versionRange().map(Range::upperEndpoint)).hasValue(2L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMDQwNw==", "bodyText": "Hmm, you maybe right, I think we won't even get to this point when they're different, because the cache itself will clear the values? So the lookup for lock watch versions will fail before this.\nNice addition!", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498800407", "createdAt": "2020-10-02T12:50:01Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDQ4Nw==", "bodyText": "Perhaps you want eventCache = createEventCache(5); here, since most tests don't want any retention to happen?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498804487", "createdAt": "2020-10-02T12:58:12Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -116,7 +116,7 @@ boolean isDev() {\n \n     @Before\n     public void before() {\n-        eventCache = new LockWatchEventCacheImpl(LockWatchEventLog.create());\n+        eventCache = createEventCache(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDkzNg==", "bodyText": "I'm assuming this is because of no-compression and this will change in next PR.", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498804936", "createdAt": "2020-10-02T12:59:03Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -240,7 +255,9 @@ public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n                 ImmutableMap.of(16L, LockWatchVersion.of(LEADER, 7L)));\n         assertThat(results.events()).containsExactly(\n                 LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n-                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2)).build(4L),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzkzNg==", "bodyText": "I'm assuming you just wanted to make this test do a bit more by adding the extra timestamp to lookup?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498807936", "createdAt": "2020-10-02T13:04:54Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwODU5Ng==", "bodyText": "Hmm, I feel like I'd rather keep it as an assertion, and maybe rename the test? And if you add the \"latestVersion\" to TransactionUpdate that can tighten this test as well?", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498808596", "createdAt": "2020-10-02T13:06:02Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),\n+                Optional.of(LockWatchVersion.of(LEADER, 3L))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84409107d4ca7f7bbff0d4d1df240b3062587cec", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/84409107d4ca7f7bbff0d4d1df240b3062587cec", "committedDate": "2020-10-02T13:13:41Z", "message": "Move version range present check to lock watch events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20479967726ff1c550ae306c383fa6e797f61b37", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/20479967726ff1c550ae306c383fa6e797f61b37", "committedDate": "2020-10-02T13:18:13Z", "message": "rename method from map to toTransactionsLockWatchUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4163d9a2c5aea02cff8271f56f19165dec3395a6", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/4163d9a2c5aea02cff8271f56f19165dec3395a6", "committedDate": "2020-10-02T13:21:55Z", "message": "Condense to use summary stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb955187bd7d6e26f2377ef65b4ffebb38986a99", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/cb955187bd7d6e26f2377ef65b4ffebb38986a99", "committedDate": "2020-10-02T13:24:54Z", "message": "Extract check for non-empty map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de292aa752e13a55998562907d2c6e2884b42dff", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/de292aa752e13a55998562907d2c6e2884b42dff", "committedDate": "2020-10-02T13:40:53Z", "message": "Next wave of comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67020fda47d63acbfdffd5130a6bceb43bf5b19e", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/67020fda47d63acbfdffd5130a6bceb43bf5b19e", "committedDate": "2020-10-02T13:47:19Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3790bdc7292576071a0bb920b26a2ea222f599ee", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/3790bdc7292576071a0bb920b26a2ea222f599ee", "committedDate": "2020-10-02T14:33:14Z", "message": "Finally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c87a861857e63282dd3239380d3eda5dd4bfb575", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/c87a861857e63282dd3239380d3eda5dd4bfb575", "committedDate": "2020-10-02T14:41:57Z", "message": "Last tidy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1ec51869dc9176c48c3e8fa8a11286526eb2288", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/d1ec51869dc9176c48c3e8fa8a11286526eb2288", "committedDate": "2020-10-02T14:54:07Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjMwNzI5", "url": "https://github.com/palantir/atlasdb/pull/5012#pullrequestreview-501230729", "createdAt": "2020-10-02T15:22:41Z", "commit": {"oid": "d1ec51869dc9176c48c3e8fa8a11286526eb2288"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2613, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}