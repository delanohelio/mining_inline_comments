{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1OTY2NDI0", "number": 5100, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0NDoyMVrOE1mVeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0NDoyMVrOE1mVeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjM4MDcyOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0NDoyMVrOHt9e6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0NDoyMVrOHt9e6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1NTMwNA==", "bodyText": "this shows that LOCK_EVENT is filtered out, which contains DESCRIPTOR_3, whereas LOCK_EVENT_2 is present, with DESCRIPTOR present.", "url": "https://github.com/palantir/atlasdb/pull/5100#discussion_r517955304", "createdAt": "2020-11-05T10:44:21Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -391,6 +398,28 @@ public void newEventsCauseOldEventsToBeDeleted() {\n         verifyStage();\n     }\n \n+    @Test\n+    public void commitLocksAreCorrectlyFilteredOutUsingServerToken() {\n+        setupInitialState();\n+        eventCache.processStartTransactionsUpdate(ImmutableSet.of(), SUCCESS);\n+\n+        // simulates the actual lock token that the client receives\n+        ConjureLockToken serverToken = ConjureLockToken.of(COMMIT_TOKEN.getRequestId());\n+        LockToken commitToken = LeasedLockTokenCreator.of(\n+                serverToken,\n+                Lease.of(LeaderTime.of(LeadershipId.random(), NanoTime.createForTests(1L)), Duration.ZERO));\n+        eventCache.processGetCommitTimestampsUpdate(\n+                ImmutableSet.of(ImmutableTransactionUpdate.builder()\n+                        .commitTs(5L)\n+                        .startTs(START_TS)\n+                        .writesToken(commitToken)\n+                        .build()),\n+                SUCCESS_2);\n+\n+        assertThat(eventCache.getCommitUpdate(START_TS).accept(new CommitUpdateVisitor()))\n+                .containsExactlyInAnyOrder(DESCRIPTOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b908f20529c46b3bc5fa6220d6eee30e574a835"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}