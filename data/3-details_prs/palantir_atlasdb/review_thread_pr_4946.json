{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3OTg3NjQx", "number": 4946, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxOTozOFrOEYiDZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozMjoyOFrOEYiThQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTU5MjA3OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/PingResultTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxOTozOFrOHA6t-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxOTozOFrOHA6t-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNDA5MA==", "bodyText": "Please use try-with-resources:\ntry (FileOutputStream fileOut = new FileOutputStream(...); \n        <same for ObjectOutputStream>) {\n   ...\n}", "url": "https://github.com/palantir/atlasdb/pull/4946#discussion_r470724090", "createdAt": "2020-08-14T16:19:38Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/PingResultTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+\n+import com.palantir.sls.versions.OrderableSlsVersion;\n+\n+public class PingResultTest {\n+    @Test\n+    public void pingResultIsJavaSerializable() throws IOException, ClassNotFoundException {\n+        OrderableSlsVersion timeLockVersion = OrderableSlsVersion.valueOf(\"0.0.0\");\n+        PingResult pr = PingResult.builder().timeLockVersion(timeLockVersion)\n+                .isLeader(true).build();\n+        FileOutputStream fileOut = new FileOutputStream(\"test.ser\");\n+        ObjectOutputStream out = new ObjectOutputStream(fileOut);\n+        out.writeObject(pr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afaec9a96d2b78d230b8ac38e0335b397cb1cb73"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTU5MjczOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/PingResultTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxOTo1M1rOHA6uYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjoxOTo1M1rOHA6uYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcyNDE5Mg==", "bodyText": "nit: Can we use a temporary folder so the file isn't lying around?", "url": "https://github.com/palantir/atlasdb/pull/4946#discussion_r470724192", "createdAt": "2020-08-14T16:19:53Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/PingResultTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+\n+import com.palantir.sls.versions.OrderableSlsVersion;\n+\n+public class PingResultTest {\n+    @Test\n+    public void pingResultIsJavaSerializable() throws IOException, ClassNotFoundException {\n+        OrderableSlsVersion timeLockVersion = OrderableSlsVersion.valueOf(\"0.0.0\");\n+        PingResult pr = PingResult.builder().timeLockVersion(timeLockVersion)\n+                .isLeader(true).build();\n+        FileOutputStream fileOut = new FileOutputStream(\"test.ser\");\n+        ObjectOutputStream out = new ObjectOutputStream(fileOut);\n+        out.writeObject(pr);\n+        out.close();\n+        fileOut.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afaec9a96d2b78d230b8ac38e0335b397cb1cb73"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTYzMzMzOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/PingResultTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozMjoyOFrOHA7HgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNjozMjoyOFrOHA7HgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDczMDYyNA==", "bodyText": "note: if this was production code, you'd probably want to minimise the scopes of out and in. I'm fine with this for tests.", "url": "https://github.com/palantir/atlasdb/pull/4946#discussion_r470730624", "createdAt": "2020-08-14T16:32:28Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/PingResultTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.leader;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Optional;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.sls.versions.OrderableSlsVersion;\n+\n+public class PingResultTest {\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void pingResultIsJavaSerializable() throws IOException, ClassNotFoundException {\n+        OrderableSlsVersion timeLockVersion = OrderableSlsVersion.valueOf(\"0.27.0\");\n+        PingResult pr = PingResult.builder().timeLockVersion(timeLockVersion)\n+                .isLeader(true).build();\n+\n+        File file = tempFolder.newFile();\n+        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(file));\n+                ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {\n+            out.writeObject(pr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca294ac70696c25efe96616f52b9bfa71f2365d"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2791, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}