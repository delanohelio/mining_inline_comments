{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODg5MTY5", "number": 5057, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0OTozMVrOEwUheQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoyMDo0MFrOEwVXDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTAzMzUzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0OTozMVrOHlzcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0OTozMVrOHlzcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwMjMwMQ==", "bodyText": "Let's not return boolean: would be good to have some kind of wrapper type", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509402301", "createdAt": "2020-10-21T15:49:31Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.corruption.detection;\n+\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.timelock.history.PaxosAcceptorData;\n+import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ConsolidatedLearnerAndAcceptorRecord;\n+\n+public final class HistoryAnalyzer {\n+\n+    public static boolean runCorruptionCheckOnHistory(CompletePaxosHistoryForNamespaceAndUseCase history) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0174e6e7ca771943ba587d1f35485d98eda28f95"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTA0MjY0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1MToxN1rOHlziKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1MToxN1rOHlziKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwMzY5MQ==", "bodyText": "I'd extract a method for this. Depending on taste, you could also process the stream more aggressively and/or use keyed-streams", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509403691", "createdAt": "2020-10-21T15:51:17Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.corruption.detection;\n+\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.timelock.history.PaxosAcceptorData;\n+import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ConsolidatedLearnerAndAcceptorRecord;\n+\n+public final class HistoryAnalyzer {\n+\n+    public static boolean runCorruptionCheckOnHistory(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        return verifyLearnersHaveLearnedSameValues(history)\n+        && verifyLearnedValueWasAcceptedByQuorum(history)\n+        && verifyLearnedValueIsGreatestAcceptedValue(history);\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnersHaveLearnedSameValues(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> {\n+                    Set<PaxosValue> learnedValuesForRound = getLearnedValuesForRound(records, seq);\n+                    return learnedValuesForRound.size() <= 1;\n+                });\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnedValueWasAcceptedByQuorum(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        int quorum = getQuorumSize(records);\n+\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> {\n+                    Optional<PaxosValue> optionalLearnedValue = getLearnedValue(records, seq);\n+                    if(!optionalLearnedValue.isPresent()) {\n+                        return true;\n+                    }\n+\n+                    PaxosValue learnedValue = optionalLearnedValue.get();\n+                    List<PaxosValue> acceptedValues = getAcceptedValues(records, seq, learnedValue);\n+                    return acceptedValues.size() >= quorum;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0174e6e7ca771943ba587d1f35485d98eda28f95"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTA0NDMwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1MTo0MVrOHlzjSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1MTo0MVrOHlzjSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwMzk3OQ==", "bodyText": "if this is a bug in atlas code we should probably throw a SafeIllegalStateException", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509403979", "createdAt": "2020-10-21T15:51:41Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.corruption.detection;\n+\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.timelock.history.PaxosAcceptorData;\n+import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ConsolidatedLearnerAndAcceptorRecord;\n+\n+public final class HistoryAnalyzer {\n+\n+    public static boolean runCorruptionCheckOnHistory(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        return verifyLearnersHaveLearnedSameValues(history)\n+        && verifyLearnedValueWasAcceptedByQuorum(history)\n+        && verifyLearnedValueIsGreatestAcceptedValue(history);\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnersHaveLearnedSameValues(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> {\n+                    Set<PaxosValue> learnedValuesForRound = getLearnedValuesForRound(records, seq);\n+                    return learnedValuesForRound.size() <= 1;\n+                });\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnedValueWasAcceptedByQuorum(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        int quorum = getQuorumSize(records);\n+\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> {\n+                    Optional<PaxosValue> optionalLearnedValue = getLearnedValue(records, seq);\n+                    if(!optionalLearnedValue.isPresent()) {\n+                        return true;\n+                    }\n+\n+                    PaxosValue learnedValue = optionalLearnedValue.get();\n+                    List<PaxosValue> acceptedValues = getAcceptedValues(records, seq, learnedValue);\n+                    return acceptedValues.size() >= quorum;\n+                });\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnedValueIsGreatestAcceptedValue(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> learnedValueIsGreatestAcceptedValue(records, seq));\n+    }\n+\n+    private static boolean learnedValueIsGreatestAcceptedValue(\n+            List<ConsolidatedLearnerAndAcceptorRecord> records, Long seq) {\n+        byte[] learnedValueData = getPaxosValueData(getLearnedValue(records, seq));\n+        if (learnedValueData == null) {\n+            return true;\n+        }\n+\n+        byte[] greatestAcceptedValueData = getPaxosValueData(getGreatestAcceptedValueAtSequence(records, seq));\n+        if (greatestAcceptedValueData == null) {\n+            // should not reach here\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0174e6e7ca771943ba587d1f35485d98eda28f95"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTA1NTg2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1NDoxOFrOHlzq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1NDoxOFrOHlzq4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNTkyMg==", "bodyText": "Let's have a comment here that this should only be used for timestamp bound checks: this would behave strangely if we did it on leader election based checks, because there is a semantic difference between null and no agreement because paxos phase two didn't happen", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509405922", "createdAt": "2020-10-21T15:54:18Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.corruption.detection;\n+\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.timelock.history.PaxosAcceptorData;\n+import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n+import com.palantir.timelock.history.models.ConsolidatedLearnerAndAcceptorRecord;\n+\n+public final class HistoryAnalyzer {\n+\n+    public static boolean runCorruptionCheckOnHistory(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        return verifyLearnersHaveLearnedSameValues(history)\n+        && verifyLearnedValueWasAcceptedByQuorum(history)\n+        && verifyLearnedValueIsGreatestAcceptedValue(history);\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnersHaveLearnedSameValues(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> {\n+                    Set<PaxosValue> learnedValuesForRound = getLearnedValuesForRound(records, seq);\n+                    return learnedValuesForRound.size() <= 1;\n+                });\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnedValueWasAcceptedByQuorum(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        int quorum = getQuorumSize(records);\n+\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> {\n+                    Optional<PaxosValue> optionalLearnedValue = getLearnedValue(records, seq);\n+                    if(!optionalLearnedValue.isPresent()) {\n+                        return true;\n+                    }\n+\n+                    PaxosValue learnedValue = optionalLearnedValue.get();\n+                    List<PaxosValue> acceptedValues = getAcceptedValues(records, seq, learnedValue);\n+                    return acceptedValues.size() >= quorum;\n+                });\n+    }\n+\n+    @VisibleForTesting\n+    static boolean verifyLearnedValueIsGreatestAcceptedValue(CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        List<ConsolidatedLearnerAndAcceptorRecord> records = history.localAndRemoteLearnerAndAcceptorRecords();\n+        return history.getAllSequenceNumbers()\n+                .stream()\n+                .allMatch(seq -> learnedValueIsGreatestAcceptedValue(records, seq));\n+    }\n+\n+    private static boolean learnedValueIsGreatestAcceptedValue(\n+            List<ConsolidatedLearnerAndAcceptorRecord> records, Long seq) {\n+        byte[] learnedValueData = getPaxosValueData(getLearnedValue(records, seq));\n+        if (learnedValueData == null) {\n+            return true;\n+        }\n+\n+        byte[] greatestAcceptedValueData = getPaxosValueData(getGreatestAcceptedValueAtSequence(records, seq));\n+        if (greatestAcceptedValueData == null) {\n+            // should not reach here\n+            return false;\n+        }\n+        return PtBytes.toLong(greatestAcceptedValueData) <= PtBytes.toLong(learnedValueData);\n+    }\n+\n+    private static Optional<PaxosValue> getLearnedValue(List<ConsolidatedLearnerAndAcceptorRecord> recordList, Long seq) {\n+        Set<PaxosValue> values = getLearnedValuesForRound(recordList, seq);\n+        return values.isEmpty() ? Optional.empty() : Optional.of(Iterables.getOnlyElement(values));\n+    }\n+\n+    private static Set<PaxosValue> getLearnedValuesForRound(List<ConsolidatedLearnerAndAcceptorRecord> recordList,\n+            Long seq) {\n+        return recordList.stream()\n+                .map(consolidatedLearnerAndAcceptorRecord ->\n+                        consolidatedLearnerAndAcceptorRecord.get(seq).learnedValue())\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(Collectors.toSet());\n+    }\n+\n+    private static int getQuorumSize(List<ConsolidatedLearnerAndAcceptorRecord> records) {\n+        return records.size() / 2 + 1;\n+    }\n+\n+    private static List<PaxosValue> getAcceptedValues(List<ConsolidatedLearnerAndAcceptorRecord> records, Long seq,\n+            PaxosValue learnedValue) {\n+        return records.stream()\n+                .map(record -> record.get(seq)\n+                        .acceptedValue()\n+                        .map(PaxosAcceptorData::getLastAcceptedValue)\n+                        .orElseGet(Optional::empty))\n+                .filter(optionalPaxosValue ->\n+                        optionalPaxosValue.isPresent() && optionalPaxosValue.get().equals(learnedValue))\n+                .map(Optional::get)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static Optional<PaxosValue> getGreatestAcceptedValueAtSequence(\n+            List<ConsolidatedLearnerAndAcceptorRecord> records, long seq) {\n+        return records.stream()\n+                .map(record -> record.get(seq)\n+                        .acceptedValue()\n+                        .map(PaxosAcceptorData::getLastAcceptedValue)\n+                        .orElseGet(Optional::empty))\n+                .filter(paxosValue -> getPaxosValueData(paxosValue) != null)\n+                .map(Optional::get)\n+                .max(Comparator.comparingLong(paxosValue ->  PtBytes.toLong(paxosValue.getData())));\n+    }\n+\n+\n+    private static byte[] getPaxosValueData(Optional<PaxosValue> learnedValue) {\n+        return learnedValue.map(PaxosValue::getData).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0174e6e7ca771943ba587d1f35485d98eda28f95"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTA1ODA1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/corruption/detection/HistoryAnalyzerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1NDo0N1rOHlzsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1NDo0N1rOHlzsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNjI3Nw==", "bodyText": "\ud83d\ude05", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509406277", "createdAt": "2020-10-21T15:54:47Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/timelock/corruption/detection/HistoryAnalyzerTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.corruption.detection;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.immutables.value.Value;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Iterables;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.LocalHistoryLoader;\n+import com.palantir.timelock.history.PaxosLogHistoryProvider;\n+import com.palantir.timelock.history.TimeLockPaxosHistoryProvider;\n+import com.palantir.timelock.history.models.AcceptorUseCase;\n+import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n+import com.palantir.timelock.history.models.LearnerUseCase;\n+import com.palantir.timelock.history.remote.TimeLockPaxosHistoryProviderResource;\n+import com.palantir.timelock.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.timelock.history.utils.PaxosSerializationTestUtils;\n+\n+public class HistoryAnalyzerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = LearnerUseCase.createLearnerUseCase(USE_CASE).value();\n+    private static final String USE_CASE_ACCEPTOR = AcceptorUseCase.createAcceptorUseCase(USE_CASE).value();\n+\n+    private StateLogComponents localStateLogComponents;\n+    private List<StateLogComponents> remoteStateLogComponents;\n+    PaxosLogHistoryProvider paxosLogHistoryProvider;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        localStateLogComponents = createShitForServer(\"randomFile1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0174e6e7ca771943ba587d1f35485d98eda28f95"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTE1ODI5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoxNzo0M1rOHl0sGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0NzoyNVrOHl16ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyMjYxNg==", "bodyText": "This is empty if everyone is healthy. Is that by design? (If so that's fine, just make sure it is!)", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509422616", "createdAt": "2020-10-21T16:17:43Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -16,65 +16,74 @@\n \n package com.palantir.timelock.corruption.detection;\n \n-\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Iterables;\n import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.logsafe.Preconditions;\n import com.palantir.paxos.PaxosValue;\n import com.palantir.timelock.history.PaxosAcceptorData;\n import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n import com.palantir.timelock.history.models.ConsolidatedLearnerAndAcceptorRecord;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public final class HistoryAnalyzer {\n \n-    public static boolean runCorruptionCheckOnHistory(CompletePaxosHistoryForNamespaceAndUseCase history) {\n-        return verifyLearnersHaveLearnedSameValues(history)\n-        && verifyLearnedValueWasAcceptedByQuorum(history)\n-        && verifyLearnedValueIsGreatestAcceptedValue(history);\n+    public static List<CorruptionStatus> corruptionStateForNamespaceAndUseCase(\n+            CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        return Stream.of(learnersHaveLearnedSameValues(history),\n+                learnedValueWasAcceptedByQuorum(history),\n+                learnedValueIsGreatestAcceptedValue(history))\n+                .filter(status -> status != CorruptionStatus.HEALTHY)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267c859a3440507b06b3a6856f0f5cfc132f7c6d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MjY4Mw==", "bodyText": "Yes, as of now, the plan is to only react to health check violations. So, the list for healthy namespaceAndUse will be empty.", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509442683", "createdAt": "2020-10-21T16:47:25Z", "author": {"login": "sudiksha27"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/HistoryAnalyzer.java", "diffHunk": "@@ -16,65 +16,74 @@\n \n package com.palantir.timelock.corruption.detection;\n \n-\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.Iterables;\n import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.logsafe.Preconditions;\n import com.palantir.paxos.PaxosValue;\n import com.palantir.timelock.history.PaxosAcceptorData;\n import com.palantir.timelock.history.models.CompletePaxosHistoryForNamespaceAndUseCase;\n import com.palantir.timelock.history.models.ConsolidatedLearnerAndAcceptorRecord;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n public final class HistoryAnalyzer {\n \n-    public static boolean runCorruptionCheckOnHistory(CompletePaxosHistoryForNamespaceAndUseCase history) {\n-        return verifyLearnersHaveLearnedSameValues(history)\n-        && verifyLearnedValueWasAcceptedByQuorum(history)\n-        && verifyLearnedValueIsGreatestAcceptedValue(history);\n+    public static List<CorruptionStatus> corruptionStateForNamespaceAndUseCase(\n+            CompletePaxosHistoryForNamespaceAndUseCase history) {\n+        return Stream.of(learnersHaveLearnedSameValues(history),\n+                learnedValueWasAcceptedByQuorum(history),\n+                learnedValueIsGreatestAcceptedValue(history))\n+                .filter(status -> status != CorruptionStatus.HEALTHY)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyMjYxNg=="}, "originalCommit": {"oid": "267c859a3440507b06b3a6856f0f5cfc132f7c6d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTE3MDcxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/CorruptionStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoyMDo0MFrOHl0z4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoyMDo0MFrOHl0z4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyNDYwOA==", "bodyText": "The first 4 are one layer and the bottom 2 are another. I'd suggest having maybe a CorruptionCheckStatus that is one of HEALTHY, DIVERGED_LEARNERS ... and then a CorruptionStatus (this class) just has HEALTHY and the two DEFINITIVE_CORRUPTION ones", "url": "https://github.com/palantir/atlasdb/pull/5057#discussion_r509424608", "createdAt": "2020-10-21T16:20:40Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/corruption/detection/CorruptionStatus.java", "diffHunk": "@@ -17,16 +17,26 @@\n package com.palantir.timelock.corruption.detection;\n \n public enum CorruptionStatus {\n-    HEALTHY(false),\n-    CORRUPTION(true);\n+    HEALTHY(false, false),\n+    DIVERGED_LEARNERS(true, false), // this is false for now\n+    VALUE_LEARNED_WITHOUT_QUORUM(true, false),\n+    ACCEPTED_VALUE_GREATER_THAN_LEARNED(true, false),\n+    DEFINITIVE_CORRUPTION_DETECTED_BY_LOCAL(true, true),\n+    DEFINITIVE_CORRUPTION_DETECTED_BY_REMOTE(true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "267c859a3440507b06b3a6856f0f5cfc132f7c6d"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2668, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}