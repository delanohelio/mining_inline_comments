{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDQ3NDAx", "number": 4501, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo0NzoxMlrODXKFEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo1MTowMVrODXKJSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjA4OTc4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo0NzoxMlrOFcUgxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo0NzoxMlrOFcUgxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MDUxOA==", "bodyText": "I normally thought we specify the abstract rather than the concrete implementations of these as the sub-types (e.g. LockEvent as opposed to ImmutableLockEvent. Not wrong, but technically if you change the @JsonSerialize(as = Bla.class) in LockEvent it won't be respected.", "url": "https://github.com/palantir/atlasdb/pull/4501#discussion_r365240518", "createdAt": "2020-01-10T13:47:12Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchEvent.java", "diffHunk": "@@ -16,11 +16,28 @@\n \n package com.palantir.lock.watch;\n \n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(value = ImmutableLockEvent.class, name = LockEvent.TYPE),\n+        @JsonSubTypes.Type(value = ImmutableUnlockEvent.class, name = UnlockEvent.TYPE),\n+        @JsonSubTypes.Type(value = ImmutableLockWatchOpenLocksEvent.class, name = LockWatchOpenLocksEvent.TYPE),\n+        @JsonSubTypes.Type(value = ImmutableLockWatchCreatedEvent.class, name = LockWatchCreatedEvent.TYPE)})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060cefe0e90ae98736b388912e75a64f34329eb4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjEwMDU3OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchOpenLocksEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo1MTowMVrOFcUnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMzo1MTowMVrOFcUnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0MjIxNg==", "bodyText": "Some JavaDoc may be useful as it's not clear what an OpenLocks operation is (compared to Lock and Unlock, which are pretty clear). Maybe something like:\n\nA LockWatchOpenLocksEvent captures the state of all lock descriptors for a given lock watch that are currently open (that is, held by clients).", "url": "https://github.com/palantir/atlasdb/pull/4501#discussion_r365242216", "createdAt": "2020-01-10T13:51:01Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/watch/LockWatchOpenLocksEvent.java", "diffHunk": "@@ -17,24 +17,40 @@\n package com.palantir.lock.watch;\n \n import java.util.Set;\n+import java.util.UUID;\n \n import org.immutables.value.Value;\n \n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.palantir.lock.LockDescriptor;\n \n @Value.Immutable\n @Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+@JsonSerialize(as = ImmutableLockWatchOpenLocksEvent.class)\n+@JsonDeserialize(as = ImmutableLockWatchOpenLocksEvent.class)\n+@JsonTypeName(LockWatchOpenLocksEvent.TYPE)\n public abstract class LockWatchOpenLocksEvent implements LockWatchEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060cefe0e90ae98736b388912e75a64f34329eb4"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2389, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}