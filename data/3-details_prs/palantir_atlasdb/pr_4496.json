{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwOTI0NTYy", "number": 4496, "title": "RocksDB configuration", "bodyText": "Goals (and why):\nProvides a way to configure and construct RocksDB connection and timestamp cache.\nImplementation Description (bullets):\n\nPersistentStorageConfig and related classes provide a way to configure the connection to RocksDB\nPersistentStorageFactory opens the connection and returns the RocksDB implementation of PersistentTimestampStore\n\nTesting (What was existing testing like?  What have you done to improve it?):\n\nadded tests for configuration and the factory\n\nConcerns (what feedback would you like?):\n\nis the packaging correctly done\nstandard coding style\ncan it be simpler\nis the folder sanitization correctly done\n\nWhere should we start reviewing?:\n\nPersistentStorageConfig\n\nPriority (whenever / two weeks / yesterday):\ntoday", "createdAt": "2020-01-09T12:01:48Z", "url": "https://github.com/palantir/atlasdb/pull/4496", "merged": true, "mergeCommit": {"oid": "6f9544d88cc52a5d8b34bc144eaca1c7d1fa8d77"}, "closed": true, "closedAt": "2020-01-10T11:27:01Z", "author": {"login": "OStevan"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4m-RhAH2gAyMzYwOTI0NTYyOjUzMGEzMmI2YWFmNjdmYjhiOThjMWJiY2E4NDY4NjIwZDgyNWQ4Yjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb48pQHgH2gAyMzYwOTI0NTYyOmFkZTIwZWM1YTk5ZTUwMjAwZGJjNThmOTFkYmQ0ODcxNWJjYjA4MmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "530a32b6aaf67fb8b98c1bbca8468620d825d8b8", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/530a32b6aaf67fb8b98c1bbca8468620d825d8b8", "committedDate": "2020-01-09T09:59:06Z", "message": "RocksDB configuration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32c142dde929a265bdda73cab9e2cdc3dd0f0ecf", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/32c142dde929a265bdda73cab9e2cdc3dd0f0ecf", "committedDate": "2020-01-09T10:32:20Z", "message": "Added tests for deserialization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f307d809fc8d8bed8ac0d1977265fa066111feb4", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/f307d809fc8d8bed8ac0d1977265fa066111feb4", "committedDate": "2020-01-09T11:00:06Z", "message": "Sanitization tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea05709335d602867856e5ff650a41a62ea0e8d", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/aea05709335d602867856e5ff650a41a62ea0e8d", "committedDate": "2020-01-09T11:11:26Z", "message": "Test for creation of database."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c7963f0e6c70e6b1ae7a037aa48fe83602e914", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/85c7963f0e6c70e6b1ae7a037aa48fe83602e914", "committedDate": "2020-01-09T11:13:54Z", "message": "Add missing cache nuke metric."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "805be2a5c2fdf31aeb74b45a689906433d650f08", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/805be2a5c2fdf31aeb74b45a689906433d650f08", "committedDate": "2020-01-09T11:33:56Z", "message": "Fixed style."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2321c637589877ea3210d9a5abea4bd046b12a", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/4a2321c637589877ea3210d9a5abea4bd046b12a", "committedDate": "2020-01-09T14:50:37Z", "message": "Remove sanitization on normal AtlasDB path."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6fad82eda3e8c001c8e0a50eb9733773c76e94a", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/b6fad82eda3e8c001c8e0a50eb9733773c76e94a", "committedDate": "2020-01-09T15:30:36Z", "message": "Configurable factories."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862367d6dd17a9ca398a8e3eca7718e5d9877685", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/862367d6dd17a9ca398a8e3eca7718e5d9877685", "committedDate": "2020-01-09T15:38:10Z", "message": "Helper construction method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e6f554f22fdf95055d80f624f4546185add34b", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/b8e6f554f22fdf95055d80f624f4546185add34b", "committedDate": "2020-01-09T15:56:43Z", "message": "Remove wrong imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d", "committedDate": "2020-01-09T17:18:35Z", "message": "Added sanitization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b458bf74b80da9d01100b8cdf3645a419d8f6040", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/b458bf74b80da9d01100b8cdf3645a419d8f6040", "committedDate": "2020-01-09T17:37:48Z", "message": "Added more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc59269d6b43f05fa7c59a1f07b7b01bcdf71f4c", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/fc59269d6b43f05fa7c59a1f07b7b01bcdf71f4c", "committedDate": "2020-01-09T17:41:04Z", "message": "Fixed paths."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwNjkxMDY0", "url": "https://github.com/palantir/atlasdb/pull/4496#pullrequestreview-340691064", "createdAt": "2020-01-09T17:28:09Z", "commit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzoyODowOVrOFb9xnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNzo0MjowNFrOFb-Ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2Nzk5Nw==", "bodyText": "This is clever. Maybe a comment as to why the reverse comparator matters would be nice?", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364867997", "createdAt": "2020-01-09T17:28:09Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentTimestampStore.java", "diffHunk": "@@ -136,8 +144,12 @@ private void checkNamespaceExists(StoreNamespace storeNamespace) {\n     }\n \n     @Override\n-    public void close() {\n+    public void close() throws IOException {\n         rocksDB.close();\n+\n+        try (Stream<Path> stream = Files.walk(databaseFolder.toPath())) {\n+            stream.sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODU1Ng==", "bodyText": "nit: I'd suggest including a SafeArg indicating what the value of storagePath is", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364868556", "createdAt": "2020-01-09T17:29:20Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/config/PersistentStorageConfig.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import org.immutables.value.Value;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(\n+                value = ImmutableRocksDbPersistentStorageConfig.class,\n+                name = RocksDbPersistentStorageConfig.TYPE)})\n+public interface PersistentStorageConfig {\n+    String type();\n+\n+    /**\n+     * Path to the directory in which we want to store the data. In case the directory does not exist we create a new\n+     * one. Anything in this folder might be deleted.\n+     *\n+     * @return path to the directory\n+     */\n+    String storagePath();\n+\n+    @Value.Check\n+    default void check() {\n+        File storageFile = new File(storagePath());\n+        if (storageFile.exists()) {\n+            Preconditions.checkState(\n+                    storageFile.isDirectory(),\n+                    \"Storage path has to point to a directory\",\n+                    SafeArg.of(\"path\", storagePath()));\n+        }\n+\n+        Preconditions.checkState(!Paths.get(storagePath()).isAbsolute(), \"Storage path must be relative\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2ODY0Ng==", "bodyText": "We should say this must be a relative path.", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364868646", "createdAt": "2020-01-09T17:29:33Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/config/PersistentStorageConfig.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+import org.immutables.value.Value;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\")\n+@JsonSubTypes({\n+        @JsonSubTypes.Type(\n+                value = ImmutableRocksDbPersistentStorageConfig.class,\n+                name = RocksDbPersistentStorageConfig.TYPE)})\n+public interface PersistentStorageConfig {\n+    String type();\n+\n+    /**\n+     * Path to the directory in which we want to store the data. In case the directory does not exist we create a new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg2OTg1Mg==", "bodyText": "The comment here probably needs to account for the role of SANITIZED_PATHS. Specifically, something like\n\nIf the path has been successfully sanitized before in the lifetime of this JVM, return.\nIf the path exists, checks that it is a directory.\nIf the path exists and is a directory, remove all sub-folders whose names are the string representation of an UUID.", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364869852", "createdAt": "2020-01-09T17:32:13Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactories.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.base.MoreObjects;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class PersistentStorageFactories {\n+    private static final Pattern UUID_PATTERN = Pattern.compile(\n+            \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n+\n+    private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n+\n+    private PersistentStorageFactories() {}\n+\n+    /**\n+     * For the given path does the following: 1) if it exists checks that it is a directory, 2) if it is a directory\n+     * removes all sub-folders whose names are string representation of a UUID.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3Mjc3MQ==", "bodyText": "Usually for this it's reasonable to have a hasMessageContaining(...) to make sure the exception is what you want it to be.", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364872771", "createdAt": "2020-01-09T17:39:23Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStorageFactoriesTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStorageFactoriesTests {\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void nonExistentFolder() {\n+        File file  = new File(testFolderPath, \"nonexistent\");\n+        PersistentStorageFactories.sanitizeStoragePath(file.getPath());\n+\n+        assertThat(file).isDirectory();\n+    }\n+\n+    @Test\n+    public void sanitizingFile() throws IOException {\n+        File file = testFolder.newFile();\n+\n+        assertThatThrownBy(() -> PersistentStorageFactories.sanitizeStoragePath(file.getAbsolutePath()))\n+                .isInstanceOf(SafeIllegalArgumentException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzE2NQ==", "bodyText": "\ud83e\udd86 you mean doesNotRemoveNonUuidNamedFolder or something along those lines.", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364873165", "createdAt": "2020-01-09T17:40:11Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStorageFactoriesTests.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStorageFactoriesTests {\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void nonExistentFolder() {\n+        File file  = new File(testFolderPath, \"nonexistent\");\n+        PersistentStorageFactories.sanitizeStoragePath(file.getPath());\n+\n+        assertThat(file).isDirectory();\n+    }\n+\n+    @Test\n+    public void sanitizingFile() throws IOException {\n+        File file = testFolder.newFile();\n+\n+        assertThatThrownBy(() -> PersistentStorageFactories.sanitizeStoragePath(file.getAbsolutePath()))\n+                .isInstanceOf(SafeIllegalArgumentException.class);\n+    }\n+\n+    @Test\n+    public void removesUuidNamedFolder() throws IOException {\n+        testFolder.newFolder(UUID.randomUUID().toString());\n+\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+        assertThat(testFolder.getRoot().listFiles()).isEmpty();\n+    }\n+\n+    @Test\n+    public void doesNotRemoveFiles() throws IOException {\n+        testFolder.newFile(UUID.randomUUID().toString());\n+        testFolder.newFile(\"testFile\");\n+\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+        assertThat(testFolder.getRoot().listFiles()).hasSize(2);\n+    }\n+\n+    @Test\n+    public void doesNotRemoveNonFolder() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7fe5cbcfbed93206cf06b7ca2ace8ab8b3532d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzUzOQ==", "bodyText": "nit: prefer static import. Also normally it's useful to include a hasMessageContaining to make sure it's the exception you expect", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364873539", "createdAt": "2020-01-09T17:41:07Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/config/PersistentStorageConfigTests.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URL;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+public final class PersistentStorageConfigTests {\n+    @ClassRule\n+    public static final TemporaryFolder TEST_FOLDER = new TemporaryFolder();\n+\n+    @Test\n+    public void rocksEmptyDirectory() throws IOException {\n+        ImmutableRocksDbPersistentStorageConfig.builder()\n+                .storagePath(TEST_FOLDER.newFolder().getAbsolutePath())\n+                .build();\n+    }\n+\n+    @Test\n+    public void rocksPathToFileThrowsAnException() {\n+        Assertions.assertThatThrownBy(() ->\n+                ImmutableRocksDbPersistentStorageConfig.builder()\n+                        .storagePath(TEST_FOLDER.newFile().getAbsolutePath())\n+                        .build())\n+                .isInstanceOf(SafeIllegalStateException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b458bf74b80da9d01100b8cdf3645a419d8f6040"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg3MzkxOQ==", "bodyText": "but the storage path must be relative!", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r364873919", "createdAt": "2020-01-09T17:42:04Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/resources/rocksdb-config.yml", "diffHunk": "@@ -0,0 +1,2 @@\n+type: rocksdb\n+storagePath: /tmp/rocksdb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b458bf74b80da9d01100b8cdf3645a419d8f6040"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a2dbbd775e5f5d0a746b5cd1aba84fb7143093", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/a4a2dbbd775e5f5d0a746b5cd1aba84fb7143093", "committedDate": "2020-01-09T18:49:14Z", "message": "Fixed location testing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "139833804ff2d3ff4b80e659ced771b759db587c", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/139833804ff2d3ff4b80e659ced771b759db587c", "committedDate": "2020-01-10T09:42:55Z", "message": "Addressed the comments on PR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507218c1dfcda28007143e7ceb097cea261a4d04", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/507218c1dfcda28007143e7ceb097cea261a4d04", "committedDate": "2020-01-10T09:44:14Z", "message": "Added static import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da3a49071d41c53dde3d4d4e40afff49f288969d", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/da3a49071d41c53dde3d4d4e40afff49f288969d", "committedDate": "2020-01-10T09:58:28Z", "message": "Prevent usage of persistent storage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMDgxMDM3", "url": "https://github.com/palantir/atlasdb/pull/4496#pullrequestreview-341081037", "createdAt": "2020-01-10T10:39:05Z", "commit": {"oid": "da3a49071d41c53dde3d4d4e40afff49f288969d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDozOTowNVrOFcQXFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDozOTowNVrOFcQXFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3MjUwMg==", "bodyText": "nit: maybe createFolderIfNotExists()?", "url": "https://github.com/palantir/atlasdb/pull/4496#discussion_r365172502", "createdAt": "2020-01-10T10:39:05Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/PersistentStorageFactoriesTests.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.factory;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public final class PersistentStorageFactoriesTests {\n+    public static final String FIRST_SUBFOLDER_ROOT = \"first\";\n+    public static final String SECOND_SUBFOLDER_ROOT = \"second\";\n+    @Rule\n+    public TemporaryFolder testFolder = new TemporaryFolder();\n+\n+    private String testFolderPath;\n+\n+    @Before\n+    public void setUp() {\n+        testFolderPath = testFolder.getRoot().getAbsolutePath();\n+    }\n+\n+    @Test\n+    public void emptyFolderSanitization() {\n+        PersistentStorageFactories.sanitizeStoragePath(testFolderPath);\n+    }\n+\n+    @Test\n+    public void nonExistentFolder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da3a49071d41c53dde3d4d4e40afff49f288969d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36156685d86e47b2c45c0cff35a7909d30c4af9d", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/36156685d86e47b2c45c0cff35a7909d30c4af9d", "committedDate": "2020-01-10T10:55:28Z", "message": "Fixed tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade20ec5a99e50200dbc58f91dbd48715bcb082b", "author": {"user": {"login": "OStevan", "name": "Stevan Ognjanovic"}}, "url": "https://github.com/palantir/atlasdb/commit/ade20ec5a99e50200dbc58f91dbd48715bcb082b", "committedDate": "2020-01-10T11:14:03Z", "message": "Absolute path."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2351, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}