{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODc5ODg2", "number": 4926, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTozODo0MlrOEU7JWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1NDoyNFrOEU_Ghg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzc2MDI3OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTozODo0MlrOG7Y8lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTozODo0MlrOG7Y8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyNzg5NQ==", "bodyText": "I'll reshuffle things around a bit - this is a bit strange to keep on the API because DedupFilterHolder is private", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r464927895", "createdAt": "2020-08-04T09:38:42Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "diffHunk": "@@ -35,10 +38,10 @@\n public class MetricPublicationArbiter implements Predicate<MetricName> {\n     private static final Logger log = LoggerFactory.getLogger(MetricPublicationArbiter.class);\n \n-    private final Map<MetricName, List<MetricPublicationFilter>> singleMetricFilters;\n+    private final Map<MetricName, Set<DeduplicatingFilterHolder>> singleMetricFilters;\n \n     public MetricPublicationArbiter(\n-            Map<MetricName, List<MetricPublicationFilter>> singleMetricFilters) {\n+            Map<MetricName, Set<DeduplicatingFilterHolder>> singleMetricFilters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66e3e0ca8c6ff9bdf75602469d00a75cb2589b9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDM4MTY1OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0NzozNVrOG7ezWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0NzozNVrOG7ezWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgzNQ==", "bodyText": "nit: If you're using ImmutableSet elsewhere, the ImmutableSet javadoc recommends:\nReturns an immutable set containing {@code element}. \nPreferred over {@link Collections#singleton} for code consistency, \n{@code null} rejection, and because the return type conveys the immutability guarantee.", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465023835", "createdAt": "2020-08-04T12:47:35Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "diffHunk": "@@ -50,12 +59,14 @@ public boolean test(MetricName metricName) {\n     }\n \n     public void registerMetricsFilter(MetricName metricName, MetricPublicationFilter filter) {\n-        singleMetricFilters.merge(metricName, ImmutableList.of(filter), (oldFilters, newFilter)\n-                -> ImmutableList.<MetricPublicationFilter>builder().addAll(oldFilters).addAll(newFilter).build());\n+        singleMetricFilters.merge(metricName,\n+                Collections.singleton(new DeduplicatingFilterHolder(filter)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDM5NDI2OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1MDo0MlrOG7e6gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDo0NDozMlrOG7jxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNTY2Nw==", "bodyText": "Is there any reason why this does not use @Value.Immutable? As far as I can tell, the equality check is very similar to the Immutables one, if not exactly equivalent.", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465025667", "createdAt": "2020-08-04T12:50:42Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "diffHunk": "@@ -69,4 +80,41 @@ private static boolean safeShouldPublish(MetricName metricName, MetricPublicatio\n             return true;\n         }\n     }\n+\n+    /**\n+     * Most users will want to define filters without having to think about deduplicating\n+     * filters across calls (similar to how MetricsRegistry methods are all registerOrGet)\n+     * so in order to keep the existing ability to define filters with lambdas,\n+     * define a default method on {@link MetricPublicationFilter} with a reasonable deduplicator\n+     * and then wrap it here.\n+     */\n+    @VisibleForTesting\n+    static class DeduplicatingFilterHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MDY0Nw==", "bodyText": "Not that I'm aware of (other than this being what @dxiao had written)", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465040647", "createdAt": "2020-08-04T13:14:26Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "diffHunk": "@@ -69,4 +80,41 @@ private static boolean safeShouldPublish(MetricName metricName, MetricPublicatio\n             return true;\n         }\n     }\n+\n+    /**\n+     * Most users will want to define filters without having to think about deduplicating\n+     * filters across calls (similar to how MetricsRegistry methods are all registerOrGet)\n+     * so in order to keep the existing ability to define filters with lambdas,\n+     * define a default method on {@link MetricPublicationFilter} with a reasonable deduplicator\n+     * and then wrap it here.\n+     */\n+    @VisibleForTesting\n+    static class DeduplicatingFilterHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNTY2Nw=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwNTE3MA==", "bodyText": "no reason, it was just faster to write.", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465105170", "createdAt": "2020-08-04T14:44:32Z", "author": {"login": "dxiao"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationArbiter.java", "diffHunk": "@@ -69,4 +80,41 @@ private static boolean safeShouldPublish(MetricName metricName, MetricPublicatio\n             return true;\n         }\n     }\n+\n+    /**\n+     * Most users will want to define filters without having to think about deduplicating\n+     * filters across calls (similar to how MetricsRegistry methods are all registerOrGet)\n+     * so in order to keep the existing ability to define filters with lambdas,\n+     * define a default method on {@link MetricPublicationFilter} with a reasonable deduplicator\n+     * and then wrap it here.\n+     */\n+    @VisibleForTesting\n+    static class DeduplicatingFilterHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNTY2Nw=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDQwMDIxOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1MjoxNlrOG7e-Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDo0NToxOFrOG7jzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNjU5MQ==", "bodyText": "This isn't used anywhere in AtlasDB itself - presumably it is exposed for users of Atlas?", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465026591", "createdAt": "2020-08-04T12:52:16Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationFilter.java", "diffHunk": "@@ -23,4 +23,11 @@\n     MetricPublicationFilter NEVER_PUBLISH = () -> false;\n \n     boolean shouldPublish();\n+\n+    /**\n+     * @return A label which is used to deduplicate filters; it need only be unique across filters on a given metric.\n+     */\n+    default String getLabel() {\n+        return this.getClass().getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEwNTc0OQ==", "bodyText": "exposed for future proofing, more than anything else. if you want to internalize it, fine by em.", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465105749", "createdAt": "2020-08-04T14:45:18Z", "author": {"login": "dxiao"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/metrics/MetricPublicationFilter.java", "diffHunk": "@@ -23,4 +23,11 @@\n     MetricPublicationFilter NEVER_PUBLISH = () -> false;\n \n     boolean shouldPublish();\n+\n+    /**\n+     * @return A label which is used to deduplicate filters; it need only be unique across filters on a given metric.\n+     */\n+    default String getLabel() {\n+        return this.getClass().getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNjU5MQ=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDQwMjcxOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/test/java/com/palantir/atlasdb/metrics/MetricPublicationArbiterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1Mjo1NVrOG7e_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1ODoxOVrOG7fNHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNjk2Nw==", "bodyText": "nit: Can we extract a constant for the () -> false and () -> true calls?", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465026967", "createdAt": "2020-08-04T12:52:55Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/test/java/com/palantir/atlasdb/metrics/MetricPublicationArbiterTest.java", "diffHunk": "@@ -43,18 +48,18 @@ public void metricsWithNoFilterAreAccepted() {\n \n     @Test\n     public void metricsWithOneFilterAreFiltered() {\n-        MetricPublicationArbiter arbiter = new MetricPublicationArbiter(ImmutableMap.of(\n-                METRIC_NAME_1, ImmutableList.of(() -> false),\n-                METRIC_NAME_2, ImmutableList.of(() -> true)));\n+        MetricPublicationArbiter arbiter = createArbiter(ImmutableMap.of(\n+                METRIC_NAME_1, ImmutableSet.of(() -> false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMDQzMQ==", "bodyText": "Sure, will do", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465030431", "createdAt": "2020-08-04T12:58:19Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/test/java/com/palantir/atlasdb/metrics/MetricPublicationArbiterTest.java", "diffHunk": "@@ -43,18 +48,18 @@ public void metricsWithNoFilterAreAccepted() {\n \n     @Test\n     public void metricsWithOneFilterAreFiltered() {\n-        MetricPublicationArbiter arbiter = new MetricPublicationArbiter(ImmutableMap.of(\n-                METRIC_NAME_1, ImmutableList.of(() -> false),\n-                METRIC_NAME_2, ImmutableList.of(() -> true)));\n+        MetricPublicationArbiter arbiter = createArbiter(ImmutableMap.of(\n+                METRIC_NAME_1, ImmutableSet.of(() -> false),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNjk2Nw=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDQwODM4OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4926.v2.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1NDoyNFrOG7fDIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozNjozNFrOG7gs4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNzg3Mg==", "bodyText": "nit: Not convinced we need or want this in the changelog.", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465027872", "createdAt": "2020-08-04T12:54:24Z", "author": {"login": "Jolyon-S"}, "path": "changelog/@unreleased/pr-4926.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: fix\n+fix:\n+  description: |-\n+    Fix duplicate registration of MetricPublicationFilters. Previously, the same filter could be registered multiple times leading to unnecessary evaluations.\n+\n+    See internal ticket PG-154380.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMjE0MQ==", "bodyText": "I'd keep this: it causes a substantial perf regression especially if you use leader blocks (though maybe I should say that)", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465032141", "createdAt": "2020-08-04T13:01:05Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4926.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: fix\n+fix:\n+  description: |-\n+    Fix duplicate registration of MetricPublicationFilters. Previously, the same filter could be registered multiple times leading to unnecessary evaluations.\n+\n+    See internal ticket PG-154380.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNzg3Mg=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MTAxNA==", "bodyText": "Added a line about it causing perf regressions.", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465041014", "createdAt": "2020-08-04T13:14:58Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4926.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: fix\n+fix:\n+  description: |-\n+    Fix duplicate registration of MetricPublicationFilters. Previously, the same filter could be registered multiple times leading to unnecessary evaluations.\n+\n+    See internal ticket PG-154380.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNzg3Mg=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDk0Ng==", "bodyText": "I think that's fair. Thanks!", "url": "https://github.com/palantir/atlasdb/pull/4926#discussion_r465054946", "createdAt": "2020-08-04T13:36:34Z", "author": {"login": "Jolyon-S"}, "path": "changelog/@unreleased/pr-4926.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: fix\n+fix:\n+  description: |-\n+    Fix duplicate registration of MetricPublicationFilters. Previously, the same filter could be registered multiple times leading to unnecessary evaluations.\n+\n+    See internal ticket PG-154380.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNzg3Mg=="}, "originalCommit": {"oid": "5721a172a9e41f49207c79e7f60d84a551f4b8e3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2763, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}