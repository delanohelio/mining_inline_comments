{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMTY5Nzkx", "number": 4989, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0NTo0OFrOEllCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NDozNFrOEmtdpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODM5NTkxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0NTo0OFrOHVIDgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0NTo0OFrOHVIDgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxNDExMw==", "bodyText": "Maintain one map with paxosValue and accepted state merged", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r491914113", "createdAt": "2020-09-21T09:45:48Z", "author": {"login": "sudiksha27"}, "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosValue;\n+\n+@Value.Immutable\n+public interface CompletePaxosHistoryForNamespaceAndUsecase {\n+    @Value.Parameter\n+    Client namespace();\n+\n+    @Value.Parameter\n+    String useCase();\n+\n+    @Value.Parameter\n+    List<ConcurrentSkipListMap<Long, PaxosValue>> localAndRemoteLearnerRecords();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab787fc039dae8f7ab2dc2da2a5ed889eaa2799a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTMxOTc5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0NzoyMVrOHVQ2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo0NzoyMVrOHVQ2Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA1ODE5OQ==", "bodyText": "maybe not needed?", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492058199", "createdAt": "2020-09-21T13:47:21Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTM5OTYwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNDoxOVrOHVRndQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNDoxOVrOHVRndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MDc3Mw==", "bodyText": "Be careful with race conditions here: this means that learner and acceptor logs are not read transactionally, which could lead to weird circumstances", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492070773", "createdAt": "2020-09-21T14:04:19Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.ImmutableLearnerAndAcceptorRecords;\n+import com.palantir.history.models.ImmutablePaxosHistoryOnSingleNode;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+//TBD cache implementation\n+public class LocalHistoryLoader {\n+    private final Jdbi jdbi;\n+\n+    private LocalHistoryLoader(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LocalHistoryLoader create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper());\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return new LocalHistoryLoader(jdbi);\n+    }\n+\n+    public PaxosHistoryOnSingleNode getLocalPaxosHistory(\n+            Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise) {\n+        return ImmutablePaxosHistoryOnSingleNode.of(KeyedStream.stream(laseVerifiedSeqNamespaceAndUseCaseWise)\n+                .map(this::loadLocalHistory)\n+                .collectToMap());\n+    }\n+\n+    private LearnerAndAcceptorRecords loadLocalHistory(NamespaceAndUseCase namespaceAndUseCase, Long seq) {\n+        return ImmutableLearnerAndAcceptorRecords.of(\n+                getLearnerLogsForNamespaceAndUseCaseSince(namespaceAndUseCase, seq),\n+                getAcceptorLogsForNamespaceAndUseCaseSince(namespaceAndUseCase, seq));\n+    }\n+\n+    private Map<Long, PaxosValue> getLearnerLogsForNamespaceAndUseCaseSince(\n+            NamespaceAndUseCase namespaceAndUseCase, long seq) {\n+        return execute(dao -> dao.getLearnerLogsSince(\n+                namespaceAndUseCase.namespace(),\n+                namespaceAndUseCase.useCase(),\n+                seq)).stream().collect(Collectors.toMap(PaxosRound::sequence, PaxosRound::value));\n+    }\n+\n+    private Map<Long, PaxosAcceptorState> getAcceptorLogsForNamespaceAndUseCaseSince(\n+            NamespaceAndUseCase namespaceAndUseCase, long seq) {\n+        return execute(dao -> dao.getAcceptorLogsSince(\n+                namespaceAndUseCase.namespace(),\n+                namespaceAndUseCase.useCase(),\n+                seq)).stream().collect(Collectors.toMap(PaxosRound::sequence, PaxosRound::value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQwNDQxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNToyMlrOHVRqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNToyMlrOHVRqbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MTUzNQ==", "bodyText": "nit: fix parameter name, lastVerified...\nProbably enough to just use lastVerifiedSequences, the type name covers what the map is!", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492071535", "createdAt": "2020-09-21T14:05:22Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        logVerificationProgressState.updateProgress(namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase(),\n+                INITIAL_PROGRESS);\n+        return INITIAL_PROGRESS;\n+    }\n+\n+    public List<CompletePaxosHistoryForNamespaceAndUsecase> getHistory() {\n+        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQwOTU0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNjoyN1rOHVRtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNjoyN1rOHVRtnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MjM1MQ==", "bodyText": "maybe just return ImmutableList.of() to avoid unexpected NPEs", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492072351", "createdAt": "2020-09-21T14:06:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        logVerificationProgressState.updateProgress(namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase(),\n+                INITIAL_PROGRESS);\n+        return INITIAL_PROGRESS;\n+    }\n+\n+    public List<CompletePaxosHistoryForNamespaceAndUsecase> getHistory() {\n+        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()\n+                .collect(Collectors.toMap(Function.identity(),\n+                        namespaceAndUseCase -> verificationProgressState\n+                                .computeIfAbsent(namespaceAndUseCase, this::getOrInsertVerificationState)));\n+        PaxosHistoryOnSingleNode localPaxosHistory = localHistoryLoader.getLocalPaxosHistory(\n+                laseVerifiedSeqNamespaceAndUseCaseWise);\n+\n+        // TBD get history from remotes, merge, return\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQxNjQzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowODowMFrOHVRx7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowODowMFrOHVRx7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MzQ1NA==", "bodyText": "nit: logVerificationProgress - the paxosLog table uses lower camel case so we should keep that.", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492073454", "createdAt": "2020-09-21T14:08:00Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.paxos.Client;\n+\n+public final class LogVerificationProgressState {\n+    private final Jdbi jdbi;\n+\n+    private LogVerificationProgressState(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LogVerificationProgressState create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class);\n+        LogVerificationProgressState state = new LogVerificationProgressState(jdbi);\n+        state.initialize();\n+        return state;\n+    }\n+\n+    private void initialize() {\n+        execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n+    }\n+\n+    public boolean updateProgress(Client client, String useCase, long seq) {\n+        return execute(dao -> dao.updateProgress(client, useCase, seq));\n+    }\n+\n+    public Optional<Long> getLastVerifiedSeq(Client client, String useCase) {\n+        return execute(dao -> dao.getLastVerifiedSeq(client, useCase));\n+    }\n+\n+    private <T> T execute(Function<LogVerificationProgressState.Queries, T> call) {\n+        return jdbi.withExtension(LogVerificationProgressState.Queries.class, call::apply);\n+    }\n+\n+    public interface Queries {\n+        @SqlUpdate(\"CREATE TABLE IF NOT EXISTS log_verification_progress (namespace TEXT, useCase TEXT, seq BIGINT,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQyOTY5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxMDoyOVrOHVR6SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxMDoyOVrOHVR6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NTU5Mw==", "bodyText": "nit: You don't need to return this here, see SqlitePaxosStateLog#writeRound()", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492075593", "createdAt": "2020-09-21T14:10:29Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.paxos.Client;\n+\n+public final class LogVerificationProgressState {\n+    private final Jdbi jdbi;\n+\n+    private LogVerificationProgressState(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LogVerificationProgressState create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class);\n+        LogVerificationProgressState state = new LogVerificationProgressState(jdbi);\n+        state.initialize();\n+        return state;\n+    }\n+\n+    private void initialize() {\n+        execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n+    }\n+\n+    public boolean updateProgress(Client client, String useCase, long seq) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQzNjE1OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxMToxOFrOHVR-Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNDo1NFrOHVU6zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NjU2Ng==", "bodyText": "maybe timelock-corruption-detection?", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492076566", "createdAt": "2020-09-21T14:11:18Z", "author": {"login": "jeremyk-91"}, "path": "settings.gradle", "diffHunk": "@@ -63,6 +63,7 @@ include \":timelock-api:timelock-api-jersey\"\n include \":timelock-api:timelock-api-dialogue\"\n include \":timelock-api:timelock-api-objects\"\n include \":timelock-impl\"\n+include \":timelock-corruption\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNDg3OQ==", "bodyText": "improvement: atlasdb-corruption project", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492124879", "createdAt": "2020-09-21T15:04:54Z", "author": {"login": "gmaretic"}, "path": "settings.gradle", "diffHunk": "@@ -63,6 +63,7 @@ include \":timelock-api:timelock-api-jersey\"\n include \":timelock-api:timelock-api-dialogue\"\n include \":timelock-api:timelock-api-objects\"\n include \":timelock-impl\"\n+include \":timelock-corruption\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NjU2Ng=="}, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQ0MTA2OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLogQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxMjowMVrOHVSBGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxMjowMVrOHVSBGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3NzMzNg==", "bodyText": "discussed offline: let's keep the queries where they were, we do want to minimise visibility", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492077336", "createdAt": "2020-09-21T14:12:01Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLogQueries.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlBatch;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.common.persist.Persistable;\n+\n+public interface SqlitePaxosStateLogQueries {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQ2Mzc1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNToxNVrOHVSPeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNToxNVrOHVSPeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MTAxOA==", "bodyText": "Needs javadocs: what does complete here mean? I gather that this means \"across all nodes\" to contrast with the local one, but this should probably be documented.\nnit: UseCase two words to match the variable you have / we've been using", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492081018", "createdAt": "2020-09-21T14:15:15Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.Client;\n+\n+@Value.Immutable\n+public interface CompletePaxosHistoryForNamespaceAndUsecase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQ3MTc1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNjoyM1rOHVSUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoxNjoyM1rOHVSUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MjI4Mg==", "bodyText": "it's not normal to depend on concrete collections, so is there a reason we'd mandate a ConcurrentSkipListMap?", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492082282", "createdAt": "2020-09-21T14:16:23Z", "author": {"login": "jeremyk-91"}, "path": "timelock-corruption/src/main/java/com/palantir/history/models/CompletePaxosHistoryForNamespaceAndUsecase.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.List;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.Client;\n+\n+@Value.Immutable\n+public interface CompletePaxosHistoryForNamespaceAndUsecase {\n+    @Value.Parameter\n+    Client namespace();\n+\n+    @Value.Parameter\n+    String useCase();\n+\n+    @Value.Parameter\n+    List<ConcurrentSkipListMap<Long, LearnedAndAcceptedValue>> localAndRemoteLearnerAndAcceptorRecords();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg2MjEwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMzoyMlrOHVWNvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMzoyMlrOHVWNvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0NjExMQ==", "bodyText": "move this logic into PLHP and do it ina single transaction", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492146111", "createdAt": "2020-09-21T15:23:22Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg2NzI1OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLogQueries.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyNDowNlrOHVWRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyNDowNlrOHVWRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0Njk1Ng==", "bodyText": "You want to limit these queries, don't forget to order first", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492146956", "createdAt": "2020-09-21T15:24:06Z", "author": {"login": "gmaretic"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLogQueries.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+\n+import org.jdbi.v3.sqlobject.SingleValue;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlBatch;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.common.persist.Persistable;\n+\n+public interface SqlitePaxosStateLogQueries {\n+    @SqlUpdate(\"CREATE TABLE IF NOT EXISTS paxosLog (\"\n+            + \"namespace TEXT,\"\n+            + \"useCase TEXT,\"\n+            + \"seq BIGINT,\"\n+            + \"val BLOB,\"\n+            + \"PRIMARY KEY(namespace, useCase, seq))\")\n+    boolean createTable();\n+\n+    @SqlUpdate(\"INSERT OR REPLACE INTO paxosLog (namespace, useCase, seq, val) VALUES (\"\n+            + \":namespace.value, :useCase, :seq, :value)\")\n+    boolean writeRound(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @Bind(\"seq\") long seq,\n+            @Bind(\"value\") byte[] value);\n+\n+    @SqlQuery(\"SELECT val FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq = :seq\")\n+    @SingleValue\n+    byte[] readRound(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @Bind(\"seq\") long seq);\n+\n+    @SqlQuery(\"SELECT MIN(seq) FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase\")\n+    OptionalLong getLeastLogEntry(@BindPojo(\"namespace\") Client namespace, @Bind(\"useCase\") String useCase);\n+\n+    @SqlQuery(\"SELECT MAX(seq) FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase\")\n+    OptionalLong getGreatestLogEntry(@BindPojo(\"namespace\") Client namespace, @Bind(\"useCase\") String useCase);\n+\n+    @SqlUpdate(\"DELETE FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq <= :seq\")\n+    boolean truncate(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @Bind(\"seq\") long seq);\n+\n+    @SqlBatch(\"INSERT OR REPLACE INTO paxosLog (namespace, useCase, seq, val) VALUES (\"\n+            + \":namespace.value, :useCase, :round.sequence, :round.valueBytes)\")\n+    <V extends Persistable & Versionable> boolean[] writeBatchOfRounds(\n+            @BindPojo(\"namespace\") Client namespace,\n+            @Bind(\"useCase\") String useCase,\n+            @BindPojo(\"round\") Iterable<PaxosRound<V>> rounds);\n+\n+    @SqlQuery(\"SELECT DISTINCT(namespace) FROM paxosLog\")\n+    Set<String> getAllNamespaces();\n+\n+    @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n+    Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n+\n+    @SqlQuery(\"SELECT seq, val FROM paxosLog WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg5ODUyOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyODoyNVrOHVWlPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyODoyNVrOHVWlPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MjEyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()\n          \n          \n            \n                    Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = KeyedStream\n          \n          \n            \n                            .of(getNamespaceAndUseCaseTuples().stream())\n          \n          \n            \n                            .map(namespaceAndUseCase -> verificationProgressState.computeIfAbsent(namespaceAndUseCase,\n          \n          \n            \n                                    this::getOrInsertVerificationState))\n          \n          \n            \n                            .collectToMap();", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492152125", "createdAt": "2020-09-21T15:28:25Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/main/java/com/palantir/history/PaxosLogHistoryProvider.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.history.models.CompletePaxosHistoryForNamespaceAndUsecase;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.history.sqlite.LocalHistoryLoader;\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class PaxosLogHistoryProvider {\n+    private final DataSource dataSource;\n+    private final LogVerificationProgressState logVerificationProgressState;\n+    private final LocalHistoryLoader localHistoryLoader;\n+    private final Jdbi jdbi;\n+    private Map<NamespaceAndUseCase, Long> verificationProgressState = new ConcurrentHashMap<>();\n+\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    public PaxosLogHistoryProvider(DataSource dataSource) {\n+        this.jdbi = init(dataSource);\n+        this.logVerificationProgressState = LogVerificationProgressState.create(dataSource);\n+        this.localHistoryLoader = LocalHistoryLoader.create(dataSource);\n+        this.dataSource = dataSource;\n+    }\n+\n+    private Jdbi init(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return jdbi;\n+    }\n+\n+    private Set<NamespaceAndUseCase> getNamespaceAndUseCaseTuples() {\n+        return jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+    }\n+\n+    private Long getOrInsertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        Optional<Long> lastVerifiedSeq = logVerificationProgressState.getLastVerifiedSeq(\n+                namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase());\n+        return lastVerifiedSeq.orElseGet(() -> insertVerificationState(namespaceAndUseCase));\n+    }\n+\n+    private Long insertVerificationState(NamespaceAndUseCase namespaceAndUseCase) {\n+        logVerificationProgressState.updateProgress(namespaceAndUseCase.namespace(), namespaceAndUseCase.useCase(),\n+                INITIAL_PROGRESS);\n+        return INITIAL_PROGRESS;\n+    }\n+\n+    public List<CompletePaxosHistoryForNamespaceAndUsecase> getHistory() {\n+        Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise = getNamespaceAndUseCaseTuples().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkyODYwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozNDo1M1rOHVW4hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozNDo1M1rOHVW4hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzA2Mw==", "bodyText": "I think this is fine, maybe chain it all together if it looks better", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492157063", "createdAt": "2020-09-21T15:34:53Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.ImmutableLearnerAndAcceptorRecords;\n+import com.palantir.history.models.ImmutablePaxosHistoryOnSingleNode;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+//TBD cache implementation\n+public class LocalHistoryLoader {\n+    private final Jdbi jdbi;\n+\n+    private LocalHistoryLoader(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LocalHistoryLoader create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper());\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkzMzA4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozNTo1MVrOHVW7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozNTo1MVrOHVW7Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzczNQ==", "bodyText": "This will be one transaction when we implement it", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492157735", "createdAt": "2020-09-21T15:35:51Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/main/java/com/palantir/history/sqlite/LocalHistoryLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.ImmutableLearnerAndAcceptorRecords;\n+import com.palantir.history.models.ImmutablePaxosHistoryOnSingleNode;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+//TBD cache implementation\n+public class LocalHistoryLoader {\n+    private final Jdbi jdbi;\n+\n+    private LocalHistoryLoader(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LocalHistoryLoader create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper());\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+\n+        jdbi.withExtension(SqlitePaxosStateLogQueries.class, SqlitePaxosStateLogQueries::createTable);\n+        return new LocalHistoryLoader(jdbi);\n+    }\n+\n+    public PaxosHistoryOnSingleNode getLocalPaxosHistory(\n+            Map<NamespaceAndUseCase, Long> laseVerifiedSeqNamespaceAndUseCaseWise) {\n+        return ImmutablePaxosHistoryOnSingleNode.of(KeyedStream.stream(laseVerifiedSeqNamespaceAndUseCaseWise)\n+                .map(this::loadLocalHistory)\n+                .collectToMap());\n+    }\n+\n+    private LearnerAndAcceptorRecords loadLocalHistory(NamespaceAndUseCase namespaceAndUseCase, Long seq) {\n+        return ImmutableLearnerAndAcceptorRecords.of(\n+                getLearnerLogsForNamespaceAndUseCaseSince(namespaceAndUseCase, seq),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTk2NDA1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0MzowMVrOHVXOIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0MzowMVrOHVXOIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjU5Mw==", "bodyText": "make sure this is tested", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492162593", "createdAt": "2020-09-21T15:43:01Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.mappers;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.jdbi.v3.core.mapper.RowMapper;\n+import org.jdbi.v3.core.statement.StatementContext;\n+\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+\n+public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {\n+    @Override\n+    public PaxosRound<PaxosAcceptorState> map(ResultSet rs, StatementContext ctx) throws SQLException {\n+        PaxosAcceptorState value = PaxosAcceptorState.BYTES_HYDRATOR.hydrateFromBytes(rs.getBytes(\"val\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAxMTY4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/test/java/com/palantir/history/LogVerificationStateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1Mzo1N1rOHVXr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1Mzo1N1rOHVXr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDE5Mw==", "bodyText": "This will change if you implement the suggested change", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492170193", "createdAt": "2020-09-21T15:53:57Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/test/java/com/palantir/history/LogVerificationStateTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Optional;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.SqliteConnections;\n+\n+public class LogVerificationStateTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private LogVerificationProgressState log;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        log = LogVerificationProgressState.create(dataSource);\n+    }\n+\n+    @Test\n+    public void initialStateIsAbsent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAxNTQ3OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/test/java/com/palantir/history/LogVerificationStateTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1NDo1NFrOHVXuQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1NDo1NFrOHVXuQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MDgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).isPresent();\n          \n          \n            \n                    assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).hasValue(5L);", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492170818", "createdAt": "2020-09-21T15:54:54Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/test/java/com/palantir/history/LogVerificationStateTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Optional;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.sqlite.LogVerificationProgressState;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.SqliteConnections;\n+\n+public class LogVerificationStateTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private LogVerificationProgressState log;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        log = LogVerificationProgressState.create(dataSource);\n+    }\n+\n+    @Test\n+    public void initialStateIsAbsent() {\n+        assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).isNotPresent();\n+    }\n+\n+    @Test\n+    public void canUpdateState() {\n+        assertThat(log.updateProgress(CLIENT, USE_CASE, 5L)).isTrue();\n+        assertThat(log.getLastVerifiedSeq(CLIENT, USE_CASE)).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAzNjI0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1OTo0OFrOHVX7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1OTo0OFrOHVX7Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NDEyNw==", "bodyText": "You shouldn't be testing at this level of abstraction here, you should have a method that you call instead", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492174127", "createdAt": "2020-09-21T15:59:48Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> stateLog;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        stateLog = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), dataSource);\n+\n+        jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class, PaxosRound.class);\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+    }\n+\n+    @Test\n+    public void canGetAllLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(stateLog, i + 1));\n+        Function<SqlitePaxosStateLogQueries, Set<PaxosRound<PaxosValue>>> call\n+                = dao -> dao.getLearnerLogsSince(CLIENT, USE_CASE, 5L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAzODkzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjowMDoxOFrOHVX8tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjowMDoxOFrOHVX8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3NDUxNw==", "bodyText": "Don't forget to add a test for PAS reading", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r492174517", "createdAt": "2020-09-21T16:00:18Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.paxos.SqlitePaxosStateLogQueries;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE = \"useCase1\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> stateLog;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        stateLog = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), dataSource);\n+\n+        jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class, PaxosRound.class);\n+        jdbi.registerRowMapper(new LearnerPaxosRoundMapper());\n+        jdbi.registerRowMapper(new NamespaceAndUseCaseMapper());\n+    }\n+\n+    @Test\n+    public void canGetAllLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(stateLog, i + 1));\n+        Function<SqlitePaxosStateLogQueries, Set<PaxosRound<PaxosValue>>> call\n+                = dao -> dao.getLearnerLogsSince(CLIENT, USE_CASE, 5L);\n+        Set<PaxosRound<PaxosValue>> namespaceAndUseCases = jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                call::apply);\n+        assertThat(namespaceAndUseCases.size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllUniquePairsOfNamespaceAndClient() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            PaxosStateLog<PaxosValue> otherLog\n+                    = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(Client.of(\"client\" + i), USE_CASE), dataSource);\n+            writeValueForLogAndRound(otherLog, 1L);\n+        });\n+        Set<NamespaceAndUseCase> namespaceAndUseCases = jdbi.withExtension(SqlitePaxosStateLogQueries.class,\n+                SqlitePaxosStateLogQueries::getAllNamespaceAndUseCaseTuples);\n+        assertThat(namespaceAndUseCases.size()).isEqualTo(100);\n+    }\n+\n+    private PaxosValue writeValueForLogAndRound(PaxosStateLog<PaxosValue> log, long round) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69fca64e69f8bf118ae7948cb89226f8c185bdac"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODk1NjM1OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4989.v2.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNToxMlrOHWsytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNToxMlrOHWsytA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2NDU5Ng==", "bodyText": "Make it a full sentence and maybe why it's something we care about", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493564596", "createdAt": "2020-09-23T13:05:12Z", "author": {"login": "gmaretic"}, "path": "changelog/@unreleased/pr-4989.v2.yml", "diffHunk": "@@ -0,0 +1,5 @@\n+type: feature\n+feature:\n+  description: Mechanism to load Paxos state log history from Sqlite.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODk2MzU2OnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNjoyNFrOHWs3Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzowNjoyNFrOHWs3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU2NTc5MA==", "bodyText": "\ud83e\udd47", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493565790", "createdAt": "2020-09-23T13:06:24Z", "author": {"login": "gmaretic"}, "path": "settings.gradle", "diffHunk": "@@ -62,6 +62,7 @@ include \":timelock-api:timelock-api-undertow\"\n include \":timelock-api:timelock-api-jersey\"\n include \":timelock-api:timelock-api-dialogue\"\n include \":timelock-api:timelock-api-objects\"\n+include \":timelock-corruption-detection\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTA0MDkyOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoxOTozM1rOHWtpHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoxOTozM1rOHWtpHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU3ODUyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n          \n          \n            \n                    return execute(Queries::getAllNamespaceAndUseCaseTuples);", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493578525", "createdAt": "2020-09-23T13:19:33Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableRawLearnerAndAcceptorRecords;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.history.models.RawLearnerAndAcceptorRecords;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public final class SqlitePaxosStateLogHistory {\n+    private final Jdbi jdbi;\n+\n+    private SqlitePaxosStateLogHistory(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLog.Queries.class, SqlitePaxosStateLog.Queries::createTable);\n+        jdbi.getConfig(JdbiImmutables.class)\n+                .registerImmutable(Client.class, PaxosRound.class, NamespaceAndUseCase.class);\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper())\n+                .registerRowMapper(new LearnerPaxosRoundMapper())\n+                .registerRowMapper(new NamespaceAndUseCaseMapper());\n+        return new SqlitePaxosStateLogHistory(jdbi);\n+    }\n+\n+    public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n+        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTA2NDY1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoyMzoyMFrOHWt4Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozODoyM1rOHW5cLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MjM5NQ==", "bodyText": "How did we chose this limit? We need to figure out the correct limit for remotes", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493582395", "createdAt": "2020-09-23T13:23:20Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableRawLearnerAndAcceptorRecords;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.history.models.RawLearnerAndAcceptorRecords;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public final class SqlitePaxosStateLogHistory {\n+    private final Jdbi jdbi;\n+\n+    private SqlitePaxosStateLogHistory(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLog.Queries.class, SqlitePaxosStateLog.Queries::createTable);\n+        jdbi.getConfig(JdbiImmutables.class)\n+                .registerImmutable(Client.class, PaxosRound.class, NamespaceAndUseCase.class);\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper())\n+                .registerRowMapper(new LearnerPaxosRoundMapper())\n+                .registerRowMapper(new NamespaceAndUseCaseMapper());\n+        return new SqlitePaxosStateLogHistory(jdbi);\n+    }\n+\n+    public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n+        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n+    }\n+\n+    public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n+            Client namespace, LearnerUseCase learnerUseCase, AcceptorUseCase acceptorUseCase, long seq) {\n+        return execute(dao -> ImmutableRawLearnerAndAcceptorRecords.of(\n+                dao.getLearnerLogsSince(namespace, learnerUseCase.value(), seq),\n+                dao.getAcceptorLogsSince(namespace, acceptorUseCase.value(), seq)));\n+    }\n+\n+    private <T> T execute(Function<Queries, T> call) {\n+        return jdbi.withExtension(Queries.class, call::apply);\n+    }\n+\n+    public interface Queries {\n+        @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n+        Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n+\n+        @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n+                + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n+                + \"ORDER BY seq ASC LIMIT 500\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTgyMQ==", "bodyText": "you can make it a todo, but this is also fine", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771821", "createdAt": "2020-09-23T17:38:23Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+\n+import com.palantir.history.mappers.AcceptorPaxosRoundMapper;\n+import com.palantir.history.mappers.LearnerPaxosRoundMapper;\n+import com.palantir.history.mappers.NamespaceAndUseCaseMapper;\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableRawLearnerAndAcceptorRecords;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.history.models.RawLearnerAndAcceptorRecords;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public final class SqlitePaxosStateLogHistory {\n+    private final Jdbi jdbi;\n+\n+    private SqlitePaxosStateLogHistory(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.withExtension(SqlitePaxosStateLog.Queries.class, SqlitePaxosStateLog.Queries::createTable);\n+        jdbi.getConfig(JdbiImmutables.class)\n+                .registerImmutable(Client.class, PaxosRound.class, NamespaceAndUseCase.class);\n+        jdbi.registerRowMapper(new AcceptorPaxosRoundMapper())\n+                .registerRowMapper(new LearnerPaxosRoundMapper())\n+                .registerRowMapper(new NamespaceAndUseCaseMapper());\n+        return new SqlitePaxosStateLogHistory(jdbi);\n+    }\n+\n+    public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n+        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n+    }\n+\n+    public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n+            Client namespace, LearnerUseCase learnerUseCase, AcceptorUseCase acceptorUseCase, long seq) {\n+        return execute(dao -> ImmutableRawLearnerAndAcceptorRecords.of(\n+                dao.getLearnerLogsSince(namespace, learnerUseCase.value(), seq),\n+                dao.getAcceptorLogsSince(namespace, acceptorUseCase.value(), seq)));\n+    }\n+\n+    private <T> T execute(Function<Queries, T> call) {\n+        return jdbi.withExtension(Queries.class, call::apply);\n+    }\n+\n+    public interface Queries {\n+        @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n+        Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n+\n+        @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n+                + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n+                + \"ORDER BY seq ASC LIMIT 500\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MjM5NQ=="}, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTA2OTQxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoyNDowNVrOHWt7VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzoyNDowNVrOHWt7VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU4MzE4OQ==", "bodyText": "People usually say \"no\" because they are lazy, but it's not a no op :P", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493583189", "createdAt": "2020-09-23T13:24:05Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableAcceptorUseCase;\n+import com.palantir.history.models.ImmutableLearnerUseCase;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class UseCaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(UseCaseUtils.class);\n+\n+    private UseCaseUtils() {\n+        // no op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTEzODAxOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzozNDo0NlrOHWuoIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzozNDo0NlrOHWuoIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5NDY1Ng==", "bodyText": "Feels like these two should be part of the interface. Also you can put a check on creation that the use case is correctly formatted and the prefix method.", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493594656", "createdAt": "2020-09-23T13:34:46Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.util;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.history.models.AcceptorUseCase;\n+import com.palantir.history.models.ImmutableAcceptorUseCase;\n+import com.palantir.history.models.ImmutableLearnerUseCase;\n+import com.palantir.history.models.LearnerUseCase;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class UseCaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(UseCaseUtils.class);\n+\n+    private UseCaseUtils() {\n+        // no op\n+    }\n+\n+    public static String getPaxosUseCasePrefix(String useCase) {\n+        int delimiterIndex = useCase.indexOf(\"!\");\n+        if (delimiterIndex == -1) {\n+            log.warn(\"The useCase - {} unexpectedly does not have `!` as delimiter. We should never reach here.\",\n+                    SafeArg.of(\"useCase\", useCase));\n+        }\n+        return useCase.substring(0, delimiterIndex);\n+    }\n+\n+    public static LearnerUseCase getLearnerUseCase(String paxosUseCase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTE2ODI4OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzozOToxOFrOHWu7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzozOToxOFrOHWu7sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5OTY2Nw==", "bodyText": "nit: make it OptionalLong, and don't box the long in the method below", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493599667", "createdAt": "2020-09-23T13:39:18Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/LogVerificationProgressState.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.sqlite;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.jdbi.v3.core.mapper.immutables.JdbiImmutables;\n+import org.jdbi.v3.sqlobject.SqlObjectPlugin;\n+import org.jdbi.v3.sqlobject.customizer.Bind;\n+import org.jdbi.v3.sqlobject.customizer.BindPojo;\n+import org.jdbi.v3.sqlobject.statement.SqlQuery;\n+import org.jdbi.v3.sqlobject.statement.SqlUpdate;\n+\n+import com.palantir.paxos.Client;\n+\n+public final class LogVerificationProgressState {\n+    private static final long INITIAL_PROGRESS = -1L;\n+\n+    private final Jdbi jdbi;\n+\n+    private LogVerificationProgressState(Jdbi jdbi) {\n+        this.jdbi = jdbi;\n+    }\n+\n+    public static LogVerificationProgressState create(DataSource dataSource) {\n+        Jdbi jdbi = Jdbi.create(dataSource).installPlugin(new SqlObjectPlugin());\n+        jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class);\n+        LogVerificationProgressState state = new LogVerificationProgressState(jdbi);\n+        state.initialize();\n+        return state;\n+    }\n+\n+    private void initialize() {\n+        execute(LogVerificationProgressState.Queries::createVerificationProgressStateTable);\n+    }\n+\n+    public void updateProgress(Client client, String useCase, long seq) {\n+        execute(dao -> dao.updateProgress(client, useCase, seq));\n+    }\n+\n+    public Long getLastVerifiedSeq(Client client, String useCase) {\n+        return execute(dao -> {\n+            Optional<Long> lastVerifiedSeq = dao.getLastVerifiedSeq(client, useCase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTE5MjA3OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/RawLearnerAndAcceptorRecords.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NDowOFrOHWvKnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0NDowOFrOHWvKnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwMzQ4NQ==", "bodyText": "I would just not have this class and create the LAAR directly", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493603485", "createdAt": "2020-09-23T13:44:08Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/RawLearnerAndAcceptorRecords.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.models;\n+\n+import java.util.Set;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+import com.palantir.paxos.PaxosValue;\n+\n+@Value.Immutable\n+public interface RawLearnerAndAcceptorRecords {\n+\n+    @Value.Parameter\n+    Set<PaxosRound<PaxosValue>>  rawLearnerRecords();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIxOTk5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0OTozN1rOHWvbrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo0OTozN1rOHWvbrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYwNzg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {\n          \n          \n            \n            public class AcceptorPaxosRoundMapper implements RowMapper<Map.Entry<Long, PaxosAcceptorState>> {\n          \n          \n            \n                @Override\n          \n          \n            \n                public Map.Entry<Long, PaxosAcceptorState> map(ResultSet rs, StatementContext ctx) throws SQLException {\n          \n          \n            \n                    PaxosAcceptorState value = PaxosAcceptorState.BYTES_HYDRATOR.hydrateFromBytes(rs.getBytes(\"val\"));\n          \n          \n            \n                    return Maps.immutableEntry(rs.getLong(\"seq\"), value);\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nSame for the Learner, and then we can create the map directly in the query and get rid of RawLearnerAndAcceptorRecords.java", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493607854", "createdAt": "2020-09-23T13:49:37Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.mappers;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import org.jdbi.v3.core.mapper.RowMapper;\n+import org.jdbi.v3.core.statement.StatementContext;\n+\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosRound;\n+\n+public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTIzODgzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MzoxMVrOHWvnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1MzoxMVrOHWvnRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMDgyMw==", "bodyText": "nit: remove", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493610823", "createdAt": "2020-09-23T13:53:11Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.history.util.UseCaseUtils;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosProposalId;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTI0NjI1OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzo1NDozOVrOHWvr8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjoyODo0NVrOHW21DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjAxOQ==", "bodyText": "These tests are pretty decent, maybe add a test where some rounds are not present and you have records in both. Maybe even verify the actual paxosvalue", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493612019", "createdAt": "2020-09-23T13:54:39Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.history.util.UseCaseUtils;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosProposalId;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canGetAllLearnerLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(learnerLog, i + 1));\n+        LearnerAndAcceptorRecords learnerAndAcceptorRecords\n+                = history.loadLocalHistory(ImmutableNamespaceAndUseCase.of(\n+                        CLIENT, UseCaseUtils.getPaxosUseCasePrefix(USE_CASE_LEARNER)), 5L);\n+        assertThat(learnerAndAcceptorRecords.acceptorRecords().size()).isEqualTo(0);\n+        assertThat(learnerAndAcceptorRecords.learnerRecords().size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllAcceptorLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeAcceptorStateForLogAndRound(acceptorLog, i + 1));\n+        LearnerAndAcceptorRecords learnerAndAcceptorRecords\n+                = history.loadLocalHistory(ImmutableNamespaceAndUseCase.of(\n+                CLIENT, UseCaseUtils.getPaxosUseCasePrefix(USE_CASE_LEARNER)), 5L);\n+        assertThat(learnerAndAcceptorRecords.learnerRecords().size()).isEqualTo(0);\n+        assertThat(learnerAndAcceptorRecords.acceptorRecords().size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllUniquePairsOfNamespaceAndClient() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            PaxosStateLog<PaxosValue> otherLog\n+                    = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(Client.of(\"client\" + i),\n+                    USE_CASE_LEARNER), dataSource);\n+            writeValueForLogAndRound(otherLog, 1L);\n+        });\n+        Set<NamespaceAndUseCase> allNamespaceAndUseCaseTuples = SqlitePaxosStateLogHistory.create(\n+                dataSource).getAllNamespaceAndUseCaseTuples();\n+        assertThat(allNamespaceAndUseCaseTuples.size()).isEqualTo(100);\n+    }\n+\n+    private PaxosValue writeValueForLogAndRound(PaxosStateLog<PaxosValue> log, long round) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcyOTAzNg==", "bodyText": "done", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493729036", "createdAt": "2020-09-23T16:28:45Z", "author": {"login": "sudiksha27"}, "path": "timelock-corruption-detection/src/test/java/com/palantir/history/SqliteHistoryQueryTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.jdbi.v3.core.Jdbi;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.history.util.UseCaseUtils;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosProposalId;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+\n+public class SqliteHistoryQueryTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"tom\");\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private Jdbi jdbi;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canGetAllLearnerLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeValueForLogAndRound(learnerLog, i + 1));\n+        LearnerAndAcceptorRecords learnerAndAcceptorRecords\n+                = history.loadLocalHistory(ImmutableNamespaceAndUseCase.of(\n+                        CLIENT, UseCaseUtils.getPaxosUseCasePrefix(USE_CASE_LEARNER)), 5L);\n+        assertThat(learnerAndAcceptorRecords.acceptorRecords().size()).isEqualTo(0);\n+        assertThat(learnerAndAcceptorRecords.learnerRecords().size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllAcceptorLogsSince() {\n+        IntStream.range(0, 100).forEach(i -> writeAcceptorStateForLogAndRound(acceptorLog, i + 1));\n+        LearnerAndAcceptorRecords learnerAndAcceptorRecords\n+                = history.loadLocalHistory(ImmutableNamespaceAndUseCase.of(\n+                CLIENT, UseCaseUtils.getPaxosUseCasePrefix(USE_CASE_LEARNER)), 5L);\n+        assertThat(learnerAndAcceptorRecords.learnerRecords().size()).isEqualTo(0);\n+        assertThat(learnerAndAcceptorRecords.acceptorRecords().size()).isEqualTo(95);\n+    }\n+\n+    @Test\n+    public void canGetAllUniquePairsOfNamespaceAndClient() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            PaxosStateLog<PaxosValue> otherLog\n+                    = SqlitePaxosStateLog.create(ImmutableNamespaceAndUseCase.of(Client.of(\"client\" + i),\n+                    USE_CASE_LEARNER), dataSource);\n+            writeValueForLogAndRound(otherLog, 1L);\n+        });\n+        Set<NamespaceAndUseCase> allNamespaceAndUseCaseTuples = SqlitePaxosStateLogHistory.create(\n+                dataSource).getAllNamespaceAndUseCaseTuples();\n+        assertThat(allNamespaceAndUseCaseTuples.size()).isEqualTo(100);\n+    }\n+\n+    private PaxosValue writeValueForLogAndRound(PaxosStateLog<PaxosValue> log, long round) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYxMjAxOQ=="}, "originalCommit": {"oid": "f45c4ba49826a8d9e68b5dddf26eb3f1516b67d4"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIzMTYwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNjowMVrOHW5W9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNjowMVrOHW5W9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDQ4NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493770485", "createdAt": "2020-09-23T17:36:01Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/mappers/AcceptorPaxosRoundMapper.java", "diffHunk": "@@ -18,17 +18,18 @@\n \n import java.sql.ResultSet;\n import java.sql.SQLException;\n+import java.util.Map;\n \n import org.jdbi.v3.core.mapper.RowMapper;\n import org.jdbi.v3.core.statement.StatementContext;\n \n+import com.google.common.collect.Maps;\n import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosRound;\n \n-public class AcceptorPaxosRoundMapper implements RowMapper<PaxosRound<PaxosAcceptorState>> {\n+public class AcceptorPaxosRoundMapper implements RowMapper<Map.Entry<Long, PaxosAcceptorState>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIzNTE2OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/AcceptorUseCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNjo1NVrOHW5ZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNjo1NVrOHW5ZGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTAzNA==", "bodyText": "this is fine, but I'd call this method create", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771034", "createdAt": "2020-09-23T17:36:55Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/AcceptorUseCase.java", "diffHunk": "@@ -20,7 +20,10 @@\n \n @Value.Immutable\n public interface AcceptorUseCase {\n-\n     @Value.Parameter\n     String value();\n+\n+    static AcceptorUseCase getAcceptorUseCase(String paxosUseCase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIzNTU5OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerUseCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNzowNVrOHW5ZaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozNzowNVrOHW5ZaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTExMw==", "bodyText": "same as above", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771113", "createdAt": "2020-09-23T17:37:05Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerUseCase.java", "diffHunk": "@@ -20,7 +20,10 @@\n \n @Value.Immutable\n public interface LearnerUseCase {\n-\n     @Value.Parameter\n     String value();\n+\n+    static LearnerUseCase getLearnerUseCase(String paxosUseCase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIzODc0OnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozODowMlrOHW5baA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozODowMlrOHW5baA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTYyNA==", "bodyText": "nit: method name", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493771624", "createdAt": "2020-09-23T17:38:02Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -61,12 +62,12 @@ public static SqlitePaxosStateLogHistory create(DataSource dataSource) {\n     }\n \n     public Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples() {\n-        return execute(dao -> dao.getAllNamespaceAndUseCaseTuples());\n+        return execute(Queries::getAllNamespaceAndUseCaseTuples);\n     }\n \n-    public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n+    public LearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI0MjkwOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozOToxNlrOHW5eFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozOToxNlrOHW5eFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MjMxMQ==", "bodyText": "\ud83c\udf96\ufe0f", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493772311", "createdAt": "2020-09-23T17:39:16Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/sqlite/SqlitePaxosStateLogHistory.java", "diffHunk": "@@ -79,18 +80,21 @@ public RawLearnerAndAcceptorRecords getRawLearnerAndAcceptorLogsSince(\n         @SqlQuery(\"SELECT DISTINCT namespace, useCase FROM paxosLog\")\n         Set<NamespaceAndUseCase> getAllNamespaceAndUseCaseTuples();\n \n+//      For now, limit is based on approximation and has not been tested with remotes. We need to revisit this once\n+//      we have the remote history providers set up. Also, we may have to make it configurable to\n+//      accommodate the rate at which logs are being published.\n         @SqlQuery(\"SELECT seq, val FROM paxosLog \"\n                 + \"WHERE namespace = :namespace.value AND useCase = :useCase AND seq > :seq \"\n                 + \"ORDER BY seq ASC LIMIT 500\")\n-        Set<PaxosRound<PaxosValue>> getLearnerLogsSince(\n+        Map<Long, PaxosValue> getLearnerLogsSince(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a76b6d189e432c40739b5dc2391bd18fc59b9c6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI2MjEzOnYy", "diffSide": "RIGHT", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NDozNFrOHW5qIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NDozNFrOHW5qIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NTM5Mg==", "bodyText": "nice!", "url": "https://github.com/palantir/atlasdb/pull/4989#discussion_r493775392", "createdAt": "2020-09-23T17:44:34Z", "author": {"login": "gmaretic"}, "path": "timelock-corruption-detection/src/main/java/com/palantir/history/util/UseCaseUtils.java", "diffHunk": "@@ -16,24 +16,26 @@\n \n package com.palantir.history.util;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.palantir.logsafe.Preconditions;\n import com.palantir.logsafe.SafeArg;\n \n public final class UseCaseUtils {\n-    private static final Logger log = LoggerFactory.getLogger(UseCaseUtils.class);\n+    private static final Pattern PATTERN = Pattern.compile(\"^(.*)!(.*)$\");\n \n     private UseCaseUtils() {\n         // no op\n     }\n \n     public static String getPaxosUseCasePrefix(String useCase) {\n-        String[] delimitedStrings = useCase.split(\"!\");\n-        if (delimitedStrings.length != 2) {\n-            log.warn(\"The useCase - {} unexpectedly does not have `!` as delimiter. We should never reach here.\",\n-                    SafeArg.of(\"useCase\", useCase));\n-        }\n-        return delimitedStrings[0];\n+        Matcher matcher = PATTERN.matcher(useCase);\n+        Preconditions.checkState(matcher.find(),\n+                \"Unexpected use case format\", SafeArg.of(\"useCase\", useCase));\n+        return matcher.group(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "069e38be89a40dfeeb6cdcf19d188d47dda02e0a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}