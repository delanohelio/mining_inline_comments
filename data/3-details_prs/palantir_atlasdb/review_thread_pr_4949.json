{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDk3MTA0", "number": 4949, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODozNzoyNVrOEY842w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0MTo1MFrOEY8-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTk4ODc1OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODozNzoyNVrOHBfidw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTowNDoyNlrOHBgcUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyNzM1MQ==", "bodyText": "Drive by comment here, but do we really need this if statement?", "url": "https://github.com/palantir/atlasdb/pull/4949#discussion_r471327351", "createdAt": "2020-08-17T08:37:25Z", "author": {"login": "Jolyon-S"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -455,9 +455,7 @@ public void stressTestForPaxosEndpoints() {\n     }\n \n     private static void assertNumberOfThreadsReasonable(int startingThreads, int threadCount, boolean nonLeaderDown) {\n-        // TODO (jkong): Lower the amount over the threshold. This needs to be slightly higher for now because of the\n-        // current threading model in batch mode, where separate threads may be spun up on the autobatcher.\n-        int threadLimit = startingThreads + 800;\n+        int threadLimit = startingThreads + 1000;\n         if (nonLeaderDown) {\n             if (threadCount > threadLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98009ba3f50395511862340d8f2ae6893f076a82"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MTM4MQ==", "bodyText": "We do not. Look at line 463 \ud83d\ude05  This must have been an artifact of when I did some previous testing", "url": "https://github.com/palantir/atlasdb/pull/4949#discussion_r471341381", "createdAt": "2020-08-17T09:02:56Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -455,9 +455,7 @@ public void stressTestForPaxosEndpoints() {\n     }\n \n     private static void assertNumberOfThreadsReasonable(int startingThreads, int threadCount, boolean nonLeaderDown) {\n-        // TODO (jkong): Lower the amount over the threshold. This needs to be slightly higher for now because of the\n-        // current threading model in batch mode, where separate threads may be spun up on the autobatcher.\n-        int threadLimit = startingThreads + 800;\n+        int threadLimit = startingThreads + 1000;\n         if (nonLeaderDown) {\n             if (threadCount > threadLimit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyNzM1MQ=="}, "originalCommit": {"oid": "98009ba3f50395511862340d8f2ae6893f076a82"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0MjE2MQ==", "bodyText": "yep, that's what I was looking at ^^. I'm guessing this was for a breakpoint.", "url": "https://github.com/palantir/atlasdb/pull/4949#discussion_r471342161", "createdAt": "2020-08-17T09:04:26Z", "author": {"login": "Jolyon-S"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -455,9 +455,7 @@ public void stressTestForPaxosEndpoints() {\n     }\n \n     private static void assertNumberOfThreadsReasonable(int startingThreads, int threadCount, boolean nonLeaderDown) {\n-        // TODO (jkong): Lower the amount over the threshold. This needs to be slightly higher for now because of the\n-        // current threading model in batch mode, where separate threads may be spun up on the autobatcher.\n-        int threadLimit = startingThreads + 800;\n+        int threadLimit = startingThreads + 1000;\n         if (nonLeaderDown) {\n             if (threadCount > threadLimit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyNzM1MQ=="}, "originalCommit": {"oid": "98009ba3f50395511862340d8f2ae6893f076a82"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjAwMzM1OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODo0MTo1MFrOHBfrkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToxOToxNVrOHBg7ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyOTY4MQ==", "bodyText": "If I understand this test correctly:\n\nThis number (1_800) represents how long we are running for - the longer, the more accurate the test is (i.e. if we were to run for 100k and still never exceeded the thread limit we'd know it is unlikely to ever go over that amount).\nThe number that you increased below (+ 800 -> + 1000) is the tolerance - by increasing that you make the tests more tolerant of bad thread buildup, although only by a small amount.\n\nSo presumably the concern is that this PR relaxes the test a bit (to make it pass on Circle, sure, but even so). I'm happy with this as it is - 1) should help counteract 2) - but if you wanted to err on the side of caution, increasing 1) further would improve the test (at the cost of time, naturally).\nThoughts?", "url": "https://github.com/palantir/atlasdb/pull/4949#discussion_r471329681", "createdAt": "2020-08-17T08:41:50Z", "author": {"login": "Jolyon-S"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -437,7 +437,7 @@ public void stressTestForPaxosEndpoints() {\n         int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n         boolean isNonLeaderTakenOut = false;\n         try {\n-            for (int i = 0; i < 1_500; i++) { // Needed as it takes a while for the thread buildup to occur\n+            for (int i = 0; i < 1_800; i++) { // Needed as it takes a while for the thread buildup to occur", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98009ba3f50395511862340d8f2ae6893f076a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM0NDg0Mg==", "bodyText": "Yep, your understanding is correct. Here, 1_800 is the number of requests, and 1_000 is the number of threads over the amount at startup that are allowed.\nWe do expect (384 + 1) * 2 = 770 threads to be blocked on talking to the dying timelock node. However, there is probably enough variation in other threads that tolerating noise of 800 - 770 = 30 is insufficient (this includes any threads that may be spun up by the JVM or by our application code for whatever reason).\nWhat's important here is that we don't want the number of threads blocked to scale with the number of requests to the dead node. Thus, strictly speaking as a minimum bound you want the number of requests made whilst one node is unresponsive to be at least half of the number of spare threads allowed (the reason for half is because Dialogue spins up a thread as well). So in theory we should have at least 800 / 2 = 400 and now 1000 / 2 = 500 as a minimum, and once you add the offset from requests made before a node crashes we're looking at 900 and 1_100 as theoretical minimum bounds. We want more though to ensure that if 'noise' from other threads being shut down actually makes a negative contribution, the test still doesn't really have a chance of passing.", "url": "https://github.com/palantir/atlasdb/pull/4949#discussion_r471344842", "createdAt": "2020-08-17T09:09:24Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -437,7 +437,7 @@ public void stressTestForPaxosEndpoints() {\n         int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n         boolean isNonLeaderTakenOut = false;\n         try {\n-            for (int i = 0; i < 1_500; i++) { // Needed as it takes a while for the thread buildup to occur\n+            for (int i = 0; i < 1_800; i++) { // Needed as it takes a while for the thread buildup to occur", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyOTY4MQ=="}, "originalCommit": {"oid": "98009ba3f50395511862340d8f2ae6893f076a82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1MDExNw==", "bodyText": "What's important here is that we don't want the number of threads blocked to scale with the number of requests to the dead node.\n\nYes, that's the main thing, and my main original concern was that increasing the tolerance by 200 but increasing the requests by 300 may or may not be enough, but I think as you have reasoned out above, it is sufficient.\nLooks good to me then, merge away!", "url": "https://github.com/palantir/atlasdb/pull/4949#discussion_r471350117", "createdAt": "2020-08-17T09:19:15Z", "author": {"login": "Jolyon-S"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -437,7 +437,7 @@ public void stressTestForPaxosEndpoints() {\n         int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n         boolean isNonLeaderTakenOut = false;\n         try {\n-            for (int i = 0; i < 1_500; i++) { // Needed as it takes a while for the thread buildup to occur\n+            for (int i = 0; i < 1_800; i++) { // Needed as it takes a while for the thread buildup to occur", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMyOTY4MQ=="}, "originalCommit": {"oid": "98009ba3f50395511862340d8f2ae6893f076a82"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2797, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}