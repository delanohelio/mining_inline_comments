{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMzM1OTYy", "number": 4621, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxMTozOFrODkR8iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNTozNVrODkTOsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzY5MzUyOnYy", "diffSide": "RIGHT", "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxMTozOFrOFwg2aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDo1ODoyOFrOFwiklQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNDE4NA==", "bodyText": "I think it would be interesting to test this to make sure that this handler does the right thing (i.e. same behaviour as before except it has the new trace).", "url": "https://github.com/palantir/atlasdb/pull/4621#discussion_r386414184", "createdAt": "2020-03-02T14:11:38Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java", "diffHunk": "@@ -98,12 +103,33 @@ private AutobatcherBuilder(Function<Integer, EventHandler<BatchElement<I, O>>> h\n             return this;\n         }\n \n+        public AutobatcherBuilder<I, O> safeTag(String key, String value) {\n+            this.safeTags.put(key, value);\n+            return this;\n+        }\n+\n+        public AutobatcherBuilder<I, O> observability(Observability observabilityParam) {\n+            this.observability = observabilityParam;\n+            return this;\n+        }\n+\n         public DisruptorAutobatcher<I, O> build() {\n             Preconditions.checkArgument(purpose != null, \"purpose must be provided\");\n             EventHandler<BatchElement<I, O>> handler = this.handlerFactory.apply(DEFAULT_BUFFER_SIZE);\n \n+            EventHandler<BatchElement<I, O>> tracingHandler = (event, sequence, endOfBatch) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cace570284da36bb5887e026d54d97f89533a1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0MjM4OQ==", "bodyText": "addressed, see new commit.", "url": "https://github.com/palantir/atlasdb/pull/4621#discussion_r386442389", "createdAt": "2020-03-02T14:58:28Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java", "diffHunk": "@@ -98,12 +103,33 @@ private AutobatcherBuilder(Function<Integer, EventHandler<BatchElement<I, O>>> h\n             return this;\n         }\n \n+        public AutobatcherBuilder<I, O> safeTag(String key, String value) {\n+            this.safeTags.put(key, value);\n+            return this;\n+        }\n+\n+        public AutobatcherBuilder<I, O> observability(Observability observabilityParam) {\n+            this.observability = observabilityParam;\n+            return this;\n+        }\n+\n         public DisruptorAutobatcher<I, O> build() {\n             Preconditions.checkArgument(purpose != null, \"purpose must be provided\");\n             EventHandler<BatchElement<I, O>> handler = this.handlerFactory.apply(DEFAULT_BUFFER_SIZE);\n \n+            EventHandler<BatchElement<I, O>> tracingHandler = (event, sequence, endOfBatch) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNDE4NA=="}, "originalCommit": {"oid": "92cace570284da36bb5887e026d54d97f89533a1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzkwMzg0OnYy", "diffSide": "RIGHT", "path": "atlasdb-autobatch/src/test/java/com/palantir/atlasdb/autobatch/TracingEventHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNTozNVrOFwi2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowNjozMFrOFwi4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0Njg2OQ==", "bodyText": "Could you also add a pass-through test to assert that tracingHandler.onEvent(x,y,z) calls the correct delegate handler?", "url": "https://github.com/palantir/atlasdb/pull/4621#discussion_r386446869", "createdAt": "2020-03-02T15:05:35Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-autobatch/src/test/java/com/palantir/atlasdb/autobatch/TracingEventHandlerTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.autobatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.util.concurrent.SettableFuture;\n+import com.lmax.disruptor.EventHandler;\n+import com.palantir.tracing.Observability;\n+import com.palantir.tracing.Tracer;\n+import com.palantir.tracing.api.Span;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TracingEventHandlerTest {\n+\n+    @Rule\n+    public TraceCapturingRule traceRule = new TraceCapturingRule();\n+\n+    @Mock\n+    private EventHandler<BatchElement<Integer, Long>> delegate;\n+\n+    @Test\n+    public void nonFlushesDoNotHaveTraces() throws Exception {\n+        TracingEventHandler<Integer, Long> tracingHandler =\n+                new TracingEventHandler<>(delegate, \"test\", Observability.SAMPLE);\n+\n+        tracingHandler.onEvent(new TestBatchElement(), 45, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "789db58a653fd9fb22f729e52590e9c465530d8c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0NzQxMg==", "bodyText": "I'll leave the addition of this test at your discretion.", "url": "https://github.com/palantir/atlasdb/pull/4621#discussion_r386447412", "createdAt": "2020-03-02T15:06:30Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-autobatch/src/test/java/com/palantir/atlasdb/autobatch/TracingEventHandlerTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.autobatch;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExternalResource;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.util.concurrent.SettableFuture;\n+import com.lmax.disruptor.EventHandler;\n+import com.palantir.tracing.Observability;\n+import com.palantir.tracing.Tracer;\n+import com.palantir.tracing.api.Span;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class TracingEventHandlerTest {\n+\n+    @Rule\n+    public TraceCapturingRule traceRule = new TraceCapturingRule();\n+\n+    @Mock\n+    private EventHandler<BatchElement<Integer, Long>> delegate;\n+\n+    @Test\n+    public void nonFlushesDoNotHaveTraces() throws Exception {\n+        TracingEventHandler<Integer, Long> tracingHandler =\n+                new TracingEventHandler<>(delegate, \"test\", Observability.SAMPLE);\n+\n+        tracingHandler.onEvent(new TestBatchElement(), 45, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0Njg2OQ=="}, "originalCommit": {"oid": "789db58a653fd9fb22f729e52590e9c465530d8c"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2359, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}