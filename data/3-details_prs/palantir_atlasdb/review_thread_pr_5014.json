{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NjE3MzQ3", "number": 5014, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyOTozMVrOEs-Qog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo0MjoxMVrOEs-igA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkyODY2OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/config/DbTimestampCreationSetting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyOTozMVrOHggEfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo1OTowM1rOHglZkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTkxNg==", "bodyText": "Note: these indicate that the methods should be generated", "url": "https://github.com/palantir/atlasdb/pull/5014#discussion_r503841916", "createdAt": "2020-10-13T10:29:31Z", "author": {"login": "gmaretic"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/config/DbTimestampCreationSetting.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import java.util.Optional;\n+\n+import org.derive4j.Data;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeries;\n+\n+@Data\n+public abstract class DbTimestampCreationSetting {\n+    public interface Cases<R> {\n+        R multipleSeries(Optional<TableReference> tableReference, TimestampSeries series);\n+        R singleSeries(Optional<TableReference> tableReference);\n+    }\n+\n+    public abstract <R> R match(Cases<R> cases);\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5846ea622994eb934ef9dfa819bb2e74b3193b6e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyOTIzNA==", "bodyText": "interesting - I guess you wouldn't want them if you aren't testing or putting them in sets, though it does feel a bit awkward that these aren't by default", "url": "https://github.com/palantir/atlasdb/pull/5014#discussion_r503929234", "createdAt": "2020-10-13T12:59:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/config/DbTimestampCreationSetting.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.config;\n+\n+import java.util.Optional;\n+\n+import org.derive4j.Data;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeries;\n+\n+@Data\n+public abstract class DbTimestampCreationSetting {\n+    public interface Cases<R> {\n+        R multipleSeries(Optional<TableReference> tableReference, TimestampSeries series);\n+        R singleSeries(Optional<TableReference> tableReference);\n+    }\n+\n+    public abstract <R> R match(Cases<R> cases);\n+\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTkxNg=="}, "originalCommit": {"oid": "5846ea622994eb934ef9dfa819bb2e74b3193b6e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTk3NDQwOnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDo0MjoxMVrOHgggRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo1OTozNFrOHgla3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0OTAzMA==", "bodyText": "Is it safe to just switch here?", "url": "https://github.com/palantir/atlasdb/pull/5014#discussion_r503849030", "createdAt": "2020-10-13T10:42:11Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "diffHunk": "@@ -49,15 +52,18 @@ public DbBoundTimestampCreator(KeyValueServiceConfig kvsConfig) {\n                 Optional::empty,\n                 Optional.of(leaderConfig),\n                 Optional.empty(),\n-                Optional.of(AtlasDbConstants.LEGACY_TIMELOCK_TIMESTAMP_TABLE),\n+                Optional.of(getTimestampCreationParameters(client)),\n                 AtlasDbConstants.DEFAULT_INITIALIZE_ASYNC,\n                 AtlasDbFactory.THROWING_FRESH_TIMESTAMP_SOURCE);\n \n         TimestampService timestampService = atlasFactory.getManagedTimestampService();\n-        Preconditions.checkArgument(timestampService instanceof TimestampManagementService,\n-                \"The timestamp service is not a managed timestamp service.\");\n \n         return () -> new DelegatingManagedTimestampService(timestampService,\n                 (TimestampManagementService) timestampService);\n     }\n+\n+    @VisibleForTesting\n+    static DbTimestampCreationSetting getTimestampCreationParameters(Client client) {\n+        return DbTimestampCreationSettings.multipleSeries(Optional.empty(), TimestampSeries.of(client.value()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5846ea622994eb934ef9dfa819bb2e74b3193b6e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkyOTU2NA==", "bodyText": "Yes. This isn't currently used in production anywhere. (This is a good flag though, it would be a fun P0 if it was actually used!)", "url": "https://github.com/palantir/atlasdb/pull/5014#discussion_r503929564", "createdAt": "2020-10-13T12:59:34Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/DbBoundTimestampCreator.java", "diffHunk": "@@ -49,15 +52,18 @@ public DbBoundTimestampCreator(KeyValueServiceConfig kvsConfig) {\n                 Optional::empty,\n                 Optional.of(leaderConfig),\n                 Optional.empty(),\n-                Optional.of(AtlasDbConstants.LEGACY_TIMELOCK_TIMESTAMP_TABLE),\n+                Optional.of(getTimestampCreationParameters(client)),\n                 AtlasDbConstants.DEFAULT_INITIALIZE_ASYNC,\n                 AtlasDbFactory.THROWING_FRESH_TIMESTAMP_SOURCE);\n \n         TimestampService timestampService = atlasFactory.getManagedTimestampService();\n-        Preconditions.checkArgument(timestampService instanceof TimestampManagementService,\n-                \"The timestamp service is not a managed timestamp service.\");\n \n         return () -> new DelegatingManagedTimestampService(timestampService,\n                 (TimestampManagementService) timestampService);\n     }\n+\n+    @VisibleForTesting\n+    static DbTimestampCreationSetting getTimestampCreationParameters(Client client) {\n+        return DbTimestampCreationSettings.multipleSeries(Optional.empty(), TimestampSeries.of(client.value()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0OTAzMA=="}, "originalCommit": {"oid": "5846ea622994eb934ef9dfa819bb2e74b3193b6e"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2604, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}