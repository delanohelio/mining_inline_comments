{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MTMxMzM1", "number": 4981, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NDoxMFrOEicV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODo0MFrOEjK9sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTUxNDEyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NDoxMFrOHQUVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NDoxMFrOHQUVgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MjQ0OA==", "bodyText": "could maybe do\nhealthCheckDeactivated = healthCheckDeactivated || Duration.between(...).compareTo(...) < 0;", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486872448", "createdAt": "2020-09-11T08:54:10Z", "author": {"login": "Jolyon-S"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -38,8 +44,29 @@ private double fiveMinuteRate(LeaderElectionServiceMetrics leaderElectionRateFor\n         return leaderElectionRateForClient.proposedLeadership().getFiveMinuteRate();\n     }\n \n-    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n-        return getLeaderElectionRateForAllClients() <= MAX_ALLOWED_LAST_5_MINUTE_RATE\n-                ? LeaderElectionHealthStatus.HEALTHY : LeaderElectionHealthStatus.UNHEALTHY;\n+    private boolean isHealthCheckDeactivated() {\n+        if (!healthCheckDeactivated) {\n+            healthCheckDeactivated\n+                    = Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b233ba93af9441edd1d2fe162ed3533be405976"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTUyOTA4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NjozOFrOHQUf4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODo1NjozOFrOHQUf4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NTEwNQ==", "bodyText": "An interesting way of doing it. Since some of the builder is the same, I suggest you do either:\nLeaderElectionHealthStatus status = isHealthy(...) ? LeaderElectionHealthStatus.HEALTHY : LeaderElectionHealthStatus.UNHEALTHY;\nreturn LeaderElectionReport.builder().status(status).leaderElectionRate(...).build();\nor you could inline status to be inside the builder.", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486875105", "createdAt": "2020-09-11T08:56:38Z", "author": {"login": "Jolyon-S"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -38,8 +44,29 @@ private double fiveMinuteRate(LeaderElectionServiceMetrics leaderElectionRateFor\n         return leaderElectionRateForClient.proposedLeadership().getFiveMinuteRate();\n     }\n \n-    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n-        return getLeaderElectionRateForAllClients() <= MAX_ALLOWED_LAST_5_MINUTE_RATE\n-                ? LeaderElectionHealthStatus.HEALTHY : LeaderElectionHealthStatus.UNHEALTHY;\n+    private boolean isHealthCheckDeactivated() {\n+        if (!healthCheckDeactivated) {\n+            healthCheckDeactivated\n+                    = Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n+        }\n+        return healthCheckDeactivated;\n+    }\n+\n+    private boolean isHealthy(double leaderElectionRateForAllClients) {\n+        return isHealthCheckDeactivated() || (leaderElectionRateForAllClients <= MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    public LeaderElectionHealthReport leaderElectionRateHealthReport() {\n+        double leaderElectionRateForAllClients = getLeaderElectionRateForAllClients();\n+\n+        return isHealthy(leaderElectionRateForAllClients)\n+                ? LeaderElectionHealthReport.builder()\n+                .status(LeaderElectionHealthStatus.HEALTHY)\n+                .leaderElectionRate(leaderElectionRateForAllClients)\n+                .build()\n+                : LeaderElectionHealthReport.builder()\n+                        .status(LeaderElectionHealthStatus.UNHEALTHY)\n+                        .leaderElectionRate(leaderElectionRateForAllClients)\n+                        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b233ba93af9441edd1d2fe162ed3533be405976"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTg3NTE5OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1NzoyNFrOHQYNKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxMzoxMVrOHQcWUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzNTg0OA==", "bodyText": "Probably worth a comment explaining why this is a thing.", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486935848", "createdAt": "2020-09-11T09:57:24Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,15 +16,21 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a205087f761fb840554c50ccad1dbf2623dcec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMzczMQ==", "bodyText": "done", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487003731", "createdAt": "2020-09-11T12:13:11Z", "author": {"login": "sudiksha27"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,15 +16,21 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzNTg0OA=="}, "originalCommit": {"oid": "41a205087f761fb840554c50ccad1dbf2623dcec"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTg4OTU2OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1OToyNVrOHQYWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1OToyNVrOHQYWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzODIyOA==", "bodyText": "Are we guaranteed that the health check executes from the same thread every time? Even if this is the case, it feels like it would make sense to be defensive against this as this isn't a hot path", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486938228", "createdAt": "2020-09-11T09:59:25Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,15 +16,21 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n+\n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n+    private final Instant timeCreated = Instant.now();\n+    private boolean healthCheckDeactivated = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a205087f761fb840554c50ccad1dbf2623dcec"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTkwMDcyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDowMTowM1rOHQYemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxNDowOFrOHQcYAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0MDMxMw==", "bodyText": "This test makes sense for now. The aggregation and/or threshold probably needs revisiting if timelock partitioning is introduced.", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486940313", "createdAt": "2020-09-11T10:01:03Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,69 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void alwaysHealthyUntilDeactivationPeriodPasses() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().status())\n                 .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 20, Duration.ofSeconds(60), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeHealthyForOneLeaderElectionPerMinuteAcrossClients() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyOverallEvenIfIndividualClientsAreHealthy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a205087f761fb840554c50ccad1dbf2623dcec"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNDE2Mw==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487004163", "createdAt": "2020-09-11T12:14:08Z", "author": {"login": "sudiksha27"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,69 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void alwaysHealthyUntilDeactivationPeriodPasses() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().status())\n                 .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 20, Duration.ofSeconds(60), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeHealthyForOneLeaderElectionPerMinuteAcrossClients() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyOverallEvenIfIndividualClientsAreHealthy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0MDMxMw=="}, "originalCommit": {"oid": "41a205087f761fb840554c50ccad1dbf2623dcec"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjcyNjQ4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNTo1NFrOHRUPTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNTo1NFrOHRUPTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTQzOQ==", "bodyText": "nit: timeFirstClientRegistered", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487919439", "createdAt": "2020-09-14T13:35:54Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,20 +16,35 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+\n+//    The first mark on leader proposal metric causes spike in 5 min rate and the health check inaccurately\n+//    becomes unhealthy. We deactivate the health check at start up until the initial mark has negligible\n+//    weight in the last 5 min rate.\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n+\n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n+    private volatile Instant timeCreated = Instant.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911e0d8385e028baa5c560910cf1612a548dc3ef"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjc1NTY4OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MDowMVrOHRUgJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MDowMVrOHRUgJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyMzc0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return healthCheckDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();\n          \n          \n            \n                    if (healthCheckDeactivated) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    boolean shouldBeDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();\n          \n          \n            \n                    healthCheckDeactivated = shouldBeDeactivated;\n          \n          \n            \n                    return shouldBeDeactivated;", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487923748", "createdAt": "2020-09-14T13:40:01Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -38,8 +53,26 @@ private double fiveMinuteRate(LeaderElectionServiceMetrics leaderElectionRateFor\n         return leaderElectionRateForClient.proposedLeadership().getFiveMinuteRate();\n     }\n \n-    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n-        return getLeaderElectionRateForAllClients() <= MAX_ALLOWED_LAST_5_MINUTE_RATE\n+    private boolean isHealthCheckDeactivated() {\n+        return healthCheckDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911e0d8385e028baa5c560910cf1612a548dc3ef"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjc4MjcxOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0Mzo1MFrOHRUvqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0Mzo1MFrOHRUvqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNzcyMg==", "bodyText": "Do you want a test for the new behaviour (the clock starts only after first client is registered)?", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487927722", "createdAt": "2020-09-14T13:43:50Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,69 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void alwaysHealthyUntilDeactivationPeriodPasses() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().status())\n                 .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 20, Duration.ofSeconds(60), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeHealthyForOneLeaderElectionPerMinuteAcrossClients() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyOverallEvenIfIndividualClientsAreHealthy() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 2,  Duration.ofSeconds(10));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 3,  Duration.ofSeconds(10));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 2,  Duration.ofSeconds(10), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 3,  Duration.ofSeconds(10), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     private void markLeaderElectionsAtSpecifiedInterval(Client client,\n             int leaderElectionCount,\n-            Duration timeIntervalInSeconds) {\n+            Duration timeIntervalInSeconds,\n+            boolean afterDeactivationPeriod) {\n         // The rate is initialized after first tick (5 second interval) of meter with number of marks / interval.\n         // Marking before the first interval has passed sets the rate very high, which should not happen in practice.\n-        fakeTimeClock.advance(6, TimeUnit.SECONDS);\n-        LeaderElectionServiceMetrics metrics = clientLeaderElectionServiceMetricsMap.get(client);\n+        if (afterDeactivationPeriod) {\n+            fakeTimeClock.advance(14, TimeUnit.MINUTES);\n+        }\n \n+        LeaderElectionServiceMetrics metrics = clientLeaderElectionServiceMetricsMap.get(client);\n         IntStream.range(0, leaderElectionCount).forEach(idx -> {\n             metrics.proposedLeadership().mark();\n             fakeTimeClock.advance(timeIntervalInSeconds.getSeconds(), TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911e0d8385e028baa5c560910cf1612a548dc3ef"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzE1MjUxOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODo0MFrOHRYMQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDozODo0MFrOHRYMQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NDE5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(check.isWithinDeactivationWindow())\n          \n          \n            \n                            .isEqualTo(false);\n          \n          \n            \n                    assertThat(check.isWithinDeactivationWindow()).isEqualTo(false);", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487984193", "createdAt": "2020-09-14T14:38:40Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,88 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void clockResetsWhenClientIsRegistered() {\n+        AtomicLong now = new AtomicLong();\n+        LeaderElectionHealthCheck check\n+                = new LeaderElectionHealthCheck(() -> Instant.ofEpochSecond(now.get()));\n+        long healthCheckDeactivationPeriod = LeaderElectionHealthCheck.HEALTH_CHECK_DEACTIVATION_PERIOD.getSeconds();\n+\n+        now.addAndGet(healthCheckDeactivationPeriod + 1);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        check.registerClient(CLIENT_1, leaderElectionServiceMetrics);\n+        now.addAndGet(healthCheckDeactivationPeriod / 2);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        now.addAndGet(healthCheckDeactivationPeriod / 2 + 1);\n+        assertThat(check.isWithinDeactivationWindow())\n+                .isEqualTo(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa0a19e366588a451ed39c9cc63c133f60e001e5"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2562, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}