{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTA4MTg1", "number": 4940, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyOToyNFrOEYLmTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyOToyNFrOEYLmTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzkxMzA4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LockRefreshingLockService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyOToyNFrOHAYWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODoyOToyNFrOHAYWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2MTAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    task = executor.scheduleWithFixedDelay(() -> {\n          \n          \n            \n                    ret.task = executor.scheduleWithFixedDelay(() -> {", "url": "https://github.com/palantir/atlasdb/pull/4940#discussion_r470161033", "createdAt": "2020-08-13T18:29:24Z", "author": {"login": "carterkozak"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockRefreshingLockService.java", "diffHunk": "@@ -42,16 +43,18 @@\n public final class LockRefreshingLockService extends SimplifyingLockService {\n     public static final int REFRESH_BATCH_SIZE = 500_000;\n     private static final Logger log = LoggerFactory.getLogger(LockRefreshingLockService.class);\n+    private static final ScheduledExecutorService executor =\n+            PTExecutors.newScheduledThreadPool(1, PTExecutors.newNamedThreadFactory(true));\n \n     final LockService delegate;\n     final Set<LockRefreshToken> toRefresh;\n-    final ScheduledExecutorService exec;\n     final long refreshFrequencyMillis = 5000;\n+    ScheduledFuture<?> task;\n     volatile boolean isClosed = false;\n \n     public static LockRefreshingLockService create(LockService delegate) {\n         final LockRefreshingLockService ret = new LockRefreshingLockService(delegate);\n-        ret.exec.scheduleWithFixedDelay(() -> {\n+        task = executor.scheduleWithFixedDelay(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef50ed46e45a1ef97291c8d055f5282b44d976fa"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2785, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}