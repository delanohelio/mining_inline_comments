{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTM4ODE2", "number": 4541, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDozNjoyOVrODbLAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToyOTozNlrODbL78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODE4NTcwOnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDozNjoyOVrOFigQCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDozNjoyOVrOFigQCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcyNDI5Nw==", "bodyText": "this is an uncontended lock except in the case of the bug.", "url": "https://github.com/palantir/atlasdb/pull/4541#discussion_r371724297", "createdAt": "2020-01-28T10:36:29Z", "author": {"login": "j-baker"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -69,13 +71,15 @@ Round awaitDone() {\n         }\n \n         void execute() {\n-            next = new Round();\n-            try {\n-                future.complete(delegate.get());\n-            } catch (Throwable t) {\n-                future.completeExceptionally(t);\n+            synchronized (lock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e600b759ee8c469198e394d2970c9bb065c2837"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODMzNzEzOnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToyOTozNlrOFihsjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMToyOTozNlrOFihsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0Nzk4Mg==", "bodyText": "This is neat!", "url": "https://github.com/palantir/atlasdb/pull/4541#discussion_r371747982", "createdAt": "2020-01-28T11:29:36Z", "author": {"login": "gmaretic"}, "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "diffHunk": "@@ -114,6 +121,41 @@ public void exceptionsArePropagatedForCoalescedCalls() {\n         tasks.assertAllFailed(expected);\n     }\n \n+    @Test\n+    public void stressTest() {\n+        int poolSize = 1024;\n+        ListeningExecutorService executorService =\n+                MoreExecutors.listeningDecorator(PTExecutors.newFixedThreadPool(poolSize));\n+        AtomicLong counter = new AtomicLong(0);\n+        Supplier<Long> supplier = new CoalescingSupplier<>(() -> {\n+            sleep(2);\n+            return counter.incrementAndGet();\n+        });\n+        List<ListenableFuture<?>> futures = IntStream.range(0, poolSize)\n+                .mapToObj(index -> executorService.submit(() -> assertIncreasing(supplier)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9979f2c1053beef26de520a3b09e88bf87554e10"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2266, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}