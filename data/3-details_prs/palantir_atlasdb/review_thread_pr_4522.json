{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODI3MDMz", "number": 4522, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozMjowOFrODZRCUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozNDoxOVrODaK7JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIwMTE1OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozMjowOFrOFfj1gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzozNToyNlrOFfleKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzNzMxMg==", "bodyText": "I think it'll suffice to just call it Handle. Since we'll more often than not refer to it as PersistentStore.Handle which makes sense by itself.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368637312", "createdAt": "2020-01-20T16:32:08Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NDEwNg==", "bodyText": "Renamed to handle and added docs explaining usage, creation and what does it represent.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368664106", "createdAt": "2020-01-20T17:35:26Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzNzMxMg=="}, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIwNjEyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozMzo0MVrOFfj4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozMzo0MVrOFfj4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzODAzMg==", "bodyText": "Similar to how Map refers to Map.Entry within its class, you should refer to Handle as PersistentStore.Handle everywhere in this interface, and also in the implementations that have already had this.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368638032", "createdAt": "2020-01-20T16:33:41Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the value\n+     * @param key                entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    Optional<V> get(EntryFamilyHandle entryFamilyHandle, @Nonnull K key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIxOTM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozODowM1rOFfkAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzo1NDoxMVrOFfl3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MDExNg==", "bodyText": "This javadoc is somewhat roundabout and doesn't say anything that makes me understand what a handle is, and what calling `createHandle`` multiple times does internally. i.e. I can get multiple handles but are they to the same \"door\" so to speak? Or are they handles to different \"doors\". From earlier conversation it's the latter, but it's not super clear here.\nThe type is not relevant, you can see it in the method signature.\nMaybe something like: \"createSpace\" where space is described as a newly initialised place to put data or something along those lines, @gmaretic what do you think?", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368640116", "createdAt": "2020-01-20T16:38:03Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the value\n+     * @param key                entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    Optional<V> get(EntryFamilyHandle entryFamilyHandle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the values\n+     * @param keys               representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(EntryFamilyHandle entryFamilyHandle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code entryFamilyHandle}.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param key                entry key\n+     * @param value              entry value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param toWrite            entry pairs to write\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a handle of type {@link EntryFamilyHandle} to the underlying store. Each call returns a new {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY3MDYyMA==", "bodyText": "I implemented the Handle solution, if @gmaretic agrees we'll proceed with it.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368670620", "createdAt": "2020-01-20T17:54:11Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the value\n+     * @param key                entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    Optional<V> get(EntryFamilyHandle entryFamilyHandle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the values\n+     * @param keys               representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(EntryFamilyHandle entryFamilyHandle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code entryFamilyHandle}.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param key                entry key\n+     * @param value              entry value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param toWrite            entry pairs to write\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a handle of type {@link EntryFamilyHandle} to the underlying store. Each call returns a new {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MDExNg=="}, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIyMTEwOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjozODozNFrOFfkBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzozNTo0NVrOFflemg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MDM3Ng==", "bodyText": "amend docs based on the above", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368640376", "createdAt": "2020-01-20T16:38:34Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the value\n+     * @param key                entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    Optional<V> get(EntryFamilyHandle entryFamilyHandle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the values\n+     * @param keys               representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(EntryFamilyHandle entryFamilyHandle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code entryFamilyHandle}.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param key                entry key\n+     * @param value              entry value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param toWrite            entry pairs to write\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a handle of type {@link EntryFamilyHandle} to the underlying store. Each call returns a new {@link\n+     * EntryFamilyHandle}.\n+     *\n+     * @return {@link EntryFamilyHandle} which represents a handle to the created entry family\n+     */\n+    EntryFamilyHandle createEntryFamily();\n+\n+    /**\n+     * Drops the entry family specified by the supplied handle. Dropping of a entry family may fail if there are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NDIxOA==", "bodyText": "Amended.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368664218", "createdAt": "2020-01-20T17:35:45Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    @Value.Immutable\n+    interface EntryFamilyHandle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the value\n+     * @param key                entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    Optional<V> get(EntryFamilyHandle entryFamilyHandle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param entryFamilyHandle handle to the entry family from which we want to retrieve the values\n+     * @param keys               representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(EntryFamilyHandle entryFamilyHandle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code entryFamilyHandle}.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param key                entry key\n+     * @param value              entry value\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param entryFamilyHandle of the store to which we should store the entry\n+     * @param toWrite            entry pairs to write\n+     * @throws SafeIllegalArgumentException when {@code entryFamilyHandle} is a handle to a non existing entry family\n+     */\n+    void put(EntryFamilyHandle entryFamilyHandle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a handle of type {@link EntryFamilyHandle} to the underlying store. Each call returns a new {@link\n+     * EntryFamilyHandle}.\n+     *\n+     * @return {@link EntryFamilyHandle} which represents a handle to the created entry family\n+     */\n+    EntryFamilyHandle createEntryFamily();\n+\n+    /**\n+     * Drops the entry family specified by the supplied handle. Dropping of a entry family may fail if there are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MDM3Ng=="}, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIzMTA1OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo0MTozN1rOFfkHcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzozNjowNlrOFflfIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MTkwNA==", "bodyText": "nit: move this next to cacheDescriptor.currentSize...", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368641904", "createdAt": "2020-01-20T16:41:37Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +156,45 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<Long, Long>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<Long, Long>, Void> apply(Set<Map.Entry<Long, Long>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n+                List<Long> toWrite = request.stream().map(Map.Entry::getKey).collect(Collectors.toList());\n                 Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n+                        cacheDescriptor.entryFamily(),\n                         toWrite);\n \n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                int sizeIncrease = Sets.difference(request, response.entrySet()).size();\n+                offHeapTimestampCache.timestampStore.put(cacheDescriptor.entryFamily(), ImmutableMap.copyOf(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NDM1NQ==", "bodyText": "I think I moved it to correct position. Please double check.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368664355", "createdAt": "2020-01-20T17:36:06Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +156,45 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<Long, Long>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<Long, Long>, Void> apply(Set<Map.Entry<Long, Long>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n+                List<Long> toWrite = request.stream().map(Map.Entry::getKey).collect(Collectors.toList());\n                 Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n+                        cacheDescriptor.entryFamily(),\n                         toWrite);\n \n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                int sizeIncrease = Sets.difference(request, response.entrySet()).size();\n+                offHeapTimestampCache.timestampStore.put(cacheDescriptor.entryFamily(), ImmutableMap.copyOf(request));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MTkwNA=="}, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIzMjY5OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo0MjoxMFrOFfkIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo0MjoxMFrOFfkIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MjE2Ng==", "bodyText": "curious whether\nKeyedStream.of(request.stream()).<Void>map(value -> null).collectToMap();\nworks?", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368642166", "createdAt": "2020-01-20T16:42:10Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +156,45 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<Long, Long>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<Long, Long>, Void> apply(Set<Map.Entry<Long, Long>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n+                List<Long> toWrite = request.stream().map(Map.Entry::getKey).collect(Collectors.toList());\n                 Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n+                        cacheDescriptor.entryFamily(),\n                         toWrite);\n \n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                int sizeIncrease = Sets.difference(request, response.entrySet()).size();\n+                offHeapTimestampCache.timestampStore.put(cacheDescriptor.entryFamily(), ImmutableMap.copyOf(request));\n+\n+                cacheDescriptor.currentSize().addAndGet(sizeIncrease);\n             } catch (SafeIllegalArgumentException exception) {\n                 // happens when a store is dropped by a concurrent call to clear\n                 log.warn(\"Clear called concurrently, writing failed\", exception);\n             } finally {\n                 offHeapTimestampCache.inflightRequests.clear();\n             }\n-            return KeyedStream.of(request.stream()).collectToMap();\n+            return KeyedStream.of(request.stream()).map(value -> (Void) null).collectToMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODIzOTQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/DefaultPhysicalPersistentStorageFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo0NDozMVrOFfkMmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo0NDozMVrOFfkMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MzIyNA==", "bodyText": "change the name of this class.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368643224", "createdAt": "2020-01-20T16:44:31Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/DefaultPhysicalPersistentStorageFactory.java", "diffHunk": "@@ -25,27 +25,29 @@\n import org.slf4j.LoggerFactory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+\n+import okio.ByteString;\n \n /**\n- * Constructs a new {@link PhysicalPersistentStore} with new persistent storage connection on each call of\n+ * Constructs a new {@link PersistentStore} with new persistent storage connection on each call of\n  * {@link DefaultPhysicalPersistentStorageFactory#constructPersistentStore(RocksDbPersistentStorageConfig)}.\n  */\n public final class DefaultPhysicalPersistentStorageFactory implements PhysicalPersistentStorageFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODI0NDEwOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/DefaultPhysicalPersistentStorageFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo0NjowMFrOFfkPXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzozNzowNFrOFflglA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MzkzNA==", "bodyText": "Can we just bite the bullet and call this rocks, either that or do the \"generification\" properly. The mix of the two is inconsistent and quite confusing. Probably a separate PR however.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368643934", "createdAt": "2020-01-20T16:46:00Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/DefaultPhysicalPersistentStorageFactory.java", "diffHunk": "@@ -25,27 +25,29 @@\n import org.slf4j.LoggerFactory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+\n+import okio.ByteString;\n \n /**\n- * Constructs a new {@link PhysicalPersistentStore} with new persistent storage connection on each call of\n+ * Constructs a new {@link PersistentStore} with new persistent storage connection on each call of\n  * {@link DefaultPhysicalPersistentStorageFactory#constructPersistentStore(RocksDbPersistentStorageConfig)}.\n  */\n public final class DefaultPhysicalPersistentStorageFactory implements PhysicalPersistentStorageFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2NDcyNA==", "bodyText": "I would do the visitor pattern in a following PR and leave it as is for now.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368664724", "createdAt": "2020-01-20T17:37:04Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/DefaultPhysicalPersistentStorageFactory.java", "diffHunk": "@@ -25,27 +25,29 @@\n import org.slf4j.LoggerFactory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+\n+import okio.ByteString;\n \n /**\n- * Constructs a new {@link PhysicalPersistentStore} with new persistent storage connection on each call of\n+ * Constructs a new {@link PersistentStore} with new persistent storage connection on each call of\n  * {@link DefaultPhysicalPersistentStorageFactory#constructPersistentStore(RocksDbPersistentStorageConfig)}.\n  */\n public final class DefaultPhysicalPersistentStorageFactory implements PhysicalPersistentStorageFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0MzkzNA=="}, "originalCommit": {"oid": "edddbd03ec0aac82d9c219711529b71b0f282506"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc0OTg2OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MjozOFrOFfo2zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MjozOFrOFfo2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTU2Nw==", "bodyText": "let's pair tomorrow, I'd like to clarify what this means", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368719567", "createdAt": "2020-01-20T20:42:38Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. Handle is linked with one underlying store space.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1160966ddc7f0c7d027cf6fc6a524353b34cbde9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc1MDcwOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MzoxNFrOFfo3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MzoxNFrOFfo3TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTY5Mw==", "bodyText": "nit: probably implied, but should say Keys which are not present in the store will not be included in the returned map.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368719693", "createdAt": "2020-01-20T20:43:14Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param handle handle to the store space from which we want to retrieve the value\n+     * @param key    entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    Optional<V> get(PersistentStore.Handle handle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1160966ddc7f0c7d027cf6fc6a524353b34cbde9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc1MTczOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0MzozOVrOFfo32w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOToyMzoyOFrOFgVOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTgzNQ==", "bodyText": "nit: spacey \ud83d\udc7d", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368719835", "createdAt": "2020-01-20T20:43:39Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param handle handle to the store space from which we want to retrieve the value\n+     * @param key    entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    Optional<V> get(PersistentStore.Handle handle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param handle handle to the store space\n+     * @param keys   representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(PersistentStore.Handle handle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * store space.\n+     *\n+     * @param handle of the store to which we should store the entry\n+     * @param key    entry key\n+     * @param value  entry value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    void put(PersistentStore.Handle handle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param handle  of the store space to which we should store the entry\n+     * @param toWrite entry pairs to write\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    void put(PersistentStore.Handle handle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a store space to be used to store key-value pairs. Each call creates a new store space.\n+     *\n+     * @return handle to the created store space\n+     */\n+    PersistentStore.Handle createSpace();\n+\n+    /**\n+     * Drops the store spacey specified by the supplied handle. Dropping of a store space may fail if there are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1160966ddc7f0c7d027cf6fc6a524353b34cbde9"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0NjU0NQ==", "bodyText": "\ud83d\udc68\u200d\ud83d\ude80", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369446545", "createdAt": "2020-01-22T09:23:28Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param handle handle to the store space from which we want to retrieve the value\n+     * @param key    entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    Optional<V> get(PersistentStore.Handle handle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param handle handle to the store space\n+     * @param keys   representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(PersistentStore.Handle handle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * store space.\n+     *\n+     * @param handle of the store to which we should store the entry\n+     * @param key    entry key\n+     * @param value  entry value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    void put(PersistentStore.Handle handle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param handle  of the store space to which we should store the entry\n+     * @param toWrite entry pairs to write\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    void put(PersistentStore.Handle handle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a store space to be used to store key-value pairs. Each call creates a new store space.\n+     *\n+     * @return handle to the created store space\n+     */\n+    PersistentStore.Handle createSpace();\n+\n+    /**\n+     * Drops the store spacey specified by the supplied handle. Dropping of a store space may fail if there are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTgzNQ=="}, "originalCommit": {"oid": "1160966ddc7f0c7d027cf6fc6a524353b34cbde9"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODc1MjcyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0NDoxN1rOFfo4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDo0NDoxN1rOFfo4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxOTk3MQ==", "bodyText": "nit: We should probably be consistent with the way we're describing what the role of the handle is.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r368719971", "createdAt": "2020-01-20T20:44:17Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PersistentStore<K, V> extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param handle handle to the store space from which we want to retrieve the value\n+     * @param key    entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    Optional<V> get(PersistentStore.Handle handle, @Nonnull K key);\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param handle handle to the store space\n+     * @param keys   representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<K, V> get(PersistentStore.Handle handle, List<K> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * store space.\n+     *\n+     * @param handle of the store to which we should store the entry\n+     * @param key    entry key\n+     * @param value  entry value\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    void put(PersistentStore.Handle handle, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param handle  of the store space to which we should store the entry\n+     * @param toWrite entry pairs to write\n+     * @throws SafeIllegalArgumentException when referencing a non existing store space\n+     */\n+    void put(PersistentStore.Handle handle, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a store space to be used to store key-value pairs. Each call creates a new store space.\n+     *\n+     * @return handle to the created store space\n+     */\n+    PersistentStore.Handle createSpace();\n+\n+    /**\n+     * Drops the store spacey specified by the supplied handle. Dropping of a store space may fail if there are\n+     * concurrent calls on the same store space or if the store space has already been dropped.\n+     *\n+     * @param handle handle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1160966ddc7f0c7d027cf6fc6a524353b34cbde9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDYwOTcxOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0MDo1MFrOFggyIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0MDo1MFrOFggyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNTg3Mg==", "bodyText": "typos", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369635872", "createdAt": "2020-01-22T15:40:50Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+import okio.ByteString;\n+\n+public interface PersistentStore extends AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDYxMzE0OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0MTo0MFrOFgg0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTowMjo1OVrOFg6XeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNjM5OA==", "bodyText": "put serde inside the thing that's actually talking to persistent store", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369636398", "createdAt": "2020-01-22T15:41:40Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +152,49 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<ByteString, ByteString>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<ByteString, ByteString>, Void> apply(Set<Map.Entry<ByteString, ByteString>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n-                Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n-                        toWrite);\n-\n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                List<ByteString> toWrite = request.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NTAzMg==", "bodyText": "Used inside.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370055032", "createdAt": "2020-01-23T11:02:59Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +152,49 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<ByteString, ByteString>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<ByteString, ByteString>, Void> apply(Set<Map.Entry<ByteString, ByteString>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n-                Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n-                        toWrite);\n-\n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                List<ByteString> toWrite = request.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNjM5OA=="}, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDYxODgxOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0MzowMlrOFgg3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOToyOTozOFrOFg3mig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNzI0NQ==", "bodyText": "Wasn't this class supposed to be generic? Bit confused here. Also deserializeValue key needs to be ByteString.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369637245", "createdAt": "2020-01-22T15:43:02Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +152,49 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<ByteString, ByteString>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<ByteString, ByteString>, Void> apply(Set<Map.Entry<ByteString, ByteString>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n-                Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n-                        toWrite);\n-\n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                List<ByteString> toWrite = request.stream()\n+                        .map(Map.Entry::getKey)\n+                        .collect(Collectors.toList());\n+                Map<ByteString, ByteString> response =\n+                        offHeapTimestampCache.persistentStore.get(cacheDescriptor.handle(), toWrite);\n+\n+                int sizeIncrease = Sets.difference(request, response.entrySet()).size();\n+                cacheDescriptor.currentSize().addAndGet(sizeIncrease);\n+                offHeapTimestampCache.persistentStore.put(cacheDescriptor.handle(), ImmutableMap.copyOf(request));\n             } catch (SafeIllegalArgumentException exception) {\n                 // happens when a store is dropped by a concurrent call to clear\n                 log.warn(\"Clear called concurrently, writing failed\", exception);\n-            } finally {\n-                offHeapTimestampCache.inflightRequests.clear();\n             }\n-            return KeyedStream.of(request.stream()).collectToMap();\n+            return KeyedStream.of(request.stream()).<Void>map(value -> null).collectToMap();\n         }\n     }\n \n+    interface EntryMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAwOTczOA==", "bodyText": "It is generic now.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370009738", "createdAt": "2020-01-23T09:29:38Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -154,47 +152,49 @@ private static MetricName constructCacheMetricName(String metricSuffix) {\n                 .build();\n     }\n \n-    private static class WriteBatcher\n-            implements CoalescingRequestFunction<Map.Entry<Long, Long>, Map.Entry<Long, Long>> {\n+    private static class WriteBatcher implements CoalescingRequestFunction<Map.Entry<ByteString, ByteString>, Void> {\n         OffHeapTimestampCache offHeapTimestampCache;\n \n         WriteBatcher(OffHeapTimestampCache offHeapTimestampCache) {\n             this.offHeapTimestampCache = offHeapTimestampCache;\n         }\n \n         @Override\n-        public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n+        public Map<Map.Entry<ByteString, ByteString>, Void> apply(Set<Map.Entry<ByteString, ByteString>> request) {\n             CacheDescriptor cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             if (cacheDescriptor.currentSize().get() >= offHeapTimestampCache.maxSize.getAsLong()) {\n                 offHeapTimestampCache.taggedMetricRegistry.counter(CACHE_NUKE).inc();\n                 offHeapTimestampCache.clear();\n             }\n             cacheDescriptor = offHeapTimestampCache.cacheDescriptor.get();\n             try {\n-                Map<Long, Long> response = offHeapTimestampCache.timestampStore.get(\n-                        cacheDescriptor.storeNamespace(),\n-                        request.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n-\n-                Map<Long, Long> toWrite = ImmutableMap.copyOf(Sets.difference(request, response.entrySet()));\n-                offHeapTimestampCache.timestampStore.put(\n-                        cacheDescriptor.storeNamespace(),\n-                        toWrite);\n-\n-                cacheDescriptor.currentSize().addAndGet(toWrite.size());\n+                List<ByteString> toWrite = request.stream()\n+                        .map(Map.Entry::getKey)\n+                        .collect(Collectors.toList());\n+                Map<ByteString, ByteString> response =\n+                        offHeapTimestampCache.persistentStore.get(cacheDescriptor.handle(), toWrite);\n+\n+                int sizeIncrease = Sets.difference(request, response.entrySet()).size();\n+                cacheDescriptor.currentSize().addAndGet(sizeIncrease);\n+                offHeapTimestampCache.persistentStore.put(cacheDescriptor.handle(), ImmutableMap.copyOf(request));\n             } catch (SafeIllegalArgumentException exception) {\n                 // happens when a store is dropped by a concurrent call to clear\n                 log.warn(\"Clear called concurrently, writing failed\", exception);\n-            } finally {\n-                offHeapTimestampCache.inflightRequests.clear();\n             }\n-            return KeyedStream.of(request.stream()).collectToMap();\n+            return KeyedStream.of(request.stream()).<Void>map(value -> null).collectToMap();\n         }\n     }\n \n+    interface EntryMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNzI0NQ=="}, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDYyMzIxOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampsEntryMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0NDoxMFrOFgg6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTozNzowOFrOFg31Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNzk1NQ==", "bodyText": "you probably want two separate things, one that's a ByteString-> Long entry mapper, and the other that's a Long,Long to Long,Long which \"deserialises\" the delta encoding.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369637955", "createdAt": "2020-01-22T15:44:10Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampsEntryMapper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.logsafe.Preconditions;\n+\n+import okio.ByteString;\n+\n+/**\n+ * Stores timestamps using delta encoding for commit timestamp.\n+ */\n+public class TimestampsEntryMapper implements OffHeapTimestampCache.EntryMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAxMzQ1MA==", "bodyText": "Separated.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370013450", "createdAt": "2020-01-23T09:37:08Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampsEntryMapper.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import javax.annotation.Nonnull;\n+\n+import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.logsafe.Preconditions;\n+\n+import okio.ByteString;\n+\n+/**\n+ * Stores timestamps using delta encoding for commit timestamp.\n+ */\n+public class TimestampsEntryMapper implements OffHeapTimestampCache.EntryMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYzNzk1NQ=="}, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDYzODg4OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0Nzo0NFrOFghDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0Nzo0NFrOFghDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MDMyNw==", "bodyText": "this should be a separate method, I initially thought this would be a thing that's called as a refreshable (which is weird). Then refer to it via a method reference.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369640327", "createdAt": "2020-01-22T15:47:44Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -531,11 +532,15 @@ static TimestampCache timestampCache(\n             AtlasDbConfig config,\n             MetricsManager metricsManager,\n             Supplier<AtlasDbRuntimeConfig> runtimeConfig,\n-            Optional<PhysicalPersistentStore> timestampStore) {\n+            Optional<PersistentStore> timestampStore) {\n         LongSupplier cacheSize = () -> runtimeConfig.get().getTimestampCacheSize();\n         Supplier<TimestampCache> timestampCacheSupplier = () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDY0MzE5OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNTo0ODo0NlrOFghGQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOToyOTo1MlrOFg3nAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MTAyNQ==", "bodyText": "just use id.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369641025", "createdAt": "2020-01-22T15:48:46Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+import okio.ByteString;\n+\n+public interface PersistentStore extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. A space of key-value pairs is analogous to a\n+     * PostgreSQL table of RocksdDb Column family. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MTU1NA==", "bodyText": "also have a static method that creates a new Handle by generating a random uuid.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369641554", "createdAt": "2020-01-22T15:49:38Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+import okio.ByteString;\n+\n+public interface PersistentStore extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. A space of key-value pairs is analogous to a\n+     * PostgreSQL table of RocksdDb Column family. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MTAyNQ=="}, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAwOTg1OA==", "bodyText": "Added.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370009858", "createdAt": "2020-01-23T09:29:52Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+import okio.ByteString;\n+\n+public interface PersistentStore extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. A space of key-value pairs is analogous to a\n+     * PostgreSQL table of RocksdDb Column family. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    interface Handle {\n+        UUID uniqueName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0MTAyNQ=="}, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDY4OTk4OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampsEntryMapperTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDoyN1rOFghjZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowMDoyN1rOFghjZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY0ODQ4NQ==", "bodyText": "nit:\nassertThatNullPointerException()\n  .isThrownBy(() -> ...);\nreads a bit better from left to right top to bottom", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r369648485", "createdAt": "2020-01-22T16:00:27Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampsEntryMapperTests.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.logsafe.exceptions.SafeNullPointerException;\n+\n+import okio.ByteString;\n+\n+public final class TimestampsEntryMapperTests {\n+    private static final ByteString KEY = ByteString.of(ValueType.VAR_LONG.convertFromJava(1L));\n+    private TimestampsEntryMapper timestampsEntryMapper = new TimestampsEntryMapper();\n+\n+    @Test\n+    public void keyCorrectlyMapped() {\n+        ByteString serializedKey = timestampsEntryMapper.serializeKey(1L);\n+        assertThat(serializedKey)\n+                .isEqualByComparingTo(KEY);\n+        assertThat(timestampsEntryMapper.deserializeKey(KEY))\n+                .isEqualTo(1L);\n+    }\n+\n+    @Test\n+    public void failsOnNulls() {\n+        assertThatThrownBy(() -> timestampsEntryMapper.deserializeKey(null))\n+                .isInstanceOf(SafeNullPointerException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2a9cc1e69fe17fb70dfba709e6113fbfe0b9dd9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzU3MzQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/DeltaEncodingTimestampEntryMapperTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjo1NzoxN1rOFg9Mwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyMDozMFrOFhCDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMTQ0Mg==", "bodyText": "it's not sufficient to test it like this, because there's nothing that says that the delta encoding is correct, only that when you serialise and deserialise it's correct.\nYou want something along the lines of a mock of the LongEntryMapper which receives delta encoded inputs, etc.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370101442", "createdAt": "2020-01-23T12:57:17Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/DeltaEncodingTimestampEntryMapperTests.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatNullPointerException;\n+\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.table.description.ValueType;\n+\n+import okio.ByteString;\n+\n+public final class DeltaEncodingTimestampEntryMapperTests {\n+    private final OffHeapTimestampCache.EntryMapper<Long, Long> mapper =\n+            new DeltaEncodingTimestampEntryMapper(new LongEntryMapper());\n+\n+    @Test\n+    public void failsOnNulls() {\n+        assertThatNullPointerException()\n+                .isThrownBy(() -> mapper.deserializeKey(null));\n+        assertThatNullPointerException()\n+                .isThrownBy(() -> mapper.deserializeValue(null, toByteString(4L)));\n+        assertThatNullPointerException()\n+                .isThrownBy(() -> mapper.deserializeValue(toByteString(2L), null));\n+    }\n+\n+    @Test\n+    public void encodedValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a1bb4ee863be30da4a7cfce6c92f291933bb12"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4MDkyMg==", "bodyText": "Refactored tests.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370180922", "createdAt": "2020-01-23T15:20:30Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/DeltaEncodingTimestampEntryMapperTests.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatNullPointerException;\n+\n+import org.junit.Test;\n+\n+import com.palantir.atlasdb.table.description.ValueType;\n+\n+import okio.ByteString;\n+\n+public final class DeltaEncodingTimestampEntryMapperTests {\n+    private final OffHeapTimestampCache.EntryMapper<Long, Long> mapper =\n+            new DeltaEncodingTimestampEntryMapper(new LongEntryMapper());\n+\n+    @Test\n+    public void failsOnNulls() {\n+        assertThatNullPointerException()\n+                .isThrownBy(() -> mapper.deserializeKey(null));\n+        assertThatNullPointerException()\n+                .isThrownBy(() -> mapper.deserializeValue(null, toByteString(4L)));\n+        assertThatNullPointerException()\n+                .isThrownBy(() -> mapper.deserializeValue(toByteString(2L), null));\n+    }\n+\n+    @Test\n+    public void encodedValue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEwMTQ0Mg=="}, "originalCommit": {"oid": "41a1bb4ee863be30da4a7cfce6c92f291933bb12"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzY4MTAwOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozMjo1OVrOFg-M4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNDowMDo0N1rOFg_HGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNzg1OA==", "bodyText": "on second thought this is weird, a persistent store is a property of a particular timestamp cache, to get things setup correctly you have a weird ternary setup. If you're going to put the timestamp store through which requires manual wiring, then you might as well setup the timestamp cache properly.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370117858", "createdAt": "2020-01-23T13:32:59Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -535,24 +532,26 @@ static TimestampCache timestampCache(\n             Optional<PersistentStore> timestampStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a1bb4ee863be30da4a7cfce6c92f291933bb12"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEzMjc2MQ==", "bodyText": "Reverted to original logic for setting up the cache.", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370132761", "createdAt": "2020-01-23T14:00:47Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -535,24 +532,26 @@ static TimestampCache timestampCache(\n             Optional<PersistentStore> timestampStore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNzg1OA=="}, "originalCommit": {"oid": "41a1bb4ee863be30da4a7cfce6c92f291933bb12"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzY4NTQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozNDoxOVrOFg-PjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozNDoxOVrOFg-PjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExODU0MA==", "bodyText": "move it into Handle", "url": "https://github.com/palantir/atlasdb/pull/4522#discussion_r370118540", "createdAt": "2020-01-23T13:34:19Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+import okio.ByteString;\n+\n+public interface PersistentStore extends AutoCloseable {\n+    /**\n+     * Represents a handle to the underlying space of key-value pairs. A space of key-value pairs is analogous to a\n+     * PostgreSQL table or RocksdDb column family. Handle is linked with one underlying store space.\n+     */\n+    @Value.Immutable\n+    @Value.Style(visibility = Value.Style.ImplementationVisibility.PACKAGE)\n+    interface Handle {\n+        UUID id();\n+    }\n+\n+    static Handle buildHandle() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a1bb4ee863be30da4a7cfce6c92f291933bb12"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2414, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}