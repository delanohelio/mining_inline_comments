{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTA2MjE5", "number": 4503, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNTowNlrODXrThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1NDoyNlrODX9A3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTUzMzQ5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNTowNlrOFdGoig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNTowNlrOFdGoig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MTcwNg==", "bodyText": "Some notes:\n\nshould we validate that the path is an absolute path?\nit feels this method should be private, unless I'm missing something.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366061706", "createdAt": "2020-01-13T22:25:06Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java", "diffHunk": "@@ -17,20 +17,43 @@\n package com.palantir.atlasdb.factory;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Comparator;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import com.google.common.base.MoreObjects;\n import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n+public final class PersistentStorages {\n     private static final Pattern UUID_PATTERN = Pattern.compile(\n             \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n \n     private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n \n-    private PersistentStorageFactories() {}\n+    private PersistentStorages() {}\n+\n+    /**\n+     * Given the {@code absolutePath} deletes all sub-folders, sub-files and the folder pointed by it.\n+     *\n+     * @param absolutePath which we want to delete\n+     * @throws IOException if there is an underlying exception\n+     */\n+    public static void deletePath(Path absolutePath) throws IOException {\n+        try (Stream<Path> stream = Files.walk(absolutePath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU0MzM3OnYy", "diffSide": "RIGHT", "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyODoyN1rOFdGuIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyODoyN1rOFdGuIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzEzNg==", "bodyText": "nit: indentation", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366063136", "createdAt": "2020-01-13T22:28:27Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb;\n+\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.cache.DefaultTimestampCache;\n+import com.palantir.atlasdb.cache.OffHeapTimestampCache;\n+import com.palantir.atlasdb.cache.TimestampCache;\n+import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ComparingTimestampCache implements TimestampCache {\n+    private final TimestampCache first;\n+    private final TimestampCache second;\n+\n+    public static TimestampCache comparingOffHeapForTests(\n+            MetricsManager metricRegistry,\n+            PersistentTimestampStore persistentTimestampStore) {\n+        TimestampCache first = new DefaultTimestampCache(\n+                metricRegistry.getRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n+\n+        TimestampCache second = OffHeapTimestampCache.create(\n+                persistentTimestampStore,\n+                metricRegistry.getTaggedRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU0NjU2OnYy", "diffSide": "RIGHT", "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyOTo1N1rOFdGwNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyOTo1N1rOFdGwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzY2OA==", "bodyText": "I would include as Args the start timestamp and commit timestamps reported by each of the services in this case, for easier debugging.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366063668", "createdAt": "2020-01-13T22:29:57Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb;\n+\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.cache.DefaultTimestampCache;\n+import com.palantir.atlasdb.cache.OffHeapTimestampCache;\n+import com.palantir.atlasdb.cache.TimestampCache;\n+import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ComparingTimestampCache implements TimestampCache {\n+    private final TimestampCache first;\n+    private final TimestampCache second;\n+\n+    public static TimestampCache comparingOffHeapForTests(\n+            MetricsManager metricRegistry,\n+            PersistentTimestampStore persistentTimestampStore) {\n+        TimestampCache first = new DefaultTimestampCache(\n+                metricRegistry.getRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n+\n+        TimestampCache second = OffHeapTimestampCache.create(\n+                persistentTimestampStore,\n+                metricRegistry.getTaggedRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n+        );\n+\n+        return new ComparingTimestampCache(first, second);\n+    }\n+\n+    private ComparingTimestampCache(TimestampCache first, TimestampCache second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+\n+    @Override\n+    public synchronized void clear() {\n+        first.clear();\n+        second.clear();\n+    }\n+\n+    @Override\n+    public synchronized void putAlreadyCommittedTransaction(Long startTimestamp, Long commitTimestamp) {\n+        first.putAlreadyCommittedTransaction(startTimestamp, commitTimestamp);\n+        second.putAlreadyCommittedTransaction(startTimestamp, commitTimestamp);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public synchronized Long getCommitTimestampIfPresent(Long startTimestamp) {\n+        Long firstCommitTimestamp = first.getCommitTimestampIfPresent(startTimestamp);\n+        Long secondCommitTimestamp = second.getCommitTimestampIfPresent(startTimestamp);\n+        if (firstCommitTimestamp == null || secondCommitTimestamp == null) {\n+            return Stream.of(firstCommitTimestamp, secondCommitTimestamp)\n+                    .filter(Objects::nonNull)\n+                    .findFirst()\n+                    .orElse(null);\n+        }\n+        Preconditions.checkState(firstCommitTimestamp.equals(secondCommitTimestamp),\n+                \"There is a bug in cache implementation\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU1NjAwOnYy", "diffSide": "RIGHT", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNDowNFrOFdG2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNDowNFrOFdG2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTE3Mw==", "bodyText": "nit: maybe readThenAbortStillCaches...? A ReadTransaction is something else, and could lead to confusion", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065173", "createdAt": "2020-01-13T22:34:04Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+    }\n+\n+    @Test\n+    public void readCachesWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            get(txn, TEST_TABLE, \"row\", \"column\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+    }\n+\n+    @Test\n+    public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+    }\n+\n+    @Test\n+    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU1ODU5OnYy", "diffSide": "RIGHT", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNToxN1rOFdG30A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNToxN1rOFdG30A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTYxNg==", "bodyText": "In general throughout this class, is isNotNull() really needed? I imagine the isEqualTo check should be good enough. Transaction#getTimestamp returns a primitive long, so non-null.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065616", "createdAt": "2020-01-13T22:35:17Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+    }\n+\n+    @Test\n+    public void readCachesWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            get(txn, TEST_TABLE, \"row\", \"column\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU1OTg0OnYy", "diffSide": "RIGHT", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNTo0NVrOFdG4lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNTo0NVrOFdG4lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTgxNQ==", "bodyText": "Might be cleaner in terms of minimum visibility to just return the timestamp from the transaction task.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065815", "createdAt": "2020-01-13T22:35:45Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU2NDIzOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNzo0NlrOFdG7UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjozNzo0NlrOFdG7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NjUxMw==", "bodyText": "I think we should test the logic in this class in this PR, especially since it's on a live path", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366066513", "createdAt": "2020-01-13T22:37:46Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +514,19 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    private TimestampCache getTimestampCache(\n+            MetricsManager metricsManager,\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n+            Optional<PersistentTimestampStore> persistentTimestampStore) {\n+        LongSupplier cacheSize = () -> runtimeConfigSupplier.get().getTimestampCacheSize();\n+        Supplier<TimestampCache> timestampCacheSupplier = () ->\n+                persistentTimestampStore.map(store ->\n+                        OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n+                        .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n+\n+        return config().timestampCache().orElseGet(timestampCacheSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDQyNzU0OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MjowM1rOFdiJEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMDoxN1rOFdjQJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjQwMg==", "bodyText": "nit: maybe constructPersistentTimestampStoreIfConfigured?", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366512402", "createdAt": "2020-01-14T18:52:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDU5OQ==", "bodyText": "Renamed.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530599", "createdAt": "2020-01-14T19:30:17Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjQwMg=="}, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDQyOTI4OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1MjozOFrOFdiKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMDoyMVrOFdjQRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjcwMQ==", "bodyText": "I would Preconditions.checkState this for readability (instead of the class cast exception you'd get if we ship a bug here)", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366512701", "createdAt": "2020-01-14T18:52:38Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+            AtlasDbConfig config,\n+            PersistentStorageFactory persistentStorageFactory,\n+            @Output List<AutoCloseable> closeables) {\n+        return initializeCloseable(\n+                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n+                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDYyOQ==", "bodyText": "Added.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530629", "createdAt": "2020-01-14T19:30:21Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+            AtlasDbConfig config,\n+            PersistentStorageFactory persistentStorageFactory,\n+            @Output List<AutoCloseable> closeables) {\n+        return initializeCloseable(\n+                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n+                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjcwMQ=="}, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDQzNDg3OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxODo1NDoyNlrOFdiNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMDoyNDowMlrOFdzlOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw==", "bodyText": "There's probably something around persistentTimestampStoreNotConstructedEvenIfConfiguredIfExplicitlyProvided, though I'm okay with passing on that if it's really hard to test.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366513587", "createdAt": "2020-01-14T18:54:26Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -714,6 +722,88 @@ public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled(\n         assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n     }\n \n+    @Test\n+    public void providedTimestampCacheOverridesAnyOtherConfig() {\n+        MetricRegistry metricRegistry = metricsManager.getRegistry();\n+        TimestampCache expectedTimestampCache = new DefaultTimestampCache(metricRegistry, () -> 10000L);\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .timestampCache(expectedTimestampCache)\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isSameAs(expectedTimestampCache);\n+    }\n+\n+    @Test\n+    public void usingInMemoryTimestampCache() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isInstanceOf(DefaultTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void usingPersistentStorage() throws IOException {\n+        File storageFolder = temporaryFolder.newFolder();\n+        String storagePath = Files.currentFolder().toPath()\n+                .relativize(storageFolder.toPath())\n+                .toString();\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .persistentStorage(\n+                        ImmutableRocksDbPersistentStorageConfig.builder()\n+                                .storagePath(storagePath)\n+                                .build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentTimestampStore);\n+\n+        assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void persistentTimestampStoreNotConstructed() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        assertThat(persistentTimestampStore)\n+                .isEmpty();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDczMw==", "bodyText": "Will be resolved in a following PR.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530733", "createdAt": "2020-01-14T19:30:35Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -714,6 +722,88 @@ public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled(\n         assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n     }\n \n+    @Test\n+    public void providedTimestampCacheOverridesAnyOtherConfig() {\n+        MetricRegistry metricRegistry = metricsManager.getRegistry();\n+        TimestampCache expectedTimestampCache = new DefaultTimestampCache(metricRegistry, () -> 10000L);\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .timestampCache(expectedTimestampCache)\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isSameAs(expectedTimestampCache);\n+    }\n+\n+    @Test\n+    public void usingInMemoryTimestampCache() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isInstanceOf(DefaultTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void usingPersistentStorage() throws IOException {\n+        File storageFolder = temporaryFolder.newFolder();\n+        String storagePath = Files.currentFolder().toPath()\n+                .relativize(storageFolder.toPath())\n+                .toString();\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .persistentStorage(\n+                        ImmutableRocksDbPersistentStorageConfig.builder()\n+                                .storagePath(storagePath)\n+                                .build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentTimestampStore);\n+\n+        assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void persistentTimestampStoreNotConstructed() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        assertThat(persistentTimestampStore)\n+                .isEmpty();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw=="}, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc5ODEzNw==", "bodyText": "After discussing offline we decided that if the config is provided the persistent storage is initialized so this is not useful anymore.", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366798137", "createdAt": "2020-01-15T10:24:02Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -714,6 +722,88 @@ public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled(\n         assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n     }\n \n+    @Test\n+    public void providedTimestampCacheOverridesAnyOtherConfig() {\n+        MetricRegistry metricRegistry = metricsManager.getRegistry();\n+        TimestampCache expectedTimestampCache = new DefaultTimestampCache(metricRegistry, () -> 10000L);\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .timestampCache(expectedTimestampCache)\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isSameAs(expectedTimestampCache);\n+    }\n+\n+    @Test\n+    public void usingInMemoryTimestampCache() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isInstanceOf(DefaultTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void usingPersistentStorage() throws IOException {\n+        File storageFolder = temporaryFolder.newFolder();\n+        String storagePath = Files.currentFolder().toPath()\n+                .relativize(storageFolder.toPath())\n+                .toString();\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .persistentStorage(\n+                        ImmutableRocksDbPersistentStorageConfig.builder()\n+                                .storagePath(storagePath)\n+                                .build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentTimestampStore);\n+\n+        assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void persistentTimestampStoreNotConstructed() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        assertThat(persistentTimestampStore)\n+                .isEmpty();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw=="}, "originalCommit": {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2395, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}