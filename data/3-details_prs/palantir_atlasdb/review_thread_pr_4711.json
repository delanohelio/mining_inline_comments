{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MjU2ODgz", "number": 4711, "reviewThreads": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyNjoxNVrODycEvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxOTozNlrOD4ZTyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjE1MzU4OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/ExceptionHandlingRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyNjoxNVrOGGe0cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDoyNjoxNVrOGGe0cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ0OTU4Ng==", "bodyText": "This class is copied from bottom of SnapshotTransactionManager - probably want to merge the two (if I can find a place where it makes sense to live in the project hierarchy).", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r409449586", "createdAt": "2020-04-16T10:26:15Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/ExceptionHandlingRunner.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.v2;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+\n+public final class ExceptionHandlingRunner implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f246f24630aecd97841ab1191cd73d8a76a2e1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjE4NzgzOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozNToxNVrOGGfJOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDozNToxNVrOGGfJOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ1NDkwNA==", "bodyText": "I need to spend a bit of time confirming what these do and determine the most efficient way to do this.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r409454904", "createdAt": "2020-04-16T10:35:15Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockService.java", "diffHunk": "@@ -78,6 +89,21 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n         return timestampContainer;\n     }\n \n+    // pretty weird, I haven't put much effort into this, just to plug the gap really\n+    private <T, R> T checkAndUpdateLowerBoundBatch(Supplier<T> timestampContainerSupplier,\n+            Function<T, List<R>> responseExtractor,\n+            ToLongFunction<R> lowerBoundExtractor,\n+            ToLongFunction<R> upperBoundExtractor) {\n+        long threadLocalLowerBound = lowerBound.get();\n+        T timestampContainers = timestampContainerSupplier.get();\n+        List<R> responses = responseExtractor.apply(timestampContainers);\n+        responses.forEach(timestampContainer -> {\n+            checkTimestamp(threadLocalLowerBound, lowerBoundExtractor.applyAsLong(timestampContainer));\n+            updateLowerBound(upperBoundExtractor.applyAsLong(timestampContainer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd559d34b3508f8d60707bb338666e299b5ee5dd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjIxMTc0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTowOToxOFrOGHGJ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyOToxMFrOGKE7aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NDA1OQ==", "bodyText": "We can probably optimise this in the batched case (only update once), if that is a performance concern.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r410094059", "createdAt": "2020-04-17T09:09:18Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch responses =\n+                timelockService.startIdentifiedAtlasDbTransactionsBatch(conditions.size())) {\n+            if (responses.size() != conditions.size()) {\n+                throw new TransactionBatchFailedRetriableException(\n+                        \"The number of transactions started does not match the size of the batch.\");\n+            }\n+\n+            List<TransactionAndImmutableTsLock> transactions = Streams.zip(\n+                    responses.getResponses().stream(),\n+                    conditions.stream(),\n+                    (response, condition) -> wrapResponse(condition, response)).collect(Collectors.toList());\n+            return responses.successful(transactions);\n+        }\n+    }\n+\n+    private TransactionAndImmutableTsLock wrapResponse(PreCommitCondition condition,\n+            StartIdentifiedAtlasDbTransactionResponse transactionResponse) {\n+        LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n+        long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+        recordImmutableTimestamp(immutableTs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034408c8d419931c04d1200a003cb6ad0b36719a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MTg3NA==", "bodyText": "@jeremyk-91 to help verify; also probably need metrics to help answer this", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413081874", "createdAt": "2020-04-22T15:26:33Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch responses =\n+                timelockService.startIdentifiedAtlasDbTransactionsBatch(conditions.size())) {\n+            if (responses.size() != conditions.size()) {\n+                throw new TransactionBatchFailedRetriableException(\n+                        \"The number of transactions started does not match the size of the batch.\");\n+            }\n+\n+            List<TransactionAndImmutableTsLock> transactions = Streams.zip(\n+                    responses.getResponses().stream(),\n+                    conditions.stream(),\n+                    (response, condition) -> wrapResponse(condition, response)).collect(Collectors.toList());\n+            return responses.successful(transactions);\n+        }\n+    }\n+\n+    private TransactionAndImmutableTsLock wrapResponse(PreCommitCondition condition,\n+            StartIdentifiedAtlasDbTransactionResponse transactionResponse) {\n+        LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n+        long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+        recordImmutableTimestamp(immutableTs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NDA1OQ=="}, "originalCommit": {"oid": "034408c8d419931c04d1200a003cb6ad0b36719a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxOTY5MQ==", "bodyText": "Hard to say: this does a single atomic CAS so it shouldn't be too bad. Maybe just have a method wrapResponses that does the atomic update just once (with either the max of the immutable timestamps across the list, if we choose to be defensive, or the first element, if we want to rely on how creating batches normally goes)?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413219691", "createdAt": "2020-04-22T18:29:10Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch responses =\n+                timelockService.startIdentifiedAtlasDbTransactionsBatch(conditions.size())) {\n+            if (responses.size() != conditions.size()) {\n+                throw new TransactionBatchFailedRetriableException(\n+                        \"The number of transactions started does not match the size of the batch.\");\n+            }\n+\n+            List<TransactionAndImmutableTsLock> transactions = Streams.zip(\n+                    responses.getResponses().stream(),\n+                    conditions.stream(),\n+                    (response, condition) -> wrapResponse(condition, response)).collect(Collectors.toList());\n+            return responses.successful(transactions);\n+        }\n+    }\n+\n+    private TransactionAndImmutableTsLock wrapResponse(PreCommitCondition condition,\n+            StartIdentifiedAtlasDbTransactionResponse transactionResponse) {\n+        LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n+        long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+        recordImmutableTimestamp(immutableTs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NDA1OQ=="}, "originalCommit": {"oid": "034408c8d419931c04d1200a003cb6ad0b36719a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjkzMzQ3OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NDoyOVrOGJ63Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOToyMzozNFrOGMZc_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NDgwNg==", "bodyText": "What does \"for the tasks\" mean?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413054806", "createdAt": "2020-04-22T14:54:29Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -433,6 +434,17 @@ default LockWatchManager getLockWatchManager() {\n     @Timed\n     TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n \n+    /**\n+     * This method exposes the ability to start a batch of transactions with pre-commit conditions in a single call.\n+     * The result is similar to calling {@link #setupRunTaskWithConditionThrowOnConflict(PreCommitCondition)}, except\n+     * the code has been specifically optimised with respect to batching and error handling.\n+     *\n+     * @return a list of transactions and their associated immutable timestamp locks for the tasks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY1MzExNg==", "bodyText": "Read the javadoc for the old method - was simply mirroring what was said there but in plural form.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r415653116", "createdAt": "2020-04-27T09:23:34Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -433,6 +434,17 @@ default LockWatchManager getLockWatchManager() {\n     @Timed\n     TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n \n+    /**\n+     * This method exposes the ability to start a batch of transactions with pre-commit conditions in a single call.\n+     * The result is similar to calling {@link #setupRunTaskWithConditionThrowOnConflict(PreCommitCondition)}, except\n+     * the code has been specifically optimised with respect to batching and error handling.\n+     *\n+     * @return a list of transactions and their associated immutable timestamp locks for the tasks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NDgwNg=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzAxNzM0OnYy", "diffSide": "RIGHT", "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTowOToyOFrOGJ7p8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTowOToyOFrOGJ7p8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2Nzc2Mg==", "bodyText": "Refactor this check to a method.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413067762", "createdAt": "2020-04-22T15:09:28Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -86,11 +89,31 @@ private static ThreadFactory createThreadFactory(String safeLoggablePurpose) {\n     public ListenableFuture<R> apply(T argument) {\n         Preconditions.checkState(!closed, \"Autobatcher is already shut down\");\n         DisruptorFuture<R> result = new DisruptorFuture<R>(safeLoggablePurpose);\n-        buffer.publishEvent((refresh, sequence) -> {\n+        buffer.publishEvent(createTranslator(argument, result));\n+        return result;\n+    }\n+\n+    public List<ListenableFuture<R>> applyBatch(List<T> arguments) {\n+        Preconditions.checkState(!closed, \"Autobatcher is already shut down\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzAyNDU4OnYy", "diffSide": "RIGHT", "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToxMDo1MFrOGJ7uZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToxMDo1MFrOGJ7uZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA2ODkwMA==", "bodyText": "Tests for this method, and I suppose for this whole class? The batching code is tricky, so definitely need tests for batching code.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413068900", "createdAt": "2020-04-22T15:10:50Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -86,11 +89,31 @@ private static ThreadFactory createThreadFactory(String safeLoggablePurpose) {\n     public ListenableFuture<R> apply(T argument) {\n         Preconditions.checkState(!closed, \"Autobatcher is already shut down\");\n         DisruptorFuture<R> result = new DisruptorFuture<R>(safeLoggablePurpose);\n-        buffer.publishEvent((refresh, sequence) -> {\n+        buffer.publishEvent(createTranslator(argument, result));\n+        return result;\n+    }\n+\n+    public List<ListenableFuture<R>> applyBatch(List<T> arguments) {\n+        Preconditions.checkState(!closed, \"Autobatcher is already shut down\");\n+        List<ListenableFuture<R>> results = new ArrayList<>();\n+\n+        EventTranslator<DefaultBatchElement<T, R>>[] translators = arguments.stream().map(argument -> {\n+            DisruptorFuture<R> result = new DisruptorFuture<>(safeLoggablePurpose);\n+            EventTranslator<DefaultBatchElement<T, R>> translator = createTranslator(argument, result);\n+            results.add(result);\n+            return translator;\n+        }).toArray(EventTranslator[]::new);\n+\n+        buffer.publishEvents(translators);\n+\n+        return results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzAzODUzOnYy", "diffSide": "RIGHT", "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToxMzoyOFrOGJ72-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOToyNTozMVrOGMZiEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3MTA5OQ==", "bodyText": "Would it be a lot of overhead for removing the non-batched method here?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413071099", "createdAt": "2020-04-22T15:13:28Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -86,11 +89,31 @@ private static ThreadFactory createThreadFactory(String safeLoggablePurpose) {\n     public ListenableFuture<R> apply(T argument) {\n         Preconditions.checkState(!closed, \"Autobatcher is already shut down\");\n         DisruptorFuture<R> result = new DisruptorFuture<R>(safeLoggablePurpose);\n-        buffer.publishEvent((refresh, sequence) -> {\n+        buffer.publishEvent(createTranslator(argument, result));\n+        return result;\n+    }\n+\n+    public List<ListenableFuture<R>> applyBatch(List<T> arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY1NDQxNw==", "bodyText": "I think so - it is used in quite a few places.\nWe could instead just have apply call applyBatch instead.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r415654417", "createdAt": "2020-04-27T09:25:31Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -86,11 +89,31 @@ private static ThreadFactory createThreadFactory(String safeLoggablePurpose) {\n     public ListenableFuture<R> apply(T argument) {\n         Preconditions.checkState(!closed, \"Autobatcher is already shut down\");\n         DisruptorFuture<R> result = new DisruptorFuture<R>(safeLoggablePurpose);\n-        buffer.publishEvent((refresh, sequence) -> {\n+        buffer.publishEvent(createTranslator(argument, result));\n+        return result;\n+    }\n+\n+    public List<ListenableFuture<R>> applyBatch(List<T> arguments) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3MTA5OQ=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzA0MTExOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToxMzo1OFrOGJ74ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToxMzo1OFrOGJ74ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3MTUxOA==", "bodyText": "Again, would it make sense to only keep the batched method? count=1 should be simple to handle.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413071518", "createdAt": "2020-04-22T15:13:58Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockService.java", "diffHunk": "@@ -67,6 +68,13 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n                 r -> r.startTimestampAndPartition().timestamp());\n     }\n \n+    @Override\n+    public StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzA3MjA2OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/main/java/com/palantir/util/ExceptionHandlingRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMDowMFrOGJ8LzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMDowMFrOGJ8LzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3NjQyOQ==", "bodyText": "Running close should be enforced to only ever happen once. Also you should probably not allow adding more callbacks after close is called.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413076429", "createdAt": "2020-04-22T15:20:00Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-commons/src/main/java/com/palantir/util/ExceptionHandlingRunner.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+\n+/**\n+ * Runs runnables and suppliers that may throw exceptions, and swallows those exceptions until later. Can be used as a\n+ * resource in a try block, or delegated to by another resource.\n+ */\n+public final class ExceptionHandlingRunner implements AutoCloseable {\n+    private final List<Throwable> failures = new ArrayList<>();\n+\n+    public ExceptionHandlingRunner() {}\n+\n+    /**\n+     * Instantiates the runner with a throwable that has already been caught, to be rethrown when close is complete.\n+     */\n+    public ExceptionHandlingRunner(Throwable t) {\n+        failures.add(t);\n+    }\n+\n+    public void runSafely(Runnable shutdownCallback) {\n+        try {\n+            shutdownCallback.run();\n+        } catch (Throwable throwable) {\n+            failures.add(throwable);\n+        }\n+    }\n+\n+    public <T> Optional<T> supplySafely(Supplier<T> shutdownCallback) {\n+        try {\n+            return Optional.of(shutdownCallback.get());\n+        } catch (Throwable throwable) {\n+            failures.add(throwable);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    /**\n+     * Calling close with no failures should be a no-op; equally, calling close multiple times will re-throw a runtime\n+     * exception with the same suppressed errors (plus any additional errors suppressed since the last close call).\n+     */\n+    @Override\n+    public void close() {\n+        if (!failures.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzA3OTkyOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMToyNlrOGJ8Qcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMToyNlrOGJ8Qcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3NzYxOQ==", "bodyText": "2 arguments of the same type, wink wink \ud83d\ude09", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413077619", "createdAt": "2020-04-22T15:21:26Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockService.java", "diffHunk": "@@ -67,6 +68,13 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n                 r -> r.startTimestampAndPartition().timestamp());\n     }\n \n+    @Override\n+    public StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        return checkAndUpdateLowerBound(() -> delegate.startIdentifiedAtlasDbTransactionsBatch(count),\n+                StartIdentifiedAtlasDbTransactionResponseBatch::getMinTimestamp,\n+                StartIdentifiedAtlasDbTransactionResponseBatch::getMaxTimestamp);\n+    }\n+\n     private <T> T checkAndUpdateLowerBound(Supplier<T> timestampContainerSupplier,\n             ToLongFunction<T> lowerBoundExtractor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzA4ODE3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMzowNVrOGJ8Vrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyMzowNVrOGJ8Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA3ODk1OA==", "bodyText": "Generally it's nicer to allow fall through like this (so allow empty list), I think this is what the usage of this in internal ski product assumed.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413078958", "createdAt": "2020-04-22T15:23:05Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzA5ODU0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyNTowM1rOGJ8cHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyNTowM1rOGJ8cHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MDYwNQ==", "bodyText": "This feels like a weird thing to check, the method you call should not return you a small response, that doesn't feel like a great API.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413080605", "createdAt": "2020-04-22T15:25:03Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch responses =\n+                timelockService.startIdentifiedAtlasDbTransactionsBatch(conditions.size())) {\n+            if (responses.size() != conditions.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzEwMjI4OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyNTo0NFrOGJ8ecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoyNDoyNFrOGJ_UGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MTIwMA==", "bodyText": "Shouldn't this method or something lower from here retry this instead? Feels like a bad thing to ask the users of this API to handle.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413081200", "createdAt": "2020-04-22T15:25:44Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch responses =\n+                timelockService.startIdentifiedAtlasDbTransactionsBatch(conditions.size())) {\n+            if (responses.size() != conditions.size()) {\n+                throw new TransactionBatchFailedRetriableException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyNzcwNQ==", "bodyText": "Either I'm missing something, or we don't currently perform any retries in the old method - I was following suit in this one (but that can be changed if that is our desired behaviour, i.e. to retry on certain exceptions).", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413127705", "createdAt": "2020-04-22T16:24:24Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        Preconditions.checkArgument(!conditions.isEmpty(), \"Trying to start an empty batch\");\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch responses =\n+                timelockService.startIdentifiedAtlasDbTransactionsBatch(conditions.size())) {\n+            if (responses.size() != conditions.size()) {\n+                throw new TransactionBatchFailedRetriableException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MTIwMA=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzExNzU5OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyODozMVrOGJ8nfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjozNDo0OFrOGN8uCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MzUxOQ==", "bodyText": "Thoughts on returning something like TransactionAndImmutableTsLock, but that additionally has some sort of close method that users of this can call instead of using #finishRunTaskWithLockThrowOnConflict?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413083519", "createdAt": "2020-04-22T15:28:31Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3OTQ5OA==", "bodyText": "I think I won't do that in this PR - we can maybe do that improvement in a separate task.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417279498", "createdAt": "2020-04-29T12:34:48Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);\n         } catch (Throwable e) {\n             timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n             throw Throwables.rewrapAndThrowUncheckedException(e);\n         }\n     }\n \n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4MzUxOQ=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzEyMjYyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyOToyM1rOGJ8qfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyOToyM1rOGJ8qfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4NDI4NQ==", "bodyText": "Should be @deprecated", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413084285", "createdAt": "2020-04-22T15:29:23Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -433,6 +434,17 @@ default LockWatchManager getLockWatchManager() {\n     @Timed\n     TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n \n+    /**\n+     * This method exposes the ability to start a batch of transactions with pre-commit conditions in a single call.\n+     * The result is similar to calling {@link #setupRunTaskWithConditionThrowOnConflict(PreCommitCondition)}, except\n+     * the code has been specifically optimised with respect to batching and error handling.\n+     *\n+     * @return a list of transactions and their associated immutable timestamp locks for the tasks\n+     */\n+    @Timed\n+    List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzEyNTEyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyOTo1MVrOGJ8sEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNToyOTo1MVrOGJ8sEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4NDY4OQ==", "bodyText": "Please document that PreCommitConditions do not get cleaned up on errors.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413084689", "createdAt": "2020-04-22T15:29:51Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -433,6 +434,17 @@ default LockWatchManager getLockWatchManager() {\n     @Timed\n     TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n \n+    /**\n+     * This method exposes the ability to start a batch of transactions with pre-commit conditions in a single call.\n+     * The result is similar to calling {@link #setupRunTaskWithConditionThrowOnConflict(PreCommitCondition)}, except\n+     * the code has been specifically optimised with respect to batching and error handling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzEzMzc2OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozMToyMVrOGJ8xNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozMToyMVrOGJ8xNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4NjAwNA==", "bodyText": "We need to remove this method, since it is only supposed to be used by internal ski product.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413086004", "createdAt": "2020-04-22T15:31:21Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -433,6 +434,17 @@ default LockWatchManager getLockWatchManager() {\n     @Timed\n     TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE0NDE0OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozMzoxOFrOGJ83cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozMzoxOFrOGJ83cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4NzYwMQ==", "bodyText": "Please check that this code you're moving is covered by extensive tests first, especially around resource cleanup on errors.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413087601", "createdAt": "2020-04-22T15:33:18Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -166,26 +169,50 @@ public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(Pr\n         StartIdentifiedAtlasDbTransactionResponse transactionResponse\n                 = timelockService.startIdentifiedAtlasDbTransaction();\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n+            return wrapResponse(condition, transactionResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE1NTkyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/LockRefresher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozNTozMFrOGJ8-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMzoyNFrOGPKicg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4OTQwNw==", "bodyText": "Again, how bad would it be to only have the batched method?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413089407", "createdAt": "2020-04-22T15:35:30Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockRefresher.java", "diffHunk": "@@ -85,6 +85,10 @@ public void registerLock(LockToken token) {\n         tokensToRefresh.add(token);\n     }\n \n+    public void registerLocks(Collection<LockToken> tokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NDQ4Mg==", "bodyText": "Checked that no one uses this", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418554482", "createdAt": "2020-05-01T14:03:24Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/LockRefresher.java", "diffHunk": "@@ -85,6 +85,10 @@ public void registerLock(LockToken token) {\n         tokensToRefresh.add(token);\n     }\n \n+    public void registerLocks(Collection<LockToken> tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA4OTQwNw=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE2MTY1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/ProfilingTimelockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozNjozOFrOGJ9CFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozNjozOFrOGJ9CFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5MDMyNA==", "bodyText": "Batched method only.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413090324", "createdAt": "2020-04-22T15:36:38Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/ProfilingTimelockService.java", "diffHunk": "@@ -116,6 +117,12 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n         return runTaskTimed(\"startIdentifiedAtlasDbTransaction\", delegate::startIdentifiedAtlasDbTransaction);\n     }\n \n+    @Override\n+    public StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        return runTaskTimed(\"startIdentifiedAtlasDbTransactionsBatch\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE2Nzc0OnYy", "diffSide": "RIGHT", "path": "lock-impl/src/main/java/com/palantir/lock/impl/LegacyTimelockService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozNzo0OFrOGJ9FyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzowMzowN1rOGKBIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5MTI3Mg==", "bodyText": "Only batched method", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413091272", "createdAt": "2020-04-22T15:37:48Z", "author": {"login": "jkozlowski"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LegacyTimelockService.java", "diffHunk": "@@ -123,6 +125,21 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n         }\n     }\n \n+    @Override\n+    public StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNzAzNA==", "bodyText": "Oh wait this is legacy; @jeremyk-91 this is mostly unused now right so don't need to worry about perf?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413107034", "createdAt": "2020-04-22T15:57:12Z", "author": {"login": "jkozlowski"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LegacyTimelockService.java", "diffHunk": "@@ -123,6 +125,21 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n         }\n     }\n \n+    @Override\n+    public StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5MTI3Mg=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NzU3Mg==", "bodyText": "Fine by me: this is largely used in embedded contexts. There is large internal product, but in any case the algorithm here is not really worse than what people will probably end up writing anyway", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413157572", "createdAt": "2020-04-22T17:03:07Z", "author": {"login": "jeremyk-91"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LegacyTimelockService.java", "diffHunk": "@@ -123,6 +125,21 @@ public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransacti\n         }\n     }\n \n+    @Override\n+    public StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5MTI3Mg=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE3NzMzOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozOTozNVrOGJ9LdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTozOTozNVrOGJ9LdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5MjcyNA==", "bodyText": "Batched only.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413092724", "createdAt": "2020-04-22T15:39:35Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzE5MzYxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo0MjozMlrOGJ9U-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzo1MDozN1rOGKDPtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NTE2MA==", "bodyText": "Can someone explain why do we have this bizarre interface here with passing nulls?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413095160", "createdAt": "2020-04-22T15:42:32Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NzQ1Ng==", "bodyText": "Hmm, I guess we sometimes need to pass an actual argument here.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413097456", "createdAt": "2020-04-22T15:45:19Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NTE2MA=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwMjQ0Ng==", "bodyText": "I think there's an argument for rewriting this to pass actual number of requested transactions to start? So that internal ski product's disruptors would actually become extremely tiny! Then the batch processor could just count number of transactions requested across the batch and send that to timelock?\n\nwe would save on a bunch of allocations for futures and lists for args here\nWe would get rid of the weird \"null\" passing of arguments?\n\n@jeremyk-91 interested in your thoughts", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413102446", "createdAt": "2020-04-22T15:51:27Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NTE2MA=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMzk1NQ==", "bodyText": "Would you mean that, instead of passing null, you pass in say count, and then the autobatcher batches several counts together into a larger batch and fans those out? If so, that would definitely reduce the size of the autobatcher (or at least, the ring buffer underneath).", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413123955", "createdAt": "2020-04-22T16:19:28Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NTE2MA=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE5MjExOQ==", "bodyText": "Rewriting to add numbers makes sense - as noted null is just because we need to pass something. This isn't really a thing raw AtlasDB users would think about as much, but I see how it's useful in ski product (though let's do that in a separate self-contained piece please)", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413192119", "createdAt": "2020-04-22T17:50:37Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA5NTE2MA=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzI0NDAyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1MTo0OVrOGJ9yqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1MTo0OVrOGJ9yqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwMjc2MA==", "bodyText": "Yeah, this is hopefully unnecessary.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413102760", "createdAt": "2020-04-22T15:51:49Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch.Builder batchBuilder =\n+                new StartIdentifiedAtlasDbTransactionResponseBatch.Builder(response ->\n+                        unlock(ImmutableSet.of(response.immutableTimestamp().getLock())))) {\n+            List<Void> inputs = IntStream.range(0, count).mapToObj($ -> (Void) null).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzI2MTA4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1NToxNVrOGJ987Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyMDoxMFrOGKkKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNTM4OQ==", "bodyText": "So in this class we call #getStartTransactionResponses which is obviously already batched. But it's implementation can call timelock multiple times, without any cleanup of resources between calls: @jeremyk-91 does StartIdentifiedAtlasDbTransactionResponse not require any cleanup if we fail mid batch in this method?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413105389", "createdAt": "2020-04-22T15:55:15Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch.Builder batchBuilder =\n+                new StartIdentifiedAtlasDbTransactionResponseBatch.Builder(response ->\n+                        unlock(ImmutableSet.of(response.immutableTimestamp().getLock())))) {\n+            List<Void> inputs = IntStream.range(0, count).mapToObj($ -> (Void) null).collect(Collectors.toList());\n+            autobatcher.applyBatch(inputs).forEach(\n+                    response -> batchBuilder.safeAddToBatch(() -> AtlasFutures.getUnchecked(response)));\n+            return batchBuilder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyMTkyMw==", "bodyText": "The purpose of the Batch class is that if this does fail midway, we will call unlock (hence the passing in of the closing callback on line 80), unless you are referring to something else?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413121923", "createdAt": "2020-04-22T16:16:38Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch.Builder batchBuilder =\n+                new StartIdentifiedAtlasDbTransactionResponseBatch.Builder(response ->\n+                        unlock(ImmutableSet.of(response.immutableTimestamp().getLock())))) {\n+            List<Void> inputs = IntStream.range(0, count).mapToObj($ -> (Void) null).collect(Collectors.toList());\n+            autobatcher.applyBatch(inputs).forEach(\n+                    response -> batchBuilder.safeAddToBatch(() -> AtlasFutures.getUnchecked(response)));\n+            return batchBuilder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNTM4OQ=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMDExMA==", "bodyText": "The timestamps are safe to drop on the floor, so the main thing we'd need to worry about here is the immutable timestamp lock, which you've handled.\nI think @jkozlowski is asking about the impl of the existing getStartTransactionResponses method.\nThis is a good spot, and a bit of a spicy one: that method has a bug, though it is mostly benign. It does forget to unlock locks it may have taken on its way to completion, but as it is is unlikely to actively cause problems beyond delaying targeted sweep by 20 seconds. The failure mode is of course batch 1 succeeding but not having enough transactions, and batch 2 failing. In this case we still hold the locks, but they haven't been registered in the lock refresher yet so they go away after the lock timeout (20 seconds).\nSo this should be fixed, and it's probably an interesting one to do separately, but probably not a massive priority.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413230110", "createdAt": "2020-04-22T18:44:44Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch.Builder batchBuilder =\n+                new StartIdentifiedAtlasDbTransactionResponseBatch.Builder(response ->\n+                        unlock(ImmutableSet.of(response.immutableTimestamp().getLock())))) {\n+            List<Void> inputs = IntStream.range(0, count).mapToObj($ -> (Void) null).collect(Collectors.toList());\n+            autobatcher.applyBatch(inputs).forEach(\n+                    response -> batchBuilder.safeAddToBatch(() -> AtlasFutures.getUnchecked(response)));\n+            return batchBuilder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNTM4OQ=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMTQ4Mw==", "bodyText": "Cool, I added tracking for this, we'll fix this next.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413731483", "createdAt": "2020-04-23T11:20:10Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch.Builder batchBuilder =\n+                new StartIdentifiedAtlasDbTransactionResponseBatch.Builder(response ->\n+                        unlock(ImmutableSet.of(response.immutableTimestamp().getLock())))) {\n+            List<Void> inputs = IntStream.range(0, count).mapToObj($ -> (Void) null).collect(Collectors.toList());\n+            autobatcher.applyBatch(inputs).forEach(\n+                    response -> batchBuilder.safeAddToBatch(() -> AtlasFutures.getUnchecked(response)));\n+            return batchBuilder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNTM4OQ=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzI2NDIyOnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/TimelockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1NTo1MFrOGJ9-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1NTo1MFrOGJ9-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNTg5Mw==", "bodyText": "Again, batched only.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413105893", "createdAt": "2020-04-22T15:55:50Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/TimelockService.java", "diffHunk": "@@ -53,6 +53,8 @@ default boolean isInitialized() {\n \n     WaitForLocksResponse waitForLocks(WaitForLocksRequest request);\n \n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzI3NTAxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1Nzo1NVrOGJ-FYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNTo1Nzo1NVrOGJ-FYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEwNzU1NA==", "bodyText": "What's the cost of this #unlock call here, should it be batched?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413107554", "createdAt": "2020-04-22T15:57:55Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -70,12 +71,17 @@ static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEve\n     }\n \n     StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n+        return AtlasFutures.getUnchecked(autobatcher.apply(null));\n+    }\n+\n+    StartIdentifiedAtlasDbTransactionResponseBatch startIdentifiedAtlasDbTransactionsBatch(int count) {\n+        try (StartIdentifiedAtlasDbTransactionResponseBatch.Builder batchBuilder =\n+                new StartIdentifiedAtlasDbTransactionResponseBatch.Builder(response ->\n+                        unlock(ImmutableSet.of(response.immutableTimestamp().getLock())))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTQzOTc1OnYy", "diffSide": "RIGHT", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartIdentifiedAtlasDbTransactionResponseBatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToxODo0MFrOGKkG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjowODoxMFrOGKl5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMDU0Nw==", "bodyText": "This isn't entirely safe implementation: if someone later decides to add something other than the response.ifPresent below here, you'll leak. You should somehow tie the below line to the supplySafely", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413730547", "createdAt": "2020-04-23T11:18:40Z", "author": {"login": "jkozlowski"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartIdentifiedAtlasDbTransactionResponseBatch.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.util.ExceptionHandlingRunner;\n+\n+public final class StartIdentifiedAtlasDbTransactionResponseBatch implements AutoCloseable {\n+\n+    private final List<StartIdentifiedAtlasDbTransactionResponse> responses;\n+    private final Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner;\n+    private boolean closed;\n+    private final long minTimestamp;\n+    private final long maxTimestamp;\n+\n+    private StartIdentifiedAtlasDbTransactionResponseBatch(List<StartIdentifiedAtlasDbTransactionResponse> responses,\n+            Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner) {\n+        // This will only be called if the builder is built without any attempts at adding responses\n+        Preconditions.checkState(!responses.isEmpty(),\n+                \"Batch created with no transaction responses - something has gone wrong\");\n+        this.responses = responses;\n+        this.cleaner = cleaner;\n+        this.closed = false;\n+        List<Long> timestamps = responses\n+                .stream()\n+                .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n+                .collect(Collectors.toList());\n+        this.minTimestamp = Collections.min(timestamps);\n+        this.maxTimestamp = Collections.max(timestamps);\n+    }\n+\n+    public int size() {\n+        return responses.size();\n+    }\n+\n+    public List<StartIdentifiedAtlasDbTransactionResponse> getResponses() {\n+        return responses;\n+    }\n+\n+    public <R> R successful(R value) {\n+        closed = true;\n+        return value;\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (!closed) {\n+            try (ExceptionHandlingRunner closer = new ExceptionHandlingRunner()) {\n+                responses.forEach(resource -> closer.runSafely(() -> cleaner.accept(resource)));\n+            }\n+        }\n+    }\n+\n+    public long getMinTimestamp() {\n+        return minTimestamp;\n+    }\n+\n+    public long getMaxTimestamp() {\n+        return maxTimestamp;\n+    }\n+\n+    public static class Builder implements AutoCloseable {\n+        private final List<StartIdentifiedAtlasDbTransactionResponse> responses = new ArrayList<>();\n+        private final ExceptionHandlingRunner runner = new ExceptionHandlingRunner();\n+        private final Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner;\n+\n+        public Builder(Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner) {\n+            this.cleaner = cleaner;\n+        }\n+\n+        public void safeAddToBatch(\n+                Supplier<StartIdentifiedAtlasDbTransactionResponse> supplier) {\n+            Optional<StartIdentifiedAtlasDbTransactionResponse> response = runner.supplySafely(supplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc1OTgzOA==", "bodyText": "As in:\nrunner.runSafely(() -> { BlahResponse x = supplier.get(); responses.add(x); });?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r413759838", "createdAt": "2020-04-23T12:08:10Z", "author": {"login": "Jolyon-S"}, "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartIdentifiedAtlasDbTransactionResponseBatch.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.v2;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.util.ExceptionHandlingRunner;\n+\n+public final class StartIdentifiedAtlasDbTransactionResponseBatch implements AutoCloseable {\n+\n+    private final List<StartIdentifiedAtlasDbTransactionResponse> responses;\n+    private final Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner;\n+    private boolean closed;\n+    private final long minTimestamp;\n+    private final long maxTimestamp;\n+\n+    private StartIdentifiedAtlasDbTransactionResponseBatch(List<StartIdentifiedAtlasDbTransactionResponse> responses,\n+            Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner) {\n+        // This will only be called if the builder is built without any attempts at adding responses\n+        Preconditions.checkState(!responses.isEmpty(),\n+                \"Batch created with no transaction responses - something has gone wrong\");\n+        this.responses = responses;\n+        this.cleaner = cleaner;\n+        this.closed = false;\n+        List<Long> timestamps = responses\n+                .stream()\n+                .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n+                .collect(Collectors.toList());\n+        this.minTimestamp = Collections.min(timestamps);\n+        this.maxTimestamp = Collections.max(timestamps);\n+    }\n+\n+    public int size() {\n+        return responses.size();\n+    }\n+\n+    public List<StartIdentifiedAtlasDbTransactionResponse> getResponses() {\n+        return responses;\n+    }\n+\n+    public <R> R successful(R value) {\n+        closed = true;\n+        return value;\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (!closed) {\n+            try (ExceptionHandlingRunner closer = new ExceptionHandlingRunner()) {\n+                responses.forEach(resource -> closer.runSafely(() -> cleaner.accept(resource)));\n+            }\n+        }\n+    }\n+\n+    public long getMinTimestamp() {\n+        return minTimestamp;\n+    }\n+\n+    public long getMaxTimestamp() {\n+        return maxTimestamp;\n+    }\n+\n+    public static class Builder implements AutoCloseable {\n+        private final List<StartIdentifiedAtlasDbTransactionResponse> responses = new ArrayList<>();\n+        private final ExceptionHandlingRunner runner = new ExceptionHandlingRunner();\n+        private final Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner;\n+\n+        public Builder(Consumer<StartIdentifiedAtlasDbTransactionResponse> cleaner) {\n+            this.cleaner = cleaner;\n+        }\n+\n+        public void safeAddToBatch(\n+                Supplier<StartIdentifiedAtlasDbTransactionResponse> supplier) {\n+            Optional<StartIdentifiedAtlasDbTransactionResponse> response = runner.supplySafely(supplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMDU0Nw=="}, "originalCommit": {"oid": "8c616629f5c7011f455ad4b4c729020cd59e521d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU1MDk5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0MTozNlrOGN1L0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0MTozNlrOGN1L0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NjA1MQ==", "bodyText": "Test, will fixup later.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417156051", "createdAt": "2020-04-29T08:41:36Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/timelock/TimestampCorroboratingTimelockServiceTest.java", "diffHunk": "@@ -71,14 +72,28 @@ public void getFreshTimestampsShouldFail() {\n     @Test\n     public void startIdentifiedAtlasDbTransactionShouldFail() {\n         StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransactionResponse =\n-                StartIdentifiedAtlasDbTransactionResponse.of(LOCK_IMMUTABLE_TIMESTAMP_RESPONSE,\n-                        TimestampAndPartition.of(1L, 0));\n+                makeResponse(1L);\n \n-        when(rawTimelockService.startIdentifiedAtlasDbTransaction())\n-                .thenReturn(startIdentifiedAtlasDbTransactionResponse);\n+        when(rawTimelockService.startIdentifiedAtlasDbTransactionBatch(1))\n+                .thenReturn(ImmutableList.of(startIdentifiedAtlasDbTransactionResponse));\n \n-        assertThrowsOnSecondCall(() -> timelockService.startIdentifiedAtlasDbTransaction());\n+        assertThrowsOnSecondCall(() -> timelockService.startIdentifiedAtlasDbTransactionBatch(1));\n     }\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d34e92bb5d5939222674ecdba17f309e065903"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU2NTk3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0NToyOVrOGN1VGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0NToyOVrOGN1VGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1ODQyNQ==", "bodyText": "The interesting thing here is that I've moved away from doing the approach requiring a specialised object, and I believe the reason it is OK to do so is:\n\nThe batch will either be in one piece from TransactionStarter or it won't (and therefore will have thrown itself);\nIf we fail mid-batch, we still unlock all of them - and there is only a single call, so we don't have to handle cases where the closing itself fails midway, because it either fails or succeeds.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417158425", "createdAt": "2020-04-29T08:45:29Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -163,29 +168,52 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n \n     @Override\n     public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+        return Iterables.getOnlyElement(setupRunTaskBatchWithConditionThrowOnConflict(ImmutableList.of(condition)));\n+    }\n+\n+    @Override\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n-            recordImmutableTimestamp(immutableTs);\n-\n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n-        } catch (Throwable e) {\n-            timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n-            throw Throwables.rewrapAndThrowUncheckedException(e);\n+            return wrapResponseBatch(conditions, responses);\n+        } catch (Throwable t) {\n+            timelockService.tryUnlock(\n+                    responses.stream()\n+                            .map(response -> response.immutableTimestamp().getLock())\n+                            .collect(Collectors.toSet()));\n+            throw Throwables.rewrapAndThrowUncheckedException(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d34e92bb5d5939222674ecdba17f309e065903"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU4NTM4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1MDoyNlrOGN1gkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1MDoyNlrOGN1gkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTM2Mw==", "bodyText": "This code is a bit messy, for sure - but more a proof of concept of how it would work.\nShould definitely go in its own PR.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417161363", "createdAt": "2020-04-29T08:50:26Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -138,16 +131,21 @@ public void close() {\n     }\n \n     @VisibleForTesting\n-    static Consumer<List<BatchElement<Void, StartIdentifiedAtlasDbTransactionResponse>>> consumer(\n+    static Consumer<List<BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>>>> consumer(\n             LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n         return batch -> {\n-            int numTransactions = batch.size();\n+            int numTransactions = batch.stream().map(BatchElement::argument).reduce(0, Integer::sum);\n \n             List<StartIdentifiedAtlasDbTransactionResponse> startTransactionResponses =\n                     getStartTransactionResponses(lockLeaseService, lockWatchEventCache, numTransactions);\n \n-            for (int i = 0; i < numTransactions; i++) {\n-                batch.get(i).result().set(startTransactionResponses.get(i));\n+            int start = 0;\n+            int end;\n+            for (BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> batchElement\n+                    : batch) {\n+                end = start + batchElement.argument();\n+                batchElement.result().set(startTransactionResponses.subList(start, end));\n+                start = end;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d9751180ad9c90656bbc59275048234162816c1"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU4OTU1OnYy", "diffSide": "RIGHT", "path": "lock-impl/src/main/java/com/palantir/lock/impl/LegacyTimelockService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1MToyN1rOGN1jAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1MToyN1rOGN1jAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTk4Ng==", "bodyText": "Again, this is now a single call, so there is no handling for what happens if there is a failure half-way through closing, as such a failure cannot occur.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417161986", "createdAt": "2020-04-29T08:51:27Z", "author": {"login": "Jolyon-S"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LegacyTimelockService.java", "diffHunk": "@@ -107,15 +109,17 @@ public LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     @Override\n-    public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        LockImmutableTimestampResponse immutableTimestamp = lockImmutableTimestamp();\n+    public List<StartIdentifiedAtlasDbTransactionResponse> startIdentifiedAtlasDbTransactionBatch(int count) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses = new ArrayList<>();\n         try {\n-            return StartIdentifiedAtlasDbTransactionResponse.of(\n-                    immutableTimestamp,\n-                    TimestampAndPartition.of(getFreshTimestamp(), 0));\n+            IntStream.range(0, count).forEach(\n+                    $ -> responses.add(StartIdentifiedAtlasDbTransactionResponse.of(lockImmutableTimestamp(),\n+                            TimestampAndPartition.of(getFreshTimestamp(), 0))));\n+            return responses;\n         } catch (RuntimeException | Error throwable) {\n             try {\n-                unlock(ImmutableSet.of(immutableTimestamp.getLock()));\n+                unlock(responses.stream().map(response -> response.immutableTimestamp().getLock()).collect(\n+                        Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d9751180ad9c90656bbc59275048234162816c1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjA3NjcxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxNzozN1rOGN6RAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1ODozMFrOGPKatw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzOTI5Ng==", "bodyText": "Haven't looked at puncher in a while, so unclear if you can do this once for the whole batch same as immutable timestamp.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417239296", "createdAt": "2020-04-29T11:17:37Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -162,27 +168,40 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n     }\n \n     @Override\n-    public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+            long immutableTs = Collections.max(responses.stream()\n+                    .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n+                    .collect(Collectors.toList()));\n             recordImmutableTimestamp(immutableTs);\n \n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n-        } catch (Throwable e) {\n-            timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n-            throw Throwables.rewrapAndThrowUncheckedException(e);\n+            return Streams.zip(\n+                    responses.stream(),\n+                    conditions.stream(),\n+                    (response, condition) -> {\n+                        LockToken immutableTsLock = response.immutableTimestamp().getLock();\n+                        cleaner.punch(response.startTimestampAndPartition().timestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4MzUxNw==", "bodyText": "From the javadoc:\n * Indicate that the given timestamp has just been created. This must be called frequently\n * (preferably on each transaction commit) so that the Cleaner can keep track of the\n * wall-clock/timestamp mapping. If it is never called, semantically nothing goes wrong, but the\n * sweeper won't sweep, since it cannot know what things are old enough to be swept.\n\nI interpret this as something we could conceivably do once per batch. @jeremyk-91 to sanity check that.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417283517", "createdAt": "2020-04-29T12:41:45Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -162,27 +168,40 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n     }\n \n     @Override\n-    public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+            long immutableTs = Collections.max(responses.stream()\n+                    .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n+                    .collect(Collectors.toList()));\n             recordImmutableTimestamp(immutableTs);\n \n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n-        } catch (Throwable e) {\n-            timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n-            throw Throwables.rewrapAndThrowUncheckedException(e);\n+            return Streams.zip(\n+                    responses.stream(),\n+                    conditions.stream(),\n+                    (response, condition) -> {\n+                        LockToken immutableTsLock = response.immutableTimestamp().getLock();\n+                        cleaner.punch(response.startTimestampAndPartition().timestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzOTI5Ng=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MjUwMw==", "bodyText": "Once per batch is fine, yep. Right now this is being called on every element right? I'd suggest we move it out and stick it next to the recordImmutableTimestamp", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418552503", "createdAt": "2020-05-01T13:58:30Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -162,27 +168,40 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n     }\n \n     @Override\n-    public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+            long immutableTs = Collections.max(responses.stream()\n+                    .map(response -> response.immutableTimestamp().getImmutableTimestamp())\n+                    .collect(Collectors.toList()));\n             recordImmutableTimestamp(immutableTs);\n \n-            cleaner.punch(transactionResponse.startTimestampAndPartition().timestamp());\n-            Supplier<Long> startTimestampSupplier = Suppliers.ofInstance(\n-                    transactionResponse.startTimestampAndPartition().timestamp());\n-\n-            Transaction transaction = createTransaction(\n-                    immutableTs,\n-                    startTimestampSupplier,\n-                    immutableTsLock,\n-                    condition);\n-            return TransactionAndImmutableTsLock.of(transaction, immutableTsLock);\n-        } catch (Throwable e) {\n-            timelockService.tryUnlock(ImmutableSet.of(transactionResponse.immutableTimestamp().getLock()));\n-            throw Throwables.rewrapAndThrowUncheckedException(e);\n+            return Streams.zip(\n+                    responses.stream(),\n+                    conditions.stream(),\n+                    (response, condition) -> {\n+                        LockToken immutableTsLock = response.immutableTimestamp().getLock();\n+                        cleaner.punch(response.startTimestampAndPartition().timestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzOTI5Ng=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjA3OTY2OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxODoyN1rOGN6SsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxODoyN1rOGN6SsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIzOTcyOA==", "bodyText": "I quite like this, it's just an unwrapping and you're done. You could have a private method for setup*, but I'm not fussed either way.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417239728", "createdAt": "2020-04-29T11:18:27Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -153,7 +158,8 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n         checkOpen();\n         try {\n             TransactionAndImmutableTsLock txAndLock =\n-                    runTimed(() -> setupRunTaskWithConditionThrowOnConflict(condition), \"setupTask\");\n+                    runTimed(() -> Iterables.getOnlyElement(\n+                            setupRunTaskBatchWithConditionThrowOnConflict(ImmutableList.of(condition))), \"setupTask\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjA4MzI1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/ProfilingTimelockService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToxOTozNVrOGN6U3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowNzozMVrOGN97uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MDI4NQ==", "bodyText": "You need to propagate the count?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417240285", "createdAt": "2020-04-29T11:19:35Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/ProfilingTimelockService.java", "diffHunk": "@@ -112,8 +113,8 @@ public LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     @Override\n-    public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        return runTaskTimed(\"startIdentifiedAtlasDbTransaction\", delegate::startIdentifiedAtlasDbTransaction);\n+    public List<StartIdentifiedAtlasDbTransactionResponse> startIdentifiedAtlasDbTransactionBatch(int count) {\n+        return runTaskTimed(\"startIdentifiedAtlasDbTransactionBatch\", () -> delegate.startIdentifiedAtlasDbTransactionBatch(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI5OTM4NA==", "bodyText": "Good catch - autoreplaced the code and I obviously missed this.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417299384", "createdAt": "2020-04-29T13:07:31Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/ProfilingTimelockService.java", "diffHunk": "@@ -112,8 +113,8 @@ public LockImmutableTimestampResponse lockImmutableTimestamp() {\n     }\n \n     @Override\n-    public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        return runTaskTimed(\"startIdentifiedAtlasDbTransaction\", delegate::startIdentifiedAtlasDbTransaction);\n+    public List<StartIdentifiedAtlasDbTransactionResponse> startIdentifiedAtlasDbTransactionBatch(int count) {\n+        return runTaskTimed(\"startIdentifiedAtlasDbTransactionBatch\", () -> delegate.startIdentifiedAtlasDbTransactionBatch(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MDI4NQ=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjA5MTE2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TimeLockClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyMjoxNFrOGN6Z5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoxMDozNVrOGN-DBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MTU3NA==", "bodyText": "You're relying on this not throwing. I think it's fine in this refactoring, but need to track fixing this, same as the other bug.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417241574", "createdAt": "2020-04-29T11:22:14Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TimeLockClient.java", "diffHunk": "@@ -88,16 +91,19 @@ public TimestampRange getFreshTimestamps(int numTimestampsRequested) {\n     @Override\n     public LockImmutableTimestampResponse lockImmutableTimestamp() {\n         LockImmutableTimestampResponse response = executeOnTimeLock(delegate::lockImmutableTimestamp);\n-        lockRefresher.registerLock(response.getLock());\n+        lockRefresher.registerLocks(ImmutableList.of(response.getLock()));\n         return response;\n     }\n \n     @Override\n-    public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        StartIdentifiedAtlasDbTransactionResponse response = executeOnTimeLock(\n-                delegate::startIdentifiedAtlasDbTransaction);\n-        lockRefresher.registerLock(response.immutableTimestamp().getLock());\n-        return response;\n+    public List<StartIdentifiedAtlasDbTransactionResponse> startIdentifiedAtlasDbTransactionBatch(int count) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses = executeOnTimeLock(\n+                () -> delegate.startIdentifiedAtlasDbTransactionBatch(count));\n+        lockRefresher.registerLocks(responses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMTI1Mw==", "bodyText": "Either the whole batch will return OK, or will throw as a whole - because of how the delegate does so. So yes, there is an outcome where half of the batch completes before throwing, and thus we have locks that we have not registeredor unlocked, but as noted above that is a separate issue.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417301253", "createdAt": "2020-04-29T13:10:35Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TimeLockClient.java", "diffHunk": "@@ -88,16 +91,19 @@ public TimestampRange getFreshTimestamps(int numTimestampsRequested) {\n     @Override\n     public LockImmutableTimestampResponse lockImmutableTimestamp() {\n         LockImmutableTimestampResponse response = executeOnTimeLock(delegate::lockImmutableTimestamp);\n-        lockRefresher.registerLock(response.getLock());\n+        lockRefresher.registerLocks(ImmutableList.of(response.getLock()));\n         return response;\n     }\n \n     @Override\n-    public StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        StartIdentifiedAtlasDbTransactionResponse response = executeOnTimeLock(\n-                delegate::startIdentifiedAtlasDbTransaction);\n-        lockRefresher.registerLock(response.immutableTimestamp().getLock());\n-        return response;\n+    public List<StartIdentifiedAtlasDbTransactionResponse> startIdentifiedAtlasDbTransactionBatch(int count) {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses = executeOnTimeLock(\n+                () -> delegate.startIdentifiedAtlasDbTransactionBatch(count));\n+        lockRefresher.registerLocks(responses", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0MTU3NA=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjExMDM5OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMToyODozMVrOGN6lpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowNTozMVrOGPKl7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NDU4MA==", "bodyText": "This is a bit sucky, since we're having to allocate Integers, while disruptor is optimised for that and reuses the actual instances of arguments, but I don't think it's worth obsessing about this. @jeremyk-91", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417244580", "createdAt": "2020-04-29T11:28:31Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -45,38 +44,32 @@\n  * A service responsible for coalescing multiple start transaction calls into a single start transactions call. This\n  * service also handles creating {@link LockTokenShare}'s to enable multiple transactions sharing a single immutable\n  * timestamp.\n- *\n+ * <p>\n  * Callers of this class should use {@link #unlock(Set)} and {@link #refreshLockLeases(Set)} for returned lock tokens,\n  * rather than directly calling delegate lock service.\n  */\n final class TransactionStarter implements AutoCloseable {\n-    private final DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher;\n+    private final DisruptorAutobatcher<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> autobatcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NTM3Mg==", "bodyText": "fair enough. I think we have metrics for this? If we look at the delta between the rpc clients and setupRunTask... and that explodes that should give us a hint that this might be relevant.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418555372", "createdAt": "2020-05-01T14:05:31Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -45,38 +44,32 @@\n  * A service responsible for coalescing multiple start transaction calls into a single start transactions call. This\n  * service also handles creating {@link LockTokenShare}'s to enable multiple transactions sharing a single immutable\n  * timestamp.\n- *\n+ * <p>\n  * Callers of this class should use {@link #unlock(Set)} and {@link #refreshLockLeases(Set)} for returned lock tokens,\n  * rather than directly calling delegate lock service.\n  */\n final class TransactionStarter implements AutoCloseable {\n-    private final DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher;\n+    private final DisruptorAutobatcher<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> autobatcher;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NDU4MA=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjExNzcwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTozMDo0OFrOGN6pzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTozMDo0OFrOGN6pzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NTY0NQ==", "bodyText": "Probably want a test what happens when you push 0 here. Also should throw on negative.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417245645", "createdAt": "2020-04-29T11:30:48Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -45,38 +44,32 @@\n  * A service responsible for coalescing multiple start transaction calls into a single start transactions call. This\n  * service also handles creating {@link LockTokenShare}'s to enable multiple transactions sharing a single immutable\n  * timestamp.\n- *\n+ * <p>\n  * Callers of this class should use {@link #unlock(Set)} and {@link #refreshLockLeases(Set)} for returned lock tokens,\n  * rather than directly calling delegate lock service.\n  */\n final class TransactionStarter implements AutoCloseable {\n-    private final DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher;\n+    private final DisruptorAutobatcher<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> autobatcher;\n     private final LockLeaseService lockLeaseService;\n \n     private TransactionStarter(\n-            DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher,\n+            DisruptorAutobatcher<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> autobatcher,\n             LockLeaseService lockLeaseService) {\n         this.autobatcher = autobatcher;\n         this.lockLeaseService = lockLeaseService;\n     }\n \n     static TransactionStarter create(LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n-        DisruptorAutobatcher<Void, StartIdentifiedAtlasDbTransactionResponse> autobatcher = Autobatchers\n+        DisruptorAutobatcher<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> autobatcher = Autobatchers\n                 .independent(consumer(lockLeaseService, lockWatchEventCache))\n                 .safeLoggablePurpose(\"transaction-starter\")\n                 .build();\n         return new TransactionStarter(autobatcher,\n                 lockLeaseService);\n     }\n \n-    StartIdentifiedAtlasDbTransactionResponse startIdentifiedAtlasDbTransaction() {\n-        try {\n-            return autobatcher.apply(null).get();\n-        } catch (ExecutionException e) {\n-            throw Throwables.throwUncheckedException(e.getCause());\n-        } catch (Throwable t) {\n-            throw Throwables.throwUncheckedException(t);\n-        }\n+    List<StartIdentifiedAtlasDbTransactionResponse> startIdentifiedAtlasDbTransactionBatch(int count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjEyMjQ0OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTozMjowNFrOGN6scQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNzowNlrOGPMhSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NjMyMQ==", "bodyText": "Hmm, just think very carefully about what this subList does here. @jeremyk-91", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417246321", "createdAt": "2020-04-29T11:32:04Z", "author": {"login": "jkozlowski"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -138,16 +131,20 @@ public void close() {\n     }\n \n     @VisibleForTesting\n-    static Consumer<List<BatchElement<Void, StartIdentifiedAtlasDbTransactionResponse>>> consumer(\n+    static Consumer<List<BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>>>> consumer(\n             LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n         return batch -> {\n-            int numTransactions = batch.size();\n+            int numTransactions = batch.stream().map(BatchElement::argument).reduce(0, Integer::sum);\n \n             List<StartIdentifiedAtlasDbTransactionResponse> startTransactionResponses =\n                     getStartTransactionResponses(lockLeaseService, lockWatchEventCache, numTransactions);\n \n-            for (int i = 0; i < numTransactions; i++) {\n-                batch.get(i).result().set(startTransactionResponses.get(i));\n+            int start = 0;\n+            for (BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> batchElement\n+                    : batch) {\n+                int end = start + batchElement.argument();\n+                batchElement.result().set(startTransactionResponses.subList(start, end));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxODM2MQ==", "bodyText": "Yes, since all of the returned lists are a view of the original list startTransactionResponses, we can get ConcurrentModificationExceptions or other such things if the lists returned are abused (i.e. elements are removed). I don't think this will be a problem given that we don't do that, but we could change this to return a fresh list for each result if it is a concern.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417318361", "createdAt": "2020-04-29T13:35:07Z", "author": {"login": "Jolyon-S"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -138,16 +131,20 @@ public void close() {\n     }\n \n     @VisibleForTesting\n-    static Consumer<List<BatchElement<Void, StartIdentifiedAtlasDbTransactionResponse>>> consumer(\n+    static Consumer<List<BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>>>> consumer(\n             LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n         return batch -> {\n-            int numTransactions = batch.size();\n+            int numTransactions = batch.stream().map(BatchElement::argument).reduce(0, Integer::sum);\n \n             List<StartIdentifiedAtlasDbTransactionResponse> startTransactionResponses =\n                     getStartTransactionResponses(lockLeaseService, lockWatchEventCache, numTransactions);\n \n-            for (int i = 0; i < numTransactions; i++) {\n-                batch.get(i).result().set(startTransactionResponses.get(i));\n+            int start = 0;\n+            for (BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> batchElement\n+                    : batch) {\n+                int end = start + batchElement.argument();\n+                batchElement.result().set(startTransactionResponses.subList(start, end));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NjMyMQ=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4Njk1NA==", "bodyText": "@Jolyon-S The tricky thing here is that subList keeps a reference to the original list, so the entire response will remain live in terms of memory as long as any consumer keeps a reference to their chunk of the list. This looks like it would probably be safe from tracing through the code, but I'd prefer to just create a new list in case there's something silly around threads contending over updateAndGet() or things like that.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418586954", "createdAt": "2020-05-01T15:17:06Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -138,16 +131,20 @@ public void close() {\n     }\n \n     @VisibleForTesting\n-    static Consumer<List<BatchElement<Void, StartIdentifiedAtlasDbTransactionResponse>>> consumer(\n+    static Consumer<List<BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>>>> consumer(\n             LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n         return batch -> {\n-            int numTransactions = batch.size();\n+            int numTransactions = batch.stream().map(BatchElement::argument).reduce(0, Integer::sum);\n \n             List<StartIdentifiedAtlasDbTransactionResponse> startTransactionResponses =\n                     getStartTransactionResponses(lockLeaseService, lockWatchEventCache, numTransactions);\n \n-            for (int i = 0; i < numTransactions; i++) {\n-                batch.get(i).result().set(startTransactionResponses.get(i));\n+            int start = 0;\n+            for (BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>> batchElement\n+                    : batch) {\n+                int end = start + batchElement.argument();\n+                batchElement.result().set(startTransactionResponses.subList(start, end));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI0NjMyMQ=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjM4MDYzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/service/WriteBatchingTransactionService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjo0Njo1NVrOGN9J_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMjowMFrOGPKgNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NjY1NA==", "bodyText": "Just want to check that this simple substitution still makes sense in the context above.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r417286654", "createdAt": "2020-04-29T12:46:55Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/service/WriteBatchingTransactionService.java", "diffHunk": "@@ -123,7 +123,7 @@ public void close() {\n      *\n      * Retrying does theoretically mean that in the worst case with N transactions in our batch, we may actually\n      * require N calls to the database, though this is extremely unlikely especially because of the semantics of\n-     * {@link TimelockService#startIdentifiedAtlasDbTransaction()}.\n+     * {@link TimelockService#startIdentifiedAtlasDbTransactionBatch(int)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MzkwOQ==", "bodyText": "Yep, still correct.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418553909", "createdAt": "2020-05-01T14:02:00Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/service/WriteBatchingTransactionService.java", "diffHunk": "@@ -123,7 +123,7 @@ public void close() {\n      *\n      * Retrying does theoretically mean that in the worst case with N transactions in our batch, we may actually\n      * require N calls to the database, though this is extremely unlikely especially because of the semantics of\n-     * {@link TimelockService#startIdentifiedAtlasDbTransaction()}.\n+     * {@link TimelockService#startIdentifiedAtlasDbTransactionBatch(int)}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI4NjY1NA=="}, "originalCommit": {"oid": "dd3f34c50b9fe549b1ca67fe1c4be3a361686af7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM3Nzg5OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1Mjo1MFrOGPKREw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1Mjo1MFrOGPKREw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MDAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * be vvalid, the transaction must be committed, preferably by calling\n          \n          \n            \n                 * be valid, the transaction must be committed, preferably by calling", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418550035", "createdAt": "2020-05-01T13:52:50Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -418,24 +419,24 @@ default LockWatchManager getLockWatchManager() {\n     void registerClosingCallback(Runnable closingCallback);\n \n     /**\n-     * This method can be used for direct control of a transaction's life cycle. For example, if the work done in\n-     * the transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of time, this method\n-     * allows for a long lived transaction object. For the any data read or written to the transaction to be valid,\n-     * the transaction must be committed, preferably by calling\n+     * This method can be used for direct control over the lifecycle of a batch of transactions. For example, if the\n+     * work done in each given transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of\n+     * time, this method allows for a long lived transaction object. For any data read or written to the transaction to\n+     * be vvalid, the transaction must be committed, preferably by calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM4NzAwOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo1NTo1NlrOGPKWeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxMjozNFrOGQmf0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTQxOA==", "bodyText": "Are there any conditions on the ordering of transactions responses returned? Might be good to say what's allowed/not in case downstream users decide that looking at the first or last entry in the list to find some information", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418551418", "createdAt": "2020-05-01T13:55:56Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -418,24 +419,24 @@ default LockWatchManager getLockWatchManager() {\n     void registerClosingCallback(Runnable closingCallback);\n \n     /**\n-     * This method can be used for direct control of a transaction's life cycle. For example, if the work done in\n-     * the transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of time, this method\n-     * allows for a long lived transaction object. For the any data read or written to the transaction to be valid,\n-     * the transaction must be committed, preferably by calling\n+     * This method can be used for direct control over the lifecycle of a batch of transactions. For example, if the\n+     * work done in each given transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of\n+     * time, this method allows for a long lived transaction object. For any data read or written to the transaction to\n+     * be vvalid, the transaction must be committed, preferably by calling\n      * {@link #finishRunTaskWithLockThrowOnConflict(TransactionAndImmutableTsLock, TransactionTask)} to also perform\n-     * additional cleanup.\n+     * additional cleanup. Note that this does not clean up the pre commit condition associated with that task.\n      *\n+     * @return a batch of transactions with associated immutable timestamp locks\n      * @deprecated Similar functionality will exist, but this method is likely to change in the future\n-     *\n-     * @return the transaction and associated immutable timestamp lock for the task\n      */\n     @Deprecated\n     @Timed\n-    TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n+    List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5MjQ0Mw==", "bodyText": "hmmm, feels to me the interface is pretty simple, the ordering should absolutely match; so at index 1, returned transaction should be matched to the precondition at index 1 in the request list.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418592443", "createdAt": "2020-05-01T15:29:15Z", "author": {"login": "jkozlowski"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -418,24 +419,24 @@ default LockWatchManager getLockWatchManager() {\n     void registerClosingCallback(Runnable closingCallback);\n \n     /**\n-     * This method can be used for direct control of a transaction's life cycle. For example, if the work done in\n-     * the transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of time, this method\n-     * allows for a long lived transaction object. For the any data read or written to the transaction to be valid,\n-     * the transaction must be committed, preferably by calling\n+     * This method can be used for direct control over the lifecycle of a batch of transactions. For example, if the\n+     * work done in each given transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of\n+     * time, this method allows for a long lived transaction object. For any data read or written to the transaction to\n+     * be vvalid, the transaction must be committed, preferably by calling\n      * {@link #finishRunTaskWithLockThrowOnConflict(TransactionAndImmutableTsLock, TransactionTask)} to also perform\n-     * additional cleanup.\n+     * additional cleanup. Note that this does not clean up the pre commit condition associated with that task.\n      *\n+     * @return a batch of transactions with associated immutable timestamp locks\n      * @deprecated Similar functionality will exist, but this method is likely to change in the future\n-     *\n-     * @return the transaction and associated immutable timestamp lock for the task\n      */\n     @Deprecated\n     @Timed\n-    TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n+    List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTQxOA=="}, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0OTM2Mw==", "bodyText": "I think I meant more in terms of the timestamps (e.g. can you assume response[0].getTimestamp() is the min?)", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r420049363", "createdAt": "2020-05-05T11:49:44Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -418,24 +419,24 @@ default LockWatchManager getLockWatchManager() {\n     void registerClosingCallback(Runnable closingCallback);\n \n     /**\n-     * This method can be used for direct control of a transaction's life cycle. For example, if the work done in\n-     * the transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of time, this method\n-     * allows for a long lived transaction object. For the any data read or written to the transaction to be valid,\n-     * the transaction must be committed, preferably by calling\n+     * This method can be used for direct control over the lifecycle of a batch of transactions. For example, if the\n+     * work done in each given transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of\n+     * time, this method allows for a long lived transaction object. For any data read or written to the transaction to\n+     * be vvalid, the transaction must be committed, preferably by calling\n      * {@link #finishRunTaskWithLockThrowOnConflict(TransactionAndImmutableTsLock, TransactionTask)} to also perform\n-     * additional cleanup.\n+     * additional cleanup. Note that this does not clean up the pre commit condition associated with that task.\n      *\n+     * @return a batch of transactions with associated immutable timestamp locks\n      * @deprecated Similar functionality will exist, but this method is likely to change in the future\n-     *\n-     * @return the transaction and associated immutable timestamp lock for the task\n      */\n     @Deprecated\n     @Timed\n-    TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n+    List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTQxOA=="}, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzU4NQ==", "bodyText": "Ah, I see what you mean. I don't think we should make that assumption anywhere (although I suspect, looking through the code at TransactionStarter, that it is the case anyway). Perhaps a bit of additional javadoc would cover this?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r420053585", "createdAt": "2020-05-05T11:57:58Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -418,24 +419,24 @@ default LockWatchManager getLockWatchManager() {\n     void registerClosingCallback(Runnable closingCallback);\n \n     /**\n-     * This method can be used for direct control of a transaction's life cycle. For example, if the work done in\n-     * the transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of time, this method\n-     * allows for a long lived transaction object. For the any data read or written to the transaction to be valid,\n-     * the transaction must be committed, preferably by calling\n+     * This method can be used for direct control over the lifecycle of a batch of transactions. For example, if the\n+     * work done in each given transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of\n+     * time, this method allows for a long lived transaction object. For any data read or written to the transaction to\n+     * be vvalid, the transaction must be committed, preferably by calling\n      * {@link #finishRunTaskWithLockThrowOnConflict(TransactionAndImmutableTsLock, TransactionTask)} to also perform\n-     * additional cleanup.\n+     * additional cleanup. Note that this does not clean up the pre commit condition associated with that task.\n      *\n+     * @return a batch of transactions with associated immutable timestamp locks\n      * @deprecated Similar functionality will exist, but this method is likely to change in the future\n-     *\n-     * @return the transaction and associated immutable timestamp lock for the task\n      */\n     @Deprecated\n     @Timed\n-    TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n+    List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTQxOA=="}, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2MTEzOA==", "bodyText": "Yeah, let's say that we can't assume that then", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r420061138", "createdAt": "2020-05-05T12:12:34Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/transaction/api/TransactionManager.java", "diffHunk": "@@ -418,24 +419,24 @@ default LockWatchManager getLockWatchManager() {\n     void registerClosingCallback(Runnable closingCallback);\n \n     /**\n-     * This method can be used for direct control of a transaction's life cycle. For example, if the work done in\n-     * the transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of time, this method\n-     * allows for a long lived transaction object. For the any data read or written to the transaction to be valid,\n-     * the transaction must be committed, preferably by calling\n+     * This method can be used for direct control over the lifecycle of a batch of transactions. For example, if the\n+     * work done in each given transaction is interactive and cannot be expressed as a {@link TransactionTask} ahead of\n+     * time, this method allows for a long lived transaction object. For any data read or written to the transaction to\n+     * be vvalid, the transaction must be committed, preferably by calling\n      * {@link #finishRunTaskWithLockThrowOnConflict(TransactionAndImmutableTsLock, TransactionTask)} to also perform\n-     * additional cleanup.\n+     * additional cleanup. Note that this does not clean up the pre commit condition associated with that task.\n      *\n+     * @return a batch of transactions with associated immutable timestamp locks\n      * @deprecated Similar functionality will exist, but this method is likely to change in the future\n-     *\n-     * @return the transaction and associated immutable timestamp lock for the task\n      */\n     @Deprecated\n     @Timed\n-    TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition);\n+    List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MTQxOA=="}, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM5OTk3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowMDo1NlrOGPKelw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjoxODowMVrOGQmrHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MzQ5NQ==", "bodyText": "I guess this is fine - but depends on implementation, most of the time they are all going to be the same I think?", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418553495", "createdAt": "2020-05-01T14:00:56Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -162,27 +168,43 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n     }\n \n     @Override\n-    public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        if (conditions.isEmpty()) {\n+            return ImmutableList.of();\n+        }\n+\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+            long immutableTs = Collections.max(responses.stream()\n+                    .map(response -> response.immutableTimestamp().getImmutableTimestamp())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMxMjgwNg==", "bodyText": "I was assuming that it is possible for the batch to be made out of several ConjureStartTransactionsResponses, and therefore there being a possibility that the immutable timestamp differs, but if it is not a problem then we could equally just take the first element's value.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r419312806", "createdAt": "2020-05-04T09:28:06Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -162,27 +168,43 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n     }\n \n     @Override\n-    public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        if (conditions.isEmpty()) {\n+            return ImmutableList.of();\n+        }\n+\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+            long immutableTs = Collections.max(responses.stream()\n+                    .map(response -> response.immutableTimestamp().getImmutableTimestamp())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MzQ5NQ=="}, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA2NDAyOA==", "bodyText": "Makes sense, let's just stick with this. We don't actually need the most up to date value for the tracker here (it's only for metrics), a good approximation is fine, but there isn't a regression here.", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r420064028", "createdAt": "2020-05-05T12:18:01Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionManager.java", "diffHunk": "@@ -162,27 +168,43 @@ protected boolean shouldStopRetrying(int numTimesFailed) {\n     }\n \n     @Override\n-    public TransactionAndImmutableTsLock setupRunTaskWithConditionThrowOnConflict(PreCommitCondition condition) {\n-        StartIdentifiedAtlasDbTransactionResponse transactionResponse\n-                = timelockService.startIdentifiedAtlasDbTransaction();\n+    public List<TransactionAndImmutableTsLock> setupRunTaskBatchWithConditionThrowOnConflict(\n+            List<PreCommitCondition> conditions) {\n+        if (conditions.isEmpty()) {\n+            return ImmutableList.of();\n+        }\n+\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                timelockService.startIdentifiedAtlasDbTransactionBatch(conditions.size());\n         try {\n-            LockToken immutableTsLock = transactionResponse.immutableTimestamp().getLock();\n-            long immutableTs = transactionResponse.immutableTimestamp().getImmutableTimestamp();\n+            long immutableTs = Collections.max(responses.stream()\n+                    .map(response -> response.immutableTimestamp().getImmutableTimestamp())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1MzQ5NQ=="}, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQyMTQwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowOToxM1rOGPKr3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowOToxM1rOGPKr3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1Njg5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        int numTransactions = batch.stream().map(BatchElement::argument).reduce(0, Integer::sum);\n          \n          \n            \n                        int numTransactions = batch.stream().mapToInt(BatchElement::argument).reduce(0, Integer::sum);\n          \n      \n    \n    \n  \n\nThis does a bunch of unnecessary boxing. I think you can do mapToInt(BatchElement::argument) instead of just map().", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418556893", "createdAt": "2020-05-01T14:09:13Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -138,16 +133,20 @@ public void close() {\n     }\n \n     @VisibleForTesting\n-    static Consumer<List<BatchElement<Void, StartIdentifiedAtlasDbTransactionResponse>>> consumer(\n+    static Consumer<List<BatchElement<Integer, List<StartIdentifiedAtlasDbTransactionResponse>>>> consumer(\n             LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache) {\n         return batch -> {\n-            int numTransactions = batch.size();\n+            int numTransactions = batch.stream().map(BatchElement::argument).reduce(0, Integer::sum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDYxMTcyOnYy", "diffSide": "RIGHT", "path": "lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxODoyNlrOGPMjlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxODoyNlrOGPMjlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NzU0Mw==", "bodyText": "\u2764\ufe0f Nice!", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418587543", "createdAt": "2020-05-01T15:18:26Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java", "diffHunk": "@@ -98,49 +101,99 @@ public void after() {\n     public void shouldDeriveStartTransactionResponseFromBatchedResponse_singleTransaction() {\n         ConjureStartTransactionsResponse startTransactionResponse = getStartTransactionResponse(12, 1);\n \n-        when(lockLeaseService.startTransactionsWithWatches(Optional.empty(), 1))\n-                .thenReturn(startTransactionResponse);\n-        StartIdentifiedAtlasDbTransactionResponse response = transactionStarter.startIdentifiedAtlasDbTransaction();\n+        when(lockLeaseService.startTransactionsWithWatches(Optional.empty(), 1)).thenReturn(startTransactionResponse);\n+        StartIdentifiedAtlasDbTransactionResponse response =\n+                Iterables.getOnlyElement(transactionStarter.startIdentifiedAtlasDbTransactionBatch(1));\n \n         assertDerivableFromBatchedResponse(response, startTransactionResponse);\n     }\n \n+    @Test\n+    public void shouldDeriveStartTransactionResponseBatchFromBatchedResponse_multipleTransactions() {\n+        ConjureStartTransactionsResponse batchResponse = getStartTransactionResponse(12, 5);\n+\n+        when(lockLeaseService.startTransactionsWithWatches(Optional.empty(), 5)).thenReturn(batchResponse);\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                transactionStarter.startIdentifiedAtlasDbTransactionBatch(5);\n+\n+        assertThat(responses)\n+                .satisfies(TransactionStarterTest::assertThatStartTransactionResponsesAreUnique)\n+                .hasSize(5)\n+                .allSatisfy(startTxnResponse -> assertDerivableFromBatchedResponse(startTxnResponse, batchResponse));\n+    }\n+\n+    @Test\n+    public void shouldThrowWhenTryingToStartIllegalNumberOfTransactions() {\n+        assertThatThrownBy(() -> transactionStarter.startIdentifiedAtlasDbTransactionBatch(0))\n+                .isInstanceOf(SafeIllegalArgumentException.class)\n+                .hasMessage(\"Cannot start 0 or fewer transactions\");\n+    }\n+\n     @Test\n     public void shouldDeriveStartTransactionResponseFromBatchedResponse_multipleTransactions() {\n         ConjureStartTransactionsResponse batchResponse = getStartTransactionResponse(40, 3);\n         when(lockLeaseService.startTransactionsWithWatches(Optional.empty(), 3))\n                 .thenReturn(batchResponse);\n \n-        List<StartIdentifiedAtlasDbTransactionResponse> responses = requestBatches(3);\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses = requestSingularBatches(3);\n         assertThat(responses)\n                 .satisfies(TransactionStarterTest::assertThatStartTransactionResponsesAreUnique)\n                 .hasSize(3)\n                 .allSatisfy(startTxnResponse -> assertDerivableFromBatchedResponse(startTxnResponse, batchResponse));\n     }\n \n+    @Test\n+    public void shouldDeriveStartTransactionResponseFromBatchedResponse_nonTrivialBatchSize() {\n+        ConjureStartTransactionsResponse batchResponse = getStartTransactionResponse(40, 10);\n+        when(lockLeaseService.startTransactionsWithWatches(Optional.empty(), 10))\n+                .thenReturn(batchResponse);\n+\n+        ImmutableList<Integer> sizes = ImmutableList.of(2, 3, 4, 1);\n+        List<List<StartIdentifiedAtlasDbTransactionResponse>> responses = requestBatches(sizes);\n+        Streams.forEachPair(responses.stream(), sizes.stream(),\n+                (response, size) -> assertThat(response)\n+                        .hasSize(size)\n+                        .allSatisfy(startTxnResponse -> assertDerivableFromBatchedResponse(startTxnResponse,\n+                                batchResponse)));\n+\n+        assertThat(flattenResponses(responses)).satisfies(\n+                TransactionStarterTest::assertThatStartTransactionResponsesAreUnique);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDYxNTEzOnYy", "diffSide": "RIGHT", "path": "timelock-server/src/integTest/java/com/palantir/atlasdb/timelock/AsyncTimelockServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxOTozNlrOGPMltQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxOTozNlrOGPMltQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4ODA4NQ==", "bodyText": "good reuse here :)", "url": "https://github.com/palantir/atlasdb/pull/4711#discussion_r418588085", "createdAt": "2020-05-01T15:19:36Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/integTest/java/com/palantir/atlasdb/timelock/AsyncTimelockServiceIntegrationTest.java", "diffHunk": "@@ -458,44 +458,49 @@ public void waitForLockRequestsAreIdempotent() {\n     @Test\n     public void startIdentifiedAtlasDbTransactionGivesUsTimestampsInSequence() {\n         StartIdentifiedAtlasDbTransactionResponse firstResponse =\n-                namespace.timelockService().startIdentifiedAtlasDbTransaction();\n+                startSingleTransaction(namespace.timelockService());\n         StartIdentifiedAtlasDbTransactionResponse secondResponse =\n-                namespace.timelockService().startIdentifiedAtlasDbTransaction();\n+                startSingleTransaction(namespace.timelockService());\n \n-        // Note that we technically cannot guarantee an ordering between the fresh timestamp on response 1 and the\n-        // immutable timestamp on response 2. Most of the time, we will have IT on response 2 = IT on response 1\n-        // < FT on response 1, as the lock token on response 1 has not expired yet. However, if we sleep for long\n-        // enough between the first and second call that the immutable timestamp lock expires, then\n-        // IT on response 2 > FT on response 1.\n-        assertThat(ImmutableList.of(\n-                firstResponse.immutableTimestamp().getImmutableTimestamp(),\n-                firstResponse.startTimestampAndPartition().timestamp(),\n-                secondResponse.startTimestampAndPartition().timestamp())).isSorted();\n-        assertThat(ImmutableList.of(\n-                firstResponse.immutableTimestamp().getImmutableTimestamp(),\n-                secondResponse.immutableTimestamp().getImmutableTimestamp(),\n-                secondResponse.startTimestampAndPartition().timestamp())).isSorted();\n+        assertThatStartIdentifiedTransactionResponseTimestampsInSequence(firstResponse, secondResponse);\n+    }\n+\n+    @Test\n+    public void startIdentifiedAtlasDbTransactionBatchGivesUsTimestampsInSequence() {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                namespace.timelockService().startIdentifiedAtlasDbTransactionBatch(2);\n+\n+        assertThatStartIdentifiedTransactionResponseTimestampsInSequence(responses.get(0), responses.get(1));\n     }\n \n     @Test\n     public void startIdentifiedAtlasDbTransactionGivesUsStartTimestampsInTheSamePartition() {\n         StartIdentifiedAtlasDbTransactionResponse firstResponse =\n-                namespace.timelockService().startIdentifiedAtlasDbTransaction();\n+                startSingleTransaction(namespace.timelockService());\n         StartIdentifiedAtlasDbTransactionResponse secondResponse =\n-                namespace.timelockService().startIdentifiedAtlasDbTransaction();\n+                startSingleTransaction(namespace.timelockService());\n \n-        assertThat(firstResponse.startTimestampAndPartition().partition())\n-                .isEqualTo(secondResponse.startTimestampAndPartition().partition());\n+        assertThatStartIdentifiedTransactionResponseTimestampsInSamePartition(firstResponse, secondResponse);\n+    }\n+\n+    @Test\n+    public void startIdentifiedAtlasDbTransactionBatchGivesUsStartTimestampsInTheSamePartition() {\n+        List<StartIdentifiedAtlasDbTransactionResponse> responses =\n+                namespace.timelockService().startIdentifiedAtlasDbTransactionBatch(2);\n+\n+        assertThatStartIdentifiedTransactionResponseTimestampsInSamePartition(responses.get(0), responses.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb4294b079544e18d053327970bdf337fcfc799"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3060, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}