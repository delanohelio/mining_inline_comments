{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTg4MTAw", "number": 4889, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMzo1MlrOEM1CFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxNzo0NFrOEM1UdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODg3MjU1OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMzo1MlrOGvKctA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMzo1MlrOGvKctA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNzQ0NA==", "bodyText": "On one hand I'd prefer not to add complexity - on the other I think we should special case a flat 0 for the request rate, because this is backed by an exponential metric registry and so an old, slow request might end up hanging for more than we would like.", "url": "https://github.com/palantir/atlasdb/pull/4889#discussion_r452107444", "createdAt": "2020-07-09T10:03:52Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -149,7 +148,13 @@ HealthStatus pointFeedbackHealthStatus(ConjureTimeLockClientFeedback healthRepor\n     private HealthStatus getHealthStatusForService(EndpointStatistics endpointStatistics,\n             double rateThreshold,\n             long p99Limit,\n-            double errorRateProportion) {\n+            double errorRateProportion,\n+            double p99Multiplier) {\n+\n+        // Outliers indicate badness, regardless of request rate\n+        if (endpointStatistics.getP99() > p99Limit * p99Multiplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6d4d0ce3b8dc2202d5f98f8446b52d14ed6855"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODkxMzcyOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxNjowMFrOGvK2Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxNjowMFrOGvK2Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExNDAxNA==", "bodyText": "Could we make this 0.02?\nThe reason is because these endpoints on the AtlasDB side are autobatched. So the current p99 multiplier there means we'll say unhealthy on 50 seconds or above, and it would be good to catch a server that is queueing up 40 second autobatcher calls.", "url": "https://github.com/palantir/atlasdb/pull/4889#discussion_r452114014", "createdAt": "2020-07-09T10:16:00Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/Constants.java", "diffHunk": "@@ -34,15 +34,17 @@ private Constants() {\n     public static final ServiceLevelObjectiveSpecification LEADER_TIME_SERVICE_LEVEL_OBJECTIVES\n             = ServiceLevelObjectiveSpecification.builder()\n             .maximumPermittedP99(Duration.ofMillis(200))\n-            .minimumRequestRateForConsideration(1)\n+            .minimumRequestRateForConsideration(0.1)\n             .maximumPermittedErrorProportion(0.5)\n+            .p99Multiplier(100)\n             .build();\n \n     public static final ServiceLevelObjectiveSpecification START_TRANSACTION_SERVICE_LEVEL_OBJECTIVES\n             = ServiceLevelObjectiveSpecification.builder()\n             .maximumPermittedP99(Duration.ofMillis(500))\n-            .minimumRequestRateForConsideration(1)\n+            .minimumRequestRateForConsideration(0.1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6d4d0ce3b8dc2202d5f98f8446b52d14ed6855"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODkxOTU3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/ServiceLevelObjectiveSpecification.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxNzo0NFrOGvK55A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDoxNzo0NFrOGvK55A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExNDkxNg==", "bodyText": "I'd prefer a design where we have something like\n  Duration maximumPermittedSteadyStateP99();\n  Duration maximumPermittedQuietP99(); // currently this is maximumPermittedP99 * multiplier\n\nwith comments explaining the difference. The multiplier doesn't really say what it does", "url": "https://github.com/palantir/atlasdb/pull/4889#discussion_r452114916", "createdAt": "2020-07-09T10:17:44Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/ServiceLevelObjectiveSpecification.java", "diffHunk": "@@ -27,6 +27,7 @@\n     Duration maximumPermittedP99();\n     double maximumPermittedErrorProportion();\n     double minimumRequestRateForConsideration();\n+    double p99Multiplier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6d4d0ce3b8dc2202d5f98f8446b52d14ed6855"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2709, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}