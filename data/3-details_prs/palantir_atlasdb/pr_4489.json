{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDUzMTcw", "number": 4489, "title": "AsyncPuncherTest no longer leaks ScheduledExecutorServices", "bodyText": "Previously a remaining task continued to execute and produce a\nstack trace every millisecond for the remainder of the suite.", "createdAt": "2020-01-07T15:53:47Z", "url": "https://github.com/palantir/atlasdb/pull/4489", "merged": true, "mergeCommit": {"oid": "557f219032dcf72f888b6ddbd94dbd03ec16be4a"}, "closed": true, "closedAt": "2020-01-07T16:05:42Z", "author": {"login": "carterkozak"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4CykcAH2gAyMzYwMDUzMTcwOjFkYWY4NWYxZGZkNDdkNjMxZDRhODc4MjUxYzMxOTAzNzFkZDFkNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4DArwgFqTMzOTMzMzMzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57", "author": {"user": {"login": "carterkozak", "name": "Carter Kozak"}}, "url": "https://github.com/palantir/atlasdb/commit/1daf85f1dfd47d631d4a878251c3190371dd1d57", "committedDate": "2020-01-07T15:49:44Z", "message": "AsyncPuncherTest no longer leaks ScheduledExecutorServices\n\nPreviosuly a remaining task continued to execute and produce a\nstack trace every millisecond for the remainder of the suite."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzI3Mjg4", "url": "https://github.com/palantir/atlasdb/pull/4489#pullrequestreview-339327288", "createdAt": "2020-01-07T15:54:06Z", "commit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTo1NDowNlrOFa9lig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTo1NDowNlrOFa9lig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgxNjMzMA==", "bodyText": "Previously this mutated state, orphaning the original asyncPuncher", "url": "https://github.com/palantir/atlasdb/pull/4489#discussion_r363816330", "createdAt": "2020-01-07T15:54:06Z", "author": {"login": "carterkozak"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/cleaner/AsyncPuncherTest.java", "diffHunk": "@@ -41,25 +40,18 @@\n         throw new IllegalStateException(\"bla\");\n     };\n \n-    private AsyncPuncher asyncPuncher;\n     private TimestampService timestampService;\n \n     @Before\n     public void setup() {\n         timestampService = new InMemoryTimestampService();\n-        setupPuncher(THROWING_BACKUP_TIMESTAMP_SUPPLIER);\n     }\n \n-    private void setupPuncher(LongSupplier backupTimestampSupplier) {\n+    private AsyncPuncher setupPuncher(LongSupplier backupTimestampSupplier) {\n         PuncherStore puncherStore = InMemoryPuncherStore.create();\n         Clock clock = new SystemClock();\n         Puncher puncher = SimplePuncher.create(puncherStore, clock, Suppliers.ofInstance(TRANSACTION_TIMEOUT));\n-        asyncPuncher = AsyncPuncher.create(puncher, ASYNC_PUNCHER_INTERVAL, backupTimestampSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzI3NTc5", "url": "https://github.com/palantir/atlasdb/pull/4489#pullrequestreview-339327579", "createdAt": "2020-01-07T15:54:32Z", "commit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTo1NDozMlrOFa9mXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNTo1NDozMlrOFa9mXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgxNjU0Mg==", "bodyText": "\ud83c\udf36\ufe0f \ud83c\udf36\ufe0f when it was called here", "url": "https://github.com/palantir/atlasdb/pull/4489#discussion_r363816542", "createdAt": "2020-01-07T15:54:32Z", "author": {"login": "carterkozak"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/cleaner/AsyncPuncherTest.java", "diffHunk": "@@ -82,34 +74,48 @@ public void delegatesInitializationCheck() {\n     @Test\n     public void testPuncherDurability() throws Exception {\n         long stored = timestampService.getFreshTimestamp();\n-        asyncPuncher.punch(stored);\n-        checkExpectedValue(asyncPuncher, stored);\n+        AsyncPuncher asyncPuncher = setupPuncher(THROWING_BACKUP_TIMESTAMP_SUPPLIER);\n+        try {\n+            asyncPuncher.punch(stored);\n+            checkExpectedValue(asyncPuncher, stored);\n+        } finally {\n+            asyncPuncher.shutdown();\n+        }\n     }\n \n \n     @Test\n     public void testPuncherTimestampLessThanFreshTimestamp() throws Exception {\n         long stored = timestampService.getFreshTimestamp();\n-        asyncPuncher.punch(stored);\n-        long retrieved = Long.MIN_VALUE;\n-        for (int i = 0; i < MAX_INTERVALS_TO_WAIT && retrieved < stored; i++) {\n-            Thread.sleep(ASYNC_PUNCHER_INTERVAL);\n-            retrieved = asyncPuncher.getTimestampSupplier().get();\n+        AsyncPuncher asyncPuncher = setupPuncher(THROWING_BACKUP_TIMESTAMP_SUPPLIER);\n+        try {\n+            asyncPuncher.punch(stored);\n+            long retrieved = Long.MIN_VALUE;\n+            for (int i = 0; i < MAX_INTERVALS_TO_WAIT && retrieved < stored; i++) {\n+                Thread.sleep(ASYNC_PUNCHER_INTERVAL);\n+                retrieved = asyncPuncher.getTimestampSupplier().get();\n+            }\n+            long freshTimestamp = timestampService.getFreshTimestamp();\n+            assertThat(retrieved).isLessThan(freshTimestamp);\n+        } finally {\n+            asyncPuncher.shutdown();\n         }\n-        long freshTimestamp = timestampService.getFreshTimestamp();\n-        assertThat(retrieved).isLessThan(freshTimestamp);\n     }\n \n     @Test\n     public void punchesBackupTimestampWhenNothingWasPunched() throws Exception {\n-        setupPuncher(timestampService::getFreshTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzI4ODA5", "url": "https://github.com/palantir/atlasdb/pull/4489#pullrequestreview-339328809", "createdAt": "2020-01-07T15:56:09Z", "commit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MzMzMzMz", "url": "https://github.com/palantir/atlasdb/pull/4489#pullrequestreview-339333333", "createdAt": "2020-01-07T16:02:39Z", "commit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjowMjozOVrOFa92fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxNjowMjozOVrOFa92fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMDY3MA==", "bodyText": "I suppose this will spam bla: No timestamp was found and attempting to get a fresh timestamp to punch failed.", "url": "https://github.com/palantir/atlasdb/pull/4489#discussion_r363820670", "createdAt": "2020-01-07T16:02:39Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/cleaner/AsyncPuncherTest.java", "diffHunk": "@@ -82,34 +74,48 @@ public void delegatesInitializationCheck() {\n     @Test\n     public void testPuncherDurability() throws Exception {\n         long stored = timestampService.getFreshTimestamp();\n-        asyncPuncher.punch(stored);\n-        checkExpectedValue(asyncPuncher, stored);\n+        AsyncPuncher asyncPuncher = setupPuncher(THROWING_BACKUP_TIMESTAMP_SUPPLIER);\n+        try {\n+            asyncPuncher.punch(stored);\n+            checkExpectedValue(asyncPuncher, stored);\n+        } finally {\n+            asyncPuncher.shutdown();\n+        }\n     }\n \n \n     @Test\n     public void testPuncherTimestampLessThanFreshTimestamp() throws Exception {\n         long stored = timestampService.getFreshTimestamp();\n-        asyncPuncher.punch(stored);\n-        long retrieved = Long.MIN_VALUE;\n-        for (int i = 0; i < MAX_INTERVALS_TO_WAIT && retrieved < stored; i++) {\n-            Thread.sleep(ASYNC_PUNCHER_INTERVAL);\n-            retrieved = asyncPuncher.getTimestampSupplier().get();\n+        AsyncPuncher asyncPuncher = setupPuncher(THROWING_BACKUP_TIMESTAMP_SUPPLIER);\n+        try {\n+            asyncPuncher.punch(stored);\n+            long retrieved = Long.MIN_VALUE;\n+            for (int i = 0; i < MAX_INTERVALS_TO_WAIT && retrieved < stored; i++) {\n+                Thread.sleep(ASYNC_PUNCHER_INTERVAL);\n+                retrieved = asyncPuncher.getTimestampSupplier().get();\n+            }\n+            long freshTimestamp = timestampService.getFreshTimestamp();\n+            assertThat(retrieved).isLessThan(freshTimestamp);\n+        } finally {\n+            asyncPuncher.shutdown();\n         }\n-        long freshTimestamp = timestampService.getFreshTimestamp();\n-        assertThat(retrieved).isLessThan(freshTimestamp);\n     }\n \n     @Test\n     public void punchesBackupTimestampWhenNothingWasPunched() throws Exception {\n-        setupPuncher(timestampService::getFreshTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgxNjU0Mg=="}, "originalCommit": {"oid": "1daf85f1dfd47d631d4a878251c3190371dd1d57"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2336, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}