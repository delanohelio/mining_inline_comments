{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3Mzk0NTE4", "number": 4986, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTowNToxM1rOEkAP5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo0MToyNVrOEnlN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTg4MjYzOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/UndertowCorruptionHandlerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTowNToxM1rOHSrtPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMTowNToxM1rOHSrtPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM1MjUwOA==", "bodyText": "Note - QosException.unavailable returns 200 response and the client may retry at a later time.", "url": "https://github.com/palantir/atlasdb/pull/4986#discussion_r489352508", "createdAt": "2020-09-16T11:05:13Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/UndertowCorruptionHandlerService.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.common.remoting.ServiceNotAvailableException;\n+import com.palantir.conjure.java.undertow.lib.Endpoint;\n+import com.palantir.conjure.java.undertow.lib.UndertowRuntime;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+\n+import io.undertow.server.HandlerWrapper;\n+\n+public class UndertowCorruptionHandlerService implements UndertowService {\n+    private final UndertowService delegate;\n+    private final HandlerWrapper wrapper;\n+    private final CorruptionHealthCheck healthCheck;\n+\n+    public UndertowCorruptionHandlerService(UndertowService service, CorruptionHealthCheck healthCheck) {\n+        this.delegate = service;\n+        this.healthCheck = healthCheck;\n+        this.wrapper = handler -> exchange -> {\n+            if (healthCheck.isHealthy()) {\n+                handler.handleRequest(exchange);\n+            } else {\n+                throw new ServiceNotAvailableException(\"TimeLock is not available on account of data corruption.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f476cd5b835d283d17fb6057eab3c2d3903a331"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc2MzE2OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNDo1OFrOHTbkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyNDo1OFrOHTbkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzNjY3NA==", "bodyText": "This should be consistent with the other QoS exceptions we get.", "url": "https://github.com/palantir/atlasdb/pull/4986#discussion_r490136674", "createdAt": "2020-09-17T10:24:58Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/Constants.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+public final class Constants {\n+    private Constants() {\n+        // no op\n+    }\n+\n+    public static final String CORRUPTION_MESSAGE\n+            = \"{\\\"error\\\": \\\"TimeLock is not available on account of data corruption.\\\"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a825c719dad92f54a0870467ec204ddb36d52e21"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Njc3ODg0OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/UndertowCorruptionHandlerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyOTozM1rOHTbt0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMDoyOTozM1rOHTbt0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDEzOTA4OA==", "bodyText": "I don't think this is needed if we standardise with internal frameworks.", "url": "https://github.com/palantir/atlasdb/pull/4986#discussion_r490139088", "createdAt": "2020-09-17T10:29:33Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/UndertowCorruptionHandlerService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.conjure.java.undertow.lib.Endpoint;\n+import com.palantir.conjure.java.undertow.lib.UndertowRuntime;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+\n+import io.undertow.server.HandlerWrapper;\n+import io.undertow.util.Headers;\n+import io.undertow.util.StatusCodes;\n+\n+public class UndertowCorruptionHandlerService implements UndertowService {\n+    private final UndertowService delegate;\n+    private final HandlerWrapper wrapper;\n+    private final CorruptionHealthCheck healthCheck;\n+\n+    public UndertowCorruptionHandlerService(UndertowService service, CorruptionHealthCheck healthCheck) {\n+        this.delegate = service;\n+        this.healthCheck = healthCheck;\n+        this.wrapper = handler -> exchange -> {\n+            if (healthCheck.isHealthy()) {\n+                handler.handleRequest(exchange);\n+            } else {\n+                exchange.setStatusCode(StatusCodes.SERVICE_UNAVAILABLE);\n+                exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"application/json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a825c719dad92f54a0870467ec204ddb36d52e21"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTM5Njg4OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/UndertowCorruptionHandlerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo0MToyNVrOHYQVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTo0MToyNVrOHYQVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE5NTQ0Nw==", "bodyText": "as a note, you can here throw QosException.unavailabe() and induce the same behaviour", "url": "https://github.com/palantir/atlasdb/pull/4986#discussion_r495195447", "createdAt": "2020-09-25T19:41:25Z", "author": {"login": "j-baker"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/corruption/UndertowCorruptionHandlerService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.corruption;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.conjure.java.undertow.lib.Endpoint;\n+import com.palantir.conjure.java.undertow.lib.UndertowRuntime;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+\n+import io.undertow.server.HandlerWrapper;\n+import io.undertow.util.Headers;\n+import io.undertow.util.StatusCodes;\n+\n+public class UndertowCorruptionHandlerService implements UndertowService {\n+    private final UndertowService delegate;\n+    private final HandlerWrapper wrapper;\n+    private final CorruptionHealthCheck healthCheck;\n+\n+    public UndertowCorruptionHandlerService(UndertowService service, CorruptionHealthCheck healthCheck) {\n+        this.delegate = service;\n+        this.healthCheck = healthCheck;\n+        this.wrapper = handler -> exchange -> {\n+            if (healthCheck.isHealthy()) {\n+                handler.handleRequest(exchange);\n+            } else {\n+                exchange.setStatusCode(StatusCodes.SERVICE_UNAVAILABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de406edae9eb287bbb3823ef944499dbd1158ac0"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2570, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}