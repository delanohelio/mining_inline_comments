{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MjkyMjgw", "number": 4890, "title": "Adjudication logs", "bodyText": "Goals (and why):\nTo have additional logging in client feedback handler. This will be useful to assess improvements in TimeLock Adjudication algorithm.\nImplementation Description (bullets):\nAdditional logs in point health report analysis\nTesting (What was existing testing like?  What have you done to improve it?):\nTests added\nConcerns (what feedback would you like?):\nToo many logs?\nWhere should we start reviewing?:\nFeedbackHandler\nPriority (whenever / two weeks / yesterday):\nTomorrow", "createdAt": "2020-07-08T14:45:30Z", "url": "https://github.com/palantir/atlasdb/pull/4890", "merged": true, "mergeCommit": {"oid": "96ddc3f6b79a8962dbdefaa0540547466a63cc9c"}, "closed": true, "closedAt": "2020-07-13T15:20:16Z", "author": {"login": "sudiksha27"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczTjjbgFqTQ0NTQ5OTAzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0i2bbAH2gAyNDQ2MjkyMjgwOjEzY2M2YjIzM2E3YmJmZTA4MjczNTE0ZDMwNGVhZmQwNjhhNWU0OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NDk5MDM0", "url": "https://github.com/palantir/atlasdb/pull/4890#pullrequestreview-445499034", "createdAt": "2020-07-09T10:42:04Z", "commit": {"oid": "1b497cf592451c8c3e63ad644fcfef18ed0749a1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDo0MjowNVrOGvLqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozODoyN1rOGvdQsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNzM4Mw==", "bodyText": "nit: The cast to Object looks unnecessary?", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452127383", "createdAt": "2020-07-09T10:42:05Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -77,6 +81,9 @@ private HealthStatusReport healthStateOfTimeLock(\n                 .map(serviceName -> Client.of(serviceName))\n                 .collect(Collectors.toList());\n \n+        log.info(\"List of services on which TimeLock is unhealthy - {}\",\n+                SafeArg.of(\"unhealthyClients\", (Object) unhealthyClients));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b497cf592451c8c3e63ad644fcfef18ed0749a1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNDA0NQ==", "bodyText": "We might not want %.2f because of 0.00... values. I'd be okay with just printing all the numbers I think :)", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452414045", "createdAt": "2020-07-09T18:35:23Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -137,30 +144,63 @@ HealthStatus pointFeedbackHealthStatus(ConjureTimeLockClientFeedback healthRepor\n                         Constants.START_TRANSACTION_SERVICE_LEVEL_OBJECTIVES)))\n                 .filterKeys(Optional::isPresent)\n                 .mapKeys(Optional::get)\n-                .map((userStats, sloSpec) -> getHealthStatusForService(userStats,\n-                        sloSpec.minimumRequestRateForConsideration(),\n-                        sloSpec.maximumPermittedP99().toNanos(),\n-                        sloSpec.maximumPermittedErrorProportion()))\n+                .map((userStats, sloSpec) -> getHealthStatusForMetric(healthReport.getServiceName(),\n+                        userStats,\n+                        sloSpec))\n                 .values()\n+                .map(this::logHealthStatusForReport)\n                 .max(HealthStatus.getHealthStatusComparator())\n                 .orElse(HealthStatus.HEALTHY);\n     }\n \n-    private HealthStatus getHealthStatusForService(EndpointStatistics endpointStatistics,\n-            double rateThreshold,\n-            long p99Limit,\n-            double errorRateProportion) {\n+    private HealthStatus logHealthStatusForReport(\n+            PointHealthStatusReport pointHealthStatusReport) {\n+        pointHealthStatusReport.message().ifPresent(log::info);\n+        return pointHealthStatusReport.status();\n+    }\n \n-        if (endpointStatistics.getOneMin() < rateThreshold) {\n-            return HealthStatus.UNKNOWN;\n+    @VisibleForTesting\n+    PointHealthStatusReport getHealthStatusForMetric(\n+            String serviceName,\n+            EndpointStatistics endpointStatistics,\n+            ServiceLevelObjectiveSpecification sloSpec) {\n+\n+        double oneMin = endpointStatistics.getOneMin();\n+        if (oneMin < sloSpec.minimumRequestRateForConsideration()) {\n+            return PointHealthStatusReport.builder()\n+                    .status(HealthStatus.UNKNOWN)\n+                    .message(String.format(\n+                                    \"[%s] | Point health status for %s is UNKNOWN as request rate is low - %.2f\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b497cf592451c8c3e63ad644fcfef18ed0749a1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTE1OA==", "bodyText": "Seems like we could just do the logging inside getHealthStatusForMetric(), unless you had something else in mind / are using these further down?", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452415158", "createdAt": "2020-07-09T18:37:31Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthStatusReport.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface PointHealthStatusReport {\n+    HealthStatus status();\n+    Optional<String> message();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b497cf592451c8c3e63ad644fcfef18ed0749a1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTY2Ng==", "bodyText": "nit: Pretty sure AssertJ has OptionalAsserts that operate directly on optionals, I'd prefer using those instead.", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452415666", "createdAt": "2020-07-09T18:38:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+import com.palantir.timelock.feedback.EndpointStatistics;\n+\n+public class PointHealthReportAnalysisTest {\n+    private static final String CLIENT_1 = \"Client1\";\n+\n+    private static final double RATE =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.minimumRequestRateForConsideration();\n+    private static final long P_99 =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedP99().toNanos();\n+    private static final double ERROR_PROPORTION =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedErrorProportion();\n+\n+    @Test\n+    public void reportIsHealthyWhenEverythingIsRight() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 - 1)\n+                .oneMin(RATE + 1)\n+                .errorRate(0)\n+                .build();\n+        PointHealthStatusReport healthStatusForMetric = feedbackHandler.getHealthStatusForMetric(\n+                CLIENT_1,\n+                statistics,\n+                Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES);\n+        assertThat(healthStatusForMetric.status()).isEqualTo(HealthStatus.HEALTHY);\n+        assertThat(healthStatusForMetric.message().isPresent()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b497cf592451c8c3e63ad644fcfef18ed0749a1"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "229f2f3e36b5852862ab4284b992a4c1088353ed", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/229f2f3e36b5852862ab4284b992a4c1088353ed", "committedDate": "2020-07-10T09:34:11Z", "message": "Additional logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "727721ca0d88372e7e58b17aa59b08a79bd9cf04", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/727721ca0d88372e7e58b17aa59b08a79bd9cf04", "committedDate": "2020-07-10T09:34:52Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd9191606bfd3d0658a5b759eb10c2bd9bb3280d", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/bd9191606bfd3d0658a5b759eb10c2bd9bb3280d", "committedDate": "2020-07-10T09:35:34Z", "message": "Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039bc54f765f4d9432ed2019ed67187072111a18", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/039bc54f765f4d9432ed2019ed67187072111a18", "committedDate": "2020-07-10T09:43:13Z", "message": "Servicee name in logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e84baac9c59d972bd2903a03b597100af99ebf", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/91e84baac9c59d972bd2903a03b597100af99ebf", "committedDate": "2020-07-10T09:43:13Z", "message": "Log unhealthy client list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d80b528267b01704cd8fc5ac98a99db99ca20e1", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/3d80b528267b01704cd8fc5ac98a99db99ca20e1", "committedDate": "2020-07-10T09:43:13Z", "message": "Update test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b497cf592451c8c3e63ad644fcfef18ed0749a1", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/1b497cf592451c8c3e63ad644fcfef18ed0749a1", "committedDate": "2020-07-08T17:36:46Z", "message": "Refactor"}, "afterCommit": {"oid": "3d80b528267b01704cd8fc5ac98a99db99ca20e1", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/3d80b528267b01704cd8fc5ac98a99db99ca20e1", "committedDate": "2020-07-10T09:43:13Z", "message": "Update test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd44287217d80f6d7db15861bce30de699d3405d", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/dd44287217d80f6d7db15861bce30de699d3405d", "committedDate": "2020-07-10T09:54:31Z", "message": "Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7df1f12a3d5c9ef294c480cfe4f39e2efca1afe1", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/7df1f12a3d5c9ef294c480cfe4f39e2efca1afe1", "committedDate": "2020-07-10T10:41:15Z", "message": "Remove redundant code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e182d800f96300afec8adb1bbe4471a273f5fc7", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/8e182d800f96300afec8adb1bbe4471a273f5fc7", "committedDate": "2020-07-10T14:57:46Z", "message": "Bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d00f7e6bddfb2fa6852e75d8100f8041ec9ecf64", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/d00f7e6bddfb2fa6852e75d8100f8041ec9ecf64", "committedDate": "2020-07-10T15:14:09Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491d66363f9ae336158185e5234d3a38aac64416", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/491d66363f9ae336158185e5234d3a38aac64416", "committedDate": "2020-07-13T13:26:40Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjUxNTQz", "url": "https://github.com/palantir/atlasdb/pull/4890#pullrequestreview-447251543", "createdAt": "2020-07-13T13:30:27Z", "commit": {"oid": "491d66363f9ae336158185e5234d3a38aac64416"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzozMDoyN1rOGwonsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzozMToxNlrOGwop5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDM1Mw==", "bodyText": "I'd suggest logging the EndpointStatistics for visibility", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r453650353", "createdAt": "2020-07-13T13:30:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -135,38 +147,63 @@ HealthStatus pointFeedbackHealthStatus(ConjureTimeLockClientFeedback healthRepor\n                         Constants.START_TRANSACTION_SERVICE_LEVEL_OBJECTIVES)))\n                 .filterKeys(Optional::isPresent)\n                 .mapKeys(Optional::get)\n-                .map((userStats, sloSpec) -> getHealthStatusForService(userStats,\n+                .map((userStats, sloSpec) -> getHealthStatusForMetric(healthReport.getServiceName(),\n+                        userStats,\n+                        sloSpec.name(),\n                         sloSpec.minimumRequestRateForConsideration(),\n                         sloSpec.maximumPermittedSteadyStateP99().toNanos(),\n-                        sloSpec.maximumPermittedErrorProportion(),\n-                        sloSpec.maximumPermittedQuietP99().toNanos()))\n+                        sloSpec.maximumPermittedQuietP99().toNanos(),\n+                        sloSpec.maximumPermittedErrorProportion()))\n                 .values()\n                 .max(HealthStatus.getHealthStatusComparator())\n                 .orElse(HealthStatus.HEALTHY);\n     }\n \n-    private HealthStatus getHealthStatusForService(EndpointStatistics endpointStatistics,\n-            double rateThreshold,\n-            long p99Limit,\n-            double errorRateProportion,\n-            long quietP99Limit) {\n+    @VisibleForTesting\n+    HealthStatus getHealthStatusForMetric(String serviceName,\n+                    EndpointStatistics endpointStatistics,\n+                    String metricName,\n+                    double rateThreshold,\n+                    long steadyStateP99Limit,\n+                    long quietP99Limit,\n+                    double errorRateProportion) {\n \n         // Outliers indicate badness even with low request rates. The request rate should be greater than\n         // zero to counter lingering badness from a single slow request\n         if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY as the quiet state p99 is very high - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"quietP99Limit\", endpointStatistics.getP99()));\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getOneMin() < rateThreshold) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"oneMinRate\", endpointStatistics.getOneMin()));\n             return HealthStatus.UNKNOWN;\n         }\n \n-        if (getErrorProportion(endpointStatistics) > errorRateProportion) {\n+        double errorProportion = getErrorProportion(endpointStatistics);\n+        if (errorProportion > errorRateProportion) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"errorProportion\", errorProportion));\n+            return HealthStatus.UNHEALTHY;\n+        }\n+\n+        if (endpointStatistics.getP99() > steadyStateP99Limit) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"p99\", endpointStatistics.getP99()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "491d66363f9ae336158185e5234d3a38aac64416"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDkxOQ==", "bodyText": "Maybe test for p99 > quiet p99", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r453650919", "createdAt": "2020-07-13T13:31:16Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+import com.palantir.timelock.feedback.EndpointStatistics;\n+\n+public class PointHealthReportAnalysisTest {\n+    private static final String CLIENT_1 = \"Client1\";\n+    private static final String LEADER_TIME = \"leaderTime\";\n+\n+    private static final double RATE =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.minimumRequestRateForConsideration();\n+    private static final long P_99 =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedSteadyStateP99().toNanos();\n+    private static final double ERROR_PROPORTION =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedErrorProportion();\n+    private static final long QUIET_P99 =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedQuietP99().toNanos();\n+\n+    @Test\n+    public void reportIsHealthyWhenEverythingIsRight() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 - 1)\n+                .oneMin(RATE + 1)\n+                .errorRate(0)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.HEALTHY);\n+    }\n+\n+    @Test\n+    public void reportStatusIsUnknownIfReqRateIsBelowThreshold() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 + 1)\n+                .oneMin(RATE - 0.01)\n+                .errorRate(ERROR_PROPORTION * RATE + 0.1)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNKNOWN);\n+    }\n+\n+    @Test\n+    public void reportStatusIsUnhealthyIfErrProportionIsHigh() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 + 1)\n+                .oneMin(RATE + 0.01)\n+                .errorRate(ERROR_PROPORTION * RATE + 0.1)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNHEALTHY);\n+    }\n+\n+    @Test\n+    public void reportStatusIsUnhealthyIfP99IsAboveThreshold() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 + 1)\n+                .oneMin(RATE + 0.01)\n+                .errorRate(ERROR_PROPORTION * RATE)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNHEALTHY);\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "491d66363f9ae336158185e5234d3a38aac64416"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e63a5c330329b5b3d1d25c589b91ab21994bdf", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/06e63a5c330329b5b3d1d25c589b91ab21994bdf", "committedDate": "2020-07-13T13:36:58Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjU4OTk3", "url": "https://github.com/palantir/atlasdb/pull/4890#pullrequestreview-447258997", "createdAt": "2020-07-13T13:39:12Z", "commit": {"oid": "06e63a5c330329b5b3d1d25c589b91ab21994bdf"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzozOToxMlrOGwo-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzozOToxMlrOGwo-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NjEzMA==", "bodyText": "nit: please be consistent with the param ordering to log.info", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r453656130", "createdAt": "2020-07-13T13:39:12Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -171,41 +168,42 @@ HealthStatus getHealthStatusForMetric(String serviceName,\n         // Outliers indicate badness even with low request rates. The request rate should be greater than\n         // zero to counter lingering badness from a single slow request\n         if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY as the quiet state p99 is very high - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"quietP99Limit\", endpointStatistics.getP99()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY as the p99 is \"\n+                                    + \"higher than what we allow in quiet state - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getOneMin() < rateThreshold) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"oneMinRate\", endpointStatistics.getOneMin()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\");\n             return HealthStatus.UNKNOWN;\n         }\n \n         double errorProportion = getErrorProportion(endpointStatistics);\n         if (errorProportion > errorRateProportion) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"errorProportion\", errorProportion));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getP99() > steadyStateP99Limit) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"p99\", endpointStatistics.getP99()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         return HealthStatus.HEALTHY;\n     }\n \n+    private void logHealthStatus(String serviceName, EndpointStatistics endpointStatistics, String metricName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e63a5c330329b5b3d1d25c589b91ab21994bdf"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0272c3acb0bf09855e62521a97b2ab5629cbd1c", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/b0272c3acb0bf09855e62521a97b2ab5629cbd1c", "committedDate": "2020-07-13T13:43:21Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13cc6b233a7bbfe08273514d304eafd068a5e499", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/13cc6b233a7bbfe08273514d304eafd068a5e499", "committedDate": "2020-07-13T15:06:22Z", "message": "refactor | logger does not accept non-constant"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2724, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}