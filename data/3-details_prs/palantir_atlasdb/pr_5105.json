{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTMyODkw", "number": 5105, "title": "add cache warming option to ssm", "bodyText": "Adds a CacheWarming option that can control how the SweepStrategyManager\ncache is warmed on initialization. The possible options are FULL and NONE.\nFULL remains the default (so default behavior is not changing). NONE skips\nwarming the cache.\nGoals (and why):\nThe existing SweepStrategyManager cache warming code causes problems for internal products when there is a very large number of tables.\nImplementation Description (bullets):\nAdds a CacheWarming enum that can control how the SweepStrategyManager warms the cache on init.\nTesting (What was existing testing like?  What have you done to improve it?):\nParameterized the postgres sweep integration tests to test all possible values for CacheWarming.\nConcerns (what feedback would you like?):\nWhere should we start reviewing?:\nPriority (whenever / two weeks / yesterday): very high -- current open support issues internally", "createdAt": "2020-11-06T19:20:15Z", "url": "https://github.com/palantir/atlasdb/pull/5105", "merged": true, "mergeCommit": {"oid": "a29286dcdc2a28bb6bc1257b15fa739c4d2e386e"}, "closed": true, "closedAt": "2020-11-10T22:55:13Z", "author": {"login": "berler"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ8C6xABqjM5Njg2MDEwNTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbRTrMAFqTUyNzY2NzU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "463cfaa8f600b37ec7e48fe9655232ad639c5726", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/463cfaa8f600b37ec7e48fe9655232ad639c5726", "committedDate": "2020-11-06T19:01:35Z", "message": "Add generated changelog entries"}, "afterCommit": {"oid": "86cd9d783b15ffcc9082247995fe14f182793816", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/86cd9d783b15ffcc9082247995fe14f182793816", "committedDate": "2020-11-06T19:22:33Z", "message": "Add generated changelog entries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86cd9d783b15ffcc9082247995fe14f182793816", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/86cd9d783b15ffcc9082247995fe14f182793816", "committedDate": "2020-11-06T19:22:33Z", "message": "Add generated changelog entries"}, "afterCommit": {"oid": "c4d841b60769133ca5c7cad52afd42fd894bbe2f", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/c4d841b60769133ca5c7cad52afd42fd894bbe2f", "committedDate": "2020-11-06T22:03:42Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c8ffccc03163ec45490e8ddd64528def1243081", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/0c8ffccc03163ec45490e8ddd64528def1243081", "committedDate": "2020-11-06T22:10:15Z", "message": "add limited cache warming option to ssm\n\nAdds a CacheWarming option that can control how the SweepStrategyManager\ncache is warmed on initialization. The possible options are FULL,\nLIMITED, and NONE. FULL remains the default (so default behavior is not\nchanging). LIMITED causes only a max of 50 tables to be used for warming\nthe cache. NONE skips warming the cache."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7925a61ccc2da46f102eaede70eddbeeefffd1d2", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/7925a61ccc2da46f102eaede70eddbeeefffd1d2", "committedDate": "2020-11-06T22:10:15Z", "message": "Add generated changelog entries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4d841b60769133ca5c7cad52afd42fd894bbe2f", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/c4d841b60769133ca5c7cad52afd42fd894bbe2f", "committedDate": "2020-11-06T22:03:42Z", "message": "Add generated changelog entries"}, "afterCommit": {"oid": "7925a61ccc2da46f102eaede70eddbeeefffd1d2", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/7925a61ccc2da46f102eaede70eddbeeefffd1d2", "committedDate": "2020-11-06T22:10:15Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/1c4c40ad591bfa0d6df700646e298c930ac4d383", "committedDate": "2020-11-07T00:08:34Z", "message": "fix limited metadata tests for cassandra\n\nThe Cassandra integration tests leave table metadata in an inconsistent\nstate which was causing the new test to fail. Adds a workaround where\nall tables are dropped at the start of this test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjE3Njg4", "url": "https://github.com/palantir/atlasdb/pull/5105#pullrequestreview-526617688", "createdAt": "2020-11-09T20:13:04Z", "commit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxMzowNFrOHv_38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoxOTo0MVrOHwAGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MTYzNA==", "bodyText": "do we want a max size on this cache to limit memory footprint?", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520091634", "createdAt": "2020-11-09T20:13:04Z", "author": {"login": "schlosna"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/transaction/impl/SweepStrategyManagers.java", "diffHunk": "@@ -45,9 +56,8 @@ public static SweepStrategyManager createDefault(KeyValueService kvs) {\n                             .expireAfterAccess(1, TimeUnit.DAYS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5MjYzNA==", "bodyText": "How much value is there in having a separate LIMITED mode between FULL and NONE? If we set to NONE and just let the cache warm up on its own based on requests, what behavior would we see? How did we pick 50? Are the first 50 tables actually the ones we want cached?", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520092634", "createdAt": "2020-11-09T20:14:49Z", "author": {"login": "schlosna"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/transaction/impl/SweepStrategyManagers.java", "diffHunk": "@@ -84,9 +94,18 @@ public static SweepStrategyManager completelyConservative() {\n         return tableRef -> SweepStrategy.from(TableMetadataPersistence.SweepStrategy.CONSERVATIVE);\n     }\n \n-    private static Map<TableReference, SweepStrategy> getSweepStrategies(KeyValueService kvs) {\n-        return ImmutableMap.copyOf(\n-                Maps.transformValues(kvs.getMetadataForTables(), SweepStrategyManagers::getSweepStrategy));\n+    private static Map<TableReference, SweepStrategy> getSweepStrategiesForWarmingCache(\n+            KeyValueService kvs, CacheWarming cacheWarming) {\n+        switch (cacheWarming) {\n+            case FULL:\n+                return Maps.transformValues(kvs.getMetadataForTables(), SweepStrategyManagers::getSweepStrategy);\n+            case LIMITED:\n+                return Maps.transformValues(\n+                        kvs.getLimitedMetadataForTables(50), SweepStrategyManagers::getSweepStrategy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NDU1NA==", "bodyText": "Should this be a paged result? What is the epoch for concurrent consistency (e.g. tables created while this is executing)? What happens if one specifies various values for maxResults, say 0, -1, Integer.MAX_VALUE? I'm a little skeptical we even need these methods, but wondering if we actually do should instead consider something like Stream<TableReference> getTableNames() and let consumers filter/limit/transform/collect as desired.", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520094554", "createdAt": "2020-11-09T20:18:23Z", "author": {"login": "schlosna"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/KeyValueService.java", "diffHunk": "@@ -524,6 +524,14 @@ void deleteAllTimestamps(TableReference tableRef, Map<Cell, TimestampRangeDelete\n     @Idempotent\n     Set<TableReference> getAllTableNames();\n \n+    /**\n+     * Returns a list of up to {@code maxResults} tables stored in this key value service.\n+     *\n+     * This should be preferred over {@link #getAllTableNames()} if possible because the number of tables may be\n+     * unbounded.\n+     */\n+    Iterable<TableReference> getLimitedTableNames(int maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NDY3Mg==", "bodyText": "same comment as above", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520094672", "createdAt": "2020-11-09T20:18:39Z", "author": {"login": "schlosna"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/KeyValueService.java", "diffHunk": "@@ -543,6 +551,14 @@ void deleteAllTimestamps(TableReference tableRef, Map<Cell, TimestampRangeDelete\n     @Idempotent\n     Map<TableReference, byte[]> getMetadataForTables();\n \n+    /**\n+     * Gets the metadata for up to {@code maxResults} tables.\n+     *\n+     * This should be preferred over {@link #getMetadataForTables()} if possible because the number of tables may be\n+     * unbounded.\n+     */\n+    Map<TableReference, byte[]> getLimitedMetadataForTables(int maxResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NTI2OQ==", "bodyText": "Similar to above, should these lines (same as in getAllTableNames())  be pulled out to a separate method that returns Stream<TableReference>?", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520095269", "createdAt": "2020-11-09T20:19:41Z", "author": {"login": "schlosna"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/CassandraKeyValueServiceImpl.java", "diffHunk": "@@ -1481,6 +1481,16 @@ public void createTables(final Map<TableReference, byte[]> tablesToMetadata) {\n                 .collect(Collectors.toSet());\n     }\n \n+    @Override\n+    public Iterable<TableReference> getLimitedTableNames(int maxResults) {\n+        // Note: This is not optimal since getTableReferencesWithoutFiltering() loads *all* names, even though it\n+        // returns a Stream. Getting a partial list of table names might not be possible with cassandra thrift.\n+        return cassandraTables\n+                .getTableReferencesWithoutFiltering()\n+                .filter(tr -> !HiddenTables.isHidden(tr))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MDIyODU4", "url": "https://github.com/palantir/atlasdb/pull/5105#pullrequestreview-527022858", "createdAt": "2020-11-10T09:43:34Z", "commit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo0MzozNFrOHwUIcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowNDoxN1rOHwVAcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyMzUzNg==", "bodyText": "The guarantees are exactly the same as with getAllTableNames, so I'm OK with that", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520423536", "createdAt": "2020-11-10T09:43:34Z", "author": {"login": "gmaretic"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/KeyValueService.java", "diffHunk": "@@ -524,6 +524,14 @@ void deleteAllTimestamps(TableReference tableRef, Map<Cell, TimestampRangeDelete\n     @Idempotent\n     Set<TableReference> getAllTableNames();\n \n+    /**\n+     * Returns a list of up to {@code maxResults} tables stored in this key value service.\n+     *\n+     * This should be preferred over {@link #getAllTableNames()} if possible because the number of tables may be\n+     * unbounded.\n+     */\n+    Iterable<TableReference> getLimitedTableNames(int maxResults);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NDU1NA=="}, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzMDA1Mw==", "bodyText": "This comment seems to have been wron all along, has nothing to do with async initialisation?", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520430053", "createdAt": "2020-11-10T09:53:09Z", "author": {"login": "gmaretic"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/transaction/impl/SweepStrategyManagers.java", "diffHunk": "@@ -45,9 +56,8 @@ public static SweepStrategyManager createDefault(KeyValueService kvs) {\n                             .expireAfterAccess(1, TimeUnit.DAYS)\n                             .build(tableRef -> getSweepStrategy(kvs.getMetadataForTable(tableRef)));\n \n-                    // On async initialization, add all tables to optimize for cases when using mostly non-dynamic\n-                    // tables.\n-                    cache.putAll(getSweepStrategies(kvs));\n+                    // On async initialization, add a possibly limited number of tables to the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNTY4OA==", "bodyText": "Any reason why not to slab on a \"LIMIT maxResults\"?", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520435688", "createdAt": "2020-11-10T10:01:03Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/DbKvs.java", "diffHunk": "@@ -1137,6 +1138,26 @@ public void createTable(TableReference tableRef, byte[] tableMetadata) {\n         });\n     }\n \n+    @Override\n+    public Iterable<TableReference> getLimitedTableNames(int maxResults) {\n+        if (maxResults <= 0) {\n+            return Collections.emptyList();\n+        }\n+        return run(conn -> {\n+            try (AgnosticLightResultSet rows = conn.selectLightResultSetUnregisteredQuery(\n+                    \"SELECT table_name FROM \" + config.metadataTable().getQualifiedName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNjI1OQ==", "bodyText": "Same as above", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520436259", "createdAt": "2020-11-10T10:01:52Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/DbKvs.java", "diffHunk": "@@ -1163,6 +1184,26 @@ public void putMetadataForTable(TableReference tableRef, byte[] metadata) {\n         });\n     }\n \n+    @Override\n+    public Map<TableReference, byte[]> getLimitedMetadataForTables(int maxResults) {\n+        if (maxResults <= 0) {\n+            return Collections.emptyMap();\n+        }\n+        return run(conn -> {\n+            try (AgnosticLightResultSet rows = conn.selectLightResultSetUnregisteredQuery(\n+                    \"SELECT table_name, value FROM \" + config.metadataTable().getQualifiedName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNzg3Mg==", "bodyText": "Pretty clever \ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/5105#discussion_r520437872", "createdAt": "2020-11-10T10:04:17Z", "author": {"login": "gmaretic"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/impl/TableSplittingKeyValueService.java", "diffHunk": "@@ -195,6 +195,23 @@ public void dropTables(Set<TableReference> tableRefs) {\n         return ret;\n     }\n \n+    @Override\n+    public Iterable<TableReference> getLimitedTableNames(int maxResults) {\n+        Set<TableReference> ret = new HashSet<>();\n+        for (KeyValueService delegate : delegates) {\n+            // Note that this looks suboptimal, but there could be some overlap to the tables in each delegate.\n+            // If there is some overlap, we should at least reach maxResults (or the true total) by requesting\n+            // maxResults from each underlying KVS.\n+            for (TableReference tableRef : delegate.getLimitedTableNames(maxResults)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4c40ad591bfa0d6df700646e298c930ac4d383"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ff34c808b6069446eaabd422d2e07232938aece", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/7ff34c808b6069446eaabd422d2e07232938aece", "committedDate": "2020-11-10T22:39:42Z", "message": "remove getLimited versions of get tables/metadata\n\nTo avoid complexity, reducing change to just support FULL and NONE as\npossible options for cache warming. If desired we could implement\nlimited versions later with streams etc, but NONE should fix the\ninternal issue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59dbc384fc1fdadd5d3feb9500f106bc0c6c6b3a", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/59dbc384fc1fdadd5d3feb9500f106bc0c6c6b3a", "committedDate": "2020-11-10T22:35:21Z", "message": "remove getLimited versions of get tables/metadata\n\nTo avoid complexity, reducing change to just support FULL and NONE as\npossible options for cache warming. If desired we could implement\nlimited versions later with streams etc, but NONE should fix the\ninternal issue."}, "afterCommit": {"oid": "7ff34c808b6069446eaabd422d2e07232938aece", "author": {"user": {"login": "berler", "name": "Steven Berler"}}, "url": "https://github.com/palantir/atlasdb/commit/7ff34c808b6069446eaabd422d2e07232938aece", "committedDate": "2020-11-10T22:39:42Z", "message": "remove getLimited versions of get tables/metadata\n\nTo avoid complexity, reducing change to just support FULL and NONE as\npossible options for cache warming. If desired we could implement\nlimited versions later with streams etc, but NONE should fix the\ninternal issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjY3NTQ1", "url": "https://github.com/palantir/atlasdb/pull/5105#pullrequestreview-527667545", "createdAt": "2020-11-10T22:43:04Z", "commit": {"oid": "7ff34c808b6069446eaabd422d2e07232938aece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2492, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}