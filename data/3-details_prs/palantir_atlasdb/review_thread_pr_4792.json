{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTI5OTcx", "number": 4792, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyMTo1NlrOD_nNoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNDozNVrOD_nQug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDI5MzQ1OnYy", "diffSide": "RIGHT", "path": "lock-conjure-api/src/main/conjure/lock-api.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyMTo1NlrOGaX-hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDoyMzo1NFrOGcFbCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwODk5OQ==", "bodyText": "missed an opportunity to have a /laugh endpoint", "url": "https://github.com/palantir/atlasdb/pull/4792#discussion_r430308999", "createdAt": "2020-05-26T10:21:56Z", "author": {"login": "gmaretic"}, "path": "lock-conjure-api/src/main/conjure/lock-api.yml", "diffHunk": "@@ -29,6 +40,12 @@ services:\n     package: com.palantir.lock\n     base-path: /lk\n     endpoints:\n+      lockAndGetHeldLocks:\n+        http: POST /laghl/{namespace}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c90c01c0bd9952595741dc7663bd88f7e34f0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwMjE1NA==", "bodyText": "I could rename the endpoint to lockAndUltimatelyGetHeld \ud83d\ude04", "url": "https://github.com/palantir/atlasdb/pull/4792#discussion_r432102154", "createdAt": "2020-05-28T20:23:54Z", "author": {"login": "jeremyk-91"}, "path": "lock-conjure-api/src/main/conjure/lock-api.yml", "diffHunk": "@@ -29,6 +40,12 @@ services:\n     package: com.palantir.lock\n     base-path: /lk\n     endpoints:\n+      lockAndGetHeldLocks:\n+        http: POST /laghl/{namespace}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwODk5OQ=="}, "originalCommit": {"oid": "5c9c90c01c0bd9952595741dc7663bd88f7e34f0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDMwMDExOnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNDowOFrOGaYC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNDowOFrOGaYC5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDExNw==", "bodyText": "as(\"legacy impl can unlock a lock taken by conjure impl\")", "url": "https://github.com/palantir/atlasdb/pull/4792#discussion_r430310117", "createdAt": "2020-05-26T10:24:08Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -362,6 +365,41 @@ public void directLegacyAndConjureLockServicesInteractCorrectly() throws Interru\n                 .isFalse();\n     }\n \n+    @Test\n+    public void lockAcquiredByConjureLockServiceIsAlsoAcquiredInLegacy() throws InterruptedException {\n+        com.palantir.lock.LockRequest lockRequest = com.palantir.lock.LockRequest.builder(\n+                ImmutableSortedMap.<LockDescriptor, LockMode>naturalOrder()\n+                        .put(StringLockDescriptor.of(\"lock\"), LockMode.WRITE)\n+                        .build())\n+                .doNotBlock()\n+                .build();\n+        String anonymousId = LockClient.ANONYMOUS.getClientId();\n+        ConjureLockV1Request conjureLockRequest = ConjureLockV1Request.builder()\n+                .lockClient(anonymousId)\n+                .lockRequest(lockRequest)\n+                .build();\n+\n+        HeldLocksToken token = client.conjureLegacyLockService().lockAndGetHeldLocks(\n+                AuthHeader.valueOf(\"Bearer unused\"),\n+                client.namespace(),\n+                conjureLockRequest)\n+                .orElseThrow(() -> new RuntimeException(\"We should have been able to get the lock\"));\n+\n+        assertThat(client.legacyLockService().lockAndGetHeldLocks(anonymousId, lockRequest))\n+                .as(\"if the conjure impl has taken a lock, the legacy impl mustn't be able to take it\")\n+                .isNull();\n+        assertThat(client.legacyLockService().unlock(token.getLockRefreshToken())).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c90c01c0bd9952595741dc7663bd88f7e34f0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDMwMTM4OnYy", "diffSide": "RIGHT", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNDozNVrOGaYDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo0NTowN1rOGae8yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDMzNQ==", "bodyText": "not unlocked by conjure impl", "url": "https://github.com/palantir/atlasdb/pull/4792#discussion_r430310335", "createdAt": "2020-05-26T10:24:35Z", "author": {"login": "gmaretic"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -362,6 +365,41 @@ public void directLegacyAndConjureLockServicesInteractCorrectly() throws Interru\n                 .isFalse();\n     }\n \n+    @Test\n+    public void lockAcquiredByConjureLockServiceIsAlsoAcquiredInLegacy() throws InterruptedException {\n+        com.palantir.lock.LockRequest lockRequest = com.palantir.lock.LockRequest.builder(\n+                ImmutableSortedMap.<LockDescriptor, LockMode>naturalOrder()\n+                        .put(StringLockDescriptor.of(\"lock\"), LockMode.WRITE)\n+                        .build())\n+                .doNotBlock()\n+                .build();\n+        String anonymousId = LockClient.ANONYMOUS.getClientId();\n+        ConjureLockV1Request conjureLockRequest = ConjureLockV1Request.builder()\n+                .lockClient(anonymousId)\n+                .lockRequest(lockRequest)\n+                .build();\n+\n+        HeldLocksToken token = client.conjureLegacyLockService().lockAndGetHeldLocks(\n+                AuthHeader.valueOf(\"Bearer unused\"),\n+                client.namespace(),\n+                conjureLockRequest)\n+                .orElseThrow(() -> new RuntimeException(\"We should have been able to get the lock\"));\n+\n+        assertThat(client.legacyLockService().lockAndGetHeldLocks(anonymousId, lockRequest))\n+                .as(\"if the conjure impl has taken a lock, the legacy impl mustn't be able to take it\")\n+                .isNull();\n+        assertThat(client.legacyLockService().unlock(token.getLockRefreshToken())).isTrue();\n+        assertThat(client.legacyLockService().lockAndGetHeldLocks(anonymousId, lockRequest))\n+                .as(\"a lock once unlocked by conjure impl can be acquired by legacy impl\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9c90c01c0bd9952595741dc7663bd88f7e34f0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMzI0Mw==", "bodyText": "oops \ud83d\udd2a yeah, lock taken by conjure impl that was unlocked, can now be acquired by legacy impl", "url": "https://github.com/palantir/atlasdb/pull/4792#discussion_r430423243", "createdAt": "2020-05-26T13:45:07Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -362,6 +365,41 @@ public void directLegacyAndConjureLockServicesInteractCorrectly() throws Interru\n                 .isFalse();\n     }\n \n+    @Test\n+    public void lockAcquiredByConjureLockServiceIsAlsoAcquiredInLegacy() throws InterruptedException {\n+        com.palantir.lock.LockRequest lockRequest = com.palantir.lock.LockRequest.builder(\n+                ImmutableSortedMap.<LockDescriptor, LockMode>naturalOrder()\n+                        .put(StringLockDescriptor.of(\"lock\"), LockMode.WRITE)\n+                        .build())\n+                .doNotBlock()\n+                .build();\n+        String anonymousId = LockClient.ANONYMOUS.getClientId();\n+        ConjureLockV1Request conjureLockRequest = ConjureLockV1Request.builder()\n+                .lockClient(anonymousId)\n+                .lockRequest(lockRequest)\n+                .build();\n+\n+        HeldLocksToken token = client.conjureLegacyLockService().lockAndGetHeldLocks(\n+                AuthHeader.valueOf(\"Bearer unused\"),\n+                client.namespace(),\n+                conjureLockRequest)\n+                .orElseThrow(() -> new RuntimeException(\"We should have been able to get the lock\"));\n+\n+        assertThat(client.legacyLockService().lockAndGetHeldLocks(anonymousId, lockRequest))\n+                .as(\"if the conjure impl has taken a lock, the legacy impl mustn't be able to take it\")\n+                .isNull();\n+        assertThat(client.legacyLockService().unlock(token.getLockRefreshToken())).isTrue();\n+        assertThat(client.legacyLockService().lockAndGetHeldLocks(anonymousId, lockRequest))\n+                .as(\"a lock once unlocked by conjure impl can be acquired by legacy impl\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMDMzNQ=="}, "originalCommit": {"oid": "5c9c90c01c0bd9952595741dc7663bd88f7e34f0"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2866, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}