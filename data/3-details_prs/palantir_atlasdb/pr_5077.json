{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDMzMTAx", "number": 5077, "title": "[DB TimeLock] 3Q - Simplify DbTimestampCreationSetting To Only Apply To DB TimeLock", "bodyText": "Goals (and why):\n\nMake DB timelock code easier to reason about\n\nImplementation Description (bullets):\n\nWe had DbTimestampCreationSetting be an algebraic datatype with single and multi series options.\nBut we don't actually need to use the cases at runtime, because they are known at compile time: the path through AtlasDbFactory must be single series (embedded) while the path through DbTimeLockFactory must be multi-series.\nDbTimeLockFactory was only introduced in #5028 which I guess is why the original cases thing was needed.\n\nTesting (What was existing testing like?  What have you done to improve it?):\nNothing new, existing tests passing should be fine\nConcerns (what feedback would you like?):\nDid I accidentally break something?\nWhere should we start reviewing?: DbTimestampCreationSetting\nPriority (whenever / two weeks / yesterday): this week would be nice", "createdAt": "2020-10-22T16:59:53Z", "url": "https://github.com/palantir/atlasdb/pull/5077", "merged": true, "mergeCommit": {"oid": "a9e388a053629247086c2cd47291f22845d06aff"}, "closed": true, "closedAt": "2020-10-29T22:32:34Z", "author": {"login": "jeremyk-91"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVE7zPgH2gAyNTA4NDMzMTAxOjJiMTMwYmE1OTIyMDM4MmRhNTZjMzQxMGIwMmMxMDdhOWYyYTJiODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXY_kdgH2gAyNTA4NDMzMTAxOjRhODgyMmMzNzVmOWRjYmZhOTkyMWEwYmVlNWI2NDA4YWZkM2ExYWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b130ba59220382da56c3410b02c107a9f2a2b83", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/2b130ba59220382da56c3410b02c107a9f2a2b83", "committedDate": "2020-10-22T16:54:35Z", "message": "[DB TimeLock] 3Q - Pay Down Tech Debt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjU3NzE0", "url": "https://github.com/palantir/atlasdb/pull/5077#pullrequestreview-516657714", "createdAt": "2020-10-26T10:49:07Z", "commit": {"oid": "2b130ba59220382da56c3410b02c107a9f2a2b83"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDo0OTowOFrOHoKE0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDo1MjozMlrOHoKMiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3MDE2MQ==", "bodyText": "nit: inline?", "url": "https://github.com/palantir/atlasdb/pull/5077#discussion_r511870161", "createdAt": "2020-10-26T10:49:08Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/DbAtlasDbFactory.java", "diffHunk": "@@ -95,49 +91,26 @@ public ManagedTimestampService createManagedTimestampService(\n                 rawKvs.getClass());\n         ConnectionManagerAwareDbKvs dbkvs = (ConnectionManagerAwareDbKvs) rawKvs;\n \n-        return PersistentTimestampServiceImpl.create(createTimestampBoundStore(creationParameters, dbkvs));\n+        return PersistentTimestampServiceImpl.create(createTimestampBoundStore(tableReferenceOverride, dbkvs));\n     }\n \n     private static InDbTimestampBoundStore createTimestampBoundStore(\n-            Optional<DbTimestampCreationSetting> creationParameters, ConnectionManagerAwareDbKvs dbkvs) {\n-        return creationParameters\n-                .map(params -> DbTimestampCreationSettings.caseOf(params)\n-                        .multipleSeries((table, series) -> multiSeries(dbkvs, table, series))\n-                        .singleSeries(table -> singleSeries(dbkvs, table)))\n-                .orElseGet(() -> defaultTimestampBoundStore(dbkvs));\n-    }\n-\n-    private static InDbTimestampBoundStore singleSeries(\n-            ConnectionManagerAwareDbKvs dbkvs, Optional<TableReference> tableRef) {\n+            Optional<TableReference> tableRef, ConnectionManagerAwareDbKvs dbkvs) {\n         // Not using the table prefix here, as the tableRef should contain any necessary prefix.\n         return tableRef.map(reference -> InDbTimestampBoundStore.create(dbkvs.getConnectionManager(), reference))\n                 .orElseGet(() -> defaultTimestampBoundStore(dbkvs));\n     }\n \n-    private static InDbTimestampBoundStore multiSeries(\n-            ConnectionManagerAwareDbKvs dbkvs, TableReference tableRef, TimestampSeries series) {\n-        return InDbTimestampBoundStore.createForMultiSeries(dbkvs.getConnectionManager(), tableRef, series);\n-    }\n-\n     private static InDbTimestampBoundStore defaultTimestampBoundStore(ConnectionManagerAwareDbKvs dbkvs) {\n         return InDbTimestampBoundStore.create(\n                 dbkvs.getConnectionManager(), defaultTimestampTable(), defaultTablePrefix(dbkvs));\n     }\n \n     @Override\n     public TimestampStoreInvalidator createTimestampStoreInvalidator(\n-            KeyValueService rawKvs, Optional<DbTimestampCreationSetting> creationParameters) {\n+            KeyValueService rawKvs, Optional<TableReference> tableReference) {\n         ConnectionManagerAwareDbKvs dbkvs = (ConnectionManagerAwareDbKvs) rawKvs;\n-        return creationParameters\n-                .map(params -> DbTimestampCreationSettings.caseOf(params)\n-                        .singleSeries(table -> timestampStoreInvalidator(dbkvs, table))\n-                        .otherwise(() -> {\n-                            throw new SafeIllegalStateException(\n-                                    \"Invalidator must only be called by embedded DB timeLock that \"\n-                                            + \"does not support multi series timestamp store. This is unexpected, \"\n-                                            + \"please contact support.\");\n-                        }))\n-                .orElseGet(() -> timestampStoreInvalidator(dbkvs, Optional.empty()));\n+        return timestampStoreInvalidator(dbkvs, tableReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b130ba59220382da56c3410b02c107a9f2a2b83"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg3MjEzNg==", "bodyText": "Would it be useful to validation checks here i.e. tableReferenceOverride is not DB_TIMELOCK_TIMESTAMP_TABLE?", "url": "https://github.com/palantir/atlasdb/pull/5077#discussion_r511872136", "createdAt": "2020-10-26T10:52:32Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/DbAtlasDbFactory.java", "diffHunk": "@@ -84,7 +80,7 @@ public KeyValueService createRawKeyValueService(\n \n     @Override\n     public ManagedTimestampService createManagedTimestampService(\n-            KeyValueService rawKvs, Optional<DbTimestampCreationSetting> creationParameters, boolean initializeAsync) {\n+            KeyValueService rawKvs, Optional<TableReference> tableReferenceOverride, boolean initializeAsync) {\n         if (initializeAsync) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b130ba59220382da56c3410b02c107a9f2a2b83"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTM2OTc1", "url": "https://github.com/palantir/atlasdb/pull/5077#pullrequestreview-517936975", "createdAt": "2020-10-27T17:01:33Z", "commit": {"oid": "2b130ba59220382da56c3410b02c107a9f2a2b83"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzowMTozNFrOHpG8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzowMTozNFrOHpG8hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg2NzQ2Mw==", "bodyText": "Why did we remove this test?", "url": "https://github.com/palantir/atlasdb/pull/5077#discussion_r512867463", "createdAt": "2020-10-27T17:01:34Z", "author": {"login": "gmaretic"}, "path": "atlasdb-dbkvs-tests/src/test/java/com/palantir/atlasdb/keyvalue/dbkvs/DbTimestampStoreInvalidatorCreationTest.java", "diffHunk": "@@ -75,35 +71,15 @@ public void setUp() {\n         invalidationRunner.createTableIfDoesNotExist();\n     }\n \n-    @Test\n-    public void doesNotInvalidateMultiSeriesTable() {\n-        assertThatThrownBy(() -> storeUpperLimitAndGetTimestampStoreInvalidator(Optional.of(\n-                        DbTimestampCreationSettings.multipleSeries(otherTable, TimestampSeries.of(\"test\")))))\n-                .isInstanceOf(SafeIllegalStateException.class)\n-                .hasMessageContaining(\"Invalidator must only be called by embedded DB timeLock that does not support \"\n-                        + \"multi series timestamp store. This is unexpected, please contact support.\");\n-    }\n-\n     @Test\n     public void canInvalidatorForSingleSeriesTable() {\n-        TimestampStoreInvalidator timestampStoreInvalidator = storeUpperLimitAndGetTimestampStoreInvalidator(\n-                Optional.of(DbTimestampCreationSettings.singleSeries(Optional.of(otherTable))));\n+        TimestampStoreInvalidator timestampStoreInvalidator =\n+                storeUpperLimitAndGetTimestampStoreInvalidator(Optional.of(otherTable));\n         assertThat(timestampStoreInvalidator.backupAndInvalidate()).isEqualTo(TIMESTAMP_1);\n \n         assertBoundNotReadableAfterBeingPoisoned(otherStore);\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b130ba59220382da56c3410b02c107a9f2a2b83"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b7a9a850f66445b206dc2430545d2696f7ae72", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/77b7a9a850f66445b206dc2430545d2696f7ae72", "committedDate": "2020-10-29T17:31:04Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3d334f7ba1a99530b58637bbfa7fc30a4b6c6e", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/8a3d334f7ba1a99530b58637bbfa7fc30a4b6c6e", "committedDate": "2020-10-29T20:21:04Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a8822c375f9dcbfa9921a0bee5b6408afd3a1ac", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/4a8822c375f9dcbfa9921a0bee5b6408afd3a1ac", "committedDate": "2020-10-29T21:24:39Z", "message": "fail"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2424, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}