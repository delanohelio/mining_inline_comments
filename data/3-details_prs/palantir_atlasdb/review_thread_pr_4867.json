{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjQzNDM1", "number": 4867, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyMDoxN1rOEJHLJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyNzo1NlrOEJHURQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTkwMTgxOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyMDoxN1rOGpeyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo1MTo0OVrOGpl9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0OTE2Nw==", "bodyText": "Maybe we can extract out the always blocking filter; would be more readable.", "url": "https://github.com/palantir/atlasdb/pull/4867#discussion_r446149167", "createdAt": "2020-06-26T12:20:17Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java", "diffHunk": "@@ -31,16 +33,35 @@\n import com.palantir.lock.v2.WaitForLocksRequest;\n import com.palantir.lock.v2.WaitForLocksResponse;\n import com.palantir.timestamp.TimestampRange;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n \n public class InstrumentedTimelockService implements TimelockService {\n     private final TimelockService timelockService;\n     private final Meter success;\n     private final Meter fail;\n \n-    public InstrumentedTimelockService(TimelockService timelockService, MetricRegistry metricRegistry) {\n+    private InstrumentedTimelockService(TimelockService timelockService, MetricsManager metricsManager) {\n         this.timelockService = timelockService;\n-        this.success = metricRegistry.meter(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST);\n-        this.fail = metricRegistry.meter(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST);\n+        this.success = metricsManager.registerOrGetTaggedMeter(\n+                InstrumentedTimelockService.class,\n+                AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST,\n+                ImmutableMap.of());\n+        this.fail = metricsManager.registerOrGetTaggedMeter(\n+                InstrumentedTimelockService.class,\n+                AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST,\n+                ImmutableMap.of());\n+    }\n+\n+    public static TimelockService create(TimelockService timelockService, MetricsManager metricsManager) {\n+        // The instrumentation here is used primarily for the health check, not for external viewing.\n+        metricsManager.addMetricFilter(\n+                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST).build(),\n+                () -> false);\n+        metricsManager.addMetricFilter(\n+                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST).build(),\n+                () -> false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ddc3d4d93ffe1257ddba244e0937b9379aa30f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2Njc4Mg==", "bodyText": "Will do", "url": "https://github.com/palantir/atlasdb/pull/4867#discussion_r446266782", "createdAt": "2020-06-26T15:51:49Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java", "diffHunk": "@@ -31,16 +33,35 @@\n import com.palantir.lock.v2.WaitForLocksRequest;\n import com.palantir.lock.v2.WaitForLocksResponse;\n import com.palantir.timestamp.TimestampRange;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n \n public class InstrumentedTimelockService implements TimelockService {\n     private final TimelockService timelockService;\n     private final Meter success;\n     private final Meter fail;\n \n-    public InstrumentedTimelockService(TimelockService timelockService, MetricRegistry metricRegistry) {\n+    private InstrumentedTimelockService(TimelockService timelockService, MetricsManager metricsManager) {\n         this.timelockService = timelockService;\n-        this.success = metricRegistry.meter(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST);\n-        this.fail = metricRegistry.meter(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST);\n+        this.success = metricsManager.registerOrGetTaggedMeter(\n+                InstrumentedTimelockService.class,\n+                AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST,\n+                ImmutableMap.of());\n+        this.fail = metricsManager.registerOrGetTaggedMeter(\n+                InstrumentedTimelockService.class,\n+                AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST,\n+                ImmutableMap.of());\n+    }\n+\n+    public static TimelockService create(TimelockService timelockService, MetricsManager metricsManager) {\n+        // The instrumentation here is used primarily for the health check, not for external viewing.\n+        metricsManager.addMetricFilter(\n+                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST).build(),\n+                () -> false);\n+        metricsManager.addMetricFilter(\n+                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST).build(),\n+                () -> false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0OTE2Nw=="}, "originalCommit": {"oid": "2ddc3d4d93ffe1257ddba244e0937b9379aa30f0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTkyNTE3OnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyNzo1NlrOGpfAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMjoyNzo1NlrOGpfAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MjgyMA==", "bodyText": "I am confused b/w the description and implementation of filter here.", "url": "https://github.com/palantir/atlasdb/pull/4867#discussion_r446152820", "createdAt": "2020-06-26T12:27:56Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java", "diffHunk": "@@ -42,8 +46,13 @@ public static AdjustableSweepBatchConfigSource create(\n             Supplier<SweepBatchConfig> rawSweepBatchConfig) {\n         AdjustableSweepBatchConfigSource configSource = new AdjustableSweepBatchConfigSource(rawSweepBatchConfig);\n \n+        Gauge<Double> gauge = AdjustableSweepBatchConfigSource::getBatchSizeMultiplier;\n+        metricsManager.addMetricFilter(AdjustableSweepBatchConfigSource.class,\n+                \"batchSizeMultiplier\",\n+                ImmutableMap.of(),\n+                () -> gauge.getValue() != 1.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6593bf312c43d65fbd9d63f3c9a7ede01041d0"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2691, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}