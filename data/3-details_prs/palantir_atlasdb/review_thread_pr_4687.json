{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODc4MjUz", "number": 4687, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxNzoxMFrODtL3Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowODoxMFrODtoCDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzA2ODMwOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxNzoxMFrOF-dqtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoxNzoxMFrOF-dqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MjEwMg==", "bodyText": "this refactor is unnecessary - ImmutableMap is in insertion order", "url": "https://github.com/palantir/atlasdb/pull/4687#discussion_r401042102", "createdAt": "2020-03-31T16:17:10Z", "author": {"login": "j-baker"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -476,19 +477,19 @@ public void disableReadWriteConflictChecking(TableReference tableRef) {\n     private Iterator<Map.Entry<Cell, Value>> getRowColumnRangePostFiltered(\n             TableReference tableRef, RowColumnRangeIterator iterator, int batchHint) {\n         return Iterators.concat(Iterators.transform(Iterators.partition(iterator, batchHint), batch -> {\n-            ImmutableMap.Builder<Cell, Value> rawBuilder = ImmutableMap.builder();\n-            batch.forEach(rawBuilder::put);\n-            Map<Cell, Value> raw = rawBuilder.build();\n+            // N.B. This batch could be spread across multiple rows, and those rows might extend into other\n+            // batches. We are given cells for a row grouped together, so easiest way to ensure they stay together\n+            // is to preserve the original order.\n+            Map<Cell, Value> raw = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1aedd2b1667caaf89db64e34000044e222cb22d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTY4Mzk5OnYy", "diffSide": "RIGHT", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowODoxMFrOF_KU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyMjoyMlrOF_K38Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3Mzc4MQ==", "bodyText": "can you comment why this test is there?", "url": "https://github.com/palantir/atlasdb/pull/4687#discussion_r401773781", "createdAt": "2020-04-01T17:08:10Z", "author": {"login": "j-baker"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java", "diffHunk": "@@ -1184,6 +1226,7 @@ public void testRowsColumnRangesSingleIteratorVersion() {\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 5);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 10);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(100, 100, 99);\n+        runTestForGetRowsColumnRangeSingleIteratorVersion(100, 11, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e806c64230d736027d652f65f7f8a7cf4cc907fd"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4Mjc2OQ==", "bodyText": "done! Wanted to test when a row's cells are spread across multiple batches", "url": "https://github.com/palantir/atlasdb/pull/4687#discussion_r401782769", "createdAt": "2020-04-01T17:22:22Z", "author": {"login": "mswintermeyer"}, "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java", "diffHunk": "@@ -1184,6 +1226,7 @@ public void testRowsColumnRangesSingleIteratorVersion() {\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 5);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 10);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(100, 100, 99);\n+        runTestForGetRowsColumnRangeSingleIteratorVersion(100, 11, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3Mzc4MQ=="}, "originalCommit": {"oid": "e806c64230d736027d652f65f7f8a7cf4cc907fd"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3029, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}