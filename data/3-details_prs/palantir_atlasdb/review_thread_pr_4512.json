{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMjQ3MzY3", "number": 4512, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoxNjo0N1rODYQA2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTozMDowOVrODYneIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU0Nzc4OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoxNjo0N1rOFeABVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozNjo1NFrOFeApFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMTk0Mw==", "bodyText": "can this be imported? it pushes everything to the far right", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367001943", "createdAt": "2020-01-15T17:16:47Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -27,76 +27,76 @@\n \n import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n \n-public interface PersistentTimestampStore extends AutoCloseable {\n+public interface PersistentStore extends AutoCloseable {\n     @Value.Immutable\n     interface StoreNamespace {\n         String humanReadableName();\n         UUID uniqueName();\n     }\n \n     /**\n-     * Gets the commit timestamp associated with the entry specified by {@code startTs}.\n+     * Gets the value associated with the entry specified by {@code key}.\n      *\n-     * @param storeNamespace handle to the namespace from which we want to retrieve the commit timestamp\n-     * @param startTs        entry key for which we want to retrieve commit timestamp\n-     * @return the associated timestamp or null if the entry is missing\n-     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a\n-     * handle to a non existing namespace\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the associated value or null if the entry is missing\n+     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a handle to a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMjExNw==", "bodyText": "Imported.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367012117", "createdAt": "2020-01-15T17:36:54Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -27,76 +27,76 @@\n \n import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n \n-public interface PersistentTimestampStore extends AutoCloseable {\n+public interface PersistentStore extends AutoCloseable {\n     @Value.Immutable\n     interface StoreNamespace {\n         String humanReadableName();\n         UUID uniqueName();\n     }\n \n     /**\n-     * Gets the commit timestamp associated with the entry specified by {@code startTs}.\n+     * Gets the value associated with the entry specified by {@code key}.\n      *\n-     * @param storeNamespace handle to the namespace from which we want to retrieve the commit timestamp\n-     * @param startTs        entry key for which we want to retrieve commit timestamp\n-     * @return the associated timestamp or null if the entry is missing\n-     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a\n-     * handle to a non existing namespace\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the associated value or null if the entry is missing\n+     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a handle to a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMTk0Mw=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU0OTIxOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoxNzoyMlrOFeACYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNTo0N1rOFeklbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjIxMA==", "bodyText": "The name is misleading and unintuitive and not really comparable to a TableReference. It should be called something else.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367002210", "createdAt": "2020-01-15T17:17:22Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjg5MA==", "bodyText": "also, I'd drop the concept of namespace, it's currently overloaded i.e. it's not the same thing as a timelock namespace or a c* namespace/keyspace and it's an extra concept. Something along the lines of: createHandleForNamespace if that's the distinction you're going for.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367002890", "createdAt": "2020-01-15T17:18:48Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjIxMA=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTAwNg==", "bodyText": "Agree, though I think we should track this on another PR (StoreNamespace is already used quite a lot through this project).", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601006", "createdAt": "2020-01-16T19:15:47Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjIxMA=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU1NzEyOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoxOTo1NlrOFeAHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozODo1MVrOFeAs1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzQ2Mw==", "bodyText": "Persistent -> Persistence?\nIs this generic i.e. it's not necessarily for a TimestampCache? Do we want this outside of the original goal?", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367003463", "createdAt": "2020-01-15T17:19:56Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMzA3OQ==", "bodyText": "The way things are used in internal ski product I need to store things which might not be just Long -> Long, so to be able to support that I need generics.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367013079", "createdAt": "2020-01-15T17:38:51Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzQ2Mw=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU1ODk1OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyMDoyNVrOFeAIVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1MzowNVrOFeBHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzczNQ==", "bodyText": "if you are making a new api, can it not be @Nullable and use Optional's?", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367003735", "createdAt": "2020-01-15T17:20:25Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxOTg5Mg==", "bodyText": "It is now optional.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367019892", "createdAt": "2020-01-15T17:53:05Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzczNQ=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU2MTQxOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyMTowN1rOFeAJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNToxM1rOFekkcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDEyMQ==", "bodyText": "nit: will defer to @jeremyk-91, just overload get and put, as opposed to multiget?", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367004121", "createdAt": "2020-01-15T17:21:07Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMDc1Mw==", "bodyText": "Yep, overloading seems reasonable", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367600753", "createdAt": "2020-01-16T19:15:13Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDEyMQ=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU2Mjg5OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyMTozN1rOFeAKzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjozNDowOVrOFeX5SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDM2NA==", "bodyText": "What does dropping even mean here? This class is super abstract and it's still unclear what it's for.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367004364", "createdAt": "2020-01-15T17:21:37Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);\n+\n+    /**\n+     * Drops the namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MzA5Nw==", "bodyText": "Added a more detailed doc. The explanation is in the previous comment.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367393097", "createdAt": "2020-01-16T12:34:09Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);\n+\n+    /**\n+     * Drops the namespace.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDM2NA=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU2OTU3OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyMzozMVrOFeAOzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1OTozNFrOFeBTdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTM4OA==", "bodyText": "what's with the question mark generics?\nproposal/namespace/descriptor? can we agree on the terminology?", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367005388", "createdAt": "2020-01-15T17:23:31Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -132,8 +134,8 @@ public Long getCommitTimestampIfPresent(Long startTimestamp) {\n     }\n \n     private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n-            PersistentTimestampStore persistentTimestampStore) {\n-        StoreNamespace proposal = persistentTimestampStore.createNamespace(TIMESTAMP_CACHE_NAMESPACE);\n+            LogicalPersistentStore<?, ?> persistentStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMjk2NA==", "bodyText": "Proposal and descriptor are internal to cache. I changed now the access modifier for CacheDescriptor", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367022964", "createdAt": "2020-01-15T17:59:34Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -132,8 +134,8 @@ public Long getCommitTimestampIfPresent(Long startTimestamp) {\n     }\n \n     private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n-            PersistentTimestampStore persistentTimestampStore) {\n-        StoreNamespace proposal = persistentTimestampStore.createNamespace(TIMESTAMP_CACHE_NAMESPACE);\n+            LogicalPersistentStore<?, ?> persistentStore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTM4OA=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU3NzI2OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyNjowMlrOFeATyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1MDozM1rOFeBCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNjY2NQ==", "bodyText": "If you're making the distinction between logical and physical, then the physical one should actually be PhysicalPersistentStore.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367006665", "createdAt": "2020-01-15T17:26:02Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.LogicalPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.common.streams.KeyedStream;\n+\n+/**\n+ * Stores timestamps using delta encoding for commit timestamp.\n+ */\n+public class TimestampStore implements LogicalPersistentStore<Long, Long> {\n+    private final PersistentStore physicalPersistentStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODY4NQ==", "bodyText": "Renamed.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367018685", "createdAt": "2020-01-15T17:50:33Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.LogicalPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.common.streams.KeyedStream;\n+\n+/**\n+ * Stores timestamps using delta encoding for commit timestamp.\n+ */\n+public class TimestampStore implements LogicalPersistentStore<Long, Long> {\n+    private final PersistentStore physicalPersistentStore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNjY2NQ=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU4NDU1OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyODoxN1rOFeAYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyODoxN1rOFeAYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNzg0NQ==", "bodyText": "It's still unclear to me the purpose of the refactoring here, this can still be in terms of timestamps no? do we actually have another use case for rocksdb?", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367007845", "createdAt": "2020-01-15T17:28:17Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentStore.java", "diffHunk": "@@ -46,52 +46,44 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Streams;\n import com.palantir.atlasdb.persistent.api.ImmutableStoreNamespace;\n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n-import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n import com.palantir.common.streams.KeyedStream;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.tracing.Tracers.ThrowingCallable;\n \n /**\n- * Implementation of the {@link PersistentTimestampStore} using RocksDB as the underlying persistent storage. Commit\n- * timestamp associated with the start timestamp is encoded using delta encoding. Created {@link StoreNamespace}s are\n- * backed by RocksDB ColumnFamilies such that calling {@link RocksDbPersistentTimestampStore#createNamespace(String)}\n- * with the same name will construct a new {@link ColumnFamilyHandle} for each call.\n+ * Implementation of the {@link PersistentStore} using RocksDB as the underlying persistent storage. Created\n+ * {@link StoreNamespace}s are backed by RocksDB ColumnFamilies such that calling\n+ * {@link RocksDbPersistentStore#createNamespace(String)} with the same name will construct a new\n+ * {@link ColumnFamilyHandle} for each call.\n  */\n-public final class RocksDbPersistentTimestampStore implements PersistentTimestampStore {\n-    private static final Logger log = LoggerFactory.getLogger(RocksDbPersistentTimestampStore.class);\n+public final class RocksDbPersistentStore implements PersistentStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU4NzU4OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/OffHeapTimestampCacheIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyOToxMFrOFeAaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyOToxMFrOFeAaIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODI5MA==", "bodyText": "Put rocks somewhere in the title, since this is an integration test of rocksdb", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367008290", "createdAt": "2020-01-15T17:29:10Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/OffHeapTimestampCacheIntegrationTests.java", "diffHunk": "@@ -29,8 +29,8 @@\n import org.rocksdb.RocksDB;\n import org.rocksdb.RocksDBException;\n \n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentTimestampStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n import com.palantir.atlasdb.util.MetricsManagers;\n \n public final class OffHeapTimestampCacheIntegrationTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU4ODYxOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzoyOTozNFrOFeAa3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozMDozNVrOFeAc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODQ3OA==", "bodyText": "similarly, add rocksdb somewhere to the title", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367008478", "createdAt": "2020-01-15T17:29:34Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+\n+public final class TimestampStoreTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODk4NA==", "bodyText": "or you can not use rocks here, and provide a mocked physical persistent store", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367008984", "createdAt": "2020-01-15T17:30:35Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+\n+public final class TimestampStoreTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODQ3OA=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzU5NjIyOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzozMTo1MlrOFeAfdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo0OTo1OVrOFeBBtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwOTY1NQ==", "bodyText": "As an aside, this is weird. Everything is quite generic until it isn't. Similar to the async c* stuff, this should be a PersistentStorageConfig.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367009655", "createdAt": "2020-01-15T17:31:52Z", "author": {"login": "felixdesouza"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java", "diffHunk": "@@ -17,14 +17,15 @@\n package com.palantir.atlasdb.factory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n \n public interface PersistentStorageFactory {\n     /**\n-     * Constructs a {@link com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentTimestampStore} using the\n-     * supplied configuration.\n+     * Constructs a {@link RocksDbPersistentStore} using the supplied configuration.\n+     *\n      * @param config to use to configure the store\n      * @return store to be used\n      */\n-    PersistentTimestampStore constructPersistentTimestampStore(RocksDbPersistentStorageConfig config);\n+    PersistentStore constructPersistentStore(RocksDbPersistentStorageConfig config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODQyMQ==", "bodyText": "This was intentional since there is only one config so this is to keep it simple. Can be address in following PRs.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367018421", "createdAt": "2020-01-15T17:49:59Z", "author": {"login": "OStevan"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java", "diffHunk": "@@ -17,14 +17,15 @@\n package com.palantir.atlasdb.factory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n \n public interface PersistentStorageFactory {\n     /**\n-     * Constructs a {@link com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentTimestampStore} using the\n-     * supplied configuration.\n+     * Constructs a {@link RocksDbPersistentStore} using the supplied configuration.\n+     *\n      * @param config to use to configure the store\n      * @return store to be used\n      */\n-    PersistentTimestampStore constructPersistentTimestampStore(RocksDbPersistentStorageConfig config);\n+    PersistentStore constructPersistentStore(RocksDbPersistentStorageConfig config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwOTY1NQ=="}, "originalCommit": {"oid": "e445a4046a688999ac62d9cc40cf5501f5925dae"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM1MDIxOnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNjoxNlrOFekmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDowNzozMFrOFemAvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTIzNw==", "bodyText": "based on @felixdesouza's suggestion above, we can just overload get/put here.\nAlso I'd prefer to try to avoid unqualified Map<byte[], byte[]> as it's error-prone because byte arrays by default go by reference equality", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601237", "createdAt": "2020-01-16T19:16:16Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyNDM4MA==", "bodyText": "Changed to ByteString.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367624380", "createdAt": "2020-01-16T20:07:30Z", "author": {"login": "OStevan"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTIzNw=="}, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM1MTU3OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNjozN1rOFeknEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNjozN1rOFeknEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTQyNQ==", "bodyText": "nit: No need to declare runtime exceptions", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601425", "createdAt": "2020-01-16T19:16:37Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM1MTk0OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNjo0NlrOFeknSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxNjo0NlrOFeknSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTQ4Mw==", "bodyText": "nit: runtime exception", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601483", "createdAt": "2020-01-16T19:16:46Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code storeNamespace}.\n+     *\n+     * @param storeNamespace of the store to which we should store the entry\n+     * @param key            entry key\n+     * @param value          entry value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull byte[] key, @Nonnull byte[] value)\n+            throws SafeIllegalArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM2MDgzOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxOTo1M1rOFeks9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToxOTo1M1rOFeks9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMjkzMg==", "bodyText": "I'm a bit worried about maps with byte-array keys. Let's talk through this in person.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367602932", "createdAt": "2020-01-16T19:19:53Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java", "diffHunk": "@@ -101,23 +92,19 @@ public Long get(StoreNamespace storeNamespace, @Nonnull Long startTs) {\n                 Streams.zip(\n                         keys.stream(),\n                         byteValues.stream(),\n-                        (key, value) -> Maps.immutableEntry(key, deserializeValue(key, value))))\n+                        Maps::immutableEntry))\n                 .filter(Objects::nonNull)\n                 .collectToMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM2NTEwOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyMToxNlrOFekvkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMDowNzo0NFrOFemBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMzYwMQ==", "bodyText": "nit: probably want multiget returning multiple values?", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367603601", "createdAt": "2020-01-16T19:21:16Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n+\n+public final class RocksDbTimestampStoreTests {\n+    @ClassRule\n+    public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+    private static final String DEFAULT_NAMESPACE_NAME = \"default\";\n+\n+    private TimestampStore timestampStore;\n+    private RocksDbPhysicalPersistentStore persistentStore;\n+    private StoreNamespace defaultNamespace;\n+\n+    @Before\n+    public void before() throws RocksDBException, IOException {\n+        File databaseFolder = TEMPORARY_FOLDER.newFolder();\n+        RocksDB rocksDb = RocksDB.open(databaseFolder.getAbsolutePath());\n+\n+        persistentStore = new RocksDbPhysicalPersistentStore(rocksDb, databaseFolder);\n+        timestampStore = new TimestampStore(persistentStore);\n+\n+        defaultNamespace = persistentStore.createNamespace(DEFAULT_NAMESPACE_NAME);\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        persistentStore.close();\n+    }\n+\n+    @Test\n+    public void emptyResult() {\n+        assertThat(timestampStore.get(defaultNamespace, 1L)).isEmpty();\n+    }\n+\n+    @Test\n+    public void valueIsCorrectlyStored() {\n+        timestampStore.put(defaultNamespace, 1L, 2L);\n+\n+        assertThat(timestampStore.get(defaultNamespace, 1L)).hasValue(2L);\n+    }\n+\n+    @Test\n+    public void multiGetFilters() {\n+        timestampStore.put(defaultNamespace, 1L, 2L);\n+\n+        assertThat(timestampStore.multiGet(defaultNamespace, ImmutableList.of(1L, 3L)))\n+                .containsExactly(Maps.immutableEntry(1L, 2L));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyNDUwMQ==", "bodyText": "Added more values.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367624501", "createdAt": "2020-01-16T20:07:44Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n+\n+public final class RocksDbTimestampStoreTests {\n+    @ClassRule\n+    public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+    private static final String DEFAULT_NAMESPACE_NAME = \"default\";\n+\n+    private TimestampStore timestampStore;\n+    private RocksDbPhysicalPersistentStore persistentStore;\n+    private StoreNamespace defaultNamespace;\n+\n+    @Before\n+    public void before() throws RocksDBException, IOException {\n+        File databaseFolder = TEMPORARY_FOLDER.newFolder();\n+        RocksDB rocksDb = RocksDB.open(databaseFolder.getAbsolutePath());\n+\n+        persistentStore = new RocksDbPhysicalPersistentStore(rocksDb, databaseFolder);\n+        timestampStore = new TimestampStore(persistentStore);\n+\n+        defaultNamespace = persistentStore.createNamespace(DEFAULT_NAMESPACE_NAME);\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        persistentStore.close();\n+    }\n+\n+    @Test\n+    public void emptyResult() {\n+        assertThat(timestampStore.get(defaultNamespace, 1L)).isEmpty();\n+    }\n+\n+    @Test\n+    public void valueIsCorrectlyStored() {\n+        timestampStore.put(defaultNamespace, 1L, 2L);\n+\n+        assertThat(timestampStore.get(defaultNamespace, 1L)).hasValue(2L);\n+    }\n+\n+    @Test\n+    public void multiGetFilters() {\n+        timestampStore.put(defaultNamespace, 1L, 2L);\n+\n+        assertThat(timestampStore.multiGet(defaultNamespace, ImmutableList.of(1L, 3L)))\n+                .containsExactly(Maps.immutableEntry(1L, 2L));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMzYwMQ=="}, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM4NTk2OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyODoyNFrOFek8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOToyODoyNFrOFek8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNjkxMQ==", "bodyText": "This assertion feels fragile. In particular if I change the assertion to\n        assertThat(timestampMappingStore.multiGet(defaultNamespace, ImmutableList.of(KEY, KEY2, \"random\".getBytes())))\n                .containsExactlyInAnyOrderEntriesOf(ImmutableMap.of(\n                        KEY, VALUE,\n                        \"key2\".getBytes(), VALUE2)\n                );\n\nit fails. In general I think we want to either use ByteString for the return type of the persistent store, or use sorted maps.", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367606911", "createdAt": "2020-01-16T19:28:24Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java", "diffHunk": "@@ -115,21 +119,21 @@ public void droppingTwoTimesFailsOnSecond() {\n     public void testMultiPut() {\n         timestampMappingStore.multiPut(\n                 defaultNamespace,\n-                ImmutableMap.of(1L, 2L, 3L, 4L));\n+                ImmutableMap.of(KEY, VALUE, KEY2, VALUE2));\n \n-        assertThat(timestampMappingStore.get(defaultNamespace, 1L)).isEqualTo(2L);\n-        assertThat(timestampMappingStore.get(defaultNamespace, 3L)).isEqualTo(4L);\n+        assertThat(timestampMappingStore.get(defaultNamespace, KEY)).hasValue(VALUE);\n+        assertThat(timestampMappingStore.get(defaultNamespace, KEY2)).hasValue(VALUE2);\n     }\n \n     @Test\n     public void testMultiGet() {\n-        timestampMappingStore.put(defaultNamespace, 1L, 2L);\n-        timestampMappingStore.put(defaultNamespace, 3L, 4L);\n+        timestampMappingStore.put(defaultNamespace, KEY, VALUE);\n+        timestampMappingStore.put(defaultNamespace, KEY2, VALUE2);\n \n-        assertThat(timestampMappingStore.multiGet(defaultNamespace, ImmutableList.of(1L, 2L, 3L)))\n+        assertThat(timestampMappingStore.multiGet(defaultNamespace, ImmutableList.of(KEY, KEY2, \"random\".getBytes())))\n                 .containsExactlyInAnyOrderEntriesOf(ImmutableMap.of(\n-                        1L, 2L,\n-                        3L, 4L)\n+                        KEY, VALUE,\n+                        KEY2, VALUE2)\n                 );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTM5MTA1OnYy", "diffSide": "RIGHT", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTozMDowOVrOFek_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTozMDowOVrOFek_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNzY5MA==", "bodyText": "similarly, Map<byte[], byte[]> can be tricky", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367607690", "createdAt": "2020-01-16T19:30:09Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code storeNamespace}.\n+     *\n+     * @param storeNamespace of the store to which we should store the entry\n+     * @param key            entry key\n+     * @param value          entry value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull byte[] key, @Nonnull byte[] value)\n+            throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param storeNamespace of the store to which we should store the entry\n+     * @param toWrite        entry pairs to write\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<byte[], byte[]> toWrite);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a7cf342ef297db75e9da1a44424679e635f224"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2402, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}