{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjE1ODQ1", "number": 4802, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1ODowOFrOD_yRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NTozN1rOEAGb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjEwNDc4OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4802.v2.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1ODowOFrOGap2tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoxODowN1rOGaqnNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMTkxMQ==", "bodyText": "This is fine, but I would be a bit more specific on explaining the subset of users this actually applied to (i.e. previously if, and only if, you had used SQLite, leaderPaxos would be returned as part of the set of persisted namespaces). Otherwise it sounds like it was always being returned", "url": "https://github.com/palantir/atlasdb/pull/4802#discussion_r430601911", "createdAt": "2020-05-26T17:58:08Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4802.v2.yml", "diffHunk": "@@ -0,0 +1,6 @@\n+type: fix\n+fix:\n+  description: |\n+    `leaderPaxos` is filtered out from the set of persisted namespaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c0d8bf0c6839bba7bd0c9b7410a3a3ccf7490d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDMyNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/4802#discussion_r430614327", "createdAt": "2020-05-26T18:18:07Z", "author": {"login": "sudiksha27"}, "path": "changelog/@unreleased/pr-4802.v2.yml", "diffHunk": "@@ -0,0 +1,6 @@\n+type: fix\n+fix:\n+  description: |\n+    `leaderPaxos` is filtered out from the set of persisted namespaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMTkxMQ=="}, "originalCommit": {"oid": "95c0d8bf0c6839bba7bd0c9b7410a3a3ccf7490d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjExNDIxOnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1OTo0NVrOGap8oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NTowNVrOGbK1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMzQyNQ==", "bodyText": "Do we need to create the leader paxos directory somewhere before this?", "url": "https://github.com/palantir/atlasdb/pull/4802#discussion_r430603425", "createdAt": "2020-05-26T17:59:45Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -17,38 +17,73 @@\n package com.palantir.atlasdb.timelock.management;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n import java.util.Set;\n-import java.util.stream.Collectors;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n \n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.TimeLockServices;\n+import com.palantir.atlasdb.timelock.TimelockNamespaces;\n import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n-import com.palantir.paxos.Client;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.tokens.auth.AuthHeader;\n+import com.palantir.tritium.metrics.registry.DefaultTaggedMetricRegistry;\n \n public class DiskNamespaceLoaderTest {\n     private static final String NAMESPACE_1 = \"namespace_1\";\n     private static final String NAMESPACE_2 = \"namespace_2\";\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    @Mock private Function<String, TimeLockServices> serviceFactory;\n+    @Mock private Supplier<Integer> maxNumberOfClientsSupplier;\n+\n+    private final MetricsManager metricsManager = new MetricsManager(\n+            new MetricRegistry(),\n+            DefaultTaggedMetricRegistry.getDefault(),\n+            unused -> false);\n+    private TimeLockManagementResource timeLockManagementResource;\n \n     @Rule\n     public final TemporaryFolder tempFolder = new TemporaryFolder();\n \n-    public DiskNamespaceLoader diskNamespaceLoader;\n-\n     @Before\n-    public void setup() {\n-        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+    public void setup() throws MalformedURLException {\n+        URL testUrl = new URL(\"http\", \"host\", \"file\");\n+        RedirectRetryTargeter redirectRetryTargeter = RedirectRetryTargeter\n+                .create(testUrl, ImmutableList.of(testUrl));\n+\n+        Path rootFolderPath = tempFolder.getRoot().toPath();\n+        PersistentNamespaceContext persistentNamespaceContext = PersistentNamespaceContext.of(rootFolderPath, SqliteConnections\n+                        .createDefaultNamedSqliteDatabaseAtPath(rootFolderPath));\n+\n+        TimelockNamespaces namespaces = new TimelockNamespaces(metricsManager, serviceFactory, maxNumberOfClientsSupplier);\n+\n+        timeLockManagementResource = TimeLockManagementResource.create(persistentNamespaceContext,\n+                namespaces,\n+                redirectRetryTargeter);\n+\n         createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n         createDirectoryInRootDataDirectory(NAMESPACE_2);\n     }\n \n     @Test\n-    public void doesNotLoadLeaderPaxosAsNamespace() {\n-        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(Client::value).collect(\n-                Collectors.toSet());\n+    public void doesNotLoadLeaderPaxosAsNamespace() throws ExecutionException, InterruptedException {\n+        Set<String> namespaces = timeLockManagementResource.getNamespaces(AUTH_HEADER).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c0d8bf0c6839bba7bd0c9b7410a3a3ccf7490d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDE5OA==", "bodyText": "we do create one is the setup - createDirectoryForLeaderForEachClientUseCase, it is of LeaderForEachClient paxos use case pattern but I think that's sufficient for this test.", "url": "https://github.com/palantir/atlasdb/pull/4802#discussion_r430614198", "createdAt": "2020-05-26T18:17:54Z", "author": {"login": "sudiksha27"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -17,38 +17,73 @@\n package com.palantir.atlasdb.timelock.management;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n import java.util.Set;\n-import java.util.stream.Collectors;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n \n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.TimeLockServices;\n+import com.palantir.atlasdb.timelock.TimelockNamespaces;\n import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n-import com.palantir.paxos.Client;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.tokens.auth.AuthHeader;\n+import com.palantir.tritium.metrics.registry.DefaultTaggedMetricRegistry;\n \n public class DiskNamespaceLoaderTest {\n     private static final String NAMESPACE_1 = \"namespace_1\";\n     private static final String NAMESPACE_2 = \"namespace_2\";\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    @Mock private Function<String, TimeLockServices> serviceFactory;\n+    @Mock private Supplier<Integer> maxNumberOfClientsSupplier;\n+\n+    private final MetricsManager metricsManager = new MetricsManager(\n+            new MetricRegistry(),\n+            DefaultTaggedMetricRegistry.getDefault(),\n+            unused -> false);\n+    private TimeLockManagementResource timeLockManagementResource;\n \n     @Rule\n     public final TemporaryFolder tempFolder = new TemporaryFolder();\n \n-    public DiskNamespaceLoader diskNamespaceLoader;\n-\n     @Before\n-    public void setup() {\n-        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+    public void setup() throws MalformedURLException {\n+        URL testUrl = new URL(\"http\", \"host\", \"file\");\n+        RedirectRetryTargeter redirectRetryTargeter = RedirectRetryTargeter\n+                .create(testUrl, ImmutableList.of(testUrl));\n+\n+        Path rootFolderPath = tempFolder.getRoot().toPath();\n+        PersistentNamespaceContext persistentNamespaceContext = PersistentNamespaceContext.of(rootFolderPath, SqliteConnections\n+                        .createDefaultNamedSqliteDatabaseAtPath(rootFolderPath));\n+\n+        TimelockNamespaces namespaces = new TimelockNamespaces(metricsManager, serviceFactory, maxNumberOfClientsSupplier);\n+\n+        timeLockManagementResource = TimeLockManagementResource.create(persistentNamespaceContext,\n+                namespaces,\n+                redirectRetryTargeter);\n+\n         createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n         createDirectoryInRootDataDirectory(NAMESPACE_2);\n     }\n \n     @Test\n-    public void doesNotLoadLeaderPaxosAsNamespace() {\n-        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(Client::value).collect(\n-                Collectors.toSet());\n+    public void doesNotLoadLeaderPaxosAsNamespace() throws ExecutionException, InterruptedException {\n+        Set<String> namespaces = timeLockManagementResource.getNamespaces(AUTH_HEADER).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMzQyNQ=="}, "originalCommit": {"oid": "95c0d8bf0c6839bba7bd0c9b7410a3a3ccf7490d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MjM5NA==", "bodyText": "I see. Yep, that makes sense", "url": "https://github.com/palantir/atlasdb/pull/4802#discussion_r431142394", "createdAt": "2020-05-27T13:45:05Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -17,38 +17,73 @@\n package com.palantir.atlasdb.timelock.management;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n import java.util.Set;\n-import java.util.stream.Collectors;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n \n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.TimeLockServices;\n+import com.palantir.atlasdb.timelock.TimelockNamespaces;\n import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n-import com.palantir.paxos.Client;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.tokens.auth.AuthHeader;\n+import com.palantir.tritium.metrics.registry.DefaultTaggedMetricRegistry;\n \n public class DiskNamespaceLoaderTest {\n     private static final String NAMESPACE_1 = \"namespace_1\";\n     private static final String NAMESPACE_2 = \"namespace_2\";\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    @Mock private Function<String, TimeLockServices> serviceFactory;\n+    @Mock private Supplier<Integer> maxNumberOfClientsSupplier;\n+\n+    private final MetricsManager metricsManager = new MetricsManager(\n+            new MetricRegistry(),\n+            DefaultTaggedMetricRegistry.getDefault(),\n+            unused -> false);\n+    private TimeLockManagementResource timeLockManagementResource;\n \n     @Rule\n     public final TemporaryFolder tempFolder = new TemporaryFolder();\n \n-    public DiskNamespaceLoader diskNamespaceLoader;\n-\n     @Before\n-    public void setup() {\n-        diskNamespaceLoader = new DiskNamespaceLoader(tempFolder.getRoot().toPath());\n+    public void setup() throws MalformedURLException {\n+        URL testUrl = new URL(\"http\", \"host\", \"file\");\n+        RedirectRetryTargeter redirectRetryTargeter = RedirectRetryTargeter\n+                .create(testUrl, ImmutableList.of(testUrl));\n+\n+        Path rootFolderPath = tempFolder.getRoot().toPath();\n+        PersistentNamespaceContext persistentNamespaceContext = PersistentNamespaceContext.of(rootFolderPath, SqliteConnections\n+                        .createDefaultNamedSqliteDatabaseAtPath(rootFolderPath));\n+\n+        TimelockNamespaces namespaces = new TimelockNamespaces(metricsManager, serviceFactory, maxNumberOfClientsSupplier);\n+\n+        timeLockManagementResource = TimeLockManagementResource.create(persistentNamespaceContext,\n+                namespaces,\n+                redirectRetryTargeter);\n+\n         createDirectoryForLeaderForEachClientUseCase(NAMESPACE_1);\n         createDirectoryInRootDataDirectory(NAMESPACE_2);\n     }\n \n     @Test\n-    public void doesNotLoadLeaderPaxosAsNamespace() {\n-        Set<String> namespaces = diskNamespaceLoader.getAllPersistedNamespaces().stream().map(Client::value).collect(\n-                Collectors.toSet());\n+    public void doesNotLoadLeaderPaxosAsNamespace() throws ExecutionException, InterruptedException {\n+        Set<String> namespaces = timeLockManagementResource.getNamespaces(AUTH_HEADER).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMzQyNQ=="}, "originalCommit": {"oid": "95c0d8bf0c6839bba7bd0c9b7410a3a3ccf7490d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTQwODg3OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NTozN1rOGbK3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NTozN1rOGbK3cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0Mjc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final MetricsManager metricsManager = new MetricsManager(\n          \n          \n            \n                        new MetricRegistry(),\n          \n          \n            \n                        DefaultTaggedMetricRegistry.getDefault(),\n          \n          \n            \n                        unused -> false);\n          \n          \n            \n                private final MetricsManager metricsManager = MetricsManagers.createForTests();", "url": "https://github.com/palantir/atlasdb/pull/4802#discussion_r431142770", "createdAt": "2020-05-27T13:45:37Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/management/DiskNamespaceLoaderTest.java", "diffHunk": "@@ -17,38 +17,73 @@\n package com.palantir.atlasdb.timelock.management;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n import java.util.Set;\n-import java.util.stream.Collectors;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n \n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n \n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.TimeLockServices;\n+import com.palantir.atlasdb.timelock.TimelockNamespaces;\n import com.palantir.atlasdb.timelock.paxos.PaxosTimeLockConstants;\n-import com.palantir.paxos.Client;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.tokens.auth.AuthHeader;\n+import com.palantir.tritium.metrics.registry.DefaultTaggedMetricRegistry;\n \n public class DiskNamespaceLoaderTest {\n     private static final String NAMESPACE_1 = \"namespace_1\";\n     private static final String NAMESPACE_2 = \"namespace_2\";\n+    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n+    @Mock private Function<String, TimeLockServices> serviceFactory;\n+    @Mock private Supplier<Integer> maxNumberOfClientsSupplier;\n+\n+    private final MetricsManager metricsManager = new MetricsManager(\n+            new MetricRegistry(),\n+            DefaultTaggedMetricRegistry.getDefault(),\n+            unused -> false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96133377d6524ec054eebde5059f09713440184f"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2884, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}