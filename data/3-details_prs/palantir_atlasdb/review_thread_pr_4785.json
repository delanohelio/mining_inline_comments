{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTA4NzUw", "number": 4785, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxMTozNlrOD9cAFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxNTo1M1rOD9cHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzQ4NTAyOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxMTozNlrOGW7ogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxMTozNlrOGW7ogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5ODg4MA==", "bodyText": "\u2b50", "url": "https://github.com/palantir/atlasdb/pull/4785#discussion_r426698880", "createdAt": "2020-05-18T15:11:36Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -38,60 +40,95 @@\n     private final Client namespace;\n     private final String useCase;\n     private final Jdbi jdbi;\n+    private final ReadWriteLock sharedLock;\n \n-    private SqlitePaxosStateLog(NamespaceAndUseCase namespaceAndUseCase, Jdbi jdbi) {\n+    private SqlitePaxosStateLog(NamespaceAndUseCase namespaceAndUseCase, Jdbi jdbi, ReadWriteLock sharedLock) {\n         this.namespace = namespaceAndUseCase.namespace();\n         this.useCase = namespaceAndUseCase.useCase();\n         this.jdbi = jdbi;\n+        this.sharedLock = sharedLock;\n     }\n \n-    public static <V extends Persistable & Versionable> PaxosStateLog<V> create(NamespaceAndUseCase namespaceAndUseCase,\n-            Supplier<Connection> connectionSupplier) {\n+    private static <V extends Persistable & Versionable> PaxosStateLog<V> create(\n+            NamespaceAndUseCase namespaceAndUseCase,\n+            Supplier<Connection> connectionSupplier, ReadWriteLock sharedLock) {\n         Jdbi jdbi = Jdbi.create(connectionSupplier::get).installPlugin(new SqlObjectPlugin());\n         jdbi.getConfig(JdbiImmutables.class).registerImmutable(Client.class, PaxosRound.class);\n-        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(namespaceAndUseCase, jdbi);\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(namespaceAndUseCase, jdbi, sharedLock);\n         log.initialize();\n         return log;\n     }\n \n+    public static SqlitePaxosStateLogFactory createFactory() {\n+        return new SqlitePaxosStateLogFactory();\n+    }\n+\n     private void initialize() {\n-        execute(Queries::createTable);\n+        executeWrite(Queries::createTable);\n     }\n \n     @Override\n     public void writeRound(long seq, V round) {\n-        execute(dao -> dao.writeRound(namespace, useCase, seq, round.persistToBytes()));\n+        executeWrite(dao -> dao.writeRound(namespace, useCase, seq, round.persistToBytes()));\n     }\n \n     @Override\n     public void writeBatchOfRounds(Iterable<PaxosRound<V>> rounds) {\n-        execute(dao -> dao.writeBatchOfRounds(namespace, useCase, rounds));\n+        executeWrite(dao -> dao.writeBatchOfRounds(namespace, useCase, rounds));\n     }\n \n     @Override\n     public byte[] readRound(long seq) {\n-        return execute(dao -> dao.readRound(namespace, useCase, seq));\n+        return executeRead(dao -> dao.readRound(namespace, useCase, seq));\n     }\n \n     @Override\n     public long getLeastLogEntry() {\n-        return execute(dao -> dao.getLeastLogEntry(namespace, useCase)).orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+        return executeRead(dao -> dao.getLeastLogEntry(namespace, useCase)).orElse(PaxosAcceptor.NO_LOG_ENTRY);\n     }\n \n     @Override\n     public long getGreatestLogEntry() {\n-        return execute(dao -> dao.getGreatestLogEntry(namespace, useCase)).orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+        return executeRead(dao -> dao.getGreatestLogEntry(namespace, useCase)).orElse(PaxosAcceptor.NO_LOG_ENTRY);\n     }\n \n     @Override\n     public void truncate(long toDeleteInclusive) {\n-        execute(dao -> dao.truncate(namespace, useCase, toDeleteInclusive));\n+        executeWrite(dao -> dao.truncate(namespace, useCase, toDeleteInclusive));\n+    }\n+\n+    private <T> T executeWrite(Function<Queries, T> call) {\n+        sharedLock.writeLock().lock();\n+        try {\n+            return execute(call);\n+        } finally {\n+            sharedLock.writeLock().unlock();\n+        }\n+    }\n+\n+    private <T> T executeRead(Function<Queries, T> call) {\n+        sharedLock.readLock().lock();\n+        try {\n+            return execute(call);\n+        } finally {\n+            sharedLock.readLock().unlock();\n+        }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd6e832ab908fb148ff21dea957a7b7ce7a2469"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzUwNDI2OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxNTo1M1rOGW70mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNToxNTo1M1rOGW70mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwMTk3Ng==", "bodyText": "This is kind of unpleasant but I didn't find a better way to write it", "url": "https://github.com/palantir/atlasdb/pull/4785#discussion_r426701976", "createdAt": "2020-05-18T15:15:53Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "diffHunk": "@@ -179,14 +186,27 @@ public void valuesAreDistinguishedAcrossSequenceIdentifiers() throws IOException\n \n     @Test\n     public void differentLogsToTheSameNamespaceShareState() throws IOException {\n-        PaxosStateLog<PaxosValue> otherLogWithSameNamespace\n-                = SqlitePaxosStateLog.create(wrap(CLIENT_1, USE_CASE_1), connSupplier);\n+        PaxosStateLog<PaxosValue> otherLogWithSameNamespace = FACTORY.create(wrap(CLIENT_1, USE_CASE_1), conn);\n         writeValueForRound(1L);\n \n         assertThat(stateLog.readRound(1L)).isNotNull();\n         assertThat(otherLogWithSameNamespace.readRound(1L)).isEqualTo(stateLog.readRound(1L));\n     }\n \n+    @Test\n+    public void highConcurrencyDoesNotTimeoutWithSharedLock() {\n+        int numThreads = 100;\n+        ExecutorService executor = PTExecutors.newFixedThreadPool(numThreads);\n+        List<Future<?>> futures = IntStream.range(0, numThreads)\n+                .mapToObj(ignore -> executor.submit(() -> {\n+                    PaxosStateLog<PaxosValue> log = FACTORY.create(wrap(CLIENT_1, USE_CASE_1), conn);\n+                    for (int i = 0; i < 30; i++) {\n+                        log.writeRound(i, valueForRound(i));\n+                    }\n+                })).collect(Collectors.toList());\n+        futures.forEach(future -> assertThatCode(() -> Futures.getUnchecked(future)).doesNotThrowAnyException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afd6e832ab908fb148ff21dea957a7b7ce7a2469"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2852, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}