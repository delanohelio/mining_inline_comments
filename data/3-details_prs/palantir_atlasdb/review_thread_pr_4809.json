{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTQwNzQ1", "number": 4809, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo0Mjo0M1rOEAg0_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNzo1OVrOEAjoCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTczMzEwOnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo0Mjo0M1rOGb1qnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDo0NDoyN1rOGcX0JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0Mzk5Ng==", "bodyText": "We could work around this by making it Optional", "url": "https://github.com/palantir/atlasdb/pull/4809#discussion_r431843996", "createdAt": "2020-05-28T13:42:43Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -117,6 +129,28 @@ public static TimeLockAgent create(\n         return agent;\n     }\n \n+    private static TimeLockDialogueServiceProvider createTimeLockDialogueServiceProvider(\n+            MetricsManager metricsManager, TimeLockInstallConfiguration install, UserAgent userAgent) {\n+        DialogueClients.ReloadingFactory baseFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+        ServerListConfig timeLockServerListConfig = ImmutableServerListConfig.builder()\n+                .addAllServers(PaxosRemotingUtils.getRemoteServerPaths(install))\n+                .sslConfiguration(install.cluster().cluster().security())\n+                .proxyConfiguration(install.cluster().cluster().proxyConfiguration())\n+                .build();\n+        return TimeLockDialogueServiceProvider.create(\n+                metricsManager.getTaggedRegistry(),\n+                baseFactory,\n+                timeLockServerListConfig,\n+                AuxiliaryRemotingParameters.builder()\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(false)\n+                        .shouldRetry(false) // Is subsequently overridden.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507b3688b15191f4b0128f4c0ffbeb7f9effef0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTIxOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/4809#discussion_r431919219", "createdAt": "2020-05-28T15:18:45Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -117,6 +129,28 @@ public static TimeLockAgent create(\n         return agent;\n     }\n \n+    private static TimeLockDialogueServiceProvider createTimeLockDialogueServiceProvider(\n+            MetricsManager metricsManager, TimeLockInstallConfiguration install, UserAgent userAgent) {\n+        DialogueClients.ReloadingFactory baseFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+        ServerListConfig timeLockServerListConfig = ImmutableServerListConfig.builder()\n+                .addAllServers(PaxosRemotingUtils.getRemoteServerPaths(install))\n+                .sslConfiguration(install.cluster().cluster().security())\n+                .proxyConfiguration(install.cluster().cluster().proxyConfiguration())\n+                .build();\n+        return TimeLockDialogueServiceProvider.create(\n+                metricsManager.getTaggedRegistry(),\n+                baseFactory,\n+                timeLockServerListConfig,\n+                AuxiliaryRemotingParameters.builder()\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(false)\n+                        .shouldRetry(false) // Is subsequently overridden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0Mzk5Ng=="}, "originalCommit": {"oid": "a507b3688b15191f4b0128f4c0ffbeb7f9effef0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MzE5NA==", "bodyText": "Turns out this causes a lot of unexpected headaches with the logic for detecting different remote clients, so I'm not going to block on this if that's okay?", "url": "https://github.com/palantir/atlasdb/pull/4809#discussion_r432393194", "createdAt": "2020-05-29T10:21:33Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -117,6 +129,28 @@ public static TimeLockAgent create(\n         return agent;\n     }\n \n+    private static TimeLockDialogueServiceProvider createTimeLockDialogueServiceProvider(\n+            MetricsManager metricsManager, TimeLockInstallConfiguration install, UserAgent userAgent) {\n+        DialogueClients.ReloadingFactory baseFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+        ServerListConfig timeLockServerListConfig = ImmutableServerListConfig.builder()\n+                .addAllServers(PaxosRemotingUtils.getRemoteServerPaths(install))\n+                .sslConfiguration(install.cluster().cluster().security())\n+                .proxyConfiguration(install.cluster().cluster().proxyConfiguration())\n+                .build();\n+        return TimeLockDialogueServiceProvider.create(\n+                metricsManager.getTaggedRegistry(),\n+                baseFactory,\n+                timeLockServerListConfig,\n+                AuxiliaryRemotingParameters.builder()\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(false)\n+                        .shouldRetry(false) // Is subsequently overridden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0Mzk5Ng=="}, "originalCommit": {"oid": "a507b3688b15191f4b0128f4c0ffbeb7f9effef0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NzA0NA==", "bodyText": "Fair enough, can live with this", "url": "https://github.com/palantir/atlasdb/pull/4809#discussion_r432397044", "createdAt": "2020-05-29T10:29:45Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -117,6 +129,28 @@ public static TimeLockAgent create(\n         return agent;\n     }\n \n+    private static TimeLockDialogueServiceProvider createTimeLockDialogueServiceProvider(\n+            MetricsManager metricsManager, TimeLockInstallConfiguration install, UserAgent userAgent) {\n+        DialogueClients.ReloadingFactory baseFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+        ServerListConfig timeLockServerListConfig = ImmutableServerListConfig.builder()\n+                .addAllServers(PaxosRemotingUtils.getRemoteServerPaths(install))\n+                .sslConfiguration(install.cluster().cluster().security())\n+                .proxyConfiguration(install.cluster().cluster().proxyConfiguration())\n+                .build();\n+        return TimeLockDialogueServiceProvider.create(\n+                metricsManager.getTaggedRegistry(),\n+                baseFactory,\n+                timeLockServerListConfig,\n+                AuxiliaryRemotingParameters.builder()\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(false)\n+                        .shouldRetry(false) // Is subsequently overridden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0Mzk5Ng=="}, "originalCommit": {"oid": "a507b3688b15191f4b0128f4c0ffbeb7f9effef0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMzQ5Mg==", "bodyText": "never mind, I coded a silly bug", "url": "https://github.com/palantir/atlasdb/pull/4809#discussion_r432403492", "createdAt": "2020-05-29T10:44:27Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -117,6 +129,28 @@ public static TimeLockAgent create(\n         return agent;\n     }\n \n+    private static TimeLockDialogueServiceProvider createTimeLockDialogueServiceProvider(\n+            MetricsManager metricsManager, TimeLockInstallConfiguration install, UserAgent userAgent) {\n+        DialogueClients.ReloadingFactory baseFactory = DialogueClients.create(\n+                Refreshable.only(ServicesConfigBlock.builder().build()));\n+        ServerListConfig timeLockServerListConfig = ImmutableServerListConfig.builder()\n+                .addAllServers(PaxosRemotingUtils.getRemoteServerPaths(install))\n+                .sslConfiguration(install.cluster().cluster().security())\n+                .proxyConfiguration(install.cluster().cluster().proxyConfiguration())\n+                .build();\n+        return TimeLockDialogueServiceProvider.create(\n+                metricsManager.getTaggedRegistry(),\n+                baseFactory,\n+                timeLockServerListConfig,\n+                AuxiliaryRemotingParameters.builder()\n+                        .userAgent(userAgent)\n+                        .shouldLimitPayload(false)\n+                        .shouldRetry(false) // Is subsequently overridden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0Mzk5Ng=="}, "originalCommit": {"oid": "a507b3688b15191f4b0128f4c0ffbeb7f9effef0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDE5MTQ2OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockDialogueServiceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNzo1OVrOGb6ObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNzo1OVrOGb6ObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODcwMQ==", "bodyText": "nit: extract method", "url": "https://github.com/palantir/atlasdb/pull/4809#discussion_r431918701", "createdAt": "2020-05-28T15:17:59Z", "author": {"login": "gmaretic"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockDialogueServiceProvider.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.timelock.paxos;\n+\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.config.AuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableAuxiliaryRemotingParameters;\n+import com.palantir.atlasdb.config.ImmutableServerListConfig;\n+import com.palantir.atlasdb.config.ServerListConfig;\n+import com.palantir.atlasdb.http.AtlasDbHttpClients;\n+import com.palantir.atlasdb.http.AtlasDbRemotingConstants;\n+import com.palantir.atlasdb.http.v2.DialogueClientOptions;\n+import com.palantir.atlasdb.http.v2.ImmutableRemoteServiceConfiguration;\n+import com.palantir.atlasdb.http.v2.RemoteServiceConfiguration;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.conjure.java.api.config.service.UserAgent;\n+import com.palantir.conjure.java.client.config.ClientConfiguration;\n+import com.palantir.conjure.java.client.config.NodeSelectionStrategy;\n+import com.palantir.dialogue.clients.DialogueClients;\n+import com.palantir.refreshable.Refreshable;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class TimeLockDialogueServiceProvider {\n+    private final DialogueClients.ReloadingFactory reloadingFactory;\n+    private final TaggedMetricRegistry taggedMetricRegistry;\n+\n+    private TimeLockDialogueServiceProvider(\n+            DialogueClients.ReloadingFactory reloadingFactory,\n+            TaggedMetricRegistry taggedMetricRegistry) {\n+        this.reloadingFactory = reloadingFactory;\n+        this.taggedMetricRegistry = taggedMetricRegistry;\n+    }\n+\n+    public static TimeLockDialogueServiceProvider create(\n+            TaggedMetricRegistry taggedMetricRegistry,\n+            DialogueClients.ReloadingFactory baseFactory,\n+            ServerListConfig serverListConfig,\n+            AuxiliaryRemotingParameters parameters) {\n+        UserAgent versionedAgent = parameters.userAgent().addAgent(AtlasDbRemotingConstants.ATLASDB_HTTP_CLIENT_AGENT);\n+        Map<String, RemoteServiceConfiguration> remoteServiceConfigurations\n+                = createRemoteServiceConfigurations(serverListConfig, versionedAgent, parameters);\n+        DialogueClients.ReloadingFactory reloadingFactory\n+                = decorate(baseFactory, Refreshable.only(remoteServiceConfigurations)).withUserAgent(versionedAgent);\n+        return new TimeLockDialogueServiceProvider(reloadingFactory, taggedMetricRegistry);\n+    }\n+\n+    private static Map<String, RemoteServiceConfiguration> createRemoteServiceConfigurations(\n+            ServerListConfig serverListConfig, UserAgent versionedAgent, AuxiliaryRemotingParameters parameters) {\n+        return KeyedStream.of(serverListConfig.servers())\n+                .map(server -> ImmutableServerListConfig.builder()\n+                        .from(serverListConfig)\n+                        .servers(ImmutableList.of(server))\n+                        .build())\n+                .flatMapEntries((uri, singleServerConfig) -> {\n+                    RemoteServiceConfiguration nonRetrying = ImmutableRemoteServiceConfiguration.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a507b3688b15191f4b0128f4c0ffbeb7f9effef0"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2905, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}