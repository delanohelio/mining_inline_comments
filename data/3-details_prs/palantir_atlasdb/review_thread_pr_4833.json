{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTcxNjIw", "number": 4833, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0MjowMVrOEFA2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDozNDozOVrOEF4UWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkyMjc0OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0MjowMVrOGi_apg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0MjowMVrOGi_apg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0Mzc4Mg==", "bodyText": "Consider using a stream-of-optionals impl? It's probably going to be neater (provided it works)", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r439343782", "createdAt": "2020-06-12T10:42:01Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -538,6 +545,19 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    private String getServiceName() {\n+        String serviceName = \"UNKNOWN\";\n+        if (config().namespace().isPresent()) {\n+            serviceName = config().namespace().get();\n+        } else if (config().timelock().isPresent()) {\n+            TimeLockClientConfig timeLockClientConfig = config().timelock().get();\n+            serviceName = timeLockClientConfig.getClientOrThrow();\n+        } else if (config().keyValueService().namespace().isPresent()) {\n+            serviceName = config().keyValueService().namespace().get();\n+        }\n+        return serviceName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkyMzUxOnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0MjoxN1rOGi_bIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoyNToxN1rOGj9r7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MzkwNg==", "bodyText": "Background tasks need to be shut down when the TM shuts down", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r439343906", "createdAt": "2020-06-12T10:42:17Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -359,6 +361,11 @@ public TransactionManager serializable() {\n     private TransactionManager serializableInternal(@Output List<AutoCloseable> closeables) {\n         MetricsManager metricsManager = MetricsManagers.of(globalMetricsRegistry(), globalTaggedMetricRegistry());\n \n+        TimeLockFeedbackBackgroundTask.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2NDAxNA==", "bodyText": "(I don't think we fixed this yet - we've made the task AutoCloseable but it is not actually closed when the TM shuts down!)", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440364014", "createdAt": "2020-06-15T18:25:17Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -359,6 +361,11 @@ public TransactionManager serializable() {\n     private TransactionManager serializableInternal(@Output List<AutoCloseable> closeables) {\n         MetricsManager metricsManager = MetricsManagers.of(globalMetricsRegistry(), globalTaggedMetricRegistry());\n \n+        TimeLockFeedbackBackgroundTask.create(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0MzkwNg=="}, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkyOTUzOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NDoyMVrOGi_e7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NDoyMVrOGi_e7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NDg3Ng==", "bodyText": "This is broadly correct, but some notes:\n\nDo we really need 5 threads? I think a PtExecutors.singleThreadScheduledExecutor() should be enough - in fact given how we use it I don't think we'll ever have more than 1 thread\nBackground threads should have names indicating what they do\nAs noted these need to be shut down when the TM closes. The background task needs to be closeable.", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r439344876", "createdAt": "2020-06-12T10:44:21Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class TimeLockFeedbackBackgroundTask {\n+    private TimeLockFeedbackBackgroundTask() {\n+        // no op\n+    }\n+\n+    public static void create(TaggedMetricRegistry taggedMetricRegistry, Supplier<String> versionSupplier,\n+            String serviceName) {\n+        UUID nodeId = UUID.randomUUID();\n+\n+        ScheduledExecutorService scheduledExecutorService =\n+                Executors.newScheduledThreadPool(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkzMTI4OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NTowNlrOGi_gDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NTowNlrOGi_gDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTE2NQ==", "bodyText": "nit: p99 is standard for 99th percentile I think; the one minute rate should be 1m or rate", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r439345165", "createdAt": "2020-06-12T10:45:06Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class TimeLockFeedbackBackgroundTask {\n+    private TimeLockFeedbackBackgroundTask() {\n+        // no op\n+    }\n+\n+    public static void create(TaggedMetricRegistry taggedMetricRegistry, Supplier<String> versionSupplier,\n+            String serviceName) {\n+        UUID nodeId = UUID.randomUUID();\n+\n+        ScheduledExecutorService scheduledExecutorService =\n+                Executors.newScheduledThreadPool(5);\n+        scheduledExecutorService.scheduleWithFixedDelay((Runnable) () -> {\n+            ConjureTimelockServiceBlockingMetrics conjureTimelockServiceBlockingMetrics =\n+                    ConjureTimelockServiceBlockingMetrics.of(taggedMetricRegistry);\n+\n+            ImmutableMap.of(\n+            \"perc99\", conjureTimelockServiceBlockingMetrics.startTransactions().getSnapshot().get99thPercentile(),\n+            \"Rate\", conjureTimelockServiceBlockingMetrics.startTransactions().getOneMinuteRate(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkzMTU1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NToxMlrOGi_gNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NToxMlrOGi_gNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTIwNg==", "bodyText": "Is casting needed?", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r439345206", "createdAt": "2020-06-12T10:45:12Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class TimeLockFeedbackBackgroundTask {\n+    private TimeLockFeedbackBackgroundTask() {\n+        // no op\n+    }\n+\n+    public static void create(TaggedMetricRegistry taggedMetricRegistry, Supplier<String> versionSupplier,\n+            String serviceName) {\n+        UUID nodeId = UUID.randomUUID();\n+\n+        ScheduledExecutorService scheduledExecutorService =\n+                Executors.newScheduledThreadPool(5);\n+        scheduledExecutorService.scheduleWithFixedDelay((Runnable) () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjkzMjE1OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NToyMlrOGi_gjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0NToyMlrOGi_gjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NTI5Mg==", "bodyText": "Probably best to have a constant for the interval", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r439345292", "createdAt": "2020-06-12T10:45:22Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class TimeLockFeedbackBackgroundTask {\n+    private TimeLockFeedbackBackgroundTask() {\n+        // no op\n+    }\n+\n+    public static void create(TaggedMetricRegistry taggedMetricRegistry, Supplier<String> versionSupplier,\n+            String serviceName) {\n+        UUID nodeId = UUID.randomUUID();\n+\n+        ScheduledExecutorService scheduledExecutorService =\n+                Executors.newScheduledThreadPool(5);\n+        scheduledExecutorService.scheduleWithFixedDelay((Runnable) () -> {\n+            ConjureTimelockServiceBlockingMetrics conjureTimelockServiceBlockingMetrics =\n+                    ConjureTimelockServiceBlockingMetrics.of(taggedMetricRegistry);\n+\n+            ImmutableMap.of(\n+            \"perc99\", conjureTimelockServiceBlockingMetrics.startTransactions().getSnapshot().get99thPercentile(),\n+            \"Rate\", conjureTimelockServiceBlockingMetrics.startTransactions().getOneMinuteRate(),\n+            \"atlasVersion\", versionSupplier.get(),\n+            \"nodeId\", nodeId,\n+                    \"serviceName\", serviceName);\n+\n+\n+        }, 30, 30, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf006534f3e512c329a135f58ca1386e991c3c6"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU2OTMwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNzozMFrOGjp7pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxNzozMFrOGjp7pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MDM1Nw==", "bodyText": "Fine for now. Watch out for exceptions though!", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440040357", "createdAt": "2020-06-15T09:17:30Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+\n+import java.util.UUID;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public class TimeLockFeedbackBackgroundTask {\n+    private TimeLockFeedbackBackgroundTask() {\n+        // no op\n+    }\n+\n+    public static void create(TaggedMetricRegistry taggedMetricRegistry, Supplier<String> versionSupplier,\n+            String serviceName) {\n+        UUID nodeId = UUID.randomUUID();\n+\n+        ScheduledExecutorService scheduledExecutorService =\n+                Executors.newScheduledThreadPool(5);\n+        scheduledExecutorService.scheduleWithFixedDelay(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3ff8232f1169e41f239a233a1cb8155a8d8c7f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTU3MjY2OnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/ClientFeedback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxODoyMFrOGjp9rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToxODoyMFrOGjp9rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MDg3Nw==", "bodyText": "This is OK, but I'd prefer we use the opportunity to define it as a Conjure object", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440040877", "createdAt": "2020-06-15T09:18:20Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/ClientFeedback.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+@Value.Immutable\n+@JsonSerialize(as = ImmutableClientFeedback.class)\n+@JsonDeserialize(as = ImmutableClientFeedback.class)\n+public interface ClientFeedback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba3ff8232f1169e41f239a233a1cb8155a8d8c7f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzU0NzI5OnYy", "diffSide": "RIGHT", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxNzozMFrOGj9b6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxODowMlrOGkU2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1OTkxNQ==", "bodyText": "We might want a timelock one for completeness?", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440359915", "createdAt": "2020-06-15T18:17:30Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -440,6 +441,65 @@ public void keyValueServiceMetricsDoNotContainUserAgent() {\n                 .anyMatch(metricName -> metricName.contains(USER_AGENT_NAME)), is(false));\n     }\n \n+    @Test\n+    public void serviceNameIsFetchedFromAtlasConfig() {\n+        KeyValueServiceConfig kvs = new InMemoryAtlasDbConfig();\n+        AtlasDbConfig atlasDbConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(kvs)\n+                .namespace(Optional.of(\"namespace\"))\n+                .build();\n+        MetricRegistry metrics = new MetricRegistry();\n+        TransactionManagers transactionManagers = TransactionManagers.builder()\n+                .config(atlasDbConfig)\n+                .userAgent(USER_AGENT)\n+                .globalMetricsRegistry(metrics)\n+                .globalTaggedMetricRegistry(DefaultTaggedMetricRegistry.getDefault())\n+                .registrar(environment)\n+                .build();\n+\n+        assertThat(transactionManagers.getServiceName()).isEqualTo(\"namespace\");\n+    }\n+\n+    @Test\n+    public void serviceNameIsFetchedFromKvsConfigWhenItIsNotPresentInAtlasConfig() {\n+        KeyValueServiceConfig kvs = mock(KeyValueServiceConfig.class);\n+        when(kvs.type()).thenReturn(\"memory\");\n+        when(kvs.namespace()).thenReturn(Optional.of(\"namespace\"));\n+        when(kvs.concurrentGetRangesThreadPoolSize()).thenReturn(1);\n+\n+        AtlasDbConfig atlasDbConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(kvs)\n+                .build();\n+        MetricRegistry metrics = new MetricRegistry();\n+        TransactionManagers transactionManagers = TransactionManagers.builder()\n+                .config(atlasDbConfig)\n+                .userAgent(USER_AGENT)\n+                .globalMetricsRegistry(metrics)\n+                .globalTaggedMetricRegistry(DefaultTaggedMetricRegistry.getDefault())\n+                .registrar(environment)\n+                .build();\n+\n+        assertThat(transactionManagers.getServiceName()).isEqualTo(\"namespace\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ff5097397c0abe6ad083e08d79c24e957b8ac"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MzQyOQ==", "bodyText": "This is hard to write because the migrator tries to reach to timeLock servers.", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440743429", "createdAt": "2020-06-16T10:18:02Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -440,6 +441,65 @@ public void keyValueServiceMetricsDoNotContainUserAgent() {\n                 .anyMatch(metricName -> metricName.contains(USER_AGENT_NAME)), is(false));\n     }\n \n+    @Test\n+    public void serviceNameIsFetchedFromAtlasConfig() {\n+        KeyValueServiceConfig kvs = new InMemoryAtlasDbConfig();\n+        AtlasDbConfig atlasDbConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(kvs)\n+                .namespace(Optional.of(\"namespace\"))\n+                .build();\n+        MetricRegistry metrics = new MetricRegistry();\n+        TransactionManagers transactionManagers = TransactionManagers.builder()\n+                .config(atlasDbConfig)\n+                .userAgent(USER_AGENT)\n+                .globalMetricsRegistry(metrics)\n+                .globalTaggedMetricRegistry(DefaultTaggedMetricRegistry.getDefault())\n+                .registrar(environment)\n+                .build();\n+\n+        assertThat(transactionManagers.getServiceName()).isEqualTo(\"namespace\");\n+    }\n+\n+    @Test\n+    public void serviceNameIsFetchedFromKvsConfigWhenItIsNotPresentInAtlasConfig() {\n+        KeyValueServiceConfig kvs = mock(KeyValueServiceConfig.class);\n+        when(kvs.type()).thenReturn(\"memory\");\n+        when(kvs.namespace()).thenReturn(Optional.of(\"namespace\"));\n+        when(kvs.concurrentGetRangesThreadPoolSize()).thenReturn(1);\n+\n+        AtlasDbConfig atlasDbConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(kvs)\n+                .build();\n+        MetricRegistry metrics = new MetricRegistry();\n+        TransactionManagers transactionManagers = TransactionManagers.builder()\n+                .config(atlasDbConfig)\n+                .userAgent(USER_AGENT)\n+                .globalMetricsRegistry(metrics)\n+                .globalTaggedMetricRegistry(DefaultTaggedMetricRegistry.getDefault())\n+                .registrar(environment)\n+                .build();\n+\n+        assertThat(transactionManagers.getServiceName()).isEqualTo(\"namespace\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1OTkxNQ=="}, "originalCommit": {"oid": "ba1ff5097397c0abe6ad083e08d79c24e957b8ac"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzU0OTYwOnYy", "diffSide": "RIGHT", "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TimeLockTestUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxODoxNVrOGj9dfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyMjoyMlrOGkS10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MDMxNw==", "bodyText": "Did we need this? I think it would be a break if it turned out that we must specify a client", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440360317", "createdAt": "2020-06-15T18:18:15Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TimeLockTestUtils.java", "diffHunk": "@@ -76,6 +76,7 @@ static TransactionManagerContext createTransactionManager(\n                                 .servers(serverUris)\n                                 .sslConfiguration(SslConfiguration.of(Paths.get(\"var/security/trustStore.jks\")))\n                                 .build())\n+                        .client(Optional.of(agent))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1ff5097397c0abe6ad083e08d79c24e957b8ac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjM2MQ==", "bodyText": "So, the problem is highlighted by this line - config().timelock().map(TimeLockClientConfig::getClientOrThrow). If timeLockConfig is present then client must be present otherwise, if we try to fetch the client, we throw this SafeIllegalStateEx - \"Tried to read a client from a TimeLockClientConfig, but it hadn't been initialised.\"", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440422361", "createdAt": "2020-06-15T20:17:03Z", "author": {"login": "sudiksha27"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TimeLockTestUtils.java", "diffHunk": "@@ -76,6 +76,7 @@ static TransactionManagerContext createTransactionManager(\n                                 .servers(serverUris)\n                                 .sslConfiguration(SslConfiguration.of(Paths.get(\"var/security/trustStore.jks\")))\n                                 .build())\n+                        .client(Optional.of(agent))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MDMxNw=="}, "originalCommit": {"oid": "ba1ff5097397c0abe6ad083e08d79c24e957b8ac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMDYxMQ==", "bodyText": "Ah, this is a break then. Can you see a way around this?", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440710611", "createdAt": "2020-06-16T09:22:22Z", "author": {"login": "jeremyk-91"}, "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/TimeLockTestUtils.java", "diffHunk": "@@ -76,6 +76,7 @@ static TransactionManagerContext createTransactionManager(\n                                 .servers(serverUris)\n                                 .sslConfiguration(SslConfiguration.of(Paths.get(\"var/security/trustStore.jks\")))\n                                 .build())\n+                        .client(Optional.of(agent))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM2MDMxNw=="}, "originalCommit": {"oid": "ba1ff5097397c0abe6ad083e08d79c24e957b8ac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTk0MjAxOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxMzo0OVrOGkUsfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxMzo0OVrOGkUsfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MDk4OQ==", "bodyText": "move to bckTask", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440740989", "createdAt": "2020-06-16T10:13:49Z", "author": {"login": "sudiksha27"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/Constants.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+public class Constants {\n+    private Constants () {\n+        // no op\n+    }\n+\n+    public static final String TIMELOCK_FEEDBACK_THREAD_PREFIX = \"TimeLockFeedbackBackgroundTask\";\n+    public static final long TIMELOCK_CLIENT_FEEDBACK_INTERVAL_SECONDS = 30;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "459c7c2ce30ed422f851922b4d19cdc7b27296fc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjAxMDUwOnYy", "diffSide": "RIGHT", "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDozNDozOVrOGkVX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDozNDozOVrOGkVX5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MjEwMA==", "bodyText": "nit: This should be static, there's no reason each instance needs a different copy of this", "url": "https://github.com/palantir/atlasdb/pull/4833#discussion_r440752100", "createdAt": "2020-06-16T10:34:39Z", "author": {"login": "jeremyk-91"}, "path": "lock-api/src/main/java/com/palantir/lock/client/metrics/TimeLockFeedbackBackgroundTask.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client.metrics;\n+\n+\n+import java.time.Duration;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.lock.client.ConjureTimelockServiceBlockingMetrics;\n+import com.palantir.logsafe.SafeArg;\n+import com.palantir.timelock.feedback.ConjureTimeLockClientFeedback;\n+import com.palantir.timelock.feedback.EndpointStatistics;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n+\n+public final class TimeLockFeedbackBackgroundTask implements AutoCloseable {\n+    private static final Logger log = LoggerFactory.getLogger(\n+            TimeLockFeedbackBackgroundTask.class);\n+    private static final String TIMELOCK_FEEDBACK_THREAD_PREFIX = \"TimeLockFeedbackBackgroundTask\";\n+    private final ScheduledExecutorService executor = PTExecutors.newSingleThreadScheduledExecutor(\n+                    new NamedThreadFactory(TIMELOCK_FEEDBACK_THREAD_PREFIX, true));\n+\n+    private final UUID nodeId = UUID.randomUUID();\n+    private final Duration timeLockClientFeedbackReportInterval = Duration.ofSeconds(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a396a9949252001762f5fe73e3d917bad425e34"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}