{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDg3MDY0", "number": 4674, "title": "[Timelock Perf] Disruptor future", "bodyText": "Goals (and why):\nNot immediately clear where time is spent when a task is submitted to an autobatcher. Add tracing to numerous parts.\nImplementation Description (bullets):\nChanged the future such that it tracks the different stages a task goes through.\nWhen the future is created, it'll start a DetachedSpan so this will inherit the trace of the thread that submitted to the autobatcher, so we should have provenance from client request all the way to before the rpc (which can only have a single parent, but that's fine I suppose).\nI removed starting new traces around the actual handler, as  I think this approach is easier to navigate with our tracing infra.\nTesting (What was existing testing like?  What have you done to improve it?):\nUsed RenderTracingRule to verify what's going on.\nConcerns (what feedback would you like?):\nWhere should we start reviewing?:\nDisruptorAutobatcher.\nPriority (whenever / two weeks / yesterday):\nWhenever, would be nice to get it in fairly soon.", "createdAt": "2020-03-26T10:38:31Z", "url": "https://github.com/palantir/atlasdb/pull/4674", "merged": true, "mergeCommit": {"oid": "1a50f010b90a4943073bb2ee3e612e710da8733f"}, "closed": true, "closedAt": "2020-03-27T18:41:18Z", "author": {"login": "felixdesouza"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRZkesAH2gAyMzk0MDg3MDY0OjJkZmNlODM0ODQ3NDZiYmQ3YmIwZTkyZGE5ZTBkYzhlMjVmNTI0ZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR1MCtgFqTM4MzExMzg3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2dfce83484746bbd7bb0e92da9e0dc8e25f524df", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/2dfce83484746bbd7bb0e92da9e0dc8e25f524df", "committedDate": "2020-03-26T10:30:16Z", "message": "DisruptorFutures now have traces for each portion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09bc8559c5e7493280ee5464902d718b83d44853", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/09bc8559c5e7493280ee5464902d718b83d44853", "committedDate": "2020-03-26T10:30:17Z", "message": "Fix up usages everywhere."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d52e1a2bf8f3745c024e8ad2035f762f65207a0", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/8d52e1a2bf8f3745c024e8ad2035f762f65207a0", "committedDate": "2020-03-26T10:29:31Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/2890ee02f031c97abff9453eb2cd48f3a15e6966", "committedDate": "2020-03-26T13:35:51Z", "message": "Checkstyle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzU4ODI2", "url": "https://github.com/palantir/atlasdb/pull/4674#pullrequestreview-382358826", "createdAt": "2020-03-26T19:47:03Z", "commit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo0NzowM1rOF8XrtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1MzoxN1rOF8X69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0NjkwMA==", "bodyText": "Does this need to be volatile? Specifically I'm thinking of a race condition where one thread assigns runningSpan, but another cancels the future and runs the listener: thread 2 won't see thread 1's write. Maybe this is ok if GC is sufficient to clean out 'leaked' spans", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398846900", "createdAt": "2020-03-26T19:47:03Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/DisruptorAutobatcher.java", "diffHunk": "@@ -98,19 +106,60 @@ public void close() {\n \n     private static final class DefaultBatchElement<T, R> implements BatchElement<T, R> {\n         private T argument;\n-        private SettableFuture<R> result;\n+        private DisruptorFuture<R> result;\n \n         @Override\n         public T argument() {\n             return argument;\n         }\n \n         @Override\n-        public SettableFuture<R> result() {\n+        public DisruptorFuture<R> result() {\n             return result;\n         }\n     }\n \n+    public static final class DisruptorFuture<R> extends AbstractFuture<R> {\n+\n+        private final DetachedSpan parent;\n+        private final DetachedSpan waitingSpan;\n+\n+        @Nullable\n+        private DetachedSpan runningSpan = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg0ODk2OQ==", "bodyText": "nicely done", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398848969", "createdAt": "2020-03-26T19:49:50Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-autobatch/src/test/java/com/palantir/atlasdb/autobatch/TracingEventHandlerTest.java", "diffHunk": "@@ -16,107 +16,66 @@\n \n package com.palantir.atlasdb.autobatch;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.Mockito.verify;\n-\n-import java.util.List;\n-\n import org.junit.Rule;\n import org.junit.Test;\n-import org.junit.rules.ExternalResource;\n import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n \n-import com.google.common.collect.Lists;\n-import com.google.common.util.concurrent.SettableFuture;\n import com.lmax.disruptor.EventHandler;\n-import com.palantir.tracing.Observability;\n-import com.palantir.tracing.Tracer;\n-import com.palantir.tracing.api.Span;\n+import com.palantir.atlasdb.autobatch.DisruptorAutobatcher.DisruptorFuture;\n+import com.palantir.tracing.RenderTracingRule;\n+import com.palantir.tracing.Tracers;\n \n @RunWith(MockitoJUnitRunner.class)\n public class TracingEventHandlerTest {\n \n     @Rule\n-    public TraceCapturingRule traceRule = new TraceCapturingRule();\n-\n-    @Mock\n-    private EventHandler<BatchElement<Integer, Long>> delegate;\n-    private static final TestBatchElement ELEMENT = new TestBatchElement();\n-\n-    @Test\n-    public void nonFlushesDoNotHaveTraces() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MDgwNg==", "bodyText": "nit: I'd word this a bit more directly towards how users will consume the tracking.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              description: Disruptor Autobatchers now has a special future that allows it track\n          \n          \n            \n                the different phases of the batching process.\n          \n          \n            \n              description: Disruptor Autobatchers now trace their calls. Time spent waiting for the\n          \n          \n            \n                batch to start and for the batch to be processed are also tracked in child spans.", "url": "https://github.com/palantir/atlasdb/pull/4674#discussion_r398850806", "createdAt": "2020-03-26T19:53:17Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4674.v2.yml", "diffHunk": "@@ -0,0 +1,6 @@\n+type: improvement\n+improvement:\n+  description: Disruptor Autobatchers now has a special future that allows it track\n+    the different phases of the batching process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2890ee02f031c97abff9453eb2cd48f3a15e6966"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c7f89350a2d8bf7de691df3fe7f697377f5c10", "author": {"user": {"login": "felixdesouza", "name": "Felix de Souza"}}, "url": "https://github.com/palantir/atlasdb/commit/a9c7f89350a2d8bf7de691df3fe7f697377f5c10", "committedDate": "2020-03-26T22:45:51Z", "message": "Update changelog/@unreleased/pr-4674.v2.yml\n\nCo-Authored-By: Jeremy Kong <jeremykong@hotmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTEzODcz", "url": "https://github.com/palantir/atlasdb/pull/4674#pullrequestreview-383113873", "createdAt": "2020-03-27T18:40:55Z", "commit": {"oid": "a9c7f89350a2d8bf7de691df3fe7f697377f5c10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3007, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}