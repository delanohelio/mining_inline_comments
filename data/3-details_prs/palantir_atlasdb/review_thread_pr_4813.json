{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzczNDYz", "number": 4813, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo1MDowOFrOEAynfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyNDozM1rOEA42pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjY0NzY2OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo1MDowOFrOGcSXcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowNDoyMFrOGcUwGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxNDIyNQ==", "bodyText": "OK. We'll need a piece that blocks startup until this is called for all namespaces (but I guess you've handled that elsewhere)", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432314225", "createdAt": "2020-05-29T07:50:08Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -62,12 +67,47 @@ private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n         return new SplittingPaxosStateLog<>(\n                 parameters.legacyLog(),\n                 parameters.currentLog(),\n-                parameters.markLegacyWrite(),\n-                parameters.markLegacyRead(),\n+                parameters.legacyOperationMarkers().markLegacyWrite(),\n+                parameters.legacyOperationMarkers().markLegacyRead(),\n                 parameters.cutoffInclusive(),\n                 new AtomicLong(parameters.legacyLog().getLeastLogEntry()));\n     }\n \n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createWithMigration(\n+            PaxosStorageParameters params,\n+            Persistable.Hydrator<V> hydrator,\n+            LegacyOperationMarkers legacyOperationMarkers,\n+            OptionalLong migrateFrom) {\n+        String logDirectory = params.fileBasedLogDirectory()\n+                .orElseThrow(() -> new SafeIllegalStateException(\"We currently need to have file-based storage\"));\n+        NamespaceAndUseCase namespaceUseCase = params.namespaceAndUseCase();\n+\n+        PaxosStateLogMigrator.MigrationContext<V> migrationContext = ImmutableMigrationContext.<V>builder()\n+                .sourceLog(new PaxosStateLogImpl<>(logDirectory))\n+                .destinationLog(SqlitePaxosStateLog.create(namespaceUseCase, params.sqliteDataSource()))\n+                .hydrator(hydrator)\n+                .migrationState(SqlitePaxosStateLogMigrationState.create(namespaceUseCase, params.sqliteDataSource()))\n+                .migrateFrom(migrateFrom)\n+                .build();\n+\n+        Instant start = Instant.now();\n+        log.info(\"Starting migration for namespace and use case {}.\",\n+                SafeArg.of(\"namespaceAndUseCase\", params.namespaceAndUseCase()));\n+        long cutoff = PaxosStateLogMigrator.migrateAndReturnCutoff(migrationContext);\n+        log.info(\"Migration for namespace and use case {} took {}.\",\n+                SafeArg.of(\"namespaceAndUseCase\", params.namespaceAndUseCase()),\n+                SafeArg.of(\"duration\", Duration.between(start, Instant.now())));\n+\n+        SplittingParameters<V> splittingParameters = ImmutableSplittingParameters.<V>builder()\n+                .legacyLog(migrationContext.sourceLog())\n+                .currentLog(migrationContext.destinationLog())\n+                .cutoffInclusive(cutoff)\n+                .legacyOperationMarkers(legacyOperationMarkers)\n+                .build();\n+\n+        return SplittingPaxosStateLog.create(splittingParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MzMwNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432353306", "createdAt": "2020-05-29T09:04:20Z", "author": {"login": "gmaretic"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -62,12 +67,47 @@ private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n         return new SplittingPaxosStateLog<>(\n                 parameters.legacyLog(),\n                 parameters.currentLog(),\n-                parameters.markLegacyWrite(),\n-                parameters.markLegacyRead(),\n+                parameters.legacyOperationMarkers().markLegacyWrite(),\n+                parameters.legacyOperationMarkers().markLegacyRead(),\n                 parameters.cutoffInclusive(),\n                 new AtomicLong(parameters.legacyLog().getLeastLogEntry()));\n     }\n \n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createWithMigration(\n+            PaxosStorageParameters params,\n+            Persistable.Hydrator<V> hydrator,\n+            LegacyOperationMarkers legacyOperationMarkers,\n+            OptionalLong migrateFrom) {\n+        String logDirectory = params.fileBasedLogDirectory()\n+                .orElseThrow(() -> new SafeIllegalStateException(\"We currently need to have file-based storage\"));\n+        NamespaceAndUseCase namespaceUseCase = params.namespaceAndUseCase();\n+\n+        PaxosStateLogMigrator.MigrationContext<V> migrationContext = ImmutableMigrationContext.<V>builder()\n+                .sourceLog(new PaxosStateLogImpl<>(logDirectory))\n+                .destinationLog(SqlitePaxosStateLog.create(namespaceUseCase, params.sqliteDataSource()))\n+                .hydrator(hydrator)\n+                .migrationState(SqlitePaxosStateLogMigrationState.create(namespaceUseCase, params.sqliteDataSource()))\n+                .migrateFrom(migrateFrom)\n+                .build();\n+\n+        Instant start = Instant.now();\n+        log.info(\"Starting migration for namespace and use case {}.\",\n+                SafeArg.of(\"namespaceAndUseCase\", params.namespaceAndUseCase()));\n+        long cutoff = PaxosStateLogMigrator.migrateAndReturnCutoff(migrationContext);\n+        log.info(\"Migration for namespace and use case {} took {}.\",\n+                SafeArg.of(\"namespaceAndUseCase\", params.namespaceAndUseCase()),\n+                SafeArg.of(\"duration\", Duration.between(start, Instant.now())));\n+\n+        SplittingParameters<V> splittingParameters = ImmutableSplittingParameters.<V>builder()\n+                .legacyLog(migrationContext.sourceLog())\n+                .currentLog(migrationContext.destinationLog())\n+                .cutoffInclusive(cutoff)\n+                .legacyOperationMarkers(legacyOperationMarkers)\n+                .build();\n+\n+        return SplittingPaxosStateLog.create(splittingParameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxNDIyNQ=="}, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjY1Njg1OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo1MzowNFrOGcSc_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowNDowN1rOGcUvnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxNTY0NQ==", "bodyText": "So this always creates the splitting log upfront, and does the migration in the creation of that (but we remember the state, so we won't be copying the data more than once).", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432315645", "createdAt": "2020-05-29T07:53:04Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "diffHunk": "@@ -72,6 +82,23 @@\n         this.canCreateNewClients = canCreateNewClients;\n     }\n \n+    public static LocalPaxosComponents createWithBlockingMigration(\n+            TimelockPaxosMetrics metrics,\n+            PaxosUseCase paxosUseCase,\n+            Path legacyLogDirectory,\n+            DataSource sqliteDataSource,\n+            UUID leaderUuid,\n+            boolean canCreateNewClients) {\n+        LocalPaxosComponents components = new LocalPaxosComponents(metrics, paxosUseCase, legacyLogDirectory,\n+                sqliteDataSource, leaderUuid, canCreateNewClients);\n+\n+        Path legacyClientDir = paxosUseCase.logDirectoryRelativeToDataDirectory(legacyLogDirectory);\n+        PersistentNamespaceLoader namespaceLoader = new DiskNamespaceLoader(legacyClientDir);\n+        namespaceLoader.getAllPersistedNamespaces().forEach(components::getOrCreateComponents);\n+        components.getOrCreateComponents(PaxosUseCase.PSEUDO_LEADERSHIP_CLIENT);\n+        return components;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1MzE4Mw==", "bodyText": "Yup", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432353183", "createdAt": "2020-05-29T09:04:07Z", "author": {"login": "gmaretic"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "diffHunk": "@@ -72,6 +82,23 @@\n         this.canCreateNewClients = canCreateNewClients;\n     }\n \n+    public static LocalPaxosComponents createWithBlockingMigration(\n+            TimelockPaxosMetrics metrics,\n+            PaxosUseCase paxosUseCase,\n+            Path legacyLogDirectory,\n+            DataSource sqliteDataSource,\n+            UUID leaderUuid,\n+            boolean canCreateNewClients) {\n+        LocalPaxosComponents components = new LocalPaxosComponents(metrics, paxosUseCase, legacyLogDirectory,\n+                sqliteDataSource, leaderUuid, canCreateNewClients);\n+\n+        Path legacyClientDir = paxosUseCase.logDirectoryRelativeToDataDirectory(legacyLogDirectory);\n+        PersistentNamespaceLoader namespaceLoader = new DiskNamespaceLoader(legacyClientDir);\n+        namespaceLoader.getAllPersistedNamespaces().forEach(components::getOrCreateComponents);\n+        components.getOrCreateComponents(PaxosUseCase.PSEUDO_LEADERSHIP_CLIENT);\n+        return components;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxNTY0NQ=="}, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjY3ODAzOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosLearnerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo1OTo0NVrOGcSqPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowNToxN1rOGcUx-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxOTAzNw==", "bodyText": "This migrates at least the greatest learned value locally right?", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432319037", "createdAt": "2020-05-29T07:59:45Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosLearnerImpl.java", "diffHunk": "@@ -51,17 +51,11 @@ private static PaxosLearner newLearner(PaxosStateLog<PaxosValue> log, PaxosKnowl\n         return new PaxosLearnerImpl(state, log, eventRecorder);\n     }\n \n-    public static PaxosLearner newFileSystemLearner(PaxosStorageParameters params,\n+    public static PaxosLearner newSplittingLearner(PaxosStorageParameters params,\n+            SplittingPaxosStateLog.LegacyOperationMarkers legacyOperationMarkers,\n             PaxosKnowledgeEventRecorder event) {\n-        String logDirectory = params.fileBasedLogDirectory()\n-                .orElseThrow(() -> new SafeIllegalStateException(\"We currently need to have file-based storage\"));\n-        return newLearner(logDirectory, event);\n-    }\n-\n-    public static PaxosLearner newVerifyingLearner(PaxosStorageParameters params,\n-            PaxosKnowledgeEventRecorder event) {\n-        PaxosStateLog<PaxosValue> log = VerifyingPaxosStateLog\n-                .createWithoutMigration(params, PaxosValue.BYTES_HYDRATOR);\n+        PaxosStateLog<PaxosValue> log = SplittingPaxosStateLog\n+                .createWithMigration(params, PaxosValue.BYTES_HYDRATOR, legacyOperationMarkers, OptionalLong.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1Mzc4NQ==", "bodyText": "Yes, if we migrate without giving the bound, it will call greatest log value and migrate from that minus buffer", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432353785", "createdAt": "2020-05-29T09:05:17Z", "author": {"login": "gmaretic"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosLearnerImpl.java", "diffHunk": "@@ -51,17 +51,11 @@ private static PaxosLearner newLearner(PaxosStateLog<PaxosValue> log, PaxosKnowl\n         return new PaxosLearnerImpl(state, log, eventRecorder);\n     }\n \n-    public static PaxosLearner newFileSystemLearner(PaxosStorageParameters params,\n+    public static PaxosLearner newSplittingLearner(PaxosStorageParameters params,\n+            SplittingPaxosStateLog.LegacyOperationMarkers legacyOperationMarkers,\n             PaxosKnowledgeEventRecorder event) {\n-        String logDirectory = params.fileBasedLogDirectory()\n-                .orElseThrow(() -> new SafeIllegalStateException(\"We currently need to have file-based storage\"));\n-        return newLearner(logDirectory, event);\n-    }\n-\n-    public static PaxosLearner newVerifyingLearner(PaxosStorageParameters params,\n-            PaxosKnowledgeEventRecorder event) {\n-        PaxosStateLog<PaxosValue> log = VerifyingPaxosStateLog\n-                .createWithoutMigration(params, PaxosValue.BYTES_HYDRATOR);\n+        PaxosStateLog<PaxosValue> log = SplittingPaxosStateLog\n+                .createWithMigration(params, PaxosValue.BYTES_HYDRATOR, legacyOperationMarkers, OptionalLong.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxOTAzNw=="}, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzUyMzM2OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MjowMFrOGcbCFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MjowMFrOGcbCFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NjIxMg==", "bodyText": "note: This is not broken out by client, but it's fine", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432456212", "createdAt": "2020-05-29T12:42:00Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "diffHunk": "@@ -123,6 +153,23 @@ private Components createComponents(Client client) {\n                 .build();\n     }\n \n+    private SplittingPaxosStateLog.LegacyOperationMarkers createMetrics(Class<?> forClass) {\n+        return ImmutableLegacyOperationMarkers.builder()\n+                .markLegacyRead(getReadCounter(forClass)::inc)\n+                .markLegacyWrite(getWriteCounter(forClass)::inc)\n+                .build();\n+    }\n+\n+    @VisibleForTesting\n+    Counter getReadCounter(Class<?> forClass) {\n+        return metrics.asMetricsManager().registerOrGetCounter(forClass, AtlasDbMetricNames.LEGACY_READ);\n+    }\n+\n+    @VisibleForTesting\n+    Counter getWriteCounter(Class<?> forClass) {\n+        return metrics.asMetricsManager().registerOrGetCounter(forClass, AtlasDbMetricNames.LEGACY_WRITE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzUyODI4OnYy", "diffSide": "RIGHT", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MzozOVrOGcbFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0MzozOVrOGcbFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NzA0MA==", "bodyText": "nit: This is basically a no-op", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432457040", "createdAt": "2020-05-29T12:43:39Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/LocalPaxosComponents.java", "diffHunk": "@@ -72,6 +82,23 @@\n         this.canCreateNewClients = canCreateNewClients;\n     }\n \n+    public static LocalPaxosComponents createWithBlockingMigration(\n+            TimelockPaxosMetrics metrics,\n+            PaxosUseCase paxosUseCase,\n+            Path legacyLogDirectory,\n+            DataSource sqliteDataSource,\n+            UUID leaderUuid,\n+            boolean canCreateNewClients) {\n+        LocalPaxosComponents components = new LocalPaxosComponents(metrics, paxosUseCase, legacyLogDirectory,\n+                sqliteDataSource, leaderUuid, canCreateNewClients);\n+\n+        Path legacyClientDir = paxosUseCase.logDirectoryRelativeToDataDirectory(legacyLogDirectory);\n+        PersistentNamespaceLoader namespaceLoader = new DiskNamespaceLoader(legacyClientDir);\n+        namespaceLoader.getAllPersistedNamespaces().forEach(components::getOrCreateComponents);\n+        components.getOrCreateComponents(PaxosUseCase.PSEUDO_LEADERSHIP_CLIENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzUzMzUwOnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0NToyNlrOGcbIxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0NTozOVrOGcbJMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NzkyNQ==", "bodyText": "This is fine. I would suggest we replace this with a static factory called createFileBacked(...) or something like that for readability", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432457925", "createdAt": "2020-05-29T12:45:26Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -62,12 +67,47 @@ private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n         return new SplittingPaxosStateLog<>(\n                 parameters.legacyLog(),\n                 parameters.currentLog(),\n-                parameters.markLegacyWrite(),\n-                parameters.markLegacyRead(),\n+                parameters.legacyOperationMarkers().markLegacyWrite(),\n+                parameters.legacyOperationMarkers().markLegacyRead(),\n                 parameters.cutoffInclusive(),\n                 new AtomicLong(parameters.legacyLog().getLeastLogEntry()));\n     }\n \n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createWithMigration(\n+            PaxosStorageParameters params,\n+            Persistable.Hydrator<V> hydrator,\n+            LegacyOperationMarkers legacyOperationMarkers,\n+            OptionalLong migrateFrom) {\n+        String logDirectory = params.fileBasedLogDirectory()\n+                .orElseThrow(() -> new SafeIllegalStateException(\"We currently need to have file-based storage\"));\n+        NamespaceAndUseCase namespaceUseCase = params.namespaceAndUseCase();\n+\n+        PaxosStateLogMigrator.MigrationContext<V> migrationContext = ImmutableMigrationContext.<V>builder()\n+                .sourceLog(new PaxosStateLogImpl<>(logDirectory))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1ODAzMg==", "bodyText": "non-blocking", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432458032", "createdAt": "2020-05-29T12:45:39Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SplittingPaxosStateLog.java", "diffHunk": "@@ -62,12 +67,47 @@ private SplittingPaxosStateLog(PaxosStateLog<V> legacyLog,\n         return new SplittingPaxosStateLog<>(\n                 parameters.legacyLog(),\n                 parameters.currentLog(),\n-                parameters.markLegacyWrite(),\n-                parameters.markLegacyRead(),\n+                parameters.legacyOperationMarkers().markLegacyWrite(),\n+                parameters.legacyOperationMarkers().markLegacyRead(),\n                 parameters.cutoffInclusive(),\n                 new AtomicLong(parameters.legacyLog().getLeastLogEntry()));\n     }\n \n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createWithMigration(\n+            PaxosStorageParameters params,\n+            Persistable.Hydrator<V> hydrator,\n+            LegacyOperationMarkers legacyOperationMarkers,\n+            OptionalLong migrateFrom) {\n+        String logDirectory = params.fileBasedLogDirectory()\n+                .orElseThrow(() -> new SafeIllegalStateException(\"We currently need to have file-based storage\"));\n+        NamespaceAndUseCase namespaceUseCase = params.namespaceAndUseCase();\n+\n+        PaxosStateLogMigrator.MigrationContext<V> migrationContext = ImmutableMigrationContext.<V>builder()\n+                .sourceLog(new PaxosStateLogImpl<>(logDirectory))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ1NzkyNQ=="}, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU0NzI0OnYy", "diffSide": "RIGHT", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0OTo0N1rOGcbRbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo0OTo0N1rOGcbRbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDE0MA==", "bodyText": "note: Let's add some logging in this class?", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432460140", "createdAt": "2020-05-29T12:49:47Z", "author": {"login": "jeremyk-91"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -37,10 +37,9 @@\n public final class PaxosStateLogMigrator<V extends Persistable & Versionable> {\n     private static final Logger log = LoggerFactory.getLogger(PaxosStateLogMigrator.class);\n \n+    public static final int SAFETY_BUFFER = 50;\n     @VisibleForTesting\n     static final int BATCH_SIZE = 10_000;\n-    @VisibleForTesting\n-    static final int SAFETY_BUFFER = 50;\n \n     private final PaxosStateLog<V> sourceLog;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10a70456269f1732c719983c238e8e12490da007"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzY2OTQ4OnYy", "diffSide": "RIGHT", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyNDozNFrOGccecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyNDozNFrOGccecw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3OTg1OQ==", "bodyText": "and this is safe because healthchecks are not reported until HTTP endpoints are opened, so we won't ever report a 2 until we start", "url": "https://github.com/palantir/atlasdb/pull/4813#discussion_r432479859", "createdAt": "2020-05-29T13:24:34Z", "author": {"login": "jeremyk-91"}, "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -65,7 +65,7 @@\n \n @SuppressWarnings(\"checkstyle:FinalClass\") // This is mocked internally\n public class TimeLockAgent {\n-    private static final Long SCHEMA_VERSION = 1L;\n+    private static final Long SCHEMA_VERSION = 2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2233751870cd0c1506ca4493f4921a83e9599ffb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2919, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}