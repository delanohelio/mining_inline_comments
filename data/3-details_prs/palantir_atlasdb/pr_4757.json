{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MTgwMjE4", "number": 4757, "title": "Implement better TM closing", "bodyText": "Goals (and why):\nThe current hypothesis for why sometimes closing the transaction manager fails to close all the background tasks is that we end up blocking during closing one of them. This addresses the issue by timeboxing each.\nImplementation Description (bullets):\nWe attempt to synchronously run the closing runnable, then attempt to cancel after 20 seconds. We defend against being unable to interrupt the task by using a fixed threadpool of size 5 just in case.\nTesting (What was existing testing like?  What have you done to improve it?):\nUnit tests\nConcerns (what feedback would you like?):\nShould be fine, but shout if I missed something\nWhere should we start reviewing?:\ntests?\nPriority (whenever / two weeks / yesterday):\nASAP", "createdAt": "2020-05-06T15:47:15Z", "url": "https://github.com/palantir/atlasdb/pull/4757", "merged": true, "mergeCommit": {"oid": "6f7a1cf33bd73d815e0304fe3f384ca8e5d2c00d"}, "closed": true, "closedAt": "2020-05-07T09:21:53Z", "author": {"login": "gmaretic"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceqoEFgH2gAyNDE0MTgwMjE4OjJlYjU5NjFlNzgxZDA3OWRmODA5MzM5ZjM1NGM1NTQ4OWVhODAzMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce5YrKgFqTQwNzI3NjM4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2eb5961e781d079df809339f354c55489ea8032e", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/2eb5961e781d079df809339f354c55489ea8032e", "committedDate": "2020-05-06T15:43:35Z", "message": "Implement better TM closing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcf8e5238739640e355953fa60edc53eb5153b8e", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/dcf8e5238739640e355953fa60edc53eb5153b8e", "committedDate": "2020-05-06T15:43:35Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODYyNzY1", "url": "https://github.com/palantir/atlasdb/pull/4757#pullrequestreview-406862765", "createdAt": "2020-05-06T18:06:51Z", "commit": {"oid": "dcf8e5238739640e355953fa60edc53eb5153b8e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODowNjo1MVrOGRfMPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNToyN1rOGRgPVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MDAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/palantir/atlasdb/pull/4757#discussion_r420990012", "createdAt": "2020-05-06T18:06:51Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/main/java/com/palantir/util/SafeShutdownRunner.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.util;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+\n+public class SafeShutdownRunner implements AutoCloseable {\n+    private final ExecutorService executor = PTExecutors\n+            .newFixedThreadPool(5, new NamedThreadFactory(\"safe-shutdown-runner\", true));\n+    private final List<Throwable> failures = new ArrayList<>();\n+    private final Duration timeoutDuration;\n+\n+    public SafeShutdownRunner(Duration timeoutDuration) {\n+        this.timeoutDuration = timeoutDuration;\n+    }\n+\n+    public void shutdownSafely(Runnable shutdownCallback) {\n+        Future<?> future = executor.submit(shutdownCallback);\n+        try {\n+            future.get(timeoutDuration.toMillis(), TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            failures.add(e);\n+        } catch (ExecutionException e) {\n+            failures.add(e.getCause());\n+        } catch (TimeoutException e) {\n+            future.cancel(true);\n+            failures.add(e);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        executor.shutdown();\n+        if (!failures.isEmpty()) {\n+            RuntimeException closeFailed = new SafeRuntimeException(\n+                    \"Close failed. Please inspect the code and fix the failures\");\n+            failures.forEach(closeFailed::addSuppressed);\n+            throw closeFailed;\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf8e5238739640e355953fa60edc53eb5153b8e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5MDQxNQ==", "bodyText": "Can we have a message assert on this? I think the point here is that the exception thrown by the runner close isn't the exception that happened inside the shutdown operation", "url": "https://github.com/palantir/atlasdb/pull/4757#discussion_r420990415", "createdAt": "2020-05-06T18:07:29Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/test/java/com/palantir/util/SafeShutdownRunnerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Stream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+public class SafeShutdownRunnerTest {\n+    private static final RuntimeException EXCEPTION = new RuntimeException(\"test\");\n+\n+    private Runnable mockRunnable = mock(Runnable.class);\n+    private Runnable throwingRunnable = mock(Runnable.class);\n+    private Runnable verySlowUninterruptibleRunnable = mock(Runnable.class);\n+\n+    @Before\n+    public void setupMocks() {\n+        doAnswer(invocation -> {\n+            Uninterruptibles.sleepUninterruptibly(10_000, TimeUnit.MILLISECONDS);\n+            return null;\n+        }).when(verySlowUninterruptibleRunnable).run();\n+        doThrow(EXCEPTION).when(throwingRunnable).run();\n+    }\n+\n+    @Test\n+    public void runnerRunsOneTask() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofSeconds(1));\n+\n+        runner.shutdownSafely(mockRunnable);\n+\n+        verify(mockRunnable, times(1)).run();\n+        assertThatCode(runner::close).doesNotThrowAnyException();\n+    }\n+\n+    @Test\n+    public void exceptionsAreSuppressedAndReportedWhenClosing() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofSeconds(1));\n+\n+        assertThatCode(() -> runner.shutdownSafely(throwingRunnable)).doesNotThrowAnyException();\n+        assertThatThrownBy(runner::close)\n+                .isInstanceOf(RuntimeException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf8e5238739640e355953fa60edc53eb5153b8e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNDcxNA==", "bodyText": "I guess this is fine. A service with tons of TransactionManagers could end up having a bunch of stuck threads though, especially if things are re-opened and closed (though if things hang uninterruptibly I guess there isn't much we can do).\nNote: This does not actually create the threads until needed so most of the time you only create one thread even though we're making a fixed thread pool of 5", "url": "https://github.com/palantir/atlasdb/pull/4757#discussion_r421004714", "createdAt": "2020-05-06T18:31:27Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/main/java/com/palantir/util/SafeShutdownRunner.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.util;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.palantir.common.concurrent.NamedThreadFactory;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+\n+public class SafeShutdownRunner implements AutoCloseable {\n+    private final ExecutorService executor = PTExecutors\n+            .newFixedThreadPool(5, new NamedThreadFactory(\"safe-shutdown-runner\", true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf8e5238739640e355953fa60edc53eb5153b8e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNzE4OQ==", "bodyText": "Interesting. I guess it never gets executed, and we drop out after the time limit.", "url": "https://github.com/palantir/atlasdb/pull/4757#discussion_r421007189", "createdAt": "2020-05-06T18:35:27Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-commons/src/test/java/com/palantir/util/SafeShutdownRunnerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+import java.time.Duration;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Stream;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.util.concurrent.Uninterruptibles;\n+\n+public class SafeShutdownRunnerTest {\n+    private static final RuntimeException EXCEPTION = new RuntimeException(\"test\");\n+\n+    private Runnable mockRunnable = mock(Runnable.class);\n+    private Runnable throwingRunnable = mock(Runnable.class);\n+    private Runnable verySlowUninterruptibleRunnable = mock(Runnable.class);\n+\n+    @Before\n+    public void setupMocks() {\n+        doAnswer(invocation -> {\n+            Uninterruptibles.sleepUninterruptibly(10_000, TimeUnit.MILLISECONDS);\n+            return null;\n+        }).when(verySlowUninterruptibleRunnable).run();\n+        doThrow(EXCEPTION).when(throwingRunnable).run();\n+    }\n+\n+    @Test\n+    public void runnerRunsOneTask() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofSeconds(1));\n+\n+        runner.shutdownSafely(mockRunnable);\n+\n+        verify(mockRunnable, times(1)).run();\n+        assertThatCode(runner::close).doesNotThrowAnyException();\n+    }\n+\n+    @Test\n+    public void exceptionsAreSuppressedAndReportedWhenClosing() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofSeconds(1));\n+\n+        assertThatCode(() -> runner.shutdownSafely(throwingRunnable)).doesNotThrowAnyException();\n+        assertThatThrownBy(runner::close)\n+                .isInstanceOf(RuntimeException.class)\n+                .hasSuppressedException(EXCEPTION);\n+    }\n+\n+    @Test\n+    public void slowTasksTimeOutWithoutThrowing() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofMillis(50));\n+\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+\n+        verify(verySlowUninterruptibleRunnable, times(2)).run();\n+\n+        closeAndAssertNumberOfTimeouts(runner, 2);\n+    }\n+\n+    @Test\n+    public void otherTasksStillRunAfterSlowTasksThatTimeOut() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofMillis(50));\n+\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(mockRunnable);\n+\n+        verify(verySlowUninterruptibleRunnable, times(2)).run();\n+        verify(mockRunnable, times(1)).run();\n+\n+        closeAndAssertNumberOfTimeouts(runner, 2);\n+    }\n+\n+    @Test\n+    public void neverRunsRemainingTasksIfExecutorFillsUpWithUninteruptibleTasks() {\n+        SafeShutdownRunner runner = new SafeShutdownRunner(Duration.ofMillis(50));\n+\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(verySlowUninterruptibleRunnable);\n+        runner.shutdownSafely(mockRunnable);\n+\n+        verify(verySlowUninterruptibleRunnable, times(5)).run();\n+        verify(mockRunnable, never()).run();\n+\n+        closeAndAssertNumberOfTimeouts(runner, 7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf8e5238739640e355953fa60edc53eb5153b8e"}, "originalPosition": 116}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a08bb49ca5e44b48c44dfea085d828b4eeed85b", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/9a08bb49ca5e44b48c44dfea085d828b4eeed85b", "committedDate": "2020-05-06T21:04:13Z", "message": "Address CR:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0aa3248528807ead7da1bccb98a1a0e993b9df7", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/f0aa3248528807ead7da1bccb98a1a0e993b9df7", "committedDate": "2020-05-07T08:51:01Z", "message": "Merge branch 'tm/better-close' of github.com:palantir/atlasdb into tm/better-close"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Mjc2Mzg0", "url": "https://github.com/palantir/atlasdb/pull/4757#pullrequestreview-407276384", "createdAt": "2020-05-07T08:55:21Z", "commit": {"oid": "f0aa3248528807ead7da1bccb98a1a0e993b9df7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2816, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}