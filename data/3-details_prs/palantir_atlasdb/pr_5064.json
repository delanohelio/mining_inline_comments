{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NTA5ODUy", "number": 5064, "title": "[LE] Implement SlidingWindowWeightedMeanGauge", "bodyText": "Goals (and why):\nWe need a gauge that will accumulate the reported leader election metrics into a sensible approximation of what is going on, which is probably the weighted mean for each of the non-count metrics (we get p99, p95, mean, and count).\nImplementation Description (bullets):\nUsing caffeine cache as a sliding window.\nTesting (What was existing testing like?  What have you done to improve it?):\nUnit tests\nConcerns (what feedback would you like?):\nWe explicitly do not protect against overflows in calculations since that will not happen for our use case. Should we implement it anyway, and just return null/throw if encountered?\nWhere should we start reviewing?:\nSmall\nPriority (whenever / two weeks / yesterday):\nToday", "createdAt": "2020-10-21T12:47:32Z", "url": "https://github.com/palantir/atlasdb/pull/5064", "merged": true, "mergeCommit": {"oid": "ec07c179c38beb13222606c069e5d42d4c9ce3c4"}, "closed": true, "closedAt": "2020-10-21T15:10:50Z", "author": {"login": "gmaretic"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUsewKAH2gAyNTA3NTA5ODUyOmJiMDE4MGUzZTY0NGU0NTg4ZmYwYzMzZTEwZTJhZmI1NzUwMzg4MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUuzDXgFqTUxMzc5NDEwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb0180e3e644e4588ff0c33e10e2afb575038832", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/bb0180e3e644e4588ff0c33e10e2afb575038832", "committedDate": "2020-10-21T12:25:08Z", "message": "Impl and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b36e5f0c0df54627f382aeffe4ade4b80512ae1", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/9b36e5f0c0df54627f382aeffe4ade4b80512ae1", "committedDate": "2020-10-21T12:43:27Z", "message": "Nit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acda7b907bf6d1c181fa3dcdbe2784c5b9f57f32", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/acda7b907bf6d1c181fa3dcdbe2784c5b9f57f32", "committedDate": "2020-10-21T13:38:10Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53f7a477b9353b31e9d0921e3544aec22188f07b", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/53f7a477b9353b31e9d0921e3544aec22188f07b", "committedDate": "2020-10-21T13:38:10Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "committedDate": "2020-10-21T13:38:10Z", "message": "run spotless apply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e5b12c3a352ec7f68b2eabe9e105824820b376b", "author": {"user": {"login": "Jolyon-S", "name": "Jolyon"}}, "url": "https://github.com/palantir/atlasdb/commit/4e5b12c3a352ec7f68b2eabe9e105824820b376b", "committedDate": "2020-10-21T13:38:10Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzAwNjc5", "url": "https://github.com/palantir/atlasdb/pull/5064#pullrequestreview-513700679", "createdAt": "2020-10-21T13:43:55Z", "commit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo0Mzo1NVrOHls5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo0ODoxM1rOHltNCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NDg5Ng==", "bodyText": "Rename to something just so that we know the purpose here is literally just as arbitrary keys for the cache.", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509294896", "createdAt": "2020-10-21T13:43:55Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import com.codahale.metrics.Gauge;\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.immutables.value.Value;\n+\n+/**\n+ * A gauge that calculates the weighted mean of updates during a sliding window of time. Correctness is only guaranteed\n+ * as long as the sum of recorded weights and sum of weighted values do not exceed {@link Long#MAX_VALUE} and\n+ * {@link Double#MAX_VALUE}, respectively.\n+ */\n+public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n+    private final Cache<Long, WeightedEntry> updates;\n+    private final AtomicLong counter = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NzA3NQ==", "bodyText": "Use just mapToLong", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509297075", "createdAt": "2020-10-21T13:45:53Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import com.codahale.metrics.Gauge;\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.immutables.value.Value;\n+\n+/**\n+ * A gauge that calculates the weighted mean of updates during a sliding window of time. Correctness is only guaranteed\n+ * as long as the sum of recorded weights and sum of weighted values do not exceed {@link Long#MAX_VALUE} and\n+ * {@link Double#MAX_VALUE}, respectively.\n+ */\n+public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n+    private final Cache<Long, WeightedEntry> updates;\n+    private final AtomicLong counter = new AtomicLong();\n+\n+    public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n+        this.updates =\n+                Caffeine.newBuilder().expireAfterWrite(expirationDuration).build();\n+    }\n+\n+    public static SlidingWindowWeightedMeanGauge create() {\n+        return new SlidingWindowWeightedMeanGauge(Duration.ofMinutes(5L));\n+    }\n+\n+    @Override\n+    public Double getValue() {\n+        List<WeightedEntry> snapshot = ImmutableList.copyOf(updates.asMap().values());\n+        return summarize(snapshot);\n+    }\n+\n+    public void update(double value, long weight) {\n+        Preconditions.checkArgument(weight >= 0, \"Weight cannot be negative.\", SafeArg.of(\"weight\", weight));\n+        if (weight == 0) {\n+            return;\n+        }\n+        updates.put(counter.getAndIncrement(), ImmutableWeightedEntry.of(value, weight));\n+    }\n+\n+    private double summarize(List<WeightedEntry> snapshot) {\n+        long totalWeight =\n+                snapshot.stream().map(WeightedEntry::weight).mapToLong(x -> x).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5ODYxNQ==", "bodyText": "same as above", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509298615", "createdAt": "2020-10-21T13:47:07Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import com.codahale.metrics.Gauge;\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.immutables.value.Value;\n+\n+/**\n+ * A gauge that calculates the weighted mean of updates during a sliding window of time. Correctness is only guaranteed\n+ * as long as the sum of recorded weights and sum of weighted values do not exceed {@link Long#MAX_VALUE} and\n+ * {@link Double#MAX_VALUE}, respectively.\n+ */\n+public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n+    private final Cache<Long, WeightedEntry> updates;\n+    private final AtomicLong counter = new AtomicLong();\n+\n+    public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n+        this.updates =\n+                Caffeine.newBuilder().expireAfterWrite(expirationDuration).build();\n+    }\n+\n+    public static SlidingWindowWeightedMeanGauge create() {\n+        return new SlidingWindowWeightedMeanGauge(Duration.ofMinutes(5L));\n+    }\n+\n+    @Override\n+    public Double getValue() {\n+        List<WeightedEntry> snapshot = ImmutableList.copyOf(updates.asMap().values());\n+        return summarize(snapshot);\n+    }\n+\n+    public void update(double value, long weight) {\n+        Preconditions.checkArgument(weight >= 0, \"Weight cannot be negative.\", SafeArg.of(\"weight\", weight));\n+        if (weight == 0) {\n+            return;\n+        }\n+        updates.put(counter.getAndIncrement(), ImmutableWeightedEntry.of(value, weight));\n+    }\n+\n+    private double summarize(List<WeightedEntry> snapshot) {\n+        long totalWeight =\n+                snapshot.stream().map(WeightedEntry::weight).mapToLong(x -> x).sum();\n+        if (totalWeight == 0) {\n+            return 0.0;\n+        }\n+        double valueSum = snapshot.stream()\n+                .map(entry -> entry.value() * entry.weight())\n+                .mapToDouble(x -> x)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5OTMzMg==", "bodyText": "can we reduce to <1%? Just to make this a bit tighter", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509299332", "createdAt": "2020-10-21T13:47:40Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.withinPercentage;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class SlidingWindowWeightedMeanGaugeTest {\n+    private SlidingWindowWeightedMeanGauge gauge = SlidingWindowWeightedMeanGauge.create();\n+\n+    @Test\n+    public void initialValueIsZero() {\n+        assertValueWithinOnePercentOf(0.0);\n+    }\n+\n+    @Test\n+    public void withEqualWeightsCalculateMeanOfValues() {\n+        gauge.update(1.2, 5L);\n+        gauge.update(1.5, 5L);\n+        gauge.update(1.8, 5L);\n+        assertValueWithinOnePercentOf(1.5);\n+    }\n+\n+    @Test\n+    public void calculateWeightedMean() {\n+        gauge.update(101.0, 1);\n+        gauge.update(1.0, 98);\n+        gauge.update(301.0, 1);\n+        assertValueWithinOnePercentOf(5.0);\n+    }\n+\n+    @Test\n+    public void testMultipleGets() {\n+        gauge.update(1.0, 1);\n+        assertValueWithinOnePercentOf(1.0);\n+        assertValueWithinOnePercentOf(1.0);\n+        gauge.update(0.5, 4);\n+        assertValueWithinOnePercentOf(0.6);\n+    }\n+\n+    @Test\n+    public void entriesWithWeightZeroAreIgnored() {\n+        gauge.update(999.0, 0);\n+        gauge.update(1.0, 1);\n+        gauge.update(123.0, 0);\n+        assertValueWithinOnePercentOf(1.0);\n+    }\n+\n+    @Test\n+    public void entriesWithNegativeWeightThrow() {\n+        gauge.update(5.0, 4);\n+        assertThatThrownBy(() -> gauge.update(2345.0, -1)).isInstanceOf(IllegalArgumentException.class);\n+        assertValueWithinOnePercentOf(5.0);\n+    }\n+\n+    @Test\n+    public void entriesExpire() {\n+        SlidingWindowWeightedMeanGauge expiringGauge = new SlidingWindowWeightedMeanGauge(Duration.ZERO);\n+        expiringGauge.update(100.0, 50);\n+        expiringGauge.update(50.0, 4);\n+        assertThat(expiringGauge.getValue()).isCloseTo(0.0, withinPercentage(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5OTk3OA==", "bodyText": "Also, use other method", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509299978", "createdAt": "2020-10-21T13:48:13Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.withinPercentage;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class SlidingWindowWeightedMeanGaugeTest {\n+    private SlidingWindowWeightedMeanGauge gauge = SlidingWindowWeightedMeanGauge.create();\n+\n+    @Test\n+    public void initialValueIsZero() {\n+        assertValueWithinOnePercentOf(0.0);\n+    }\n+\n+    @Test\n+    public void withEqualWeightsCalculateMeanOfValues() {\n+        gauge.update(1.2, 5L);\n+        gauge.update(1.5, 5L);\n+        gauge.update(1.8, 5L);\n+        assertValueWithinOnePercentOf(1.5);\n+    }\n+\n+    @Test\n+    public void calculateWeightedMean() {\n+        gauge.update(101.0, 1);\n+        gauge.update(1.0, 98);\n+        gauge.update(301.0, 1);\n+        assertValueWithinOnePercentOf(5.0);\n+    }\n+\n+    @Test\n+    public void testMultipleGets() {\n+        gauge.update(1.0, 1);\n+        assertValueWithinOnePercentOf(1.0);\n+        assertValueWithinOnePercentOf(1.0);\n+        gauge.update(0.5, 4);\n+        assertValueWithinOnePercentOf(0.6);\n+    }\n+\n+    @Test\n+    public void entriesWithWeightZeroAreIgnored() {\n+        gauge.update(999.0, 0);\n+        gauge.update(1.0, 1);\n+        gauge.update(123.0, 0);\n+        assertValueWithinOnePercentOf(1.0);\n+    }\n+\n+    @Test\n+    public void entriesWithNegativeWeightThrow() {\n+        gauge.update(5.0, 4);\n+        assertThatThrownBy(() -> gauge.update(2345.0, -1)).isInstanceOf(IllegalArgumentException.class);\n+        assertValueWithinOnePercentOf(5.0);\n+    }\n+\n+    @Test\n+    public void entriesExpire() {\n+        SlidingWindowWeightedMeanGauge expiringGauge = new SlidingWindowWeightedMeanGauge(Duration.ZERO);\n+        expiringGauge.update(100.0, 50);\n+        expiringGauge.update(50.0, 4);\n+        assertThat(expiringGauge.getValue()).isCloseTo(0.0, withinPercentage(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5OTMzMg=="}, "originalCommit": {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7771b0d137c8c67446f8ed69bd7caef119e32004", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/7771b0d137c8c67446f8ed69bd7caef119e32004", "committedDate": "2020-10-21T13:58:59Z", "message": "Address CR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8494a845636bb9eb03f44514ffc0f96b120a2c2f", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/8494a845636bb9eb03f44514ffc0f96b120a2c2f", "committedDate": "2020-10-21T13:59:18Z", "message": "Merge branch 'le/swwmg' of github.com:palantir/atlasdb into le/swwmg"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzE5NzM3", "url": "https://github.com/palantir/atlasdb/pull/5064#pullrequestreview-513719737", "createdAt": "2020-10-21T14:00:29Z", "commit": {"oid": "8494a845636bb9eb03f44514ffc0f96b120a2c2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNzk0MTA1", "url": "https://github.com/palantir/atlasdb/pull/5064#pullrequestreview-513794105", "createdAt": "2020-10-21T15:07:07Z", "commit": {"oid": "8494a845636bb9eb03f44514ffc0f96b120a2c2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2405, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}