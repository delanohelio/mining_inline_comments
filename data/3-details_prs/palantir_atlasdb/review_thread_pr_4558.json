{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDQxNzI1", "number": 4558, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NzoxNlrODedXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMjoyOFrODeihAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY0OTEzOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/integrationInput/java/com/palantir/atlasdb/table/description/generated/SchemaApiTestTable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NzoxNlrOFnmmoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NzoxNlrOFnmmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTI2NA==", "bodyText": "generally, prefer having the method name tell you what it does. Augment just means 'change', pretty much - maybe something like optimizeColumnSelections and optimizeColumnSelection.\nAlso, instead of streaming it and collecting back into a new collection, I might be minded to just write return Iterables.transform(ranges, this::optimizeColumnSelection).", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377071264", "createdAt": "2020-02-10T13:47:16Z", "author": {"login": "j-baker"}, "path": "atlasdb-client/src/integrationInput/java/com/palantir/atlasdb/table/description/generated/SchemaApiTestTable.java", "diffHunk": "@@ -688,21 +691,31 @@ public void delete(Iterable<SchemaApiTestRow> rows) {\n         return transformed;\n     }\n \n-    public BatchingVisitableView<SchemaApiTestRowResult> getRange(RangeRequest range) {\n+    private RangeRequest augmentRangeRequest(RangeRequest range) {\n         if (range.getColumnNames().isEmpty()) {\n-            range = range.getBuilder().retainColumns(allColumns).build();\n+            return range.getBuilder().retainColumns(allColumns).build();\n         }\n-        return BatchingVisitables.transform(t.getRange(tableRef, range), new Function<RowResult<byte[]>, SchemaApiTestRowResult>() {\n+        return range;\n+    }\n+\n+    public BatchingVisitableView<SchemaApiTestRowResult> getRange(RangeRequest range) {\n+        return BatchingVisitables.transform(t.getRange(tableRef, augmentRangeRequest(range)), new Function<RowResult<byte[]>, SchemaApiTestRowResult>() {\n             @Override\n             public SchemaApiTestRowResult apply(RowResult<byte[]> input) {\n                 return SchemaApiTestRowResult.of(input);\n             }\n         });\n     }\n \n+    private Iterable<RangeRequest> augmentRanges(Iterable<RangeRequest> ranges) {\n+        return StreamSupport.stream(ranges.spliterator(), false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "461b07e7c9944650e869d14681759fcfb0be16cc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY2ODQ2OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1MjozNVrOFnmx5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1MjozNVrOFnmx5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NDE1MQ==", "bodyText": "augmentation is not required here", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377074151", "createdAt": "2020-02-10T13:52:35Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -901,31 +914,31 @@ private void renderGetRanges() {\n             line(\"public <T> Stream<T> getRanges(Iterable<RangeRequest> ranges,\");\n             line(\"                               int concurrencyLevel,\");\n             line(\"                               BiFunction<RangeRequest, BatchingVisitable<\", RowResult, \">, T> visitableProcessor) {\"); {\n-                line(\"return t.getRanges(tableRef, ranges, concurrencyLevel,\");\n+                line(\"return t.getRanges(tableRef, augmentRanges(ranges), concurrencyLevel,\");\n                 line(\"        (rangeRequest, visitable) -> visitableProcessor.apply(rangeRequest, BatchingVisitables.transform(visitable, \", RowResult, \"::of)));\");\n             } line(\"}\");\n             line();\n             line(\"public <T> Stream<T> getRanges(Iterable<RangeRequest> ranges,\");\n             line(\"                               BiFunction<RangeRequest, BatchingVisitable<\", RowResult, \">, T> visitableProcessor) {\"); {\n-                line(\"return t.getRanges(tableRef, ranges,\");\n+                line(\"return t.getRanges(tableRef, augmentRanges(ranges),\");\n                 line(\"        (rangeRequest, visitable) -> visitableProcessor.apply(rangeRequest, BatchingVisitables.transform(visitable, \", RowResult, \"::of)));\");\n             } line(\"}\");\n             line();\n             line(\"public Stream<BatchingVisitable<\", RowResult, \">> getRangesLazy(Iterable<RangeRequest> ranges) {\"); {\n-                line(\"Stream<BatchingVisitable<RowResult<byte[]>>> rangeResults = t.getRangesLazy(tableRef, ranges);\");\n+                line(\"Stream<BatchingVisitable<RowResult<byte[]>>> rangeResults = t.getRangesLazy(tableRef, augmentRanges(ranges));\");\n                 line(\"return rangeResults.map(visitable -> BatchingVisitables.transform(visitable, \", RowResult, \"::of));\");\n             } line(\"}\");\n         }\n \n         private void renderDeleteRange() {\n             line(\"public void deleteRange(RangeRequest range) {\"); {\n-                line(\"deleteRanges(ImmutableSet.of(range));\");\n+                line(\"deleteRanges(ImmutableSet.of(augmentRangeRequest(range)));\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "461b07e7c9944650e869d14681759fcfb0be16cc"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ1Nzk2OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxMjowNVrOFnuYQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxMjowNVrOFnuYQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5ODY1OQ==", "bodyText": "nice!", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377198659", "createdAt": "2020-02-10T17:12:05Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -866,12 +873,22 @@ private void renderNamedDelete() {\n             } line(\"}\");\n         }\n \n-        private void renderGetRange() {\n-            line(\"public BatchingVisitableView<\", RowResult, \"> getRange(RangeRequest range) {\"); {\n+        private void renderOptimizeRangeRequests() {\n+            line(\"private RangeRequest optimizeColumnSelection(RangeRequest range) {\"); {\n                 line(\"if (range.getColumnNames().isEmpty()) {\"); {\n-                    line(\"range = range.getBuilder().retainColumns(allColumns).build();\");\n+                    line(\"return range.getBuilder().retainColumns(allColumns).build();\");\n                 } line(\"}\");\n-                line(\"return BatchingVisitables.transform(t.getRange(tableRef, range), new Function<RowResult<byte[]>, \", RowResult, \">() {\"); {\n+                line(\"return range;\");\n+            } line(\"}\");\n+            line();\n+            line(\"private Iterable<RangeRequest> optimizeColumnSelections(Iterable<RangeRequest> ranges) {\"); {\n+                line(\"return Iterables.transform(ranges, this::optimizeColumnSelection);\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ2NTE5OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNDoxMFrOFnucuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNDoxMFrOFnucuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5OTgwMA==", "bodyText": "I think we still want this to be named optimizeRangeRequest? A ColumnSelection is a different thing (which I see you've added renderer code for later on).", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377199800", "createdAt": "2020-02-10T17:14:10Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -866,12 +873,22 @@ private void renderNamedDelete() {\n             } line(\"}\");\n         }\n \n-        private void renderGetRange() {\n-            line(\"public BatchingVisitableView<\", RowResult, \"> getRange(RangeRequest range) {\"); {\n+        private void renderOptimizeRangeRequests() {\n+            line(\"private RangeRequest optimizeColumnSelection(RangeRequest range) {\"); {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ2OTI0OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNToyNVrOFnufTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNToyNVrOFnufTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMDQ2Mg==", "bodyText": "While the code here makes sense, I think it's not normally how the rendering code is structured. Something like the following is more common:\n            line(\"private ColumnSelection optimizeColumnSelection(ColumnSelection columns) {\"); {\n                line(\"if (columns.allColumnsSelected()) {\"); {\n                    line(\"return allColumns;\");\n                } line(\"}\");\n              line(\"return columns;\");\n            } line(\"}\");", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377200462", "createdAt": "2020-02-10T17:15:25Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -955,13 +972,23 @@ private void renderNamedDeleteRanges() {\n             } line(\"}\");\n         }\n \n+        private void renderOptimizeColumnSelection() {\n+            line(\"private ColumnSelection optimizeColumnSelection(ColumnSelection columns) {\"); {\n+                line(\"if (columns.allColumnsSelected()) {\"); {\n+                    line(\"return allColumns;\");\n+                    line(\"}\");\n+                } line(\"return columns;\");\n+            } line(\"}\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ3MzU4OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNjo0M1rOFnuiEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxNjo0M1rOFnuiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMTE3MA==", "bodyText": "nit: I'm pretty sure Collectors and StreamSupport aren't used any more.", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377201170", "createdAt": "2020-02-10T17:16:43Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -1294,5 +1323,9 @@ private static boolean isDynamic(TableMetadata table) {\n         ColumnRangeSelections.class,\n         ColumnRangeSelection.class,\n         Iterators.class,\n+        ArrayList.class,\n+        Collectors.class,\n+        StreamSupport.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ3OTMzOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxODoxOVrOFnuliQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoxODoxOVrOFnuliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjA1Nw==", "bodyText": "If changing the above, this should also be changed.", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377202057", "createdAt": "2020-02-10T17:18:19Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/render/TableRenderer.java", "diffHunk": "@@ -866,12 +873,22 @@ private void renderNamedDelete() {\n             } line(\"}\");\n         }\n \n-        private void renderGetRange() {\n-            line(\"public BatchingVisitableView<\", RowResult, \"> getRange(RangeRequest range) {\"); {\n+        private void renderOptimizeRangeRequests() {\n+            line(\"private RangeRequest optimizeColumnSelection(RangeRequest range) {\"); {\n                 line(\"if (range.getColumnNames().isEmpty()) {\"); {\n-                    line(\"range = range.getBuilder().retainColumns(allColumns).build();\");\n+                    line(\"return range.getBuilder().retainColumns(allColumns).build();\");\n                 } line(\"}\");\n-                line(\"return BatchingVisitables.transform(t.getRange(tableRef, range), new Function<RowResult<byte[]>, \", RowResult, \">() {\"); {\n+                line(\"return range;\");\n+            } line(\"}\");\n+            line();\n+            line(\"private Iterable<RangeRequest> optimizeColumnSelections(Iterable<RangeRequest> ranges) {\"); {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzQ5Mzc2OnYy", "diffSide": "RIGHT", "path": "changelog/@unreleased/pr-4558.v2.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMjoyOFrOFnuuQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzoyMjoyOFrOFnuuQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNDI4OA==", "bodyText": "I think it's easier to say what the change does (as opposed to going into detail as to how we do it). So improvement is correct, but I'd write this more as something like:\n\nAtlasDB generated code now optimises getRanges and getRangesLazy to select only required columns. This is known to improve performance for single-column tables (Nathan's optimization). This does not affect dynamic column tables.\n\nAlso, I'd add at the end, for our non-metallic friends,\n\nAtlasDB users that check in their schemas need to regenerate them to benefit from this improvement.", "url": "https://github.com/palantir/atlasdb/pull/4558#discussion_r377204288", "createdAt": "2020-02-10T17:22:28Z", "author": {"login": "jeremyk-91"}, "path": "changelog/@unreleased/pr-4558.v2.yml", "diffHunk": "@@ -0,0 +1,8 @@\n+type: improvement\n+improvement:\n+  description: \"In order to automatically use Nathan's optimization on single-column\n+    table range scans, the generated code explicitly specifies the set of columns\n+    in \\\"all columns\\\" range scan request. \\n\\nThis does not affect dynamic column\n+    tables.\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a10fe6b6d6522c128104d84f53cc5aecde6050"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2288, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}