{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NjQyMjc1", "number": 5067, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1NDoxNlrOEwqkyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMDo1N1rOEycXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDY0NjUwOnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1NDoxNlrOHmXeLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDo1ODo0OVrOHmmH1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5MjQ5Mg==", "bodyText": "(Just an observation): this replaces google's deprecated Objects.equal with the java.util.Objects one. \ud83d\udc4d", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r509992492", "createdAt": "2020-10-22T08:54:16Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "diffHunk": "@@ -169,7 +169,7 @@ static boolean isMatchingCf(CfDef clientSide, CfDef clusterSide) {\n                     clusterSide.compression_options.get(CassandraConstants.CFDEF_COMPRESSION_CHUNK_LENGTH_KEY));\n             return false;\n         }\n-        if (!Objects.equal(clientSide.compaction_strategy, clusterSide.compaction_strategy)) {\n+        if (!Objects.equals(clientSide.compaction_strategy, clusterSide.compaction_strategy)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3MDUxMw==", "bodyText": "I'll write an automated refactor from this guava method to j.u.Objects later today", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510170513", "createdAt": "2020-10-22T13:40:56Z", "author": {"login": "carterkozak"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "diffHunk": "@@ -169,7 +169,7 @@ static boolean isMatchingCf(CfDef clientSide, CfDef clusterSide) {\n                     clusterSide.compression_options.get(CassandraConstants.CFDEF_COMPRESSION_CHUNK_LENGTH_KEY));\n             return false;\n         }\n-        if (!Objects.equal(clientSide.compaction_strategy, clusterSide.compaction_strategy)) {\n+        if (!Objects.equals(clientSide.compaction_strategy, clusterSide.compaction_strategy)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5MjQ5Mg=="}, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIzMjUzNQ==", "bodyText": "palantir/gradle-baseline#1521", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510232535", "createdAt": "2020-10-22T14:58:49Z", "author": {"login": "carterkozak"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "diffHunk": "@@ -169,7 +169,7 @@ static boolean isMatchingCf(CfDef clientSide, CfDef clusterSide) {\n                     clusterSide.compression_options.get(CassandraConstants.CFDEF_COMPRESSION_CHUNK_LENGTH_KEY));\n             return false;\n         }\n-        if (!Objects.equal(clientSide.compaction_strategy, clusterSide.compaction_strategy)) {\n+        if (!Objects.equals(clientSide.compaction_strategy, clusterSide.compaction_strategy)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5MjQ5Mg=="}, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDY1ODE5OnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1NzowMFrOHmXlaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo1MTowNlrOHmgH5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NDM0Nw==", "bodyText": "I'm not sure about this one - reading the comment where this is called:\n    // because unfortunately .equals takes into account if fields with defaults are populated or not\n    // also because compression_options after serialization / deserialization comes back as blank\n    // for the ones we set 4K chunk on... ?!\n\nMy guess is that the intention is to compare references in this first check. An extra test around this would help verify whether this refactor would break it or not.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r509994347", "createdAt": "2020-10-22T08:57:00Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "diffHunk": "@@ -206,7 +206,7 @@ private static void logMismatch(\n     }\n \n     private static boolean equalsIgnoringClasspath(String class1, String class2) {\n-        if (class1 == class2) {\n+        if (Objects.equals(class1, class2)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNDI0NA==", "bodyText": "This change should be safe, if the strings are equal (either both null or string-wise equal), both the before and after here would end up returning true. I added a unit test that shows this and passes both before and after.\nI think that comment applies to optionsMapsFunctionallyEqual.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510134244", "createdAt": "2020-10-22T12:51:06Z", "author": {"login": "schlosna"}, "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/ColumnFamilyDefinitions.java", "diffHunk": "@@ -206,7 +206,7 @@ private static void logMismatch(\n     }\n \n     private static boolean equalsIgnoringClasspath(String class1, String class2) {\n-        if (class1 == class2) {\n+        if (Objects.equals(class1, class2)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NDM0Nw=="}, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDY2MzY0OnYy", "diffSide": "RIGHT", "path": "atlasdb-commons/src/main/java/com/palantir/common/time/Clock.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1ODowN1rOHmXosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjoyMToyNFrOHme-Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NTE4Ng==", "bodyText": "bizarre - what's the actual diff?", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r509995186", "createdAt": "2020-10-22T08:58:07Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/time/Clock.java", "diffHunk": "@@ -20,7 +20,7 @@\n public interface Clock {\n     /**\n      * @return The time in milliseconds. This is conventionally interpreted as the number of\n-     *         milliseconds since\u00a01970-01-01T00:00Z excluding leap seconds not included in the\n+     *         milliseconds since 1970-01-01T00:00Z excluding leap seconds not included in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExMzQ4MA==", "bodyText": "there was a unicode non-breaking space that the javadoc compiler was complaining about that I converted to a standard ASCII space", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510113480", "createdAt": "2020-10-22T12:18:28Z", "author": {"login": "schlosna"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/time/Clock.java", "diffHunk": "@@ -20,7 +20,7 @@\n public interface Clock {\n     /**\n      * @return The time in milliseconds. This is conventionally interpreted as the number of\n-     *         milliseconds since\u00a01970-01-01T00:00Z excluding leap seconds not included in the\n+     *         milliseconds since 1970-01-01T00:00Z excluding leap seconds not included in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NTE4Ng=="}, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExNTM0Nw==", "bodyText": "That's hilarious - nice!", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510115347", "createdAt": "2020-10-22T12:21:24Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-commons/src/main/java/com/palantir/common/time/Clock.java", "diffHunk": "@@ -20,7 +20,7 @@\n public interface Clock {\n     /**\n      * @return The time in milliseconds. This is conventionally interpreted as the number of\n-     *         milliseconds since\u00a01970-01-01T00:00Z excluding leap seconds not included in the\n+     *         milliseconds since 1970-01-01T00:00Z excluding leap seconds not included in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NTE4Ng=="}, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDY2ODQxOnYy", "diffSide": "RIGHT", "path": "lock-impl/src/main/java/com/palantir/lock/impl/LockServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1OToxMFrOHmXrrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo1MjoxNVrOHmgLGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NTk1MQ==", "bodyText": "I'm curious as to why you switched these around - there is a null check directly above which ensures that we don't call .equals on a null.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r509995951", "createdAt": "2020-10-22T08:59:10Z", "author": {"login": "Jolyon-S"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LockServiceImpl.java", "diffHunk": "@@ -337,7 +337,7 @@ public HeldLocksToken lockAndGetHeldLocks(String client, LockRequest request) th\n     // We're concerned about sanitizing logs at the info level and above. This method just logs at debug and info.\n     public LockResponse lockWithFullLockResponse(LockClient client, LockRequest request) throws InterruptedException {\n         com.palantir.logsafe.Preconditions.checkNotNull(client);\n-        com.palantir.logsafe.Preconditions.checkArgument(!client.equals(INTERNAL_LOCK_GRANT_CLIENT));\n+        com.palantir.logsafe.Preconditions.checkArgument(!INTERNAL_LOCK_GRANT_CLIENT.equals(client));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNTA2Nw==", "bodyText": "mostly just habit of yoda conditions", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510135067", "createdAt": "2020-10-22T12:52:15Z", "author": {"login": "schlosna"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LockServiceImpl.java", "diffHunk": "@@ -337,7 +337,7 @@ public HeldLocksToken lockAndGetHeldLocks(String client, LockRequest request) th\n     // We're concerned about sanitizing logs at the info level and above. This method just logs at debug and info.\n     public LockResponse lockWithFullLockResponse(LockClient client, LockRequest request) throws InterruptedException {\n         com.palantir.logsafe.Preconditions.checkNotNull(client);\n-        com.palantir.logsafe.Preconditions.checkArgument(!client.equals(INTERNAL_LOCK_GRANT_CLIENT));\n+        com.palantir.logsafe.Preconditions.checkArgument(!INTERNAL_LOCK_GRANT_CLIENT.equals(client));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NTk1MQ=="}, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDY4MDcyOnYy", "diffSide": "RIGHT", "path": "lock-impl/src/main/java/com/palantir/lock/impl/LockServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTowMjowM1rOHmXzXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTowMjowM1rOHmXzXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5NzkxNw==", "bodyText": "It looks like the difference here is that you'll return false if the clientIds are different (where before, if I understand this correctly, just if the references are the same). Presumably the clientId is supposed to uniquely identify a client, but I haven't dug into the code to verify this.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r509997917", "createdAt": "2020-10-22T09:02:03Z", "author": {"login": "Jolyon-S"}, "path": "lock-impl/src/main/java/com/palantir/lock/impl/LockServiceImpl.java", "diffHunk": "@@ -907,7 +907,7 @@ public HeldLocksGrant convertToGrant(HeldLocksToken token) {\n     @Override\n     public HeldLocksToken useGrant(LockClient client, HeldLocksGrant grant) {\n         com.palantir.logsafe.Preconditions.checkNotNull(client);\n-        com.palantir.logsafe.Preconditions.checkArgument(client != INTERNAL_LOCK_GRANT_CLIENT);\n+        com.palantir.logsafe.Preconditions.checkArgument(!INTERNAL_LOCK_GRANT_CLIENT.equals(client));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1cadfd0bdb5d7f490a9666dceffed0f999e555"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjkzNjc3OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMzo0MVrOHmtuhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODowMzo0MVrOHmtuhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1NzEyNQ==", "bodyText": "These are not technically required with gradle-baseline 3.43.0+ per palantir/gradle-baseline#1514 so curious if folks want to remove them from here or leave them to be explicit in case gradle-baseline relaxes either back to a warning.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r510357125", "createdAt": "2020-10-22T18:03:41Z", "author": {"login": "schlosna"}, "path": "build.gradle", "diffHunk": "@@ -107,8 +107,16 @@ allprojects {\n     }\n \n     tasks.withType(JavaCompile) {\n-        // temporarily relax constraints until we can fix all violations\n-        options.errorprone.warn 'CatchBlockLogException',\n+        options.errorprone {\n+            disableWarningsInGeneratedCode = true\n+            excludedPaths = '.*(generated).*'\n+\n+            // increase specific warnings to error until we can treat all warnings as errors\n+            error 'BoxedPrimitiveEquality',\n+                'ReferenceEquality'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0396699bf0780f0e2d5f290548de515417d4eb13"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzI4NDk4OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMDoxM1rOHpFiOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMDoxM1rOHpFiOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0NDM0Nw==", "bodyText": "Isn't this already set by default? Much of our generated code (protobuf) isn't annotated @Generated, so it doesn't help there.\nI updated the build scripts in the -protobufs projects to opt out of error-prone.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r512844347", "createdAt": "2020-10-27T16:30:13Z", "author": {"login": "carterkozak"}, "path": "build.gradle", "diffHunk": "@@ -107,9 +107,12 @@ allprojects {\n     }\n \n     tasks.withType(JavaCompile) {\n-        options.compilerArgs += ['-Werror']\n-        // temporarily relax constraints until we can fix all violations\n-        options.errorprone.disable 'AlmostJavadoc', \n+        options.errorprone {\n+            disableWarningsInGeneratedCode = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0081b02b190bee5253df9cf4ad3feb749a2541db"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzI4OTA5OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMDo1N1rOHpFktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo1MDowNVrOHpJNXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0NDk4MQ==", "bodyText": "Is this necessary? I'm worried about paths that include a generated substring being ignored. I think this will replace the default excludedPaths configuration.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r512844981", "createdAt": "2020-10-27T16:30:57Z", "author": {"login": "carterkozak"}, "path": "build.gradle", "diffHunk": "@@ -107,9 +107,12 @@ allprojects {\n     }\n \n     tasks.withType(JavaCompile) {\n-        options.compilerArgs += ['-Werror']\n-        // temporarily relax constraints until we can fix all violations\n-        options.errorprone.disable 'AlmostJavadoc', \n+        options.errorprone {\n+            disableWarningsInGeneratedCode = true\n+            excludedPaths = '.*(generated).*'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0081b02b190bee5253df9cf4ad3feb749a2541db"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkwNDU0Mw==", "bodyText": "when I have some cycles, I'll push some cleanup to the stream store renderer to allow removal of this (there's also a Sets.newHashSet() in the generated code.", "url": "https://github.com/palantir/atlasdb/pull/5067#discussion_r512904543", "createdAt": "2020-10-27T17:50:05Z", "author": {"login": "schlosna"}, "path": "build.gradle", "diffHunk": "@@ -107,9 +107,12 @@ allprojects {\n     }\n \n     tasks.withType(JavaCompile) {\n-        options.compilerArgs += ['-Werror']\n-        // temporarily relax constraints until we can fix all violations\n-        options.errorprone.disable 'AlmostJavadoc', \n+        options.errorprone {\n+            disableWarningsInGeneratedCode = true\n+            excludedPaths = '.*(generated).*'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0NDk4MQ=="}, "originalCommit": {"oid": "0081b02b190bee5253df9cf4ad3feb749a2541db"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2423, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}