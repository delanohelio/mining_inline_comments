{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NDMxMjg5", "number": 5093, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozODo0MlrOE6PuXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzoyNlrOE6QH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTEwNDk0OnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozODo0MlrOH1Mg5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozODo0MlrOH1Mg5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0MTYwNg==", "bodyText": "Could we use AtlasDbConstants.DEFAULT_INITIALIZE_ASYNC instead of false here (and other places in this PR where we used false)?", "url": "https://github.com/palantir/atlasdb/pull/5093#discussion_r525541606", "createdAt": "2020-11-17T21:38:42Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -53,25 +74,50 @@ public InDbTimestampBoundStore(ConnectionManager connManager, TableReference tim\n         this(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, EMPTY_TABLE_PREFIX));\n     }\n \n-    public static InDbTimestampBoundStore create(ConnectionManager connManager, TableReference timestampTable) {\n+    public static TimestampBoundStore create(ConnectionManager connManager, TableReference timestampTable) {\n         return InDbTimestampBoundStore.create(connManager, timestampTable, EMPTY_TABLE_PREFIX);\n     }\n \n-    public static InDbTimestampBoundStore create(\n+    public static TimestampBoundStore create(\n+            ConnectionManager connManager, TableReference timestampTable, boolean initializeAsync) {\n+        return InDbTimestampBoundStore.create(connManager, timestampTable, EMPTY_TABLE_PREFIX, initializeAsync);\n+    }\n+\n+    public static TimestampBoundStore create(\n             ConnectionManager connManager, TableReference timestampTable, String tablePrefixString) {\n-        return createWithStrategy(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString));\n+        return createWithStrategy(\n+                connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString), false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c282f9d439a4ff8b0fa43aa9589cc87752f94727"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE2NzExOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/DbKeyValueService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NjozOFrOH1NGYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMjoyNDoxM1rOH2KEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTIwMw==", "bodyText": "Would it make sense to push other public members of DbKvs up? I am not sure if we should be limiting the DbKvs api but I may be missing something.", "url": "https://github.com/palantir/atlasdb/pull/5093#discussion_r525551203", "createdAt": "2020-11-17T21:56:38Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/DbKeyValueService.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.impl;\n+\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.processors.AutoDelegate;\n+\n+@AutoDelegate\n+public interface DbKeyValueService extends KeyValueService {\n+\n+    String getTablePrefix();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c282f9d439a4ff8b0fa43aa9589cc87752f94727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU1MDEwNg==", "bodyText": "I looked at the usage of the public members internally, and the only one used that I found was checkDatabaseVersion, but that was already done through casting of the object to DbKvs.", "url": "https://github.com/palantir/atlasdb/pull/5093#discussion_r526550106", "createdAt": "2020-11-19T02:24:13Z", "author": {"login": "rzpt"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/DbKeyValueService.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.impl;\n+\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.processors.AutoDelegate;\n+\n+@AutoDelegate\n+public interface DbKeyValueService extends KeyValueService {\n+\n+    String getTablePrefix();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTIwMw=="}, "originalCommit": {"oid": "c282f9d439a4ff8b0fa43aa9589cc87752f94727"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE3MDIzOnYy", "diffSide": "RIGHT", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/ConnectionManagerAwareDbKvs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzoyNlrOH1NIJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1NzoyNlrOH1NIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MTY1NA==", "bodyText": "Same as above: Can we use AtlasDbConstants.DEFAULT_INITIALIZE_ASYNC?", "url": "https://github.com/palantir/atlasdb/pull/5093#discussion_r525551654", "createdAt": "2020-11-17T21:57:26Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/impl/ConnectionManagerAwareDbKvs.java", "diffHunk": "@@ -33,15 +33,20 @@\n \n // This class should be removed and replaced by DbKvs when InDbTimestampStore depends directly on DbKvs\n public final class ConnectionManagerAwareDbKvs extends ForwardingKeyValueService {\n-    private final DbKvs kvs;\n+    private final DbKeyValueService kvs;\n     private final ConnectionManager connManager;\n     private final SqlConnectionSupplier sqlConnectionSupplier;\n \n     public static ConnectionManagerAwareDbKvs create(DbKeyValueServiceConfig config) {\n+        return create(config, false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c282f9d439a4ff8b0fa43aa9589cc87752f94727"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2471, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}