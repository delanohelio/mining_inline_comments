{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTEyMjIz", "number": 5101, "title": "[Cross Client Batching - 1] | TimeLock Batch endpoints", "bodyText": "Goals (and why):\nImplements cross client endpoints for leaderTime and getCommitTimestamps.\nDoes not wire the endpoints through TimeLock.\nImplementation Description (bullets):\n\n\nAdds conjure api definition of cross client batch endpoints for leaderTime and getCommitTimestamps\n\n\nResource implementation for endpoints\n\n\nThe getCommitTimestamps endpoint does not have additional defense against multiple queries for a namespace in one request.\n\n\nTesting (What was existing testing like?  What have you done to improve it?):\nAdded sanity tests\nConcerns (what feedback would you like?):\n\n\nIn the current impl, we fail the entire request if any of the future tasks fail.\n\n\nException handling\n\n\nCode repetition\n\n\nWhere should we start reviewing?:\nSmall\nPriority (whenever / two weeks / yesterday):\nToday \ud83c\udfc3\u200d\u2640\ufe0f \ud83d\ude80 \ud83e\udde8", "createdAt": "2020-11-05T14:42:47Z", "url": "https://github.com/palantir/atlasdb/pull/5101", "merged": true, "mergeCommit": {"oid": "a47c1e5df18eaddab4d4092cf8095588eafd0179"}, "closed": true, "closedAt": "2020-11-16T11:11:52Z", "author": {"login": "sudiksha27"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZj6fBAFqTUyNDM0OTA2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddCeMrAH2gAyNTE2MTEyMjIzOmJlYTZjMjBkMDVmMTNjNjIzZWM2ZWVhYjgxZWZiYzhiZjZjZWQwNWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzQ5MDYz", "url": "https://github.com/palantir/atlasdb/pull/5101#pullrequestreview-524349063", "createdAt": "2020-11-05T15:00:41Z", "commit": {"oid": "a3456eb30bab2665f7def13fec9375541147a2db"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTowMDo0MVrOHuHXGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNToxNToyMVrOHuIBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExNzE0NA==", "bodyText": "I don't know what opinions are on just adding these endpoints / requests to the current timelock api, or creating a new one (as you have done here) - but either way, I think it's really weird to import in definitions from the other API.", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518117144", "createdAt": "2020-11-05T15:00:41Z", "author": {"login": "Jolyon-S"}, "path": "timelock-api/src/main/conjure/cross-client-batched-timelock-api.yml", "diffHunk": "@@ -0,0 +1,63 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    Long:\n+      base-type: any\n+      external:\n+        java: java.lang.Long\n+    LockWatchStateUpdate:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.watch.LockWatchStateUpdate\n+    ConjureIdentifiedVersion:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3456eb30bab2665f7def13fec9375541147a2db"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyODAyMw==", "bodyText": "I'm not convinced this is the right approach. I'd have thought you would want a request type like NamespacedLeaderTimes, then call with a list of those. The point of that would be if you had incoming requests for leader time such as:\nnamespace1\nnamespace2\nnamespace3\nnamespace1\nsay they all get batched together - you'd likely want to further gather together all requests of the same namespace into their own requests, so that you can do clever things (coalesce / reduce overheads etc). Maybe I'm missing something - I've just looked at this briefly - but that seems like the right thing to do.", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518128023", "createdAt": "2020-11-05T15:15:21Z", "author": {"login": "Jolyon-S"}, "path": "timelock-api/src/main/conjure/cross-client-batched-timelock-api.yml", "diffHunk": "@@ -0,0 +1,63 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    Long:\n+      base-type: any\n+      external:\n+        java: java.lang.Long\n+    LockWatchStateUpdate:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.watch.LockWatchStateUpdate\n+    ConjureIdentifiedVersion:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion\n+    GetCommitTimestampsRequest:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsRequest\n+    GetCommitTimestampsResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      NamespacedLeaderTime:\n+        fields:\n+          namespace: string\n+          leaderTime: LeaderTime\n+      NamespacedGetCommitTimestampsRequest:\n+        fields:\n+          namespace: string\n+          getCommitTimestampsRequest: GetCommitTimestampsRequest\n+      NamespacedGetCommitTimestampsResponse:\n+        fields:\n+          namespace: string\n+          getCommitTimestampsResponse: GetCommitTimestampsResponse\n+\n+services:\n+  CrossClientBatchedConjureTimelockService:\n+    name: Cross Client Batched Timelock Service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.batch.api\n+    base-path: /tl/batch\n+    endpoints:\n+      leaderTimes:\n+        http: POST /lts\n+        args:\n+          namespaces: list<string>\n+        returns: list<NamespacedLeaderTime>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3456eb30bab2665f7def13fec9375541147a2db"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDQxNzA1", "url": "https://github.com/palantir/atlasdb/pull/5101#pullrequestreview-524441705", "createdAt": "2020-11-05T16:29:42Z", "commit": {"oid": "a3456eb30bab2665f7def13fec9375541147a2db"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoyOTo0M1rOHuLmRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0NzowNlrOHuMYRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4NjU2Nw==", "bodyText": "I'd prefer we just use the existing API file. In my mind the model was that they would be placed on a different service, but in the same API.", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518186567", "createdAt": "2020-11-05T16:29:43Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/cross-client-batched-timelock-api.yml", "diffHunk": "@@ -0,0 +1,63 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    Long:\n+      base-type: any\n+      external:\n+        java: java.lang.Long\n+    LockWatchStateUpdate:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.watch.LockWatchStateUpdate\n+    ConjureIdentifiedVersion:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExNzE0NA=="}, "originalCommit": {"oid": "a3456eb30bab2665f7def13fec9375541147a2db"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4ODMwMw==", "bodyText": "This is LeaderTime, though, which is a coalescing endpoint, and so for this one Sudiksha's API is correct (notice that namespaces is a list of strings, and any futures for those namespaces will be answered with the correct answer from the list of NamespacedLeaderTimes).", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518188303", "createdAt": "2020-11-05T16:31:58Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/cross-client-batched-timelock-api.yml", "diffHunk": "@@ -0,0 +1,63 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    Long:\n+      base-type: any\n+      external:\n+        java: java.lang.Long\n+    LockWatchStateUpdate:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.watch.LockWatchStateUpdate\n+    ConjureIdentifiedVersion:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion\n+    GetCommitTimestampsRequest:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsRequest\n+    GetCommitTimestampsResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      NamespacedLeaderTime:\n+        fields:\n+          namespace: string\n+          leaderTime: LeaderTime\n+      NamespacedGetCommitTimestampsRequest:\n+        fields:\n+          namespace: string\n+          getCommitTimestampsRequest: GetCommitTimestampsRequest\n+      NamespacedGetCommitTimestampsResponse:\n+        fields:\n+          namespace: string\n+          getCommitTimestampsResponse: GetCommitTimestampsResponse\n+\n+services:\n+  CrossClientBatchedConjureTimelockService:\n+    name: Cross Client Batched Timelock Service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.batch.api\n+    base-path: /tl/batch\n+    endpoints:\n+      leaderTimes:\n+        http: POST /lts\n+        args:\n+          namespaces: list<string>\n+        returns: list<NamespacedLeaderTime>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyODAyMw=="}, "originalCommit": {"oid": "a3456eb30bab2665f7def13fec9375541147a2db"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5OTM2Ng==", "bodyText": "This one on the other hand is a bit messier - there's some nontrivial logic in how to reduce all of the legacy GetCommitTimestampRequests into a single one (basically you can take the oldest easily, maybe the newest if there's some clever hackery on the client side).", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518199366", "createdAt": "2020-11-05T16:47:06Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/cross-client-batched-timelock-api.yml", "diffHunk": "@@ -0,0 +1,63 @@\n+types:\n+  imports:\n+    LeaderTime:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.v2.LeaderTime\n+    Long:\n+      base-type: any\n+      external:\n+        java: java.lang.Long\n+    LockWatchStateUpdate:\n+      base-type: any\n+      external:\n+        java: com.palantir.lock.watch.LockWatchStateUpdate\n+    ConjureIdentifiedVersion:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion\n+    GetCommitTimestampsRequest:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsRequest\n+    GetCommitTimestampsResponse:\n+      base-type: any\n+      external:\n+        java: com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse\n+  definitions:\n+    default-package: com.palantir.atlasdb.timelock.api\n+    objects:\n+      NamespacedLeaderTime:\n+        fields:\n+          namespace: string\n+          leaderTime: LeaderTime\n+      NamespacedGetCommitTimestampsRequest:\n+        fields:\n+          namespace: string\n+          getCommitTimestampsRequest: GetCommitTimestampsRequest\n+      NamespacedGetCommitTimestampsResponse:\n+        fields:\n+          namespace: string\n+          getCommitTimestampsResponse: GetCommitTimestampsResponse\n+\n+services:\n+  CrossClientBatchedConjureTimelockService:\n+    name: Cross Client Batched Timelock Service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.batch.api\n+    base-path: /tl/batch\n+    endpoints:\n+      leaderTimes:\n+        http: POST /lts\n+        args:\n+          namespaces: set<string>\n+        returns: list<NamespacedLeaderTime>\n+        docs: |\n+          Cross client batched version of ConjureTimelockService#leaderTime endpoint for acquiring leaderTimes.\n+      getCommitTimestamps:\n+        http: POST /gcts\n+        args:\n+          requests: list<NamespacedGetCommitTimestampsRequest>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70a92e75e55fa665bb807821a6ac2e22e399932"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NTUyMjI2", "url": "https://github.com/palantir/atlasdb/pull/5101#pullrequestreview-524552226", "createdAt": "2020-11-05T18:33:07Z", "commit": {"oid": "d4febce3339d6055cd9611f8f67fd31e139c0484"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMzowN1rOHuQ8nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozNjozNVrOHuREWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NDIwNA==", "bodyText": "missed on pass 1: I don't think CrossClientBatched should be a part of the service name as it's more of an implementation detail, it should really be something like MultiClientConjureTimelockService?", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518274204", "createdAt": "2020-11-05T18:33:07Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -181,4 +193,24 @@ services:\n         http: POST /sw/{namespace}\n         args:\n           namespace: string\n-          request: LockWatchRequest\n\\ No newline at end of file\n+          request: LockWatchRequest\n+  CrossClientBatchedConjureTimelockService:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febce3339d6055cd9611f8f67fd31e139c0484"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NDQzNg==", "bodyText": "as above, the notion of batching should not exist at this level.", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518274436", "createdAt": "2020-11-05T18:33:32Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -181,4 +193,24 @@ services:\n         http: POST /sw/{namespace}\n         args:\n           namespace: string\n-          request: LockWatchRequest\n\\ No newline at end of file\n+          request: LockWatchRequest\n+  CrossClientBatchedConjureTimelockService:\n+    name: Cross Client Batched Timelock Service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.batch.api\n+    base-path: /tl/batch\n+    endpoints:\n+      leaderTimes:\n+        http: POST /lts\n+        args:\n+          namespaces: set<string>\n+        returns: list<NamespacedLeaderTime>\n+        docs: |\n+          Cross client batched version of ConjureTimelockService#leaderTime endpoint for acquiring leaderTimes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febce3339d6055cd9611f8f67fd31e139c0484"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NDU1Mg==", "bodyText": "as above: don't think batching is correct. multiclient maybe - or can this just go in the same package?", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518274552", "createdAt": "2020-11-05T18:33:46Z", "author": {"login": "jeremyk-91"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -181,4 +193,24 @@ services:\n         http: POST /sw/{namespace}\n         args:\n           namespace: string\n-          request: LockWatchRequest\n\\ No newline at end of file\n+          request: LockWatchRequest\n+  CrossClientBatchedConjureTimelockService:\n+    name: Cross Client Batched Timelock Service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.batch.api", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febce3339d6055cd9611f8f67fd31e139c0484"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NTQ2MQ==", "bodyText": "can we name this getServiceForNamespace or something like that?", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518275461", "createdAt": "2020-11-05T18:35:21Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.batch;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.timelock.AsyncTimelockService;\n+import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n+import com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion;\n+import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsRequest;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedLeaderTime;\n+import com.palantir.atlasdb.timelock.batch.api.UndertowCrossClientBatchedConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.tokens.auth.AuthHeader;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public final class CrossClientBatchedConjureTimeLockResource\n+        implements UndertowCrossClientBatchedConjureTimelockService {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    private CrossClientBatchedConjureTimeLockResource(\n+            ConjureResourceExceptionHandler exceptionHandler, Function<String, AsyncTimelockService> timelockServices) {\n+        this.exceptionHandler = exceptionHandler;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedLeaderTime>> leaderTimes(AuthHeader authHeader, Set<String> namespaces) {\n+        List<ListenableFuture<NamespacedLeaderTime>> futures = namespaces.stream()\n+                .map(this::getNamespacedLeaderTimeListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedGetCommitTimestampsResponse>> getCommitTimestamps(\n+            AuthHeader authHeader, List<NamespacedGetCommitTimestampsRequest> requests) {\n+        List<ListenableFuture<NamespacedGetCommitTimestampsResponse>> futures = requests.stream()\n+                .map(this::getNamespacedGetCommitTimestampsResponseListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    private ListenableFuture<NamespacedLeaderTime> getNamespacedLeaderTimeListenableFuture(String namespace) {\n+        ListenableFuture<LeaderTime> leaderTimeListenableFuture =\n+                forNamespace(namespace).leaderTime();\n+        return Futures.transform(\n+                leaderTimeListenableFuture,\n+                leaderTime -> NamespacedLeaderTime.of(namespace, leaderTime),\n+                MoreExecutors.directExecutor());\n+    }\n+\n+    private ListenableFuture<NamespacedGetCommitTimestampsResponse>\n+            getNamespacedGetCommitTimestampsResponseListenableFuture(NamespacedGetCommitTimestampsRequest request) {\n+        ListenableFuture<GetCommitTimestampsResponse> commitTimestamps = forNamespace(request.getNamespace())\n+                .getCommitTimestamps(\n+                        request.getNumTimestamps(),\n+                        request.getLastKnownVersion().map(this::toIdentifiedVersion));\n+        return Futures.transform(\n+                commitTimestamps,\n+                commitTimestampsResponse -> NamespacedGetCommitTimestampsResponse.builder()\n+                        .namespace(request.getNamespace())\n+                        .inclusiveLower(commitTimestampsResponse.getInclusiveLower())\n+                        .inclusiveUpper(commitTimestampsResponse.getInclusiveUpper())\n+                        .lockWatchUpdate(commitTimestampsResponse.getLockWatchUpdate())\n+                        .build(),\n+                MoreExecutors.directExecutor());\n+    }\n+\n+    private AsyncTimelockService forNamespace(String namespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febce3339d6055cd9611f8f67fd31e139c0484"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NjE4Nw==", "bodyText": "I think this is safe and correct; can you explain why this is the case?", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518276187", "createdAt": "2020-11-05T18:36:35Z", "author": {"login": "jeremyk-91"}, "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.batch;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.timelock.AsyncTimelockService;\n+import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n+import com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion;\n+import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsRequest;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedLeaderTime;\n+import com.palantir.atlasdb.timelock.batch.api.UndertowCrossClientBatchedConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.tokens.auth.AuthHeader;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public final class CrossClientBatchedConjureTimeLockResource\n+        implements UndertowCrossClientBatchedConjureTimelockService {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    private CrossClientBatchedConjureTimeLockResource(\n+            ConjureResourceExceptionHandler exceptionHandler, Function<String, AsyncTimelockService> timelockServices) {\n+        this.exceptionHandler = exceptionHandler;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedLeaderTime>> leaderTimes(AuthHeader authHeader, Set<String> namespaces) {\n+        List<ListenableFuture<NamespacedLeaderTime>> futures = namespaces.stream()\n+                .map(this::getNamespacedLeaderTimeListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedGetCommitTimestampsResponse>> getCommitTimestamps(\n+            AuthHeader authHeader, List<NamespacedGetCommitTimestampsRequest> requests) {\n+        List<ListenableFuture<NamespacedGetCommitTimestampsResponse>> futures = requests.stream()\n+                .map(this::getNamespacedGetCommitTimestampsResponseListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    private ListenableFuture<NamespacedLeaderTime> getNamespacedLeaderTimeListenableFuture(String namespace) {\n+        ListenableFuture<LeaderTime> leaderTimeListenableFuture =\n+                forNamespace(namespace).leaderTime();\n+        return Futures.transform(\n+                leaderTimeListenableFuture,\n+                leaderTime -> NamespacedLeaderTime.of(namespace, leaderTime),\n+                MoreExecutors.directExecutor());\n+    }\n+\n+    private ListenableFuture<NamespacedGetCommitTimestampsResponse>\n+            getNamespacedGetCommitTimestampsResponseListenableFuture(NamespacedGetCommitTimestampsRequest request) {\n+        ListenableFuture<GetCommitTimestampsResponse> commitTimestamps = forNamespace(request.getNamespace())\n+                .getCommitTimestamps(\n+                        request.getNumTimestamps(),\n+                        request.getLastKnownVersion().map(this::toIdentifiedVersion));\n+        return Futures.transform(\n+                commitTimestamps,\n+                commitTimestampsResponse -> NamespacedGetCommitTimestampsResponse.builder()\n+                        .namespace(request.getNamespace())\n+                        .inclusiveLower(commitTimestampsResponse.getInclusiveLower())\n+                        .inclusiveUpper(commitTimestampsResponse.getInclusiveUpper())\n+                        .lockWatchUpdate(commitTimestampsResponse.getLockWatchUpdate())\n+                        .build(),\n+                MoreExecutors.directExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4febce3339d6055cd9611f8f67fd31e139c0484"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad1525b8f0f106dae76deac36e2e3c609a3ab49", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/7ad1525b8f0f106dae76deac36e2e3c609a3ab49", "committedDate": "2020-11-09T15:06:37Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe4fd6918ce680826f8c20b64c236097aa876d81", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/fe4fd6918ce680826f8c20b64c236097aa876d81", "committedDate": "2020-11-09T15:06:37Z", "message": "getCommitTimestamps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6cb78d03e7688636537dac7179b8f2dc73489f9", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/a6cb78d03e7688636537dac7179b8f2dc73489f9", "committedDate": "2020-11-09T15:06:37Z", "message": "Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71395c05c2b03bef092d3506e9235c5cadcccd98", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/71395c05c2b03bef092d3506e9235c5cadcccd98", "committedDate": "2020-11-09T15:06:37Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e8d17ffafbaaa858d4592d04868df444827972", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/a5e8d17ffafbaaa858d4592d04868df444827972", "committedDate": "2020-11-09T15:06:37Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4165a05cd20f1663575175b3d6ab31b480ff90e6", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/4165a05cd20f1663575175b3d6ab31b480ff90e6", "committedDate": "2020-11-09T15:06:37Z", "message": "Refactor api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f7ad372de632fa07c66437f043e17aee58ffe59", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/0f7ad372de632fa07c66437f043e17aee58ffe59", "committedDate": "2020-11-09T15:06:37Z", "message": "WIP - addressing style comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6f19e65459e8b31ee3b2914a9e9043ce062de91", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/a6f19e65459e8b31ee3b2914a9e9043ce062de91", "committedDate": "2020-11-09T15:06:37Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b762c4cd5acb4c73b54d73813d064bce477b66c", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/5b762c4cd5acb4c73b54d73813d064bce477b66c", "committedDate": "2020-11-09T15:06:37Z", "message": "Sanity tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/3247bc7296f772e2e5958a42a2f69db26f1ddca3", "committedDate": "2020-11-09T15:06:37Z", "message": "Tests | exception thrown if a query fails"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0777166b9bbef3cced302b2c444e1f92bed0cc23", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/0777166b9bbef3cced302b2c444e1f92bed0cc23", "committedDate": "2020-11-09T11:57:01Z", "message": "Tests | exception thrown if a query fails"}, "afterCommit": {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/3247bc7296f772e2e5958a42a2f69db26f1ddca3", "committedDate": "2020-11-09T15:06:37Z", "message": "Tests | exception thrown if a query fails"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDk2MDQ0", "url": "https://github.com/palantir/atlasdb/pull/5101#pullrequestreview-528096044", "createdAt": "2020-11-11T11:39:33Z", "commit": {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozOTozM1rOHxJjnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozOTozM1rOHxJjnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5ODg0Nw==", "bodyText": "change base path", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r521298847", "createdAt": "2020-11-11T11:39:33Z", "author": {"login": "sudiksha27"}, "path": "timelock-api/src/main/conjure/timelock-api.yml", "diffHunk": "@@ -181,4 +193,24 @@ services:\n         http: POST /sw/{namespace}\n         args:\n           namespace: string\n-          request: LockWatchRequest\n\\ No newline at end of file\n+          request: LockWatchRequest\n+  MultiClientConjureTimelockService:\n+    name: Multi Client Timelock Service\n+    default-auth: header\n+    package: com.palantir.atlasdb.timelock.api\n+    base-path: /tl/batch\n+    endpoints:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDk5MzQ2", "url": "https://github.com/palantir/atlasdb/pull/5101#pullrequestreview-528099346", "createdAt": "2020-11-11T11:44:45Z", "commit": {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bea6c20d05f13c623ec6eeab81efbc8bf6ced05d", "author": {"user": {"login": "sudiksha27", "name": "sudiksha nanda"}}, "url": "https://github.com/palantir/atlasdb/commit/bea6c20d05f13c623ec6eeab81efbc8bf6ced05d", "committedDate": "2020-11-16T10:33:50Z", "message": "Address comment | fix path"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2485, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}