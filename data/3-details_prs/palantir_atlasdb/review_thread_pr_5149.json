{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0Mzc3NjM3", "number": 5149, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToyNToxMVrOFCRTzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToyNToxMVrOFCRTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTI1MDcwOnYy", "diffSide": "RIGHT", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostLocationSupplierTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToyNToxMVrOIBUuVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo1Mjo0OVrOIBZPQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1OTAyOA==", "bodyText": "Does this work?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(hostLocationSupplier.get())\n          \n          \n            \n                            .hasValue(ec2LocationSupplier.get().get());\n          \n          \n            \n                    assertThat(hostLocationSupplier.get())\n          \n          \n            \n                            .isEqualTo(ec2LocationSupplier.get());", "url": "https://github.com/palantir/atlasdb/pull/5149#discussion_r538259028", "createdAt": "2020-12-08T11:25:11Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostLocationSupplierTest.java", "diffHunk": "@@ -42,7 +43,8 @@ public void shouldReturnEc2Location() {\n         Supplier<Optional<HostLocation>> hostLocationSupplier =\n                 new HostLocationSupplier(ec2SnitchSupplier, ec2LocationSupplier, Optional.empty());\n \n-        assertThat(hostLocationSupplier.get()).hasValue(ec2LocationSupplier.get());\n+        assertThat(hostLocationSupplier.get())\n+                .hasValue(ec2LocationSupplier.get().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969a0cfb38ae3be13e33bda7d2a56100fd16235"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2MjE1OQ==", "bodyText": "Giving it a shot, but i don't think it will work. The two suppliers are not \"equal\", the values they produce are.", "url": "https://github.com/palantir/atlasdb/pull/5149#discussion_r538262159", "createdAt": "2020-12-08T11:30:33Z", "author": {"login": "ashrayjain"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostLocationSupplierTest.java", "diffHunk": "@@ -42,7 +43,8 @@ public void shouldReturnEc2Location() {\n         Supplier<Optional<HostLocation>> hostLocationSupplier =\n                 new HostLocationSupplier(ec2SnitchSupplier, ec2LocationSupplier, Optional.empty());\n \n-        assertThat(hostLocationSupplier.get()).hasValue(ec2LocationSupplier.get());\n+        assertThat(hostLocationSupplier.get())\n+                .hasValue(ec2LocationSupplier.get().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1OTAyOA=="}, "originalCommit": {"oid": "e969a0cfb38ae3be13e33bda7d2a56100fd16235"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4ODExOQ==", "bodyText": "I was wrong, we are comparing Optionals here, not Suppliers :). It works.", "url": "https://github.com/palantir/atlasdb/pull/5149#discussion_r538288119", "createdAt": "2020-12-08T12:01:08Z", "author": {"login": "ashrayjain"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostLocationSupplierTest.java", "diffHunk": "@@ -42,7 +43,8 @@ public void shouldReturnEc2Location() {\n         Supplier<Optional<HostLocation>> hostLocationSupplier =\n                 new HostLocationSupplier(ec2SnitchSupplier, ec2LocationSupplier, Optional.empty());\n \n-        assertThat(hostLocationSupplier.get()).hasValue(ec2LocationSupplier.get());\n+        assertThat(hostLocationSupplier.get())\n+                .hasValue(ec2LocationSupplier.get().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1OTAyOA=="}, "originalCommit": {"oid": "e969a0cfb38ae3be13e33bda7d2a56100fd16235"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMjk5Mg==", "bodyText": "yep, that was my thought! Agreed that comparing suppliers would have been wrong though.", "url": "https://github.com/palantir/atlasdb/pull/5149#discussion_r538332992", "createdAt": "2020-12-08T12:52:49Z", "author": {"login": "Jolyon-S"}, "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostLocationSupplierTest.java", "diffHunk": "@@ -42,7 +43,8 @@ public void shouldReturnEc2Location() {\n         Supplier<Optional<HostLocation>> hostLocationSupplier =\n                 new HostLocationSupplier(ec2SnitchSupplier, ec2LocationSupplier, Optional.empty());\n \n-        assertThat(hostLocationSupplier.get()).hasValue(ec2LocationSupplier.get());\n+        assertThat(hostLocationSupplier.get())\n+                .hasValue(ec2LocationSupplier.get().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI1OTAyOA=="}, "originalCommit": {"oid": "e969a0cfb38ae3be13e33bda7d2a56100fd16235"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2537, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}