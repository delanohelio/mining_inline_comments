{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDk4NTQ2", "number": 4493, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowNzozNVrODWfjzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTo1MjowOFrODWhPCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTEyMzMyOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowNzozNVrOFbSHBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDozOTozOFrOFbS-ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MjU4MQ==", "bodyText": "Hmm. A meter is plausible here, but it registers a bunch of series that I'm not sure are interesting for an operation that I don't think is super common.", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364152581", "createdAt": "2020-01-08T10:07:35Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -126,6 +149,7 @@ private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n         @Override\n         public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n             if (offHeapTimestampCache.cacheDescriptor.get().currentSize().get() >= offHeapTimestampCache.maxSize) {\n+                offHeapTimestampCache.taggedMetricRegistry.meter(CACHE_NUKE).mark();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca2dad7c4e137d2e4ea81f11228ae8d7cd1c0a4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE2Njc1Ng==", "bodyText": "Changed to the counter as we are only interested in the occurrences not the moving average.", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364166756", "createdAt": "2020-01-08T10:39:38Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -126,6 +149,7 @@ private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n         @Override\n         public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n             if (offHeapTimestampCache.cacheDescriptor.get().currentSize().get() >= offHeapTimestampCache.maxSize) {\n+                offHeapTimestampCache.taggedMetricRegistry.meter(CACHE_NUKE).mark();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MjU4MQ=="}, "originalCommit": {"oid": "5ca2dad7c4e137d2e4ea81f11228ae8d7cd1c0a4"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTEzMDMwOnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoxMDowOFrOFbSLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMToyODoxM1rOFbUH1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MzY1OQ==", "bodyText": "I think this needs to reset CACHE_SIZE to 0, or the metric should be something like CACHE_WRITES rather than CACHE_SIZE.", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364153659", "createdAt": "2020-01-08T10:10:08Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -126,6 +149,7 @@ private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n         @Override\n         public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n             if (offHeapTimestampCache.cacheDescriptor.get().currentSize().get() >= offHeapTimestampCache.maxSize) {\n+                offHeapTimestampCache.taggedMetricRegistry.meter(CACHE_NUKE).mark();\n                 offHeapTimestampCache.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca2dad7c4e137d2e4ea81f11228ae8d7cd1c0a4"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE2OTE2NQ==", "bodyText": "Discussed off-line, since counter does not provide a reset we will write a new Gauge which can be reseted.", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364169165", "createdAt": "2020-01-08T10:45:34Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -126,6 +149,7 @@ private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n         @Override\n         public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n             if (offHeapTimestampCache.cacheDescriptor.get().currentSize().get() >= offHeapTimestampCache.maxSize) {\n+                offHeapTimestampCache.taggedMetricRegistry.meter(CACHE_NUKE).mark();\n                 offHeapTimestampCache.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MzY1OQ=="}, "originalCommit": {"oid": "5ca2dad7c4e137d2e4ea81f11228ae8d7cd1c0a4"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE4NTU1OA==", "bodyText": "Added a resettable counter implementation of a Gauge.", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364185558", "createdAt": "2020-01-08T11:28:13Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -126,6 +149,7 @@ private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n         @Override\n         public Map<Map.Entry<Long, Long>, Map.Entry<Long, Long>> apply(Set<Map.Entry<Long, Long>> request) {\n             if (offHeapTimestampCache.cacheDescriptor.get().currentSize().get() >= offHeapTimestampCache.maxSize) {\n+                offHeapTimestampCache.taggedMetricRegistry.meter(CACHE_NUKE).mark();\n                 offHeapTimestampCache.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MzY1OQ=="}, "originalCommit": {"oid": "5ca2dad7c4e137d2e4ea81f11228ae8d7cd1c0a4"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTM5Nzg1OnYy", "diffSide": "RIGHT", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMTo1MjowOFrOFbUqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozNTo1N1rOFbXBfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5NDM5OQ==", "bodyText": "this repeatedly re-registers the gauges", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364194399", "createdAt": "2020-01-08T11:52:08Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -84,6 +105,7 @@ public void clear() {\n         if (previous != null) {\n             persistentTimestampStore.dropNamespace(previous.storeNamespace());\n         }\n+        taggedMetricRegistry.gauge(CACHE_SIZE, cacheSizeGauge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7a7cecba92916ef02f9cea5ddba11416be4561"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzMzA4Nw==", "bodyText": "Now register once.", "url": "https://github.com/palantir/atlasdb/pull/4493#discussion_r364233087", "createdAt": "2020-01-08T13:35:57Z", "author": {"login": "OStevan"}, "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -84,6 +105,7 @@ public void clear() {\n         if (previous != null) {\n             persistentTimestampStore.dropNamespace(previous.storeNamespace());\n         }\n+        taggedMetricRegistry.gauge(CACHE_SIZE, cacheSizeGauge);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE5NDM5OQ=="}, "originalCommit": {"oid": "0a7a7cecba92916ef02f9cea5ddba11416be4561"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2373, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}