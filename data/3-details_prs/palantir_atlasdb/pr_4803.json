{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDM4NjM2", "number": 4803, "title": "[PDS-120786, PaxosLog] Avoid Overhead From Repeatedly Taking Locks And Starting New Connections", "bodyText": "Pairing with @gmaretic\nGoals (and why):\n\nAddress performance issues e.g. PDS-120786\n\nImplementation Description (bullets):\n\nMost of the overhead involved opening/closing connections. This PR maintains a single connection that delegates to another connection, but is able to re-create it if it gets closed.\nAdd some important SQLite pragmas.\n\nTesting (What was existing testing like?  What have you done to improve it?):\n\nProxy tests.\n\nConcerns (what feedback would you like?):\n\nIf getting a new connection takes a long time this is not ideal: everyone waits for a new connection.\nResilientDatabaseConnectionProxy is nasty, but Connection has a ton of methods that I'd otherwise need to manually write. AutoDelegate was probably a reasonable option and would be better perf, but tricky to reason about its correctness.\n\nWhere should we start reviewing?: ResilientDatabaseConnectionProxy\nPriority (whenever / two weeks / yesterday): this week", "createdAt": "2020-05-26T20:11:24Z", "url": "https://github.com/palantir/atlasdb/pull/4803", "merged": true, "mergeCommit": {"oid": "4db8f6999c744f1cf54fedb43c6a0f6d3c1ca375"}, "closed": true, "closedAt": "2020-05-27T13:11:13Z", "author": {"login": "jeremyk-91"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclGOr0gH2gAyNDIzNDM4NjM2OjcyMzYwNjhjZjBlODU4NDllZmZmNzcwMmYyNTY4ZDBmZjI4NmZkMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclZALVAFqTQxOTE4NzY0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7236068cf0e85849efff7702f2568d0ff286fd15", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/7236068cf0e85849efff7702f2568d0ff286fd15", "committedDate": "2020-05-26T15:16:45Z", "message": "Use a single shared connection to SQLite to avoid unnecessary overheads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57dd9eb85ca816e22bf249f99946645f5bad1803", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/57dd9eb85ca816e22bf249f99946645f5bad1803", "committedDate": "2020-05-26T16:10:14Z", "message": "SqliteConns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc65f91cc4f6500beeaebe330ee5ac2c30d084ce", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/dc65f91cc4f6500beeaebe330ee5ac2c30d084ce", "committedDate": "2020-05-26T16:10:20Z", "message": "Evil evil proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be786af50424a2f622f280cb368ef782274ef303", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/be786af50424a2f622f280cb368ef782274ef303", "committedDate": "2020-05-26T17:03:05Z", "message": "Add unit tests for proxy and fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba7a1268e4cebcab7a597b143c84ef53756e485", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/4ba7a1268e4cebcab7a597b143c84ef53756e485", "committedDate": "2020-05-26T17:03:05Z", "message": "Add generated changelog entries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDE2Mjgy", "url": "https://github.com/palantir/atlasdb/pull/4803#pullrequestreview-419016282", "createdAt": "2020-05-27T09:28:09Z", "commit": {"oid": "4ba7a1268e4cebcab7a597b143c84ef53756e485"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c", "author": {"user": {"login": "jeremyk-91", "name": "Jeremy Kong"}}, "url": "https://github.com/palantir/atlasdb/commit/bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c", "committedDate": "2020-05-27T10:10:26Z", "message": "Overhaul"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDU2NDI4", "url": "https://github.com/palantir/atlasdb/pull/4803#pullrequestreview-419056428", "createdAt": "2020-05-27T10:22:25Z", "commit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyMjoyNlrOGbC9fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyMjoyNlrOGbC9fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMzI0NA==", "bodyText": "can we have this be more than 1? Say 16?", "url": "https://github.com/palantir/atlasdb/pull/4803#discussion_r431013244", "createdAt": "2020-05-27T10:22:26Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "diffHunk": "@@ -18,46 +18,54 @@\n \n import java.io.IOException;\n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.function.Supplier;\n+\n+import javax.sql.DataSource;\n \n import org.apache.commons.io.FileUtils;\n import org.sqlite.SQLiteConfig;\n import org.sqlite.javax.SQLiteConnectionPoolDataSource;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.palantir.logsafe.SafeArg;\n import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n \n /**\n  * This class is responsible for creating Sqlite connections to an instance.\n  * There should be one instance per timelock.\n  */\n public final class SqliteConnections {\n     private static final String DEFAULT_SQLITE_DATABASE_NAME = \"sqliteData.db\";\n+    private static final LoadingCache<Path, DataSource> DATA_SOURCE_LOADING_CACHE = Caffeine.newBuilder()\n+            .build(SqliteConnections::buildDataSource);\n \n     private SqliteConnections() {\n         // no\n     }\n \n-    public static Supplier<Connection> createDefaultNamedSqliteDatabaseAtPath(Path path) {\n+    public static DataSource getOrCreateDefaultDataSource(Path path) {\n+        return DATA_SOURCE_LOADING_CACHE.get(path);\n+    }\n+\n+    private static DataSource buildDataSource(Path path) {\n         createDirectoryIfNotExists(path);\n         String target = String.format(\"jdbc:sqlite:%s\", path.resolve(DEFAULT_SQLITE_DATABASE_NAME).toString());\n \n         SQLiteConfig config = new SQLiteConfig();\n         config.setPragma(SQLiteConfig.Pragma.JOURNAL_MODE, SQLiteConfig.JournalMode.WAL.getValue());\n-        config.setBusyTimeout(5000);\n+        config.setPragma(SQLiteConfig.Pragma.LOCKING_MODE, SQLiteConfig.LockingMode.EXCLUSIVE.getValue());\n+        config.setPragma(SQLiteConfig.Pragma.SYNCHRONOUS, SQLiteConfig.SynchronousMode.FULL.getValue());\n+\n         SQLiteConnectionPoolDataSource dataSource = new SQLiteConnectionPoolDataSource();\n         dataSource.setUrl(target);\n         dataSource.setConfig(config);\n \n-        return () -> {\n-            try {\n-                return dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new RuntimeException(e);\n-            }\n-        };\n+        HikariConfig hikariConfig = new HikariConfig();\n+        hikariConfig.setDataSource(dataSource);\n+        hikariConfig.setMaximumPoolSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDU3NDAw", "url": "https://github.com/palantir/atlasdb/pull/4803#pullrequestreview-419057400", "createdAt": "2020-05-27T10:23:49Z", "commit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyMzo0OVrOGbDAaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyMzo0OVrOGbDAaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMzk5Mw==", "bodyText": "don't you want EXTRA here?", "url": "https://github.com/palantir/atlasdb/pull/4803#discussion_r431013993", "createdAt": "2020-05-27T10:23:49Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "diffHunk": "@@ -18,46 +18,54 @@\n \n import java.io.IOException;\n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.function.Supplier;\n+\n+import javax.sql.DataSource;\n \n import org.apache.commons.io.FileUtils;\n import org.sqlite.SQLiteConfig;\n import org.sqlite.javax.SQLiteConnectionPoolDataSource;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.palantir.logsafe.SafeArg;\n import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n \n /**\n  * This class is responsible for creating Sqlite connections to an instance.\n  * There should be one instance per timelock.\n  */\n public final class SqliteConnections {\n     private static final String DEFAULT_SQLITE_DATABASE_NAME = \"sqliteData.db\";\n+    private static final LoadingCache<Path, DataSource> DATA_SOURCE_LOADING_CACHE = Caffeine.newBuilder()\n+            .build(SqliteConnections::buildDataSource);\n \n     private SqliteConnections() {\n         // no\n     }\n \n-    public static Supplier<Connection> createDefaultNamedSqliteDatabaseAtPath(Path path) {\n+    public static DataSource getOrCreateDefaultDataSource(Path path) {\n+        return DATA_SOURCE_LOADING_CACHE.get(path);\n+    }\n+\n+    private static DataSource buildDataSource(Path path) {\n         createDirectoryIfNotExists(path);\n         String target = String.format(\"jdbc:sqlite:%s\", path.resolve(DEFAULT_SQLITE_DATABASE_NAME).toString());\n \n         SQLiteConfig config = new SQLiteConfig();\n         config.setPragma(SQLiteConfig.Pragma.JOURNAL_MODE, SQLiteConfig.JournalMode.WAL.getValue());\n-        config.setBusyTimeout(5000);\n+        config.setPragma(SQLiteConfig.Pragma.LOCKING_MODE, SQLiteConfig.LockingMode.EXCLUSIVE.getValue());\n+        config.setPragma(SQLiteConfig.Pragma.SYNCHRONOUS, SQLiteConfig.SynchronousMode.FULL.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDU4NDc4", "url": "https://github.com/palantir/atlasdb/pull/4803#pullrequestreview-419058478", "createdAt": "2020-05-27T10:25:15Z", "commit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNToxNVrOGbDDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNToxNVrOGbDDuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNDg0Mw==", "bodyText": "this seems like a code smell. Why can't the datasource be injected?", "url": "https://github.com/palantir/atlasdb/pull/4803#discussion_r431014843", "createdAt": "2020-05-27T10:25:15Z", "author": {"login": "j-baker"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "diffHunk": "@@ -18,46 +18,54 @@\n \n import java.io.IOException;\n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.function.Supplier;\n+\n+import javax.sql.DataSource;\n \n import org.apache.commons.io.FileUtils;\n import org.sqlite.SQLiteConfig;\n import org.sqlite.javax.SQLiteConnectionPoolDataSource;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.palantir.logsafe.SafeArg;\n import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n \n /**\n  * This class is responsible for creating Sqlite connections to an instance.\n  * There should be one instance per timelock.\n  */\n public final class SqliteConnections {\n     private static final String DEFAULT_SQLITE_DATABASE_NAME = \"sqliteData.db\";\n+    private static final LoadingCache<Path, DataSource> DATA_SOURCE_LOADING_CACHE = Caffeine.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDU4NjUw", "url": "https://github.com/palantir/atlasdb/pull/4803#pullrequestreview-419058650", "createdAt": "2020-05-27T10:25:30Z", "commit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNTozMFrOGbDESA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNTozMFrOGbDESA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNDk4NA==", "bodyText": "This is much better \ud83c\udf89", "url": "https://github.com/palantir/atlasdb/pull/4803#discussion_r431014984", "createdAt": "2020-05-27T10:25:30Z", "author": {"login": "gmaretic"}, "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "diffHunk": "@@ -18,46 +18,54 @@\n \n import java.io.IOException;\n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.function.Supplier;\n+\n+import javax.sql.DataSource;\n \n import org.apache.commons.io.FileUtils;\n import org.sqlite.SQLiteConfig;\n import org.sqlite.javax.SQLiteConnectionPoolDataSource;\n \n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n import com.palantir.logsafe.SafeArg;\n import com.palantir.logsafe.exceptions.SafeRuntimeException;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n \n /**\n  * This class is responsible for creating Sqlite connections to an instance.\n  * There should be one instance per timelock.\n  */\n public final class SqliteConnections {\n     private static final String DEFAULT_SQLITE_DATABASE_NAME = \"sqliteData.db\";\n+    private static final LoadingCache<Path, DataSource> DATA_SOURCE_LOADING_CACHE = Caffeine.newBuilder()\n+            .build(SqliteConnections::buildDataSource);\n \n     private SqliteConnections() {\n         // no\n     }\n \n-    public static Supplier<Connection> createDefaultNamedSqliteDatabaseAtPath(Path path) {\n+    public static DataSource getOrCreateDefaultDataSource(Path path) {\n+        return DATA_SOURCE_LOADING_CACHE.get(path);\n+    }\n+\n+    private static DataSource buildDataSource(Path path) {\n         createDirectoryIfNotExists(path);\n         String target = String.format(\"jdbc:sqlite:%s\", path.resolve(DEFAULT_SQLITE_DATABASE_NAME).toString());\n \n         SQLiteConfig config = new SQLiteConfig();\n         config.setPragma(SQLiteConfig.Pragma.JOURNAL_MODE, SQLiteConfig.JournalMode.WAL.getValue());\n-        config.setBusyTimeout(5000);\n+        config.setPragma(SQLiteConfig.Pragma.LOCKING_MODE, SQLiteConfig.LockingMode.EXCLUSIVE.getValue());\n+        config.setPragma(SQLiteConfig.Pragma.SYNCHRONOUS, SQLiteConfig.SynchronousMode.FULL.getValue());\n+\n         SQLiteConnectionPoolDataSource dataSource = new SQLiteConnectionPoolDataSource();\n         dataSource.setUrl(target);\n         dataSource.setConfig(config);\n \n-        return () -> {\n-            try {\n-                return dataSource.getConnection();\n-            } catch (SQLException e) {\n-                throw new RuntimeException(e);\n-            }\n-        };\n+        HikariConfig hikariConfig = new HikariConfig();\n+        hikariConfig.setDataSource(dataSource);\n+        hikariConfig.setMaximumPoolSize(1);\n+        return new HikariDataSource(hikariConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdfd9fbbcb51424e6508bdba1cf0c97856a5f82c"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f86608a448869b51ddd38783c15051cca50bacb", "author": {"user": {"login": "gmaretic", "name": null}}, "url": "https://github.com/palantir/atlasdb/commit/9f86608a448869b51ddd38783c15051cca50bacb", "committedDate": "2020-05-27T12:07:29Z", "message": "Address CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTg3NjQx", "url": "https://github.com/palantir/atlasdb/pull/4803#pullrequestreview-419187641", "createdAt": "2020-05-27T13:09:06Z", "commit": {"oid": "9f86608a448869b51ddd38783c15051cca50bacb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2888, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}