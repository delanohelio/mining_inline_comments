{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NzQ3NTU5", "number": 4893, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo1OTo0NlrOEM3QTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo1OTo0NlrOEM3QTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTIzNjYzOnYy", "diffSide": "RIGHT", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/metrics/ToplistDeltaFilteringTableLevelMetricsController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTo1OTo0NlrOGvN8-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTowMzo1MlrOGveFMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NDg1Nw==", "bodyText": "Register filter before registering metric? Would it matter?", "url": "https://github.com/palantir/atlasdb/pull/4893#discussion_r452164857", "createdAt": "2020-07-09T11:59:46Z", "author": {"login": "sudiksha27"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/metrics/ToplistDeltaFilteringTableLevelMetricsController.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.codahale.metrics.CachedGauge;\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.TopNMetricPublicationController;\n+\n+/**\n+ * Makes publication decisions for a given metric, as follows: for a given String identifier, filters out all but the\n+ * highest {@code maximumNumberOfTables} values. In the event of ties (e.g. a top-list of 10 where the 10th and 11th\n+ * highest values are equal), all tying values are published.\n+ *\n+ * This controller makes decisions based on deltas (in an attempt to be able to detect load spikes) measured over the\n+ * last {@code REFRESH_INTERVAL} period.\n+ */\n+public final class ToplistDeltaFilteringTableLevelMetricsController implements TableLevelMetricsController {\n+    private static final int DEFAULT_MAX_TABLES_TO_PUBLISH_METRICS = 10;\n+    private static final String CONTROLLER_GENERATED = \"controllerGenerated\";\n+    private static final String TRUE = \"true\";\n+\n+    @VisibleForTesting\n+    static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Map<String, TopNMetricPublicationController<Long>> metricNameToPublicationController;\n+    private final MetricsManager metricsManager;\n+    private final int maximumNumberOfTables;\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    ToplistDeltaFilteringTableLevelMetricsController(\n+            MetricsManager metricsManager,\n+            int maximumNumberOfTables,\n+            Clock clock) {\n+        this.metricNameToPublicationController = Maps.newConcurrentMap();\n+        this.metricsManager = metricsManager;\n+        this.maximumNumberOfTables = maximumNumberOfTables;\n+        this.clock = clock;\n+    }\n+\n+    public static TableLevelMetricsController create(MetricsManager metricsManager) {\n+        return new ToplistDeltaFilteringTableLevelMetricsController(\n+                metricsManager,\n+                DEFAULT_MAX_TABLES_TO_PUBLISH_METRICS,\n+                Clock.defaultClock());\n+    }\n+\n+    @Override\n+    public <T> Counter createAndRegisterCounter(Class<T> clazz, String metricName, TableReference tableReference) {\n+        Counter counter = metricsManager.registerOrGetTaggedCounter(\n+                clazz,\n+                metricName,\n+                getTagsForTableReference(tableReference));\n+        metricsManager.addMetricFilter(\n+                clazz,\n+                metricName,\n+                getTagsForTableReference(tableReference),\n+                MetricPublicationFilter.NEVER_PUBLISH);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f3e5cbcefa162a21ca43d0c3188264ae2c5bec"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyOTEwNg==", "bodyText": "This is a well spotted bug: there would otherwise be a race condition between metric publication and the background metrics task. Will do - thanks!", "url": "https://github.com/palantir/atlasdb/pull/4893#discussion_r452429106", "createdAt": "2020-07-09T19:03:52Z", "author": {"login": "jeremyk-91"}, "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/metrics/ToplistDeltaFilteringTableLevelMetricsController.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl.metrics;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.codahale.metrics.CachedGauge;\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Counter;\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.TopNMetricPublicationController;\n+\n+/**\n+ * Makes publication decisions for a given metric, as follows: for a given String identifier, filters out all but the\n+ * highest {@code maximumNumberOfTables} values. In the event of ties (e.g. a top-list of 10 where the 10th and 11th\n+ * highest values are equal), all tying values are published.\n+ *\n+ * This controller makes decisions based on deltas (in an attempt to be able to detect load spikes) measured over the\n+ * last {@code REFRESH_INTERVAL} period.\n+ */\n+public final class ToplistDeltaFilteringTableLevelMetricsController implements TableLevelMetricsController {\n+    private static final int DEFAULT_MAX_TABLES_TO_PUBLISH_METRICS = 10;\n+    private static final String CONTROLLER_GENERATED = \"controllerGenerated\";\n+    private static final String TRUE = \"true\";\n+\n+    @VisibleForTesting\n+    static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Map<String, TopNMetricPublicationController<Long>> metricNameToPublicationController;\n+    private final MetricsManager metricsManager;\n+    private final int maximumNumberOfTables;\n+    private final Clock clock;\n+\n+    @VisibleForTesting\n+    ToplistDeltaFilteringTableLevelMetricsController(\n+            MetricsManager metricsManager,\n+            int maximumNumberOfTables,\n+            Clock clock) {\n+        this.metricNameToPublicationController = Maps.newConcurrentMap();\n+        this.metricsManager = metricsManager;\n+        this.maximumNumberOfTables = maximumNumberOfTables;\n+        this.clock = clock;\n+    }\n+\n+    public static TableLevelMetricsController create(MetricsManager metricsManager) {\n+        return new ToplistDeltaFilteringTableLevelMetricsController(\n+                metricsManager,\n+                DEFAULT_MAX_TABLES_TO_PUBLISH_METRICS,\n+                Clock.defaultClock());\n+    }\n+\n+    @Override\n+    public <T> Counter createAndRegisterCounter(Class<T> clazz, String metricName, TableReference tableReference) {\n+        Counter counter = metricsManager.registerOrGetTaggedCounter(\n+                clazz,\n+                metricName,\n+                getTagsForTableReference(tableReference));\n+        metricsManager.addMetricFilter(\n+                clazz,\n+                metricName,\n+                getTagsForTableReference(tableReference),\n+                MetricPublicationFilter.NEVER_PUBLISH);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE2NDg1Nw=="}, "originalCommit": {"oid": "71f3e5cbcefa162a21ca43d0c3188264ae2c5bec"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2719, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}