{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTI3MjYw", "number": 5065, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1NDozMlrOEpGMYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNToyNDo1OFrOEqkerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTI4NTQ0OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1NDozMlrOHakX9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTo1NDozMlrOHakX9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyMDk4Mg==", "bodyText": "+1 this change ensures cli is part of the docker image.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r497620982", "createdAt": "2020-09-30T15:54:32Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -1115,6 +1183,8 @@ distributions {\n             from (project(\":segmentstore:server:host\").installDist) {\n                 exclude \"logback.xml\"\n             }\n+            from (project(\":cli:admin\").installDist)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c337a391ed0be2e61cdd8b394998afc8851b2679"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODU3NjExOnYy", "diffSide": "RIGHT", "path": "cli/admin/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxNDowOFrOHchvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMDo1OFrOHc_U5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3NDkzMw==", "bodyText": "This should be 11 now. Pretty soon we'll begin using JDK11 APIs so we can't really claim Java8 compatibility.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499674933", "createdAt": "2020-10-05T15:14:08Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/README.md", "diffHunk": "@@ -0,0 +1,130 @@\n+<!--\n+Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+-->\n+# Pravega Admin CLI\n+\n+Pravega Admin CLI is a tool for inspecting and exploring Pravega deployments.\n+\n+## Prerequisites\n+\n+- Java 8+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE1OTcxOA==", "bodyText": "The Java version change has been done while the PR was open. I have changed it.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500159718", "createdAt": "2020-10-06T10:10:58Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/README.md", "diffHunk": "@@ -0,0 +1,130 @@\n+<!--\n+Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+-->\n+# Pravega Admin CLI\n+\n+Pravega Admin CLI is a tool for inspecting and exploring Pravega deployments.\n+\n+## Prerequisites\n+\n+- Java 8+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3NDkzMw=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODYxNzk3OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/bookkeeper/BookKeeperDisableCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyMzo0NVrOHciJeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMTo1MFrOHc_W1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4MTY1Ng==", "bodyText": "I don't remember when I wrote this originally. Wasn't there supposed to be some code here to wait for user input to proceed? Giving this warning and immediately proceeding with disabling it may render the warning useless.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499681656", "createdAt": "2020-10-05T15:23:45Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/bookkeeper/BookKeeperDisableCommand.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.bookkeeper;\n+\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.common.util.RetriesExhaustedException;\n+import io.pravega.common.util.Retry;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Cleanup;\n+import lombok.val;\n+\n+/**\n+ * Disables a BookKeeperLog.\n+ */\n+public class BookKeeperDisableCommand extends BookKeeperCommand {\n+    private static final int MAX_RETRIES = 10;\n+    private static final Retry.RetryAndThrowBase<? extends Exception> DISABLE_RETRY = Retry\n+            .withExpBackoff(100, 2, MAX_RETRIES, 1000)\n+            .retryWhen(ex -> ex instanceof DataLogWriterNotPrimaryException);\n+\n+    /**\n+     * Creates a new instance of the BookKeeperDisableCommand.\n+     *\n+     * @param args The arguments for the command.\n+     */\n+    public BookKeeperDisableCommand(CommandArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        ensureArgCount(1);\n+        int logId = getIntArg(0);\n+\n+        @Cleanup\n+        val context = createContext();\n+        @Cleanup\n+        val log = context.logFactory.createDebugLogWrapper(logId);\n+\n+        // Display a summary of the BookKeeperLog.\n+        val m = log.fetchMetadata();\n+        outputLogSummary(logId, m);\n+        if (m == null) {\n+            // Nothing else to do.\n+            return;\n+        } else if (!m.isEnabled()) {\n+            output(\"BookKeeperLog '%s' is already disabled.\", logId);\n+            return;\n+        }\n+\n+        output(\"BookKeeperLog '%s' is about to be DISABLED.\", logId);\n+        output(\"\\tIts SegmentContainer will shut down and it will not be able to restart until re-enabled.\");\n+        output(\"\\tNo request on this SegmentContainer can be processed until that time (OUTAGE ALERT).\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDIxNQ==", "bodyText": "You are right. Initially, I removed this additional security question to make testing simpler, but I just added it again and mocked the content of System.in in the tests.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500160215", "createdAt": "2020-10-06T10:11:50Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/bookkeeper/BookKeeperDisableCommand.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.bookkeeper;\n+\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.common.util.RetriesExhaustedException;\n+import io.pravega.common.util.Retry;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import lombok.Cleanup;\n+import lombok.val;\n+\n+/**\n+ * Disables a BookKeeperLog.\n+ */\n+public class BookKeeperDisableCommand extends BookKeeperCommand {\n+    private static final int MAX_RETRIES = 10;\n+    private static final Retry.RetryAndThrowBase<? extends Exception> DISABLE_RETRY = Retry\n+            .withExpBackoff(100, 2, MAX_RETRIES, 1000)\n+            .retryWhen(ex -> ex instanceof DataLogWriterNotPrimaryException);\n+\n+    /**\n+     * Creates a new instance of the BookKeeperDisableCommand.\n+     *\n+     * @param args The arguments for the command.\n+     */\n+    public BookKeeperDisableCommand(CommandArgs args) {\n+        super(args);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        ensureArgCount(1);\n+        int logId = getIntArg(0);\n+\n+        @Cleanup\n+        val context = createContext();\n+        @Cleanup\n+        val log = context.logFactory.createDebugLogWrapper(logId);\n+\n+        // Display a summary of the BookKeeperLog.\n+        val m = log.fetchMetadata();\n+        outputLogSummary(logId, m);\n+        if (m == null) {\n+            // Nothing else to do.\n+            return;\n+        } else if (!m.isEnabled()) {\n+            output(\"BookKeeperLog '%s' is already disabled.\", logId);\n+            return;\n+        }\n+\n+        output(\"BookKeeperLog '%s' is about to be DISABLED.\", logId);\n+        output(\"\\tIts SegmentContainer will shut down and it will not be able to restart until re-enabled.\");\n+        output(\"\\tNo request on this SegmentContainer can be processed until that time (OUTAGE ALERT).\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4MTY1Ng=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY0MjQ2OnYy", "diffSide": "RIGHT", "path": "cli/user/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToyOToxNFrOHciYwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMTo1OFrOHc_XFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NTU2OQ==", "bodyText": "Java 11", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499685569", "createdAt": "2020-10-05T15:29:14Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+<!--\n+Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+-->\n+# Pravega User CLI\n+\n+Pravega User CLI is a tool for testing Pravega deployments (it is based on the \n+former [Interactive Demo Tool](https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool)).\n+\n+## Prerequisites\n+\n+- Java 8+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDI3Ng==", "bodyText": "Done.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500160276", "createdAt": "2020-10-06T10:11:58Z", "author": {"login": "RaulGracia"}, "path": "cli/user/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+<!--\n+Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+-->\n+# Pravega User CLI\n+\n+Pravega User CLI is a tool for testing Pravega deployments (it is based on the \n+former [Interactive Demo Tool](https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool)).\n+\n+## Prerequisites\n+\n+- Java 8+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NTU2OQ=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY0ODM4OnYy", "diffSide": "RIGHT", "path": "cli/user/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMDoyM1rOHcicLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMzowNFrOHc_ZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NjQ0NQ==", "bodyText": "Since this page is empty, let's rename it to something more appropriate and update code references to it.\nNow would be the best time, before we start advertising and filling it.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499686445", "createdAt": "2020-10-05T15:30:23Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+<!--\n+Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+-->\n+# Pravega User CLI\n+\n+Pravega User CLI is a tool for testing Pravega deployments (it is based on the \n+former [Interactive Demo Tool](https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool)).\n+\n+## Prerequisites\n+\n+- Java 8+\n+\n+## Building Pravega User CLI\n+\n+Checkout the source code:\n+\n+```\n+git clone https://github.com/pravega/pravega\n+cd pravega\n+```\n+\n+Build the Pravega User CLI tool:\n+\n+```\n+./gradlew distTar\n+```\n+\n+Unzip the result distribution artifact:\n+\n+```\n+cd build/distributions/\n+tar -xzvf pravega-xxx-SNAPSHOT.tar\n+```\n+\n+You will find the executable file (`pravega-cli`) as well as the default configuration under the\n+`bin` directory.\n+\n+# Executing the Pravega User CLI\n+\n+Next, we show how to use the Pravega User CLI tool.\n+\n+> Before using the Pravega User CLI, we first need a Pravega cluster up and running. While the simplest way is the \n+[standalone deployment](http://pravega.io/docs/latest/deployment/run-local/), you can explore other ways \n+of deploying Pravega in the project's [documentation](http://pravega.io/docs/latest/deployment/deployment/). \n+\n+You can run the Pravega User CLI as follows:\n+```\n+./bin/pravega-cli\n+```\n+You will se an output related to the default configuration parameters:\n+```\n+Pravega User CLI Tool.\n+\tUsage instructions: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDg0NA==", "bodyText": "Agree, I have renamed the page as follows: https://github.com/pravega/pravega/wiki/Pravega-User-CLI. I have also replaced all the occurrences in the code with the new link.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500160844", "createdAt": "2020-10-06T10:13:04Z", "author": {"login": "RaulGracia"}, "path": "cli/user/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+<!--\n+Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+-->\n+# Pravega User CLI\n+\n+Pravega User CLI is a tool for testing Pravega deployments (it is based on the \n+former [Interactive Demo Tool](https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool)).\n+\n+## Prerequisites\n+\n+- Java 8+\n+\n+## Building Pravega User CLI\n+\n+Checkout the source code:\n+\n+```\n+git clone https://github.com/pravega/pravega\n+cd pravega\n+```\n+\n+Build the Pravega User CLI tool:\n+\n+```\n+./gradlew distTar\n+```\n+\n+Unzip the result distribution artifact:\n+\n+```\n+cd build/distributions/\n+tar -xzvf pravega-xxx-SNAPSHOT.tar\n+```\n+\n+You will find the executable file (`pravega-cli`) as well as the default configuration under the\n+`bin` directory.\n+\n+# Executing the Pravega User CLI\n+\n+Next, we show how to use the Pravega User CLI tool.\n+\n+> Before using the Pravega User CLI, we first need a Pravega cluster up and running. While the simplest way is the \n+[standalone deployment](http://pravega.io/docs/latest/deployment/run-local/), you can explore other ways \n+of deploying Pravega in the project's [documentation](http://pravega.io/docs/latest/deployment/deployment/). \n+\n+You can run the Pravega User CLI as follows:\n+```\n+./bin/pravega-cli\n+```\n+You will se an output related to the default configuration parameters:\n+```\n+Pravega User CLI Tool.\n+\tUsage instructions: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NjQ0NQ=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY2MjI0OnYy", "diffSide": "RIGHT", "path": "cli/user/src/main/java/io/pravega/cli/user/UserCLIRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMzoyNlrOHciksQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMzoxM1rOHc_Zmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4ODYyNQ==", "bodyText": "Let's fix this reference too once we rename that page.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499688625", "createdAt": "2020-10-05T15:33:26Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/main/java/io/pravega/cli/user/UserCLIRunner.java", "diffHunk": "@@ -7,33 +7,43 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.test.integration.demo.interactive;\n+package io.pravega.cli.user;\n \n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.LoggerContext;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n+import io.pravega.cli.user.config.ConfigCommand;\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.slf4j.LoggerFactory;\n+\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Scanner;\n import java.util.stream.Collectors;\n-import lombok.Cleanup;\n-import lombok.val;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Interactive CLI Demo Tool for Pravega.\n  */\n-public class InteractiveDemo {\n+public class UserCLIRunner {\n     private static final String CMD_HELP = \"help\";\n     private static final String CMD_EXIT = \"exit\";\n \n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n+        doMain(args);\n+        System.exit(0);\n+    }\n+\n+    @VisibleForTesting\n+    public static void doMain(String[] args) {\n         LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();\n         context.getLoggerList().get(0).setLevel(Level.ERROR);\n \n-        System.out.println(\"Pravega Interactive Demo Tool.\");\n+        System.out.println(\"Pravega User CLI Tool.\");\n         System.out.println(\"\\tUsage instructions: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDkyMw==", "bodyText": "Done.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500160923", "createdAt": "2020-10-06T10:13:13Z", "author": {"login": "RaulGracia"}, "path": "cli/user/src/main/java/io/pravega/cli/user/UserCLIRunner.java", "diffHunk": "@@ -7,33 +7,43 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.test.integration.demo.interactive;\n+package io.pravega.cli.user;\n \n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.LoggerContext;\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n+import io.pravega.cli.user.config.ConfigCommand;\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import lombok.Cleanup;\n+import lombok.val;\n+import org.slf4j.LoggerFactory;\n+\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Scanner;\n import java.util.stream.Collectors;\n-import lombok.Cleanup;\n-import lombok.val;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Interactive CLI Demo Tool for Pravega.\n  */\n-public class InteractiveDemo {\n+public class UserCLIRunner {\n     private static final String CMD_HELP = \"help\";\n     private static final String CMD_EXIT = \"exit\";\n \n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n+        doMain(args);\n+        System.exit(0);\n+    }\n+\n+    @VisibleForTesting\n+    public static void doMain(String[] args) {\n         LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();\n         context.getLoggerList().get(0).setLevel(Level.ERROR);\n \n-        System.out.println(\"Pravega Interactive Demo Tool.\");\n+        System.out.println(\"Pravega User CLI Tool.\");\n         System.out.println(\"\\tUsage instructions: https://github.com/pravega/pravega/wiki/Interactive-Demo-Tool\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4ODYyNQ=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY2NjIxOnYy", "diffSide": "RIGHT", "path": "cli/user/src/main/java/io/pravega/cli/user/kvs/KeyValueTableCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNDoxNFrOHcim9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxNTo0N1rOHc_feg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4OTIwNA==", "bodyText": "Why did you make all of these public? If just for testing, shouldn't the tests be in the same package?", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499689204", "createdAt": "2020-10-05T15:34:14Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/main/java/io/pravega/cli/user/kvs/KeyValueTableCommand.java", "diffHunk": "@@ -35,12 +44,8 @@\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n-import lombok.Cleanup;\n-import lombok.Data;\n-import lombok.NonNull;\n-import lombok.val;\n \n-abstract class KeyValueTableCommand extends Command {\n+public abstract class KeyValueTableCommand extends Command {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MjQyNg==", "bodyText": "I have refactored the code by placing each set of commands into a separate package. As the Runner uses all the commands, and it is located in the parent package, I had to change the visibility of this and other classes. Before, everything was on the same package, so that change was not necessary.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500162426", "createdAt": "2020-10-06T10:15:47Z", "author": {"login": "RaulGracia"}, "path": "cli/user/src/main/java/io/pravega/cli/user/kvs/KeyValueTableCommand.java", "diffHunk": "@@ -35,12 +44,8 @@\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n-import lombok.Cleanup;\n-import lombok.Data;\n-import lombok.NonNull;\n-import lombok.val;\n \n-abstract class KeyValueTableCommand extends Command {\n+public abstract class KeyValueTableCommand extends Command {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4OTIwNA=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODY3NDgzOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozNjowN1rOHcisJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxNDowOVrOHc_b9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MDUzNQ==", "bodyText": "Indentation.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r499690535", "createdAt": "2020-10-05T15:36:07Z", "author": {"login": "andreipaduroiu"}, "path": "settings.gradle", "diffHunk": "@@ -25,6 +25,8 @@ include 'common',\n         'segmentstore:server:host',\n         'controller',\n         'standalone',\n+\t\t'cli:admin',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MTUyNA==", "bodyText": "Fixed.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500161524", "createdAt": "2020-10-06T10:14:09Z", "author": {"login": "RaulGracia"}, "path": "settings.gradle", "diffHunk": "@@ -25,6 +25,8 @@ include 'common',\n         'segmentstore:server:host',\n         'controller',\n         'standalone',\n+\t\t'cli:admin',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MDUzNQ=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDczMTEzOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/bookkeeper/BookkeeperCommandsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNToyMzo0MlrOHc2VGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxNjo0N1rOHc_hfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxMjMxMg==", "bodyText": "Is it required?", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500012312", "createdAt": "2020-10-06T05:23:42Z", "author": {"login": "ManishKumarKeshri"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/bookkeeper/BookkeeperCommandsTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.bookkeeper;\n+\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.segmentstore.server.DataCorruptionException;\n+import io.pravega.segmentstore.server.logs.DataFrameRecord;\n+import io.pravega.segmentstore.server.logs.operations.Operation;\n+import io.pravega.segmentstore.storage.DataLogNotAvailableException;\n+import io.pravega.segmentstore.storage.DurableDataLog;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.test.common.AssertExtensions;\n+import lombok.Cleanup;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Test basic functionality of Bookkeeper commands.\n+ */\n+public class BookkeeperCommandsTest extends BookKeeperClusterTestCase {\n+\n+    private static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    private final PrintStream originalOut = System.out;\n+\n+    public BookkeeperCommandsTest() {\n+        super(3);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        baseConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        baseClientConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        super.setUp();\n+\n+        STATE.set(new AdminCommandState());\n+        Properties bkProperties = new Properties();\n+        bkProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        bkProperties.setProperty(\"pravegaservice.zk.connect.uri\", zkUtil.getZooKeeperConnectString());\n+        bkProperties.setProperty(\"bookkeeper.ledger.path\", \"/ledgers\");\n+        bkProperties.setProperty(\"bookkeeper.zk.metadata.path\", \"ledgers\");\n+        bkProperties.setProperty(\"pravegaservice.clusterName\", \"\");\n+        STATE.get().getConfigBuilder().include(bkProperties);\n+\n+        System.setOut(new PrintStream(outContent));\n+    }\n+\n+    @After\n+    public void tierDown() {\n+        System.setOut(originalOut);\n+        STATE.get().close();\n+    }\n+\n+    @Test\n+    public void testBookKeeperListCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk list\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_summary\") && commandResult.contains(\"logId\\\": 0\"));\n+    }\n+\n+    @Test\n+    public void testBookKeeperDetailsCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk details 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_summary\") && commandResult.contains(\"logId\\\": 0\"));\n+        commandResult = TestUtils.executeCommand(\"bk details 100\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_no_metadata\"));\n+    }\n+\n+    @Test\n+    public void testBookKeeperDisableAndEnableCommands() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk disable 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"enabled\\\": false\"));\n+        commandResult = TestUtils.executeCommand(\"bk enable 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"enabled\\\": true\"));\n+        // Enable an already enabled log.\n+        commandResult = TestUtils.executeCommand(\"bk enable 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"enabled\\\": true\"));\n+        commandResult = TestUtils.executeCommand(\"bk enable 100\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_no_metadata\"));\n+        // Execute closing Zookeeper server.\n+        this.zkUtil.killCluster();\n+        AssertExtensions.assertThrows(DataLogNotAvailableException.class, () -> TestUtils.executeCommand(\"bk enable 0\", STATE.get()));\n+    }\n+\n+    @Test\n+    public void testBookKeeperCleanupCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk cleanup\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"no Ledgers eligible for deletion\"));\n+\n+        CommandArgs args = new CommandArgs(Collections.singletonList(\"\"), STATE.get());\n+        BookKeeperCleanupCommand command = new BookKeeperCleanupCommand(args);\n+        BookKeeperCommand.Context context = command.createContext();\n+\n+        // List one existing and one\n+        command.listCandidates(Collections.singletonList(0L), context);\n+        Assert.assertFalse(outContent.toString().contains(\"No such ledger exists\"));\n+        command.listCandidates(Collections.singletonList(1L), context);\n+        Assert.assertTrue(outContent.toString().contains(\"No such ledger exists\"));\n+\n+        // Try to exercise deletion standalone.\n+        command.deleteCandidates(Collections.singletonList(0L), Collections.singletonList(0L), context);\n+        command.deleteCandidates(Collections.singletonList(0L), Collections.singletonList(1L), context);\n+        Assert.assertTrue(outContent.toString().contains(\"Deleted Ledger 0\"));\n+        command.deleteCandidates(Collections.singletonList(-1L), Collections.singletonList(0L), context);\n+        command.deleteCandidates(Collections.singletonList(0L), Collections.singletonList(1L), null);\n+    }\n+\n+    @Test\n+    public void testBookKeeperRecoveryCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"container recover 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"Recovery complete\"));\n+        CommandArgs args = new CommandArgs(Collections.singletonList(\"0\"), STATE.get());\n+        ContainerRecoverCommand command = new ContainerRecoverCommand(args);\n+        // Test unwrap exception options.\n+        command.unwrapDataCorruptionException(new DataCorruptionException(\"test\"));\n+        command.unwrapDataCorruptionException(new DataCorruptionException(\"test\", \"test\"));\n+        command.unwrapDataCorruptionException(new DataCorruptionException(\"test\", Arrays.asList(\"test\", \"test\")));\n+        // Check that exception is thrown if ZK is not available.\n+        this.zkUtil.stopCluster();\n+        AssertExtensions.assertThrows(DataLogNotAvailableException.class, () -> TestUtils.executeCommand(\"container recover 0\", STATE.get()));\n+    }\n+\n+    @Test\n+    public void testRecoveryState() {\n+        CommandArgs args = new CommandArgs(Collections.singletonList(\"0\"), STATE.get());\n+        ContainerRecoverCommand.RecoveryState state = new ContainerRecoverCommand(args).new RecoveryState();\n+        Operation op = new TestOperation();\n+        List<DataFrameRecord.EntryInfo> entries = new ArrayList<>();\n+        entries.add(new TestEntryInfo());\n+        // Exercise RecoveryState logic.\n+        state.operationComplete(op, new DataCorruptionException(\"Test exception\"));\n+        state.newOperation(op, entries);\n+        state.operationComplete(op, null);\n+    }\n+\n+    private void createLedgerInBookkeeperTestCluster(int logId) throws Exception {\n+        BookKeeperConfig bookKeeperConfig = BookKeeperConfig.builder().with(BookKeeperConfig.ZK_METADATA_PATH, \"ledgers\")\n+                .with(BookKeeperConfig.BK_LEDGER_PATH, \"/ledgers\")\n+                .with(BookKeeperConfig.ZK_ADDRESS, zkUtil.getZooKeeperConnectString()).build();\n+        @Cleanup\n+        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zkUtil.getZooKeeperConnectString(), new RetryOneTime(5000));\n+        curatorFramework.start();\n+        @Cleanup\n+        BookKeeperLogFactory bookKeeperLogFactory = new BookKeeperLogFactory(bookKeeperConfig, curatorFramework, Executors.newSingleThreadScheduledExecutor());\n+        bookKeeperLogFactory.initialize();\n+        @Cleanup\n+        DurableDataLog log = bookKeeperLogFactory.createDurableDataLog(logId);\n+        log.initialize(Duration.ofSeconds(5));\n+    }\n+\n+    private static class TestOperation extends Operation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2Mjk0MQ==", "bodyText": "Operation is an abstract class, so it cannot be instantiated. So, either we use any non-abstract class extending Operation or we create a mock one for testing purposes as we do here.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500162941", "createdAt": "2020-10-06T10:16:47Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/bookkeeper/BookkeeperCommandsTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.bookkeeper;\n+\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.segmentstore.server.DataCorruptionException;\n+import io.pravega.segmentstore.server.logs.DataFrameRecord;\n+import io.pravega.segmentstore.server.logs.operations.Operation;\n+import io.pravega.segmentstore.storage.DataLogNotAvailableException;\n+import io.pravega.segmentstore.storage.DurableDataLog;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.test.common.AssertExtensions;\n+import lombok.Cleanup;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Test basic functionality of Bookkeeper commands.\n+ */\n+public class BookkeeperCommandsTest extends BookKeeperClusterTestCase {\n+\n+    private static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    private final PrintStream originalOut = System.out;\n+\n+    public BookkeeperCommandsTest() {\n+        super(3);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        baseConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        baseClientConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        super.setUp();\n+\n+        STATE.set(new AdminCommandState());\n+        Properties bkProperties = new Properties();\n+        bkProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        bkProperties.setProperty(\"pravegaservice.zk.connect.uri\", zkUtil.getZooKeeperConnectString());\n+        bkProperties.setProperty(\"bookkeeper.ledger.path\", \"/ledgers\");\n+        bkProperties.setProperty(\"bookkeeper.zk.metadata.path\", \"ledgers\");\n+        bkProperties.setProperty(\"pravegaservice.clusterName\", \"\");\n+        STATE.get().getConfigBuilder().include(bkProperties);\n+\n+        System.setOut(new PrintStream(outContent));\n+    }\n+\n+    @After\n+    public void tierDown() {\n+        System.setOut(originalOut);\n+        STATE.get().close();\n+    }\n+\n+    @Test\n+    public void testBookKeeperListCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk list\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_summary\") && commandResult.contains(\"logId\\\": 0\"));\n+    }\n+\n+    @Test\n+    public void testBookKeeperDetailsCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk details 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_summary\") && commandResult.contains(\"logId\\\": 0\"));\n+        commandResult = TestUtils.executeCommand(\"bk details 100\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_no_metadata\"));\n+    }\n+\n+    @Test\n+    public void testBookKeeperDisableAndEnableCommands() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk disable 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"enabled\\\": false\"));\n+        commandResult = TestUtils.executeCommand(\"bk enable 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"enabled\\\": true\"));\n+        // Enable an already enabled log.\n+        commandResult = TestUtils.executeCommand(\"bk enable 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"enabled\\\": true\"));\n+        commandResult = TestUtils.executeCommand(\"bk enable 100\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"log_no_metadata\"));\n+        // Execute closing Zookeeper server.\n+        this.zkUtil.killCluster();\n+        AssertExtensions.assertThrows(DataLogNotAvailableException.class, () -> TestUtils.executeCommand(\"bk enable 0\", STATE.get()));\n+    }\n+\n+    @Test\n+    public void testBookKeeperCleanupCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"bk cleanup\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"no Ledgers eligible for deletion\"));\n+\n+        CommandArgs args = new CommandArgs(Collections.singletonList(\"\"), STATE.get());\n+        BookKeeperCleanupCommand command = new BookKeeperCleanupCommand(args);\n+        BookKeeperCommand.Context context = command.createContext();\n+\n+        // List one existing and one\n+        command.listCandidates(Collections.singletonList(0L), context);\n+        Assert.assertFalse(outContent.toString().contains(\"No such ledger exists\"));\n+        command.listCandidates(Collections.singletonList(1L), context);\n+        Assert.assertTrue(outContent.toString().contains(\"No such ledger exists\"));\n+\n+        // Try to exercise deletion standalone.\n+        command.deleteCandidates(Collections.singletonList(0L), Collections.singletonList(0L), context);\n+        command.deleteCandidates(Collections.singletonList(0L), Collections.singletonList(1L), context);\n+        Assert.assertTrue(outContent.toString().contains(\"Deleted Ledger 0\"));\n+        command.deleteCandidates(Collections.singletonList(-1L), Collections.singletonList(0L), context);\n+        command.deleteCandidates(Collections.singletonList(0L), Collections.singletonList(1L), null);\n+    }\n+\n+    @Test\n+    public void testBookKeeperRecoveryCommand() throws Exception {\n+        createLedgerInBookkeeperTestCluster(0);\n+        String commandResult = TestUtils.executeCommand(\"container recover 0\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"Recovery complete\"));\n+        CommandArgs args = new CommandArgs(Collections.singletonList(\"0\"), STATE.get());\n+        ContainerRecoverCommand command = new ContainerRecoverCommand(args);\n+        // Test unwrap exception options.\n+        command.unwrapDataCorruptionException(new DataCorruptionException(\"test\"));\n+        command.unwrapDataCorruptionException(new DataCorruptionException(\"test\", \"test\"));\n+        command.unwrapDataCorruptionException(new DataCorruptionException(\"test\", Arrays.asList(\"test\", \"test\")));\n+        // Check that exception is thrown if ZK is not available.\n+        this.zkUtil.stopCluster();\n+        AssertExtensions.assertThrows(DataLogNotAvailableException.class, () -> TestUtils.executeCommand(\"container recover 0\", STATE.get()));\n+    }\n+\n+    @Test\n+    public void testRecoveryState() {\n+        CommandArgs args = new CommandArgs(Collections.singletonList(\"0\"), STATE.get());\n+        ContainerRecoverCommand.RecoveryState state = new ContainerRecoverCommand(args).new RecoveryState();\n+        Operation op = new TestOperation();\n+        List<DataFrameRecord.EntryInfo> entries = new ArrayList<>();\n+        entries.add(new TestEntryInfo());\n+        // Exercise RecoveryState logic.\n+        state.operationComplete(op, new DataCorruptionException(\"Test exception\"));\n+        state.newOperation(op, entries);\n+        state.operationComplete(op, null);\n+    }\n+\n+    private void createLedgerInBookkeeperTestCluster(int logId) throws Exception {\n+        BookKeeperConfig bookKeeperConfig = BookKeeperConfig.builder().with(BookKeeperConfig.ZK_METADATA_PATH, \"ledgers\")\n+                .with(BookKeeperConfig.BK_LEDGER_PATH, \"/ledgers\")\n+                .with(BookKeeperConfig.ZK_ADDRESS, zkUtil.getZooKeeperConnectString()).build();\n+        @Cleanup\n+        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zkUtil.getZooKeeperConnectString(), new RetryOneTime(5000));\n+        curatorFramework.start();\n+        @Cleanup\n+        BookKeeperLogFactory bookKeeperLogFactory = new BookKeeperLogFactory(bookKeeperConfig, curatorFramework, Executors.newSingleThreadScheduledExecutor());\n+        bookKeeperLogFactory.initialize();\n+        @Cleanup\n+        DurableDataLog log = bookKeeperLogFactory.createDurableDataLog(logId);\n+        log.initialize(Duration.ofSeconds(5));\n+    }\n+\n+    private static class TestOperation extends Operation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxMjMxMg=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDczMzI1OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/bookkeeper/BookkeeperCommandsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNToyNDo1OVrOHc2WcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxNzowMVrOHc_h-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxMjY1Nw==", "bodyText": "Should it be tearDown?", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500012657", "createdAt": "2020-10-06T05:24:59Z", "author": {"login": "ManishKumarKeshri"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/bookkeeper/BookkeeperCommandsTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.bookkeeper;\n+\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.segmentstore.server.DataCorruptionException;\n+import io.pravega.segmentstore.server.logs.DataFrameRecord;\n+import io.pravega.segmentstore.server.logs.operations.Operation;\n+import io.pravega.segmentstore.storage.DataLogNotAvailableException;\n+import io.pravega.segmentstore.storage.DurableDataLog;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.test.common.AssertExtensions;\n+import lombok.Cleanup;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Test basic functionality of Bookkeeper commands.\n+ */\n+public class BookkeeperCommandsTest extends BookKeeperClusterTestCase {\n+\n+    private static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    private final PrintStream originalOut = System.out;\n+\n+    public BookkeeperCommandsTest() {\n+        super(3);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        baseConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        baseClientConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        super.setUp();\n+\n+        STATE.set(new AdminCommandState());\n+        Properties bkProperties = new Properties();\n+        bkProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        bkProperties.setProperty(\"pravegaservice.zk.connect.uri\", zkUtil.getZooKeeperConnectString());\n+        bkProperties.setProperty(\"bookkeeper.ledger.path\", \"/ledgers\");\n+        bkProperties.setProperty(\"bookkeeper.zk.metadata.path\", \"ledgers\");\n+        bkProperties.setProperty(\"pravegaservice.clusterName\", \"\");\n+        STATE.get().getConfigBuilder().include(bkProperties);\n+\n+        System.setOut(new PrintStream(outContent));\n+    }\n+\n+    @After\n+    public void tierDown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MzA2Ng==", "bodyText": "You are right, I fixed it.", "url": "https://github.com/pravega/pravega/pull/5065#discussion_r500163066", "createdAt": "2020-10-06T10:17:01Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/bookkeeper/BookkeeperCommandsTest.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.bookkeeper;\n+\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.segmentstore.server.DataCorruptionException;\n+import io.pravega.segmentstore.server.logs.DataFrameRecord;\n+import io.pravega.segmentstore.server.logs.operations.Operation;\n+import io.pravega.segmentstore.storage.DataLogNotAvailableException;\n+import io.pravega.segmentstore.storage.DurableDataLog;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperConfig;\n+import io.pravega.segmentstore.storage.impl.bookkeeper.BookKeeperLogFactory;\n+import io.pravega.test.common.AssertExtensions;\n+import lombok.Cleanup;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Test basic functionality of Bookkeeper commands.\n+ */\n+public class BookkeeperCommandsTest extends BookKeeperClusterTestCase {\n+\n+    private static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    private final PrintStream originalOut = System.out;\n+\n+    public BookkeeperCommandsTest() {\n+        super(3);\n+    }\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        baseConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        baseClientConf.setLedgerManagerFactoryClassName(\"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\");\n+        super.setUp();\n+\n+        STATE.set(new AdminCommandState());\n+        Properties bkProperties = new Properties();\n+        bkProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        bkProperties.setProperty(\"pravegaservice.zk.connect.uri\", zkUtil.getZooKeeperConnectString());\n+        bkProperties.setProperty(\"bookkeeper.ledger.path\", \"/ledgers\");\n+        bkProperties.setProperty(\"bookkeeper.zk.metadata.path\", \"ledgers\");\n+        bkProperties.setProperty(\"pravegaservice.clusterName\", \"\");\n+        STATE.get().getConfigBuilder().include(bkProperties);\n+\n+        System.setOut(new PrintStream(outContent));\n+    }\n+\n+    @After\n+    public void tierDown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxMjY1Nw=="}, "originalCommit": {"oid": "cef1eb3dbc01a8153ea308132c7d1bcc5a049b69"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4871, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}