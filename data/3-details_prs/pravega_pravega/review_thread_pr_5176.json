{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NjczMzY0", "number": 5176, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozNjo0OVrOEiZqpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxNTowNFrOEjtmgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTA3NTU5OnYy", "diffSide": "RIGHT", "path": "test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjozNjo0OVrOHQQKZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNjo1NDoyMVrOHQQmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNDA2OA==", "bodyText": "please use Java conventions for method names:\nverifyByteClientReadWrite", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r486804068", "createdAt": "2020-09-11T06:36:49Z", "author": {"login": "eolivelli"}, "path": "test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java", "diffHunk": "@@ -280,7 +281,47 @@ public void testBlockingRead() throws IOException {\n         writer.closeAndSeal();\n         assertEquals(-1, reader.read());\n     }\n-    \n+\n+    @Test(timeout = 30000)\n+    public void testRecreateStream() {\n+        String scope = \"ByteStreamTest\";\n+        String stream = \"stream\";\n+\n+        StreamConfiguration config = StreamConfiguration.builder().build();\n+        @Cleanup\n+        StreamManager streamManager = new StreamManagerImpl(controller, null);\n+        // create a scope\n+        assertTrue(\"Create scope failed\", streamManager.createScope(scope));\n+        // create a stream\n+        assertTrue(\"Create stream failed\", streamManager.createStream(scope, stream, config));\n+        // verify read and write.\n+        verify_byte_client_read_write(scope, stream);\n+        // delete the stream and recreate\n+        assertTrue(\"Seal stream operation failed\", streamManager.sealStream(scope, stream));\n+        assertTrue(\"Delete Stream operation failed\", streamManager.deleteStream(scope, stream));\n+        assertTrue(\"Recreate stream failed\", streamManager.createStream(scope, stream, config));\n+        // verify read and write.\n+        verify_byte_client_read_write(scope, stream);\n+    }\n+\n+    private void verify_byte_client_read_write(String scope, String stream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b846cc98ed33d699a0769e9f4853541ff44e3fb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgxMTI0Mg==", "bodyText": "fixed it.", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r486811242", "createdAt": "2020-09-11T06:54:21Z", "author": {"login": "shrids"}, "path": "test/integration/src/test/java/io/pravega/test/integration/ByteStreamTest.java", "diffHunk": "@@ -280,7 +281,47 @@ public void testBlockingRead() throws IOException {\n         writer.closeAndSeal();\n         assertEquals(-1, reader.read());\n     }\n-    \n+\n+    @Test(timeout = 30000)\n+    public void testRecreateStream() {\n+        String scope = \"ByteStreamTest\";\n+        String stream = \"stream\";\n+\n+        StreamConfiguration config = StreamConfiguration.builder().build();\n+        @Cleanup\n+        StreamManager streamManager = new StreamManagerImpl(controller, null);\n+        // create a scope\n+        assertTrue(\"Create scope failed\", streamManager.createScope(scope));\n+        // create a stream\n+        assertTrue(\"Create stream failed\", streamManager.createStream(scope, stream, config));\n+        // verify read and write.\n+        verify_byte_client_read_write(scope, stream);\n+        // delete the stream and recreate\n+        assertTrue(\"Seal stream operation failed\", streamManager.sealStream(scope, stream));\n+        assertTrue(\"Delete Stream operation failed\", streamManager.deleteStream(scope, stream));\n+        assertTrue(\"Recreate stream failed\", streamManager.createStream(scope, stream, config));\n+        // verify read and write.\n+        verify_byte_client_read_write(scope, stream);\n+    }\n+\n+    private void verify_byte_client_read_write(String scope, String stream) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjgwNDA2OA=="}, "originalCommit": {"oid": "4b846cc98ed33d699a0769e9f4853541ff44e3fb"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY3NTAxOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1NTowM1rOHQf3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1NTowM1rOHQf3tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2MTQzMA==", "bodyText": "If we want a version of this fix to go into 0.7.2, we will have to use segments.getSegments().size() here.", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r487061430", "createdAt": "2020-09-11T13:55:03Z", "author": {"login": "derekm"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,16 +48,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n-    }\n-\n-    private ByteStreamReader createByteStreamReaders(Segment segment) {\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStream()\n-                                                                                                                 .getStreamName()),\n-                                                                RuntimeException::new);\n-\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n+        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");\n+        Preconditions.checkState(segments.getNumberOfSegments() == 1, \"Stream is configured with more than one segment\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a011b9592ab76c142693c9e55aac303f24b2cfcf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTI0MDY0OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDoxNDo1OFrOHRr49A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDoxNzo0MlrOHRv7Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNjkzMg==", "bodyText": "Why is it an error to create a reader on a sealed stream?", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488306932", "createdAt": "2020-09-15T00:14:58Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,16 +48,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n-    }\n-\n-    private ByteStreamReader createByteStreamReaders(Segment segment) {\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStream()\n-                                                                                                                 .getStreamName()),\n-                                                                RuntimeException::new);\n-\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n+        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb2ae9c833d1fd55165a6878e10fb07e66177b6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3Mjk5OA==", "bodyText": "Good catch, fixed it.", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488372998", "createdAt": "2020-09-15T04:17:42Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,16 +48,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n-    }\n-\n-    private ByteStreamReader createByteStreamReaders(Segment segment) {\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStream()\n-                                                                                                                 .getStreamName()),\n-                                                                RuntimeException::new);\n-\n-        DelegationTokenProvider tokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        StreamSegments segments = Futures.getThrowingException(controller.getCurrentSegments(scope, streamName));\n+        Preconditions.checkState(segments.getNumberOfSegments() > 0, \"Stream is sealed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNjkzMg=="}, "originalCommit": {"oid": "ceb2ae9c833d1fd55165a6878e10fb07e66177b6"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzc5NDEzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxNToxMVrOHSEC2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoyMTowMVrOHSEU0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMjY4Mw==", "bodyText": "Will this correctly handle truncated streams? Is timestamp here the same as epoch?", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488702683", "createdAt": "2020-09-15T14:15:11Z", "author": {"login": "derekm"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,7 +51,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNzI4MQ==", "bodyText": "yes, this API returns the segment pointing to the HEAD of the stream even for truncated streams.", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488707281", "createdAt": "2020-09-15T14:21:01Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,7 +51,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwMjY4Mw=="}, "originalCommit": {"oid": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODgyNzUyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODoxNTowNFrOHSOO1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTowMTowNFrOHSgMog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2OTU5MQ==", "bodyText": "For debug-ability it would be good to have two different errors or include the size in the error message.", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r488869591", "createdAt": "2020-09-15T18:15:04Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,7 +51,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n+        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2MzkzOA==", "bodyText": "improved it.", "url": "https://github.com/pravega/pravega/pull/5176#discussion_r489163938", "createdAt": "2020-09-16T05:01:04Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/byteStream/impl/ByteStreamClientImpl.java", "diffHunk": "@@ -48,7 +51,11 @@\n \n     @Override\n     public ByteStreamReader createByteStreamReader(String streamName) {\n-        return createByteStreamReaders(new Segment(scope, streamName, 0));\n+        // Fetch the segments pointing to the current HEAD of the stream.\n+        Map<Segment, Long> segments = Futures.getThrowingException(controller.getSegmentsAtTime(Stream.of(scope, streamName), 0L));\n+        Preconditions.checkState(segments.size() == 1, \"Stream is configured with more than one segment or has none\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2OTU5MQ=="}, "originalCommit": {"oid": "41b8a54ed2a6782193f423ad665fffde0bdcd8b1"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4690, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}