{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNzA0OTIy", "number": 5329, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo0NDozNVrOE6aGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo1MDo1MlrOE64tZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgwNDc5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo0NDozNVrOH1eAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToxOTo1OVrOH1y4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODI5MQ==", "bodyText": "this is a hanging future. this should be returned from this thenCompose call", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525828291", "createdAt": "2020-11-18T05:44:35Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MDMwMg==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526170302", "createdAt": "2020-11-18T15:19:59Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODI5MQ=="}, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgwNTU3OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo0NDo1NVrOH1eBLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1NDo0N1rOH1lq2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODM5Nw==", "bodyText": "we need to handle the else case and return a completed future", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525828397", "createdAt": "2020-11-18T05:44:55Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                SubscriberSet.update(subscriberSetRecord.getObject(), newSubscriber, generation).toBytes(),\n+                                                                         subscriberSetRecord.getVersion())\n+                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY));\n+                           }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1Mzc1Mg==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525953752", "createdAt": "2020-11-18T09:54:47Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                SubscriberSet.update(subscriberSetRecord.getObject(), newSubscriber, generation).toBytes(),\n+                                                                         subscriberSetRecord.getVersion())\n+                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY));\n+                           }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODM5Nw=="}, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgwNjA5OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo0NToxN1rOH1eBgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1NDo0MVrOH1lqlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODQ4Mw==", "bodyText": "same comment.. hanging future.. should be linked to the response being sent from this callback", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525828483", "createdAt": "2020-11-18T05:45:17Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                SubscriberSet.update(subscriberSetRecord.getObject(), newSubscriber, generation).toBytes(),\n+                                                                         subscriberSetRecord.getVersion())\n+                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY));\n+                           }\n+                      } else {\n+                           // add new Subscriber\n+                           storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzY4NA==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525953684", "createdAt": "2020-11-18T09:54:41Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                SubscriberSet.update(subscriberSetRecord.getObject(), newSubscriber, generation).toBytes(),\n+                                                                         subscriberSetRecord.getVersion())\n+                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY));\n+                           }\n+                      } else {\n+                           // add new Subscriber\n+                           storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODQ4Mw=="}, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjgwODMzOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTo0NjoyNlrOH1eC0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOTo1NDozNFrOH1lqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODgxOQ==", "bodyText": "whatever computation you are doing above is done asynchronously and then you are returning a completed future which is not linked to the above computation.. this is incorrect. this method will return with a completed future and caller will assume the work is done while the work would still be happening asynchronously and could fail.. the response future should be linked to the actual processing.", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525828819", "createdAt": "2020-11-18T05:46:26Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                SubscriberSet.update(subscriberSetRecord.getObject(), newSubscriber, generation).toBytes(),\n+                                                                         subscriberSetRecord.getVersion())\n+                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY));\n+                           }\n+                      } else {\n+                           // add new Subscriber\n+                           storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                   SubscriberSet.add(subscriberSetRecord.getObject(),\n+                                           newSubscriber, operationGeneration).toBytes(), subscriberSetRecord.getVersion())\n+                                   .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable,\n+                                           getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n+                                   .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n+                                   .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)));\n+                       }\n+                       return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzYwMw==", "bodyText": "ok. fixed.", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525953603", "createdAt": "2020-11-18T09:54:34Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/PravegaTablesStream.java", "diffHunk": "@@ -278,15 +277,32 @@ private String getWritersTableName(String id) {\n     }\n \n     @Override\n-    public CompletableFuture<Void> createSubscriber(String newSubscriber) {\n+    public CompletableFuture<Void> createSubscriber(String newSubscriber, long operationGeneration) {\n         final StreamSubscriber newSubscriberRecord = new StreamSubscriber(newSubscriber, ImmutableMap.of(), System.currentTimeMillis());\n         return getMetadataTable()\n                 .thenCompose(metadataTable -> getSubscriberSetRecord(true)\n-                        .thenCompose(subscriberSetRecord -> storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n-                                SubscriberSet.add(subscriberSetRecord.getObject(), newSubscriber).toBytes(), subscriberSetRecord.getVersion())\n-                                .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable, getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n-                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)))));\n+                   .thenCompose(subscriberSetRecord -> {\n+                       if (subscriberSetRecord.getObject().getSubscribers().containsKey(newSubscriber)) {\n+                           // update Subscriber generation\n+                           Long generation = subscriberSetRecord.getObject().getSubscribers().get(newSubscriber);\n+                           if (generation.longValue() < operationGeneration) {\n+                               storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                SubscriberSet.update(subscriberSetRecord.getObject(), newSubscriber, generation).toBytes(),\n+                                                                         subscriberSetRecord.getVersion())\n+                                .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY));\n+                           }\n+                      } else {\n+                           // add new Subscriber\n+                           storeHelper.updateEntry(metadataTable, SUBSCRIBER_SET_KEY,\n+                                   SubscriberSet.add(subscriberSetRecord.getObject(),\n+                                           newSubscriber, operationGeneration).toBytes(), subscriberSetRecord.getVersion())\n+                                   .thenCompose(v -> storeHelper.addNewEntryIfAbsent(metadataTable,\n+                                           getKeyForSubscriber(newSubscriber), newSubscriberRecord.toBytes()))\n+                                   .thenAccept(v -> storeHelper.invalidateCache(metadataTable, SUBSCRIBER_SET_KEY))\n+                                   .thenAccept(v -> storeHelper.invalidateCache(metadataTable, getKeyForSubscriber(newSubscriber)));\n+                       }\n+                       return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyODgxOQ=="}, "originalCommit": {"oid": "e504d9841c0c5ea29077abd5a33f656d04933aa2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5Nzg2OTk1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/task/Stream/StreamMetadataTasks.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo1MzoyOVrOH1oDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyMToyNlrOH1y9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MjcwNw==", "bodyText": "question: does create subscriber update the entry if it already existed, but with an older generation?", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r525992707", "createdAt": "2020-11-18T10:53:29Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/task/Stream/StreamMetadataTasks.java", "diffHunk": "@@ -311,18 +312,9 @@ public void initializeStreamWriters(final EventStreamClientFactory clientFactory\n                 return CompletableFuture.completedFuture(AddSubscriberStatus.Status.STREAM_NOT_FOUND);\n             } else {\n                 // 2. get subscribers data\n-                return Futures.exceptionallyExpecting(streamMetadataStore.getSubscriber(scope, stream, newSubscriber, context, executor),\n-                     e -> Exceptions.unwrap(e) instanceof StoreException.DataNotFoundException, null)\n-                    .thenCompose(subscribersData -> {\n-                    //4. If SubscriberRecord does not exist create one...\n-                    if (subscribersData == null) {\n-                        return streamMetadataStore.createSubscriber(scope, stream, newSubscriber, context, executor)\n-                                .thenApply(v -> AddSubscriberStatus.Status.SUCCESS);\n-                    } else {\n-                        return CompletableFuture.completedFuture(AddSubscriberStatus.Status.SUBSCRIBER_EXISTS);\n-                    }\n-                    })\n-                    .exceptionally(ex -> {\n+                return streamMetadataStore.createSubscriber(scope, stream, newSubscriber, generation, context, executor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acbbc26019ed5b81af355eebea72d2a79c69d22"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MTQ4NQ==", "bodyText": "If entry already exists, its generation is updated only if the (API generation) > stored generation and not otherwise.", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526171485", "createdAt": "2020-11-18T15:21:26Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/task/Stream/StreamMetadataTasks.java", "diffHunk": "@@ -311,18 +312,9 @@ public void initializeStreamWriters(final EventStreamClientFactory clientFactory\n                 return CompletableFuture.completedFuture(AddSubscriberStatus.Status.STREAM_NOT_FOUND);\n             } else {\n                 // 2. get subscribers data\n-                return Futures.exceptionallyExpecting(streamMetadataStore.getSubscriber(scope, stream, newSubscriber, context, executor),\n-                     e -> Exceptions.unwrap(e) instanceof StoreException.DataNotFoundException, null)\n-                    .thenCompose(subscribersData -> {\n-                    //4. If SubscriberRecord does not exist create one...\n-                    if (subscribersData == null) {\n-                        return streamMetadataStore.createSubscriber(scope, stream, newSubscriber, context, executor)\n-                                .thenApply(v -> AddSubscriberStatus.Status.SUCCESS);\n-                    } else {\n-                        return CompletableFuture.completedFuture(AddSubscriberStatus.Status.SUBSCRIBER_EXISTS);\n-                    }\n-                    })\n-                    .exceptionally(ex -> {\n+                return streamMetadataStore.createSubscriber(scope, stream, newSubscriber, generation, context, executor)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5MjcwNw=="}, "originalCommit": {"oid": "6acbbc26019ed5b81af355eebea72d2a79c69d22"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTgwMDA1OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/InMemoryStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo0MToyOVrOH2Nitw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTowOTozMFrOH2TQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNzAzMQ==", "bodyText": "nit: misnomer set when its a map", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526607031", "createdAt": "2020-11-19T05:41:29Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/InMemoryStream.java", "diffHunk": "@@ -116,6 +116,9 @@\n     @GuardedBy(\"subscribersLock\")\n     private final List<VersionedMetadata<StreamSubscriber>> streamSubscribers = new ArrayList<>();\n \n+    @GuardedBy(\"subscribersLock\")\n+    private final Map<String, Long> subscribersSet = new HashMap<String, Long>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMzA5NA==", "bodyText": "SubscriberSet exists so we can maintain a separate list of subscribers from the \"Subscriber--> StreamCut\" mapping.\nThis needed for finding the list of all Subscribers for a Stream (listSubscribers).", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526613094", "createdAt": "2020-11-19T06:01:02Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/InMemoryStream.java", "diffHunk": "@@ -116,6 +116,9 @@\n     @GuardedBy(\"subscribersLock\")\n     private final List<VersionedMetadata<StreamSubscriber>> streamSubscribers = new ArrayList<>();\n \n+    @GuardedBy(\"subscribersLock\")\n+    private final Map<String, Long> subscribersSet = new HashMap<String, Long>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNzAzMQ=="}, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwMDU2OA==", "bodyText": "nit: misnomer set when its a map\n\nchanged to Subscribers", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526700568", "createdAt": "2020-11-19T09:09:30Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/InMemoryStream.java", "diffHunk": "@@ -116,6 +116,9 @@\n     @GuardedBy(\"subscribersLock\")\n     private final List<VersionedMetadata<StreamSubscriber>> streamSubscribers = new ArrayList<>();\n \n+    @GuardedBy(\"subscribersLock\")\n+    private final Map<String, Long> subscribersSet = new HashMap<String, Long>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwNzAzMQ=="}, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTgxNzI0OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/records/SubscriberSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo0OTozOVrOH2NsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjozMjo1MlrOH2OkkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwOTQ5Mg==", "bodyText": "this can be improved.. its making two passes (filter and putall) over the map. we can get it down to one pass only by adding all the existing entries and for entry which already exists, we add the new subscriber.\nin fact, putall followed by put will be sufficient too. if previous map had this subscriber its value will simply get overwritten.", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526609492", "createdAt": "2020-11-19T05:49:39Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/records/SubscriberSet.java", "diffHunk": "@@ -37,37 +37,55 @@\n     public static final SubscriberSetSerializer SERIALIZER = new SubscriberSetSerializer();\n \n     @Getter\n-    private final ImmutableList<String> subscribers;\n+    private final ImmutableMap<String, Long> subscribers;\n \n     @Builder\n-    public SubscriberSet(@NonNull ImmutableList<String> subscribers) {\n+    public SubscriberSet(@NonNull ImmutableMap<String, Long> subscribers) {\n         this.subscribers = subscribers;\n     }\n \n     /**\n      * This method adds a subscriber in the subscriberSet.\n      * @param subscriberSet Subscriber Set.\n      * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n      * @return updated Subscriber Set.\n      */\n-    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber) {\n-            ImmutableList.Builder<String> builder = ImmutableList.builder();\n-            builder.addAll(subscriberSet.subscribers);\n-            builder.add(subscriber);\n+    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+            ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+            builder.putAll(subscriberSet.subscribers);\n+            builder.put(subscriber, generation);\n             return new SubscriberSet(builder.build());\n     }\n \n+    /**\n+     * This method updates the generation of a subscriber in the subscriberSet.\n+     * @param subscriberSet Subscriber Set.\n+     * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n+     * @return updated Subscriber Set.\n+     */\n+    public static SubscriberSet update(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+        ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+        Map<String, Long> otherSubscribers = subscriberSet.getSubscribers().entrySet().stream().filter(e -> !e.getKey().equals(subscriber))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyMzg4OQ==", "bodyText": "ok. fixed", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526623889", "createdAt": "2020-11-19T06:32:52Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/records/SubscriberSet.java", "diffHunk": "@@ -37,37 +37,55 @@\n     public static final SubscriberSetSerializer SERIALIZER = new SubscriberSetSerializer();\n \n     @Getter\n-    private final ImmutableList<String> subscribers;\n+    private final ImmutableMap<String, Long> subscribers;\n \n     @Builder\n-    public SubscriberSet(@NonNull ImmutableList<String> subscribers) {\n+    public SubscriberSet(@NonNull ImmutableMap<String, Long> subscribers) {\n         this.subscribers = subscribers;\n     }\n \n     /**\n      * This method adds a subscriber in the subscriberSet.\n      * @param subscriberSet Subscriber Set.\n      * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n      * @return updated Subscriber Set.\n      */\n-    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber) {\n-            ImmutableList.Builder<String> builder = ImmutableList.builder();\n-            builder.addAll(subscriberSet.subscribers);\n-            builder.add(subscriber);\n+    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+            ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+            builder.putAll(subscriberSet.subscribers);\n+            builder.put(subscriber, generation);\n             return new SubscriberSet(builder.build());\n     }\n \n+    /**\n+     * This method updates the generation of a subscriber in the subscriberSet.\n+     * @param subscriberSet Subscriber Set.\n+     * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n+     * @return updated Subscriber Set.\n+     */\n+    public static SubscriberSet update(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+        ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+        Map<String, Long> otherSubscribers = subscriberSet.getSubscribers().entrySet().stream().filter(e -> !e.getKey().equals(subscriber))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwOTQ5Mg=="}, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTgxOTkwOnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/store/stream/records/SubscriberSet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNTo1MDo1MlrOH2Nt1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTozNDowNFrOH2UOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwOTg3Ng==", "bodyText": "same here. we can put all and then call remove on the builder or at least do the whole thing in one pass", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526609876", "createdAt": "2020-11-19T05:50:52Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/records/SubscriberSet.java", "diffHunk": "@@ -37,37 +37,55 @@\n     public static final SubscriberSetSerializer SERIALIZER = new SubscriberSetSerializer();\n \n     @Getter\n-    private final ImmutableList<String> subscribers;\n+    private final ImmutableMap<String, Long> subscribers;\n \n     @Builder\n-    public SubscriberSet(@NonNull ImmutableList<String> subscribers) {\n+    public SubscriberSet(@NonNull ImmutableMap<String, Long> subscribers) {\n         this.subscribers = subscribers;\n     }\n \n     /**\n      * This method adds a subscriber in the subscriberSet.\n      * @param subscriberSet Subscriber Set.\n      * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n      * @return updated Subscriber Set.\n      */\n-    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber) {\n-            ImmutableList.Builder<String> builder = ImmutableList.builder();\n-            builder.addAll(subscriberSet.subscribers);\n-            builder.add(subscriber);\n+    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+            ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+            builder.putAll(subscriberSet.subscribers);\n+            builder.put(subscriber, generation);\n             return new SubscriberSet(builder.build());\n     }\n \n+    /**\n+     * This method updates the generation of a subscriber in the subscriberSet.\n+     * @param subscriberSet Subscriber Set.\n+     * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n+     * @return updated Subscriber Set.\n+     */\n+    public static SubscriberSet update(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+        ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+        Map<String, Long> otherSubscribers = subscriberSet.getSubscribers().entrySet().stream().filter(e -> !e.getKey().equals(subscriber))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        builder.putAll(otherSubscribers);\n+        builder.put(subscriber, generation);\n+        return new SubscriberSet(builder.build());\n+    }\n+\n     /**\n      * This method removes a subscriber from the subscriberSet.\n      * @param subscriberSet Subscriber Set.\n      * @param subscriber subscriber to be removed.\n      * @return updated Subscriber Set.\n      */\n     public static SubscriberSet remove(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber) {\n-        ImmutableList.Builder<String> builder = ImmutableList.builder();\n-        List<String> otherSubscribers = subscriberSet.getSubscribers().stream().filter(s -> !s.equals(subscriber)).collect(Collectors.toList());\n-        builder.addAll(otherSubscribers);\n-        return new SubscriberSet(builder.build());\n+       ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcxNjQzNQ==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/5329#discussion_r526716435", "createdAt": "2020-11-19T09:34:04Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/records/SubscriberSet.java", "diffHunk": "@@ -37,37 +37,55 @@\n     public static final SubscriberSetSerializer SERIALIZER = new SubscriberSetSerializer();\n \n     @Getter\n-    private final ImmutableList<String> subscribers;\n+    private final ImmutableMap<String, Long> subscribers;\n \n     @Builder\n-    public SubscriberSet(@NonNull ImmutableList<String> subscribers) {\n+    public SubscriberSet(@NonNull ImmutableMap<String, Long> subscribers) {\n         this.subscribers = subscribers;\n     }\n \n     /**\n      * This method adds a subscriber in the subscriberSet.\n      * @param subscriberSet Subscriber Set.\n      * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n      * @return updated Subscriber Set.\n      */\n-    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber) {\n-            ImmutableList.Builder<String> builder = ImmutableList.builder();\n-            builder.addAll(subscriberSet.subscribers);\n-            builder.add(subscriber);\n+    public static SubscriberSet add(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+            ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+            builder.putAll(subscriberSet.subscribers);\n+            builder.put(subscriber, generation);\n             return new SubscriberSet(builder.build());\n     }\n \n+    /**\n+     * This method updates the generation of a subscriber in the subscriberSet.\n+     * @param subscriberSet Subscriber Set.\n+     * @param subscriber subscriber to be added.\n+     * @param generation subscriber generation.\n+     * @return updated Subscriber Set.\n+     */\n+    public static SubscriberSet update(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber, long generation) {\n+        ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n+        Map<String, Long> otherSubscribers = subscriberSet.getSubscribers().entrySet().stream().filter(e -> !e.getKey().equals(subscriber))\n+                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n+        builder.putAll(otherSubscribers);\n+        builder.put(subscriber, generation);\n+        return new SubscriberSet(builder.build());\n+    }\n+\n     /**\n      * This method removes a subscriber from the subscriberSet.\n      * @param subscriberSet Subscriber Set.\n      * @param subscriber subscriber to be removed.\n      * @return updated Subscriber Set.\n      */\n     public static SubscriberSet remove(@NonNull SubscriberSet subscriberSet, @NonNull String subscriber) {\n-        ImmutableList.Builder<String> builder = ImmutableList.builder();\n-        List<String> otherSubscribers = subscriberSet.getSubscribers().stream().filter(s -> !s.equals(subscriber)).collect(Collectors.toList());\n-        builder.addAll(otherSubscribers);\n-        return new SubscriberSet(builder.build());\n+       ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwOTg3Ng=="}, "originalCommit": {"oid": "3c8618e94fae21f94d88006d26d5371c09d3b86e"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4526, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}