{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMDk4ODY3", "number": 4812, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNjoxNlrOD_nS-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzoyNjoyM1rOD_7Dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDMwNzE1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDoyNjoxNlrOGaYHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzozNTozMFrOGaeirw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMTI2NQ==", "bodyText": "I suggest  you to give a try to https://github.com/FasterXML/jackson-jr\njackson-databind is full of CVEs due to the richness of features.\nin ZooKeeper community we are evaluating to drop it, as many times we have to perform upgrades.\nI don't know if in Pravega project there are automatic checks about CVEs but as far as I know many open source project consumers take great care of this stuff\npersonally I have never tried jackson-jr, but it may be worth to take a look", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430311265", "createdAt": "2020-05-26T10:26:16Z", "author": {"login": "eolivelli"}, "path": "build.gradle", "diffHunk": "@@ -268,7 +268,7 @@ project('test:testcommon') {\n         compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n         compile group: 'io.netty', name: 'netty-all', version: nettyVersion\n         compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion, withoutLogger\n-        compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion\n+        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d676130f47f8ca4da6dcdbbe1a00308f0bea2f0f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0MjIwOA==", "bodyText": "@eolivelli thanks for your sharing your thoughts and suggestion. I think it's a good idea to explore if we should use jackson-jr instead.\nThat being said, we use jackson-databind elsewhere in the code too. And, jackson-jr would be a net new library, should we choose to use it. Therefore, I think it might be a good idea to explore doing it separately of this PR, after fully considering all the implications.  The issue that this PR addresses is currently blocking system tests, and I am trying to get this change in sooner rather than later.\nAs for security vulnerabilities, yes we perform a number of checks with tools like dependency analyzers, vulnerability scanners, etc. and address the issues found, regularly.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430342208", "createdAt": "2020-05-26T11:27:27Z", "author": {"login": "ravisharda"}, "path": "build.gradle", "diffHunk": "@@ -268,7 +268,7 @@ project('test:testcommon') {\n         compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n         compile group: 'io.netty', name: 'netty-all', version: nettyVersion\n         compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion, withoutLogger\n-        compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion\n+        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMTI2NQ=="}, "originalCommit": {"oid": "d676130f47f8ca4da6dcdbbe1a00308f0bea2f0f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NDc5Nw==", "bodyText": "Sure", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430344797", "createdAt": "2020-05-26T11:32:46Z", "author": {"login": "eolivelli"}, "path": "build.gradle", "diffHunk": "@@ -268,7 +268,7 @@ project('test:testcommon') {\n         compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n         compile group: 'io.netty', name: 'netty-all', version: nettyVersion\n         compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion, withoutLogger\n-        compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion\n+        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMTI2NQ=="}, "originalCommit": {"oid": "d676130f47f8ca4da6dcdbbe1a00308f0bea2f0f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxNjU1OQ==", "bodyText": "Thanks.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430416559", "createdAt": "2020-05-26T13:35:30Z", "author": {"login": "ravisharda"}, "path": "build.gradle", "diffHunk": "@@ -268,7 +268,7 @@ project('test:testcommon') {\n         compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n         compile group: 'io.netty', name: 'netty-all', version: nettyVersion\n         compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion, withoutLogger\n-        compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion\n+        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMTI2NQ=="}, "originalCommit": {"oid": "d676130f47f8ca4da6dcdbbe1a00308f0bea2f0f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc3ODE2OnYy", "diffSide": "RIGHT", "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1MTozMVrOGacwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1Njo0M1rOGalHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NzM4Mg==", "bodyText": "ObjectMapper can be a singleton, you will save a few allocations and CPU cycles, as ObjectMapper caches metadata\nprivate static final ObjectMapper MAPPER = new ObjectMapper();", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430387382", "createdAt": "2020-05-26T12:51:31Z", "author": {"login": "eolivelli"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -9,44 +9,62 @@\n  */\n package io.pravega.test.common;\n \n-import com.google.gson.annotations.SerializedName;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.Setter;\n+import lombok.SneakyThrows;\n+\n+import java.io.StringReader;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n  */\n @Builder\n @Getter\n @Setter\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class JwtBody {\n \n     // See https://tools.ietf.org/html/rfc7519#page-9 for additional details about these fields.\n \n     /**\n      * The \"sub\" (for subject) claim of the JWT body.\n      */\n-    @SerializedName(\"sub\")\n+    @JsonProperty(\"sub\")\n     private final String subject;\n \n     /**\n      * The \"aud\" (for audience) claim of the JWT body.\n      */\n-    @SerializedName(\"aud\")\n+    @JsonProperty(\"aud\")\n     private final String audience;\n \n     /**\n      * The \"iat\" (for issued at) claim of the JWT body.\n      */\n-    @SerializedName(\"iat\")\n+    @JsonProperty(\"iat\")\n     private final Long issuedAtTime;\n \n     /**\n      * The \"exp\" (for expiration time) claim of the JWT body. It identifies the time on or after which the JWT must not\n      * be accepted for processing. The value represents seconds past 1970-01-01 00:00:00Z.\n      */\n-    @SerializedName(\"exp\")\n+    @JsonProperty(\"exp\")\n     private final Long expirationTime;\n-}\n \n+    @SneakyThrows\n+    @Override\n+    public String toString() {\n+        return new ObjectMapper().writeValueAsString(this);\n+    }\n+\n+    @SneakyThrows\n+    public static JwtBody fromJson(String json) {\n+        try (StringReader jsonReader = new StringReader(json)) {\n+            return new ObjectMapper().readValue(jsonReader, JwtBody.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDI3Ng==", "bodyText": "Sure, that's a good idea. I've made the change in the latest commit I've pushed.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430524276", "createdAt": "2020-05-26T15:56:43Z", "author": {"login": "ravisharda"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -9,44 +9,62 @@\n  */\n package io.pravega.test.common;\n \n-import com.google.gson.annotations.SerializedName;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.Setter;\n+import lombok.SneakyThrows;\n+\n+import java.io.StringReader;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n  */\n @Builder\n @Getter\n @Setter\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class JwtBody {\n \n     // See https://tools.ietf.org/html/rfc7519#page-9 for additional details about these fields.\n \n     /**\n      * The \"sub\" (for subject) claim of the JWT body.\n      */\n-    @SerializedName(\"sub\")\n+    @JsonProperty(\"sub\")\n     private final String subject;\n \n     /**\n      * The \"aud\" (for audience) claim of the JWT body.\n      */\n-    @SerializedName(\"aud\")\n+    @JsonProperty(\"aud\")\n     private final String audience;\n \n     /**\n      * The \"iat\" (for issued at) claim of the JWT body.\n      */\n-    @SerializedName(\"iat\")\n+    @JsonProperty(\"iat\")\n     private final Long issuedAtTime;\n \n     /**\n      * The \"exp\" (for expiration time) claim of the JWT body. It identifies the time on or after which the JWT must not\n      * be accepted for processing. The value represents seconds past 1970-01-01 00:00:00Z.\n      */\n-    @SerializedName(\"exp\")\n+    @JsonProperty(\"exp\")\n     private final Long expirationTime;\n-}\n \n+    @SneakyThrows\n+    @Override\n+    public String toString() {\n+        return new ObjectMapper().writeValueAsString(this);\n+    }\n+\n+    @SneakyThrows\n+    public static JwtBody fromJson(String json) {\n+        try (StringReader jsonReader = new StringReader(json)) {\n+            return new ObjectMapper().readValue(jsonReader, JwtBody.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NzM4Mg=="}, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc4MzMyOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1Mjo1NFrOGacz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1NzowOVrOGalIsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODIyMA==", "bodyText": "nit (this is only a test):\njwtBody.toString().getBytes(StandardCharsets.US_ASCII)", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430388220", "createdAt": "2020-05-26T12:52:54Z", "author": {"login": "eolivelli"}, "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "diffHunk": "@@ -29,8 +31,9 @@ public void testExtractExpirationTimeReturnsNullIfExpInBodyIsNotSet() {\n         //        \"aud\": \"segmentstore\",\n         //        \"iat\": 1516239022\n         //     }\n+        JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build(),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDU5NA==", "bodyText": "Sounds good. Thanks. Fixed.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430524594", "createdAt": "2020-05-26T15:57:09Z", "author": {"login": "ravisharda"}, "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "diffHunk": "@@ -29,8 +31,9 @@ public void testExtractExpirationTimeReturnsNullIfExpInBodyIsNotSet() {\n         //        \"aud\": \"segmentstore\",\n         //        \"iat\": 1516239022\n         //     }\n+        JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build(),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODIyMA=="}, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc4OTI3OnYy", "diffSide": "RIGHT", "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1NDoyOFrOGac31A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1NzoyNFrOGalJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTIwNA==", "bodyText": "what about:\njson.getBytes(StandardCharsets-UTF-8)", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430389204", "createdAt": "2020-05-26T12:54:28Z", "author": {"login": "eolivelli"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java", "diffHunk": "@@ -26,7 +24,7 @@\n      * @return a Base64 encoded JSON representing the specified {@code jwtBodyPart}\n      */\n     public static String toCompact(JwtBody jwtBodyPart) {\n-        String json = new Gson().toJson(jwtBodyPart);\n+        String json = jwtBodyPart.toString();\n         return Base64.getEncoder().encodeToString(json.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDc1MA==", "bodyText": "Fixed.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430524750", "createdAt": "2020-05-26T15:57:24Z", "author": {"login": "ravisharda"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java", "diffHunk": "@@ -26,7 +24,7 @@\n      * @return a Base64 encoded JSON representing the specified {@code jwtBodyPart}\n      */\n     public static String toCompact(JwtBody jwtBodyPart) {\n-        String json = new Gson().toJson(jwtBodyPart);\n+        String json = jwtBodyPart.toString();\n         return Base64.getEncoder().encodeToString(json.getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTIwNA=="}, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDgxMzkxOnYy", "diffSide": "RIGHT", "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowMDozM1rOGadHRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1ODowNlrOGalLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzE1Nw==", "bodyText": "no need for a StringReader", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430393157", "createdAt": "2020-05-26T13:00:33Z", "author": {"login": "eolivelli"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -9,44 +9,62 @@\n  */\n package io.pravega.test.common;\n \n-import com.google.gson.annotations.SerializedName;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.Setter;\n+import lombok.SneakyThrows;\n+\n+import java.io.StringReader;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n  */\n @Builder\n @Getter\n @Setter\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class JwtBody {\n \n     // See https://tools.ietf.org/html/rfc7519#page-9 for additional details about these fields.\n \n     /**\n      * The \"sub\" (for subject) claim of the JWT body.\n      */\n-    @SerializedName(\"sub\")\n+    @JsonProperty(\"sub\")\n     private final String subject;\n \n     /**\n      * The \"aud\" (for audience) claim of the JWT body.\n      */\n-    @SerializedName(\"aud\")\n+    @JsonProperty(\"aud\")\n     private final String audience;\n \n     /**\n      * The \"iat\" (for issued at) claim of the JWT body.\n      */\n-    @SerializedName(\"iat\")\n+    @JsonProperty(\"iat\")\n     private final Long issuedAtTime;\n \n     /**\n      * The \"exp\" (for expiration time) claim of the JWT body. It identifies the time on or after which the JWT must not\n      * be accepted for processing. The value represents seconds past 1970-01-01 00:00:00Z.\n      */\n-    @SerializedName(\"exp\")\n+    @JsonProperty(\"exp\")\n     private final Long expirationTime;\n-}\n \n+    @SneakyThrows\n+    @Override\n+    public String toString() {\n+        return new ObjectMapper().writeValueAsString(this);\n+    }\n+\n+    @SneakyThrows\n+    public static JwtBody fromJson(String json) {\n+        try (StringReader jsonReader = new StringReader(json)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNTI3MA==", "bodyText": "yeah, fixed.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430525270", "createdAt": "2020-05-26T15:58:06Z", "author": {"login": "ravisharda"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -9,44 +9,62 @@\n  */\n package io.pravega.test.common;\n \n-import com.google.gson.annotations.SerializedName;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.Builder;\n import lombok.Getter;\n import lombok.Setter;\n+import lombok.SneakyThrows;\n+\n+import java.io.StringReader;\n \n /**\n  * Represents a JWT body for serialization/deserialization purposes.\n  */\n @Builder\n @Getter\n @Setter\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class JwtBody {\n \n     // See https://tools.ietf.org/html/rfc7519#page-9 for additional details about these fields.\n \n     /**\n      * The \"sub\" (for subject) claim of the JWT body.\n      */\n-    @SerializedName(\"sub\")\n+    @JsonProperty(\"sub\")\n     private final String subject;\n \n     /**\n      * The \"aud\" (for audience) claim of the JWT body.\n      */\n-    @SerializedName(\"aud\")\n+    @JsonProperty(\"aud\")\n     private final String audience;\n \n     /**\n      * The \"iat\" (for issued at) claim of the JWT body.\n      */\n-    @SerializedName(\"iat\")\n+    @JsonProperty(\"iat\")\n     private final Long issuedAtTime;\n \n     /**\n      * The \"exp\" (for expiration time) claim of the JWT body. It identifies the time on or after which the JWT must not\n      * be accepted for processing. The value represents seconds past 1970-01-01 00:00:00Z.\n      */\n-    @SerializedName(\"exp\")\n+    @JsonProperty(\"exp\")\n     private final Long expirationTime;\n-}\n \n+    @SneakyThrows\n+    @Override\n+    public String toString() {\n+        return new ObjectMapper().writeValueAsString(this);\n+    }\n+\n+    @SneakyThrows\n+    public static JwtBody fromJson(String json) {\n+        try (StringReader jsonReader = new StringReader(json)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzE1Nw=="}, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDgxNzEzOnYy", "diffSide": "RIGHT", "path": "test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzowMToxNlrOGadJJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo1Nzo1NFrOGalKwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzYzNw==", "bodyText": "can this 'toString()' return a null value ?", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430393637", "createdAt": "2020-05-26T13:01:16Z", "author": {"login": "eolivelli"}, "path": "test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java", "diffHunk": "@@ -25,15 +24,13 @@ public void testSerialize() {\n                 .issuedAtTime(Instant.now().getEpochSecond())\n                 .expirationTime(Instant.now().plusSeconds(50).getEpochSecond())\n                 .build();\n-\n-        String json = new Gson().toJson(jwtBody);\n-        assertNotNull(json);\n+        assertNotNull(jwtBody.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNTEyMQ==", "bodyText": "I've modified the assertions to make them more relevant, given the change.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430525121", "createdAt": "2020-05-26T15:57:54Z", "author": {"login": "ravisharda"}, "path": "test/testcommon/src/test/java/io/pravega/test/common/JwtBodyTest.java", "diffHunk": "@@ -25,15 +24,13 @@ public void testSerialize() {\n                 .issuedAtTime(Instant.now().getEpochSecond())\n                 .expirationTime(Instant.now().plusSeconds(50).getEpochSecond())\n                 .build();\n-\n-        String json = new Gson().toJson(jwtBody);\n-        assertNotNull(json);\n+        assertNotNull(jwtBody.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MzYzNw=="}, "originalCommit": {"oid": "023537f0a445c403c8ec3fb4242228f7c351c2ba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzU0NDU5OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzoyNjoyM1rOGa4MVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzozNDozN1rOGa4TNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzNjgyMQ==", "bodyText": "StandardCharsets.UTF8", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430836821", "createdAt": "2020-05-27T03:26:23Z", "author": {"login": "shrids"}, "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "diffHunk": "@@ -29,8 +32,9 @@ public void testExtractExpirationTimeReturnsNullIfExpInBodyIsNotSet() {\n         //        \"aud\": \"segmentstore\",\n         //        \"iat\": 1516239022\n         //     }\n+        JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build(),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes(StandardCharsets.US_ASCII)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f2b04a7dcc913c347c13fff2fbf626bf118183"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzODU4Mw==", "bodyText": "Since ASCII is a subset of UTF-8 and every ASCII text is also a UTF-8 text, and we use only ASCII characters in this particular test, I think it should be OK to use the specified charset.", "url": "https://github.com/pravega/pravega/pull/4812#discussion_r430838583", "createdAt": "2020-05-27T03:34:37Z", "author": {"login": "ravisharda"}, "path": "common/src/test/java/io/pravega/common/security/JwtUtilsTest.java", "diffHunk": "@@ -29,8 +32,9 @@ public void testExtractExpirationTimeReturnsNullIfExpInBodyIsNotSet() {\n         //        \"aud\": \"segmentstore\",\n         //        \"iat\": 1516239022\n         //     }\n+        JwtBody jwtBody = JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build();\n         String token = String.format(\"%s.%s.%s\", \"base64-encoded-header\",\n-                JwtBody.builder().subject(\"1234567890\").audience(\"segmentstore\").issuedAtTime(1516239022L).build(),\n+                Base64.getEncoder().encodeToString(jwtBody.toString().getBytes(StandardCharsets.US_ASCII)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzNjgyMQ=="}, "originalCommit": {"oid": "27f2b04a7dcc913c347c13fff2fbf626bf118183"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4349, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}