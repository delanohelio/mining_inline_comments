{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyODgyOTUz", "number": 5252, "title": "Issue 5162: (SegmentStore) Table Segment Throttling and bug fixes", "bodyText": "Change log description\n\nAdded per-segment throttling for each Table Segment. Limiting to 128MB max unindexed data. This is supported by an Async Semaphore construct that can allow/queue tasks with given number of credits/permits.\nUpdated TableSegmentImpl to use two connections: one for writing and one for reading (initialized lazily on demand).\nFixed a bug in SortedKeyIndex where it would be possible to block the StorageWriter by continuous failed index updates.\nAdded KVT support to the Self Tester tool.\n\nPurpose of the change\nFixes #5162.\nFixes #5251.\nWhat the code does\n\nAsyncSemaphore\n\nSimilarly to the Semaphore synchronization primitive the AsyncSemaphore defines a maximum number of allowed credits (permits) and each async task that is run though it can request a number of such credits to be used.\n\nIf there are sufficient credits, it is allowed through and the credits recorded.\nIf insufficient credits, the task is queued (in order) and will be eligible for execution once there are sufficient credits available.\n\n\nThe credits are restored via a separate API  (and not when the task completes). See below why this was done this way.\nThe task also has a \"force\" mode, where a task can be forced through. If set, that task is allowed to execute (regardless of whether there are credits or not) and it will still cause credits to increase.\n\n\nTable Segment Throttling\n\nEach Table Segment has an AsyncSemaphore attached to it.\n\nThe maximum number of credits is 12810241024 (128MB outstanding).\n\n\nEach external update (update or removal) will require a number of credits equal to that update's serialization length.\n\nCredits are requested when the update is about to be processed (in the index), and the task will be queued up (in the AsyncSemapthore) if not enough credits are available.\n\n\nThe WriterTableProcessor (that performs background indexing; driven by the StorageWriter) will return credits back to the AsyncSemaphore once it has indexed said updates.\nInternal updates (the Sorted Index B+TreeSet) are exempt from this credit quota. While the index updates do acquire credits, they will not be subject to blocking.\n\nThe  Sorted Index is updated from within the WriterTableProcessor - if it had been subject to throttling, the indexer would essentially block itself. Hence we need this exemption, only for this purpose. It is up to the ContainerTableExtensionImpl to properly label each update as Internal or External - depending on where it was coming from.\n\n\n\n\nConnection Pausing/Resuming\n\nIncluded the TableSegment updates and removals to the global ConnectionTracker (that was used for appends). It is now tracking both outstanding appends and updates/removals to Table Segments.\nThe same limits as before apply: 512MB per process limit, with 128MB per connection limit.\nNo changes were required on the client since the TCP backpressure that results due to the connections being paused correctly causes the Client to block synchronously when sending requests.\n\n\nTableSegmentImpl\n\nDue to connection pausing/resuming, it is quite plausible that read requests may be unintentionally blocked from being sent through if the same TableSegmentImpl instance is used for both reads and updates, and the updates are throttled.\nThis has been alleviated by establishing a connection for writing (\"writeContext\") used by put and remove and one for reading (\"readContext\") used for get and iterate. Both are lazily created on the first request and request different connections from the connection pool.\n\nNote: since this uses a connection pool, it may well be that both will end up using the same connection; however the Connection Pool configuration is out of scope for TableSegmentImpl as it is set on the ConnectionFactory constructor.\n\n\n\n\nIssue #5251 - Sorted Index Updates too large\n\nAdded a special, internal-only API to the ContainerTableExtensionImpl that enables non-atomic, multi-key updates.\nIf an update is rejected because it's too large, it will be broken down in equal halves and reattempted, in sequential order (first half first, followed by the second half). Please see #5251 as to why this won't cause the sorted index to become inconsistent if we get a system failure somewhere in the middle and this is only persisted partially.\n\n\nOther changes\n\nUpdated SelfTester to include tests for client-side KeyValue Tables.\n\n\n\nHow to verify it\nLots of new unit tests added to verify new functionality.", "createdAt": "2020-10-13T21:46:19Z", "url": "https://github.com/pravega/pravega/pull/5252", "merged": true, "mergeCommit": {"oid": "015564c5085fd23cd6e73566da6094b65a29ad69"}, "closed": true, "closedAt": "2021-03-23T10:49:37Z", "author": {"login": "andreipaduroiu"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOXp_BgH2gAyNTAyODgyOTUzOjYxMzI0Y2UwN2NjYTU4MmVkZTUzYjFhNGEwNmFjMDM1ZGY3MWQ4NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeF6ZhlgH2gAyNTAyODgyOTUzOmJmMDJiODk3MmMyZmVhMTM5ZDBiMjE4MmRlMzM4OTFkZWFiMTc5MmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "61324ce07cca582ede53b1a4a06ac035df71d860", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/61324ce07cca582ede53b1a4a06ac035df71d860", "committedDate": "2020-10-01T20:45:51Z", "message": "Throttling Table Segment updates and removals.\nIntroduced AsyncSemaphore.\nChanged ContainerKeyIndex.MAX_TAIL_CACHE_PRE_INDEX_LENGTH to 128MB.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26974f811b7cbffb26408dce67d2aeb8d8cfbbc0", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/26974f811b7cbffb26408dce67d2aeb8d8cfbbc0", "committedDate": "2020-10-01T22:06:44Z", "message": "Minor fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f5540464192a698a94e7c408289bae7c6346765", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/3f5540464192a698a94e7c408289bae7c6346765", "committedDate": "2020-10-02T00:04:50Z", "message": "Wiring up ConnectionTracker into PravegaRequestProcessor for Table Segment Updates and Removals.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79a1f394ae20aff3c0ec4bf1bfe93c6294be2e48", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/79a1f394ae20aff3c0ec4bf1bfe93c6294be2e48", "committedDate": "2020-10-02T15:38:32Z", "message": "Unit tests for PravegaRequestProcessor and TrackedConnection.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "892089c7aad326811ff69f5bd4f90ced365badb2", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/892089c7aad326811ff69f5bd4f90ced365badb2", "committedDate": "2020-10-08T19:14:09Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0219165b77c9b2df7b9f44a782de376cc180d992", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/0219165b77c9b2df7b9f44a782de376cc180d992", "committedDate": "2020-10-08T22:39:32Z", "message": "Bug fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98713fbcbcf891da080589d2bbb81b90a48bfc1a", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/98713fbcbcf891da080589d2bbb81b90a48bfc1a", "committedDate": "2020-10-08T23:33:34Z", "message": "Refactored ContainerKeyIndex and ContainerTableExtensionImpl to accept a TableExtensionConfig object via the constructor. This should aid in customizing various values for testing purposes.\nMinor refactorings required in various unit tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7bf5c8bbab1e381a7382ba920565d5d3e888804", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/d7bf5c8bbab1e381a7382ba920565d5d3e888804", "committedDate": "2020-10-09T18:07:37Z", "message": "Added an exemption for internal requests from throttling.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b14259d85a8659dae0874c4aeb6ecd30c04e174", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/4b14259d85a8659dae0874c4aeb6ecd30c04e174", "committedDate": "2020-10-12T17:50:05Z", "message": "Supporting client-side KVTs in Self Tester.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7665d392152996acdceccfd29d18e1909636632", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c7665d392152996acdceccfd29d18e1909636632", "committedDate": "2020-10-12T19:53:23Z", "message": "TableConsumer enable/disable.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea2ee116ff770607ca534c9d7f4cb2ff1cf4f43a", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/ea2ee116ff770607ca534c9d7f4cb2ff1cf4f43a", "committedDate": "2020-10-12T20:22:22Z", "message": "Mock optimizations.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "badb0b8cef3306ffa2135bdf2a99bb73c0433252", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/badb0b8cef3306ffa2135bdf2a99bb73c0433252", "committedDate": "2020-10-13T01:17:32Z", "message": "Fixed a bug where the SegmentSortedKeyIndexImpl could block the WriterTableProcessor by consistenly trying to update more entries than the ContainerTableExtensionImpl would allow (exceeds EntrySerializer.MAX_BATCH_SIZE).\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c22435d304c7a2986803812690f3dc8ef15477", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c8c22435d304c7a2986803812690f3dc8ef15477", "committedDate": "2020-10-13T21:15:29Z", "message": "Minor fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b3f054677b6acc5bb83fbd428a0fafee7a5c9f", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/84b3f054677b6acc5bb83fbd428a0fafee7a5c9f", "committedDate": "2020-10-13T21:22:37Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling\n\n# Conflicts:\n#\tsegmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/WriterTableProcessor.java\n#\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/TableContext.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9335c9c4493cb379fa8074d9cff27d339ae0ce17", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/9335c9c4493cb379fa8074d9cff27d339ae0ce17", "committedDate": "2020-10-14T16:11:07Z", "message": "TableSegmentImpl uses 2 connections: one for writing and one for reading.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec56082d710a92655c12578e7d25269a19371109", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/ec56082d710a92655c12578e7d25269a19371109", "committedDate": "2020-10-22T00:00:48Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cef5e8b9fd3eeed5836cdbbce6bfa49827c0668", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/4cef5e8b9fd3eeed5836cdbbce6bfa49827c0668", "committedDate": "2020-10-27T17:31:37Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abf7ed98c3c3fdcb1d30cbd9ca0ffba0e85a0896", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/abf7ed98c3c3fdcb1d30cbd9ca0ffba0e85a0896", "committedDate": "2020-10-28T17:13:48Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling\n\n# Conflicts:\n#\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImplTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea99fc0a75b701d53088f38be5206e02b804255", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/aea99fc0a75b701d53088f38be5206e02b804255", "committedDate": "2020-10-28T17:14:59Z", "message": "Build fix as a result of previous merge.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6623fdeb1e35a03fa96e14e7837b67491fd3bb6", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/e6623fdeb1e35a03fa96e14e7837b67491fd3bb6", "committedDate": "2020-10-28T17:15:13Z", "message": "Merge remote-tracking branch 'ap/issue-5162-table-segment-throttling' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTYwODQ5", "url": "https://github.com/pravega/pravega/pull/5252#pullrequestreview-522960849", "createdAt": "2020-11-04T00:06:42Z", "commit": {"oid": "e6623fdeb1e35a03fa96e14e7837b67491fd3bb6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowNjo0MlrOHtEy_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDowNjo0MlrOHtEy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNjU1OA==", "bodyText": "did not understand why multiplied by 4", "url": "https://github.com/pravega/pravega/pull/5252#discussion_r517026558", "createdAt": "2020-11-04T00:06:42Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/TableExtensionConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.server.tables;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import io.pravega.segmentstore.contracts.Attributes;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.tables.TableAttributes;\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeoutException;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * Configuration for {@link ContainerTableExtensionImpl} and sub-components.\n+ */\n+@Data\n+@Builder\n+class TableExtensionConfig {\n+    /**\n+     * The maximum unindexed length ({@link SegmentProperties#getLength() - {@link TableAttributes#INDEX_OFFSET}}) of a\n+     * Segment for which {@link ContainerKeyIndex} {@code triggerCacheTailIndex} can be invoked.\n+     */\n+    @Builder.Default\n+    private int maxTailCachePreIndexLength = EntrySerializer.MAX_BATCH_SIZE * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6623fdeb1e35a03fa96e14e7837b67491fd3bb6"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d336a270763757d975742e33aaf36aa5e60ead4e", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/d336a270763757d975742e33aaf36aa5e60ead4e", "committedDate": "2020-11-05T23:39:45Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling\n\n# Conflicts:\n#\tsegmentstore/server/src/main/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImpl.java\n#\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/ContainerTableExtensionImplTests.java\n#\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/TableContext.java\n#\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/TableEntryDeltaIteratorTests.java\n#\ttest/integration/src/main/java/io/pravega/test/integration/selftest/adapters/InProcessMockClientAdapter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c796877d2a06d903cefa241bc3d4bbfe1e5f7eb", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/3c796877d2a06d903cefa241bc3d4bbfe1e5f7eb", "committedDate": "2020-11-05T23:46:04Z", "message": "Post-merge build fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e80748bb8ba99452e93e62da9ea9378313dee58", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/1e80748bb8ba99452e93e62da9ea9378313dee58", "committedDate": "2020-11-05T23:50:26Z", "message": "Post-build merge fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b438989d7c8345e4fae19d55c9993d876074f22", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/1b438989d7c8345e4fae19d55c9993d876074f22", "committedDate": "2020-11-07T02:48:43Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTcxNjU2", "url": "https://github.com/pravega/pravega/pull/5252#pullrequestreview-529571656", "createdAt": "2020-11-12T23:02:36Z", "commit": {"oid": "1b438989d7c8345e4fae19d55c9993d876074f22"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzowMjozNlrOHySSOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMzowMzo0MVrOHySTsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MDQyNA==", "bodyText": "I feel like this should take a threadpool to run the tasks on. I seems a bit strange that they get run in the thread that calls release.", "url": "https://github.com/pravega/pravega/pull/5252#discussion_r522490424", "createdAt": "2020-11-12T23:02:36Z", "author": {"login": "tkaitchuck"}, "path": "common/src/main/java/io/pravega/common/concurrent/AsyncSemaphore.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.concurrent;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A synchronization primitive that allows executing arbitrary (concurrent) tasks, where each task requires a well-known\n+ * number of credits, subject to a total number of credits being available. Each task's successful execution will \"borrow\"\n+ * its share of credits, and a task cannot execute if the number of credits available is insufficient. Credits may be\n+ * restored externally using the {@link #release} method.\n+ *\n+ * This is similar to {@link java.util.concurrent.Semaphore}, except that this class allows for asynchronous processing\n+ * and each task can request an arbitrary number of credits. It can be useful in solving problems making use of the\n+ * Leaky Bucket Algorithm (https://en.wikipedia.org/wiki/Leaky_bucket).\n+ */\n+@ThreadSafe\n+@Slf4j\n+public class AsyncSemaphore implements AutoCloseable {\n+    //region Members\n+\n+    private final long totalCredits;\n+    private final String logId;\n+    @GuardedBy(\"queue\")\n+    private long usedCredits;\n+    @GuardedBy(\"queue\")\n+    private final ArrayDeque<PendingTask> queue;\n+    @GuardedBy(\"queue\")\n+    private boolean closed;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link AsyncSemaphore} class.\n+     *\n+     * @param totalCredits Total number of available credits.\n+     * @param usedCredits  Initial number of used credits.\n+     * @param logId        A log-friendly identifier for this {@link AsyncSemaphore}.\n+     */\n+    public AsyncSemaphore(long totalCredits, long usedCredits, String logId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b438989d7c8345e4fae19d55c9993d876074f22"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ5MDgwMA==", "bodyText": "It would be good if we could automate calling this so that the caller cannot forget. IE by chaining it's invocation on the future returned for example.", "url": "https://github.com/pravega/pravega/pull/5252#discussion_r522490800", "createdAt": "2020-11-12T23:03:41Z", "author": {"login": "tkaitchuck"}, "path": "common/src/main/java/io/pravega/common/concurrent/AsyncSemaphore.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.concurrent;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A synchronization primitive that allows executing arbitrary (concurrent) tasks, where each task requires a well-known\n+ * number of credits, subject to a total number of credits being available. Each task's successful execution will \"borrow\"\n+ * its share of credits, and a task cannot execute if the number of credits available is insufficient. Credits may be\n+ * restored externally using the {@link #release} method.\n+ *\n+ * This is similar to {@link java.util.concurrent.Semaphore}, except that this class allows for asynchronous processing\n+ * and each task can request an arbitrary number of credits. It can be useful in solving problems making use of the\n+ * Leaky Bucket Algorithm (https://en.wikipedia.org/wiki/Leaky_bucket).\n+ */\n+@ThreadSafe\n+@Slf4j\n+public class AsyncSemaphore implements AutoCloseable {\n+    //region Members\n+\n+    private final long totalCredits;\n+    private final String logId;\n+    @GuardedBy(\"queue\")\n+    private long usedCredits;\n+    @GuardedBy(\"queue\")\n+    private final ArrayDeque<PendingTask> queue;\n+    @GuardedBy(\"queue\")\n+    private boolean closed;\n+\n+    //endregion\n+\n+    //region Constructor\n+\n+    /**\n+     * Creates a new instance of the {@link AsyncSemaphore} class.\n+     *\n+     * @param totalCredits Total number of available credits.\n+     * @param usedCredits  Initial number of used credits.\n+     * @param logId        A log-friendly identifier for this {@link AsyncSemaphore}.\n+     */\n+    public AsyncSemaphore(long totalCredits, long usedCredits, String logId) {\n+        Preconditions.checkArgument(totalCredits > 0, \"totalCredits must be a positive integer\");\n+        Preconditions.checkArgument(usedCredits >= 0, \"usedCredits must be a non-negative integer\");\n+        this.totalCredits = totalCredits;\n+        this.usedCredits = usedCredits;\n+        this.logId = logId;\n+        this.queue = new ArrayDeque<>();\n+        this.closed = false;\n+    }\n+\n+    //endregion\n+\n+    //region AutoCloseable Implementation\n+\n+    @Override\n+    public void close() {\n+        List<PendingTask> toCancel = null;\n+        synchronized (this.queue) {\n+            if (!this.closed) {\n+                toCancel = new ArrayList<>(this.queue);\n+                this.queue.clear();\n+                this.usedCredits = 0;\n+                this.closed = true;\n+            }\n+        }\n+\n+        if (toCancel != null && !toCancel.isEmpty()) {\n+            log.debug(\"AsyncSemaphore[{}]: Closing. Cancelling {} task(s).\", logId, toCancel.size());\n+            toCancel.forEach(task -> task.result.cancel(true));\n+        }\n+    }\n+\n+    //endregion\n+\n+    //region Operations\n+\n+    /**\n+     * Executes the given task which requires the given number of credits.\n+     *\n+     * If there are sufficient credits available for this task to run, it will be invoked synchronously and the returned\n+     * result is directly provided by the given task.\n+     *\n+     * If there are insufficient credits available for this task to run, it will be queued up and executed when credits\n+     * become available. There is no prioritization of queued tasks - they are triggered in the order in which they\n+     * are queued up.\n+     *\n+     * If the {@code force} flag is set, then the task will be invoked synchronously, even if there are insufficient\n+     * credits. In this case, the {@link #getUsedCredits()} will exceed the max allowed credits and no other (non-forced)\n+     * task will be allowed to execute until {@link #getUsedCredits()} falls below the max allowed.\n+     *\n+     * A task will allocate the requested credits when it is triggered. If the task fails (synchronously or asynchronously),\n+     * then the requested credits are automatically released back into the pool. If the task succeeds, the credits will\n+     * remain.\n+     *\n+     * @param task    A {@link Supplier} that, when invoked, will execute the task.\n+     * @param credits The number of credits this task requires.\n+     * @param force   If true, the task will be executed synchronously regardless of how many credits are available. The\n+     *                task's credits are still recorded in this case.\n+     * @param <T>     Return type.\n+     * @return A CompletableFuture that, when completed, will contain the result of the executed task. If the task failed\n+     * or was rejected (i.e., due to {@link AsyncSemaphore} closing), it will be failed with the appropriate exception.\n+     */\n+    public <T> CompletableFuture<T> run(@NonNull Supplier<CompletableFuture<T>> task, long credits, boolean force) {\n+        Preconditions.checkArgument(credits >= 0 && credits <= this.totalCredits,\n+                \"credits must be a non-negative number smaller than or equal to %s.\", this.totalCredits);\n+\n+        PendingTask<T> pt;\n+        synchronized (this.queue) {\n+            Exceptions.checkNotClosed(this.closed, this);\n+            if (force || canExecute(credits)) {\n+                pt = null;\n+                this.usedCredits += credits;\n+                log.trace(\"AsyncSemaphore[{}]: Task run. Credits={}, TotalUsedCredits={}, Forced={}.\", this.logId, credits, this.usedCredits, force);\n+            } else {\n+                // Insufficient credits; need to queue up and execute when more becomes available.\n+                pt = new PendingTask<>(credits, task);\n+                this.queue.addLast(pt);\n+                log.debug(\"AsyncSemaphore[{}]: Task blocked. Credits={}, TotalUsedCredits={}, QueueSize={}.\",\n+                        this.logId, credits, this.usedCredits, this.queue.size());\n+            }\n+        }\n+\n+        if (pt == null) {\n+            // We have more credits than what this task requires. Execute now without queuing.\n+            return execute(task, credits);\n+        } else {\n+            // This wil be completed when its associated task is executed.\n+            return pt.result;\n+        }\n+    }\n+\n+    /**\n+     * Releases a number of credits back into the pool and initiates the execution of any pending tasks that are now\n+     * eligible to run.\n+     *\n+     * @param credits The number of credits to release. This number will be capped at the number of currently used\n+     *                credits ({@link #getUsedCredits()}).\n+     */\n+    public void release(long credits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b438989d7c8345e4fae19d55c9993d876074f22"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTg1MzQ0", "url": "https://github.com/pravega/pravega/pull/5252#pullrequestreview-529585344", "createdAt": "2020-11-12T23:27:39Z", "commit": {"oid": "1b438989d7c8345e4fae19d55c9993d876074f22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87d13a180dda4795552848c5efec71371f313f1", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/e87d13a180dda4795552848c5efec71371f313f1", "committedDate": "2020-11-16T17:36:48Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8e69a823044fedcf159756e55d2458db35b8614", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c8e69a823044fedcf159756e55d2458db35b8614", "committedDate": "2021-02-02T19:01:58Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling\n\n# Conflicts:\n#\tclient/src/test/java/io/pravega/client/tables/impl/TableSegmentImplTest.java\n#\tsegmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/ContainerKeyIndexTests.java\n#\ttest/integration/src/main/java/io/pravega/test/integration/selftest/adapters/AppendProcessorAdapter.java\n#\ttest/integration/src/main/java/io/pravega/test/integration/selftest/adapters/InProcessMockClientAdapter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a587e540fda931304484b75244756b38122a6f19", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/a587e540fda931304484b75244756b38122a6f19", "committedDate": "2021-02-02T19:08:25Z", "message": "Merge fixes.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c1937a6b6b3b8ef9173c8066a76969ba10277d3", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/2c1937a6b6b3b8ef9173c8066a76969ba10277d3", "committedDate": "2021-02-02T21:34:47Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7bed93e406788c9912a689e563dff5d98fe4c16", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c7bed93e406788c9912a689e563dff5d98fe4c16", "committedDate": "2021-02-02T21:37:11Z", "message": "Checkstyle.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97fbe3f9df629d68caf1a38bb134ed81997fd0df", "author": {"user": {"login": "tkaitchuck", "name": "Tom Kaitchuck"}}, "url": "https://github.com/pravega/pravega/commit/97fbe3f9df629d68caf1a38bb134ed81997fd0df", "committedDate": "2021-02-16T01:04:07Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393c2dcb834ddf026d46388fdc9c75ca44e55dd5", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/393c2dcb834ddf026d46388fdc9c75ca44e55dd5", "committedDate": "2021-02-25T17:27:37Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2a2a2fe228334b9ba593c6548a69a35cf8f9d82", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c2a2a2fe228334b9ba593c6548a69a35cf8f9d82", "committedDate": "2021-02-26T01:00:56Z", "message": "Fixing merge problem.\nSelfTester - respecting conditional updates for table segment tests.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894e87b9a8c4205a4a7c1bb5c9b20d67d3081d0b", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/894e87b9a8c4205a4a7c1bb5c9b20d67d3081d0b", "committedDate": "2021-02-26T22:25:48Z", "message": "Fixing SelfTestRunner\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d375341e9ef610585b4a0c8f53398f61a2e49060", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/d375341e9ef610585b4a0c8f53398f61a2e49060", "committedDate": "2021-03-09T22:21:01Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4036295f1687a84429f61a1febdee26e65eca2c4", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/4036295f1687a84429f61a1febdee26e65eca2c4", "committedDate": "2021-03-09T22:43:43Z", "message": "Fixed a bug with compaction and collisions.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d678156efd997ab9364524163e92a8e2820960", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/92d678156efd997ab9364524163e92a8e2820960", "committedDate": "2021-03-10T00:19:37Z", "message": "build fix.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df041e134bf5bf437cc8af2a3b66ed6703ea440f", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/df041e134bf5bf437cc8af2a3b66ed6703ea440f", "committedDate": "2021-03-15T16:29:13Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8330d71f30a4c234aa0661a4d449f190d2f89b53", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/8330d71f30a4c234aa0661a4d449f190d2f89b53", "committedDate": "2021-03-15T16:55:51Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb20c3ac3c989bf757194b52f984ff817135f863", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/fb20c3ac3c989bf757194b52f984ff817135f863", "committedDate": "2021-03-17T20:57:10Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f992f75c3d2eb751f8a88c49075276b3f41756", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/d1f992f75c3d2eb751f8a88c49075276b3f41756", "committedDate": "2021-03-23T08:51:55Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d203cc22c4a69a869051b8d0cc48ae3baa6b4098", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/d203cc22c4a69a869051b8d0cc48ae3baa6b4098", "committedDate": "2021-03-23T08:55:21Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf02b8972c2fea139d0b2182de33891deab1792a", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/bf02b8972c2fea139d0b2182de33891deab1792a", "committedDate": "2021-03-23T10:20:23Z", "message": "Merge branch 'master' into issue-5162-table-segment-throttling"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3905, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}