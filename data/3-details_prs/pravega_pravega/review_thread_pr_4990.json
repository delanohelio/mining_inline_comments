{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzgyNDEz", "number": 4990, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODo0MFrOETOIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyODoyMVrOETOxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg5OTU2OnYy", "diffSide": "RIGHT", "path": "controller/src/main/java/io/pravega/controller/server/ControllerServiceStarter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODo0MFrOG41IWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxNzoxNlrOG49dHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzkyOA==", "bodyText": "Why this change?", "url": "https://github.com/pravega/pravega/pull/4990#discussion_r462243928", "createdAt": "2020-07-29T11:58:40Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/ControllerServiceStarter.java", "diffHunk": "@@ -240,12 +240,13 @@ protected void startUp() {\n             streamStore = streamMetadataStoreRef.orElse(StreamStoreFactory.createStore(storeClient, segmentHelper, authHelper, controllerExecutor));\n \n             streamMetadataTasks = new StreamMetadataTasks(streamStore, bucketStore, taskMetadataStore,\n-                    segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), authHelper, requestTracker);\n+                    segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), authHelper, requestTracker, \n+                    serviceConfig.getRetentionFrequency().toMillis());\n             streamTransactionMetadataTasks = new StreamTransactionMetadataTasks(streamStore,\n                     segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), serviceConfig.getTimeoutServiceConfig(), authHelper);\n \n             BucketServiceFactory bucketServiceFactory = new BucketServiceFactory(host.getHostId(), bucketStore, 1000);\n-            Duration executionDurationRetention = Duration.ofMinutes(Config.MINIMUM_RETENTION_FREQUENCY_IN_MINUTES);\n+            Duration executionDurationRetention = serviceConfig.getRetentionFrequency();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "574741b6a9a4ddb35b382e92806ab680f14347cd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI3ODkzNA==", "bodyText": "we have made these classes take the value from service config instead of the static value from the Config.java. This is to make it test driven so that we can inject a smaller time to test the behaviour in timebound fashion.", "url": "https://github.com/pravega/pravega/pull/4990#discussion_r462278934", "createdAt": "2020-07-29T13:00:39Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/ControllerServiceStarter.java", "diffHunk": "@@ -240,12 +240,13 @@ protected void startUp() {\n             streamStore = streamMetadataStoreRef.orElse(StreamStoreFactory.createStore(storeClient, segmentHelper, authHelper, controllerExecutor));\n \n             streamMetadataTasks = new StreamMetadataTasks(streamStore, bucketStore, taskMetadataStore,\n-                    segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), authHelper, requestTracker);\n+                    segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), authHelper, requestTracker, \n+                    serviceConfig.getRetentionFrequency().toMillis());\n             streamTransactionMetadataTasks = new StreamTransactionMetadataTasks(streamStore,\n                     segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), serviceConfig.getTimeoutServiceConfig(), authHelper);\n \n             BucketServiceFactory bucketServiceFactory = new BucketServiceFactory(host.getHostId(), bucketStore, 1000);\n-            Duration executionDurationRetention = Duration.ofMinutes(Config.MINIMUM_RETENTION_FREQUENCY_IN_MINUTES);\n+            Duration executionDurationRetention = serviceConfig.getRetentionFrequency();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzkyOA=="}, "originalCommit": {"oid": "574741b6a9a4ddb35b382e92806ab680f14347cd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4MDMxOA==", "bodyText": "Ok", "url": "https://github.com/pravega/pravega/pull/4990#discussion_r462380318", "createdAt": "2020-07-29T15:17:16Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/ControllerServiceStarter.java", "diffHunk": "@@ -240,12 +240,13 @@ protected void startUp() {\n             streamStore = streamMetadataStoreRef.orElse(StreamStoreFactory.createStore(storeClient, segmentHelper, authHelper, controllerExecutor));\n \n             streamMetadataTasks = new StreamMetadataTasks(streamStore, bucketStore, taskMetadataStore,\n-                    segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), authHelper, requestTracker);\n+                    segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), authHelper, requestTracker, \n+                    serviceConfig.getRetentionFrequency().toMillis());\n             streamTransactionMetadataTasks = new StreamTransactionMetadataTasks(streamStore,\n                     segmentHelper, controllerExecutor, eventExecutor, host.getHostId(), serviceConfig.getTimeoutServiceConfig(), authHelper);\n \n             BucketServiceFactory bucketServiceFactory = new BucketServiceFactory(host.getHostId(), bucketStore, 1000);\n-            Duration executionDurationRetention = Duration.ofMinutes(Config.MINIMUM_RETENTION_FREQUENCY_IN_MINUTES);\n+            Duration executionDurationRetention = serviceConfig.getRetentionFrequency();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzkyOA=="}, "originalCommit": {"oid": "574741b6a9a4ddb35b382e92806ab680f14347cd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjAwMzgyOnYy", "diffSide": "RIGHT", "path": "test/system/src/test/java/io/pravega/test/system/RetentionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyODoyMVrOG42Gtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoyODoyMVrOG42Gtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1OTg5NA==", "bodyText": "May be good to call this method retentionTestSizeAndTime()", "url": "https://github.com/pravega/pravega/pull/4990#discussion_r462259894", "createdAt": "2020-07-29T12:28:21Z", "author": {"login": "pbelgundi"}, "path": "test/system/src/test/java/io/pravega/test/system/RetentionTest.java", "diffHunk": "@@ -98,44 +106,60 @@ public void tearDown() {\n \n     @Test\n     public void retentionTest() throws Exception {\n-        final ClientConfig clientConfig = Utils.buildClientConfig(controllerURI);\n-        @Cleanup\n-        ConnectionFactory connectionFactory = new SocketConnectionFactoryImpl(clientConfig);\n-        ControllerImpl controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n-                                                       connectionFactory.getInternalExecutor());\n-        @Cleanup\n-        ClientFactoryImpl clientFactory = new ClientFactoryImpl(SCOPE, controller, connectionFactory);\n-        log.info(\"Invoking Writer test with Controller URI: {}\", controllerURI);\n-\n-        //create a writer\n-        @Cleanup\n-        EventStreamWriter<Serializable> writer = clientFactory.createEventWriter(STREAM,\n-                new JavaSerializer<>(),\n-                EventWriterConfig.builder().build());\n-\n-        //write an event\n-        String writeEvent = \"event\";\n-        writer.writeEvent(writeEvent);\n-        writer.flush();\n-        log.debug(\"Writing event: {} \", writeEvent);\n-\n-        //sleep for 5 mins\n-        Exceptions.handleInterrupted(() -> Thread.sleep(5 * 60 * 1000));\n-\n-        //create a reader\n-        ReaderGroupManager groupManager = ReaderGroupManager.withScope(SCOPE, clientConfig);\n-        groupManager.createReaderGroup(READER_GROUP, ReaderGroupConfig.builder().disableAutomaticCheckpoints().stream(Stream.of(SCOPE, STREAM)).build());\n-        EventStreamReader<String> reader = clientFactory.createReader(UUID.randomUUID().toString(),\n-                READER_GROUP,\n-                new JavaSerializer<>(),\n-                ReaderConfig.builder().build());\n-\n-        //verify reader functionality is unaffected post truncation\n-        String event = \"newEvent\";\n-        writer.writeEvent(event);\n-        log.info(\"Writing event: {}\", event);\n-        Assert.assertEquals(event, reader.readNextEvent(6000).getEvent());\n-\n-        log.debug(\"The stream is already truncated.Simple retention test passed.\");\n+        CompletableFuture.allOf(retentionTestTime(STREAM_TIME, false), retentionTestTime(STREAM_SIZE, true));\n+    }\n+    \n+    private CompletableFuture<Void> retentionTestTime(String streamName, boolean sizeBased) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "574741b6a9a4ddb35b382e92806ab680f14347cd"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4820, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}