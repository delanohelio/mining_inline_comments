{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDcyMjM4", "number": 4979, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo0OTo1OFrOER9kOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowNzoxN1rOEjXntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjY5OTQ0OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo0OTo1OFrOG29XHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMDo0OTo1OFrOG29XHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI4MTYyOQ==", "bodyText": "I'm not quite sure on the performance impact (if any) but certain properties about the Segment are needed to define some DeltaIteratorState instance. It did not seem feasible to be able to use the information acquired in ContainerTableExtensionImpl.newDeltaIterator as that would require several changes about the semantics of the iteration across several classes.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r460281629", "createdAt": "2020-07-24T20:49:58Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -838,6 +839,12 @@ public void readTableEntriesDelta(WireCommands.ReadTableEntriesDelta readTableEn\n         val timer = new Timer();\n         val result = new DeltaIteratorResult<BufferView, Map.Entry<WireCommands.TableKey, WireCommands.TableValue>, DeltaIteratorState>(\n                 segment.getBytes().length + WireCommands.TableEntriesRead.HEADER_BYTES);\n+        // Guards against two cases: an empty segment, or a starting position that exceeds the segment length.\n+        segmentStore.getStreamSegmentInfo(segment, TIMEOUT)\n+                .thenAccept(properties -> {\n+                    result.setState(TableEntryDeltaIterator.initialState(properties, fromPosition));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad468de588d5ea58a3449c5e948f08e26765f7e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjUzODM0OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMDoxNzowOVrOG6Z3Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMDoxNzowOVrOG6Z3Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg5NDMzOA==", "bodyText": "I chose to include a Class -> ErrorCode map because presumably we will need some translation logic to turn a given exception into some error code. Including this logic in here prevents a (potentially) continuously growing if/else-if block in PravegaRequestProcessor.handleException.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r463894338", "createdAt": "2020-08-01T00:17:09Z", "author": {"login": "co-jo"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeInt(errorCode.getCode());\n+            out.writeUTF(message);\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n+            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n+            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException\n+\n+            private static final Map<Integer, ErrorCode> OBJECTS_BY_CODE = new HashMap<>();\n+            private static final Map<Class, ErrorCode> OBJECTS_BY_CLASS = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181bd4fdbff035ae723ebb2240a67a3c949e85f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzI3Nzk2OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzozMjowMlrOG6fReA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNzozMjowMlrOG6fReA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk4Mjk2OA==", "bodyText": "While this may increase the risk of a NullPointerException, null appears to be a valid return for unknown causes (see: https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html#getCause--).", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r463982968", "createdAt": "2020-08-01T17:32:02Z", "author": {"login": "co-jo"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeInt(errorCode.getCode());\n+            out.writeUTF(message);\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181bd4fdbff035ae723ebb2240a67a3c949e85f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDc2Mzg2OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1NToyMFrOG680IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDo1NToyMFrOG680IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ2Njk3Nw==", "bodyText": "Message may be null. Be sure to account for that.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r464466977", "createdAt": "2020-08-03T14:55:20Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeInt(errorCode.getCode());\n+            out.writeUTF(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07862a60309cbd13856c326c64dfcf809ceedbff"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDgwMTc2OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTowNDoxMVrOG69LLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxODo1M1rOG6_8XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3Mjg3OQ==", "bodyText": "Here you are changing the behavior for this class. You should make sure that ErrorMessage only captures those exceptions that it can properly send a message back for, and let the rest fall down to this default behavior. We have a lot of code (on the other side of the Wire Protocol) that relies on these connections to be closed when something unexpected happens.\nIt is true that we will eventually want to \"fix\" that code to understand proper error codes, but that is not a task I believe you are willing to undertake now, are you? It's OK to file  follow up issue (not necessarily for yourself) to look at this new Wire Command and make any proper changes (like handling specific errors, etc.) - we can do that later.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r464472879", "createdAt": "2020-08-03T15:04:11Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -975,8 +975,9 @@ private Void handleException(long requestId, String segment, long offset, String\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n         } else {\n             logError(requestId, segment, operation, u);\n-            connection.close(); // Closing connection should reinitialize things, and hopefully fix the problem\n-            throw new IllegalStateException(\"Unknown exception.\", u);\n+            invokeSafely(connection::send,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07862a60309cbd13856c326c64dfcf809ceedbff"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODIzNg==", "bodyText": "Sure thing, thanks for pointing that out. I'll create an issue for addressing this.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r464518236", "createdAt": "2020-08-03T16:18:53Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -975,8 +975,9 @@ private Void handleException(long requestId, String segment, long offset, String\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n         } else {\n             logError(requestId, segment, operation, u);\n-            connection.close(); // Closing connection should reinitialize things, and hopefully fix the problem\n-            throw new IllegalStateException(\"Unknown exception.\", u);\n+            invokeSafely(connection::send,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3Mjg3OQ=="}, "originalCommit": {"oid": "07862a60309cbd13856c326c64dfcf809ceedbff"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI2Njk1OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MjoyNVrOHA3rPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MjoyNVrOHA3rPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NDIzOA==", "bodyText": "This may not necessarily be on a TableSegment. I'd remove that (leave the rest of the message as-is).", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470674238", "createdAt": "2020-08-14T14:52:25Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -973,6 +973,11 @@ private Void handleException(long requestId, String segment, long offset, String\n         } else if (u instanceof BadKeyVersionException) {\n             log.warn(requestId, \"Conditional update on Table segment '{}' failed due to bad key version.\", segment);\n             invokeSafely(connection::send, new WireCommands.TableKeyBadVersion(requestId, segment, clientReplyStackTrace), failureHandler);\n+        } else if (errorCodeExists(u)) {\n+            log.warn(requestId, \"Operation on Table segment '{}' failed due to a {}.\", segment, u.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI3MDIyOnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1MzoxN1rOHA3tSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODoyOTo1NlrOHA--Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NDc2MA==", "bodyText": "Is there a reason (for this PR) that IllegalStateException is also included here? The old behavior was that it would close the connection in this case.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470674760", "createdAt": "2020-08-14T14:53:17Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n+            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n+            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5Mzc3NA==", "bodyText": "That's a good question.. No.. Will remove.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470793774", "createdAt": "2020-08-14T18:29:56Z", "author": {"login": "co-jo"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, null),                                         // indicates un-specified (for backward compatibility\n+            ILLEGAL_ARGUMENT_EXCEPTION(0, IllegalArgumentException.class), // indicates an IllegalArgumentException\n+            ILLEGAL_STATE_EXCEPTION(1, IllegalStateException.class);       // indicates an IllegalStateException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NDc2MA=="}, "originalCommit": {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTI3Mzk2OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1NDoxN1rOHA3vqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNDo1NDoxN1rOHA3vqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NTM3MQ==", "bodyText": "You have 2 extra spaces here (before void and after throws. Same with the methods below.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r470675371", "createdAt": "2020-08-14T14:54:17Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessorTest.java", "diffHunk": "@@ -1017,6 +1017,72 @@ public void testGetTableEntries() throws Exception {\n         assertTrue(keyVersions.containsAll(getTableEntriesIteratorsResp.getEntries().getEntries().stream().map(e -> e.getKey().getKeyVersion()).collect(Collectors.toList())));\n     }\n \n+    @Test\n+    public  void testReadTableEntriesDeltaEmpty() throws  Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTU1Njg4OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo1NToxNVrOHCBg0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo1NToxNVrOHCBg0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4Mzk4NQ==", "bodyText": "I can see the numbers have not been kept organized as originally intended. However let's make an attempt to prevent it from getting worse. Let's make this one's code 61.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r471883985", "createdAt": "2020-08-18T02:55:15Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommandType.java", "diffHunk": "@@ -105,6 +105,8 @@\n     TABLE_ENTRIES_DELTA_READ(87, WireCommands.TableEntriesDeltaRead::readFrom),\n     READ_TABLE_ENTRIES_DELTA(88, WireCommands.ReadTableEntriesDelta::readFrom),\n \n+    ERROR_MESSAGE(89, WireCommands.ErrorMessage::readFrom),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTU2MDAzOnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo1Njo1OVrOHCBirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjo1Njo1OVrOHCBirA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg4NDQ2MA==", "bodyText": "This class should override isFailure to return true.\nAlso move this to be located next to AuthTokenCheckFailed.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r471884460", "createdAt": "2020-08-18T02:56:59Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -2339,6 +2339,75 @@ void releaseInternal() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972c1e096b3d039ac763b844ae724b3f0553f797"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzY2NTk3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1NjoxMFrOHOjz1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1NjoxMFrOHOjz1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyODgyMA==", "bodyText": "It should be enough to implement this once on FailingReplyProcessor; if you observe - all the classes where you overrode this method do more or less the same thing. You can just write it once.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r485028820", "createdAt": "2020-09-08T15:56:10Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -80,6 +83,18 @@ public void authTokenCheckFailed(WireCommands.AuthTokenCheckFailed authTokenChec\n             log.warn(\"Auth token check failed on segment {} with {}\", segmentId, authTokenCheckFailed);\n             closeConnection(new AuthenticationException(authTokenCheckFailed.toString()));\n         }\n+\n+        @Override\n+        public void errorMessage(WireCommands.ErrorMessage errorMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3189f95e3631c183f2ff0c7eb050aad521794ab"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzY3NDQxOnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1ODoxN1rOHOj5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1ODoxN1rOHOj5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMDE1Ng==", "bodyText": "Looks like this is not covered by unit tests. Please add unit tests for this class.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r485030156", "createdAt": "2020-09-08T15:58:17Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -1644,6 +1644,88 @@ public int getCode() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public RuntimeException getThrowableException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3189f95e3631c183f2ff0c7eb050aad521794ab"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzY3NTcwOnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1ODozNVrOHOj51A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1ODozNVrOHOj51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMDM1Ng==", "bodyText": "Please fix the comment indentation.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r485030356", "createdAt": "2020-09-08T15:58:35Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -1644,6 +1644,88 @@ public int getCode() {\n         }\n     }\n \n+    /**\n+     * A generic error response that encapsulates an error code (to be used for client-side processing) and an error message\n+     * describing the origin of the error. This should be used to describe general exceptions where limited information is required.\n+     */\n+    @Data\n+    public static final class ErrorMessage implements Reply, WireCommand {\n+        final WireCommandType type = WireCommandType.ERROR_MESSAGE;\n+        final long requestId;\n+        final String message;\n+        final ErrorCode errorCode;\n+\n+        @Override\n+        public void process(ReplyProcessor cp) throws UnsupportedOperationException {\n+            cp.errorMessage(this);\n+        }\n+\n+        @Override\n+        public void writeFields(DataOutput out) throws IOException {\n+            out.writeLong(requestId);\n+            out.writeUTF(message == null ? \"\" : message);\n+            out.writeInt(errorCode.getCode());\n+        }\n+\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n+            return new ErrorMessage(in.readLong(), in.readUTF(), ErrorCode.valueOf(in.readInt()));\n+        }\n+\n+        public RuntimeException getThrowableException() {\n+            switch (errorCode) {\n+                case ILLEGAL_ARGUMENT_EXCEPTION:\n+                    return new IllegalArgumentException(message);\n+                default:\n+                    return new RuntimeException(message);\n+            }\n+        }\n+\n+        @Override\n+        public boolean isFailure() {\n+            return true;\n+        }\n+\n+        public enum ErrorCode {\n+            UNSPECIFIED(-1, RuntimeException.class),                                         // indicates un-specified (for backward compatibility", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3189f95e3631c183f2ff0c7eb050aad521794ab"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk1NjEwOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNDo0N1rOHQsQyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNDo0N1rOHQsQyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NDQ1Ng==", "bodyText": "Please indent this line like the other ones above and below.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r487264456", "createdAt": "2020-09-11T20:04:47Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -59,6 +60,8 @@ public void process(Reply reply) {\n                 }\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n+            } else if (reply instanceof WireCommands.ErrorMessage) {\n+                    errorMessage((ErrorMessage) reply);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18a69d78a470e9a634edc5e758474dbbf0f635d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzk1OTc5OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDowNjoxNVrOHQsTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDoyODowMFrOHQs3kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NTAzNA==", "bodyText": "You don't need ? : here. Change == to != and return the result.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r487265034", "createdAt": "2020-09-11T20:06:15Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -983,6 +988,11 @@ private Void handleException(long requestId, String segment, long offset, String\n         return null;\n     }\n \n+    private boolean errorCodeExists(Throwable e) {\n+        val errorCode = WireCommands.ErrorMessage.ErrorCode.valueOf(e.getClass());\n+        return (errorCode == WireCommands.ErrorMessage.ErrorCode.UNSPECIFIED) ? false : true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18a69d78a470e9a634edc5e758474dbbf0f635d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI3NDM4NQ==", "bodyText": "\ud83e\udd26.. rookie mistake.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r487274385", "createdAt": "2020-09-11T20:28:00Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaRequestProcessor.java", "diffHunk": "@@ -983,6 +988,11 @@ private Void handleException(long requestId, String segment, long offset, String\n         return null;\n     }\n \n+    private boolean errorCodeExists(Throwable e) {\n+        val errorCode = WireCommands.ErrorMessage.ErrorCode.valueOf(e.getClass());\n+        return (errorCode == WireCommands.ErrorMessage.ErrorCode.UNSPECIFIED) ? false : true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI2NTAzNA=="}, "originalCommit": {"oid": "b18a69d78a470e9a634edc5e758474dbbf0f635d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIxODM0OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowMzoxMlrOHRrr3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowNDowOVrOHUW8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMzU4MA==", "bodyText": "This is not going to propagate up to the caller.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r488303580", "createdAt": "2020-09-15T00:03:12Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -59,6 +60,8 @@ public void process(Reply reply) {\n                 }\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n+            } else if (reply instanceof WireCommands.ErrorMessage) {\n+                errorMessage((ErrorMessage) reply);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3472393ea167749f36e614dc1a02cb50159787"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwOTUzOQ==", "bodyText": "I might be misunderstanding, but it seems to propagate properly on line 97 in RawClientTest.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r491109539", "createdAt": "2020-09-18T18:04:09Z", "author": {"login": "co-jo"}, "path": "client/src/main/java/io/pravega/client/connection/impl/RawClient.java", "diffHunk": "@@ -59,6 +60,8 @@ public void process(Reply reply) {\n                 }\n             } else if (reply instanceof WireCommands.WrongHost) {\n                 closeConnection(new ConnectionFailedException(reply.toString()));\n+            } else if (reply instanceof WireCommands.ErrorMessage) {\n+                errorMessage((ErrorMessage) reply);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMzU4MA=="}, "originalCommit": {"oid": "7f3472393ea167749f36e614dc1a02cb50159787"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIyMTUyOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowNDo0N1rOHRrttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1OTo1MVrOHTCK8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDA1Mw==", "bodyText": "This is not used. A request should be sent and the reply returned should be verified.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r488304053", "createdAt": "2020-09-15T00:04:47Z", "author": {"login": "tkaitchuck"}, "path": "client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java", "diffHunk": "@@ -78,6 +79,24 @@ public void testRequestReply() throws InterruptedException, ExecutionException,\n         assertEquals(reply, future.get());\n     }\n \n+    @Test\n+    public void testRecvErrorMessage() throws InterruptedException, ExecutionException, ConnectionFailedException {\n+        PravegaNodeUri endpoint = new PravegaNodeUri(\"localhost\", -1);\n+        @Cleanup\n+        MockConnectionFactoryImpl connectionFactory = new MockConnectionFactoryImpl();\n+        @Cleanup\n+        MockController controller = new MockController(endpoint.getEndpoint(), endpoint.getPort(), connectionFactory, true);\n+        ClientConnection connection = Mockito.mock(ClientConnection.class);\n+        connectionFactory.provideConnection(endpoint, connection);\n+        Segment segment = new Segment(\"scope\", \"testHello\", 0);\n+        @Cleanup\n+        RawClient rawClient = new RawClient(controller, connectionFactory, segment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3472393ea167749f36e614dc1a02cb50159787"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcyMDU2MQ==", "bodyText": "Instantiation the RawClient is required as it sets up the connection to provided the ReplyProcessor (A NullPointerException will be thrown otherwise). I chose not to actually send a request because of the complications of implicitly relying on segmentstore logic to throw back the expected error.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r489720561", "createdAt": "2020-09-16T19:59:51Z", "author": {"login": "co-jo"}, "path": "client/src/test/java/io/pravega/client/connection/impl/RawClientTest.java", "diffHunk": "@@ -78,6 +79,24 @@ public void testRequestReply() throws InterruptedException, ExecutionException,\n         assertEquals(reply, future.get());\n     }\n \n+    @Test\n+    public void testRecvErrorMessage() throws InterruptedException, ExecutionException, ConnectionFailedException {\n+        PravegaNodeUri endpoint = new PravegaNodeUri(\"localhost\", -1);\n+        @Cleanup\n+        MockConnectionFactoryImpl connectionFactory = new MockConnectionFactoryImpl();\n+        @Cleanup\n+        MockController controller = new MockController(endpoint.getEndpoint(), endpoint.getPort(), connectionFactory, true);\n+        ClientConnection connection = Mockito.mock(ClientConnection.class);\n+        connectionFactory.provideConnection(endpoint, connection);\n+        Segment segment = new Segment(\"scope\", \"testHello\", 0);\n+        @Cleanup\n+        RawClient rawClient = new RawClient(controller, connectionFactory, segment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDA1Mw=="}, "originalCommit": {"oid": "7f3472393ea167749f36e614dc1a02cb50159787"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIyNjE1OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowNzoxN1rOHRrwiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozOTo1OFrOHS7cUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDc3Ng==", "bodyText": "All of the classes that extend FailingReplyProcessor should be modifed to properly handle the error.", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r488304776", "createdAt": "2020-09-15T00:07:17Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java", "diffHunk": "@@ -204,4 +204,15 @@ public void tableEntriesRead(WireCommands.TableEntriesRead tableEntriesRead) {\n     public void tableEntriesDeltaRead(WireCommands.TableEntriesDeltaRead tableEntriesDeltaRead) {\n         throw new IllegalStateException(\"Unexpected operation: \" + tableEntriesDeltaRead);\n     }\n+\n+    @Override\n+    public void errorMessage(WireCommands.ErrorMessage errorMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3472393ea167749f36e614dc1a02cb50159787"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDMyMw==", "bodyText": "What constitutes 'properly handling the error?", "url": "https://github.com/pravega/pravega/pull/4979#discussion_r489610323", "createdAt": "2020-09-16T17:39:58Z", "author": {"login": "co-jo"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/FailingReplyProcessor.java", "diffHunk": "@@ -204,4 +204,15 @@ public void tableEntriesRead(WireCommands.TableEntriesRead tableEntriesRead) {\n     public void tableEntriesDeltaRead(WireCommands.TableEntriesDeltaRead tableEntriesDeltaRead) {\n         throw new IllegalStateException(\"Unexpected operation: \" + tableEntriesDeltaRead);\n     }\n+\n+    @Override\n+    public void errorMessage(WireCommands.ErrorMessage errorMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNDc3Ng=="}, "originalCommit": {"oid": "7f3472393ea167749f36e614dc1a02cb50159787"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4813, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}