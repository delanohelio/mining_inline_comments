{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Nzc2MDAw", "number": 4703, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzoxNjo0NVrODzEf5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzoxOToxNVrODzEhWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODc3NjY5OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/cache/DirectMemoryCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzoxNjo0NVrOGHfmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxODoyMVrOGIZxDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMDk4MA==", "bodyText": "RetryPolicy in common is built to do this.", "url": "https://github.com/pravega/pravega/pull/4703#discussion_r410510980", "createdAt": "2020-04-17T23:16:45Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/cache/DirectMemoryCache.java", "diffHunk": "@@ -399,15 +403,23 @@ private DirectMemoryBuffer getNextAvailableBuffer() {\n \n             // If we get here, there are no available buffers and we have allocated all the buffers we could. Notify\n             // any upstream listeners to attempt a cleanup (if possible).\n-        } while (++attempts <= MAX_CLEANUP_ATTEMPTS && tryCleanup());\n+            attempts++;\n+            tryCleanup(attempts);\n+        }\n \n         // Unable to reuse any existing buffer or find a new one to allocate and upstream code could not free up data.\n         throw new CacheFullException(String.format(\"%s full: %s.\", DirectMemoryCache.class.getSimpleName(), getState()));\n     }\n \n-    private boolean tryCleanup() {\n+    private void tryCleanup(int attempts) {\n         val c = this.tryCleanup.get();\n-        return c != null && c.get();\n+        if (c != null && !c.get()) {\n+            // Unable to clean up the cache. Wait a bit, then try again.\n+            int sleepMillis = attempts * this.retryDelayBaseMillis.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8374b8704e523be11aa00660a8aa720998133ad"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2Mzk1MA==", "bodyText": "That was my first choice, however Retry only retries on exceptions. Here I retry based on the response from a method.", "url": "https://github.com/pravega/pravega/pull/4703#discussion_r411463950", "createdAt": "2020-04-20T15:18:21Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/cache/DirectMemoryCache.java", "diffHunk": "@@ -399,15 +403,23 @@ private DirectMemoryBuffer getNextAvailableBuffer() {\n \n             // If we get here, there are no available buffers and we have allocated all the buffers we could. Notify\n             // any upstream listeners to attempt a cleanup (if possible).\n-        } while (++attempts <= MAX_CLEANUP_ATTEMPTS && tryCleanup());\n+            attempts++;\n+            tryCleanup(attempts);\n+        }\n \n         // Unable to reuse any existing buffer or find a new one to allocate and upstream code could not free up data.\n         throw new CacheFullException(String.format(\"%s full: %s.\", DirectMemoryCache.class.getSimpleName(), getState()));\n     }\n \n-    private boolean tryCleanup() {\n+    private void tryCleanup(int attempts) {\n         val c = this.tryCleanup.get();\n-        return c != null && c.get();\n+        if (c != null && !c.get()) {\n+            // Unable to clean up the cache. Wait a bit, then try again.\n+            int sleepMillis = attempts * this.retryDelayBaseMillis.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMDk4MA=="}, "originalCommit": {"oid": "e8374b8704e523be11aa00660a8aa720998133ad"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODc4MDQyOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/CacheManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzoxOToxNVrOGHfoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyMTozNlrOGIZ7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMTUzMQ==", "bodyText": "As usual when changing from course locking to fine locking make double sure there aren't code paths that implicitly assume that another thread isn't going to change something in the mean time. For example here one might make the assumption that currentGeneration would not change in the middle of a method, or that current and oldest generation are different or that older is newer that current etc.", "url": "https://github.com/pravega/pravega/pull/4703#discussion_r410511531", "createdAt": "2020-04-17T23:19:15Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/CacheManager.java", "diffHunk": "@@ -47,17 +49,15 @@\n @ThreadSafe\n public class CacheManager extends AbstractScheduledService implements AutoCloseable {\n     //region Members\n-\n+    private static final int CACHE_FULL_RETRY_BASE_MILLIS = 50;\n     private static final String TRACE_OBJECT_ID = \"CacheManager\";\n     @GuardedBy(\"lock\")\n     private final Collection<Client> clients;\n     private final ScheduledExecutorService executorService;\n-    @GuardedBy(\"lock\")\n-    private int currentGeneration;\n-    @GuardedBy(\"lock\")\n-    private int oldestGeneration;\n-    @GuardedBy(\"lock\")\n-    private CacheState lastCacheState;\n+    private final AtomicInteger currentGeneration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8374b8704e523be11aa00660a8aa720998133ad"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2NjUyNg==", "bodyText": "Agreed. In this class, the only thing changing the internal state is applyCachePolicyInternal, which is guarded by the lock. I decided to make all these fields AtomicXYZ because I didn't want to acquire some lock just to query them. To be clear, applyCachePolicyInternal modifies these values, but they are queried in other places as well, which should be OK for thread safety purposes.\nThe only exception to this rule is this.clients, which keeps track of all the Cache Manager's Clients, and is a collection that is modified when new segments are activated or evicted from memory, hence out of the control of the Cache Manager. However, no external APIs are invoked while using the clients lock, so no chance for deadlock there.", "url": "https://github.com/pravega/pravega/pull/4703#discussion_r411466526", "createdAt": "2020-04-20T15:21:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/CacheManager.java", "diffHunk": "@@ -47,17 +49,15 @@\n @ThreadSafe\n public class CacheManager extends AbstractScheduledService implements AutoCloseable {\n     //region Members\n-\n+    private static final int CACHE_FULL_RETRY_BASE_MILLIS = 50;\n     private static final String TRACE_OBJECT_ID = \"CacheManager\";\n     @GuardedBy(\"lock\")\n     private final Collection<Client> clients;\n     private final ScheduledExecutorService executorService;\n-    @GuardedBy(\"lock\")\n-    private int currentGeneration;\n-    @GuardedBy(\"lock\")\n-    private int oldestGeneration;\n-    @GuardedBy(\"lock\")\n-    private CacheState lastCacheState;\n+    private final AtomicInteger currentGeneration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUxMTUzMQ=="}, "originalCommit": {"oid": "e8374b8704e523be11aa00660a8aa720998133ad"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4264, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}