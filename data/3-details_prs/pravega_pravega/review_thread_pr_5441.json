{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMzg4NjYw", "number": 5441, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDoxOFrOFHqCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDoxOFrOFHqCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTczMTQ0OnYy", "diffSide": "RIGHT", "path": "gradle/java.gradle", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNDowNDoxOFrOIJLn6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNDo1OTo1MVrOIOx-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODUzOA==", "bodyText": "Shouldn't this be using the logger too?", "url": "https://github.com/pravega/pravega/pull/5441#discussion_r546498538", "createdAt": "2020-12-21T04:04:18Z", "author": {"login": "ravisharda"}, "path": "gradle/java.gradle", "diffHunk": "@@ -96,6 +96,25 @@ plugins.withId('java') {\n         def jvmArgsCopy = jvmArgs\n         jvmArgsCopy.add(\"-XX:MaxDirectMemorySize=4g\")\n         jvmArgs = jvmArgsCopy\n+        def outputCache = new LinkedList<String>()\n+\n+        beforeTest { descriptor ->\n+            logger.lifecycle(\"\\nRunning test: \" + descriptor.getClassName() + \" > \" + descriptor.getDisplayName());\n+            outputCache.clear()\n+        }\n+\n+        onOutput { descriptor, event ->\n+            outputCache.add(event.getMessage())\n+            while (outputCache.size() > 300) outputCache.remove()\n+        }\n+\n+        afterTest { descriptor, result ->\n+            if (result.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {\n+                println()\n+                println(\" Output of ${descriptor.getClassName()}.${descriptor.getDisplayName()}:\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9efbe1e1fcd8d074ceafda91ff67f918c245cb60"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5OTcwMg==", "bodyText": "Also, my understanding is that the following lines will already ensure that any exceptions for failed tests are logged. Curious, do we still need these explicit statements here?\n\n  \n    \n      pravega/gradle/java.gradle\n    \n    \n        Lines 89 to 92\n      in\n      9efbe1e\n    \n    \n    \n    \n\n        \n          \n           testLogging.showCauses = true \n        \n\n        \n          \n           testLogging.showExceptions = true \n        \n\n        \n          \n           testLogging.showStackTraces = true \n        \n\n        \n          \n           testLogging.events = [\"PASSED\", \"FAILED\"]", "url": "https://github.com/pravega/pravega/pull/5441#discussion_r546499702", "createdAt": "2020-12-21T04:10:31Z", "author": {"login": "ravisharda"}, "path": "gradle/java.gradle", "diffHunk": "@@ -96,6 +96,25 @@ plugins.withId('java') {\n         def jvmArgsCopy = jvmArgs\n         jvmArgsCopy.add(\"-XX:MaxDirectMemorySize=4g\")\n         jvmArgs = jvmArgsCopy\n+        def outputCache = new LinkedList<String>()\n+\n+        beforeTest { descriptor ->\n+            logger.lifecycle(\"\\nRunning test: \" + descriptor.getClassName() + \" > \" + descriptor.getDisplayName());\n+            outputCache.clear()\n+        }\n+\n+        onOutput { descriptor, event ->\n+            outputCache.add(event.getMessage())\n+            while (outputCache.size() > 300) outputCache.remove()\n+        }\n+\n+        afterTest { descriptor, result ->\n+            if (result.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {\n+                println()\n+                println(\" Output of ${descriptor.getClassName()}.${descriptor.getDisplayName()}:\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODUzOA=="}, "originalCommit": {"oid": "9efbe1e1fcd8d074ceafda91ff67f918c245cb60"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE0MDE3Mg==", "bodyText": "Thanks for reviewing the PR @ravisharda\n\nShouldn't this be using the logger too?\n\nUsing a logger at INFO level will enforce all the gradle commands to be use the --info option e.g: ./gradlew build --info. Also at INFO the log output from gradle will clutter the console with other information messages, which is not desireable.\nI do not want to use the logger.lifecycle(...) API since it should be used for progress information messages, ref: https://docs.gradle.org/current/userguide/logging.html\n\nRegarding options testLogging.showCauses, showExceptions...\n\nshowExceptions and showCauses settings are used to log if there are any exceptions during the execution of the test, even though the test is successful. showStackTraces ensures not just the exception but its stacktrace is logged during the run. Hence these options are required.", "url": "https://github.com/pravega/pravega/pull/5441#discussion_r551140172", "createdAt": "2021-01-04T06:43:36Z", "author": {"login": "shrids"}, "path": "gradle/java.gradle", "diffHunk": "@@ -96,6 +96,25 @@ plugins.withId('java') {\n         def jvmArgsCopy = jvmArgs\n         jvmArgsCopy.add(\"-XX:MaxDirectMemorySize=4g\")\n         jvmArgs = jvmArgsCopy\n+        def outputCache = new LinkedList<String>()\n+\n+        beforeTest { descriptor ->\n+            logger.lifecycle(\"\\nRunning test: \" + descriptor.getClassName() + \" > \" + descriptor.getDisplayName());\n+            outputCache.clear()\n+        }\n+\n+        onOutput { descriptor, event ->\n+            outputCache.add(event.getMessage())\n+            while (outputCache.size() > 300) outputCache.remove()\n+        }\n+\n+        afterTest { descriptor, result ->\n+            if (result.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {\n+                println()\n+                println(\" Output of ${descriptor.getClassName()}.${descriptor.getDisplayName()}:\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODUzOA=="}, "originalCommit": {"oid": "9efbe1e1fcd8d074ceafda91ff67f918c245cb60"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg1MDk4Ng==", "bodyText": "On a second look, it looks like the code is trying to log stdout ad stderr for failed tests and failed tests alone. I have to say I don't like the imperative code needed to achieve this and also the fact that each passing test ends up having two lines in the console output.\nShould we log stdout and stderr in all cases, instead?", "url": "https://github.com/pravega/pravega/pull/5441#discussion_r551850986", "createdAt": "2021-01-05T10:40:31Z", "author": {"login": "ravisharda"}, "path": "gradle/java.gradle", "diffHunk": "@@ -96,6 +96,25 @@ plugins.withId('java') {\n         def jvmArgsCopy = jvmArgs\n         jvmArgsCopy.add(\"-XX:MaxDirectMemorySize=4g\")\n         jvmArgs = jvmArgsCopy\n+        def outputCache = new LinkedList<String>()\n+\n+        beforeTest { descriptor ->\n+            logger.lifecycle(\"\\nRunning test: \" + descriptor.getClassName() + \" > \" + descriptor.getDisplayName());\n+            outputCache.clear()\n+        }\n+\n+        onOutput { descriptor, event ->\n+            outputCache.add(event.getMessage())\n+            while (outputCache.size() > 300) outputCache.remove()\n+        }\n+\n+        afterTest { descriptor, result ->\n+            if (result.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {\n+                println()\n+                println(\" Output of ${descriptor.getClassName()}.${descriptor.getDisplayName()}:\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODUzOA=="}, "originalCommit": {"oid": "9efbe1e1fcd8d074ceafda91ff67f918c245cb60"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM2OTg5MQ==", "bodyText": "As discussed, I have impoved the output of the gradle task.\nAlso, since the thread leak detector exits the gradle test worker jvm with exit code 99 there is no way for the gradle daemon to get this information as an event.", "url": "https://github.com/pravega/pravega/pull/5441#discussion_r552369891", "createdAt": "2021-01-06T04:59:51Z", "author": {"login": "shrids"}, "path": "gradle/java.gradle", "diffHunk": "@@ -96,6 +96,25 @@ plugins.withId('java') {\n         def jvmArgsCopy = jvmArgs\n         jvmArgsCopy.add(\"-XX:MaxDirectMemorySize=4g\")\n         jvmArgs = jvmArgsCopy\n+        def outputCache = new LinkedList<String>()\n+\n+        beforeTest { descriptor ->\n+            logger.lifecycle(\"\\nRunning test: \" + descriptor.getClassName() + \" > \" + descriptor.getDisplayName());\n+            outputCache.clear()\n+        }\n+\n+        onOutput { descriptor, event ->\n+            outputCache.add(event.getMessage())\n+            while (outputCache.size() > 300) outputCache.remove()\n+        }\n+\n+        afterTest { descriptor, result ->\n+            if (result.resultType == TestResult.ResultType.FAILURE && outputCache.size() > 0) {\n+                println()\n+                println(\" Output of ${descriptor.getClassName()}.${descriptor.getDisplayName()}:\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ5ODUzOA=="}, "originalCommit": {"oid": "9efbe1e1fcd8d074ceafda91ff67f918c245cb60"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4629, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}