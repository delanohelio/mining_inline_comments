{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTY4NTcx", "number": 5079, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxODozNFrOEZNVzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxMzowMFrOEZh5Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODY4NDI5OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxODozNFrOHB5eBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyMjoyNFrOHCZscA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MjE5OQ==", "bodyText": "How does this work with multi-byte unicode character strings?\nString#length() counts code units, not code points.\nWe may want to use String#codePointCount(int, int). This will allow languages in higher unicode planes to also use 255 characters (which can consume up to 4 bytes per character in UTF8 [or two code units in UTF16]).\nI believe the limiting factor in a scope name or stream name is the 1MB ZooKeeper ZNode size limit.\nWill 255 characters ever be too limiting? 255 characters is like 7 UUIDs.", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r471752199", "createdAt": "2020-08-17T20:18:34Z", "author": {"login": "derekm"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -624,6 +624,7 @@ public static String getStreamForReaderGroup(String groupNameName) {\n      */\n     public static String validateUserStreamName(String name) {\n         Preconditions.checkNotNull(name);\n+        Preconditions.checkArgument(name.length()<256, \"Name must have less than 256 characters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2ODgwMg==", "bodyText": "Some languages use multiple code points for a single character or grapheme. See: http://illegalargumentexception.blogspot.com/2009/05/java-rough-guide-to-character-encoding.html#javaencoding_strnlen", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r471768802", "createdAt": "2020-08-17T20:52:47Z", "author": {"login": "derekm"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -624,6 +624,7 @@ public static String getStreamForReaderGroup(String groupNameName) {\n      */\n     public static String validateUserStreamName(String name) {\n         Preconditions.checkNotNull(name);\n+        Preconditions.checkArgument(name.length()<256, \"Name must have less than 256 characters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MjE5OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4ODA5OA==", "bodyText": "We don't store Stream names in ZK. We stash them inside Table Segment Key-Value Pairs, either as Keys (max 8KB) or values (max 1MB - but may contain more than just a stream name). So the main constraint here will be Key - max 8KB.\nStream names are also part of the Segment names (<Scope-Name>/<Stream-Name>/<Segment-Name>). Given that we use Segment names as FileSystem paths (for NFS) or Object Keys (for S3/ExtS3), and so on, the constraint might be even higher than 8KB.\nIf you look at the line immediately following this line you'll see a Regex that enforces the name to be alphanumeric. As such, the character count is good enough because ASCII should be enough to encode this. I don't think we should worry about higher-level unicode chars in this case).", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r471788098", "createdAt": "2020-08-17T21:35:18Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -624,6 +624,7 @@ public static String getStreamForReaderGroup(String groupNameName) {\n      */\n     public static String validateUserStreamName(String name) {\n         Preconditions.checkNotNull(name);\n+        Preconditions.checkArgument(name.length()<256, \"Name must have less than 256 characters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MjE5OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2NDAyNw==", "bodyText": "In case of HDFS, the maximum component length for a file path is 255 bytes in UTF-8 encoding.\nhttps://issues.apache.org/jira/browse/HDFS-6055\nSince these names are to only contain alphanumeric characters, would using String#codePointCount(int, int) offer any benefits?", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r471964027", "createdAt": "2020-08-18T07:15:43Z", "author": {"login": "ldr7"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -624,6 +624,7 @@ public static String getStreamForReaderGroup(String groupNameName) {\n      */\n     public static String validateUserStreamName(String name) {\n         Preconditions.checkNotNull(name);\n+        Preconditions.checkArgument(name.length()<256, \"Name must have less than 256 characters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MjE5OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MzAyOA==", "bodyText": "If the maximum length for a path is 256, then your change isn't going to fix anything. See my previous comment why.", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r472273028", "createdAt": "2020-08-18T15:12:23Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -624,6 +624,7 @@ public static String getStreamForReaderGroup(String groupNameName) {\n      */\n     public static String validateUserStreamName(String name) {\n         Preconditions.checkNotNull(name);\n+        Preconditions.checkArgument(name.length()<256, \"Name must have less than 256 characters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MjE5OQ=="}, "originalCommit": null, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MDE3Ng==", "bodyText": "@andreipaduroiu\n\nIf the maximum length for a path is 256, then your change isn't going to fix anything. See my previous comment why.\n\nI think this means each path part, not the entire path. He is sizing the max length to the limits of HDFS path parts.\n@ldr7\n\nSince these names are to only contain alphanumeric characters, would using String#codePointCount(int, int) offer any benefits?\n\nYeah, my suggestion is invalid given the \\p{Alnum} character class constraint. Apologies for the distraction! I can be a stickler about i18n, but I didn't notice it doesn't really apply in this context.\nNow the only thing bugging me is we can't throw all constraint violations at once! ;)", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r472280176", "createdAt": "2020-08-18T15:22:24Z", "author": {"login": "derekm"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -624,6 +624,7 @@ public static String getStreamForReaderGroup(String groupNameName) {\n      */\n     public static String validateUserStreamName(String name) {\n         Preconditions.checkNotNull(name);\n+        Preconditions.checkArgument(name.length()<256, \"Name must have less than 256 characters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MjE5OQ=="}, "originalCommit": null, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjA1MTQzOnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/test/java/io/pravega/shared/NameUtilsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxMzowMFrOHCZSFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoyMTowM1rOHC2YeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MzQzMA==", "bodyText": "seed with 0", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r472273430", "createdAt": "2020-08-18T15:13:00Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/test/java/io/pravega/shared/NameUtilsTest.java", "diffHunk": "@@ -73,6 +74,23 @@ public void testStreamNameVerifier() {\n         NameUtils.validateStreamName(\"1.2.3\");\n     }\n \n+    @Test\n+    public void testStreamNameLimit() {\n+        int leftLimit = 48; // numeral '0'\n+        int rightLimit = 122; // letter 'z'\n+        int targetStringLength = 256;\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM0NjU0NA==", "bodyText": "Aside: It might be cool to bring in the jqwik test engine so we can get property generators such as string length and character classes: https://jqwik.net/docs/current/user-guide.html#string-length\nCf., https://github.com/junit-team/junit5-samples/tree/main/junit5-multiple-engines", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r472346544", "createdAt": "2020-08-18T17:02:01Z", "author": {"login": "derekm"}, "path": "shared/protocol/src/test/java/io/pravega/shared/NameUtilsTest.java", "diffHunk": "@@ -73,6 +74,23 @@ public void testStreamNameVerifier() {\n         NameUtils.validateStreamName(\"1.2.3\");\n     }\n \n+    @Test\n+    public void testStreamNameLimit() {\n+        int leftLimit = 48; // numeral '0'\n+        int rightLimit = 122; // letter 'z'\n+        int targetStringLength = 256;\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MzQzMA=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1MDIwMA==", "bodyText": "Since the test is written around a hard coded limit, I think bringing in jqwik for this might be a bit of an overkill.", "url": "https://github.com/pravega/pravega/pull/5079#discussion_r472750200", "createdAt": "2020-08-19T06:21:03Z", "author": {"login": "ldr7"}, "path": "shared/protocol/src/test/java/io/pravega/shared/NameUtilsTest.java", "diffHunk": "@@ -73,6 +74,23 @@ public void testStreamNameVerifier() {\n         NameUtils.validateStreamName(\"1.2.3\");\n     }\n \n+    @Test\n+    public void testStreamNameLimit() {\n+        int leftLimit = 48; // numeral '0'\n+        int rightLimit = 122; // letter 'z'\n+        int targetStringLength = 256;\n+        Random random = new Random();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3MzQzMA=="}, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4636, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}