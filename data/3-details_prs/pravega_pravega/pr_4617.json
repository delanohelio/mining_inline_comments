{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTUyNzg3", "number": 4617, "title": "Issue 4609: ExtendedS3Storage.concat using appends when source segment is small", "bodyText": "Change log description\nCurrently ExtendedS3Storage implements all concat operations as multi-part uploads. ( target = target+ source ). This is inefficient when source segments are small.\nWith this change , for smaller source segments, concat should read complete source segment and append it to target instead of using multi-part upload.\nFor larger source segments continue using current method.\nPurpose of the change\nFixes #4609\nWhat the code does\nFor smaller source segments, concat should read complete source segment and append it to target instead of using multi-part upload.\nFor larger source segments continue using current method.\nHow to verify it\nAll tests should be green.", "createdAt": "2020-03-11T22:37:20Z", "url": "https://github.com/pravega/pravega/pull/4617", "merged": true, "mergeCommit": {"oid": "79d38ce785a0fc3d265707e7690d11228fc289f1"}, "closed": true, "closedAt": "2020-03-13T02:18:38Z", "author": {"login": "sachin-j-joshi"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMu7fPgH2gAyMzg2OTUyNzg3OmVjNjYyMTNjNzRkZDg2NWYwYmJhZTMwNTk4NDMxNjAzMTBlNmM3NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNFE8CgFqTM3Mzk3ODg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec66213c74dd865f0bbae3059843160310e6c776", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/ec66213c74dd865f0bbae3059843160310e6c776", "committedDate": "2020-03-11T22:33:47Z", "message": "Issue 4609 - (ExtendedS3Storage): For smaller source segments, concat should read and append instead of using multi-part upload\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/72502422c719cfee0ee90c16eacfa30e8919dc03", "committedDate": "2020-03-11T22:33:52Z", "message": "Issue 4609 - (ExtendedS3Storage): Additional concat unit tests for forcing multipart upload.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTc5OTEw", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373179910", "createdAt": "2020-03-11T22:53:07Z", "commit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1MzowN1rOF1L_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1MzowN1rOF1L_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNTI2Nw==", "bodyText": "If the threshold is configurable, then please add it into config.properties as commented line with description.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391315267", "createdAt": "2020-03-11T22:53:07Z", "author": {"login": "kevinhan88"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "diffHunk": "@@ -93,6 +97,7 @@ private ExtendedS3StorageConfig(TypedProperties properties) throws Configuration\n         String givenPrefix = Preconditions.checkNotNull(properties.get(PREFIX), \"prefix\");\n         this.prefix = givenPrefix.endsWith(PATH_SEPARATOR) ? givenPrefix : givenPrefix + PATH_SEPARATOR;\n         this.useNoneMatch = properties.getBoolean(USENONEMATCH);\n+        this.smallObjectThreshold = properties.getInt(SMALL_OBJECT_THRESHOLD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTgxMzg4", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373181388", "createdAt": "2020-03-11T22:56:51Z", "commit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1Njo1MVrOF1MEag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowMzoyMlrOF1MNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNjU4Ng==", "bodyText": "Can you break these into 2 different methods please? It will make it so much easier to read.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391316586", "createdAt": "2020-03-11T22:56:51Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -403,39 +405,53 @@ private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegm\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n-        //Copy the first part\n-        CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n-                targetPath,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                1).withSourceRange(Range.fromOffsetLength(0, offset));\n-        CopyPartResult copyResult = client.copyPart(copyRequest);\n-\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Copy the second part\n-        S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n-                config.getPrefix() + sourceSegment);\n-        long objectSize = metadataResult.getContentLength(); // in bytes\n-\n-        copyRequest = new CopyPartRequest(config.getBucket(),\n-                config.getPrefix() + sourceSegment,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n-\n-        copyResult = client.copyPart(copyRequest);\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Close the upload\n-        client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n-                targetPath, uploadId).withParts(partEtags));\n-\n-        client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n-        Duration elapsed = timer.getElapsed();\n+        if (config.getSmallObjectThreshold() < si.getLength()) {\n+\n+            //Copy the first part", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzIxNg==", "bodyText": "What exceptions are you catching here? Blindly catching Exception is a bad thing.\nCan this partially copy the source segment and then throw an exception? IF true, then we have a problem and we might have to read the object into a byte array and then write it back fully.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391317216", "createdAt": "2020-03-11T22:58:43Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -403,39 +405,53 @@ private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegm\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n-        //Copy the first part\n-        CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n-                targetPath,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                1).withSourceRange(Range.fromOffsetLength(0, offset));\n-        CopyPartResult copyResult = client.copyPart(copyRequest);\n-\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Copy the second part\n-        S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n-                config.getPrefix() + sourceSegment);\n-        long objectSize = metadataResult.getContentLength(); // in bytes\n-\n-        copyRequest = new CopyPartRequest(config.getBucket(),\n-                config.getPrefix() + sourceSegment,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n-\n-        copyResult = client.copyPart(copyRequest);\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Close the upload\n-        client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n-                targetPath, uploadId).withParts(partEtags));\n-\n-        client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n-        Duration elapsed = timer.getElapsed();\n+        if (config.getSmallObjectThreshold() < si.getLength()) {\n+\n+            //Copy the first part\n+            CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n+                    targetPath,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    1).withSourceRange(Range.fromOffsetLength(0, offset));\n+            CopyPartResult copyResult = client.copyPart(copyRequest);\n+\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n+\n+            //Copy the second part\n+            S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n+                    config.getPrefix() + sourceSegment);\n+            long objectSize = metadataResult.getContentLength(); // in bytes\n+\n+            copyRequest = new CopyPartRequest(config.getBucket(),\n+                    config.getPrefix() + sourceSegment,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n+\n+            copyResult = client.copyPart(copyRequest);\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n \n+            //Close the upload\n+            client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n+                    targetPath, uploadId).withParts(partEtags));\n+\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n+\n+        } else {\n+            try (InputStream reader = client.readObjectStream(config.getBucket(),\n+                    config.getPrefix() + sourceSegment, Range.fromOffsetLength(0, si.getLength()))) {\n+                client.putObject(this.config.getBucket(),\n+                        targetPath,\n+                        Range.fromOffsetLength(offset, si.getLength()),\n+                        new BufferedInputStream(reader, Math.toIntExact(si.getLength())));\n+            } catch (Exception e) {\n+                throw Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzI5NA==", "bodyText": "This line is the same as in the block above. Move it out.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391317294", "createdAt": "2020-03-11T22:58:59Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -403,39 +405,53 @@ private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegm\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n-        //Copy the first part\n-        CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n-                targetPath,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                1).withSourceRange(Range.fromOffsetLength(0, offset));\n-        CopyPartResult copyResult = client.copyPart(copyRequest);\n-\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Copy the second part\n-        S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n-                config.getPrefix() + sourceSegment);\n-        long objectSize = metadataResult.getContentLength(); // in bytes\n-\n-        copyRequest = new CopyPartRequest(config.getBucket(),\n-                config.getPrefix() + sourceSegment,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n-\n-        copyResult = client.copyPart(copyRequest);\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Close the upload\n-        client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n-                targetPath, uploadId).withParts(partEtags));\n-\n-        client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n-        Duration elapsed = timer.getElapsed();\n+        if (config.getSmallObjectThreshold() < si.getLength()) {\n+\n+            //Copy the first part\n+            CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n+                    targetPath,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    1).withSourceRange(Range.fromOffsetLength(0, offset));\n+            CopyPartResult copyResult = client.copyPart(copyRequest);\n+\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n+\n+            //Copy the second part\n+            S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n+                    config.getPrefix() + sourceSegment);\n+            long objectSize = metadataResult.getContentLength(); // in bytes\n+\n+            copyRequest = new CopyPartRequest(config.getBucket(),\n+                    config.getPrefix() + sourceSegment,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n+\n+            copyResult = client.copyPart(copyRequest);\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n \n+            //Close the upload\n+            client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n+                    targetPath, uploadId).withParts(partEtags));\n+\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n+\n+        } else {\n+            try (InputStream reader = client.readObjectStream(config.getBucket(),\n+                    config.getPrefix() + sourceSegment, Range.fromOffsetLength(0, si.getLength()))) {\n+                client.putObject(this.config.getBucket(),\n+                        targetPath,\n+                        Range.fromOffsetLength(offset, si.getLength()),\n+                        new BufferedInputStream(reader, Math.toIntExact(si.getLength())));\n+            } catch (Exception e) {\n+                throw Exceptions.sneakyThrow(e);\n+            }\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODMwNQ==", "bodyText": "What does smallObjectThreshold mean? Someone who has no idea what this means will not be able to use this properly.\nSecond you must always include the unit of measure in your property names. Is this bytes, KB, MB, ..., TB?\nPlease name this something more appropriate, such as nativeConcatThresholdBytes or multiPartUploadConcatThresholdBytes .", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391318305", "createdAt": "2020-03-11T23:01:58Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "diffHunk": "@@ -30,6 +30,7 @@\n     public static final Property<String> BUCKET = Property.named(\"bucket\", \"\");\n     public static final Property<String> PREFIX = Property.named(\"prefix\", \"/\");\n     public static final Property<Boolean> USENONEMATCH = Property.named(\"useNoneMatch\", false);\n+    public static final Property<Integer> SMALL_OBJECT_THRESHOLD = Property.named(\"smallObjectThreshold\", 1024 * 1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODQ0Mw==", "bodyText": "Add a comment to the field explaining exactly what the behavior is.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391318443", "createdAt": "2020-03-11T23:02:18Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "diffHunk": "@@ -75,6 +76,9 @@\n     @Getter\n     private final boolean useNoneMatch;\n \n+    @Getter\n+    private final int smallObjectThreshold;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODY0Nw==", "bodyText": "+1. In config.properties, please add recommended values and explain what could happen if setting it too small or too large.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391318647", "createdAt": "2020-03-11T23:02:58Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "diffHunk": "@@ -93,6 +97,7 @@ private ExtendedS3StorageConfig(TypedProperties properties) throws Configuration\n         String givenPrefix = Preconditions.checkNotNull(properties.get(PREFIX), \"prefix\");\n         this.prefix = givenPrefix.endsWith(PATH_SEPARATOR) ? givenPrefix : givenPrefix + PATH_SEPARATOR;\n         this.useNoneMatch = properties.getBoolean(USENONEMATCH);\n+        this.smallObjectThreshold = properties.getInt(SMALL_OBJECT_THRESHOLD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNTI2Nw=="}, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxODc4Ng==", "bodyText": "How do you know MPU was used?", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391318786", "createdAt": "2020-03-11T23:03:22Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/extendeds3/ExtendedS3StorageTest.java", "diffHunk": "@@ -227,6 +227,26 @@ public void testExistsWithPrefix() throws Exception {\n         }\n     }\n \n+    /**\n+     * Tests the concat() method forcing to use multipart upload.\n+     *\n+     * @throws Exception if an unexpected error occurred.\n+     */\n+    @Test\n+    public void testConcatWithMultipartUpload() throws Exception {\n+        val adapterConfig = ExtendedS3StorageConfig.builder()\n+                .with(ExtendedS3StorageConfig.CONFIGURI, setup.configUri)\n+                .with(ExtendedS3StorageConfig.BUCKET, setup.adapterConfig.getBucket())\n+                .with(ExtendedS3StorageConfig.PREFIX, \"samplePrefix\")\n+                .with(ExtendedS3StorageConfig.USENONEMATCH, true)\n+                .with(ExtendedS3StorageConfig.SMALL_OBJECT_THRESHOLD, 1)\n+                .build();\n+        final String context = createSegmentName(\"Concat\");\n+        try (Storage s = createStorage(setup.client, adapterConfig, executorService())) {\n+            testConcat(context, s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTg0NDQx", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373184441", "createdAt": "2020-03-11T23:05:05Z", "commit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNTowNVrOF1MPNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNTowNVrOF1MPNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxOTM1MA==", "bodyText": "Only delete original object in case of success, right? move this line into try block.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391319350", "createdAt": "2020-03-11T23:05:05Z", "author": {"login": "kevinhan88"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -403,39 +405,53 @@ private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegm\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n-        //Copy the first part\n-        CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n-                targetPath,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                1).withSourceRange(Range.fromOffsetLength(0, offset));\n-        CopyPartResult copyResult = client.copyPart(copyRequest);\n-\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Copy the second part\n-        S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n-                config.getPrefix() + sourceSegment);\n-        long objectSize = metadataResult.getContentLength(); // in bytes\n-\n-        copyRequest = new CopyPartRequest(config.getBucket(),\n-                config.getPrefix() + sourceSegment,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n-\n-        copyResult = client.copyPart(copyRequest);\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Close the upload\n-        client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n-                targetPath, uploadId).withParts(partEtags));\n-\n-        client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n-        Duration elapsed = timer.getElapsed();\n+        if (config.getSmallObjectThreshold() < si.getLength()) {\n+\n+            //Copy the first part\n+            CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n+                    targetPath,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    1).withSourceRange(Range.fromOffsetLength(0, offset));\n+            CopyPartResult copyResult = client.copyPart(copyRequest);\n+\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n+\n+            //Copy the second part\n+            S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n+                    config.getPrefix() + sourceSegment);\n+            long objectSize = metadataResult.getContentLength(); // in bytes\n+\n+            copyRequest = new CopyPartRequest(config.getBucket(),\n+                    config.getPrefix() + sourceSegment,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n+\n+            copyResult = client.copyPart(copyRequest);\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n \n+            //Close the upload\n+            client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n+                    targetPath, uploadId).withParts(partEtags));\n+\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n+\n+        } else {\n+            try (InputStream reader = client.readObjectStream(config.getBucket(),\n+                    config.getPrefix() + sourceSegment, Range.fromOffsetLength(0, si.getLength()))) {\n+                client.putObject(this.config.getBucket(),\n+                        targetPath,\n+                        Range.fromOffsetLength(offset, si.getLength()),\n+                        new BufferedInputStream(reader, Math.toIntExact(si.getLength())));\n+            } catch (Exception e) {\n+                throw Exceptions.sneakyThrow(e);\n+            }\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTg0NzA1", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373184705", "createdAt": "2020-03-11T23:05:47Z", "commit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNTo0OFrOF1MQYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowNTo0OFrOF1MQYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxOTY1MA==", "bodyText": "Please give more information here with the exception, particularly this is something new we're trying", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391319650", "createdAt": "2020-03-11T23:05:48Z", "author": {"login": "kevinhan88"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -403,39 +405,53 @@ private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegm\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n-        //Copy the first part\n-        CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n-                targetPath,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                1).withSourceRange(Range.fromOffsetLength(0, offset));\n-        CopyPartResult copyResult = client.copyPart(copyRequest);\n-\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Copy the second part\n-        S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n-                config.getPrefix() + sourceSegment);\n-        long objectSize = metadataResult.getContentLength(); // in bytes\n-\n-        copyRequest = new CopyPartRequest(config.getBucket(),\n-                config.getPrefix() + sourceSegment,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n-\n-        copyResult = client.copyPart(copyRequest);\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Close the upload\n-        client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n-                targetPath, uploadId).withParts(partEtags));\n-\n-        client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n-        Duration elapsed = timer.getElapsed();\n+        if (config.getSmallObjectThreshold() < si.getLength()) {\n+\n+            //Copy the first part\n+            CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n+                    targetPath,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    1).withSourceRange(Range.fromOffsetLength(0, offset));\n+            CopyPartResult copyResult = client.copyPart(copyRequest);\n+\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n+\n+            //Copy the second part\n+            S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n+                    config.getPrefix() + sourceSegment);\n+            long objectSize = metadataResult.getContentLength(); // in bytes\n+\n+            copyRequest = new CopyPartRequest(config.getBucket(),\n+                    config.getPrefix() + sourceSegment,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n+\n+            copyResult = client.copyPart(copyRequest);\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n \n+            //Close the upload\n+            client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n+                    targetPath, uploadId).withParts(partEtags));\n+\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n+\n+        } else {\n+            try (InputStream reader = client.readObjectStream(config.getBucket(),\n+                    config.getPrefix() + sourceSegment, Range.fromOffsetLength(0, si.getLength()))) {\n+                client.putObject(this.config.getBucket(),\n+                        targetPath,\n+                        Range.fromOffsetLength(offset, si.getLength()),\n+                        new BufferedInputStream(reader, Math.toIntExact(si.getLength())));\n+            } catch (Exception e) {\n+                throw Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTk0OTk3", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373194997", "createdAt": "2020-03-11T23:36:14Z", "commit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozNjoxNFrOF1M0cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozNjoxNFrOF1M0cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyODg4Mw==", "bodyText": "Delete operation may fail too.  Need some error handling here and of course sufficient logging.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391328883", "createdAt": "2020-03-11T23:36:14Z", "author": {"login": "medvedevigorek"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -403,39 +405,53 @@ private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegm\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n-        //Copy the first part\n-        CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n-                targetPath,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                1).withSourceRange(Range.fromOffsetLength(0, offset));\n-        CopyPartResult copyResult = client.copyPart(copyRequest);\n-\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Copy the second part\n-        S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n-                config.getPrefix() + sourceSegment);\n-        long objectSize = metadataResult.getContentLength(); // in bytes\n-\n-        copyRequest = new CopyPartRequest(config.getBucket(),\n-                config.getPrefix() + sourceSegment,\n-                config.getBucket(),\n-                targetPath,\n-                uploadId,\n-                2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n-\n-        copyResult = client.copyPart(copyRequest);\n-        partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n-\n-        //Close the upload\n-        client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n-                targetPath, uploadId).withParts(partEtags));\n-\n-        client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n-        Duration elapsed = timer.getElapsed();\n+        if (config.getSmallObjectThreshold() < si.getLength()) {\n+\n+            //Copy the first part\n+            CopyPartRequest copyRequest = new CopyPartRequest(config.getBucket(),\n+                    targetPath,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    1).withSourceRange(Range.fromOffsetLength(0, offset));\n+            CopyPartResult copyResult = client.copyPart(copyRequest);\n+\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n+\n+            //Copy the second part\n+            S3ObjectMetadata metadataResult = client.getObjectMetadata(config.getBucket(),\n+                    config.getPrefix() + sourceSegment);\n+            long objectSize = metadataResult.getContentLength(); // in bytes\n+\n+            copyRequest = new CopyPartRequest(config.getBucket(),\n+                    config.getPrefix() + sourceSegment,\n+                    config.getBucket(),\n+                    targetPath,\n+                    uploadId,\n+                    2).withSourceRange(Range.fromOffsetLength(0, objectSize));\n+\n+            copyResult = client.copyPart(copyRequest);\n+            partEtags.add(new MultipartPartETag(copyResult.getPartNumber(), copyResult.getETag()));\n \n+            //Close the upload\n+            client.completeMultipartUpload(new CompleteMultipartUploadRequest(config.getBucket(),\n+                    targetPath, uploadId).withParts(partEtags));\n+\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);\n+\n+        } else {\n+            try (InputStream reader = client.readObjectStream(config.getBucket(),\n+                    config.getPrefix() + sourceSegment, Range.fromOffsetLength(0, si.getLength()))) {\n+                client.putObject(this.config.getBucket(),\n+                        targetPath,\n+                        Range.fromOffsetLength(offset, si.getLength()),\n+                        new BufferedInputStream(reader, Math.toIntExact(si.getLength())));\n+            } catch (Exception e) {\n+                throw Exceptions.sneakyThrow(e);\n+            }\n+            client.deleteObject(config.getBucket(), config.getPrefix() + sourceSegment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxOTM1MA=="}, "originalCommit": {"oid": "72502422c719cfee0ee90c16eacfa30e8919dc03"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjI0NjI0", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373224624", "createdAt": "2020-03-12T01:20:31Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyMDozMlrOF1Ob4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyMDozMlrOF1Ob4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NTM2Mg==", "bodyText": "It says LARGE concat count but with literal value of \"small\"", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391355362", "createdAt": "2020-03-12T01:20:32Z", "author": {"login": "kevinhan88"}, "path": "shared/metrics/src/main/java/io/pravega/shared/MetricsNames.java", "diffHunk": "@@ -108,6 +108,7 @@\n     public static final String STORAGE_CREATE_COUNT = PREFIX + \"segmentstore.storage.create_count\";      // Counter\n     public static final String STORAGE_DELETE_COUNT = PREFIX + \"segmentstore.storage.delete_count\";      // Counter\n     public static final String STORAGE_CONCAT_COUNT = PREFIX + \"segmentstore.storage.concat_count\";      // Counter\n+    public static final String STORAGE_LARGE_CONCAT_COUNT = PREFIX + \"segmentstore.storage.small_concat_count\"; // Counter", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjI1NjM5", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373225639", "createdAt": "2020-03-12T01:24:32Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyNDozM1rOF1Oftg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyNDozM1rOF1Oftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjM0Mg==", "bodyText": "Why the metric says Large but config is called small? Please straight them out.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391356342", "createdAt": "2020-03-12T01:24:33Z", "author": {"login": "kevinhan88"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "diffHunk": "@@ -93,6 +97,7 @@ private ExtendedS3StorageConfig(TypedProperties properties) throws Configuration\n         String givenPrefix = Preconditions.checkNotNull(properties.get(PREFIX), \"prefix\");\n         this.prefix = givenPrefix.endsWith(PATH_SEPARATOR) ? givenPrefix : givenPrefix + PATH_SEPARATOR;\n         this.useNoneMatch = properties.getBoolean(USENONEMATCH);\n+        this.smallObjectThreshold = properties.getInt(SMALL_OBJECT_THRESHOLD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjI1ODIx", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373225821", "createdAt": "2020-03-12T01:25:11Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyNToxMVrOF1OgSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMToyNToxMVrOF1OgSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1NjQ5MQ==", "bodyText": "Please add unit into the name as commented.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391356491", "createdAt": "2020-03-12T01:25:11Z", "author": {"login": "kevinhan88"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageConfig.java", "diffHunk": "@@ -30,6 +30,7 @@\n     public static final Property<String> BUCKET = Property.named(\"bucket\", \"\");\n     public static final Property<String> PREFIX = Property.named(\"prefix\", \"/\");\n     public static final Property<Boolean> USENONEMATCH = Property.named(\"useNoneMatch\", false);\n+    public static final Property<Integer> SMALL_OBJECT_THRESHOLD = Property.named(\"smallObjectThreshold\", 1024 * 1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjI4MDI1", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373228025", "createdAt": "2020-03-12T01:34:04Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMTozNDowNFrOF1On4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMTozNDowNFrOF1On4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1ODQzMg==", "bodyText": "Please call out what is the default value, which really matters in the case.\nAlso consider saying something like: \"In most cases, the default value should just work. Change this value with cautiousness.\"", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391358432", "createdAt": "2020-03-12T01:34:04Z", "author": {"login": "kevinhan88"}, "path": "config/config.properties", "diffHunk": "@@ -448,6 +448,15 @@ extendeds3.configUri=http://localhost:9020?identity=user&secretKey=password\n # Prefix is optional.\n # extendeds3.prefix=\n \n+# Size of ECS objects in bytes above which it is no longer considered a small object.\n+# This value is used to optimize transactions performance when size of transaction segments is small.\n+# For small transaction segments, to implement concat ExtendedS3Storage reads complete source segment and appends it to target\n+# instead of using multipart upload.\n+# smallObjectSizeLimitForConcat is optional.\n+# Valid values: Positive integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bece4e0c48531a64a2919c3f91b8469d70248ac2", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/bece4e0c48531a64a2919c3f91b8469d70248ac2", "committedDate": "2020-03-12T01:39:14Z", "message": "Issue 4609 - (ExtendedS3Storage): Metric for large concat count. Address review comments.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bece4e0c48531a64a2919c3f91b8469d70248ac2", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/bece4e0c48531a64a2919c3f91b8469d70248ac2", "committedDate": "2020-03-12T01:39:14Z", "message": "Issue 4609 - (ExtendedS3Storage): Metric for large concat count. Address review comments.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aaaacaf966632a09552a4033b6d4c829cebcf28", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/6aaaacaf966632a09552a4033b6d4c829cebcf28", "committedDate": "2020-03-12T01:48:10Z", "message": "Issue 4609 - (ExtendedS3Storage): Update config file to include defualt value.\n\nSigned-off-by: Sachin Joshi <sachin.joshi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjU0MTc2", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373254176", "createdAt": "2020-03-12T03:15:44Z", "commit": {"oid": "6aaaacaf966632a09552a4033b6d4c829cebcf28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd", "committedDate": "2020-03-12T15:38:02Z", "message": "Merge branch 'master' into issue-4609-concat-using-appends-for-small-source-master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd", "committedDate": "2020-03-12T15:38:02Z", "message": "Merge branch 'master' into issue-4609-concat-using-appends-for-small-source-master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTI5ODM3", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373929837", "createdAt": "2020-03-12T21:57:56Z", "commit": {"oid": "9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1Nzo1NlrOF1xZtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjowMDowMVrOF1xd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyODI0NQ==", "bodyText": "concat_count should be updated before calling deleteObject() otherwise it will not be consistent with large_concat_count in case of deleteObject() fails.", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391928245", "createdAt": "2020-03-12T21:57:56Z", "author": {"login": "medvedevigorek"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -386,23 +388,57 @@ private void setPermission(SegmentHandle handle, Permission permission) {\n      * completeMultiPartUpload call. Specifically, to concatenate, we are copying the target segment T and the\n      * source segment S to T, so essentially we are doing T <- T + S.\n      */\n-    private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegment) throws StreamSegmentNotExistsException {\n+    private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegment) throws Exception {\n         Preconditions.checkArgument(!targetHandle.isReadOnly(), \"target handle must not be read-only.\");\n         long traceId = LoggerHelpers.traceEnter(log, \"concat\", targetHandle.getSegmentName(), offset, sourceSegment);\n         Timer timer = new Timer();\n-        SortedSet<MultipartPartETag> partEtags = new TreeSet<>();\n-        String targetPath = config.getPrefix() + targetHandle.getSegmentName();\n-        String uploadId = client.initiateMultipartUpload(config.getBucket(), targetPath);\n \n+        String targetPath = config.getPrefix() + targetHandle.getSegmentName();\n         // check whether the target exists\n         if (!doExists(targetHandle.getSegmentName())) {\n             throw new StreamSegmentNotExistsException(targetHandle.getSegmentName());\n         }\n         // check whether the source is sealed\n         SegmentProperties si = doGetStreamSegmentInfo(sourceSegment);\n+        String sourcePath = config.getPrefix() + sourceSegment;\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n+        if (config.getSmallObjectSizeLimitForConcat() < si.getLength()) {\n+            doConcatWithMultipartUpload(targetPath, sourceSegment, offset);\n+            ExtendedS3Metrics.LARGE_CONCAT_COUNT.inc();\n+        } else {\n+            doConcatWithAppend(targetPath, sourcePath, offset, si.getLength());\n+        }\n+        // Now delete the source object.\n+        client.deleteObject(config.getBucket(), sourcePath);\n+\n+        Duration elapsed = timer.getElapsed();\n+        log.debug(\"Concat target={} source={} offset={} bytesWritten={} latency={}.\", targetHandle.getSegmentName(), sourceSegment, offset, si.getLength(), elapsed.toMillis());\n+\n+        ExtendedS3Metrics.CONCAT_LATENCY.reportSuccessEvent(elapsed);\n+        ExtendedS3Metrics.CONCAT_BYTES.add(si.getLength());\n+        ExtendedS3Metrics.CONCAT_COUNT.inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyOTMyNg==", "bodyText": "latency and bytes are recorded only in case of success, in case of a failure in deleteObject() those will not be recorded. Don't they need to be recorded anyway?", "url": "https://github.com/pravega/pravega/pull/4617#discussion_r391929326", "createdAt": "2020-03-12T22:00:01Z", "author": {"login": "medvedevigorek"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -386,23 +388,57 @@ private void setPermission(SegmentHandle handle, Permission permission) {\n      * completeMultiPartUpload call. Specifically, to concatenate, we are copying the target segment T and the\n      * source segment S to T, so essentially we are doing T <- T + S.\n      */\n-    private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegment) throws StreamSegmentNotExistsException {\n+    private Void doConcat(SegmentHandle targetHandle, long offset, String sourceSegment) throws Exception {\n         Preconditions.checkArgument(!targetHandle.isReadOnly(), \"target handle must not be read-only.\");\n         long traceId = LoggerHelpers.traceEnter(log, \"concat\", targetHandle.getSegmentName(), offset, sourceSegment);\n         Timer timer = new Timer();\n-        SortedSet<MultipartPartETag> partEtags = new TreeSet<>();\n-        String targetPath = config.getPrefix() + targetHandle.getSegmentName();\n-        String uploadId = client.initiateMultipartUpload(config.getBucket(), targetPath);\n \n+        String targetPath = config.getPrefix() + targetHandle.getSegmentName();\n         // check whether the target exists\n         if (!doExists(targetHandle.getSegmentName())) {\n             throw new StreamSegmentNotExistsException(targetHandle.getSegmentName());\n         }\n         // check whether the source is sealed\n         SegmentProperties si = doGetStreamSegmentInfo(sourceSegment);\n+        String sourcePath = config.getPrefix() + sourceSegment;\n         Preconditions.checkState(si.isSealed(), \"Cannot concat segment '%s' into '%s' because it is not sealed.\",\n                 sourceSegment, targetHandle.getSegmentName());\n \n+        if (config.getSmallObjectSizeLimitForConcat() < si.getLength()) {\n+            doConcatWithMultipartUpload(targetPath, sourceSegment, offset);\n+            ExtendedS3Metrics.LARGE_CONCAT_COUNT.inc();\n+        } else {\n+            doConcatWithAppend(targetPath, sourcePath, offset, si.getLength());\n+        }\n+        // Now delete the source object.\n+        client.deleteObject(config.getBucket(), sourcePath);\n+\n+        Duration elapsed = timer.getElapsed();\n+        log.debug(\"Concat target={} source={} offset={} bytesWritten={} latency={}.\", targetHandle.getSegmentName(), sourceSegment, offset, si.getLength(), elapsed.toMillis());\n+\n+        ExtendedS3Metrics.CONCAT_LATENCY.reportSuccessEvent(elapsed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef13dd50bd0a6e14ca8345a8fffa82e28ecb8cd"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9914a4f9c3407767bd78a0443ac6dac122b02b87", "author": {"user": {"login": "sachin-j-joshi", "name": "Sachin Jayant Joshi"}}, "url": "https://github.com/pravega/pravega/commit/9914a4f9c3407767bd78a0443ac6dac122b02b87", "committedDate": "2020-03-12T23:25:13Z", "message": "Merge branch 'master' into issue-4609-concat-using-appends-for-small-source-master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTY4NzU4", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373968758", "createdAt": "2020-03-12T23:46:07Z", "commit": {"oid": "9914a4f9c3407767bd78a0443ac6dac122b02b87"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTc4ODc2", "url": "https://github.com/pravega/pravega/pull/4617#pullrequestreview-373978876", "createdAt": "2020-03-13T00:22:01Z", "commit": {"oid": "9914a4f9c3407767bd78a0443ac6dac122b02b87"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3632, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}