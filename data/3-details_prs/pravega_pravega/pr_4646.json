{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDY3MjQ3", "number": 4646, "title": "Issue 4273: Revised Throtting Metrics.", "bodyText": "Change log description\n\nAdded 3 new metrics (and removed one). Instead of a single encompassing operationProcessDelay metric, one for each Throttler type is created.\nAdjust for possible throttling interruptions in the Throttler and record the source of the throttling into the appropriate metric.\nAdd trivial metric tests and also throttling metric tests which test the reported metrics upon interruption.\n\nPurpose of the change\nFixes #4273\nWhat the code does\n\nAdds new throttling metrics and properly accounts for interruptions during throttling.\n\nHow to verify it\nRun the provided unit tests.", "createdAt": "2020-03-26T23:08:35Z", "url": "https://github.com/pravega/pravega/pull/4646", "merged": true, "mergeCommit": {"oid": "735184c6db6711532cac39a0a350e2163a22ad7f"}, "closed": true, "closedAt": "2020-04-16T20:08:27Z", "author": {"login": "co-jo"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGUXgKAH2gAyMzk0NDY3MjQ3OjA4NjAxYWZkMTE0NjNiZjcwMGE2ZDBhZjNmMzNkY2I1M2Y5MzVlMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYQGaagH2gAyMzk0NDY3MjQ3OmYzMWRkZWU5YjgxOWRkYTFjNjcwOTE3NGMyMjNmZjAyMzNmZDY1ZDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "08601afd11463bf700a6d0af3f33dcb53f935e09", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/08601afd11463bf700a6d0af3f33dcb53f935e09", "committedDate": "2020-02-21T00:13:24Z", "message": "Update K8 client APIs to use their 5.0.0 counterparts.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a165d0293c34ee8703fff764e55cf8fda413dd", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/25a165d0293c34ee8703fff764e55cf8fda413dd", "committedDate": "2020-02-21T18:42:03Z", "message": "Merge pull request #1 from co-jo/issue-4464-update-kubernetes-client-version\n\nIssue 4464 update kubernetes client version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc2dd2be26feed2953258ff055c1657aeb57019", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/8cc2dd2be26feed2953258ff055c1657aeb57019", "committedDate": "2020-02-23T04:43:09Z", "message": "Run system tests using alternative flag value.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3fcbd2e627f9fc0a0f6bad7e42667db4439e092", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/c3fcbd2e627f9fc0a0f6bad7e42667db4439e092", "committedDate": "2020-03-10T22:21:32Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f808cc42831892aeb8e7824c22d499a1f9fa03", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/f5f808cc42831892aeb8e7824c22d499a1f9fa03", "committedDate": "2020-03-18T18:44:10Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d4118b2f6d4ff8fe401c4a50e4373c4609b057", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/27d4118b2f6d4ff8fe401c4a50e4373c4609b057", "committedDate": "2020-03-18T20:55:22Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0731b7efb28fab80d43ba7e140f4a9a8b9d1007e", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/0731b7efb28fab80d43ba7e140f4a9a8b9d1007e", "committedDate": "2020-03-23T17:45:56Z", "message": "Adjust throttle reporting times to account for possible preemptions.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "151da72384344f58b12920e2329c9c44d6a39869", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/151da72384344f58b12920e2329c9c44d6a39869", "committedDate": "2020-03-26T20:23:36Z", "message": "Properly account for interruptions of active throttlers in our Metrics reporting.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93452437d7e50640da28458fbcc2c6b824ff2705", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/93452437d7e50640da28458fbcc2c6b824ff2705", "committedDate": "2020-03-26T23:06:28Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-4273-ss-throttling-metrics\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/9c0875f8db675dc0713a5a2575934e52e0dc8a50", "committedDate": "2020-03-27T16:47:16Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjM5NzQw", "url": "https://github.com/pravega/pravega/pull/4646#pullrequestreview-383239740", "createdAt": "2020-03-27T22:45:54Z", "commit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjo0NTo1NVrOF9D5RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjo0NTo1NVrOF9D5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTI2OQ==", "bodyText": "Why do we need three separate metrics here? We can do this using a single metric and change the tag on each publish.\nCheck out https://github.com/pravega/pravega/blob/master/shared/metrics/src/main/java/io/pravega/shared/metrics/MetricsLogAppender.java\nWe use a single metric (ok, two of them MetricsNames.LOG_ERRORS or MetricsNames.LOG_WARNINGS), then in recordEvent we use DYNAMIC_LOGGER to record a value and attach a tag.\nWhat I think we can do in the throttling metrics is define 3 tags (Cache, DurableDataLog and Batching - or better, just get them out of ThrottlerCalculator.DelayResult.getThrottlerName().toString()) and then use a single metric (you can use the one we had before) to report the delay value with the appropriate number.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r399571269", "createdAt": "2020-03-27T22:45:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -154,36 +168,57 @@ public OperationProcessor(int containerId) {\n             this.operationQueueSize = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_SIZE, this.containerTag);\n             this.operationsInFlight = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_IN_FLIGHT, this.containerTag);\n             this.operationQueueWaitTime = STATS_LOGGER.createStats(MetricsNames.OPERATION_QUEUE_WAIT_TIME, this.containerTag);\n-            this.operationProcessorDelay = STATS_LOGGER.createStats(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, this.containerTag);\n             this.operationCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_LATENCY, this.containerTag);\n             this.operationLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_LATENCY, this.containerTag);\n             this.memoryCommitLatency = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_LATENCY, this.containerTag);\n             this.memoryCommitCount = STATS_LOGGER.createStats(MetricsNames.OPERATION_COMMIT_MEMORY_COUNT, this.containerTag);\n             this.processOperationsLatency = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_LATENCY, this.containerTag);\n             this.processOperationsBatchSize = STATS_LOGGER.createStats(MetricsNames.PROCESS_OPERATIONS_BATCH_SIZE, this.containerTag);\n+            this.operationProcessorCacheDelay = STATS_LOGGER.createStats(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0875f8db675dc0713a5a2575934e52e0dc8a50"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf91d3d92d2828870d270b2600d76e4c97f8132", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/cbf91d3d92d2828870d270b2600d76e4c97f8132", "committedDate": "2020-04-02T18:45:57Z", "message": "Prepopulate throttler tag sets, instead of constructing them dynamically on each call to `processingDelay`.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0338c790c29459a2701f16b36a78512ccd839412", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/0338c790c29459a2701f16b36a78512ccd839412", "committedDate": "2020-04-02T21:28:46Z", "message": "Reformat method call.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da33e0ebee212c9d8e44e1091d056e7080e64fd", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/1da33e0ebee212c9d8e44e1091d056e7080e64fd", "committedDate": "2020-04-03T14:44:59Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45f8e1bf43e99fb153bb583f7bf2e0a5c0344a86", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/45f8e1bf43e99fb153bb583f7bf2e0a5c0344a86", "committedDate": "2020-04-03T18:14:31Z", "message": "Randomize containerId to ensure isolation between tests.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37b693f0d80214a3e384eca8e44e28d09dad122e", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/37b693f0d80214a3e384eca8e44e28d09dad122e", "committedDate": "2020-04-03T18:16:39Z", "message": "Merge remote-tracking branch 'origin/issue-4273-ss-throttling-metrics' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDg1NDM2", "url": "https://github.com/pravega/pravega/pull/4646#pullrequestreview-387485436", "createdAt": "2020-04-03T18:25:10Z", "commit": {"oid": "37b693f0d80214a3e384eca8e44e28d09dad122e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyNToxMFrOGAisoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyNToxMFrOGAisoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyMTY2NA==", "bodyText": "why not use Throttler enum directly here?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r403221664", "createdAt": "2020-04-03T18:25:10Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -182,8 +180,8 @@ public void currentState(int queueSize, int inFlightCount) {\n             this.operationsInFlight.reportSuccessValue(inFlightCount);\n         }\n \n-        public void processingDelay(int millis) {\n-            this.operationProcessorDelay.reportSuccessValue(millis);\n+        public void processingDelay(int millis, String throttlerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37b693f0d80214a3e384eca8e44e28d09dad122e"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTM4NDMz", "url": "https://github.com/pravega/pravega/pull/4646#pullrequestreview-387538433", "createdAt": "2020-04-03T19:51:22Z", "commit": {"oid": "37b693f0d80214a3e384eca8e44e28d09dad122e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aaf08e87c1d09da44762f925af7a0b756c7d481", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/6aaf08e87c1d09da44762f925af7a0b756c7d481", "committedDate": "2020-04-07T18:40:37Z", "message": "Check for null values on the ThrottlerName to avoid calling toString on a null reference.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30b113aba03537b58cbc9c55acd70f6c88c541ce", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/30b113aba03537b58cbc9c55acd70f6c88c541ce", "committedDate": "2020-04-07T18:43:51Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19736df6da138806010d3b22e628070d360d891", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/a19736df6da138806010d3b22e628070d360d891", "committedDate": "2020-04-07T23:01:48Z", "message": "Fix checkstyle violations.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d7edb30e12128eae5c24b91e36bfdc13a6c948", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/88d7edb30e12128eae5c24b91e36bfdc13a6c948", "committedDate": "2020-04-07T23:02:37Z", "message": "Merge branch 'issue-4273-ss-throttling-metrics' of https://github.com/co-jo/pravega into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f9134a96f61c5f1fde6bcad92dafd74c4efcbf6", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/4f9134a96f61c5f1fde6bcad92dafd74c4efcbf6", "committedDate": "2020-04-08T04:22:38Z", "message": "All @param to Javadoc comment.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5a76496316b20dccdd00fb0b5789f15a0c250c5", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/d5a76496316b20dccdd00fb0b5789f15a0c250c5", "committedDate": "2020-04-08T04:23:57Z", "message": "All @param to Javadoc comment.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/ff9a760808414aa7d7f92d2ef88e10de5b24ece8", "committedDate": "2020-04-08T15:30:26Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTk5OTY2", "url": "https://github.com/pravega/pravega/pull/4646#pullrequestreview-391199966", "createdAt": "2020-04-09T23:52:31Z", "commit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1MjozMVrOGDtCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1OTowOFrOGDtJXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNjgwMg==", "bodyText": "I'm not a big fan of this type of caching, for a couple of reasons:\n\nYou need to do a lookup in this map every time you report something.\nThe map's keys are not the same as the ones that are in ThrottlerCalculator. If we decide (for whatever reason) to rename, remove or add one in there, this will not work.\nIf (continued from 2 above), there is no entry in this map for a throttler name, then it will return null - how will the reporting work? will it throw a NullPtr?\n\nI am OK with generating a new array every time we invoke this. Generating a 4-element array is insignificant compared to all the other work that is done in the Operation Processor so there's no need to try to optimize it.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406536802", "createdAt": "2020-04-09T23:52:31Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/SegmentStoreMetrics.java", "diffHunk": "@@ -148,13 +144,16 @@ private void report() {\n         private final OpStatsLogger processOperationsLatency;\n         private final OpStatsLogger processOperationsBatchSize;\n         private final String[] containerTag;\n+        private final HashMap<String, String[]> throttlerTags = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzI2OQ==", "bodyText": "please add a method called getElapsed on TimeoutTimer that does this calculation. Doing so will remove the need to expose getInitial to the outside.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406537269", "createdAt": "2020-04-09T23:54:04Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -122,6 +122,8 @@ boolean isThrottlingRequired() {\n                 if (remaining > 0 && remaining < delay.get().getDurationMillis()) {\n                     delay.set(delay.get().withNewDelay(remaining));\n                 }\n+                int incurredDelay = (int) (existingDelay.remaining.getInitial().toMillis() - existingDelay.remaining.getRemaining().toMillis());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzQ0Mw==", "bodyText": "Why would this be null?\nAnd even if it is, I still want to see this logged somewhere - this is important for certain debugging activities.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406537443", "createdAt": "2020-04-09T23:54:49Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -138,13 +140,12 @@ boolean isThrottlingRequired() {\n     }\n \n     private CompletableFuture<Void> throttleOnce(ThrottlerCalculator.DelayResult delay) {\n-        this.metrics.processingDelay(delay.getDurationMillis());\n         if (delay.isMaximum()\n                 || delay.getThrottlerName() == ThrottlerCalculator.ThrottlerName.DurableDataLog) {\n             // Increase logging visibility if we throttle at the maximum limit (which means we're likely to fully block\n             // processing of operations) or if this is due to us not being able to ingest items quickly enough.\n             log.warn(\"{}: Processing delay = {}.\", this.traceObjectId, delay);\n-        } else {\n+        } else if (delay.getThrottlerName() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNzUxNA==", "bodyText": "use hasRemaining in TimeoutTimer", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406537514", "createdAt": "2020-04-09T23:55:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/logs/Throttler.java", "diffHunk": "@@ -159,8 +160,17 @@ boolean isThrottlingRequired() {\n                             result.delayFuture,\n                             ex -> ex instanceof ThrottlingInterruptedException,\n                             this::throttle)\n-                    .whenComplete((r, e) -> this.currentDelay.set(null));\n+                    .whenComplete((r, e) -> {\n+                        if (this.currentDelay.get() != null && currentDelay.get().remaining.getRemaining().toMillis() <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODA1NQ==", "bodyText": "Please do not check in commented out code. Either add it back or delete it completely.", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538055", "createdAt": "2020-04-09T23:57:08Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -145,6 +161,191 @@ public void testInterruptedDurableDataLogDelay() throws Exception {\n         testInterruptedDelay(ThrottlerCalculator.ThrottlerName.DurableDataLog);\n     }\n \n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedIncreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(3000, 4000, 5000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+            // Wait for the new cycle to begin (we use the recordDelay consumer above to figure this out).\n+            int expectedDelayCount = i + 1;\n+            TestUtils.await(() -> delays.size() == expectedDelayCount, 5, TIMEOUT_MILLIS);\n+        }\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+\n+        String[] tags = { \"container\", String.valueOf(this.containerId), \"throttler\", \"Cache\" };\n+\n+        // Because the supplied delays is monotonically decreasing, only the first delay value should be used to calculate\n+        // the duration supplied.\n+        AssertExtensions.assertLessThanOrEqual(\n+                \"Throttler should be at most the first supplied delay\",\n+                (int) suppliedDelays.get(0),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+    }\n+\n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedDecreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(5000, 4000, 3000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            //Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODMxNg==", "bodyText": "I really do not like sleeping in tests (or anywhere else for that matter). Can you rewrite this test without the need to sleep?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538316", "createdAt": "2020-04-09T23:58:17Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -145,6 +161,191 @@ public void testInterruptedDurableDataLogDelay() throws Exception {\n         testInterruptedDelay(ThrottlerCalculator.ThrottlerName.DurableDataLog);\n     }\n \n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedIncreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(3000, 4000, 5000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+            // Wait for the new cycle to begin (we use the recordDelay consumer above to figure this out).\n+            int expectedDelayCount = i + 1;\n+            TestUtils.await(() -> delays.size() == expectedDelayCount, 5, TIMEOUT_MILLIS);\n+        }\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+\n+        String[] tags = { \"container\", String.valueOf(this.containerId), \"throttler\", \"Cache\" };\n+\n+        // Because the supplied delays is monotonically decreasing, only the first delay value should be used to calculate\n+        // the duration supplied.\n+        AssertExtensions.assertLessThanOrEqual(\n+                \"Throttler should be at most the first supplied delay\",\n+                (int) suppliedDelays.get(0),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+    }\n+\n+    /**\n+     * Tests if interruptible throttlers are correctly reporting the time spent throttled.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterruptedDecreasingDelayMetrics() throws Exception {\n+        // Supply monotonically decreasing delays.\n+        val suppliedDelays = Arrays.asList(5000, 4000, 3000);\n+        val delays = Collections.<Integer>synchronizedList(new ArrayList<>());\n+        val calculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val nextDelay = suppliedDelays.iterator();\n+        Consumer<Integer> recordDelay = delayMillis -> {\n+            delays.add(delayMillis);\n+            calculator.setDelayMillis(nextDelay.hasNext() ? nextDelay.next() : 0); // 0 means we're done (no more throttling).\n+        };\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(calculator), executorService(), metrics, recordDelay);\n+\n+        // Set a non-maximum delay and ask to throttle, then verify we throttled the correct amount.\n+        calculator.setDelayMillis(nextDelay.next());\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        // For every delay that we want to submit, notify that the cache cleanup has completed, which should cancel the\n+        // currently running throttle cycle and request the next throttling value.\n+        for (int i = 1; i < suppliedDelays.size(); i++) {\n+            // Interrupt the current throttle cycle.\n+            t.notifyThrottleSourceChanged();\n+            //Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+            // Wait for the new cycle to begin (we use the recordDelay consumer above to figure this out).\n+            int expectedDelayCount = i + 1;\n+            TestUtils.await(() -> delays.size() == expectedDelayCount, 5, TIMEOUT_MILLIS);\n+        }\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+\n+        String[] tags = { \"container\", String.valueOf(this.containerId), \"throttler\", \"Cache\" };\n+\n+        // Because the supplied delays is monotonically decreasing, only the first delay value should be used to calculate\n+        // the duration supplied.\n+\n+        AssertExtensions.assertGreaterThanOrEqual(\n+                \"Excepted delay to be at least smallest value.\",\n+                 suppliedDelays.get(2),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+\n+        AssertExtensions.assertLessThan(\n+                \"Excepted delay to be strictly less than the max.\",\n+                 suppliedDelays.get(0),\n+                (int) MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, tags).value()\n+        );\n+    }\n+\n+    /**\n+     * Incorporates mutliple types of throttlers using arbitrary throttling amounts to make sure that each throttling\n+     * metric is being properly reported.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInterrutedMixedDelayMetrics() throws Exception {\n+        val cacheCalculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Cache);\n+        val batchingCalculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.Batching);\n+        val durableDataLogCalculator = new TestCalculatorThrottler(ThrottlerCalculator.ThrottlerName.DurableDataLog);\n+\n+        int cacheDelay = 6000;\n+        int batchingDelay = 5000;\n+        int durableDataLogDelay = 3000;\n+\n+        cacheCalculator.setDelayMillis(cacheDelay);\n+        batchingCalculator.setDelayMillis(batchingDelay);\n+        durableDataLogCalculator.setDelayMillis(durableDataLogDelay);\n+\n+        Consumer<Integer> recordDelay = delayMillis -> { };\n+        ArrayList<ThrottlerCalculator.Throttler> throttlers = new ArrayList<>(Arrays.asList(cacheCalculator, batchingCalculator, durableDataLogCalculator));\n+\n+        @Cleanup\n+        TestThrottler t = new TestThrottler(this.containerId, wrap(throttlers), executorService(), metrics, recordDelay);\n+\n+        val t1 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t1.isDone());\n+\n+        int throttlerActiveTime = 2000;\n+        // Suppose a second goes by.\n+        TimeUnit.MILLISECONDS.sleep(throttlerActiveTime);\n+        // Now the Cache state has changed.\n+        // Change delay of Cache throttler in order to make the ThrottlerCalculator pick up the Batching Throttler.\n+        cacheCalculator.setDelayMillis(1000);\n+        // Change source of throttling.\n+        t.notifyThrottleSourceChanged();\n+        // Wait for the batching throttler to complete.\n+        TestUtils.await(t1::isDone, 5, TIMEOUT_MILLIS);\n+        // Throttler should report it spent at least `throttlerActiveTime` throttled.\n+        AssertExtensions.assertGreaterThanOrEqual(\n+                \"Expected to be greater than the time left uninterrupted.\",\n+                throttlerActiveTime,\n+                (int) getThrottlerMetric(ThrottlerCalculator.ThrottlerName.Cache)\n+        );\n+        // Force an interruption. The throttler should take the min of the left over delay from the previous throttler,\n+        // or the throttling delay originally assigned.\n+        AssertExtensions.assertLessThanOrEqual(\n+                \"Expected to be greater than the time left uninterrupted.\",\n+                 min(batchingDelay, cacheDelay - throttlerActiveTime),\n+                (int) getThrottlerMetric(ThrottlerCalculator.ThrottlerName.Batching)\n+        );\n+\n+        durableDataLogDelay = max(cacheDelay, batchingDelay) + 1000;\n+        // This should force the throttler calculator to pick up the durable data log throttler.\n+        durableDataLogCalculator.setDelayMillis(durableDataLogDelay);\n+        val t2 = t.throttle();\n+        Assert.assertFalse(\"Not expected throttle future to be completed yet.\", t2.isDone());\n+        // Arbitrary amount of time goes by.\n+        TimeUnit.MILLISECONDS.sleep(throttlerActiveTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODM5OQ==", "bodyText": "Math.min?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538399", "createdAt": "2020-04-09T23:58:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -195,6 +396,26 @@ private ThrottlerCalculator wrap(ThrottlerCalculator.Throttler calculatorThrottl\n         return ThrottlerCalculator.builder().throttler(calculatorThrottler).build();\n     }\n \n+    private ThrottlerCalculator wrap(ArrayList<ThrottlerCalculator.Throttler> throttlers) {\n+        return ThrottlerCalculator.builder().throttlers(throttlers).build();\n+    }\n+\n+    private String[] throttlerTags(ThrottlerCalculator.ThrottlerName name)  {\n+        return  new String[] { \"container\", String.valueOf(this.containerId), \"throttler\", name.toString() };\n+    }\n+\n+    private double getThrottlerMetric(ThrottlerCalculator.ThrottlerName name) {\n+        return MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, throttlerTags(name)).value();\n+    }\n+\n+    private static int min(int a, int b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODQ0NA==", "bodyText": "Math.max?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538444", "createdAt": "2020-04-09T23:58:45Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -195,6 +396,26 @@ private ThrottlerCalculator wrap(ThrottlerCalculator.Throttler calculatorThrottl\n         return ThrottlerCalculator.builder().throttler(calculatorThrottler).build();\n     }\n \n+    private ThrottlerCalculator wrap(ArrayList<ThrottlerCalculator.Throttler> throttlers) {\n+        return ThrottlerCalculator.builder().throttlers(throttlers).build();\n+    }\n+\n+    private String[] throttlerTags(ThrottlerCalculator.ThrottlerName name)  {\n+        return  new String[] { \"container\", String.valueOf(this.containerId), \"throttler\", name.toString() };\n+    }\n+\n+    private double getThrottlerMetric(ThrottlerCalculator.ThrottlerName name) {\n+        return MetricRegistryUtils.getGauge(MetricsNames.OPERATION_PROCESSOR_DELAY_MILLIS, throttlerTags(name)).value();\n+    }\n+\n+    private static int min(int a, int b) {\n+        return a < b ? a : b;\n+    }\n+\n+    private static int max(int a, int b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODU4OA==", "bodyText": "Can't you get this from MetricsTags?", "url": "https://github.com/pravega/pravega/pull/4646#discussion_r406538588", "createdAt": "2020-04-09T23:59:08Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/logs/ThrottlerTests.java", "diffHunk": "@@ -195,6 +396,26 @@ private ThrottlerCalculator wrap(ThrottlerCalculator.Throttler calculatorThrottl\n         return ThrottlerCalculator.builder().throttler(calculatorThrottler).build();\n     }\n \n+    private ThrottlerCalculator wrap(ArrayList<ThrottlerCalculator.Throttler> throttlers) {\n+        return ThrottlerCalculator.builder().throttlers(throttlers).build();\n+    }\n+\n+    private String[] throttlerTags(ThrottlerCalculator.ThrottlerName name)  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9a760808414aa7d7f92d2ef88e10de5b24ece8"}, "originalPosition": 308}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb456ec7b744eb2d1980290e4e9984dbe32c42ef", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/bb456ec7b744eb2d1980290e4e9984dbe32c42ef", "committedDate": "2020-04-10T22:00:11Z", "message": "* Addresses comments made in PR 4646.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd69ce66e7fb5da4e37e67b7c7157d0577a6c04", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/dcd69ce66e7fb5da4e37e67b7c7157d0577a6c04", "committedDate": "2020-04-10T22:00:35Z", "message": "Merge remote-tracking branch 'origin/issue-4273-ss-throttling-metrics' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a8ce507ad33398455cb4899b20b10d820cdfe0", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/02a8ce507ad33398455cb4899b20b10d820cdfe0", "committedDate": "2020-04-14T15:45:00Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDY3MDgx", "url": "https://github.com/pravega/pravega/pull/4646#pullrequestreview-393067081", "createdAt": "2020-04-14T15:53:50Z", "commit": {"oid": "02a8ce507ad33398455cb4899b20b10d820cdfe0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e0f0c6dc88b63c963b66114a8d1457ded34619", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/62e0f0c6dc88b63c963b66114a8d1457ded34619", "committedDate": "2020-04-15T16:04:48Z", "message": "Add tests to missed branches.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e59c3e2881dc404058e875256409bd186afab3d7", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e59c3e2881dc404058e875256409bd186afab3d7", "committedDate": "2020-04-15T16:05:46Z", "message": "Merge remote-tracking branch 'origin/issue-4273-ss-throttling-metrics' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d93d557caa83a05626bd2d83124162dbee0b6e", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/93d93d557caa83a05626bd2d83124162dbee0b6e", "committedDate": "2020-04-15T16:19:19Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739f3be18f8c7d9c133c078f260aed08d1340f67", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/739f3be18f8c7d9c133c078f260aed08d1340f67", "committedDate": "2020-04-15T17:18:12Z", "message": "Use toNanos() over toMillis due to truncation.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb50e065668b9290825dc7ec8e7f723540caa4b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/1fb50e065668b9290825dc7ec8e7f723540caa4b", "committedDate": "2020-04-15T17:19:08Z", "message": "Merge remote-tracking branch 'origin/issue-4273-ss-throttling-metrics' into issue-4273-ss-throttling-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deaa480a8d19f468e8046db2a5d8e42e89569b9a", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/deaa480a8d19f468e8046db2a5d8e42e89569b9a", "committedDate": "2020-04-15T18:03:00Z", "message": "Fix index used to test throttler name.\n\nSigned-off-by: co-jo <colin.hryniowski@unb.ca>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f31ddee9b819dda1c6709174c223ff0233fd65d7", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/f31ddee9b819dda1c6709174c223ff0233fd65d7", "committedDate": "2020-04-16T17:25:45Z", "message": "Merge branch 'master' into issue-4273-ss-throttling-metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3645, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}