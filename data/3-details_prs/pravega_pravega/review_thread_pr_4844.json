{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODQ1NTgz", "number": 4844, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MjoyNlrOECpgjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowMzowNVrOECtrrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjEyNjg3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/admin/StreamInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MjoyNlrOGfPCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjoyNDowNVrOGfeTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTMzMQ==", "bodyText": "I wouldn't say \"stream state\". Maybe at this point sealed is the only way to describe a Stream's state, but maybe in the future we want to add some other info. I would keep this simple. For example: \"Indicates whether the Stream is sealed (true) or not (false). If a stream is sealed, the no further Events can be written to it.\" ( <-- feel free to include any other operations that will be denied)", "url": "https://github.com/pravega/pravega/pull/4844#discussion_r435405331", "createdAt": "2020-06-04T16:52:26Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/admin/StreamInfo.java", "diffHunk": "@@ -45,4 +46,9 @@\n      * {@link StreamCut} representing the current HEAD of the stream.\n      */\n     private final StreamCut headStreamCut;\n+\n+    /**\n+     * Represents the stream state. It is set to True if the stream is Sealed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bfe3a76ecd6e436c1f146ebbcf970bf22fbbe3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NTYxNQ==", "bodyText": "thanks, improved the comment.", "url": "https://github.com/pravega/pravega/pull/4844#discussion_r435655615", "createdAt": "2020-06-05T02:24:05Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/admin/StreamInfo.java", "diffHunk": "@@ -45,4 +46,9 @@\n      * {@link StreamCut} representing the current HEAD of the stream.\n      */\n     private final StreamCut headStreamCut;\n+\n+    /**\n+     * Represents the stream state. It is set to True if the stream is Sealed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTMzMQ=="}, "originalCommit": {"oid": "41bfe3a76ecd6e436c1f146ebbcf970bf22fbbe3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjgxMDcxOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/io/pravega/client/admin/impl/StreamManagerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowMzowNVrOGfV2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMjozMDoxMFrOGfeZiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNzA2MA==", "bodyText": "What about calling getStreamInfo before sealStream and verify that info.isSealed() returns false?", "url": "https://github.com/pravega/pravega/pull/4844#discussion_r435517060", "createdAt": "2020-06-04T20:03:05Z", "author": {"login": "eolivelli"}, "path": "client/src/test/java/io/pravega/client/admin/impl/StreamManagerImplTest.java", "diffHunk": "@@ -127,9 +132,75 @@ public Void answer(InvocationOnMock invocation) throws Throwable {\n         assertNotNull(info.getHeadStreamCut());\n         assertEquals(stream, info.getHeadStreamCut().asImpl().getStream());\n         assertEquals(3, info.getHeadStreamCut().asImpl().getPositions().size());\n+        assertFalse(info.isSealed());\n     }\n-    \n-    @Test//(timeout = 10000) \n+\n+    @Test(timeout = 10000)\n+    public void testSealedStream() {\n+        final String streamName = \"stream\";\n+        final Stream stream = new StreamImpl(defaultScope, streamName);\n+\n+        // Setup Mocks\n+        MockConnectionFactoryImpl connectionFactory = new MockConnectionFactoryImpl();\n+        ClientConnection connection = mock(ClientConnection.class);\n+        PravegaNodeUri location = new PravegaNodeUri(\"localhost\", 0);\n+        Mockito.doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) throws Throwable {\n+                WireCommands.CreateSegment request = (WireCommands.CreateSegment) invocation.getArgument(0);\n+                connectionFactory.getProcessor(location)\n+                                 .process(new WireCommands.SegmentCreated(request.getRequestId(), request.getSegment()));\n+                return null;\n+            }\n+        }).when(connection).sendAsync(Mockito.any(WireCommands.CreateSegment.class),\n+                Mockito.any(ClientConnection.CompletedCallback.class));\n+\n+        Mockito.doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) throws Throwable {\n+                WireCommands.GetStreamSegmentInfo request = (WireCommands.GetStreamSegmentInfo) invocation.getArgument(0);\n+                connectionFactory.getProcessor(location)\n+                                 .process(new WireCommands.StreamSegmentInfo(request.getRequestId(), request.getSegmentName(), true,\n+                                         false, false, 0, 0, 0));\n+                return null;\n+            }\n+        }).when(connection).sendAsync(Mockito.any(WireCommands.GetStreamSegmentInfo.class),\n+                Mockito.any(ClientConnection.CompletedCallback.class));\n+        connectionFactory.provideConnection(location, connection);\n+        MockController mockController = spy(new MockController(location.getEndpoint(), location.getPort(),\n+                connectionFactory, true));\n+\n+        doReturn(CompletableFuture.completedFuture(true)).when(mockController).sealStream(defaultScope, streamName);\n+        StreamSegments empty = new StreamSegments(new TreeMap<>(), \"\");\n+        doReturn(CompletableFuture.completedFuture(empty) ).when(mockController).getCurrentSegments(defaultScope, streamName);\n+\n+        // Create a StreamManager\n+        @Cleanup\n+        final StreamManager streamManager = new StreamManagerImpl(mockController, connectionFactory);\n+\n+        // Create a scope and stream and seal it.\n+        streamManager.createScope(defaultScope);\n+        streamManager.createStream(defaultScope, streamName, StreamConfiguration.builder()\n+                                                                                .scalingPolicy(ScalingPolicy.fixed(3))\n+                                                                                .build());\n+        streamManager.sealStream(defaultScope, streamName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41bfe3a76ecd6e436c1f146ebbcf970bf22fbbe3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY1NzA5OQ==", "bodyText": "I have added an assert to verify that info.isSealed() returns false in the test io.pravega.client.admin.impl.StreamManagerImplTest#testStreamInfo.\nBased on this comment I have improved the integration test case ( io.pravega.test.integration.StreamRecreationTest#testStreamRecreation) to validate info.isSealed() before and after sealing the Stream", "url": "https://github.com/pravega/pravega/pull/4844#discussion_r435657099", "createdAt": "2020-06-05T02:30:10Z", "author": {"login": "shrids"}, "path": "client/src/test/java/io/pravega/client/admin/impl/StreamManagerImplTest.java", "diffHunk": "@@ -127,9 +132,75 @@ public Void answer(InvocationOnMock invocation) throws Throwable {\n         assertNotNull(info.getHeadStreamCut());\n         assertEquals(stream, info.getHeadStreamCut().asImpl().getStream());\n         assertEquals(3, info.getHeadStreamCut().asImpl().getPositions().size());\n+        assertFalse(info.isSealed());\n     }\n-    \n-    @Test//(timeout = 10000) \n+\n+    @Test(timeout = 10000)\n+    public void testSealedStream() {\n+        final String streamName = \"stream\";\n+        final Stream stream = new StreamImpl(defaultScope, streamName);\n+\n+        // Setup Mocks\n+        MockConnectionFactoryImpl connectionFactory = new MockConnectionFactoryImpl();\n+        ClientConnection connection = mock(ClientConnection.class);\n+        PravegaNodeUri location = new PravegaNodeUri(\"localhost\", 0);\n+        Mockito.doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) throws Throwable {\n+                WireCommands.CreateSegment request = (WireCommands.CreateSegment) invocation.getArgument(0);\n+                connectionFactory.getProcessor(location)\n+                                 .process(new WireCommands.SegmentCreated(request.getRequestId(), request.getSegment()));\n+                return null;\n+            }\n+        }).when(connection).sendAsync(Mockito.any(WireCommands.CreateSegment.class),\n+                Mockito.any(ClientConnection.CompletedCallback.class));\n+\n+        Mockito.doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) throws Throwable {\n+                WireCommands.GetStreamSegmentInfo request = (WireCommands.GetStreamSegmentInfo) invocation.getArgument(0);\n+                connectionFactory.getProcessor(location)\n+                                 .process(new WireCommands.StreamSegmentInfo(request.getRequestId(), request.getSegmentName(), true,\n+                                         false, false, 0, 0, 0));\n+                return null;\n+            }\n+        }).when(connection).sendAsync(Mockito.any(WireCommands.GetStreamSegmentInfo.class),\n+                Mockito.any(ClientConnection.CompletedCallback.class));\n+        connectionFactory.provideConnection(location, connection);\n+        MockController mockController = spy(new MockController(location.getEndpoint(), location.getPort(),\n+                connectionFactory, true));\n+\n+        doReturn(CompletableFuture.completedFuture(true)).when(mockController).sealStream(defaultScope, streamName);\n+        StreamSegments empty = new StreamSegments(new TreeMap<>(), \"\");\n+        doReturn(CompletableFuture.completedFuture(empty) ).when(mockController).getCurrentSegments(defaultScope, streamName);\n+\n+        // Create a StreamManager\n+        @Cleanup\n+        final StreamManager streamManager = new StreamManagerImpl(mockController, connectionFactory);\n+\n+        // Create a scope and stream and seal it.\n+        streamManager.createScope(defaultScope);\n+        streamManager.createStream(defaultScope, streamName, StreamConfiguration.builder()\n+                                                                                .scalingPolicy(ScalingPolicy.fixed(3))\n+                                                                                .build());\n+        streamManager.sealStream(defaultScope, streamName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNzA2MA=="}, "originalCommit": {"oid": "41bfe3a76ecd6e436c1f146ebbcf970bf22fbbe3"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4365, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}