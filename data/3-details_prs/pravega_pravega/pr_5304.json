{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1OTI5OTMy", "number": 5304, "title": "Issue 5114: Update the StreamCut for lastCheckpoint to Controller, once reader has moved past it", "bodyText": "Signed-off-by: pbelgundi prajakta.belgundi@emc.com\nChange log description\nThis PR has code changes for publishing truncation Stream-Cut to Controller which can be used for Consumption Based Retention of data in the Stream. The truncation StreamCut can be provided manually by the user by invoking Client API updateRetentionStreamCut(Map<Stream, StreamCut> scMap) or auto-published when a Reader reads past the Last Completed Checkpoint.\nPurpose of the change\nFixes #5114\nWhat the code does\n\n\nAdds a new enum type to ReaderGroupConfig with values as follows:\nNONE - Set when the reader's positions of this Reader Group should not impact Stream retention.\nMANUAL_RELEASE_AT_USER_STREAMCUT - User provides a Stream-Cut to mark position in the Stream till which data is consumed using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\nAUTOMATIC_RELEASE_AT_LAST_CHECKPOINT - Stream-Cut of the last completed checkpoint is used as the retention Stream-Cut.\n\n\nAdds a new public API on client : updateRetentionStreamCut(Map<Stream, StreamCut> scMap) used to publish user Stream-Cuts to Controller\n\n\nAdds a new method updateTruncationStreamCut() that publishes the Stream-Cuts corresponding to the last completed checkpoint to Controller as truncation Stream-Cuts, when a Reader tries reading past the last checkpoint.\n\n\nHow to verify it\nAll Unit and Integration Tests should pass.", "createdAt": "2020-11-05T09:42:08Z", "url": "https://github.com/pravega/pravega/pull/5304", "merged": true, "mergeCommit": {"oid": "1b89ac7d57fff6c39cf57f27468ff32f4ec19382"}, "closed": true, "closedAt": "2020-11-24T09:14:20Z", "author": {"login": "pbelgundi"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZe_FeAH2gAyNTE1OTI5OTMyOmUwNzVkMjZhODExOTliMGE4MmYxOWViMjliMDBiOTA3Y2UyMDkyMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfiubHABqjQwMzA4NTIyNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e075d26a81199b0a82f19eb29b00b907ce209230", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/e075d26a81199b0a82f19eb29b00b907ce209230", "committedDate": "2020-11-05T09:31:24Z", "message": "first draft for CBR autoTruncate\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44cc5a68992844afbdd93cefcbbadd71e209b6a0", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/44cc5a68992844afbdd93cefcbbadd71e209b6a0", "committedDate": "2020-11-05T10:03:16Z", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad", "committedDate": "2020-11-06T05:22:05Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2ODU3ODg0", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-526857884", "createdAt": "2020-11-10T05:12:52Z", "commit": {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToxMjo1M1rOHwMA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyMjo1MVrOHwMLww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MDU0MA==", "bodyText": "this config also seems to be part of anirudh's PR. can we ensure that we consolidate it.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520290540", "createdAt": "2020-11-10T05:12:53Z", "author": {"login": "shiveshr"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +49,28 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final ReaderGroupRetentionConfig retentionConfig;\n+\n+    public enum ReaderGroupRetentionConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MTgwNg==", "bodyText": "i gave the same comment on the other PR -- do we want to make it an enum?\nalso \"truncate at user streamcut\" as the enum value is confusion from the end users perspective.. what is a user streamcut?\ni suggested that we use two booleans.\n\nsubscribeForRetention\nacknowledge last checkpoint\nand to ensure that 2 is only available to be set when 1 is true, we can use builder methods and hide the setters for individual booleans.\n\nfor example:\nReaderGroupConfigBuilder {\n...\n   ReadGroupConfigBuilder subscribe(boolean acknowledgeAtCheckpoints) {\n       this.subscribe = true;\n       this.acknowledgeAtCheckpoints = acknowledgeAtCheckpoints;\n       return this;\n   }\n}", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520291806", "createdAt": "2020-11-10T05:17:23Z", "author": {"login": "shiveshr"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +49,28 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final ReaderGroupRetentionConfig retentionConfig;\n+\n+    public enum ReaderGroupRetentionConfig {\n+        NO_CONSUMPTION_BASED_TRUNCATION(false, false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MjY1Mw==", "bodyText": "are all readers reporting this streamcut? what happens if this fails\n\nbecause of intermittent issues\nbecause the reader was reporting a stale value and a newer value was already published to controller", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520292653", "createdAt": "2020-11-10T05:20:32Z", "author": {"login": "shiveshr"}, "path": "client/src/main/java/io/pravega/client/stream/impl/EventStreamReaderImpl.java", "diffHunk": "@@ -258,10 +259,12 @@ private PositionInternal getCurrentPosition() {\n     private String updateGroupStateIfNeeded() throws ReaderNotInReaderGroupException {\n         PositionInternal position = null;\n         if (atCheckpoint != null) {\n+            // process the checkpoint we're at\n             position = refreshAndGetPosition();\n             groupState.checkpoint(atCheckpoint, position);\n             log.info(\"Reader {} completed checkpoint {}\", groupState.getReaderId(), atCheckpoint);\n             releaseSegmentsIfNeeded(position);\n+            groupState.updateTruncationStreamCutIfNeeded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MzMxNQ==", "bodyText": "map followed by foreach is two passes..\nwe can simply do it in one pass with foreach where you do the transformation and then call update subscriber streamcut.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r520293315", "createdAt": "2020-11-10T05:22:51Z", "author": {"login": "shiveshr"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +472,27 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.ReaderGroupRetentionConfig.TRUNCATE_AT_LAST_CHECKPOINT)\n+        && !state.getCheckpointState().isLastCheckpointPublished()) {\n+            // we get here only when this is the reader that has completed the lastCheckpoint\n+            Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n+            if (!cuts.isPresent()) {\n+                throw new CheckpointFailedException(\"Could not get positions for last checkpoint.\");\n+            }\n+            Set<StreamCut> streamCuts = cuts.get().entrySet().stream()\n+                    .map(entry -> new StreamCutImpl(entry.getKey(), entry.getValue()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8be06a0ab6b8daf2b5f316aaf06f475cf12aad"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972f187fd53f8808dbec4fdea2ec1d19e419540e", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/972f187fd53f8808dbec4fdea2ec1d19e419540e", "committedDate": "2020-11-10T05:30:26Z", "message": "code changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76e3a5be72635262f95b48d85880fe27954f4e12", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/76e3a5be72635262f95b48d85880fe27954f4e12", "committedDate": "2020-11-10T05:30:45Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4", "committedDate": "2020-11-10T11:09:31Z", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQ2MTY5", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-527846169", "createdAt": "2020-11-11T04:02:08Z", "commit": {"oid": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDowMjowOFrOHw9UdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDowNDowMVrOHw9WGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODM1Nw==", "bodyText": "This logic is incorrect. You don't need to re-serialize all the previous fields.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521098357", "createdAt": "2020-11-11T04:02:08Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -304,6 +334,29 @@ private void write01(ReaderGroupConfig object, RevisionDataOutput revisionDataOu\n             revisionDataOutput.writeMap(object.endingStreamCuts, keySerializer, valueSerializer);\n             revisionDataOutput.writeInt(object.getMaxOutstandingCheckpointRequest());\n         }\n+\n+        private void read02(RevisionDataInput revisionDataInput, ReaderGroupConfigBuilder builder) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODUzMQ==", "bodyText": "Why is the old version being changed?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521098531", "createdAt": "2020-11-11T04:02:51Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java", "diffHunk": "@@ -255,11 +265,35 @@ private void read00(RevisionDataInput input, CheckpointStateBuilder builder) thr\n         private void write00(CheckpointState object, RevisionDataOutput output) throws IOException {\n             ElementSerializer<String> stringSerializer = RevisionDataOutput::writeUTF;\n             ElementSerializer<Long> longSerializer = RevisionDataOutput::writeLong;\n+            ElementSerializer<Boolean> boolSerializer = RevisionDataOutput::writeBoolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODc3OA==", "bodyText": "This is not a good use of sneakythrows. (See our contributing guidelines)", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521098778", "createdAt": "2020-11-11T04:04:01Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +470,25 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39dec4beb1cef720c3b0d898c27d3d5b1b5cb0b4"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "252de5545e914d924ab7b5445127bea1640fa9fd", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/252de5545e914d924ab7b5445127bea1640fa9fd", "committedDate": "2020-11-11T11:22:06Z", "message": "unit tests\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457e90dc65beebf9774553f5ec361eb872821e85", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/457e90dc65beebf9774553f5ec361eb872821e85", "committedDate": "2020-11-11T16:09:13Z", "message": "minor changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzQwMDQ1", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-528340045", "createdAt": "2020-11-11T16:35:23Z", "commit": {"oid": "457e90dc65beebf9774553f5ec361eb872821e85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/8f9349e7131c3e35c85fea89d2784ac866ca1610", "committedDate": "2020-11-11T16:53:22Z", "message": "code review comment fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTY5MTg5", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-528569189", "createdAt": "2020-11-11T22:05:25Z", "commit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjowNToyNVrOHxf_kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjowNToyNVrOHxf_kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NjQ1MA==", "bodyText": "Same situation here.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521666450", "createdAt": "2020-11-11T22:05:25Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java", "diffHunk": "@@ -259,7 +268,28 @@ private void write00(CheckpointState object, RevisionDataOutput output) throws I\n             output.writeCollection(object.checkpoints, stringSerializer);\n             output.writeMap(object.uncheckpointedHosts, stringSerializer, (out, hosts) -> out.writeCollection(hosts, stringSerializer));\n             output.writeMap(object.checkpointPositions, stringSerializer, (out, map) -> out.writeMap(map, segmentSerializer, longSerializer));\n+        }\n+\n+        private void read01(RevisionDataInput input, CheckpointStateBuilder builder) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NzMzNzM4", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-528733738", "createdAt": "2020-11-12T03:58:33Z", "commit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo1ODozM1rOHxpXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDoyODo1MVrOHxqHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxOTkyNw==", "bodyText": "Nit: I think we need to communicate that this retention config applies to all the streams the reader is attempting to read from.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521819927", "createdAt": "2020-11-12T03:58:33Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +195,17 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMDc2MA==", "bodyText": "If there is compaction then the isLastCheckpointPublished would be set to true, even though it was never published. This would be an issue right ?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521830760", "createdAt": "2020-11-12T04:23:00Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/impl/CheckpointState.java", "diffHunk": "@@ -206,7 +215,7 @@ CheckpointState copy() {\n         Map<String, Map<Segment, Long>> cpps = new HashMap<>();\n         checkpointPositions.forEach((cp, pos) -> cpps.put(cp, new HashMap<>(pos)));\n         Map<Segment, Long> lcp = lastCheckpointPosition == null ? null : new HashMap<>(lastCheckpointPosition);\n-        return new CheckpointState(cps, ucph, cpps, lcp);\n+        return new CheckpointState(cps, ucph, cpps, lcp, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjA0NQ==", "bodyText": "nit: cuts.isEmpty()", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521832045", "createdAt": "2020-11-12T04:28:10Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +470,25 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n+        && !state.getCheckpointState().isLastCheckpointPublished()) {\n+            // we get here only when this is the reader that has completed the lastCheckpoint\n+            Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n+            if (!cuts.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzMjIyMg==", "bodyText": "Nit: No need of stream(). cuts.get().entrySet().forEach(..)", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r521832222", "createdAt": "2020-11-12T04:28:51Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -462,7 +470,25 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.RetentionConfig.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)\n+        && !state.getCheckpointState().isLastCheckpointPublished()) {\n+            // we get here only when this is the reader that has completed the lastCheckpoint\n+            Optional<Map<Stream, Map<Segment, Long>>> cuts = state.getPositionsForLastCompletedCheckpoint();\n+            if (!cuts.isPresent()) {\n+                throw new CheckpointFailedException(\"Could not get positions for last checkpoint.\");\n+            }\n+            cuts.get().entrySet().stream().forEach(entry ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f9349e7131c3e35c85fea89d2784ac866ca1610"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/0fce61c3e28c6ece0895ee7678a3aaa1b6d52bc1", "committedDate": "2020-11-12T05:58:51Z", "message": "minor changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b555fb8e5c8b5038414edcdd8271341e9de58f18", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/b555fb8e5c8b5038414edcdd8271341e9de58f18", "committedDate": "2020-11-12T06:14:08Z", "message": "code review changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4Nzg5NTQw", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-528789540", "createdAt": "2020-11-12T06:48:51Z", "commit": {"oid": "b555fb8e5c8b5038414edcdd8271341e9de58f18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb2bbe0bbf8cd3e1aca44bffbde183ceecb72e25", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/cb2bbe0bbf8cd3e1aca44bffbde183ceecb72e25", "committedDate": "2020-11-13T04:46:49Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDM1OTA2", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-530435906", "createdAt": "2020-11-13T21:46:15Z", "commit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo0NjoxNVrOHzAlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTo1MToyN1rOHzAtWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0ODk5NA==", "bodyText": "I hate to be pedantic, but this is public facing Javadoc, so I really want to nail it.\n\"this enum indicate if a ReaderGroup chooses Consumption based data retention\"\nThis is not strictly accurate. The setting is actually on the stream so the reader group cannot \"choose\" consumption based retention. This only configures how this reader group interacts with the setting.\nLet's make this explanation as precise as possible, and probably link to the Stream configuration setting so that users can locate it easily.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523248994", "createdAt": "2020-11-13T21:46:15Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0OTU4Ng==", "bodyText": "\"For Consumption based retention to work...\"\nAs this is specified on the ReaderGroup and the group may have multiple streams with different settings this should be more explicit. Spell out what happens if it is not enabled on the stream.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523249586", "createdAt": "2020-11-13T21:47:39Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n+     * For Consumption based retention to work, in addition to setting the appropriate value here,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI0OTc1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n          \n          \n            \n                 * NO_IMPACT - Read Positions of Readers do not impact Stream retention.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523249757", "createdAt": "2020-11-13T21:48:06Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n+     * For Consumption based retention to work, in addition to setting the appropriate value here,\n+     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MDQ3MA==", "bodyText": "As this setting only affects consumption based retention, having it in the name is somewhat redundant.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523250470", "createdAt": "2020-11-13T21:49:53Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,37 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * The values of this enum indicate if a ReaderGroup chooses Consumption based data retention for Streams it reads from.\n+     * For Consumption based retention to work, in addition to setting the appropriate value here,\n+     * the Streams' Retention Policy must be set to 'CONSUMPTION'.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - ConsumptionBasedRetention, user provides the StreamCut for truncation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1MTAzNQ==", "bodyText": "\"should be set to\" is not helpful.\nSpecify what happens with each setting including NO_IMPACT", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r523251035", "createdAt": "2020-11-13T21:51:27Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +204,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dac11d23c5975864c3d1218443953c3609d90bb", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/0dac11d23c5975864c3d1218443953c3609d90bb", "committedDate": "2020-11-17T06:59:29Z", "message": "code review javadoc comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/8598e98a7e17f5025417d50975bc4b7231e932a8", "committedDate": "2020-11-17T06:59:48Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "author": {"user": {"login": "tkaitchuck", "name": "Tom Kaitchuck"}}, "url": "https://github.com/pravega/pravega/commit/ed5905064b1175e5e91f9b0406c4fe9bfa7c27a0", "committedDate": "2020-11-13T19:10:36Z", "message": "Merge branch 'master' into issue-5114-streamcut-publish"}, "afterCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/8598e98a7e17f5025417d50975bc4b7231e932a8", "committedDate": "2020-11-17T06:59:48Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzE3NDY5", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-532717469", "createdAt": "2020-11-17T19:21:41Z", "commit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOToyMTo0MVrOH1FcfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo1MjoxMFrOH1HQ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQyNTc4OQ==", "bodyText": "the Reader Group needs to register with the Stream as a Subscriber\nThis is simply not true.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525425789", "createdAt": "2020-11-17T19:21:41Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMDkxNg==", "bodyText": "Please do not use the word \"subscriber\" in this way, as it will confuse users.\nSimilarly \"register\" implies additional follow up questions like \"do I need to unregister?\", \"how do I do that?\" etc.\nThis should only explain what the user needs to know, not how it is implemented.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525430916", "createdAt": "2020-11-17T19:30:00Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjQxNQ==", "bodyText": "If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n\n\n\"Consumption based\" is not clear. Please link to the exact setting explicitly.\n\"should be 'NO_IMPACT'\" is a meaningless detective. We should say that this setting will have no effect regardless of what it is set to.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525432415", "createdAt": "2020-11-17T19:32:36Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzMjc4Mw==", "bodyText": "\"Consumption based\" is not clear. Please link to the exact setting explicitly.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525432783", "createdAt": "2020-11-17T19:33:15Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNDM4OQ==", "bodyText": "This will break the promise of ConsumptionBased Retention.\n\nWhat!?!?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525434389", "createdAt": "2020-11-17T19:34:46Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQzNTcxOA==", "bodyText": "Please do not use the word \"published\" it has other connotations.\nAdditionally there is no need to explain the implementation. Stick to explaining the effect on the user's application.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525435718", "createdAt": "2020-11-17T19:35:52Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MDgzOQ==", "bodyText": "Currently the only retention policies are \"time\" and \"size\". Do you mean to modify this file in this PR?\nThis should link to the actual policy not leave people to track it down themselves.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525440839", "createdAt": "2020-11-17T19:40:09Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MjkyOQ==", "bodyText": "User provides the StreamCut for truncation using Consumption Based Retention.\n\nThis should link to the API through which it is provided.\nThe streamcut is not \"for truncation\".", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525442929", "createdAt": "2020-11-17T19:41:54Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0NDgzMg==", "bodyText": "Not a truncation point.\nHere and elsewhere don't say \"for Consumption Based Retention\" refer to the specific stream configuration policy. Users don't know our PDPs or internal names for things.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525444832", "createdAt": "2020-11-17T19:43:29Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MTA4MA==", "bodyText": "This method does not need to be public.\nShouldn't there be an API method on ReaderGroup that calls this?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525451080", "createdAt": "2020-11-17T19:48:30Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -463,7 +470,23 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA==", "bodyText": "Why do we check just CONSUMPTION_BASED_AT_LAST_CHECKPOINT\nIs it invalid to set CONSUMPTION_BASED_USER_STREAMCUT and call this method? If so why? There is no inconsistency.\nAdditionally if the user is making a mistake if this is set to \"no_impact\" should it silently do nothing or throw?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525452558", "createdAt": "2020-11-17T19:49:44Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -463,7 +470,23 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1NTYwNA==", "bodyText": "\"CONSUMPTION_BASED_USER_STREAMCUT\" reflects how it is being used. This is fine in most code, but this is our public API, so everything should reflect the user's perspective.\nSo something like \"HOLD_DATA_UNTIL_RELEASED\" or similar depending on the name of the api they are calling (this example is assuming the method were to be called \"releaseDataBefore(streamCut)\" or similar).", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r525455604", "createdAt": "2020-11-17T19:52:10Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,45 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to 'CONSUMPTION' based,\n+     * the Reader Group needs to register with the Stream as a Subscriber\n+     * and periodically publish retention StreamCuts either manually or at checkpoints.\n+     * This can be done by setting retentionConfig to 'CONSUMPTION_BASED_USER_STREAMCUT' or\n+     * 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If the Stream's RetentionPolicy is not Consumption based, retentionConfig should be 'NO_IMPACT'.\n+     *\n+     * If the Streams' Retention Policy is set to 'CONSUMPTION', but the ReaderGroup retentionConfig is set at\n+     * 'NO_IMPACT', the ReaderGroup will not get registered as a Subscriber with the Stream\n+     * and retention StreamCuts cannot be published for this ReaderGroup.\n+     * This will break the promise of ConsumptionBased Retention.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is published as truncation point for Consumption Based Retention.\n+     * */\n+    public enum StreamDataRetention {\n+        NO_IMPACT(false, false),\n+        CONSUMPTION_BASED_USER_STREAMCUT(true, false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/27d4ec0a27802de41f9869e6cf421f7f68bdc6e4", "committedDate": "2020-11-18T07:27:02Z", "message": "code review  fixes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac698ae9558f1d3050aeea7929b7c7f0b73a113", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/fac698ae9558f1d3050aeea7929b7c7f0b73a113", "committedDate": "2020-11-18T07:27:20Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "038000a27b910c9bb1c758455c0f3dcd470519ca", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/038000a27b910c9bb1c758455c0f3dcd470519ca", "committedDate": "2020-11-18T07:32:36Z", "message": "javadoc changes\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb360a85d1fbe3f214b4b28fc2da52dae54149b3", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/fb360a85d1fbe3f214b4b28fc2da52dae54149b3", "committedDate": "2020-11-18T07:49:05Z", "message": "javadoc improvements\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "516a3c12453823cdd34ccc5392fc6e4d8b5791be", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/516a3c12453823cdd34ccc5392fc6e4d8b5791be", "committedDate": "2020-11-18T10:52:37Z", "message": "javadoc fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/29b2cbc29ac16fadb84116f1b63861e8a549eb08", "committedDate": "2020-11-18T15:16:36Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzODM3NzEz", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-533837713", "createdAt": "2020-11-18T20:14:53Z", "commit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxNDo1NFrOH2ATqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoyOTozOFrOH2A7Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MDE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n          \n          \n            \n                 * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n          \n          \n            \n                 * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION} ,", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526390184", "createdAt": "2020-11-18T20:14:54Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5MjI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n          \n          \n            \n                 * the point in the Stream till which it has completed consuming data.\n          \n          \n            \n                 * the Reader Group may supply StreamCuts which indicate\n          \n          \n            \n                 * the point through which it no longer requires data be retained.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526392252", "createdAt": "2020-11-18T20:17:54Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n          \n          \n            \n                 * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n          \n          \n            \n                 * This can be done automatically at each checkpoint by setting the `retentionConfig` to {@link ReaderGroupConfig#CONSUMPTION_BASED_AT_LAST_CHECKPOINT}.\n          \n          \n            \n                 * Alternatively the ReaderGroup can request the data be held until {@link  ... } is called by setting `retentionConfig` to {@link ReaderGroupConfig#CONSUMPTION_BASED_USER_STREAMCUT}.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526397009", "createdAt": "2020-11-18T20:23:46Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5NzcwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n          \n          \n            \n                 * If the ReaderGroup does not wish to affect retention {@ReaderGroupConfig#NO_IMPACT} can be used.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526397708", "createdAt": "2020-11-18T20:24:59Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5ODU3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n          \n          \n            \n                 * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n          \n          \n            \n                 * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n          \n          \n            \n                 * and so Consumption based retention of data in the Stream would not happen.\n          \n      \n    \n    \n  \n\nA stream may have multiple reader groups, where one wishes to retain the data explicitly and the other does not care. This is an important usecase.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526398578", "createdAt": "2020-11-18T20:26:28Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     *\n+     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n+     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n+     * and so Consumption based retention of data in the Stream would not happen.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM5OTQ4MA==", "bodyText": "I think we can eliminate these separate bullets if we explain each in the paragraph above.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526399480", "createdAt": "2020-11-18T20:28:06Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     *\n+     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when\n+     * a Streams' Retention Policy = 'CONSUMPTION' {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * because with NO_IMPACT the ReaderGroup will not notify consumption Stream-Cuts to Controller\n+     * and so Consumption based retention of data in the Stream would not happen.\n+     *\n+     * NO_IMPACT - Read Positions of Readers do not impact Stream truncation/retention.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides the StreamCut for truncation using Consumption Based Retention.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut for Consumption Based Retention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDA2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    * For Consumption based retention of data in the Stream, this field should be set to\n          \n          \n            \n                    * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n          \n      \n    \n    \n  \n\nAgain it is valid for a stream to enable CBR and for one reader group to not take advantage of it.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526400068", "createdAt": "2020-11-18T20:29:14Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +213,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to\n+        * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDMxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.\n          \n          \n            \n                    * Default value: NO_IMPACT.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526400319", "createdAt": "2020-11-18T20:29:38Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +213,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to\n+        * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.\n+        * Default value NO_IMPACT, is to be used when Stream's RetentionPolicy is not Consumption based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTA3MTg1", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-533907185", "createdAt": "2020-11-18T21:49:26Z", "commit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMTo0OToyNlrOH2Do0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMjowMDo1M1rOH2EDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0NDc1NA==", "bodyText": "Does it throw if the application tries to set it that way? How do we communicate to the application that it is making a mistake?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526444754", "createdAt": "2020-11-18T21:49:26Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * If a Stream's Retention Policy is not Consumption based the ReaderGroupConfig should have retentionConfig = 'NO_IMPACT'.\n+     *\n+     * Note: It is incorrect to set ReaderGroup retentionConfig = 'NO_IMPACT' when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ0OTE5MQ==", "bodyText": "Could we simplify the terminology and say something like MANUAL vs. AUTOMATIC, and explain what the options mean?", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526449191", "createdAt": "2020-11-18T21:56:49Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,\n+     * the Reader Group needs to periodically notify StreamCuts to Controller to indicate\n+     * the point in the Stream till which it has completed consuming data.\n+     * This can be done by setting the retentionConfig in ReaderGroupConfig {@link ReaderGroupConfig}\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ1MTYxMg==", "bodyText": "I'm wondering about the use of the term CONSUMPTION for retention and whether it is going to be confusing to the user. Would terms like ACKNOWLEDGED, CONFIRMED or ASSURED be any better? I don't feel strongly about it at this point, but I want to have a discussion about it.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r526451612", "createdAt": "2020-11-18T22:00:53Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,46 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy {@link RetentionPolicy} is set to\n+     * 'CONSUMPTION' based retention {@link RetentionPolicy.RetentionType#CONSUMPTION} ,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/2f0ee2173cf3d106949b4d6fa00b0eacc2284921", "committedDate": "2020-11-19T06:44:20Z", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45a5a2f6b25e79f243dfccf453055332b278d3a9", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/45a5a2f6b25e79f243dfccf453055332b278d3a9", "committedDate": "2020-11-19T06:57:47Z", "message": "added config check for user streamcut\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc55e220735933b49ee8f348ce4929dd335494db", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/dc55e220735933b49ee8f348ce4929dd335494db", "committedDate": "2020-11-19T08:54:50Z", "message": "tests for new code\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acc16b9c855c3d85beec1cc161bc11750c5df9a0", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/acc16b9c855c3d85beec1cc161bc11750c5df9a0", "committedDate": "2020-11-19T09:47:33Z", "message": "checkstyle fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ec31ef16f98fcce4bfa6c474370a8397be4f66", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/d2ec31ef16f98fcce4bfa6c474370a8397be4f66", "committedDate": "2020-11-19T09:47:47Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa63028e3c27db77033c39f6e2f7213c7eb90b27", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/aa63028e3c27db77033c39f6e2f7213c7eb90b27", "committedDate": "2020-11-19T11:58:27Z", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da8734600f7fe8a578370d1d72b550e342cd4e48", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/da8734600f7fe8a578370d1d72b550e342cd4e48", "committedDate": "2020-11-19T14:19:44Z", "message": "changes for javadoc improvements\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e4b37f5ea1fea0638e61c2f5ef1195172da6312", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/2e4b37f5ea1fea0638e61c2f5ef1195172da6312", "committedDate": "2020-11-19T14:19:59Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846cfcf9b5d34956b038e067c40b7e69cfa9a868", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/846cfcf9b5d34956b038e067c40b7e69cfa9a868", "committedDate": "2020-11-19T14:34:06Z", "message": "javadoc comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzQ0NDM4", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-534744438", "createdAt": "2020-11-19T18:42:53Z", "commit": {"oid": "846cfcf9b5d34956b038e067c40b7e69cfa9a868"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ea6d96aed10a9fdb7e85b800cfa312fce1069f", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/59ea6d96aed10a9fdb7e85b800cfa312fce1069f", "committedDate": "2020-11-20T04:11:18Z", "message": "code review comments addressed\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/4934affc310a245a2ea44bdfc458254773eef736", "committedDate": "2020-11-20T07:20:07Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzE0OTc5", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-535714979", "createdAt": "2020-11-20T19:22:49Z", "commit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOToyMjo0OVrOH3d2Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxOTo0MDo1NlrOH3eY6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMjc5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * and the user expects reads from this Reader Group to impact data retention in the Stream,\n          \n          \n            \n                 * the retentionConfig in {@link ReaderGroupConfig} should be set to\n          \n          \n            \n                 * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n          \n          \n            \n                 * and the the {@link ReaderGroupConfigBuilder#setRetentionConfig retentionConfig} is set \n          \n          \n            \n                 * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT',\n          \n          \n            \n                 * the reader group can extend data retention for the Stream.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527922791", "createdAt": "2020-11-20T19:22:49Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMzIzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n          \n          \n            \n                 * in the Stream, so only un-consumed data can be retained.\n          \n          \n            \n                 * Setting these options implies the Reader Group will supply its consumption {@link StreamCut},\n          \n          \n            \n                 * so only un-consumed data can be retained.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527923231", "createdAt": "2020-11-20T19:23:48Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyMzgxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n          \n          \n            \n                 * so consumption position notifications are not sent to Controller.\n          \n          \n            \n                 * If a Stream's Retention Policy is 'TIME' or 'SPACE' based the ReaderGroupConfig will have no effect.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527923815", "createdAt": "2020-11-20T19:25:03Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDQzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n          \n          \n            \n                 * NO_IMPACT - Set when the reader's positions of this Reader Group should not impact Stream retention.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527924430", "createdAt": "2020-11-20T19:26:21Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.\n+     *\n+     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNDkxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *             Set this value when :\n          \n          \n            \n                 *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n          \n          \n            \n                 *             but this Reader group does *not* want its reads to impact Stream data retention.\n          \n          \n            \n                 *             OR\n          \n          \n            \n                 *             b. Stream Retention policy is TIME/SPACE based.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527924910", "createdAt": "2020-11-20T19:27:20Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.\n+     *\n+     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but this Reader group does *not* want its reads to impact Stream data retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNTY3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.\n          \n          \n            \n                 * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut of the last completed checkpoint is used as the retention Stream-Cut.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527925678", "createdAt": "2020-11-20T19:28:56Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,48 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionConfig;\n+\n+    /**\n+     * If a Stream's Retention Policy is set to {@link RetentionPolicy.RetentionType#CONSUMPTION},\n+     * and the user expects reads from this Reader Group to impact data retention in the Stream,\n+     * the retentionConfig in {@link ReaderGroupConfig} should be set to\n+     * to 'CONSUMPTION_BASED_USER_STREAMCUT' or 'CONSUMPTION_BASED_AT_LAST_CHECKPOINT'.\n+     * Setting these options implies the Reader Group will notify the Controller of its consumption position {@link StreamCut}\n+     * in the Stream, so only un-consumed data can be retained.\n+     * This notification can be manual ('CONSUMPTION_BASED_USER_STREAMCUT') or automatic ('CONSUMPTION_BASED_AT_LAST_CHECKPOINT')\n+     * If a Stream's Retention Policy is TIME/SPACE based the ReaderGroupConfig should have retentionConfig='NO_IMPACT',\n+     * so consumption position notifications are not sent to Controller.\n+     *\n+     * NO_IMPACT - Set when read positions of this Reader Group are not expected to impact Stream truncation/retention.\n+     *             Set this value when :\n+     *             a. Stream Retention Policy = \"CONSUMPTION\" {@link RetentionPolicy.RetentionType#CONSUMPTION}\n+     *             but this Reader group does *not* want its reads to impact Stream data retention.\n+     *             OR\n+     *             b. Stream Retention policy is TIME/SPACE based.\n+     * CONSUMPTION_BASED_USER_STREAMCUT - User provides StreamCut to mark consumption boundary on the Stream using {@link ReaderGroup#updateRetentionStreamCut(java.util.Map) } API.\n+     * CONSUMPTION_BASED_AT_LAST_CHECKPOINT - StreamCut corresponding to lastCompletedCheckpoint is auto-notified as truncation Stream-Cut to Controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4934affc310a245a2ea44bdfc458254773eef736"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkyNjI4Ng==", "bodyText": "Ok. Then please remove these two lines.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527926286", "createdAt": "2020-11-20T19:30:09Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -177,6 +213,20 @@ public ReaderGroupConfigBuilder startFromCheckpoint(final Checkpoint checkpoint)\n            return this;\n        }\n \n+       /**\n+        * Set the retention config for the {@link ReaderGroup}.\n+        * For Consumption based retention of data in the Stream, this field should be set to\n+        * CONSUMPTION_BASED_USER_STREAMCUT or CONSUMPTION_BASED_AT_LAST_CHECKPOINT.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQwMDA2OA=="}, "originalCommit": {"oid": "29b2cbc29ac16fadb84116f1b63861e8a549eb08"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzkzMTYyNg==", "bodyText": "This can be disallowed,\n\nThe code here is not disallowing this. It should either work and pass the data to the controller or actually enforce that it is disallowed by throwing an exception.\n\nThe system behaves as per the retentionConfig option chosen by the user.\n\nIt is not. The docs do not explain what happens if CONSUMPTION_BASED_USER_STREAMCUT is specified and this method is invoked. If that is invalid then this must throw. If it is valid it must work. Silently ignoring the call violates either assumption.", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r527931626", "createdAt": "2020-11-20T19:40:56Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupStateManager.java", "diffHunk": "@@ -463,7 +470,23 @@ void checkpoint(String checkpointName, PositionInternal lastPosition) throws Rea\n     boolean isCheckpointSilent(String atCheckpoint) {\n         return sync.getState().getCheckpointState().isCheckpointSilent(atCheckpoint);\n     }\n-    \n+\n+    @SneakyThrows(CheckpointFailedException.class)\n+    public void updateTruncationStreamCutIfNeeded() {\n+        ReaderGroupState state = sync.getState();\n+        // here add check if RG is Subscriber and autoPublishTruncationStreamCut = true\n+        if (state.getConfig().getRetentionConfig().equals(ReaderGroupConfig.StreamDataRetention.CONSUMPTION_BASED_AT_LAST_CHECKPOINT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MjU1OA=="}, "originalCommit": {"oid": "8598e98a7e17f5025417d50975bc4b7231e932a8"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/f88c4b7678d00590b15afbfa98fd4c908c4c8ccc", "committedDate": "2020-11-23T13:19:57Z", "message": "code review comments addressed\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "committedDate": "2020-11-23T13:20:16Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c6cad2dcaf02bfbc66ffd86726bb340be18a93f", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/4c6cad2dcaf02bfbc66ffd86726bb340be18a93f", "committedDate": "2020-11-23T08:04:36Z", "message": "Merge branch 'master' into issue-5114-streamcut-publish"}, "afterCommit": {"oid": "a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/a6b4baa04e26a9b21ac1364ce5862dca669ddf36", "committedDate": "2020-11-23T13:20:16Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b8f3a4aeee718ee9a41d25108b93ca5fd7a425", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/93b8f3a4aeee718ee9a41d25108b93ca5fd7a425", "committedDate": "2020-11-23T13:36:17Z", "message": "javadoc update\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39da9f884df2e5393b2d90757f4c033045da72eb", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/39da9f884df2e5393b2d90757f4c033045da72eb", "committedDate": "2020-11-23T16:38:05Z", "message": "test fix\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2ODE0MTY4", "url": "https://github.com/pravega/pravega/pull/5304#pullrequestreview-536814168", "createdAt": "2020-11-23T20:17:57Z", "commit": {"oid": "39da9f884df2e5393b2d90757f4c033045da72eb"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxNzo1OFrOH4d14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxNzo1OFrOH4d14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MTIzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If a Reader Group wants only unconsumed data to be retained in a Stream,\n          \n          \n            \n                 * If a Reader Group wants unconsumed data to be retained in a Stream,", "url": "https://github.com/pravega/pravega/pull/5304#discussion_r528971234", "createdAt": "2020-11-23T20:17:58Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/ReaderGroupConfig.java", "diffHunk": "@@ -49,11 +50,34 @@\n \n     private final int maxOutstandingCheckpointRequest;\n \n+    private final StreamDataRetention retentionType;\n+\n+    /**\n+     * If a Reader Group wants only unconsumed data to be retained in a Stream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39da9f884df2e5393b2d90757f4c033045da72eb"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb1169cfa0d59d882bbba12fcfb8a5cd7132148a", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/cb1169cfa0d59d882bbba12fcfb8a5cd7132148a", "committedDate": "2020-11-24T05:14:45Z", "message": "code review comments\n\nSigned-off-by: pbelgundi <prajakta.belgundi@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c338438a89289b7e15e7bd361084d9711bd7e457", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/c338438a89289b7e15e7bd361084d9711bd7e457", "committedDate": "2020-11-24T05:15:07Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a85a152ac84ea1fc378053732fe85b1f9ff18e8a", "author": {"user": {"login": "tkaitchuck", "name": "Tom Kaitchuck"}}, "url": "https://github.com/pravega/pravega/commit/a85a152ac84ea1fc378053732fe85b1f9ff18e8a", "committedDate": "2020-11-24T02:40:37Z", "message": "Merge branch 'master' into issue-5114-streamcut-publish"}, "afterCommit": {"oid": "c338438a89289b7e15e7bd361084d9711bd7e457", "author": {"user": {"login": "pbelgundi", "name": "Prajakta Belgundi"}}, "url": "https://github.com/pravega/pravega/commit/c338438a89289b7e15e7bd361084d9711bd7e457", "committedDate": "2020-11-24T05:15:07Z", "message": "Merge remote-tracking branch 'upstream/master' into issue-5114-streamcut-publish"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3713, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}