{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjg0Mjkw", "number": 5018, "title": "Issue 5009: (SegmentStore) Fixed Segment Attribute Index Truncated Root Pointer", "bodyText": "Change log description\nFixed a bug in SegmentAttributeBTreeIndex where it would attempt to initialize the BTreeIndex from a truncated offset.\nAdded logback-test.xml for Segment Store Integration tests. This helps debugging.\nPurpose of the change\nFixes #5009.\nWhat the code does\nChecking the retrieved Root Pointer against the Attribute Segment's Start Offset (Truncation Offset). If less, it is ignored.\nPlease refer to the comment(s) in the code for more explanations.\nHow to verify it\nNew unit test added to verify fix.\nUn-ignored E2E integration test that was sporadically failing due to this problem.", "createdAt": "2020-08-03T16:45:26Z", "url": "https://github.com/pravega/pravega/pull/5018", "merged": true, "mergeCommit": {"oid": "70b6d7bd0ccc2af1e283b1b836564c5d85bbd3a5"}, "closed": true, "closedAt": "2020-08-03T21:04:50Z", "author": {"login": "andreipaduroiu"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7U0yBAH2gAyNDYyMjg0MjkwOmFhZDNkMGQ2NjRmMTQ4ZTVmNWRhMDMxM2E2MDg1MTVlMDIwZWJiZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7XgoEAH2gAyNDYyMjg0MjkwOjFjMjkwZTBiY2JjODFlYzE3YWU1ZWQyNmIxZGQ4N2Q4NzhkZTVhMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aad3d0d664f148e5f5da0313a608515e020ebbe2", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/aad3d0d664f148e5f5da0313a608515e020ebbe2", "committedDate": "2020-08-03T16:43:22Z", "message": "Fixed a bug in SegmentAttributeBTreeIndex where it would attempt to initialize the BTreeIndex from a truncated offset.\n\nAdded logback-test.xml for Segment Store Integration tests. This helps debugging.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ce2ebab10ebb12df081ed796169c92bca7e31c", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/45ce2ebab10ebb12df081ed796169c92bca7e31c", "committedDate": "2020-08-03T16:47:22Z", "message": "Reverted unintentional formatting change.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjAyNDA1", "url": "https://github.com/pravega/pravega/pull/5018#pullrequestreview-460202405", "createdAt": "2020-08-03T17:19:42Z", "commit": {"oid": "45ce2ebab10ebb12df081ed796169c92bca7e31c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxOTo0MlrOG7B89Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoxOTo0MlrOG7B89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1MTE1Nw==", "bodyText": "Shall we add something like 'this is usually not a problem' ?\nIf this is not a problem then probably we could log it at info  level", "url": "https://github.com/pravega/pravega/pull/5018#discussion_r464551157", "createdAt": "2020-08-03T17:19:42Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/attributes/SegmentAttributeBTreeIndex.java", "diffHunk": "@@ -466,7 +466,20 @@ private long deserializeValue(ByteArraySegment value) {\n \n         return this.storage.getStreamSegmentInfo(handle.getSegmentName(), timeout)\n                 .thenApply(segmentInfo -> {\n+                    // Get the root pointer from the Segment's Core Attributes.\n                     long rootPointer = this.segmentMetadata.getAttributes().getOrDefault(Attributes.ATTRIBUTE_SEGMENT_ROOT_POINTER, BTreeIndex.IndexInfo.EMPTY.getRootPointer());\n+                    if (rootPointer != BTreeIndex.IndexInfo.EMPTY.getRootPointer() && rootPointer < segmentInfo.getStartOffset()) {\n+                        // The Root Pointer is invalid as it points to an offset prior to the Attribute Segment's Start Offset.\n+                        // The Attribute Segment is updated in 3 sequential steps: 1) Write new BTree pages, 2) Truncate and\n+                        // 3) Update root Pointer.\n+                        // The purpose of the Root Pointer is to provide a location of a consistently written update in case\n+                        // step 1) above fails (it is not atomic). However, if both 1) and 2) complete but 3) doesn't, then\n+                        // it's possible that the existing Root Pointer has been truncated out. In this case, it should be\n+                        // safe to ignore it and let the BTreeIndex read the file from the end (as it does in this case).\n+                        log.warn(\"{}: Root Pointer ({}) is below Attribute Segment's StartOffset ({}). Ignoring.\", this.traceObjectId, rootPointer, segmentInfo.getStartOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ce2ebab10ebb12df081ed796169c92bca7e31c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489ffaf03bb488787d7fd6f1839737adbe90dc74", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/489ffaf03bb488787d7fd6f1839737adbe90dc74", "committedDate": "2020-08-03T17:29:00Z", "message": "Code review feedback. Added comments and reduced the logging message severity.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTkxNDI2", "url": "https://github.com/pravega/pravega/pull/5018#pullrequestreview-460191426", "createdAt": "2020-08-03T17:02:59Z", "commit": {"oid": "45ce2ebab10ebb12df081ed796169c92bca7e31c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowMzowMFrOG7Ba-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzoyODo0NFrOG7CPZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MjQ1OA==", "bodyText": "Nit:  The new name is now - ChunkedSegmentStorage", "url": "https://github.com/pravega/pravega/pull/5018#discussion_r464542458", "createdAt": "2020-08-03T17:03:00Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/attributes/AttributeIndexTests.java", "diffHunk": "@@ -771,13 +837,39 @@ public void close() {\n \n         private class TestStorage extends AsyncStorageWrapper {\n             private final SyncStorage wrappedStorage;\n+            private final Map<String, Long> startOffsets;\n             private WriteInterceptor writeInterceptor;\n             private SealInterceptor sealInterceptor;\n             private ReadInterceptor readInterceptor;\n \n             TestStorage(SyncStorage syncStorage, Executor executor) {\n                 super(syncStorage, executor);\n                 this.wrappedStorage = syncStorage;\n+                this.startOffsets = new ConcurrentHashMap<>();\n+            }\n+\n+            @Override\n+            public CompletableFuture<Void> truncate(SegmentHandle handle, long offset, Duration timeout) {\n+                // We need to simulate the ChunkStorageProvider (correct) behavior for truncating segments. While the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ce2ebab10ebb12df081ed796169c92bca7e31c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU1NTg3OA==", "bodyText": "A comment explaining how root pointer is always set to a previous value to simulate scenario and where truncation happens would be helpful.", "url": "https://github.com/pravega/pravega/pull/5018#discussion_r464555878", "createdAt": "2020-08-03T17:28:44Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/attributes/AttributeIndexTests.java", "diffHunk": "@@ -627,6 +631,68 @@ public void testRecoveryAfterIncompleteUpdate() {\n         checkIndex(idx2, expectedValues);\n     }\n \n+    /**\n+     * Tests the ability of the Attribute Index to recover correctly after an update has been successfully written to Storage,\n+     * but the previous value of the {@link Attributes#ATTRIBUTE_SEGMENT_ROOT_POINTER} has been truncated out without\n+     * having the new value persisted (most likely due to a system crash).\n+     * In this case, the {@link Attributes#ATTRIBUTE_SEGMENT_ROOT_POINTER} value should be ignored and the index should\n+     * be attempted to be read from Storage without providing hints to where to start reading from.\n+     */\n+    @Test\n+    public void testTruncatedRootPointer() {\n+        val attributeSegmentName = NameUtils.getAttributeSegmentName(SEGMENT_NAME);\n+        val config = AttributeIndexConfig\n+                .builder()\n+                .with(AttributeIndexConfig.MAX_INDEX_PAGE_SIZE, 1024)\n+                .with(AttributeIndexConfig.ATTRIBUTE_SEGMENT_ROLLING_SIZE, 8)\n+                .build();\n+        final int attributeCount = 20;\n+        val attributes = IntStream.range(0, attributeCount).mapToObj(i -> new UUID(i, i)).collect(Collectors.toList());\n+        @Cleanup\n+        val context = new TestContext(config);\n+        populateSegments(context);\n+\n+        // 1. Populate and verify first index.\n+        val expectedValues = new HashMap<UUID, Long>();\n+        long nextValue = 0;\n+        long previousRootPointer = -1;\n+        boolean invalidRootPointer = false;\n+        for (UUID attributeId : attributes) {\n+            val idx = context.index.forSegment(SEGMENT_ID, TIMEOUT).join();\n+\n+            val value = nextValue++;\n+            expectedValues.put(attributeId, value);\n+            val updateBatch = Collections.singletonMap(attributeId, value);\n+\n+            val rootPointer = idx.update(updateBatch, TIMEOUT).join();\n+            val startOffset = context.storage.getStreamSegmentInfo(attributeSegmentName, TIMEOUT).join().getStartOffset();\n+            if (previousRootPointer >= 0) {\n+                context.containerMetadata.getStreamSegmentMetadata(SEGMENT_ID)\n+                        .updateAttributes(Collections.singletonMap(Attributes.ATTRIBUTE_SEGMENT_ROOT_POINTER, previousRootPointer));\n+                invalidRootPointer |= previousRootPointer < startOffset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45ce2ebab10ebb12df081ed796169c92bca7e31c"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjE5Nzcw", "url": "https://github.com/pravega/pravega/pull/5018#pullrequestreview-460219770", "createdAt": "2020-08-03T17:40:48Z", "commit": {"oid": "489ffaf03bb488787d7fd6f1839737adbe90dc74"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1229aad00c44e6ec18461b17192c5019465e8bd3", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/1229aad00c44e6ec18461b17192c5019465e8bd3", "committedDate": "2020-08-03T17:57:49Z", "message": "ChunkStorageProvider -> ChunkedSegmentStorage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjMxMjY4", "url": "https://github.com/pravega/pravega/pull/5018#pullrequestreview-460231268", "createdAt": "2020-08-03T17:59:00Z", "commit": {"oid": "1229aad00c44e6ec18461b17192c5019465e8bd3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjQwMDk4", "url": "https://github.com/pravega/pravega/pull/5018#pullrequestreview-460240098", "createdAt": "2020-08-03T18:12:53Z", "commit": {"oid": "1229aad00c44e6ec18461b17192c5019465e8bd3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxMjo1M1rOG7DyVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxMjo1M1rOG7DyVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MTIwNg==", "bodyText": "ChunkStorageProvide  ->  ChunkedSegmentStorage", "url": "https://github.com/pravega/pravega/pull/5018#discussion_r464581206", "createdAt": "2020-08-03T18:12:53Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/attributes/AttributeIndexTests.java", "diffHunk": "@@ -771,13 +841,39 @@ public void close() {\n \n         private class TestStorage extends AsyncStorageWrapper {\n             private final SyncStorage wrappedStorage;\n+            private final Map<String, Long> startOffsets;\n             private WriteInterceptor writeInterceptor;\n             private SealInterceptor sealInterceptor;\n             private ReadInterceptor readInterceptor;\n \n             TestStorage(SyncStorage syncStorage, Executor executor) {\n                 super(syncStorage, executor);\n                 this.wrappedStorage = syncStorage;\n+                this.startOffsets = new ConcurrentHashMap<>();\n+            }\n+\n+            @Override\n+            public CompletableFuture<Void> truncate(SegmentHandle handle, long offset, Duration timeout) {\n+                // We need to simulate the ChunkedSegmentStorage (correct) behavior for truncating segments. While the\n+                // legacy RollingStorage would approximate a StartOffset to an offset at most equal to the requested\n+                // Truncation Offset, the ChunkedSegmentStorage is very strict about that, so it will deny any read prior\n+                // to that offset. In addition, the ChunkStorageProvide also returns the correct StartOffset as part of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1229aad00c44e6ec18461b17192c5019465e8bd3"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c290e0bcbc81ec17ae5ed26b1dd87d878de5a22", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/1c290e0bcbc81ec17ae5ed26b1dd87d878de5a22", "committedDate": "2020-08-03T19:51:04Z", "message": "ChunkStorageProvider -> ChunkedSegmentStorage.\n\nSigned-off-by: Andrei Paduroiu <andrei.paduroiu@emc.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4014, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}