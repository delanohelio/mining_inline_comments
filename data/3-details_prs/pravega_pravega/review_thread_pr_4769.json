{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDM0MzQz", "number": 4769, "reviewThreads": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MzozNFrOD6q0tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToyNTozNFrOES3duA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQ1NjIwOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MzozNFrOGSoahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNjo0NlrOG1Lhsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4OTcwMg==", "bodyText": "nit: initializeStorage", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r422189702", "createdAt": "2020-05-08T14:53:34Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +181,76 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     * @throws Exception\n+     */\n+    private void InitializeStorage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjU2Mw==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458416563", "createdAt": "2020-07-21T22:06:46Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +181,76 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     * @throws Exception\n+     */\n+    private void InitializeStorage() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4OTcwMg=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQ2MDQ4OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/TableServiceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1NDozMVrOGSoc-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1NDozMVrOGSoc-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5MDMyOQ==", "bodyText": "4000 * 30 seconds ?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r422190329", "createdAt": "2020-05-08T14:54:31Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/tables/TableServiceTests.java", "diffHunk": "@@ -58,22 +61,22 @@\n public class TableServiceTests extends ThreadPooledTestSuite {\n     //region Config and Setup\n \n-    private static final int THREADPOOL_SIZE_SEGMENT_STORE = 20;\n-    private static final int THREADPOOL_SIZE_SEGMENT_STORE_STORAGE = 10;\n-    private static final int THREADPOOL_SIZE_TEST = 3;\n+    private static final int THREADPOOL_SIZE_SEGMENT_STORE = 200;\n+    private static final int THREADPOOL_SIZE_SEGMENT_STORE_STORAGE = 100;\n+    private static final int THREADPOOL_SIZE_TEST = 1000;\n     private static final int SEGMENT_COUNT = 10;\n     private static final int KEY_COUNT = 1000;\n     private static final int MAX_KEY_LENGTH = 128;\n     private static final int MAX_VALUE_LENGTH = 32;\n     private static final Duration TIMEOUT = Duration.ofSeconds(30); // Individual call timeout\n     @Rule\n-    public Timeout globalTimeout = new Timeout((int) TIMEOUT.toMillis() * 4, TimeUnit.MILLISECONDS);\n+    public Timeout globalTimeout = new Timeout((int) TIMEOUT.toMillis() * 4000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODQ2NTkwOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1NTo0OVrOGSogEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNjozMlrOG1LhPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5MTEyMw==", "bodyText": "Why don't we have a better serialization mechanism ?\nJava serialization is heavy and it could lead to security issues.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r422191123", "createdAt": "2020-05-08T14:55:49Z", "author": {"login": "eolivelli"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    TableStore tableStore;\n+    String tableName;\n+    Duration timeout = Duration.ofSeconds(1L);\n+    AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    @Override\n+    protected TransactionData read( String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<ArrayView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(arr.array(), arr.arrayOffset(), arr.getLength()));\n+                    TransactionData txnData = (TransactionData) input.readObject();\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    //version = TableKey.NO_VERSION;\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                ObjectOutputStream out = new ObjectOutputStream(bos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjQ0Ng==", "bodyText": "Fixed in part 1", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458416446", "createdAt": "2020-07-21T22:06:32Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.ArrayView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    TableStore tableStore;\n+    String tableName;\n+    Duration timeout = Duration.ofSeconds(1L);\n+    AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    @Override\n+    protected TransactionData read( String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<ArrayView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(arr.array(), arr.arrayOffset(), arr.getLength()));\n+                    TransactionData txnData = (TransactionData) input.readObject();\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    //version = TableKey.NO_VERSION;\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                ObjectOutputStream out = new ObjectOutputStream(bos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE5MTEyMw=="}, "originalCommit": null, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTMzMTU4OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/ExtendedS3IntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0Mjo1OVrOG0YqbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNjo1N1rOG1LiCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MzIxMw==", "bodyText": "Nit: perhaps not intentional space added", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457583213", "createdAt": "2020-07-20T17:42:59Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/ExtendedS3IntegrationTest.java", "diffHunk": "@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjY0OQ==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458416649", "createdAt": "2020-07-21T22:06:57Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/ExtendedS3IntegrationTest.java", "diffHunk": "@@ -5,7 +5,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n+ *     http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4MzIxMw=="}, "originalCommit": null, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTM0Mjc2OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0NjowMVrOG0YxYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNzowOFrOG1LiXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NDk5NQ==", "bodyText": "I am not sure this is a good way of doing this:\n\nwhy aren't we fast failing and return a failed future?\nwhy are we catching a generic Exception?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457584995", "createdAt": "2020-07-20T17:46:01Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +279,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {\n+            doStop(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyOTQzNA==", "bodyText": "You do not need to do this. Let the exception bubble up, whatever that exception is, and observe how this method is used. In startWhenDurableLogOnline, a listener is attached to its returned Future which will invoke the (correct) shutdown procedure. No need for extra stuff here.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457729434", "createdAt": "2020-07-20T22:34:26Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +279,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {\n+            doStop(ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NDk5NQ=="}, "originalCommit": null, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjczNA==", "bodyText": "Fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458416734", "createdAt": "2020-07-21T22:07:08Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +279,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {\n+            doStop(ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NDk5NQ=="}, "originalCommit": null, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTM1MDA0OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0ODowNFrOG0Y15g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo0MTozNFrOG20Tnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NjE1MA==", "bodyText": "This instanceof someone smells.\nBtw you have to cast it to ChunkedSegmentStorage so I don't know if we can do it better", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457586150", "createdAt": "2020-07-20T17:48:04Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +180,29 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     *\n+     * @throws Exception\n+     */\n+    private void initializeStorage() throws Exception {\n+        this.storage.initialize(this.metadata.getContainerEpoch());\n+\n+        if (this.storage instanceof ChunkedSegmentStorage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNzcyOQ==", "bodyText": "I think this will go away once we remove the legacy code (RollingStorage and AsyncStorageWrapper). Until this code comes out of beta, we'll have to live with both.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457727729", "createdAt": "2020-07-20T22:29:53Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +180,29 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     *\n+     * @throws Exception\n+     */\n+    private void initializeStorage() throws Exception {\n+        this.storage.initialize(this.metadata.getContainerEpoch());\n+\n+        if (this.storage instanceof ChunkedSegmentStorage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NjE1MA=="}, "originalCommit": null, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzI3OQ==", "bodyText": "okay", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460133279", "createdAt": "2020-07-24T15:41:34Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +180,29 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     *\n+     * @throws Exception\n+     */\n+    private void initializeStorage() throws Exception {\n+        this.storage.initialize(this.metadata.getContainerEpoch());\n+\n+        if (this.storage instanceof ChunkedSegmentStorage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NjE1MA=="}, "originalCommit": null, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTQyMzc1OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODowODoyOVrOG0ZjNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNzoxOVrOG1Liwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5Nzc1MA==", "bodyText": "Nit: remove", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457597750", "createdAt": "2020-07-20T18:08:29Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -305,20 +327,35 @@ void endToEndProcess(boolean verifySegmentContent) throws Exception {\n      */\n     @Test\n     public void testEndToEndWithFencing() throws Exception {\n-        endToEndProcessWithFencing(true);\n+        endToEndProcessWithFencing(true, false);\n+    }\n+\n+    /**\n+     * Tests an end-to-end scenario for the SegmentStore where operations are continuously executed while the SegmentStore\n+     * itself is being fenced out by new instances. The difference between this and testEndToEnd() is that this does not\n+     * do a graceful shutdown of the Segment Store, instead it creates a new instance while the previous one is still running.\n+     *\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    //@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjgzNA==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458416834", "createdAt": "2020-07-21T22:07:19Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -305,20 +327,35 @@ void endToEndProcess(boolean verifySegmentContent) throws Exception {\n      */\n     @Test\n     public void testEndToEndWithFencing() throws Exception {\n-        endToEndProcessWithFencing(true);\n+        endToEndProcessWithFencing(true, false);\n+    }\n+\n+    /**\n+     * Tests an end-to-end scenario for the SegmentStore where operations are continuously executed while the SegmentStore\n+     * itself is being fenced out by new instances. The difference between this and testEndToEnd() is that this does not\n+     * do a graceful shutdown of the Segment Store, instead it creates a new instance while the previous one is still running.\n+     *\n+     * @throws Exception If an exception occurred.\n+     */\n+    @Test\n+    //@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5Nzc1MA=="}, "originalCommit": null, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTQzNzAzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageManagerLayoutType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoxMTo1OFrOG0ZrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNzoyOFrOG1LjBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5OTc2MA==", "bodyText": "I am not sure this is a good name for the public audience.\nWhat about:\n\nV07\nRAW\nSIMPLE\n\nSomething that makes it clear that is not TABLE_BASED but as it is the default it cannot smell like 'this is old stuff, probably no more very much supported'", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457599760", "createdAt": "2020-07-20T18:11:58Z", "author": {"login": "eolivelli"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageManagerLayoutType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage;\n+\n+/**\n+ * Type of Storage metadata layout to use.\n+ */\n+public enum StorageManagerLayoutType {\n+    /**\n+     * Uses RollingStorage based layout.\n+     */\n+    LEGACY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTQwMQ==", "bodyText": "I added a similar comment in the config file. Let's be consistent. A bit of documentation pointing to the (soon-to-be-defunct) RollingStorage.java would help too.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457731401", "createdAt": "2020-07-20T22:39:52Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageManagerLayoutType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage;\n+\n+/**\n+ * Type of Storage metadata layout to use.\n+ */\n+public enum StorageManagerLayoutType {\n+    /**\n+     * Uses RollingStorage based layout.\n+     */\n+    LEGACY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5OTc2MA=="}, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjkwMw==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458416903", "createdAt": "2020-07-21T22:07:28Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageManagerLayoutType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage;\n+\n+/**\n+ * Type of Storage metadata layout to use.\n+ */\n+public enum StorageManagerLayoutType {\n+    /**\n+     * Uses RollingStorage based layout.\n+     */\n+    LEGACY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5OTc2MA=="}, "originalCommit": null, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTQ0MjE5OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoxMzoyNlrOG0ZuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowODowMVrOG1Lj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMDU2Nw==", "bodyText": "Please also write log about what are you doing. Otherwise we will see errors without context", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457600567", "createdAt": "2020-07-20T18:13:26Z", "author": {"login": "eolivelli"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -1321,4 +1346,20 @@ private void checkInitialized() {\n         Preconditions.checkState(0 != this.epoch);\n         Preconditions.checkState(!closed.get());\n     }\n+\n+    private void checkChunksExist(MetadataTransaction txn, SegmentMetadata segmentMetadata) throws StorageMetadataException, ChunkStorageException {\n+        if (config.isDebugEnabled()) {\n+            String current = segmentMetadata.getFirstChunk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNzExNQ==", "bodyText": "On second thought I removed this debug check.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458417115", "createdAt": "2020-07-21T22:08:01Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -1321,4 +1346,20 @@ private void checkInitialized() {\n         Preconditions.checkState(0 != this.epoch);\n         Preconditions.checkState(!closed.get());\n     }\n+\n+    private void checkChunksExist(MetadataTransaction txn, SegmentMetadata segmentMetadata) throws StorageMetadataException, ChunkStorageException {\n+        if (config.isDebugEnabled()) {\n+            String current = segmentMetadata.getFirstChunk();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMDU2Nw=="}, "originalCommit": null, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjIzNzgyOnYy", "diffSide": "RIGHT", "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3SimpleStorageFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoyMjoxMVrOG0hT_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowODoxMlrOG1LkJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNDkyNQ==", "bodyText": "Tip: this constructor can be auto-generated if you annotate the class with @RequiredArgsConstructor and each field with @NonNull.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457724925", "createdAt": "2020-07-20T22:22:11Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3SimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.extendeds3;\n+\n+import com.emc.object.s3.S3Client;\n+import com.emc.object.s3.S3Config;\n+import com.emc.object.s3.jersey.S3JerseyClient;\n+import com.google.common.base.Preconditions;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * Factory for ExtendedS3 {@link Storage} implemented using {@link ChunkedSegmentStorage} and {@link ExtendedS3ChunkStorage}.\n+ */\n+public class ExtendedS3SimpleStorageFactory implements StorageFactory {\n+    private final ExtendedS3StorageConfig config;\n+    private final ExecutorService executor;\n+\n+    /**\n+     * Creates a new instance of the {@link ExtendedS3SimpleStorageFactory} class.\n+     *\n+     * @param config   The Configuration to use.\n+     * @param executor An executor to use for background operations.\n+     */\n+    public ExtendedS3SimpleStorageFactory(ExtendedS3StorageConfig config, ExecutorService executor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNzE4OQ==", "bodyText": "fixed", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458417189", "createdAt": "2020-07-21T22:08:12Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3SimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.extendeds3;\n+\n+import com.emc.object.s3.S3Client;\n+import com.emc.object.s3.S3Config;\n+import com.emc.object.s3.jersey.S3JerseyClient;\n+import com.google.common.base.Preconditions;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * Factory for ExtendedS3 {@link Storage} implemented using {@link ChunkedSegmentStorage} and {@link ExtendedS3ChunkStorage}.\n+ */\n+public class ExtendedS3SimpleStorageFactory implements StorageFactory {\n+    private final ExtendedS3StorageConfig config;\n+    private final ExecutorService executor;\n+\n+    /**\n+     * Creates a new instance of the {@link ExtendedS3SimpleStorageFactory} class.\n+     *\n+     * @param config   The Configuration to use.\n+     * @param executor An executor to use for background operations.\n+     */\n+    public ExtendedS3SimpleStorageFactory(ExtendedS3StorageConfig config, ExecutorService executor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNDkyNQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI0MDc2OnYy", "diffSide": "RIGHT", "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageFactoryCreator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoyMzoyNlrOG0hVvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo1ODoxNlrOG2yr_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNTM3Mg==", "bodyText": "TIP: You can annotate each field with @NonNull; Lombok will auto-generate the precondition checks.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457725372", "createdAt": "2020-07-20T22:23:26Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageFactoryCreator.java", "diffHunk": "@@ -9,19 +9,43 @@\n  */\n package io.pravega.storage.extendeds3;\n \n+import com.google.common.base.Preconditions;\n import io.pravega.segmentstore.storage.ConfigSetup;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.storage.StorageFactoryCreator;\n+import io.pravega.segmentstore.storage.StorageFactoryInfo;\n+import io.pravega.segmentstore.storage.StorageManagerLayoutType;\n+import io.pravega.segmentstore.storage.StorageManagerType;\n+\n import java.util.concurrent.ScheduledExecutorService;\n \n public class ExtendedS3StorageFactoryCreator implements StorageFactoryCreator {\n     @Override\n-    public StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor) {\n-        return new ExtendedS3StorageFactory(setup.getConfig(ExtendedS3StorageConfig::builder), executor);\n+    public StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {\n+        Preconditions.checkNotNull(storageFactoryInfo, \"storageFactoryInfo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNTY4Nw==", "bodyText": "Same in the other classes.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457725687", "createdAt": "2020-07-20T22:24:19Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageFactoryCreator.java", "diffHunk": "@@ -9,19 +9,43 @@\n  */\n package io.pravega.storage.extendeds3;\n \n+import com.google.common.base.Preconditions;\n import io.pravega.segmentstore.storage.ConfigSetup;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.storage.StorageFactoryCreator;\n+import io.pravega.segmentstore.storage.StorageFactoryInfo;\n+import io.pravega.segmentstore.storage.StorageManagerLayoutType;\n+import io.pravega.segmentstore.storage.StorageManagerType;\n+\n import java.util.concurrent.ScheduledExecutorService;\n \n public class ExtendedS3StorageFactoryCreator implements StorageFactoryCreator {\n     @Override\n-    public StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor) {\n-        return new ExtendedS3StorageFactory(setup.getConfig(ExtendedS3StorageConfig::builder), executor);\n+    public StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {\n+        Preconditions.checkNotNull(storageFactoryInfo, \"storageFactoryInfo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNTM3Mg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0MzEwMQ==", "bodyText": "Fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458243101", "createdAt": "2020-07-21T16:48:49Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageFactoryCreator.java", "diffHunk": "@@ -9,19 +9,43 @@\n  */\n package io.pravega.storage.extendeds3;\n \n+import com.google.common.base.Preconditions;\n import io.pravega.segmentstore.storage.ConfigSetup;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.storage.StorageFactoryCreator;\n+import io.pravega.segmentstore.storage.StorageFactoryInfo;\n+import io.pravega.segmentstore.storage.StorageManagerLayoutType;\n+import io.pravega.segmentstore.storage.StorageManagerType;\n+\n import java.util.concurrent.ScheduledExecutorService;\n \n public class ExtendedS3StorageFactoryCreator implements StorageFactoryCreator {\n     @Override\n-    public StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor) {\n-        return new ExtendedS3StorageFactory(setup.getConfig(ExtendedS3StorageConfig::builder), executor);\n+    public StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {\n+        Preconditions.checkNotNull(storageFactoryInfo, \"storageFactoryInfo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNTM3Mg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjc0OQ==", "bodyText": "maybe I'm confused, @sachin-j-joshi have you actually done the change suggested?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460106749", "createdAt": "2020-07-24T14:58:16Z", "author": {"login": "RaulGracia"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3StorageFactoryCreator.java", "diffHunk": "@@ -9,19 +9,43 @@\n  */\n package io.pravega.storage.extendeds3;\n \n+import com.google.common.base.Preconditions;\n import io.pravega.segmentstore.storage.ConfigSetup;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.storage.StorageFactoryCreator;\n+import io.pravega.segmentstore.storage.StorageFactoryInfo;\n+import io.pravega.segmentstore.storage.StorageManagerLayoutType;\n+import io.pravega.segmentstore.storage.StorageManagerType;\n+\n import java.util.concurrent.ScheduledExecutorService;\n \n public class ExtendedS3StorageFactoryCreator implements StorageFactoryCreator {\n     @Override\n-    public StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor) {\n-        return new ExtendedS3StorageFactory(setup.getConfig(ExtendedS3StorageConfig::builder), executor);\n+    public StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {\n+        Preconditions.checkNotNull(storageFactoryInfo, \"storageFactoryInfo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNTM3Mg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI0ODI2OnYy", "diffSide": "RIGHT", "path": "config/config.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoyNjozMVrOG0haRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzowODo0M1rOG0iVZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjUzNQ==", "bodyText": "I am wondering too whether \"LEGACY\" is meaningful here. Maybe \"ROLLING_STORAGE\" (and somewhere put a link to the RollingStorage.java class on GitHub (branch 0.7 -since it will be gone from master at one point).\nWhat do you think?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457726535", "createdAt": "2020-07-20T22:26:31Z", "author": {"login": "andreipaduroiu"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED - Using TableStore.\n+#   LEGACY      - Using header files.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MTY3MQ==", "bodyText": "Just changed this to ...\n/**\n * Type of Storage metadata format.\n */\npublic enum StorageMetadataFormat {\n    /**\n     * Uses format that stores data in header files.\n     */\n    HEADER_BASED,\n\n    /**\n     * Uses format that stores data in table segments.\n     */\n    TABLE_BASED,\n}\n\n/**\n * Type of Storage layout to use.\n */\npublic enum StorageLayoutType {\n    /**\n     * Uses {@link io.pravega.segmentstore.storage.rolling.RollingStorage}.\n     */\n    ROLLING_STORAGE,\n\n    /**\n     * Uses {@link io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage} .\n     */\n    CHUNKED_STORAGE,\n}", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457741671", "createdAt": "2020-07-20T23:08:43Z", "author": {"login": "sachin-j-joshi"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED - Using TableStore.\n+#   LEGACY      - Using header files.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNjUzNQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI1MTk1OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/StorageLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoyODoxNVrOG0hcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoyODoxNVrOG0hcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyNzEzNw==", "bodyText": "Please put this ( on the previous line.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457727137", "createdAt": "2020-07-20T22:28:15Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/StorageLoader.java", "diffHunk": "@@ -28,18 +31,28 @@\n  */\n @Slf4j\n public class StorageLoader {\n-    public StorageFactory load(ConfigSetup setup, String storageImplementation, ScheduledExecutorService executor) {\n+    public StorageFactory load(ConfigSetup setup,\n+                               String storageImplementation,\n+                               StorageManagerType storageManagerType,\n+                               StorageManagerLayoutType storageManagerLayoutType,\n+                               ScheduledExecutorService executor) {\n         ServiceLoader<StorageFactoryCreator> loader = ServiceLoader.load(StorageFactoryCreator.class);\n         StorageExtraConfig noOpConfig = setup.getConfig(StorageExtraConfig::builder);\n         for (StorageFactoryCreator factoryCreator : loader) {\n-            log.info(\"Loading {}, trying {}\", storageImplementation, factoryCreator.getName());\n-            if (factoryCreator.getName().equals(storageImplementation)) {\n-                StorageFactory factory = factoryCreator.createFactory(setup, executor);\n-                if (!noOpConfig.isStorageNoOpMode()) {\n-                    return factory;\n-                } else { //The specified storage implementation is in No-Op mode.\n-                    log.warn(\"{} IS IN NO-OP MODE: DATA LOSS WILL HAPPEN! MAKE SURE IT IS BY FULL INTENTION FOR TESTING PURPOSE!\", storageImplementation);\n-                    return new NoOpStorageFactory(noOpConfig, executor, factory, null);\n+            val factories = factoryCreator.getStorageFactories();\n+            for (val factoryInfo : factories) {\n+                log.info(\"Loading {}, trying {}\", storageImplementation, factoryInfo);\n+                if (factoryInfo.getName().equals(storageImplementation)\n+                        && factoryInfo.getStorageManagerLayoutType() == storageManagerLayoutType\n+                        && factoryInfo.getStorageManagerType() == storageManagerType\n+                ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI2MDgzOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozMTo0M1rOG0hhtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NDo1N1rOG1BLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyODQzNw==", "bodyText": "And what it if it is null? Won't this be checked in the constructor of TableBasedMetadataStore below?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457728437", "createdAt": "2020-07-20T22:31:43Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +180,29 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     *\n+     * @throws Exception\n+     */\n+    private void initializeStorage() throws Exception {\n+        this.storage.initialize(this.metadata.getContainerEpoch());\n+\n+        if (this.storage instanceof ChunkedSegmentStorage) {\n+            ChunkedSegmentStorage storageManager = (ChunkedSegmentStorage) this.storage;\n+\n+            // Initialize storage metadata table segment\n+            ContainerTableExtension tableExtension = getExtension(ContainerTableExtension.class);\n+            Preconditions.checkNotNull(tableExtension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NzA0Mg==", "bodyText": "removed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458247042", "createdAt": "2020-07-21T16:54:57Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -177,6 +180,29 @@ private MetadataStore createMetadataStore() {\n         return builder.build();\n     }\n \n+    /**\n+     * Initializes storage.\n+     *\n+     * @throws Exception\n+     */\n+    private void initializeStorage() throws Exception {\n+        this.storage.initialize(this.metadata.getContainerEpoch());\n+\n+        if (this.storage instanceof ChunkedSegmentStorage) {\n+            ChunkedSegmentStorage storageManager = (ChunkedSegmentStorage) this.storage;\n+\n+            // Initialize storage metadata table segment\n+            ContainerTableExtension tableExtension = getExtension(ContainerTableExtension.class);\n+            Preconditions.checkNotNull(tableExtension);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyODQzNw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI3MDc3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozNTozNFrOG0hnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1Njo0OVrOG1t2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyOTg4Ng==", "bodyText": "Why don't we add these things to SegmentProperties interface so we don't have to remember to set them everywhere? You can just go back to StreamSegmentInformation and update the from method which should automatically take effect wherever it's used.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457729886", "createdAt": "2020-07-20T22:35:34Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadata.java", "diffHunk": "@@ -353,7 +353,11 @@ public synchronized boolean isActive() {\n \n     @Override\n     public synchronized SegmentProperties getSnapshot() {\n-        return StreamSegmentInformation.from(this).attributes(new HashMap<>(getAttributes())).build();\n+        return StreamSegmentInformation.from(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODk0Ng==", "bodyText": "SegmentProperties is used in Storage interface and lots of other places. Changing the contract on that interface is a much bigger change that I don't want to do as part of this change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458978946", "createdAt": "2020-07-22T17:56:49Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentMetadata.java", "diffHunk": "@@ -353,7 +353,11 @@ public synchronized boolean isActive() {\n \n     @Override\n     public synchronized SegmentProperties getSnapshot() {\n-        return StreamSegmentInformation.from(this).attributes(new HashMap<>(getAttributes())).build();\n+        return StreamSegmentInformation.from(this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyOTg4Ng=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI3NDcwOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/StreamSegmentContainerTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozNzoxNlrOG0hpqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzozNjozM1rOG0i28w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDQ3Mg==", "bodyText": "Does this include the one you just removed from here? That's the container metadata segment which has nothing to do with chunks.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457730472", "createdAt": "2020-07-20T22:37:16Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/StreamSegmentContainerTests.java", "diffHunk": "@@ -1881,11 +1881,17 @@ private void checkActiveSegments(SegmentContainer container, int expectedCount)\n         val initialActiveSegments = container.getActiveSegments();\n         int ignoredSegments = 0;\n         for (SegmentProperties sp : initialActiveSegments) {\n-            if (sp.getName().equals(EXPECTED_METADATA_SEGMENT_NAME)) {\n+            boolean match = false;\n+            for (String systemSegment : SystemJournal.getChunkStorageSystemSegments(container.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MDI1OQ==", "bodyText": "initialActiveSegments includes EXPECTED_METADATA_SEGMENT_NAME.\nwhich is NameUtils.getMetadataSegmentName(CONTAINER_ID);", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457750259", "createdAt": "2020-07-20T23:36:33Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/containers/StreamSegmentContainerTests.java", "diffHunk": "@@ -1881,11 +1881,17 @@ private void checkActiveSegments(SegmentContainer container, int expectedCount)\n         val initialActiveSegments = container.getActiveSegments();\n         int ignoredSegments = 0;\n         for (SegmentProperties sp : initialActiveSegments) {\n-            if (sp.getName().equals(EXPECTED_METADATA_SEGMENT_NAME)) {\n+            boolean match = false;\n+            for (String systemSegment : SystemJournal.getChunkStorageSystemSegments(container.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDQ3Mg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI3NTU4OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozNzozOVrOG0hqKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0MDoyNFrOG3szeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDYwMA==", "bodyText": "Why?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457730600", "createdAt": "2020-07-20T22:37:39Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -24,6 +25,7 @@\n  * because user segment write operation is no-oped.\n  */\n @Slf4j\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODc1OA==", "bodyText": "NoOp storage does not yet support ChunkedSegmentStorage (aka SLTS)", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461058758", "createdAt": "2020-07-27T17:40:04Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -24,6 +25,7 @@\n  * because user segment write operation is no-oped.\n  */\n @Slf4j\n+@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDYwMA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODkzNg==", "bodyText": "Ignoring only relevant tests now", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461058936", "createdAt": "2020-07-27T17:40:24Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -24,6 +25,7 @@\n  * because user segment write operation is no-oped.\n  */\n @Slf4j\n+@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMDYwMA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI3OTA1OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageFactoryInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozOToxM1rOG0hsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NToyMlrOG1BMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTE1MA==", "bodyText": "private final; I don't think you have any reason to mutate this object.\neverywhere below too.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457731150", "createdAt": "2020-07-20T22:39:13Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageFactoryInfo.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage;\n+\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * Information about the capabilities supported by a {@link StorageFactory}.\n+ */\n+@Data\n+@Builder\n+public class StorageFactoryInfo {\n+    /**\n+     * Name of storage binding.\n+     */\n+    String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NzMxNg==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458247316", "createdAt": "2020-07-21T16:55:22Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageFactoryInfo.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage;\n+\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import lombok.Builder;\n+import lombok.Data;\n+\n+/**\n+ * Information about the capabilities supported by a {@link StorageFactory}.\n+ */\n+@Data\n+@Builder\n+public class StorageFactoryInfo {\n+    /**\n+     * Name of storage binding.\n+     */\n+    String name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTE1MA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI4NDA2OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0MTowNlrOG0hvMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowOTowNlrOG1LloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTg4OA==", "bodyText": "Do all of these calls result in LTS or Table Segment calls? You've added quite a bit of now.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457731888", "createdAt": "2020-07-20T22:41:06Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -597,6 +614,7 @@ private void collectGarbage(Collection<String> chunksTodelete) {\n                 // Validate preconditions.\n                 checkSegmentExists(streamSegmentName, segmentMetadata);\n                 checkOwnership(streamSegmentName, segmentMetadata);\n+                checkChunksExist(txn, segmentMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MDUxNw==", "bodyText": "I'll probably change it to int debugLevel", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457750517", "createdAt": "2020-07-20T23:37:29Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -597,6 +614,7 @@ private void collectGarbage(Collection<String> chunksTodelete) {\n                 // Validate preconditions.\n                 checkSegmentExists(streamSegmentName, segmentMetadata);\n                 checkOwnership(streamSegmentName, segmentMetadata);\n+                checkChunksExist(txn, segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTg4OA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNzU2OQ==", "bodyText": "on second thought, I removed these checks - not really needed anymore.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458417569", "createdAt": "2020-07-21T22:09:06Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -597,6 +614,7 @@ private void collectGarbage(Collection<String> chunksTodelete) {\n                 // Validate preconditions.\n                 checkSegmentExists(streamSegmentName, segmentMetadata);\n                 checkOwnership(streamSegmentName, segmentMetadata);\n+                checkChunksExist(txn, segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMTg4OA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI4NTAxOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0MTozNFrOG0hvzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NTo0NVrOG1BNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjA0NQ==", "bodyText": "This sounds pretty aggressive. 30s?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457732045", "createdAt": "2020-07-20T22:41:34Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NzYwMw==", "bodyText": "ok. done", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458247603", "createdAt": "2020-07-21T16:55:45Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjA0NQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI4ODgzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0MzowOVrOG0hx-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NTo1NVrOG1BOFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjYwMQ==", "bodyText": "getBytes will encode the string in whatever default charset happens to be on the machine. While nowadays it's UTF8, this doesn't mean it won't change at one point in the future.\nTo make sure our data is compatible between different hosts, let's keep a reference to Charsets.UTF8 and pass that to everywhere we are encoding or decoding String keys in this file.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457732601", "createdAt": "2020-07-20T22:43:09Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NzcwMA==", "bodyText": "done.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458247700", "createdAt": "2020-07-21T16:55:55Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjYwMQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI5MDM5OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0Mzo0OVrOG0hy4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0MTo1NFrOG3s2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw==", "bodyText": "So what if it's not 1?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457732833", "createdAt": "2020-07-20T22:43:49Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1MTQwOQ==", "bodyText": "The code falls through and it returns default \"not exists\" value.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457751409", "createdAt": "2020-07-20T23:40:18Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1MzE3NQ==", "bodyText": "By design, I understand that it should be either 0 or 1, but what if there is a bug in the logic and we get a value greater than 1? Is returning TableKey.NOT_EXISTS? Even if such a case is not expected, I'd say we should validate it.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458653175", "createdAt": "2020-07-22T09:15:58Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NjUyMQ==", "bodyText": "Ok. will add validation.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458886521", "createdAt": "2020-07-22T15:37:17Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTgzNA==", "bodyText": "Validation added.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459111834", "createdAt": "2020-07-22T22:08:58Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4MTIzOQ==", "bodyText": "The contract clearly says that you will get a List of size equal to the size of the key List you requested, regardless of whether those keys exist or not. You will not get 0 and you will not get 2.\nIf you want, a simple assert retValue.size() == 1 will do (and will execute only in tests), and we can remove all these unnecessary checks.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459581239", "createdAt": "2020-07-23T16:36:31Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0OTk5Ng==", "bodyText": "Ok, makes sense, the validation is moot in this case then. Thanks for clarifying, @andreipaduroiu .", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460049996", "createdAt": "2020-07-24T13:25:09Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTcxOQ==", "bodyText": "Fixed.  it looks like this now\n           Preconditions.checkState(retValue.size() == 1, \"Unexpected number of values returned.\");\n           TableEntry entry = retValue.get(0);\n           if (null != entry) {\n             ...", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461059719", "createdAt": "2020-07-27T17:41:54Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMjgzMw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI5NDM1OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0NToxNFrOG0h1FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoxMDoyMVrOG1LnjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMzM5Nw==", "bodyText": "encoding here\nUse TableKey.Unversioned if you want to specify NO_VERSION", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457733397", "createdAt": "2020-07-20T22:45:14Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMzY2Ng==", "bodyText": "Or did you mean to specify a version (you have a version variable)?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457733666", "createdAt": "2020-07-20T22:46:00Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMzM5Nw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxODA2MQ==", "bodyText": "Fixed", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458418061", "createdAt": "2020-07-21T22:10:21Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMzM5Nw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI5Njc3OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0NjowOVrOG0h2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0NjowOVrOG0h2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMzczMQ==", "bodyText": "encoding", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457733731", "createdAt": "2020-07-20T22:46:09Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI5OTM4OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0NzoxNlrOG0h34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo1ODowNlrOG2yrog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA==", "bodyText": "Do you really need to do this? This will block this thread and use another thread to execute that call. It is a recipe for running out of threads very very quickly.\nPlease rewrite this method to be a CompletableFuture (async) so it doesn't have this problem.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457734114", "createdAt": "2020-07-20T22:47:16Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MjY3OQ==", "bodyText": "Given the initial uncertainty with the approach and added complexity I decided to do inital implementation without async apis. Once things are solid we can very much turn everything into async relatively easily.  The point - the table segment access is already in a synchronized block to maintain consistency guarantees. So that waiting on future is not causing any additional stalls. In near future, I do absolutely plan to remove that big synchronization point and also turn this whole thing in async.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458262679", "createdAt": "2020-07-21T17:20:25Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MjgzMw==", "bodyText": "I'll create an issue to track this.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458262833", "createdAt": "2020-07-21T17:20:39Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NzQ3Ng==", "bodyText": "It also seems to be serializing the execution unnecessarily:\n\nput\nupdate versions after put\ndelete\nupdate version after delete\n\nwe can have a higher degree of parallelism here, which should be relevant for larger numbers of items in dataList. any idea of what we expect the size of dataList to be?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458667476", "createdAt": "2020-07-22T09:40:03Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5MDg4MA==", "bodyText": "The updates must succeed atomically. We can not have individual keys updated separately.\nCurrently table segment can not have update and delete as part of same transaction. (you can't add/update a few keys and also delete a few as part of same transaction.)\nThat is the reason why I have to delete the keys separately.\nFirst I update the keys with special \"deleted\" value. Then actually delete it separately.\nThe delete can not succeed if update fails earlier. Therefore it has to wait on update.\nAlso, most updates are with either 1 or 2 keys.\nTruncate , delete and concat affect more keys.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458890880", "createdAt": "2020-07-22T15:43:28Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NDE3NQ==", "bodyText": "The updates must succeed atomically. We can not have individual keys updated separately.\n\nI was not clear, I was referring to updating and deleting concurrently.\n\nCurrently table segment can not have update and delete as part of same transaction.\n\nOk, but if we make the computation asynchronous, then can't we execute updates and deletes concurrently?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460054175", "createdAt": "2020-07-24T13:32:50Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwNjY1OA==", "bodyText": "Delete is done in two steps .\n\nUpdate key with value corresponding to null .\nDelete the key\nAll keys in a single transaction are updated simultaneously. Update could fail because of any number of reason - eg. Version mismatch one of the (non-deleted) keys.\n\nIn all cases, the delete should not succeed if update fails earlier. Therefore it has to wait on update.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460106658", "createdAt": "2020-07-24T14:58:06Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDExNA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwMDE3OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0NzozNFrOG0h4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoxMDozN1rOG1LoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDIyNw==", "bodyText": "same here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457734227", "createdAt": "2020-07-20T22:47:34Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxODE5MA==", "bodyText": "same as above", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458418190", "createdAt": "2020-07-21T22:10:37Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDIyNw=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwMTA4OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0Nzo1OFrOG0h42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NjoxOFrOG1BO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDM2Mg==", "bodyText": "Aren't these two catch blocks the same?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457734362", "createdAt": "2020-07-20T22:47:58Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDQ3NQ==", "bodyText": "You can use Exceptions.unwrap to help here.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457734475", "createdAt": "2020-07-20T22:48:14Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDM2Mg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NzkyOA==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458247928", "createdAt": "2020-07-21T16:56:18Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDM2Mg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwMzA2OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0ODozNlrOG0h54Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoxMDo0N1rOG1LoaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDYyNQ==", "bodyText": "I think this should be a WARN.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457734625", "createdAt": "2020-07-20T22:48:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            throw new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            throw new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof BadKeyVersionException) {\n+                throw new StorageMetadataWritesFencedOutException(\"Transaction writer is fenced off.\", e);\n+            }\n+            if (e.getCause().getCause() instanceof DataLogWriterNotPrimaryException) {\n+                throw new StorageMetadataVersionMismatchException(\"Transaction failed. Writer fenced off\", e);\n+            }\n+        } else {\n+            log.debug(\"e.getCause()=null\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxODI4MA==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458418280", "createdAt": "2020-07-21T22:10:47Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            throw new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            throw new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof BadKeyVersionException) {\n+                throw new StorageMetadataWritesFencedOutException(\"Transaction writer is fenced off.\", e);\n+            }\n+            if (e.getCause().getCause() instanceof DataLogWriterNotPrimaryException) {\n+                throw new StorageMetadataVersionMismatchException(\"Transaction failed. Writer fenced off\", e);\n+            }\n+        } else {\n+            log.debug(\"e.getCause()=null\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDYyNQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwNDQ5OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OTowNFrOG0h6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MjowOVrOG1BEjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDgyMA==", "bodyText": "set e=Exceptions.unwrap(e) and simplify this code.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457734820", "createdAt": "2020-07-20T22:49:04Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NTI2MA==", "bodyText": "Good tip. Thanks.\nDone", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458245260", "createdAt": "2020-07-21T16:52:09Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDgyMA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwNjE3OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OTo0MlrOG0h7lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoxMTowMFrOG1Lo2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTA2MA==", "bodyText": "Same comment here about making this be async.\nFurthermore, you use join here and above you use get.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457735060", "createdAt": "2020-07-20T22:49:42Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            throw new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            throw new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof BadKeyVersionException) {\n+                throw new StorageMetadataWritesFencedOutException(\"Transaction writer is fenced off.\", e);\n+            }\n+            if (e.getCause().getCause() instanceof DataLogWriterNotPrimaryException) {\n+                throw new StorageMetadataVersionMismatchException(\"Transaction failed. Writer fenced off\", e);\n+            }\n+        } else {\n+            log.debug(\"e.getCause()=null\", e);\n+        }\n+        throw new StorageMetadataException(\"Transaction failed\", e);\n+    }\n+\n+    private void ensureInitialized() {\n+        if (!isTableInitialized.get()) {\n+            try {\n+                this.tableStore.createSegment(tableName, timeout).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxODM5Mw==", "bodyText": "same as above.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458418393", "createdAt": "2020-07-21T22:11:00Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            throw new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            throw new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof BadKeyVersionException) {\n+                throw new StorageMetadataWritesFencedOutException(\"Transaction writer is fenced off.\", e);\n+            }\n+            if (e.getCause().getCause() instanceof DataLogWriterNotPrimaryException) {\n+                throw new StorageMetadataVersionMismatchException(\"Transaction failed. Writer fenced off\", e);\n+            }\n+        } else {\n+            log.debug(\"e.getCause()=null\", e);\n+        }\n+        throw new StorageMetadataException(\"Transaction failed\", e);\n+    }\n+\n+    private void ensureInitialized() {\n+        if (!isTableInitialized.get()) {\n+            try {\n+                this.tableStore.createSegment(tableName, timeout).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTA2MA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwNjkyOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OTo1NVrOG0h79A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MjoyNFrOG1BFNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTE1Ng==", "bodyText": "Exceptions.unwrap", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457735156", "createdAt": "2020-07-20T22:49:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            throw new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            throw new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof BadKeyVersionException) {\n+                throw new StorageMetadataWritesFencedOutException(\"Transaction writer is fenced off.\", e);\n+            }\n+            if (e.getCause().getCause() instanceof DataLogWriterNotPrimaryException) {\n+                throw new StorageMetadataVersionMismatchException(\"Transaction failed. Writer fenced off\", e);\n+            }\n+        } else {\n+            log.debug(\"e.getCause()=null\", e);\n+        }\n+        throw new StorageMetadataException(\"Transaction failed\", e);\n+    }\n+\n+    private void ensureInitialized() {\n+        if (!isTableInitialized.get()) {\n+            try {\n+                this.tableStore.createSegment(tableName, timeout).join();\n+                log.info(\"Created table segment {}\", tableName);\n+            } catch (CompletionException e) {\n+                if (e.getCause() instanceof StreamSegmentExistsException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NTQzMA==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458245430", "createdAt": "2020-07-21T16:52:24Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    private final TableStore tableStore;\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(1L);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes()));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.versioned(new ByteArraySegment(txnData.getKey().getBytes()),\n+                            TableKey.NO_VERSION);\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes()),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw e; // To make spotbugs happy.\n+        } catch (java.util.concurrent.ExecutionException e) {\n+            handleException(e.getCause());\n+            return;\n+        } catch (Exception e) {\n+            handleException(e);\n+            return;\n+        }\n+\n+    }\n+\n+    private void handleException(Throwable e) throws StorageMetadataException {\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            throw new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            throw new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        if (e.getCause() != null) {\n+            if (e.getCause().getCause() instanceof BadKeyVersionException) {\n+                throw new StorageMetadataWritesFencedOutException(\"Transaction writer is fenced off.\", e);\n+            }\n+            if (e.getCause().getCause() instanceof DataLogWriterNotPrimaryException) {\n+                throw new StorageMetadataVersionMismatchException(\"Transaction failed. Writer fenced off\", e);\n+            }\n+        } else {\n+            log.debug(\"e.getCause()=null\", e);\n+        }\n+        throw new StorageMetadataException(\"Transaction failed\", e);\n+    }\n+\n+    private void ensureInitialized() {\n+        if (!isTableInitialized.get()) {\n+            try {\n+                this.tableStore.createSegment(tableName, timeout).join();\n+                log.info(\"Created table segment {}\", tableName);\n+            } catch (CompletionException e) {\n+                if (e.getCause() instanceof StreamSegmentExistsException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTE1Ng=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwODMwOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemorySimpleStorageFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1MDoxN1rOG0h8qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1Njo0NlrOG1BQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTMzOA==", "bodyText": "?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457735338", "createdAt": "2020-07-20T22:50:17Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemorySimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkStorage;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * In-Memory mock for StorageFactory. Contents is destroyed when object is garbage collected.\n+ */\n+public class InMemorySimpleStorageFactory implements StorageFactory, AutoCloseable {\n+    @VisibleForTesting\n+    protected ScheduledExecutorService executor;\n+\n+    private Storage singletonStorage;\n+    private ChunkStorage singletonChunkStorage;\n+    private boolean reuseStorage;\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+    }\n+\n+    public InMemorySimpleStorageFactory() {\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, boolean reuseStorage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.reuseStorage = reuseStorage;\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, Storage storage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.singletonStorage = Preconditions.checkNotNull(storage, \"Storage\");\n+        this.reuseStorage = true;\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, ChunkStorage chunkStorage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.singletonChunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.reuseStorage = false;\n+    }\n+\n+    @Override\n+    public Storage createStorageAdapter() {\n+        synchronized (this) {\n+            if (reuseStorage) {\n+                if (null != singletonStorage) {\n+                    return singletonStorage;\n+                }\n+                singletonStorage = getStorage();\n+                return singletonStorage;\n+            }\n+            return getStorage();\n+        }\n+    }\n+\n+    private Storage getStorage() {\n+        if (null == singletonChunkStorage) {\n+            return newStorage(executor);\n+        } else {\n+            return newStorage(executor, singletonChunkStorage);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        // ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0ODIzNA==", "bodyText": ":) removed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458248234", "createdAt": "2020-07-21T16:56:46Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemorySimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkStorage;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * In-Memory mock for StorageFactory. Contents is destroyed when object is garbage collected.\n+ */\n+public class InMemorySimpleStorageFactory implements StorageFactory, AutoCloseable {\n+    @VisibleForTesting\n+    protected ScheduledExecutorService executor;\n+\n+    private Storage singletonStorage;\n+    private ChunkStorage singletonChunkStorage;\n+    private boolean reuseStorage;\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+    }\n+\n+    public InMemorySimpleStorageFactory() {\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, boolean reuseStorage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.reuseStorage = reuseStorage;\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, Storage storage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.singletonStorage = Preconditions.checkNotNull(storage, \"Storage\");\n+        this.reuseStorage = true;\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, ChunkStorage chunkStorage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.singletonChunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.reuseStorage = false;\n+    }\n+\n+    @Override\n+    public Storage createStorageAdapter() {\n+        synchronized (this) {\n+            if (reuseStorage) {\n+                if (null != singletonStorage) {\n+                    return singletonStorage;\n+                }\n+                singletonStorage = getStorage();\n+                return singletonStorage;\n+            }\n+            return getStorage();\n+        }\n+    }\n+\n+    private Storage getStorage() {\n+        if (null == singletonChunkStorage) {\n+            return newStorage(executor);\n+        } else {\n+            return newStorage(executor, singletonChunkStorage);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        // ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTMzOA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwOTcwOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemorySimpleStorageFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1MDo0MlrOG0h9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1MDo0MlrOG0h9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTUwNw==", "bodyText": "Delete this commented out code", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457735507", "createdAt": "2020-07-20T22:50:42Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemorySimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkStorage;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+/**\n+ * In-Memory mock for StorageFactory. Contents is destroyed when object is garbage collected.\n+ */\n+public class InMemorySimpleStorageFactory implements StorageFactory, AutoCloseable {\n+    @VisibleForTesting\n+    protected ScheduledExecutorService executor;\n+\n+    private Storage singletonStorage;\n+    private ChunkStorage singletonChunkStorage;\n+    private boolean reuseStorage;\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+    }\n+\n+    public InMemorySimpleStorageFactory() {\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, boolean reuseStorage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.reuseStorage = reuseStorage;\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, Storage storage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.singletonStorage = Preconditions.checkNotNull(storage, \"Storage\");\n+        this.reuseStorage = true;\n+    }\n+\n+    public InMemorySimpleStorageFactory(ScheduledExecutorService executor, ChunkStorage chunkStorage) {\n+        this.executor = Preconditions.checkNotNull(executor, \"executor\");\n+        this.singletonChunkStorage = Preconditions.checkNotNull(chunkStorage, \"chunkStorage\");\n+        this.reuseStorage = false;\n+    }\n+\n+    @Override\n+    public Storage createStorageAdapter() {\n+        synchronized (this) {\n+            if (reuseStorage) {\n+                if (null != singletonStorage) {\n+                    return singletonStorage;\n+                }\n+                singletonStorage = getStorage();\n+                return singletonStorage;\n+            }\n+            return getStorage();\n+        }\n+    }\n+\n+    private Storage getStorage() {\n+        if (null == singletonChunkStorage) {\n+            return newStorage(executor);\n+        } else {\n+            return newStorage(executor, singletonChunkStorage);\n+        }\n+    }\n+\n+    @Override\n+    public void close() {\n+        // ?\n+    }\n+\n+    /**\n+     * Creates a new InMemory Storage, without a rolling wrapper.\n+     *\n+     * @param executor An Executor to use for async operations.\n+     * @return A new InMemoryStorage.\n+     */\n+    @VisibleForTesting\n+    public static Storage newStorage(Executor executor) {\n+        return newStorage(executor, new InMemoryChunkStorage());\n+    }\n+\n+    /**\n+     * Creates a new InMemory Storage, without a rolling wrapper.\n+     *\n+     * @param executor     An Executor to use for async operations.\n+     * @param chunkStorage ChunkStorage to use.\n+     * @return A new InMemoryStorage.\n+     */\n+    @VisibleForTesting\n+    public static Storage newStorage(Executor executor, ChunkStorage chunkStorage) {\n+        //TableStore tableStore = new InMemoryTableStore(executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMxNTM1OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryTableStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1Mjo0OFrOG0iAjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTozMzo0MFrOG1GzqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjMzMg==", "bodyText": "What is wrong with TableStoreMock that already exists?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457736332", "createdAt": "2020-07-20T22:52:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryTableStore.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.KeyNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@RequiredArgsConstructor\n+@ThreadSafe\n+public class InMemoryTableStore implements TableStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjUwOA==", "bodyText": "This class looks suspiciously similar to that one ...", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457736508", "createdAt": "2020-07-20T22:53:19Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryTableStore.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.KeyNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@RequiredArgsConstructor\n+@ThreadSafe\n+public class InMemoryTableStore implements TableStore {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjMzMg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzOTI0MQ==", "bodyText": "I moved this class to tests. But still can't use  TableStoreMock  as it is defined in a different package that depends on this package.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458339241", "createdAt": "2020-07-21T19:33:40Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryTableStore.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.AsyncIterator;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.StreamSegmentNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.IteratorArgs;\n+import io.pravega.segmentstore.contracts.tables.IteratorItem;\n+import io.pravega.segmentstore.contracts.tables.KeyNotExistsException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.val;\n+\n+import javax.annotation.concurrent.GuardedBy;\n+import javax.annotation.concurrent.ThreadSafe;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@RequiredArgsConstructor\n+@ThreadSafe\n+public class InMemoryTableStore implements TableStore {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjMzMg=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMxODQ2OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/mocks/TableBasedMetadataSimpleStorageTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NDowMlrOG0iCQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoxMjozNFrOG1LrwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjc3MA==", "bodyText": "When are you going to do it?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457736770", "createdAt": "2020-07-20T22:54:02Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/mocks/TableBasedMetadataSimpleStorageTests.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedRollingStorageTests;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageTests;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkStorage;\n+import io.pravega.segmentstore.storage.chunklayer.SimpleStorageTests;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import io.pravega.segmentstore.storage.metadata.TableBasedMetadataStore;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Unit tests for {@link TableBasedMetadataStore} with {@link InMemoryChunkStorage} using {@link SimpleStorageTests}.\n+ */\n+public class TableBasedMetadataSimpleStorageTests extends SimpleStorageTests {\n+\n+    protected ChunkStorage getChunkStorage() throws Exception {\n+        return new InMemoryChunkStorage();\n+    }\n+\n+    protected ChunkMetadataStore getMetadataStore() throws Exception {\n+        TableStore tableStore = new InMemoryTableStore(executorService());\n+        String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+        return new TableBasedMetadataStore(tableName, tableStore);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testZombieFencing() throws Exception {\n+        //TableBasedMetadataStore does not support clone.\n+    }\n+\n+    /**\n+     * Unit tests for {@link TableBasedMetadataStore} using {@link ChunkedRollingStorageTests}.\n+     */\n+    public static class InMemorySimpleStorageRollingTests extends ChunkedRollingStorageTests {\n+        protected ChunkStorage getChunkStorage() throws Exception {\n+            return new InMemoryChunkStorage();\n+        }\n+\n+        protected ChunkMetadataStore getMetadataStore() throws Exception {\n+            TableStore tableStore = new InMemoryTableStore(executorService());\n+            String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+            return new TableBasedMetadataStore(tableName, tableStore);\n+        }\n+    }\n+\n+    /**\n+     * Unit tests for {@link TableBasedMetadataStore} using {@link ChunkedSegmentStorageTests}.\n+     */\n+    public static class InMemorySimpleStorage extends ChunkedSegmentStorageTests {\n+        @Override\n+        public ChunkMetadataStore createMetadataStore() throws Exception {\n+            TableStore tableStore = new InMemoryTableStore(Executors.newScheduledThreadPool(1));\n+            String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+            return new TableBasedMetadataStore(tableName, tableStore);\n+        }\n+\n+        public TestContext getTestContext() throws Exception {\n+            return new InMemorySimpleStorageTestContext(executorService());\n+        }\n+\n+        @Test\n+        @Ignore(\"This is not implemented yet.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjc5OQ==", "bodyText": "And below too.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457736799", "createdAt": "2020-07-20T22:54:10Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/mocks/TableBasedMetadataSimpleStorageTests.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedRollingStorageTests;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageTests;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkStorage;\n+import io.pravega.segmentstore.storage.chunklayer.SimpleStorageTests;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import io.pravega.segmentstore.storage.metadata.TableBasedMetadataStore;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Unit tests for {@link TableBasedMetadataStore} with {@link InMemoryChunkStorage} using {@link SimpleStorageTests}.\n+ */\n+public class TableBasedMetadataSimpleStorageTests extends SimpleStorageTests {\n+\n+    protected ChunkStorage getChunkStorage() throws Exception {\n+        return new InMemoryChunkStorage();\n+    }\n+\n+    protected ChunkMetadataStore getMetadataStore() throws Exception {\n+        TableStore tableStore = new InMemoryTableStore(executorService());\n+        String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+        return new TableBasedMetadataStore(tableName, tableStore);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testZombieFencing() throws Exception {\n+        //TableBasedMetadataStore does not support clone.\n+    }\n+\n+    /**\n+     * Unit tests for {@link TableBasedMetadataStore} using {@link ChunkedRollingStorageTests}.\n+     */\n+    public static class InMemorySimpleStorageRollingTests extends ChunkedRollingStorageTests {\n+        protected ChunkStorage getChunkStorage() throws Exception {\n+            return new InMemoryChunkStorage();\n+        }\n+\n+        protected ChunkMetadataStore getMetadataStore() throws Exception {\n+            TableStore tableStore = new InMemoryTableStore(executorService());\n+            String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+            return new TableBasedMetadataStore(tableName, tableStore);\n+        }\n+    }\n+\n+    /**\n+     * Unit tests for {@link TableBasedMetadataStore} using {@link ChunkedSegmentStorageTests}.\n+     */\n+    public static class InMemorySimpleStorage extends ChunkedSegmentStorageTests {\n+        @Override\n+        public ChunkMetadataStore createMetadataStore() throws Exception {\n+            TableStore tableStore = new InMemoryTableStore(Executors.newScheduledThreadPool(1));\n+            String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+            return new TableBasedMetadataStore(tableName, tableStore);\n+        }\n+\n+        public TestContext getTestContext() throws Exception {\n+            return new InMemorySimpleStorageTestContext(executorService());\n+        }\n+\n+        @Test\n+        @Ignore(\"This is not implemented yet.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjc3MA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxOTEzNw==", "bodyText": "Implemented.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458419137", "createdAt": "2020-07-21T22:12:34Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/mocks/TableBasedMetadataSimpleStorageTests.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.mocks;\n+\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedRollingStorageTests;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageTests;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkStorage;\n+import io.pravega.segmentstore.storage.chunklayer.SimpleStorageTests;\n+import io.pravega.segmentstore.storage.metadata.ChunkMetadataStore;\n+import io.pravega.segmentstore.storage.metadata.TableBasedMetadataStore;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Unit tests for {@link TableBasedMetadataStore} with {@link InMemoryChunkStorage} using {@link SimpleStorageTests}.\n+ */\n+public class TableBasedMetadataSimpleStorageTests extends SimpleStorageTests {\n+\n+    protected ChunkStorage getChunkStorage() throws Exception {\n+        return new InMemoryChunkStorage();\n+    }\n+\n+    protected ChunkMetadataStore getMetadataStore() throws Exception {\n+        TableStore tableStore = new InMemoryTableStore(executorService());\n+        String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+        return new TableBasedMetadataStore(tableName, tableStore);\n+    }\n+\n+    @Test\n+    @Override\n+    public void testZombieFencing() throws Exception {\n+        //TableBasedMetadataStore does not support clone.\n+    }\n+\n+    /**\n+     * Unit tests for {@link TableBasedMetadataStore} using {@link ChunkedRollingStorageTests}.\n+     */\n+    public static class InMemorySimpleStorageRollingTests extends ChunkedRollingStorageTests {\n+        protected ChunkStorage getChunkStorage() throws Exception {\n+            return new InMemoryChunkStorage();\n+        }\n+\n+        protected ChunkMetadataStore getMetadataStore() throws Exception {\n+            TableStore tableStore = new InMemoryTableStore(executorService());\n+            String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+            return new TableBasedMetadataStore(tableName, tableStore);\n+        }\n+    }\n+\n+    /**\n+     * Unit tests for {@link TableBasedMetadataStore} using {@link ChunkedSegmentStorageTests}.\n+     */\n+    public static class InMemorySimpleStorage extends ChunkedSegmentStorageTests {\n+        @Override\n+        public ChunkMetadataStore createMetadataStore() throws Exception {\n+            TableStore tableStore = new InMemoryTableStore(Executors.newScheduledThreadPool(1));\n+            String tableName = \"TableBasedMetadataSimpleStorageTests\";\n+            return new TableBasedMetadataStore(tableName, tableStore);\n+        }\n+\n+        public TestContext getTestContext() throws Exception {\n+            return new InMemorySimpleStorageTestContext(executorService());\n+        }\n+\n+        @Test\n+        @Ignore(\"This is not implemented yet.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjc3MA=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMxOTkwOnYy", "diffSide": "RIGHT", "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NDo0NlrOG0iDHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NDoxOVrOG1BJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjk5MQ==", "bodyText": "most of the changes in this file look unrelated. Any chance you could revert them?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457736991", "createdAt": "2020-07-20T22:54:46Z", "author": {"login": "andreipaduroiu"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -421,14 +425,14 @@ public String getZkUrl() {\n     @Synchronized\n     public void close() throws Exception {\n         if (isInProcSegmentStore) {\n-            for ( ServiceStarter starter : this.nodeServiceStarter ) {\n+            for (ServiceStarter starter : this.nodeServiceStarter) {\n                 starter.shutdown();\n             }\n         }\n         if (isInProcController) {\n-            for ( ControllerServiceMain controller : this.controllerServers ) {\n-                    controller.stopAsync();\n-                }\n+            for (ControllerServiceMain controller : this.controllerServers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NjYwMw==", "bodyText": "my bad.\ndone", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458246603", "createdAt": "2020-07-21T16:54:19Z", "author": {"login": "sachin-j-joshi"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -421,14 +425,14 @@ public String getZkUrl() {\n     @Synchronized\n     public void close() throws Exception {\n         if (isInProcSegmentStore) {\n-            for ( ServiceStarter starter : this.nodeServiceStarter ) {\n+            for (ServiceStarter starter : this.nodeServiceStarter) {\n                 starter.shutdown();\n             }\n         }\n         if (isInProcController) {\n-            for ( ControllerServiceMain controller : this.controllerServers ) {\n-                    controller.stopAsync();\n-                }\n+            for (ControllerServiceMain controller : this.controllerServers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjk5MQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMyMTA4OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NToxNVrOG0iDzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NToxNVrOG0iDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNzE2Ng==", "bodyText": "Delete commented out code", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457737166", "createdAt": "2020-07-20T22:55:15Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -241,50 +258,55 @@ void endToEndProcess(boolean verifySegmentContent) throws Exception {\n \n         // Phase 3: Force a recovery, immediately check reads, then truncate and read at the same time.\n         log.info(\"Starting Phase 3.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             checkReads(segmentContents, segmentStore);\n             log.info(\"Finished checking reads.\");\n+        }\n \n-            if (verifySegmentContent) {\n+        if (verifySegmentContent) {\n+            try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                val segmentStore = builder.createStreamSegmentService();\n                 // Wait for all the data to move to Storage.\n-                waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore)\n+                waitForSegmentsInStorage(segmentNames, segmentStore)\n                         .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n                 log.info(\"Finished waiting for segments in Storage.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n+                //}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMyMTM5OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NToyNFrOG0iD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1NDozMlrOG1BKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNzIwOQ==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457737209", "createdAt": "2020-07-20T22:55:24Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -241,50 +258,55 @@ void endToEndProcess(boolean verifySegmentContent) throws Exception {\n \n         // Phase 3: Force a recovery, immediately check reads, then truncate and read at the same time.\n         log.info(\"Starting Phase 3.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             checkReads(segmentContents, segmentStore);\n             log.info(\"Finished checking reads.\");\n+        }\n \n-            if (verifySegmentContent) {\n+        if (verifySegmentContent) {\n+            try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                val segmentStore = builder.createStreamSegmentService();\n                 // Wait for all the data to move to Storage.\n-                waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore)\n+                waitForSegmentsInStorage(segmentNames, segmentStore)\n                         .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n                 log.info(\"Finished waiting for segments in Storage.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n+                //}\n \n+                //try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                //    val segmentStore = builder.createStreamSegmentService();\n                 checkReadsWhileTruncating(segmentContents, startOffsets, segmentStore);\n                 log.info(\"Finished checking reads while truncating.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Phase 3.\");\n             }\n         }\n \n         // Phase 4: Force a recovery, seal segments and then delete them.\n         log.info(\"Starting Phase 4.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage)) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             // Seals.\n             sealSegments(segmentNames, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n             log.info(\"Finished sealing.\");\n \n             checkSegmentStatus(lengths, startOffsets, true, false, expectedAttributeValue, segmentStore);\n-\n+            //}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0Njc0NA==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458246744", "createdAt": "2020-07-21T16:54:32Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -241,50 +258,55 @@ void endToEndProcess(boolean verifySegmentContent) throws Exception {\n \n         // Phase 3: Force a recovery, immediately check reads, then truncate and read at the same time.\n         log.info(\"Starting Phase 3.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             checkReads(segmentContents, segmentStore);\n             log.info(\"Finished checking reads.\");\n+        }\n \n-            if (verifySegmentContent) {\n+        if (verifySegmentContent) {\n+            try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                val segmentStore = builder.createStreamSegmentService();\n                 // Wait for all the data to move to Storage.\n-                waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore)\n+                waitForSegmentsInStorage(segmentNames, segmentStore)\n                         .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n                 log.info(\"Finished waiting for segments in Storage.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n+                //}\n \n+                //try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                //    val segmentStore = builder.createStreamSegmentService();\n                 checkReadsWhileTruncating(segmentContents, startOffsets, segmentStore);\n                 log.info(\"Finished checking reads while truncating.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Phase 3.\");\n             }\n         }\n \n         // Phase 4: Force a recovery, seal segments and then delete them.\n         log.info(\"Starting Phase 4.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage)) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             // Seals.\n             sealSegments(segmentNames, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n             log.info(\"Finished sealing.\");\n \n             checkSegmentStatus(lengths, startOffsets, true, false, expectedAttributeValue, segmentStore);\n-\n+            //}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNzIwOQ=="}, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMyMTU0OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NTozMVrOG0iEEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NTozMVrOG0iEEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNzIzNQ==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457737235", "createdAt": "2020-07-20T22:55:31Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -241,50 +258,55 @@ void endToEndProcess(boolean verifySegmentContent) throws Exception {\n \n         // Phase 3: Force a recovery, immediately check reads, then truncate and read at the same time.\n         log.info(\"Starting Phase 3.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             checkReads(segmentContents, segmentStore);\n             log.info(\"Finished checking reads.\");\n+        }\n \n-            if (verifySegmentContent) {\n+        if (verifySegmentContent) {\n+            try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                val segmentStore = builder.createStreamSegmentService();\n                 // Wait for all the data to move to Storage.\n-                waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore)\n+                waitForSegmentsInStorage(segmentNames, segmentStore)\n                         .get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n                 log.info(\"Finished waiting for segments in Storage.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n+                //}\n \n+                //try (val builder = createBuilder(++instanceId, useChunkStorage);) {\n+                //    val segmentStore = builder.createStreamSegmentService();\n                 checkReadsWhileTruncating(segmentContents, startOffsets, segmentStore);\n                 log.info(\"Finished checking reads while truncating.\");\n \n-                checkStorage(segmentContents, segmentStore, readOnlySegmentStore);\n+                checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Phase 3.\");\n             }\n         }\n \n         // Phase 4: Force a recovery, seal segments and then delete them.\n         log.info(\"Starting Phase 4.\");\n-        try (val builder = createBuilder(++instanceId);\n-             val readOnlyBuilder = createReadOnlyBuilder(instanceId)) {\n+        try (val builder = createBuilder(++instanceId, useChunkStorage)) {\n             val segmentStore = builder.createStreamSegmentService();\n-            val readOnlySegmentStore = readOnlyBuilder.createStreamSegmentService();\n-\n             // Seals.\n             sealSegments(segmentNames, segmentStore).get(TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n             log.info(\"Finished sealing.\");\n \n             checkSegmentStatus(lengths, startOffsets, true, false, expectedAttributeValue, segmentStore);\n-\n+            //}\n             if (verifySegmentContent) {\n-                waitForSegmentsInStorage(segmentNames, segmentStore, readOnlySegmentStore)\n+                //try (val builder = createBuilder(++instanceId, useChunkStorage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMyMzg1OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NjoyN1rOG0iFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NjoyN1rOG0iFVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNzU1OQ==", "bodyText": "remove", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r457737559", "createdAt": "2020-07-20T22:56:27Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -869,11 +898,33 @@ private void checkAppendLeaks(ArrayList<ByteBuf> buffers) {\n                 buffers.stream().allMatch(r -> r.refCnt() == 0));\n     }\n \n-    private CompletableFuture<Void> waitForSegmentsInStorage(Collection<String> segmentNames, StreamSegmentStore baseStore,\n+    private ArrayList<SegmentProperties> getStreamSegmentInfoList(Collection<String> segmentNames, StreamSegmentStore baseStore) {\n+        ArrayList<SegmentProperties> retValue = new ArrayList<>();\n+        for (String segmentName : segmentNames) {\n+            SegmentProperties sp = baseStore.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+            retValue.add(sp);\n+        }\n+\n+        return retValue;\n+    }\n+\n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0281e13fb1602d279ac2064282546f02a07482b"}, "originalPosition": 419}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI4NTEzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTozNDoyMFrOG1aovA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMjoxNlrOG2WBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NDEyNA==", "bodyText": "There is no easy way to do this method.\n\nI'm not sure I get what is hard about it. If you are referring to visibility, then having the test class is in the same package should enable this method to be package protected.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458664124", "createdAt": "2020-07-22T09:34:20Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    /**\n+     * Instance of the {@link TableStore}.\n+     */\n+    @Getter\n+    private final TableStore tableStore;\n+\n+    /**\n+     * Name of the table segment.\n+     */\n+    @Getter\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(30);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes(Charsets.UTF_8)));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.unversioned(new ByteArraySegment(txnData.getKey().getBytes(Charsets.UTF_8)));\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes(Charsets.UTF_8)),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw handleException(e); // Make spotbugs happy.\n+        } catch (Exception e) {\n+            throw handleException(e);\n+        }\n+    }\n+\n+    private StorageMetadataException handleException(Throwable e) throws StorageMetadataException {\n+        e  = Exceptions.unwrap(e);\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            return new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            return new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        return new StorageMetadataException(\"Transaction failed\", e);\n+    }\n+\n+    private void ensureInitialized() {\n+        if (!isTableInitialized.get()) {\n+            try {\n+                this.tableStore.createSegment(tableName, timeout).join();\n+                log.info(\"Created table segment {}\", tableName);\n+            } catch (CompletionException e) {\n+                if (e.getCause() instanceof StreamSegmentExistsException) {\n+                    log.info(\"Table segment {} already exists.\", tableName);\n+                }\n+            }\n+            isTableInitialized.set(true);\n+        }\n+    }\n+\n+    /**\n+     * Copy the version of one instance to other.\n+     * This only for test purposes. There is no easy way to do this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNjk5NA==", "bodyText": "tests moved to different package.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459636994", "createdAt": "2020-07-23T18:12:16Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/metadata/TableBasedMetadataStore.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Charsets;\n+import com.google.common.base.Preconditions;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.util.BufferView;\n+import io.pravega.common.util.ByteArraySegment;\n+import io.pravega.segmentstore.contracts.StreamSegmentExistsException;\n+import io.pravega.segmentstore.contracts.tables.BadKeyVersionException;\n+import io.pravega.segmentstore.contracts.tables.TableEntry;\n+import io.pravega.segmentstore.contracts.tables.TableKey;\n+import io.pravega.segmentstore.contracts.tables.TableStore;\n+import io.pravega.segmentstore.storage.DataLogWriterNotPrimaryException;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import lombok.val;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * {@link TableStore} based storage metadata store.\n+ */\n+@Slf4j\n+public class TableBasedMetadataStore extends BaseMetadataStore {\n+    /**\n+     * Instance of the {@link TableStore}.\n+     */\n+    @Getter\n+    private final TableStore tableStore;\n+\n+    /**\n+     * Name of the table segment.\n+     */\n+    @Getter\n+    private final String tableName;\n+    private final Duration timeout = Duration.ofSeconds(30);\n+    private final AtomicBoolean isTableInitialized = new AtomicBoolean(false);\n+    private final BaseMetadataStore.TransactionData.TransactionDataSerializer serializer = new BaseMetadataStore.TransactionData.TransactionDataSerializer();\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param tableName Name of the table segment.\n+     * @param tableStore Instance of the {@link TableStore}.\n+     */\n+    public TableBasedMetadataStore(String tableName, TableStore tableStore) {\n+        this.tableStore = Preconditions.checkNotNull(tableStore, \"tableStore\");\n+        this.tableName = Preconditions.checkNotNull(tableName, \"tableName\");\n+    }\n+\n+    /**\n+     * Reads a metadata record for the given key.\n+     *\n+     * @param key Key for the metadata record.\n+     * @return Associated {@link io.pravega.segmentstore.storage.metadata.BaseMetadataStore.TransactionData}.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected TransactionData read(String key) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<BufferView> keys = new ArrayList<>();\n+        keys.add(new ByteArraySegment(key.getBytes(Charsets.UTF_8)));\n+        try {\n+            List<TableEntry> retValue = this.tableStore.get(tableName, keys, timeout).get();\n+            if (retValue.size() == 1) {\n+                TableEntry entry = retValue.get(0);\n+                if (null != entry) {\n+                    val arr = entry.getValue();\n+                    TransactionData txnData = serializer.deserialize(arr);\n+                    txnData.setDbObject(entry.getKey().getVersion());\n+                    txnData.setPersisted(true);\n+                    return txnData;\n+                }\n+            }\n+        } catch (IllegalStateException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new StorageMetadataException(\"Error while reading\", e);\n+        }\n+\n+        return TransactionData.builder()\n+                .key(key)\n+                .persisted(true)\n+                .dbObject(TableKey.NOT_EXISTS)\n+                .build();\n+    }\n+\n+    /**\n+     * Writes transaction data from a given list to the metadata store.\n+     *\n+     * @param dataList List of transaction data to write.\n+     * @throws StorageMetadataException Exception related to storage metadata operations.\n+     */\n+    @Override\n+    protected void writeAll(Collection<TransactionData> dataList) throws StorageMetadataException {\n+        ensureInitialized();\n+        List<TableEntry> toUpdate = new ArrayList<>();\n+        HashMap<TableEntry, TransactionData> entryToTxnDataMap = new HashMap<TableEntry, TransactionData>();\n+        HashMap<TableKey, TransactionData> deletedKeyToTxnDataMap = new HashMap<TableKey, TransactionData>();\n+        List<TableKey> keysToDelete = new ArrayList<>();\n+        try {\n+            for (TransactionData txnData : dataList) {\n+                Preconditions.checkState(null != txnData.getDbObject());\n+\n+                long version = ((Long) txnData.getDbObject()).longValue();\n+                if (null == txnData.getValue()) {\n+                    val toDelete = TableKey.unversioned(new ByteArraySegment(txnData.getKey().getBytes(Charsets.UTF_8)));\n+                    keysToDelete.add(toDelete);\n+                    deletedKeyToTxnDataMap.put(toDelete, txnData);\n+                }\n+\n+                val arraySegment = serializer.serialize(txnData);\n+\n+                TableEntry tableEntry = TableEntry.versioned(\n+                        new ByteArraySegment(txnData.getKey().getBytes(Charsets.UTF_8)),\n+                        arraySegment,\n+                        version);\n+                entryToTxnDataMap.put(tableEntry, txnData);\n+                toUpdate.add(tableEntry);\n+            }\n+\n+            // Now put uploaded keys.\n+            List<Long> ret = this.tableStore.put(tableName, toUpdate, timeout).get();\n+\n+            // Update versions.\n+            int i = 0;\n+            for (TableEntry tableEntry : toUpdate) {\n+                entryToTxnDataMap.get(tableEntry).setDbObject(ret.get(i));\n+                i++;\n+            }\n+\n+            // Delete deleted keys.\n+            this.tableStore.remove(tableName, keysToDelete, timeout).get();\n+            for (val deletedKey : keysToDelete) {\n+                deletedKeyToTxnDataMap.get(deletedKey).setDbObject(TableKey.NOT_EXISTS);\n+            }\n+        } catch (RuntimeException e) {\n+            throw handleException(e); // Make spotbugs happy.\n+        } catch (Exception e) {\n+            throw handleException(e);\n+        }\n+    }\n+\n+    private StorageMetadataException handleException(Throwable e) throws StorageMetadataException {\n+        e  = Exceptions.unwrap(e);\n+        if (e instanceof DataLogWriterNotPrimaryException) {\n+            return new StorageMetadataWritesFencedOutException(\"Transaction failed. Writer fenced off\", e);\n+        }\n+        if (e instanceof BadKeyVersionException) {\n+            return new StorageMetadataVersionMismatchException(\"Transaction failed. Version Mismatch.\", e);\n+        }\n+        return new StorageMetadataException(\"Transaction failed\", e);\n+    }\n+\n+    private void ensureInitialized() {\n+        if (!isTableInitialized.get()) {\n+            try {\n+                this.tableStore.createSegment(tableName, timeout).join();\n+                log.info(\"Created table segment {}\", tableName);\n+            } catch (CompletionException e) {\n+                if (e.getCause() instanceof StreamSegmentExistsException) {\n+                    log.info(\"Table segment {} already exists.\", tableName);\n+                }\n+            }\n+            isTableInitialized.set(true);\n+        }\n+    }\n+\n+    /**\n+     * Copy the version of one instance to other.\n+     * This only for test purposes. There is no easy way to do this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2NDEyNA=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjM1OTk3OnYy", "diffSide": "RIGHT", "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3SimpleStorageFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo1NDo0MlrOG1bWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxNjoxNlrOG1nQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3NTg1NQ==", "bodyText": "I see that you have created a Simple class for each storage option. I understand that you have done to be able to create chunk-based storage adaptors. Why have you chosen this path rather than say having a single factory per option and configure using the configuration that we pass to the factory?\nWhat's the plan going forward? Once we deprecate and remove rolling storage, we keep the Simple term in the name, rename it, or what else?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458675855", "createdAt": "2020-07-22T09:54:42Z", "author": {"login": "fpj"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3SimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.extendeds3;\n+\n+import com.emc.object.s3.S3Client;\n+import com.emc.object.s3.S3Config;\n+import com.emc.object.s3.jersey.S3JerseyClient;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * Factory for ExtendedS3 {@link Storage} implemented using {@link ChunkedSegmentStorage} and {@link ExtendedS3ChunkStorage}.\n+ */\n+@RequiredArgsConstructor\n+public class ExtendedS3SimpleStorageFactory implements StorageFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg3MTAzOA==", "bodyText": "The StorageFactory is created during initialization sequence. This is current design and I did not want to make big changes to current initialization sequence and wanted the change to be as small as it could be. There is no good way to pass in the configurations to the factory without changing factory interface or otherwise make factory stateful (which is not a good idea).\nThat is the reason why i chose this path.\nIn next few iterations we'll remove the old code and at that time we can rename the factory etc. Until then old and new code must live side by side.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458871038", "createdAt": "2020-07-22T15:16:16Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3SimpleStorageFactory.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.extendeds3;\n+\n+import com.emc.object.s3.S3Client;\n+import com.emc.object.s3.S3Config;\n+import com.emc.object.s3.jersey.S3JerseyClient;\n+import io.pravega.segmentstore.storage.Storage;\n+import io.pravega.segmentstore.storage.StorageFactory;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorage;\n+import io.pravega.segmentstore.storage.chunklayer.ChunkedSegmentStorageConfig;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * Factory for ExtendedS3 {@link Storage} implemented using {@link ChunkedSegmentStorage} and {@link ExtendedS3ChunkStorage}.\n+ */\n+@RequiredArgsConstructor\n+public class ExtendedS3SimpleStorageFactory implements StorageFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3NTg1NQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjM3NTY2OnYy", "diffSide": "RIGHT", "path": "config/config.properties", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTo1ODo0M1rOG1bf6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozODo1MFrOG3swGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ==", "bodyText": "Is the pair ROLLING_STORAGE and TABLE_BASED a viable option?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458678249", "createdAt": "2020-07-22T09:58:43Z", "author": {"login": "fpj"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2Mjg3NA==", "bodyText": "No. That pair is not valid. (And not planned).\nEven with valid combination the implementation may not support it.\nThe implementation is supposed to return array of valid option via\npublic StorageFactoryInfo[] getStorageFactories() {", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458862874", "createdAt": "2020-07-22T15:05:14Z", "author": {"login": "sachin-j-joshi"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3NDUzOQ==", "bodyText": "Can we make sure that we throw an error (in the ServiceConfig constructor) if this happens. We want to prevent startup for illegal combinations.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459574539", "createdAt": "2020-07-23T16:25:31Z", "author": {"login": "andreipaduroiu"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDk2MA==", "bodyText": "One possible solution that comes to my mind is having a unified enum that lists all legal combinations. Since we have 2 x 2 and one of those is not allowed, we are left with 3 legal combinations. Would this make things less prone to problems?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459584960", "createdAt": "2020-07-23T16:42:45Z", "author": {"login": "andreipaduroiu"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MDY1Nw==", "bodyText": "Even the option - HEADER_BASED  + CHUNKED_STORAGE is really not a \"real\" option. This is more of an upgrade concern and  should be dealt with independently when we have upgrade implemented.\nWhat do you think?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459640657", "createdAt": "2020-07-23T18:18:38Z", "author": {"login": "sachin-j-joshi"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNzIwMg==", "bodyText": "it doesn't look like you need both parameters. What about keeping only one, say pravegaservice.storage.metadata.format, and inferring the value of the other?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460907202", "createdAt": "2020-07-27T13:55:04Z", "author": {"login": "fpj"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2MDY5Mw==", "bodyText": "Chunked storage can support either new format (default) or legacy format (during upgrade).\nSo it is StorageLayoutType that determines whether it is SLTS or not.\nOriginally I had two separate option because we wanted to support  HEADER_BASED + CHUNKED_STORAGE as an upgrade option.\nHowever it seems it is better to deal with upgrade path separately without bringing that concept here. https://github.com/pravega/pravega/wiki/PDP-34:-Simplified-Tier-2#supported-options", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460960693", "createdAt": "2020-07-27T15:07:31Z", "author": {"login": "sachin-j-joshi"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODA3Mg==", "bodyText": "Fixed. I removed pravegaservice.storage.metadata.format as an option.\nNow it is implicitly TABLE_BASED when lay out is CHUNKED_STORAGE .\nWhen we have upgrade epic/story then we introduce new property corresponding to upgrade option.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461058072", "createdAt": "2020-07-27T17:38:50Z", "author": {"login": "sachin-j-joshi"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,21 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.\n+#   ROLLING_STORAGE - Using RollingStorage.\n+# Default value: ROLLING_STORAGE\n+# pravegaservice.storage.layout=ROLLING_STORAGE\n+\n+# Storage metadata format for Tier 2 storage.\n+# Valid values:\n+#   TABLE_BASED   - Using ChunkedSegmentStorage.\n+#   HEADER_BASED  - Using AsyncStorageWrapper.\n+# Default value: HEADER_BASED\n+# pravegaservice.storage.metadata.format=HEADER_BASED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY3ODI0OQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjM4NjkzOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowMTo0NlrOG1bm6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMzowOVrOG2WC_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDA0Mw==", "bodyText": "The indentation looks incorrect.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458680043", "createdAt": "2020-07-22T10:01:46Z", "author": {"login": "fpj"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "diffHunk": "@@ -49,16 +61,88 @@ public void testNoOpWithWithInMemoryStorage() throws Exception {\n \n         configBuilder\n                 .include(StorageExtraConfig.builder()\n-                .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n+                        .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg5NDgxMA==", "bodyText": "should be\n.include(StorageExtraConfig.builder()                \n                       .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458894810", "createdAt": "2020-07-22T15:49:02Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "diffHunk": "@@ -49,16 +61,88 @@ public void testNoOpWithWithInMemoryStorage() throws Exception {\n \n         configBuilder\n                 .include(StorageExtraConfig.builder()\n-                .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n+                        .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDA0Mw=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzUwMA==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459637500", "createdAt": "2020-07-23T18:13:09Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "diffHunk": "@@ -49,16 +61,88 @@ public void testNoOpWithWithInMemoryStorage() throws Exception {\n \n         configBuilder\n                 .include(StorageExtraConfig.builder()\n-                .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n+                        .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDA0Mw=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjM5MDM0OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowMjo0N1rOG1bpIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozMzoyM1rOG1oCNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDYwOQ==", "bodyText": "Why is this being ignored? I actually see a few test cases ignored in this class.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458680609", "createdAt": "2020-07-22T10:02:47Z", "author": {"login": "fpj"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "diffHunk": "@@ -49,16 +61,88 @@ public void testNoOpWithWithInMemoryStorage() throws Exception {\n \n         configBuilder\n                 .include(StorageExtraConfig.builder()\n-                .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n+                        .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n \n         builder = ServiceBuilder.newInMemoryBuilder(configBuilder.build())\n                 .withStorageFactory(setup -> {\n                     StorageLoader loader = new StorageLoader();\n-                    expectedFactory = loader.load(setup, \"INMEMORY\", executor);\n+                    expectedFactory = loader.load(setup, \"INMEMORY\", StorageLayoutType.ROLLING_STORAGE, StorageMetadataFormat.HEADER_BASED, executor);\n                     return expectedFactory;\n                 });\n         builder.initialize();\n         assertTrue(expectedFactory instanceof InMemoryStorageFactory);\n         builder.close();\n     }\n+\n+    @Test\n+    public void testFileSystemStorage() throws Exception {\n+        val storageType = ServiceConfig.StorageType.FILESYSTEM;\n+        ServiceBuilder builder = getStorageFactory(storageType, \"FILESYSTEM\", StorageLayoutType.ROLLING_STORAGE, StorageMetadataFormat.HEADER_BASED);\n+        assertTrue(expectedFactory instanceof FileSystemStorageFactory);\n+        builder.close();\n+    }\n+\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4MzYzNg==", "bodyText": "The tests need to be fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458883636", "createdAt": "2020-07-22T15:33:23Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/StorageLoaderTest.java", "diffHunk": "@@ -49,16 +61,88 @@ public void testNoOpWithWithInMemoryStorage() throws Exception {\n \n         configBuilder\n                 .include(StorageExtraConfig.builder()\n-                .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n+                        .with(StorageExtraConfig.STORAGE_NO_OP_MODE, false));\n \n         builder = ServiceBuilder.newInMemoryBuilder(configBuilder.build())\n                 .withStorageFactory(setup -> {\n                     StorageLoader loader = new StorageLoader();\n-                    expectedFactory = loader.load(setup, \"INMEMORY\", executor);\n+                    expectedFactory = loader.load(setup, \"INMEMORY\", StorageLayoutType.ROLLING_STORAGE, StorageMetadataFormat.HEADER_BASED, executor);\n                     return expectedFactory;\n                 });\n         builder.initialize();\n         assertTrue(expectedFactory instanceof InMemoryStorageFactory);\n         builder.close();\n     }\n+\n+    @Test\n+    public void testFileSystemStorage() throws Exception {\n+        val storageType = ServiceConfig.StorageType.FILESYSTEM;\n+        ServiceBuilder builder = getStorageFactory(storageType, \"FILESYSTEM\", StorageLayoutType.ROLLING_STORAGE, StorageMetadataFormat.HEADER_BASED);\n+        assertTrue(expectedFactory instanceof FileSystemStorageFactory);\n+        builder.close();\n+    }\n+\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDYwOQ=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjM5NjczOnYy", "diffSide": "LEFT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageFactoryCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowNDozNFrOG1btMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozNTowMlrOG1oHAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MTY0OA==", "bodyText": "Is it intentional to remove this getName() method? I guess it is fine as otherwise the build would fail...", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458681648", "createdAt": "2020-07-22T10:04:34Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageFactoryCreator.java", "diffHunk": "@@ -18,14 +18,17 @@\n public interface StorageFactoryCreator {\n     /**\n      * API to create a storage factory with given configuration.\n-     * @param setup     Configuration for the factory.\n-     * @param executor  The storage factory is expected to use this ExecutorService for execution of its tasks.\n+     *\n+     * @param storageFactoryInfo Properties of storage factory to create.\n+     * @param setup              Configuration for the factory.\n+     * @param executor           The storage factory is expected to use this ExecutorService for execution of its tasks.\n      */\n-    StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor);\n+    StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor);\n \n     /**\n-     * The unique name for the storage factory.\n-     * @return  Unique name for the storage factory.\n+     * The properties of the available storage factories.\n+     *\n+     * @return The array of StorageFactoryInfo.\n      */\n-    String getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NDg2NA==", "bodyText": "The interface has been changed.\nThe implementation is now supposed to return array of valid option via\npublic StorageFactoryInfo[] getStorageFactories() {", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458884864", "createdAt": "2020-07-22T15:35:02Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/StorageFactoryCreator.java", "diffHunk": "@@ -18,14 +18,17 @@\n public interface StorageFactoryCreator {\n     /**\n      * API to create a storage factory with given configuration.\n-     * @param setup     Configuration for the factory.\n-     * @param executor  The storage factory is expected to use this ExecutorService for execution of its tasks.\n+     *\n+     * @param storageFactoryInfo Properties of storage factory to create.\n+     * @param setup              Configuration for the factory.\n+     * @param executor           The storage factory is expected to use this ExecutorService for execution of its tasks.\n      */\n-    StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor);\n+    StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor);\n \n     /**\n-     * The unique name for the storage factory.\n-     * @return  Unique name for the storage factory.\n+     * The properties of the available storage factories.\n+     *\n+     * @return The array of StorageFactoryInfo.\n      */\n-    String getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MTY0OA=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQxMzM1OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowOTozMFrOG1b3dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOToxNzozNlrOG4a6ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng==", "bodyText": "I don't understand what this exception path is doing, why is it correct to update the metadata and commit given that we suspect that there is a new owner?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458684276", "createdAt": "2020-07-22T10:09:30Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1MDg0MA==", "bodyText": "During openRead or openWrite we try to reconcile the chunk length in metadata with the actual length on LTS.\nThere is a failover case where segment was last written by a segment store instance that is no more valid, and therefore needs ownership change. Then the current instance itself fails over to even newer segment store instance during the open calls. This most recent instance truncates the segment removing some of the chunks.\nThis causes open to fail with missing chunks exception. Therefore it does not attempt to write to metadata store and does not detect it has been fenced out. This error is \"sticky\" - it is tried again and again and we can't recover from it. Although it does not allow zombie instance to incorrectly write any new data, it still causes quite a few logs to get written. and sometimes it takes a while to detect failover.\nThe change basically forces instances to write to metadata store where it will immediately get exceptions related to being fenced out.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458850840", "createdAt": "2020-07-22T14:49:06Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2MTYxNw==", "bodyText": "The change basically forces instances to write to metadata store where it will immediately get exceptions related to being fenced out.\n\nIf we are making the metadata change only to get the exception, then why not just throw directly? Is there any case in which the metadata change actually goes through?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460061617", "createdAt": "2020-07-24T13:45:40Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExNTEyMQ==", "bodyText": "ChunkNotFoundException in this case is only possible indication that , not confirmation.\nMissing chunk when metadata say it should exist is a pretty serious issue in normal circumstances and it should never ever happen. But it does happen in a very specific corner case when newer instance truncates segment without the zombie instance knowing about it. In this case ChunkNotFoundException shadows the underlying issue which is that this instance is no more valid - but because of the ChunkNotFoundException  it never commits and doesn't detect immediately.\nThis causes quite a bit spamming of logs until the instance detects that it is no longer a valid instance by some other means.\nBy trying to commit unchanged metadata, we force early detection of fencing out.\nIn case the metadata update actually succeeds then that means this instance is still the owner. In this case we simply throw the original exception as it might be a true issue. (The metadata update is a \"no-op\" as it doesn't change anything)\n} catch (ChunkNotFoundException e) {\n                // This probably means that this instance is fenced out and newer instance truncated this segment.\n                // Try a commit of unmodified data to fail fast.\n                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                        logPrefix,\n                        segmentMetadata.getName(),\n                        lastChunk.getName());\n                txn.update(segmentMetadata);\n                txn.commit();\n                throw e;\n            }", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460115121", "createdAt": "2020-07-24T15:11:27Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwMjQwNg==", "bodyText": "This is a convoluted way to disambiguate the scenario. My understanding is that:\n1- If the ChunkNotFoundException is due to the instance being fenced out, then we expect txn.update(segmentMetadata) (or maybe txn.commit()) to throw.\n2- If the ChunkNotFoundException is due to some other problem, then the original exception is rethrown, and the commit is essentially a no-op.\nAssuming this is correct, is there a more direct way of executing (1)?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460902406", "createdAt": "2020-07-27T13:48:18Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1NDQxOQ==", "bodyText": "In normal scenario, whenever an instance is fenced out then any further calls to txn.commit() throw StorageMetadataWritesFencedOutException .\nHowever if we encounter any other problem/exception then code doesn't reach txn.commit(). This is how we want it and this is how it works. In this particular scenario also, exactly the same is supposed to happen- attempt to change metadata should result in table store update (BK write) and fenced out exception.\nHowever, claimOwnership method is called from openRead/openWrite calls which requires us to check the length of last chunk.\nIn corner case when new instance truncates first and later zombie instance tries to open the same segment , the zombie instance finds the chunks missing and starts throwing exceptions. This prevents it from committing (and therefore detecting fencing out in this case).\nOptions -\n\n\nDo not change - results in quite a bit spam in logs with ChunkNotFound exceptions. This will continue until zombie instance is able to contact ZK and detect that container assignment has changed. This takes time.\n\n\nAttempt to fail early by committing  \"no-op\" change. If this instance is not fenced out, then commit will succeed, in this case throw original exception.\n\n\nI do not think there is an easier way to achieve this.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460954419", "createdAt": "2020-07-27T14:58:51Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1NDIxNg==", "bodyText": "The logic I think you are trying to implement is:\n           } catch (ChunkNotFoundException e) {\n                // This probably means that this instance is fenced out and newer instance truncated this segment.\n                // Try a commit of unmodified data to fail fast.\n                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                        logPrefix,\n                        segmentMetadata.getName(),\n                        lastChunk.getName());\n                if(amIFencedOut()) {\n                    throw new StorageMetadataWritesFencedOutException();\n                } else {\n                    throw e;\n                }\n            }\n\nAssuming this is right, you are implementing this if block using txn update and commit. My question is why you are not throwing the exception you want directly rather than inducing via this no-op transaction. It clearly requires determining whether this instance is fenced out, is it not doable?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461154216", "createdAt": "2020-07-27T20:36:30Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MDkxMw==", "bodyText": "Yes your code snippet is correct.\nhere is what is happening ...\nprivate void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMetadata) throws ChunkStorageException, StorageMetadataException {\n\n        // Get the last chunk\n        String lastChunkName = segmentMetadata.getLastChunk();\n        if (null != lastChunkName) {\n            ChunkMetadata lastChunk = (ChunkMetadata) txn.get(lastChunkName);\n            try {\n                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);   ========> throws exception\n                // Adjust its length;\n                if (chunkInfo.getLength() != lastChunk.getLength()) {\n                         // Adjust metadata  \n                        //  Without this update part , we have serious problem of data loss/corruption.\n                }\n             } catch (ChunkNotFoundException e) {\n                    throw e;\n              }\n         }\n            // Claim ownership.\n            // This is safe because the previous instance is definitely not an owner anymore. (even if this instance is no more owner)\n          // If this instance is no more owner, then transaction commit will fail.So it is still safe.\n         segmentMetadata.setOwnerEpoch(this.epoch);  \n         segmentMetadata.setOwnershipChanged(true); ===> metadata update.\n\n         // Update and commit\n         // If This instance is fenced this update will fail.\n         txn.commit();  =======>can't reach here because exception is thrown. \n}\n\nIf exception is thrown the normal txn.commit(); is not executed as that exception bubbles up.\nWe can't ignore ChunkNotFoundException and proceed to commit, because in case the commit succeeds then we have committed wrong/incomplete metadata and ignored a potentially serious error.\n\nBy committing no-change metadata - we are just forcing a write to BK that triggers StorageMetadataWritesFencedOutException being thrown.   If this commit succeeds then metadata is not incorrectly changed, and we then throw original exception .\nI think the limitation here is that the only way to figure out amIFencedOut() is to actually commit something.\nWe could also commit something useless data that is not used anywhere. But instead I am committing unchanged record.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461180913", "createdAt": "2020-07-27T21:28:31Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ4MzAzNw==", "bodyText": "The level of indirection is hacky because there is really no need to have a transaction in this exception handling. If a new instance has taken over, then I understand that previous ledgers have been fenced and closed, in which case, we can check that directly with BookKeeper#isClosed(ledgerId) and there isn't a need to attempt an add entry:\nhttps://bookkeeper.apache.org/docs/4.9.2/api/javadoc/org/apache/bookkeeper/client/BookKeeper.html#isClosed--\nI understand that while the new instance is trying to take over, there is a period in which the ledger is recovering, and consequently the state is not closed. However, when the new instance takes over ownership and starts making changes to chunk metadata, the process of closing ledgers from former owners must have completed.\nThis is not a blocker, but I'd say we should consider fixing it and throwing the exception directly rather than going through a txn update and commit. If you agree, please create an issue to fix it. There might be other parts of the code that could benefit from such a change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461483037", "createdAt": "2020-07-28T10:34:28Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgxNDQ1OA==", "bodyText": "Created tracking issue - #4987", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461814458", "createdAt": "2020-07-28T19:17:36Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -244,23 +239,42 @@ private void claimOwnership(MetadataTransaction txn, SegmentMetadata segmentMeta\n                     segmentMetadata.getName(),\n                     lastChunk.getName(),\n                     lastChunk.getLength());\n-            ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n-            Preconditions.checkState(chunkInfo != null);\n-            Preconditions.checkState(lastChunk != null);\n-            // Adjust its length;\n-            if (chunkInfo.getLength() != lastChunk.getLength()) {\n-                Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n-                // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n-                lastChunk.setLength(chunkInfo.getLength());\n-                segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n-                txn.update(lastChunk);\n-                log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+            try {\n+                ChunkInfo chunkInfo = chunkStorage.getInfo(lastChunkName);\n+                Preconditions.checkState(chunkInfo != null);\n+                Preconditions.checkState(lastChunk != null);\n+                // Adjust its length;\n+                if (chunkInfo.getLength() != lastChunk.getLength()) {\n+                    Preconditions.checkState(chunkInfo.getLength() > lastChunk.getLength());\n+                    // Whatever length you see right now is the final \"sealed\" length of the last chunk.\n+                    lastChunk.setLength(chunkInfo.getLength());\n+                    segmentMetadata.setLength(segmentMetadata.getLastChunkStartOffset() + lastChunk.getLength());\n+                    txn.update(lastChunk);\n+                    log.debug(\"{} claimOwnership - Length of last chunk adjusted - segment={}, last chunk={}, Length={}.\",\n+                            logPrefix,\n+                            segmentMetadata.getName(),\n+                            lastChunk.getName(),\n+                            chunkInfo.getLength());\n+                }\n+            } catch (ChunkNotFoundException e) {\n+                // This probably means that this instance is fenced out and newer instance truncated this segment.\n+                // Try a commit of unmodified data to fail fast.\n+                log.debug(\"{} claimOwnership - Last chunk was missing, failing fast - segment={}, last chunk={}.\",\n                         logPrefix,\n                         segmentMetadata.getName(),\n-                        lastChunk.getName(),\n-                        chunkInfo.getLength());\n+                        lastChunk.getName());\n+                txn.update(segmentMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDI3Ng=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjQxNDQzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDowOTo1MFrOG1b4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDozMzo0MlrOG1lTgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDQ0Mw==", "bodyText": "I don't understand this change, can you elaborate, please?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458684443", "createdAt": "2020-07-22T10:09:50Z", "author": {"login": "fpj"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -1045,7 +1059,7 @@ private void concatUsingAppend(ConcatArgument[] concatArgs) throws ChunkStorageE\n                 }\n \n                 // Finally commit.\n-                txn.commit(chunksToDelete.size() == 0); // if layout did not change then commit with lazyWrite.\n+                txn.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzODkxMw==", "bodyText": "This is a fix for a bug that I found during the testing.\nQuick background -\nWhen we commit using lazyCommit, we do not write changes to the table store immediately, but instead keep updated records in the memory and keep reusing/updating these in memory copies. This is done to avoid updating records when we are appending to the same chunk again and again. Such write operation causes chunk length and  segment length in metadata to change but otherwise nothing else changes.\nNow, in case of fail over this data stored in memory is lost.  But this very specific information can be reconstructed by looking at the actual chunk length and adjusting the metadata while doing openRead or openWrite.\nFor any other changes (addition/deletion of chunks, metadata updates like sealed etc) we must commit the updated record to the underlying store immediately because those changes are not reconstructible.\nWhat was the bug ?\nI was incorrectly handling the \"corner case\"  where segment is truncated but first chunk is not removed. In this case only the start offset recorded in metadata changes but nothing else changes.\nI was incorrectly committing with lazyCommit for truncate operation thinking if the layout (i.e chunks in the segment) did not change then we don't have to commit eagerly.\nThis is incorrect because in case of fail over the start offset changes but will be lost and this change is not recoverable.\nWhat is the fix ?\nAlways commit eagerly as it is required in all cases.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r458838913", "createdAt": "2020-07-22T14:33:42Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -1045,7 +1059,7 @@ private void concatUsingAppend(ConcatArgument[] concatArgs) throws ChunkStorageE\n                 }\n \n                 // Finally commit.\n-                txn.commit(chunksToDelete.size() == 0); // if layout did not change then commit with lazyWrite.\n+                txn.commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4NDQ0Mw=="}, "originalCommit": {"oid": "41c8da911d4823374ed171deba9bab7d6ee3a926"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODEzNDExOnYy", "diffSide": "LEFT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozMjoyNVrOG2SduQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NjowNlrOG2VdNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODgwOQ==", "bodyText": "Remove this please", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459578809", "createdAt": "2020-07-23T16:32:25Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -274,10 +274,7 @@ void endToEndProcess(boolean verifySegmentContent, boolean useChunkStorage) thro\n \n                 checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n-                //}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODg2NQ==", "bodyText": "and below", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459578865", "createdAt": "2020-07-23T16:32:33Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -274,10 +274,7 @@ void endToEndProcess(boolean verifySegmentContent, boolean useChunkStorage) thro\n \n                 checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n-                //}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODgwOQ=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzgyOQ==", "bodyText": "this is already removed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459627829", "createdAt": "2020-07-23T17:56:06Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -274,10 +274,7 @@ void endToEndProcess(boolean verifySegmentContent, boolean useChunkStorage) thro\n \n                 checkStorage(segmentContents, segmentStore);\n                 log.info(\"Finished Storage check.\");\n-                //}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODgwOQ=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODEzNDkyOnYy", "diffSide": "LEFT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozMjo0MVrOG2SeRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NTo1NFrOG2Vctw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODk1MA==", "bodyText": "Remove this", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459578950", "createdAt": "2020-07-23T16:32:41Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -338,24 +332,23 @@ public void testEndToEndWithFencing() throws Exception {\n      * @throws Exception If an exception occurred.\n      */\n     @Test\n-    //@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzcwMw==", "bodyText": "this is already removed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459627703", "createdAt": "2020-07-23T17:55:54Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -338,24 +332,23 @@ public void testEndToEndWithFencing() throws Exception {\n      * @throws Exception If an exception occurred.\n      */\n     @Test\n-    //@Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODk1MA=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODEzNTc4OnYy", "diffSide": "LEFT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozMjo1MlrOG2SexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NTo0OFrOG2VcgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3OTA3Nw==", "bodyText": "and this", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459579077", "createdAt": "2020-07-23T16:32:52Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -908,18 +901,6 @@ private void checkAppendLeaks(ArrayList<ByteBuf> buffers) {\n         return retValue;\n     }\n \n-    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzY0OA==", "bodyText": "this is already removed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459627648", "createdAt": "2020-07-23T17:55:48Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -908,18 +901,6 @@ private void checkAppendLeaks(ArrayList<ByteBuf> buffers) {\n         return retValue;\n     }\n \n-    /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3OTA3Nw=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE2NjE2OnYy", "diffSide": "RIGHT", "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0MTowMVrOG2Sx0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNTo1MVrOG3sp9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4Mzk1NA==", "bodyText": "Why did we add all these extra lines?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459583954", "createdAt": "2020-07-23T16:41:01Z", "author": {"login": "andreipaduroiu"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -88,6 +86,7 @@\n     private int segmentStoreCount;\n     private int[] segmentStorePorts;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjUwMw==", "bodyText": "Fixed. Reverted change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461056503", "createdAt": "2020-07-27T17:35:51Z", "author": {"login": "sachin-j-joshi"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -88,6 +86,7 @@\n     private int segmentStoreCount;\n     private int[] segmentStorePorts;\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4Mzk1NA=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE2NjkyOnYy", "diffSide": "RIGHT", "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0MToxNFrOG2SyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNTo0MFrOG3sphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDA3Nw==", "bodyText": "Extra space.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459584077", "createdAt": "2020-07-23T16:41:14Z", "author": {"login": "andreipaduroiu"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -161,7 +161,7 @@ public InProcPravegaCluster build() {\n \n     @Synchronized\n     public void setControllerPorts(int[] controllerPorts) {\n-        this.controllerPorts = Arrays.copyOf(controllerPorts, controllerPorts.length);\n+        this.controllerPorts = Arrays.copyOf( controllerPorts, controllerPorts.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjM5MQ==", "bodyText": "Fixed. Reverted change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461056391", "createdAt": "2020-07-27T17:35:40Z", "author": {"login": "sachin-j-joshi"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -161,7 +161,7 @@ public InProcPravegaCluster build() {\n \n     @Synchronized\n     public void setControllerPorts(int[] controllerPorts) {\n-        this.controllerPorts = Arrays.copyOf(controllerPorts, controllerPorts.length);\n+        this.controllerPorts = Arrays.copyOf( controllerPorts, controllerPorts.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDA3Nw=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE2NzgwOnYy", "diffSide": "RIGHT", "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0MToyOFrOG2Sy2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNToyOVrOG3spGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDIxOA==", "bodyText": "space", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459584218", "createdAt": "2020-07-23T16:41:28Z", "author": {"login": "andreipaduroiu"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -228,7 +228,7 @@ private void cleanUpZK() {\n         @Cleanup\n         CuratorFramework zclient = builder.build();\n         zclient.start();\n-        for (String path : pathsTobeCleaned) {\n+        for ( String path : pathsTobeCleaned ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjI4Mw==", "bodyText": "Fixed. Reverted change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461056283", "createdAt": "2020-07-27T17:35:29Z", "author": {"login": "sachin-j-joshi"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -228,7 +228,7 @@ private void cleanUpZK() {\n         @Cleanup\n         CuratorFramework zclient = builder.build();\n         zclient.start();\n-        for (String path : pathsTobeCleaned) {\n+        for ( String path : pathsTobeCleaned ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDIxOA=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE2ODE3OnYy", "diffSide": "RIGHT", "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0MTozNlrOG2SzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNToyMVrOG3so5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDI3Nw==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459584277", "createdAt": "2020-07-23T16:41:36Z", "author": {"login": "andreipaduroiu"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -425,12 +425,12 @@ public String getZkUrl() {\n     @Synchronized\n     public void close() throws Exception {\n         if (isInProcSegmentStore) {\n-            for (ServiceStarter starter : this.nodeServiceStarter) {\n+            for ( ServiceStarter starter : this.nodeServiceStarter ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjIyOQ==", "bodyText": "Fixed. Reverted change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461056229", "createdAt": "2020-07-27T17:35:21Z", "author": {"login": "sachin-j-joshi"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -425,12 +425,12 @@ public String getZkUrl() {\n     @Synchronized\n     public void close() throws Exception {\n         if (isInProcSegmentStore) {\n-            for (ServiceStarter starter : this.nodeServiceStarter) {\n+            for ( ServiceStarter starter : this.nodeServiceStarter ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDI3Nw=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODE2ODUyOnYy", "diffSide": "RIGHT", "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0MTo0MVrOG2SzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMDoyNlrOG2V84w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDM0NA==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459584344", "createdAt": "2020-07-23T16:41:41Z", "author": {"login": "andreipaduroiu"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -425,12 +425,12 @@ public String getZkUrl() {\n     @Synchronized\n     public void close() throws Exception {\n         if (isInProcSegmentStore) {\n-            for (ServiceStarter starter : this.nodeServiceStarter) {\n+            for ( ServiceStarter starter : this.nodeServiceStarter ) {\n                 starter.shutdown();\n             }\n         }\n         if (isInProcController) {\n-            for (ControllerServiceMain controller : this.controllerServers) {\n+            for ( ControllerServiceMain controller : this.controllerServers ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTkzOQ==", "bodyText": "fixed b939678", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r459635939", "createdAt": "2020-07-23T18:10:26Z", "author": {"login": "sachin-j-joshi"}, "path": "standalone/src/main/java/io/pravega/local/InProcPravegaCluster.java", "diffHunk": "@@ -425,12 +425,12 @@ public String getZkUrl() {\n     @Synchronized\n     public void close() throws Exception {\n         if (isInProcSegmentStore) {\n-            for (ServiceStarter starter : this.nodeServiceStarter) {\n+            for ( ServiceStarter starter : this.nodeServiceStarter ) {\n                 starter.shutdown();\n             }\n         }\n         if (isInProcController) {\n-            for (ControllerServiceMain controller : this.controllerServers) {\n+            for ( ControllerServiceMain controller : this.controllerServers ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NDM0NA=="}, "originalCommit": {"oid": "5c0d20dc7d564d13604bc69e454841f05dafc9bf"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTU5ODA3OnYy", "diffSide": "RIGHT", "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorageFactoryCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTowMDo1MlrOG2yyng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo0ODowNFrOG20ilg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwODQ0Ng==", "bodyText": "This piece of code seems the same as ExtendedS3StorageFactoryCreator and perhaps other places. Wondering if we can do this in a common method, and then pass the specific instance on each implementation instead of repeating the same logic everywhere.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460108446", "createdAt": "2020-07-24T15:00:52Z", "author": {"login": "RaulGracia"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorageFactoryCreator.java", "diffHunk": "@@ -9,20 +9,44 @@\n  */\n package io.pravega.storage.filesystem;\n \n+import com.google.common.base.Preconditions;\n import io.pravega.segmentstore.storage.ConfigSetup;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.storage.StorageFactoryCreator;\n+import io.pravega.segmentstore.storage.StorageFactoryInfo;\n+import io.pravega.segmentstore.storage.StorageMetadataFormat;\n+import io.pravega.segmentstore.storage.StorageLayoutType;\n+\n import java.util.concurrent.ScheduledExecutorService;\n \n public class FileSystemStorageFactoryCreator implements StorageFactoryCreator {\n \n     @Override\n-    public String getName() {\n-        return \"FILESYSTEM\";\n+    public StorageFactoryInfo[] getStorageFactories() {\n+        return new StorageFactoryInfo[]{\n+                StorageFactoryInfo.builder()\n+                        .name(\"FILESYSTEM\")\n+                        .storageMetadataFormat(StorageMetadataFormat.TABLE_BASED)\n+                        .storageLayoutType(StorageLayoutType.CHUNKED_STORAGE)\n+                        .build(),\n+                StorageFactoryInfo.builder()\n+                        .name(\"FILESYSTEM\")\n+                        .storageMetadataFormat(StorageMetadataFormat.HEADER_BASED)\n+                        .storageLayoutType(StorageLayoutType.ROLLING_STORAGE)\n+                        .build()\n+        };\n     }\n \n     @Override\n-    public StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor) {\n-        return new FileSystemStorageFactory(setup.getConfig(FileSystemStorageConfig::builder), executor);\n+    public StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzNzExMA==", "bodyText": "I think it would be ugly looking method which takes two Supplier lambdas that possibly take other lambdas etc .\nThis is unnecessarily complex. I already dislike the round about way things get initialized.\nI think the medicine is more harmful than illness itself in this case :)\npublic StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {\n      return commonFunction(()-> new ExtendedS3SimpleStorageFactory(setup.getConfig(ChunkedSegmentStorageConfig::builder),\n                    setup.getConfig(ExtendedS3StorageConfig::builder),\n                    executor),\n                         ()-> return new ExtendedS3StorageFactory(setup.getConfig(ExtendedS3StorageConfig::builder), executor);\n)", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460137110", "createdAt": "2020-07-24T15:48:04Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorageFactoryCreator.java", "diffHunk": "@@ -9,20 +9,44 @@\n  */\n package io.pravega.storage.filesystem;\n \n+import com.google.common.base.Preconditions;\n import io.pravega.segmentstore.storage.ConfigSetup;\n import io.pravega.segmentstore.storage.StorageFactory;\n import io.pravega.segmentstore.storage.StorageFactoryCreator;\n+import io.pravega.segmentstore.storage.StorageFactoryInfo;\n+import io.pravega.segmentstore.storage.StorageMetadataFormat;\n+import io.pravega.segmentstore.storage.StorageLayoutType;\n+\n import java.util.concurrent.ScheduledExecutorService;\n \n public class FileSystemStorageFactoryCreator implements StorageFactoryCreator {\n \n     @Override\n-    public String getName() {\n-        return \"FILESYSTEM\";\n+    public StorageFactoryInfo[] getStorageFactories() {\n+        return new StorageFactoryInfo[]{\n+                StorageFactoryInfo.builder()\n+                        .name(\"FILESYSTEM\")\n+                        .storageMetadataFormat(StorageMetadataFormat.TABLE_BASED)\n+                        .storageLayoutType(StorageLayoutType.CHUNKED_STORAGE)\n+                        .build(),\n+                StorageFactoryInfo.builder()\n+                        .name(\"FILESYSTEM\")\n+                        .storageMetadataFormat(StorageMetadataFormat.HEADER_BASED)\n+                        .storageLayoutType(StorageLayoutType.ROLLING_STORAGE)\n+                        .build()\n+        };\n     }\n \n     @Override\n-    public StorageFactory createFactory(ConfigSetup setup, ScheduledExecutorService executor) {\n-        return new FileSystemStorageFactory(setup.getConfig(FileSystemStorageConfig::builder), executor);\n+    public StorageFactory createFactory(StorageFactoryInfo storageFactoryInfo, ConfigSetup setup, ScheduledExecutorService executor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwODQ0Ng=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTYwMzE2OnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTowMjowN1rOG2y12g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1NjoyN1rOG2210A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwOTI3NA==", "bodyText": "Is this change necessary? The previous indentation seemed ok.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460109274", "createdAt": "2020-07-24T15:02:07Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -76,21 +91,21 @@ private StreamSegmentInformation(String name, long startOffset, long length, boo\n      */\n     public static StreamSegmentInformationBuilder from(SegmentProperties base) {\n         return StreamSegmentInformation.builder()\n-                                       .name(base.getName())\n-                                       .startOffset(base.getStartOffset())\n-                                       .length(base.getLength())\n-                                       .sealed(base.isSealed())\n-                                       .deleted(base.isDeleted())\n-                                       .lastModified(base.getLastModified())\n-                                       .attributes(base.getAttributes());\n+                .name(base.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzNzg0OA==", "bodyText": "this change is harmless too.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460137848", "createdAt": "2020-07-24T15:49:18Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -76,21 +91,21 @@ private StreamSegmentInformation(String name, long startOffset, long length, boo\n      */\n     public static StreamSegmentInformationBuilder from(SegmentProperties base) {\n         return StreamSegmentInformation.builder()\n-                                       .name(base.getName())\n-                                       .startOffset(base.getStartOffset())\n-                                       .length(base.getLength())\n-                                       .sealed(base.isSealed())\n-                                       .deleted(base.isDeleted())\n-                                       .lastModified(base.getLastModified())\n-                                       .attributes(base.getAttributes());\n+                .name(base.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwOTI3NA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDgwMA==", "bodyText": "reverted white space change.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460174800", "createdAt": "2020-07-24T16:56:27Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -76,21 +91,21 @@ private StreamSegmentInformation(String name, long startOffset, long length, boo\n      */\n     public static StreamSegmentInformationBuilder from(SegmentProperties base) {\n         return StreamSegmentInformation.builder()\n-                                       .name(base.getName())\n-                                       .startOffset(base.getStartOffset())\n-                                       .length(base.getLength())\n-                                       .sealed(base.isSealed())\n-                                       .deleted(base.isDeleted())\n-                                       .lastModified(base.getLastModified())\n-                                       .attributes(base.getAttributes());\n+                .name(base.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEwOTI3NA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTYyNzc0OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTowODoxMVrOG2zE6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo1NjowMFrOG2209A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExMzEzMA==", "bodyText": "Isn't this equivalent to what it was before? A boolean set to true and then if (checkClosed).", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460113130", "createdAt": "2020-07-24T15:08:11Z", "author": {"login": "RaulGracia"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -671,19 +686,25 @@ private void checkReads(HashMap<String, ByteArrayOutputStream> segmentContents,\n             // This is gracefully handled by retries in AppendProcessor and/or Client, but in this case, we simply have to\n             // do the retries ourselves, hoping that the callback eventually executes.\n             Retry.withExpBackoff(100, 2, 10, TIMEOUT.toMillis() / 5)\n-                 .retryWhen(ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException)\n-                 .run(() -> {\n-                     checkSegmentReads(segmentName, expectedCurrentOffset, segmentLength, store, expectedData);\n-                     return null;\n-                 });\n+                    .retryWhen(ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException || info.get().getLength() != info.get().getStorageLength())\n+                    .run(() -> {\n+                        val latestInfo =  (StreamSegmentInformation) store.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+                        try {\n+                            checkSegmentReads(segmentName, expectedCurrentOffset, info.get().getLength(), store, expectedData);\n+                        } catch (Exception ex2) {\n+                            log.debug(\"Exception during checkReads\", ex2);\n+                        }\n+                        info.set(latestInfo);\n+                        return null;\n+                    });\n         }\n     }\n \n     private void checkSegmentReads(String segmentName, AtomicLong expectedCurrentOffset, long segmentLength, StreamSegmentStore store, byte[] expectedData) throws Exception {\n         @Cleanup\n         ReadResult readResult = store.read(segmentName, expectedCurrentOffset.get(), (int) (segmentLength - expectedCurrentOffset.get()), TIMEOUT).join();\n         Assert.assertTrue(\"Empty read result for segment \" + segmentName, readResult.hasNext());\n-\n+        boolean checkClosed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0Mjg1NA==", "bodyText": "I thought I had removed it.\nLooks I lost that change during merge.\nFixing it.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460142854", "createdAt": "2020-07-24T15:57:41Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -671,19 +686,25 @@ private void checkReads(HashMap<String, ByteArrayOutputStream> segmentContents,\n             // This is gracefully handled by retries in AppendProcessor and/or Client, but in this case, we simply have to\n             // do the retries ourselves, hoping that the callback eventually executes.\n             Retry.withExpBackoff(100, 2, 10, TIMEOUT.toMillis() / 5)\n-                 .retryWhen(ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException)\n-                 .run(() -> {\n-                     checkSegmentReads(segmentName, expectedCurrentOffset, segmentLength, store, expectedData);\n-                     return null;\n-                 });\n+                    .retryWhen(ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException || info.get().getLength() != info.get().getStorageLength())\n+                    .run(() -> {\n+                        val latestInfo =  (StreamSegmentInformation) store.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+                        try {\n+                            checkSegmentReads(segmentName, expectedCurrentOffset, info.get().getLength(), store, expectedData);\n+                        } catch (Exception ex2) {\n+                            log.debug(\"Exception during checkReads\", ex2);\n+                        }\n+                        info.set(latestInfo);\n+                        return null;\n+                    });\n         }\n     }\n \n     private void checkSegmentReads(String segmentName, AtomicLong expectedCurrentOffset, long segmentLength, StreamSegmentStore store, byte[] expectedData) throws Exception {\n         @Cleanup\n         ReadResult readResult = store.read(segmentName, expectedCurrentOffset.get(), (int) (segmentLength - expectedCurrentOffset.get()), TIMEOUT).join();\n         Assert.assertTrue(\"Empty read result for segment \" + segmentName, readResult.hasNext());\n-\n+        boolean checkClosed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExMzEzMA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NDU4MA==", "bodyText": "Fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460174580", "createdAt": "2020-07-24T16:56:00Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentStoreTestBase.java", "diffHunk": "@@ -671,19 +686,25 @@ private void checkReads(HashMap<String, ByteArrayOutputStream> segmentContents,\n             // This is gracefully handled by retries in AppendProcessor and/or Client, but in this case, we simply have to\n             // do the retries ourselves, hoping that the callback eventually executes.\n             Retry.withExpBackoff(100, 2, 10, TIMEOUT.toMillis() / 5)\n-                 .retryWhen(ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException)\n-                 .run(() -> {\n-                     checkSegmentReads(segmentName, expectedCurrentOffset, segmentLength, store, expectedData);\n-                     return null;\n-                 });\n+                    .retryWhen(ex -> Exceptions.unwrap(ex) instanceof StreamSegmentNotExistsException || info.get().getLength() != info.get().getStorageLength())\n+                    .run(() -> {\n+                        val latestInfo =  (StreamSegmentInformation) store.getStreamSegmentInfo(segmentName, TIMEOUT).join();\n+                        try {\n+                            checkSegmentReads(segmentName, expectedCurrentOffset, info.get().getLength(), store, expectedData);\n+                        } catch (Exception ex2) {\n+                            log.debug(\"Exception during checkReads\", ex2);\n+                        }\n+                        info.set(latestInfo);\n+                        return null;\n+                    });\n         }\n     }\n \n     private void checkSegmentReads(String segmentName, AtomicLong expectedCurrentOffset, long segmentLength, StreamSegmentStore store, byte[] expectedData) throws Exception {\n         @Cleanup\n         ReadResult readResult = store.read(segmentName, expectedCurrentOffset.get(), (int) (segmentLength - expectedCurrentOffset.get()), TIMEOUT).join();\n         Assert.assertTrue(\"Empty read result for segment \" + segmentName, readResult.hasNext());\n-\n+        boolean checkClosed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDExMzEzMA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTc1Nzk4OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo0MjoyMVrOG20Vfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOToxNjoyNFrOG4a2aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA==", "bodyText": "we are not dealing with InterruptedException here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460133758", "createdAt": "2020-07-24T15:42:21Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTE0OA==", "bodyText": "The caller handles it.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460145148", "createdAt": "2020-07-24T16:01:38Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTI3MQ==", "bodyText": "You are returning a CompletableFuture so the result won't be handled in this thread.\nAs usual we should call Theead.currentThread().interrupt()\notherwise we are going to mask that flag", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460149271", "createdAt": "2020-07-24T16:08:47Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NjU4MQ==", "bodyText": "Not sure why we need to do this.\nThis task was executed on this thread and received thread interrupted exception - which we are returning as failed future.\nThis thread is now supposed to pickup some other work and complete it. What happens if we don't call Thread.currentThread().interrupt() ?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460986581", "createdAt": "2020-07-27T15:44:21Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5NzMyMw==", "bodyText": "you can't know who the caller is, because we can refactor this code in the future\nand as when you catch an InterruptedException you reset the 'interrupted' flag on the Java thread,\nif you do not set again that flag the caller won't be notified about this InterruptedException\neven if I am not a fan of InterruptedException and how it works IMHO we should handle it consistently (using Exceptions#handleInterrupted)", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460997323", "createdAt": "2020-07-27T16:00:09Z", "author": {"login": "eolivelli"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2NzgzMA==", "bodyText": "We do not do this anywhere else in the code. If this must be changed, then we should do it throughout the codebase, not just here.\n@sachin-j-joshi I would suggest to clean this up and add a follow-up issue that will add a helper in Futures to do this.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461667830", "createdAt": "2020-07-28T15:22:13Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgxMzM1Mw==", "bodyText": "Created a tracking issue #4986", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461813353", "createdAt": "2020-07-28T19:16:24Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/containers/StreamSegmentContainer.java", "diffHunk": "@@ -253,7 +278,11 @@ protected void doStart() {\n     }\n \n     private CompletableFuture<Void> initializeSecondaryServices() {\n-        this.storage.initialize(this.metadata.getContainerEpoch());\n+        try {\n+            initializeStorage();\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMzc1OA=="}, "originalCommit": {"oid": "b93967814181a08081b8c3025588ecba5c6331e9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc3OTYyOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NDo0OVrOG3oZ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNDo0OFrOG3snew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4Njg2NQ==", "bodyText": "Why is this ignored?", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460986865", "createdAt": "2020-07-27T15:44:49Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -69,7 +70,14 @@ protected ServiceBuilder createBuilder(ServiceBuilderConfig.Builder builderConfi\n     @Override\n     @Test\n     public void testEndToEnd() throws Exception {\n-        endToEndProcess(false);\n+        endToEndProcess(false, false);\n+    }\n+\n+    @Override\n+    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5edcd82ff198b871e342562c43769b919b340f0e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTg2Nw==", "bodyText": "NoOpStorage does not support ChunkedSegmentStorage yet.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461055867", "createdAt": "2020-07-27T17:34:48Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -69,7 +70,14 @@ protected ServiceBuilder createBuilder(ServiceBuilderConfig.Builder builderConfi\n     @Override\n     @Test\n     public void testEndToEnd() throws Exception {\n-        endToEndProcess(false);\n+        endToEndProcess(false, false);\n+    }\n+\n+    @Override\n+    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4Njg2NQ=="}, "originalCommit": {"oid": "5edcd82ff198b871e342562c43769b919b340f0e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc4MDMzOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NDo1NlrOG3oaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNDo0NFrOG3snTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4Njk2NA==", "bodyText": "And here", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r460986964", "createdAt": "2020-07-27T15:44:56Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -79,6 +87,13 @@ public void testEndToEnd() throws Exception {\n     @Override\n     @Test\n     public void testEndToEndWithFencing() throws Exception {\n-        endToEndProcessWithFencing(false);\n+        endToEndProcessWithFencing(false, false);\n+    }\n+\n+    @Override\n+    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5edcd82ff198b871e342562c43769b919b340f0e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTgyMw==", "bodyText": "NoOpStorage does not support ChunkedSegmentStorage yet.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461055823", "createdAt": "2020-07-27T17:34:44Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/store/StreamSegmentServiceNoOpWriteOnlyTests.java", "diffHunk": "@@ -79,6 +87,13 @@ public void testEndToEnd() throws Exception {\n     @Override\n     @Test\n     public void testEndToEndWithFencing() throws Exception {\n-        endToEndProcessWithFencing(false);\n+        endToEndProcessWithFencing(false, false);\n+    }\n+\n+    @Override\n+    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4Njk2NA=="}, "originalCommit": {"oid": "5edcd82ff198b871e342562c43769b919b340f0e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjE0NzM1OnYy", "diffSide": "RIGHT", "path": "config/config.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxNjo1MlrOG4Ru3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOToxMTozM1rOG4aqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2Mzk2Ng==", "bodyText": "Clearly indicate this is EXPERIMENTAL and not to be used in production.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461663966", "createdAt": "2020-07-28T15:16:52Z", "author": {"login": "andreipaduroiu"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,14 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgxMDM3OA==", "bodyText": "fixed.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461810378", "createdAt": "2020-07-28T19:11:33Z", "author": {"login": "sachin-j-joshi"}, "path": "config/config.properties", "diffHunk": "@@ -97,6 +97,14 @@ pravegaservice.dataLog.impl.name=BOOKKEEPER\n # Default value: HDFS\n # pravegaservice.storage.impl.name=HDFS\n \n+\n+# Storage layout for Tier 2 storage.\n+# Valid values:\n+#   CHUNKED_STORAGE - Using ChunkedSegmentStorage.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2Mzk2Ng=="}, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjE1MzA4OnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxODoxNFrOG4RyiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMjoxMFrOG4aXFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2NDkwNQ==", "bodyText": "Since you've added this, I want to add a precondition check to validate that 0<=storageLength<=length (see above how we do it for startOffset.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461664905", "createdAt": "2020-07-28T15:18:14Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -46,24 +53,30 @@\n     /**\n      * Creates a new instance of the StreamSegmentInformation class.\n      *\n-     * @param name         The name of the StreamSegment.\n-     * @param startOffset  The first available offset in this StreamSegment.\n-     * @param length       The length of the StreamSegment.\n-     * @param sealed       Whether the StreamSegment is sealed (for modifications).\n-     * @param deleted      Whether the StreamSegment is deleted (does not exist).\n-     * @param attributes   The attributes of this StreamSegment.\n-     * @param lastModified The last time the StreamSegment was modified.\n+     * @param name             The name of the StreamSegment.\n+     * @param startOffset      The first available offset in this StreamSegment.\n+     * @param length           The length of the StreamSegment.\n+     * @param sealed           Whether the StreamSegment is sealed (for modifications).\n+     * @param deleted          Whether the StreamSegment is deleted (does not exist).\n+     * @param storageLength    Storage length.\n+     * @param sealedInStorage  Whether the StreamSegment is sealed (for modifications) in storage.\n+     * @param deletedInStorage Whether the StreamSegment is deleted (does not exist) in storage.\n+     * @param attributes       The attributes of this StreamSegment.\n+     * @param lastModified     The last time the StreamSegment was modified.\n      */\n     @Builder\n-    private StreamSegmentInformation(String name, long startOffset, long length, boolean sealed, boolean deleted,\n-                                    Map<UUID, Long> attributes, ImmutableDate lastModified) {\n+    private StreamSegmentInformation(String name, long startOffset, long length, long storageLength, boolean sealed, boolean deleted,\n+                                     boolean sealedInStorage, boolean deletedInStorage, Map<UUID, Long> attributes, ImmutableDate lastModified) {\n         Preconditions.checkArgument(startOffset >= 0, \"startOffset must be a non-negative number.\");\n         Preconditions.checkArgument(length >= startOffset, \"length must be a non-negative number and greater than startOffset.\");\n         this.name = Exceptions.checkNotNullOrEmpty(name, \"name\");\n         this.startOffset = startOffset;\n         this.length = length;\n+        this.storageLength = storageLength;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNTMzMg==", "bodyText": "StreamSegmentMetadata constructor sets the storageLength to -1.  So not testing 0<=storageLength .", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461805332", "createdAt": "2020-07-28T19:02:10Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -46,24 +53,30 @@\n     /**\n      * Creates a new instance of the StreamSegmentInformation class.\n      *\n-     * @param name         The name of the StreamSegment.\n-     * @param startOffset  The first available offset in this StreamSegment.\n-     * @param length       The length of the StreamSegment.\n-     * @param sealed       Whether the StreamSegment is sealed (for modifications).\n-     * @param deleted      Whether the StreamSegment is deleted (does not exist).\n-     * @param attributes   The attributes of this StreamSegment.\n-     * @param lastModified The last time the StreamSegment was modified.\n+     * @param name             The name of the StreamSegment.\n+     * @param startOffset      The first available offset in this StreamSegment.\n+     * @param length           The length of the StreamSegment.\n+     * @param sealed           Whether the StreamSegment is sealed (for modifications).\n+     * @param deleted          Whether the StreamSegment is deleted (does not exist).\n+     * @param storageLength    Storage length.\n+     * @param sealedInStorage  Whether the StreamSegment is sealed (for modifications) in storage.\n+     * @param deletedInStorage Whether the StreamSegment is deleted (does not exist) in storage.\n+     * @param attributes       The attributes of this StreamSegment.\n+     * @param lastModified     The last time the StreamSegment was modified.\n      */\n     @Builder\n-    private StreamSegmentInformation(String name, long startOffset, long length, boolean sealed, boolean deleted,\n-                                    Map<UUID, Long> attributes, ImmutableDate lastModified) {\n+    private StreamSegmentInformation(String name, long startOffset, long length, long storageLength, boolean sealed, boolean deleted,\n+                                     boolean sealedInStorage, boolean deletedInStorage, Map<UUID, Long> attributes, ImmutableDate lastModified) {\n         Preconditions.checkArgument(startOffset >= 0, \"startOffset must be a non-negative number.\");\n         Preconditions.checkArgument(length >= startOffset, \"length must be a non-negative number and greater than startOffset.\");\n         this.name = Exceptions.checkNotNullOrEmpty(name, \"name\");\n         this.startOffset = startOffset;\n         this.length = length;\n+        this.storageLength = storageLength;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2NDkwNQ=="}, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjE1NTYzOnYy", "diffSide": "RIGHT", "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToxODo0OFrOG4R0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODo1MzowM1rOG4aCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2NTMxNQ==", "bodyText": "Precondition check. If deletedInStorage == true, then deleted must be true as well.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461665315", "createdAt": "2020-07-28T15:18:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -46,24 +53,30 @@\n     /**\n      * Creates a new instance of the StreamSegmentInformation class.\n      *\n-     * @param name         The name of the StreamSegment.\n-     * @param startOffset  The first available offset in this StreamSegment.\n-     * @param length       The length of the StreamSegment.\n-     * @param sealed       Whether the StreamSegment is sealed (for modifications).\n-     * @param deleted      Whether the StreamSegment is deleted (does not exist).\n-     * @param attributes   The attributes of this StreamSegment.\n-     * @param lastModified The last time the StreamSegment was modified.\n+     * @param name             The name of the StreamSegment.\n+     * @param startOffset      The first available offset in this StreamSegment.\n+     * @param length           The length of the StreamSegment.\n+     * @param sealed           Whether the StreamSegment is sealed (for modifications).\n+     * @param deleted          Whether the StreamSegment is deleted (does not exist).\n+     * @param storageLength    Storage length.\n+     * @param sealedInStorage  Whether the StreamSegment is sealed (for modifications) in storage.\n+     * @param deletedInStorage Whether the StreamSegment is deleted (does not exist) in storage.\n+     * @param attributes       The attributes of this StreamSegment.\n+     * @param lastModified     The last time the StreamSegment was modified.\n      */\n     @Builder\n-    private StreamSegmentInformation(String name, long startOffset, long length, boolean sealed, boolean deleted,\n-                                    Map<UUID, Long> attributes, ImmutableDate lastModified) {\n+    private StreamSegmentInformation(String name, long startOffset, long length, long storageLength, boolean sealed, boolean deleted,\n+                                     boolean sealedInStorage, boolean deletedInStorage, Map<UUID, Long> attributes, ImmutableDate lastModified) {\n         Preconditions.checkArgument(startOffset >= 0, \"startOffset must be a non-negative number.\");\n         Preconditions.checkArgument(length >= startOffset, \"length must be a non-negative number and greater than startOffset.\");\n         this.name = Exceptions.checkNotNullOrEmpty(name, \"name\");\n         this.startOffset = startOffset;\n         this.length = length;\n+        this.storageLength = storageLength;\n         this.sealed = sealed;\n+        this.sealedInStorage = sealedInStorage;\n         this.deleted = deleted;\n+        this.deletedInStorage = deletedInStorage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMDA0Mw==", "bodyText": "Updated", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461800043", "createdAt": "2020-07-28T18:53:03Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/contracts/src/main/java/io/pravega/segmentstore/contracts/StreamSegmentInformation.java", "diffHunk": "@@ -46,24 +53,30 @@\n     /**\n      * Creates a new instance of the StreamSegmentInformation class.\n      *\n-     * @param name         The name of the StreamSegment.\n-     * @param startOffset  The first available offset in this StreamSegment.\n-     * @param length       The length of the StreamSegment.\n-     * @param sealed       Whether the StreamSegment is sealed (for modifications).\n-     * @param deleted      Whether the StreamSegment is deleted (does not exist).\n-     * @param attributes   The attributes of this StreamSegment.\n-     * @param lastModified The last time the StreamSegment was modified.\n+     * @param name             The name of the StreamSegment.\n+     * @param startOffset      The first available offset in this StreamSegment.\n+     * @param length           The length of the StreamSegment.\n+     * @param sealed           Whether the StreamSegment is sealed (for modifications).\n+     * @param deleted          Whether the StreamSegment is deleted (does not exist).\n+     * @param storageLength    Storage length.\n+     * @param sealedInStorage  Whether the StreamSegment is sealed (for modifications) in storage.\n+     * @param deletedInStorage Whether the StreamSegment is deleted (does not exist) in storage.\n+     * @param attributes       The attributes of this StreamSegment.\n+     * @param lastModified     The last time the StreamSegment was modified.\n      */\n     @Builder\n-    private StreamSegmentInformation(String name, long startOffset, long length, boolean sealed, boolean deleted,\n-                                    Map<UUID, Long> attributes, ImmutableDate lastModified) {\n+    private StreamSegmentInformation(String name, long startOffset, long length, long storageLength, boolean sealed, boolean deleted,\n+                                     boolean sealedInStorage, boolean deletedInStorage, Map<UUID, Long> attributes, ImmutableDate lastModified) {\n         Preconditions.checkArgument(startOffset >= 0, \"startOffset must be a non-negative number.\");\n         Preconditions.checkArgument(length >= startOffset, \"length must be a non-negative number and greater than startOffset.\");\n         this.name = Exceptions.checkNotNullOrEmpty(name, \"name\");\n         this.startOffset = startOffset;\n         this.length = length;\n+        this.storageLength = storageLength;\n         this.sealed = sealed;\n+        this.sealedInStorage = sealedInStorage;\n         this.deleted = deleted;\n+        this.deletedInStorage = deletedInStorage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY2NTMxNQ=="}, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjE4NTUyOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNToyNTozNFrOG4SHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOToxMToyMVrOG4aqOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MDI5OA==", "bodyText": "Can you make 42 and 10 class-level constants? They are used everywhere in these tests.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461670298", "createdAt": "2020-07-28T15:25:34Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "diffHunk": "@@ -1505,6 +1502,191 @@ private void testTruncate(long maxChunkLength, long truncateAt, int chunksCountB\n         TestUtils.checkChunksExistInStorage(testContext.storageProvider, testContext.metadataStore, testSegmentName);\n     }\n \n+    /**\n+     * Test read and write with multiple failovers.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testReadWriteWithMultipleFailovers() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();\n+\n+        // Create\n+        testContext.storageManager.create(testSegmentName, null).get();\n+\n+        // Write some data.\n+        long writeAt = 0;\n+        long epoch = 42;\n+        ArrayList<Long> lengths = new ArrayList<>();\n+        for (int i = 1; i < 5; i++) {\n+            // Create a new test context and initialize with new epoch.\n+            val hWrite =  testContext.storageManager.openWrite(testSegmentName).get();\n+            testContext.storageManager.write(hWrite, writeAt, new ByteArrayInputStream(new byte[i]), i, null).join();\n+            writeAt += i;\n+            lengths.add((long) i);\n+\n+            // Read in same epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Fork the context.\n+            val oldTestCotext = testContext;\n+            testContext = oldTestCotext.fork(epoch++);\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Fence out old store.\n+            oldTestCotext.metadataStore.markFenced();\n+\n+            // Read in new epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+        }\n+\n+        int total = 10;\n+\n+        // Create a new test context and initialize with new epoch.\n+        testContext = testContext.fork(epoch++);\n+\n+        checkDataRead(testSegmentName, testContext, 0, total);\n+    }\n+\n+    /**\n+     * Test read and write with multiple failovers.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testReadWriteWithMultipleFailoversWithGarbage() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();\n+\n+        // Create\n+        testContext.storageManager.create(testSegmentName, null).get();\n+\n+        // Write some data.\n+        long writeAt = 0;\n+        long epoch = 42;\n+        SegmentHandle hWrite =  testContext.storageManager.openWrite(testSegmentName).get();\n+        ArrayList<Long> lengths = new ArrayList<>();\n+        for (int i = 1; i < 5; i++) {\n+            // Create a new test context and initialize with new epoch.\n+            testContext.storageManager.write(hWrite, writeAt, new ByteArrayInputStream(new byte[i]), i, null).join();\n+            writeAt += i;\n+            lengths.add((long) i);\n+\n+            // Read in same epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Fork the context.\n+            val oldTestCotext = testContext;\n+            testContext = oldTestCotext.fork(epoch++);\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Make sure to open segment with new instance before writing garbage to old instance.\n+            hWrite =  testContext.storageManager.openWrite(testSegmentName).get();\n+\n+            // Write some garbage\n+            oldTestCotext.storageManager.write(hWrite, writeAt, new ByteArrayInputStream(new byte[10]), 10, null).join();\n+\n+            // Fence out old store.\n+            boolean exceptionThrown = false;\n+            oldTestCotext.metadataStore.markFenced();\n+\n+            AssertExtensions.assertFutureThrows(\"conact() allowed for invalid parameters\",\n+                    oldTestCotext.storageManager.write(hWrite, writeAt + 10, new ByteArrayInputStream(new byte[10]), 10, null),\n+                    ex -> ex instanceof StorageNotPrimaryException);\n+            // Read in new epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+        }\n+\n+        int total = 10;\n+\n+        // Create a new test context and initialize with new epoch.\n+        testContext = testContext.fork(epoch++);\n+\n+        checkDataRead(testSegmentName, testContext, 0, total);\n+    }\n+\n+    /**\n+     * Test truncate, read and write with multiple failovers.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testTruncateWithMultipleFailoversWithGarbage() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();\n+\n+        // Create\n+        testContext.storageManager.create(testSegmentName, null).get();\n+\n+        // Write some data.\n+        long writeAt = 0;\n+        long truncateAt = 0;\n+        long epoch = 42;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgxMDIzMg==", "bodyText": "Fixed for 42.\nNumber 10 is used in each test with different meaning in different tests. So using common test wide contsnat isn't much useful. so living it as it is.", "url": "https://github.com/pravega/pravega/pull/4769#discussion_r461810232", "createdAt": "2020-07-28T19:11:21Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorageTests.java", "diffHunk": "@@ -1505,6 +1502,191 @@ private void testTruncate(long maxChunkLength, long truncateAt, int chunksCountB\n         TestUtils.checkChunksExistInStorage(testContext.storageProvider, testContext.metadataStore, testSegmentName);\n     }\n \n+    /**\n+     * Test read and write with multiple failovers.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testReadWriteWithMultipleFailovers() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();\n+\n+        // Create\n+        testContext.storageManager.create(testSegmentName, null).get();\n+\n+        // Write some data.\n+        long writeAt = 0;\n+        long epoch = 42;\n+        ArrayList<Long> lengths = new ArrayList<>();\n+        for (int i = 1; i < 5; i++) {\n+            // Create a new test context and initialize with new epoch.\n+            val hWrite =  testContext.storageManager.openWrite(testSegmentName).get();\n+            testContext.storageManager.write(hWrite, writeAt, new ByteArrayInputStream(new byte[i]), i, null).join();\n+            writeAt += i;\n+            lengths.add((long) i);\n+\n+            // Read in same epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Fork the context.\n+            val oldTestCotext = testContext;\n+            testContext = oldTestCotext.fork(epoch++);\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Fence out old store.\n+            oldTestCotext.metadataStore.markFenced();\n+\n+            // Read in new epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+        }\n+\n+        int total = 10;\n+\n+        // Create a new test context and initialize with new epoch.\n+        testContext = testContext.fork(epoch++);\n+\n+        checkDataRead(testSegmentName, testContext, 0, total);\n+    }\n+\n+    /**\n+     * Test read and write with multiple failovers.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testReadWriteWithMultipleFailoversWithGarbage() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();\n+\n+        // Create\n+        testContext.storageManager.create(testSegmentName, null).get();\n+\n+        // Write some data.\n+        long writeAt = 0;\n+        long epoch = 42;\n+        SegmentHandle hWrite =  testContext.storageManager.openWrite(testSegmentName).get();\n+        ArrayList<Long> lengths = new ArrayList<>();\n+        for (int i = 1; i < 5; i++) {\n+            // Create a new test context and initialize with new epoch.\n+            testContext.storageManager.write(hWrite, writeAt, new ByteArrayInputStream(new byte[i]), i, null).join();\n+            writeAt += i;\n+            lengths.add((long) i);\n+\n+            // Read in same epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Fork the context.\n+            val oldTestCotext = testContext;\n+            testContext = oldTestCotext.fork(epoch++);\n+            TestUtils.checkSegmentLayout(testContext.metadataStore, testSegmentName, Longs.toArray(lengths));\n+\n+            // Make sure to open segment with new instance before writing garbage to old instance.\n+            hWrite =  testContext.storageManager.openWrite(testSegmentName).get();\n+\n+            // Write some garbage\n+            oldTestCotext.storageManager.write(hWrite, writeAt, new ByteArrayInputStream(new byte[10]), 10, null).join();\n+\n+            // Fence out old store.\n+            boolean exceptionThrown = false;\n+            oldTestCotext.metadataStore.markFenced();\n+\n+            AssertExtensions.assertFutureThrows(\"conact() allowed for invalid parameters\",\n+                    oldTestCotext.storageManager.write(hWrite, writeAt + 10, new ByteArrayInputStream(new byte[10]), 10, null),\n+                    ex -> ex instanceof StorageNotPrimaryException);\n+            // Read in new epoch.\n+            checkDataRead(testSegmentName, testContext, 0, writeAt);\n+        }\n+\n+        int total = 10;\n+\n+        // Create a new test context and initialize with new epoch.\n+        testContext = testContext.fork(epoch++);\n+\n+        checkDataRead(testSegmentName, testContext, 0, total);\n+    }\n+\n+    /**\n+     * Test truncate, read and write with multiple failovers.\n+     *\n+     * @throws Exception Exception if any.\n+     */\n+    @Test\n+    public void testTruncateWithMultipleFailoversWithGarbage() throws Exception {\n+        String testSegmentName = \"foo\";\n+        TestContext testContext = getTestContext();\n+\n+        // Create\n+        testContext.storageManager.create(testSegmentName, null).get();\n+\n+        // Write some data.\n+        long writeAt = 0;\n+        long truncateAt = 0;\n+        long epoch = 42;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3MDI5OA=="}, "originalCommit": {"oid": "ee9ee28b3c0bd7db7347ee5601ab13032c1a8ddf"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4318, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}