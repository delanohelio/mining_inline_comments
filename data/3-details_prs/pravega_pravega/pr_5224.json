{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MDA1MDcz", "number": 5224, "title": "Issue 5168: Remove Controller Dependencies", "bodyText": "Change log description\nThe purpose of this PR is to remove all references of the controller project from the test:system project.\n\nThis will enable us to properly deploy the system tests using JDK 8, instead of JDK 11 (as this is the JDK version the controller uses).\n\nPurpose of the change\nFixes #5168\nWhat the code does\n\nRemove reference to io.pravega.controller.util.Config class, and replace with hard coded values.\nRemove outdated/unnecessary check (WatermarkingTests)\nCompletely remove ControllerRestApiTest due to similarity of existing integration test.\n\nHow to verify it\n(Optional: steps to verify that the changes are effective)", "createdAt": "2020-09-29T17:59:08Z", "url": "https://github.com/pravega/pravega/pull/5224", "merged": true, "mergeCommit": {"oid": "93a2809947062dade4f5adac7d796c8491411583"}, "closed": true, "closedAt": "2020-10-27T17:19:54Z", "author": {"login": "co-jo"}, "timelineItems": {"totalCount": 75, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGUXgKAH2gAyNDk1MDA1MDczOjA4NjAxYWZkMTE0NjNiZjcwMGE2ZDBhZjNmMzNkY2I1M2Y5MzVlMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWsRXzAFqTUxNzk1NzUzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "08601afd11463bf700a6d0af3f33dcb53f935e09", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/08601afd11463bf700a6d0af3f33dcb53f935e09", "committedDate": "2020-02-21T00:13:24Z", "message": "Update K8 client APIs to use their 5.0.0 counterparts.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25a165d0293c34ee8703fff764e55cf8fda413dd", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/25a165d0293c34ee8703fff764e55cf8fda413dd", "committedDate": "2020-02-21T18:42:03Z", "message": "Merge pull request #1 from co-jo/issue-4464-update-kubernetes-client-version\n\nIssue 4464 update kubernetes client version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc2dd2be26feed2953258ff055c1657aeb57019", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/8cc2dd2be26feed2953258ff055c1657aeb57019", "committedDate": "2020-02-23T04:43:09Z", "message": "Run system tests using alternative flag value.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3fcbd2e627f9fc0a0f6bad7e42667db4439e092", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/c3fcbd2e627f9fc0a0f6bad7e42667db4439e092", "committedDate": "2020-03-10T22:21:32Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f808cc42831892aeb8e7824c22d499a1f9fa03", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/f5f808cc42831892aeb8e7824c22d499a1f9fa03", "committedDate": "2020-03-18T18:44:10Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7901435dc1127bed1c46845bbaf8024477e2078f", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/7901435dc1127bed1c46845bbaf8024477e2078f", "committedDate": "2020-04-02T18:49:59Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59b3e33f6d5bd90264753caadcea7ed7bbfe06c", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/d59b3e33f6d5bd90264753caadcea7ed7bbfe06c", "committedDate": "2020-04-16T20:22:05Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa090cad1d88812f2a88e9debacdb04df585adbf", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/aa090cad1d88812f2a88e9debacdb04df585adbf", "committedDate": "2020-04-18T20:15:50Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e328bcb38239fdc32f866980ee1103c93dff522d", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/e328bcb38239fdc32f866980ee1103c93dff522d", "committedDate": "2020-05-11T22:25:21Z", "message": "Merge branch 'master' of https://github.com/co-jo/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd02180986f49a42002c7fd2ef28885d1f701af9", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/cd02180986f49a42002c7fd2ef28885d1f701af9", "committedDate": "2020-05-11T22:25:27Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1408d7527ec73f1645418df04aea4aa1120b39e7", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/1408d7527ec73f1645418df04aea4aa1120b39e7", "committedDate": "2020-05-18T20:48:16Z", "message": "Merge branch 'master' of https://github.com/co-jo/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2719517850f39bce3e5f2c92f04c8c24122a520", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/e2719517850f39bce3e5f2c92f04c8c24122a520", "committedDate": "2020-05-20T18:59:36Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d3648dd2c28a161dab520a48bf4bf657f9d14d", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b1d3648dd2c28a161dab520a48bf4bf657f9d14d", "committedDate": "2020-06-15T18:43:02Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3a8b73b2904f91d0d59e27eaace82bcc1870b5c", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b3a8b73b2904f91d0d59e27eaace82bcc1870b5c", "committedDate": "2020-08-04T21:19:13Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b02240ab9a8e6d7d645ffdd020f9b43854c89920", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b02240ab9a8e6d7d645ffdd020f9b43854c89920", "committedDate": "2020-08-17T18:24:07Z", "message": "Merge branch 'master' of https://github.com/pravega/pravega into segmentstore-java-11-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544e4900580d40e7832fff1e6ba2457c736c885d", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/544e4900580d40e7832fff1e6ba2457c736c885d", "committedDate": "2020-08-17T19:23:27Z", "message": "* Initial version configuration.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58fa2ad355423360c85be49c39c88a8c6e1548bf", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/58fa2ad355423360c85be49c39c88a8c6e1548bf", "committedDate": "2020-08-18T22:34:38Z", "message": "* Update gradle and add compiler options to dependencies of 'common'.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca394be056e05b75b9ecc075c717ef0b8afb67f", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/7ca394be056e05b75b9ecc075c717ef0b8afb67f", "committedDate": "2020-08-19T17:49:58Z", "message": "* Update Spotbugs (picked from Tom's repo).\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b71b7ac1678c7cff6485a6a8c57b4d11d72e7e11", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b71b7ac1678c7cff6485a6a8c57b4d11d72e7e11", "committedDate": "2020-08-26T23:19:48Z", "message": "* Update Lombok version.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8aa9bffce20c8ff1f7d3996e8be42dfd1d295f6", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/e8aa9bffce20c8ff1f7d3996e8be42dfd1d295f6", "committedDate": "2020-08-27T18:56:44Z", "message": "* Update TravisCI JDK.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb62760263a14823fba220a91034bc89c74cf091", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/fb62760263a14823fba220a91034bc89c74cf091", "committedDate": "2020-08-27T21:03:01Z", "message": "* Suppress SpotBugs warning.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b32ce63f62a3a96f0a09cc5d4d75db0475a89a8e", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b32ce63f62a3a96f0a09cc5d4d75db0475a89a8e", "committedDate": "2020-08-27T22:52:29Z", "message": "* Add package to suppress SpotBug warning to allowed packages file.\n\nSigned-off-by: Colin Hryniowski <co-jo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b699030bcb62252f95bcc3e46570c34d2d33d780", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b699030bcb62252f95bcc3e46570c34d2d33d780", "committedDate": "2020-09-02T18:03:00Z", "message": "Replace default Dockerfile with Java11 variant.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc46eaf190aeae33f621ddfa4eea3eda4853a00d", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/dc46eaf190aeae33f621ddfa4eea3eda4853a00d", "committedDate": "2020-09-02T18:12:29Z", "message": "Merge branch 'master' into issue-5082-java-11-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac167ff6af108e0ccdb7ee8ad7236916d997da4b", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/ac167ff6af108e0ccdb7ee8ad7236916d997da4b", "committedDate": "2020-09-02T18:46:35Z", "message": "* Add single flag to control whether or not to build the client using JDK11.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9261b5e2ff83f783bf0b5115123eb6d21a4cb09d", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/9261b5e2ff83f783bf0b5115123eb6d21a4cb09d", "committedDate": "2020-09-03T16:44:41Z", "message": "Use one source of truth for the default Java version.\nAdd a gradle property to set the client's Java version.\nUpdate README.md.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "720eb800eff962b098530dff247854387c3b0648", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/720eb800eff962b098530dff247854387c3b0648", "committedDate": "2020-09-03T17:51:23Z", "message": "Merge branch 'master' into issue-5082-java-11-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dae234c4c13ce63676ecb0ab255f4da98172b39", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/6dae234c4c13ce63676ecb0ab255f4da98172b39", "committedDate": "2020-09-03T22:50:47Z", "message": "Remove '(source/target)Compatibility' references and replace them with a release flag.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe7ef9cadd88b3258d247dcf98df140ba73bcc1", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/fbe7ef9cadd88b3258d247dcf98df140ba73bcc1", "committedDate": "2020-09-03T22:53:10Z", "message": "Remove default 'imageVersion'.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45975ccb6bb59009c6d214431393e5238761615f", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/45975ccb6bb59009c6d214431393e5238761615f", "committedDate": "2020-09-03T22:53:33Z", "message": "Merge remote-tracking branch 'origin/issue-5082-java-11-migration' into issue-5082-java-11-migration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf8c7f2a100099263e408d9378f76e02c4416ee", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/edf8c7f2a100099263e408d9378f76e02c4416ee", "committedDate": "2020-09-04T06:47:52Z", "message": "Remove unnecessary/verbose components.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "674bd779f68f35b8f63dd665c653c404c2e08be7", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/674bd779f68f35b8f63dd665c653c404c2e08be7", "committedDate": "2020-09-04T20:27:12Z", "message": "Clarify documentation.\nConsolidate Java compilerArgs.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7daca88b895a490b90c62db027c5f4a9815487d4", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/7daca88b895a490b90c62db027c5f4a9815487d4", "committedDate": "2020-09-04T23:31:00Z", "message": "Build longevity tests using the targeted client version as well (JDK 8).\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38b306ba5816c9b62d33866d00f94d1dccba8148", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/38b306ba5816c9b62d33866d00f94d1dccba8148", "committedDate": "2020-09-05T19:52:41Z", "message": "Revert using afterEvaluate. The last instance of the flag takes precedence.\nAlso add release flag to test classes.\nReplace the --release version, instead of relying on the construction ordering to ensure the proper version is given.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9ce48fb1fe1f67f36ed9da857c17c325c3d6c18", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/c9ce48fb1fe1f67f36ed9da857c17c325c3d6c18", "committedDate": "2020-09-08T16:56:35Z", "message": "Remove duplicate function declaration.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103eff85dc760461ff0a8d9f67350b96f28c9dac", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/103eff85dc760461ff0a8d9f67350b96f28c9dac", "committedDate": "2020-09-11T18:32:30Z", "message": "1. Hardcode controller config options.\n2. Retire ControllerRestApiTest (a near identical test exists as an integration test).\n3. Remove outdated check.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6a6badf156de087cd6a8a840ea3f4f2201a578", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/ef6a6badf156de087cd6a8a840ea3f4f2201a578", "committedDate": "2020-09-11T18:34:44Z", "message": "Remove unused imports.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf617b7ede2d9b7cbeee3d01c418e3727e1ab96", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/adf617b7ede2d9b7cbeee3d01c418e3727e1ab96", "committedDate": "2020-09-29T17:39:04Z", "message": "Merge branch 'master' into issue-5168-remove-controller-dependencies\n\n# Conflicts:\n#\tbuild.gradle\n#\ttest/system/src/test/java/io/pravega/test/system/ControllerRestApiTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTM2Mjg5", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-499536289", "createdAt": "2020-09-30T15:09:31Z", "commit": {"oid": "adf617b7ede2d9b7cbeee3d01c418e3727e1ab96"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTowOTozMVrOHaiXNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTowOTozMVrOHaiXNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4ODAyMg==", "bodyText": "This is not consistent with the PR description.\nIn the description you say \"remove Controller dependencies\".\nHere, you are removing references from the System test package to the Controller.\nA few issues that I'd like resolved:\n\nMake the PR description consistent with the contents of the PR.\nRemove the dependency on the controller project from this project's build.gradle section.\nI am concerned that this change in particular (swapping Config.* with hardcoded strings) will break if we make a change to those properties at one point.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r497588022", "createdAt": "2020-09-30T15:09:31Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/marathon/PravegaControllerService.java", "diffHunk": "@@ -122,18 +121,18 @@ private App createPravegaControllerApp() {\n \n         String componentCode = \"controller\";\n \n-        //set env\n+        // These properties are defined in \"io.pravega.controller.util.Config\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adf617b7ede2d9b7cbeee3d01c418e3727e1ab96"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f40240a8155ae6c5f213e464b65aa32a9d9b75d2", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/f40240a8155ae6c5f213e464b65aa32a9d9b75d2", "committedDate": "2020-09-30T16:27:10Z", "message": "Remove controller dependency from the test:system gradle project.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45015d67f3dd43cff2aaef9fe9a506331dbb50da", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/45015d67f3dd43cff2aaef9fe9a506331dbb50da", "committedDate": "2020-10-01T17:37:05Z", "message": "Merge branch 'master' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aead746ac67e0db77a26b6b4564c7c4dcb39bd6", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/6aead746ac67e0db77a26b6b4564c7c4dcb39bd6", "committedDate": "2020-10-01T17:58:15Z", "message": "Add missing dependency.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590d8e2d8c737ca2cfe216fb289fb1fcaa9a5bb0", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/590d8e2d8c737ca2cfe216fb289fb1fcaa9a5bb0", "committedDate": "2020-10-01T17:59:22Z", "message": "Reclassify as test dependency.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1777027e33e63c6a74cd52cce902f36c3c5389f1", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/1777027e33e63c6a74cd52cce902f36c3c5389f1", "committedDate": "2020-10-01T17:59:35Z", "message": "Merge remote-tracking branch 'origin/issue-5168-remove-controller-dependencies' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/7517e565643e7690504daa7a88b2af916a0211eb", "committedDate": "2020-10-01T21:32:48Z", "message": "Merge branch 'master' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODkxNjg4", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-500891688", "createdAt": "2020-10-02T06:47:32Z", "commit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzE4NjU5", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-501718659", "createdAt": "2020-10-05T04:41:44Z", "commit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzI0ODUw", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-501724850", "createdAt": "2020-10-05T05:08:14Z", "commit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNzI2NDIy", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-501726422", "createdAt": "2020-10-05T05:14:24Z", "commit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNToxNDoyNFrOHcN3SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwNToyMjowNFrOHcN9rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0OTMyMA==", "bodyText": "nit: This comment is unnecessary and slightly problematic:\n\nThe target class may be refactored with a change in name and namespace, and this comment will then go stale. Ideally, classes should be referenced using a @link annotation (when used in JavaDocs) or the like.\nA simple text search will easily locate the class where these properties are located, so it shouldn't be necessary to tell the source of these properties.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r499349320", "createdAt": "2020-10-05T05:14:24Z", "author": {"login": "ravisharda"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/marathon/PravegaControllerService.java", "diffHunk": "@@ -122,18 +121,18 @@ private App createPravegaControllerApp() {\n \n         String componentCode = \"controller\";\n \n-        //set env\n+        // These properties are defined in \"io.pravega.controller.util.Config\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1MDgyOQ==", "bodyText": "There is a lot of code repetition here. Extracting this out to a method that takes only the config name and the value and assumes the component code can simplify this:\njavaSysPropertyEntryAsString(\"zk.connect.uri\", zk)\n\np.s.: The name of the method setSystemProperty() is also misleading. It doesn't really \"set the system property\", but rather returns a newly created string representing the system property (-Dprop=value). But, that's preexisting code, and you may or may not want to  change that too.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r499350829", "createdAt": "2020-10-05T05:21:27Z", "author": {"login": "ravisharda"}, "path": "test/system/src/main/java/io/pravega/test/system/framework/services/marathon/PravegaControllerService.java", "diffHunk": "@@ -122,18 +121,18 @@ private App createPravegaControllerApp() {\n \n         String componentCode = \"controller\";\n \n-        //set env\n+        // These properties are defined in \"io.pravega.controller.util.Config\".\n         String controllerSystemProperties = \"-Xmx512m\" +\n-                setSystemProperty(Config.PROPERTY_ZK_URL.getFullName(componentCode), zk) +\n-                setSystemProperty(Config.PROPERTY_RPC_HOST.getFullName(componentCode), this.id + \".marathon.mesos\") +\n-                setSystemProperty(Config.PROPERTY_RPC_PORT.getFullName(componentCode), String.valueOf(CONTROLLER_PORT)) +\n-                setSystemProperty(Config.PROPERTY_SERVICE_PORT.getFullName(componentCode), String.valueOf(CONTROLLER_PORT)) +\n-                setSystemProperty(Config.PROPERTY_REST_PORT.getFullName(componentCode), String.valueOf(REST_PORT)) +\n+                setSystemProperty(String.format(\"%s.%s\", componentCode, \"zk.connect.uri\"), zk) +\n+                setSystemProperty(String.format(\"%s.%s\", componentCode, \"service.rpc.published.host.nameOrIp\"), this.id + \".marathon.mesos\") +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM1MDk1OA==", "bodyText": "This PR removes statements in lines 157-161. What is the impact on the test? Given the lines below, it looks like the test is excepted to function without these lines now. But then the question is why were they needed in the first place.\nAm I missing something?", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r499350958", "createdAt": "2020-10-05T05:22:04Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/WatermarkingTest.java", "diffHunk": "@@ -153,13 +151,6 @@ public void watermarkingTests() throws Exception {\n         Stream streamObj = Stream.of(SCOPE, STREAM);\n         scale(controller, streamObj);\n \n-        // wait until mark stream is created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7517e565643e7690504daa7a88b2af916a0211eb"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf25a6cb58f5bea9ce201494e00485e2290e4e63", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/bf25a6cb58f5bea9ce201494e00485e2290e4e63", "committedDate": "2020-10-05T18:28:56Z", "message": "Remove duplicate code.\nRename misleading method name.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a7d4413abe1a15ee969eb4990cea7d871c91f4", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/72a7d4413abe1a15ee969eb4990cea7d871c91f4", "committedDate": "2020-10-05T18:29:20Z", "message": "Remove duplicate code.\nRename misleading method name.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e5bce93f8bc07b93855c370c58520ed3ebba56", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/14e5bce93f8bc07b93855c370c58520ed3ebba56", "committedDate": "2020-10-05T18:29:31Z", "message": "Merge remote-tracking branch 'origin/issue-5168-remove-controller-dependencies' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1517175ec88811f50ba165b184a2bfb03be19955", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/1517175ec88811f50ba165b184a2bfb03be19955", "committedDate": "2020-10-06T02:00:21Z", "message": "Merge branch 'master' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd23145b4138e0e12c82fb08de3bc17ef0a256a3", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/fd23145b4138e0e12c82fb08de3bc17ef0a256a3", "committedDate": "2020-10-08T19:02:18Z", "message": "Merge branch 'master' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4acfaf8c0d131a75c85de16306e13ebe03101f", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/ff4acfaf8c0d131a75c85de16306e13ebe03101f", "committedDate": "2020-10-14T19:11:57Z", "message": "Replace 'ControllerRestApiTest' with 'DynamicRestApiTest', which only tests functionality of a simple endpoint.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fb835282bb1c385de84adf763582ec4fa2a5db1", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/0fb835282bb1c385de84adf763582ec4fa2a5db1", "committedDate": "2020-10-14T19:12:17Z", "message": "Merge remote-tracking branch 'origin/issue-5168-remove-controller-dependencies' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/7a8acb6961e31272b77d863c5f1a88cc3c87d6e9", "committedDate": "2020-10-14T20:48:44Z", "message": "Make system tests target same version as Client.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4OTQ0Njk2", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-508944696", "createdAt": "2020-10-15T05:22:55Z", "commit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNToyMjo1NVrOHhxLrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNTo0Mzo1NlrOHhxlPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MDg2MA==", "bodyText": "The credentials should be coming from a properties file instead of being hard-coded. As far as I remember, there is a properties file used in system tests that contain properties such as these.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505170860", "createdAt": "2020-10-15T05:22:55Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MTAyMg==", "bodyText": "The reason why these lines are needed is not immediately apparent. Could you please add some comments that explain them.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505171022", "createdAt": "2020-10-15T05:23:34Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MjA2Mg==", "bodyText": "Why don't we just call this controllerService? That'd reduce the work needed by readers of the code where this variable is used.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505172062", "createdAt": "2020-10-15T05:26:48Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MjI3NQ==", "bodyText": "controllerURIs'd work better here.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505172275", "createdAt": "2020-10-15T05:27:25Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MjUwOA==", "bodyText": "What do you intend to do here? It looks like a faulty statement to me.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505172508", "createdAt": "2020-10-15T05:28:19Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();\n+        URI controllerRESTUri = ctlURIs.get(1);\n+        Invocation.Builder builder;\n+        Response response;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        assertFalse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3MjY2Mw==", "bodyText": "This comment can be better phrased.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505172663", "createdAt": "2020-10-15T05:28:49Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();\n+        URI controllerRESTUri = ctlURIs.get(1);\n+        Invocation.Builder builder;\n+        Response response;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        assertFalse(true);\n+\n+        // TEST REST server status, ping test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3Mzc1Mw==", "bodyText": "The response should be closed too so that the underlying message entity input stream (if available and open) is closed and other resources associated with the response are released. You could perhaps use @Cleanup Lombok annotation for that.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505173753", "createdAt": "2020-10-15T05:32:03Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();\n+        URI controllerRESTUri = ctlURIs.get(1);\n+        Invocation.Builder builder;\n+        Response response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3NjEyNg==", "bodyText": "The message won't add much value as it does not tell what is wrong. Ideally, the problem should be immediately apparent when someone looks at the test failure.\nCould you please change the message (for example: \"Received unexpected status code \" + response.getStatus + \" in response to ping request\"", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505176126", "createdAt": "2020-10-15T05:39:56Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();\n+        URI controllerRESTUri = ctlURIs.get(1);\n+        Invocation.Builder builder;\n+        Response response;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        assertFalse(true);\n+\n+        // TEST REST server status, ping test\n+        resourceURl = new StringBuilder(restServerURI).append(\"/ping\").toString();\n+        webTarget = client.target(resourceURl);\n+        builder = webTarget.request();\n+        response = builder.get();\n+        assertEquals(\"Ping test\", OK.getStatusCode(), response.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3NjgyOA==", "bodyText": "This log statement is redundant, the control'd only move forward if the previous assertion passes. Regardless of whether the next assertion succeeds or fails, one'd know that the ping was successful.\nHaving said that, it's alright if you want to keep it anyway.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505176828", "createdAt": "2020-10-15T05:41:59Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();\n+        URI controllerRESTUri = ctlURIs.get(1);\n+        Invocation.Builder builder;\n+        Response response;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        assertFalse(true);\n+\n+        // TEST REST server status, ping test\n+        resourceURl = new StringBuilder(restServerURI).append(\"/ping\").toString();\n+        webTarget = client.target(resourceURl);\n+        builder = webTarget.request();\n+        response = builder.get();\n+        assertEquals(\"Ping test\", OK.getStatusCode(), response.getStatus());\n+        log.info(\"REST Server is running. Ping successful.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3NzQwNQ==", "bodyText": "Since you create a scope and stream earlier, you should also check if that shows up in the response too? Otherwise creating the scope/stream previously adds no value in this particular test.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r505177405", "createdAt": "2020-10-15T05:43:56Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+        clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service conService = Utils.createPravegaControllerService(null);\n+        List<URI> ctlURIs = conService.getServiceDetails();\n+        URI controllerRESTUri = ctlURIs.get(1);\n+        Invocation.Builder builder;\n+        Response response;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        assertFalse(true);\n+\n+        // TEST REST server status, ping test\n+        resourceURl = new StringBuilder(restServerURI).append(\"/ping\").toString();\n+        webTarget = client.target(resourceURl);\n+        builder = webTarget.request();\n+        response = builder.get();\n+        assertEquals(\"Ping test\", OK.getStatusCode(), response.getStatus());\n+        log.info(\"REST Server is running. Ping successful.\");\n+\n+        final String scope1 = RandomStringUtils.randomAlphanumeric(10);\n+        final String stream1 = RandomStringUtils.randomAlphanumeric(10);\n+\n+        Client client = ClientBuilder.newClient();\n+        String responseAsString = null;\n+\n+        ClientConfig clientConfig = ClientConfig.builder()\n+                        .controllerURI(controllerRESTUri)\n+                        .credentials(new DefaultCredentials(\"1111_aaaa\", \"admin\"))\n+                        .build();\n+        // Create a scope.\n+        @Cleanup\n+        StreamManager streamManager = StreamManager.create(clientConfig);\n+        assertNotNull(streamManager);\n+        boolean isScopeCreated = streamManager.createScope(scope1);\n+        assertTrue(\"Failed to create scope\", isScopeCreated);\n+        // Create a stream.\n+        boolean isStreamCreated = streamManager.createStream(scope1, stream1, StreamConfiguration.builder().scalingPolicy(ScalingPolicy.fixed(1)).build());\n+        assertTrue(\"Failed to create stream\", isScopeCreated);\n+\n+        // Query for an existing scope.\n+        webTarget = client.target(restServerURI).path(\"v1\").path(\"scopes\");\n+        builder = webTarget.request();\n+        response = builder.get();\n+        assertEquals(\"Get scopes failed.\", OK.getStatusCode(), response.getStatus());\n+        responseAsString = response.readEntity(String.class);\n+        assertTrue(responseAsString.contains(\"\\\"scopeName\\\":\\\"_system\\\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8acb6961e31272b77d863c5f1a88cc3c87d6e9"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47637cd4889e836c656d67840fba29c2282c038c", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/47637cd4889e836c656d67840fba29c2282c038c", "committedDate": "2020-10-15T19:17:23Z", "message": "Refactor and add checks for stream existence.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a380f1257fd8cb9c3c5e9362645db322203667b", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/3a380f1257fd8cb9c3c5e9362645db322203667b", "committedDate": "2020-10-15T20:59:42Z", "message": "Change task targeting mechanism to also include test compilation.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54939f9f01a06e25f1e6db3ad2266f1a0a17aa27", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/54939f9f01a06e25f1e6db3ad2266f1a0a17aa27", "committedDate": "2020-10-21T17:33:15Z", "message": "Use proper GRPC endpoint instead of REST endpoint (.get(0) vs .get(1)).\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b6537f769cba5c35d9105168bea94ab47fcbcf1", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/1b6537f769cba5c35d9105168bea94ab47fcbcf1", "committedDate": "2020-10-21T17:34:50Z", "message": "Add missing runtime dependency.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25dcfac7b5899802728dd87fb16f6d34f6c012d6", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/25dcfac7b5899802728dd87fb16f6d34f6c012d6", "committedDate": "2020-10-22T23:31:17Z", "message": "Also required in runtime configuration.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a7ab0884ee47ef62398d05abb3fcf2b35187cd", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/38a7ab0884ee47ef62398d05abb3fcf2b35187cd", "committedDate": "2020-10-22T23:44:31Z", "message": "Remove unnecessary client property.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjU4OTYx", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-515258961", "createdAt": "2020-10-23T03:54:11Z", "commit": {"oid": "38a7ab0884ee47ef62398d05abb3fcf2b35187cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo1NDoxMVrOHm7SBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMzo1NDoxMVrOHm7SBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3OTIwNg==", "bodyText": "Credentials are hard-coded. Can we obtain these from the properties file instead?", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r510579206", "createdAt": "2020-10-23T03:54:11Z", "author": {"login": "ravisharda"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import org.glassfish.jersey.jackson.internal.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service controllerService = Utils.createPravegaControllerService(null);\n+        List<URI> controllerURIs = controllerService.getServiceDetails();\n+        URI controllerGRPCUri = controllerURIs.get(0);\n+        URI controllerRESTUri = controllerURIs.get(1);\n+        Invocation.Builder builder;\n+        @Cleanup\n+        Response response = null;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        // Validate the liveliness of the server through a 'ping' request.\n+        resourceURl = new StringBuilder(restServerURI).append(\"/ping\").toString();\n+        webTarget = client.target(resourceURl);\n+        builder = webTarget.request();\n+        response = builder.get();\n+        assertEquals(String.format(\"Received unexpected status code: %s in response to 'ping' request.\", response.getStatus()),\n+                OK.getStatusCode(),\n+                response.getStatus());\n+\n+        final String scope1 = RandomStringUtils.randomAlphanumeric(10);\n+        final String stream1 = RandomStringUtils.randomAlphanumeric(10);\n+\n+        Client client = ClientBuilder.newClient();\n+        String responseAsString = null;\n+\n+        ClientConfig clientConfig = ClientConfig.builder()\n+                .controllerURI(controllerGRPCUri)\n+                .credentials(new DefaultCredentials(\"1111_aaaa\", \"admin\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a7ab0884ee47ef62398d05abb3fcf2b35187cd"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3999102c2ab2e904058d20aeb8ad7b01d2c53de1", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3999102c2ab2e904058d20aeb8ad7b01d2c53de1", "committedDate": "2020-10-23T03:59:21Z", "message": "Merge branch 'master' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82993f9c58d185880a6381a713df105335063b6", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/b82993f9c58d185880a6381a713df105335063b6", "committedDate": "2020-10-23T16:48:36Z", "message": "Add username/password to auth properties file.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2c0ddefd39db350bc6f20f2cd3a816908e24f6d", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/f2c0ddefd39db350bc6f20f2cd3a816908e24f6d", "committedDate": "2020-10-23T18:00:33Z", "message": "Look up property properly\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a4e0393bf39789a033285346f0e9657f11bfa2", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/38a4e0393bf39789a033285346f0e9657f11bfa2", "committedDate": "2020-10-23T18:02:37Z", "message": "Add to correct properties file.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1572fbc521158e88ce54fe665e8bdc30dfbd04", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/6f1572fbc521158e88ce54fe665e8bdc30dfbd04", "committedDate": "2020-10-23T18:04:24Z", "message": "Merge remote-tracking branch 'origin/issue-5168-remove-controller-dependencies' into issue-5168-remove-controller-dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTEzMjk3", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-517113297", "createdAt": "2020-10-26T19:36:19Z", "commit": {"oid": "6f1572fbc521158e88ce54fe665e8bdc30dfbd04"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozNjoxOVrOHofXpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozNzozN1rOHofacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxOTA0Nw==", "bodyText": "Why do we need this both for runtime and testCompile? Shouldn't compile be enough?", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r512219047", "createdAt": "2020-10-26T19:36:19Z", "author": {"login": "andreipaduroiu"}, "path": "build.gradle", "diffHunk": "@@ -854,6 +855,9 @@ project('test:system') {\n         compile group: 'org.glassfish.jersey.connectors', name:'jersey-apache-connector', version:jerseyVersion\n         compile group: 'com.spotify', name: 'docker-client', version: dockerClientVersion\n         compile group: 'io.kubernetes', name: 'client-java', version: k8ClientVersion\n+        runtime group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion\n+        runtime group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n+        testCompile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1572fbc521158e88ce54fe665e8bdc30dfbd04"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxOTc2Mg==", "bodyText": "Unless I'm missing something, these are still hardcoded.", "url": "https://github.com/pravega/pravega/pull/5224#discussion_r512219762", "createdAt": "2020-10-26T19:37:37Z", "author": {"login": "andreipaduroiu"}, "path": "test/system/src/test/java/io/pravega/test/system/DynamicRestApiTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.system;\n+\n+import org.glassfish.jersey.jackson.internal.jackson.jaxrs.json.JacksonJsonProvider;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import lombok.Cleanup;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import io.pravega.test.system.framework.Environment;\n+import io.pravega.test.system.framework.SystemTestRunner;\n+import io.pravega.test.system.framework.Utils;\n+import io.pravega.test.system.framework.services.Service;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.List;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.glassfish.jersey.client.authentication.HttpAuthenticationFeature;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import mesosphere.marathon.client.MarathonException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static javax.ws.rs.core.Response.Status.OK;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@Slf4j\n+@RunWith(SystemTestRunner.class)\n+public class DynamicRestApiTest extends AbstractSystemTest {\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(5 * 60);\n+\n+    private final Client client;\n+    private WebTarget webTarget;\n+    private String restServerURI;\n+    private String resourceURl;\n+\n+    public DynamicRestApiTest() {\n+\n+        org.glassfish.jersey.client.ClientConfig clientConfig = new org.glassfish.jersey.client.ClientConfig();\n+        clientConfig.register(JacksonJsonProvider.class);\n+\n+        if (Utils.AUTH_ENABLED) {\n+            HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(\"admin\", \"1111_aaaa\");\n+            clientConfig.register(feature);\n+        }\n+\n+        client = ClientBuilder.newClient(clientConfig);\n+    }\n+\n+    /**\n+     * This is used to setup the various services required by the system test framework.\n+     *\n+     * @throws InterruptedException If interrupted\n+     * @throws MarathonException    when error in setup\n+     * @throws URISyntaxException   If URI is invalid\n+     */\n+    @Environment\n+    public static void initialize() throws MarathonException {\n+        URI zkUri = startZookeeperInstance();\n+        startBookkeeperInstances(zkUri);\n+        URI controllerUri = ensureControllerRunning(zkUri);\n+        ensureSegmentStoreRunning(zkUri, controllerUri);\n+    }\n+\n+    @Test\n+    public void listScopes() {\n+        Service controllerService = Utils.createPravegaControllerService(null);\n+        List<URI> controllerURIs = controllerService.getServiceDetails();\n+        URI controllerGRPCUri = controllerURIs.get(0);\n+        URI controllerRESTUri = controllerURIs.get(1);\n+        Invocation.Builder builder;\n+        @Cleanup\n+        Response response = null;\n+        String protocol = Utils.TLS_AND_AUTH_ENABLED ? \"https://\" : \"http://\";\n+        restServerURI = protocol + controllerRESTUri.getHost() + \":\" + controllerRESTUri.getPort();\n+        log.info(\"REST Server URI: {}\", restServerURI);\n+\n+        // Validate the liveliness of the server through a 'ping' request.\n+        resourceURl = new StringBuilder(restServerURI).append(\"/ping\").toString();\n+        webTarget = client.target(resourceURl);\n+        builder = webTarget.request();\n+        response = builder.get();\n+        assertEquals(String.format(\"Received unexpected status code: %s in response to 'ping' request.\", response.getStatus()),\n+                OK.getStatusCode(),\n+                response.getStatus());\n+\n+        final String scope1 = RandomStringUtils.randomAlphanumeric(10);\n+        final String stream1 = RandomStringUtils.randomAlphanumeric(10);\n+\n+        Client client = ClientBuilder.newClient();\n+        String responseAsString = null;\n+\n+        ClientConfig clientConfig = ClientConfig.builder()\n+                .controllerURI(controllerGRPCUri)\n+                .credentials(new DefaultCredentials(\"1111_aaaa\", \"admin\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3OTIwNg=="}, "originalCommit": {"oid": "38a7ab0884ee47ef62398d05abb3fcf2b35187cd"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e2b5b93ab86d108885e3b196e90e7357b7e7255", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/9e2b5b93ab86d108885e3b196e90e7357b7e7255", "committedDate": "2020-10-26T19:55:03Z", "message": "Lookup username/password from properties file.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c651f672ffca20d5dde2f555bec26bf25b88de49", "author": {"user": {"login": "co-jo", "name": "Colin Hryniowski"}}, "url": "https://github.com/pravega/pravega/commit/c651f672ffca20d5dde2f555bec26bf25b88de49", "committedDate": "2020-10-26T20:16:24Z", "message": "Change target configuration.\n\nSigned-off-by: co-jo <colin.hryniowski@dell.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzM2MDQy", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-517336042", "createdAt": "2020-10-27T04:13:38Z", "commit": {"oid": "c651f672ffca20d5dde2f555bec26bf25b88de49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTU3NTMw", "url": "https://github.com/pravega/pravega/pull/5224#pullrequestreview-517957530", "createdAt": "2020-10-27T17:18:22Z", "commit": {"oid": "c651f672ffca20d5dde2f555bec26bf25b88de49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3884, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}