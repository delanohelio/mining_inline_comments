{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMjczMTU2", "number": 5250, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyNDozOVrOE0bLBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoxMDo1MFrOFEkNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA2NTk4OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyNDo0MFrOHsJE2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMDo1N1rOHtKmvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0ODA4OA==", "bodyText": "output supports formatted text. Please use that api.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516048088", "createdAt": "2020-11-02T15:24:40Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +61,39 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            InputStream trustStore = null;\n+            try {\n+                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+                trustStore.close();\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: \" + e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTcyNA==", "bodyText": "Used the api for formatted text.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121724", "createdAt": "2020-11-04T06:30:57Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +61,39 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            InputStream trustStore = null;\n+            try {\n+                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+                trustStore.close();\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: \" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0ODA4OA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA3MzI5OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyNjoxMVrOHsJJVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMTowNlrOHtKm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTIzOA==", "bodyText": "I suggest using try-with-resources or annotating with with @Cleanup to ensure this is closed. If you get an error between here and line 75, your input stream will not be closed.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516049238", "createdAt": "2020-11-02T15:26:11Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +61,39 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            InputStream trustStore = null;\n+            try {\n+                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc2NA==", "bodyText": "Used @Cleanup on the InputStream as suggested.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121764", "createdAt": "2020-11-04T06:31:06Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +61,39 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            InputStream trustStore = null;\n+            try {\n+                trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTIzOA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA3OTA0OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyNzoyNVrOHsJMsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMTowOVrOHtKm7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDA5OA==", "bodyText": "Use TestUtils to get randomized ports. Hardcoding ports in unit tests is a recipe for failure due to ports already being used.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516050098", "createdAt": "2020-11-02T15:27:25Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc3NQ==", "bodyText": "Used TestUtils for randomized ports.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121775", "createdAt": "2020-11-04T06:31:09Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDA5OA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA4MTQ1OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyNzo1NFrOHsJOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMToxMVrOHtKm9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDQ3MQ==", "bodyText": "Any reason why these shouldn't be static or final?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516050471", "createdAt": "2020-11-02T15:27:54Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc4MQ==", "bodyText": "@Rule requires the variable to be final only and not static. The variables authEnabled and tlsEnabled cannot be final as these flags are set before calling super.setUp() in the test classes based on whether we test with authentication or TLS enabled or both.\nAlso static non final variables cannot be declared according to the checkstyle.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121781", "createdAt": "2020-11-04T06:31:11Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MDQ3MQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA4NTg2OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyODo1MFrOHsJQ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMToxM1rOHtKnAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTE3MQ==", "bodyText": "Why is this static?\nDo not use static fields that you set during your execution. This will prevent us from eventually running tests in parallel.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516051171", "createdAt": "2020-11-02T15:28:50Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTc5Mg==", "bodyText": "I've made this field non-static as suggested.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121792", "createdAt": "2020-11-04T06:31:13Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTE3MQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA4OTE0OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyOToyOFrOHsJS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowNDozOFrOH5RLsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTY4Mw==", "bodyText": "Do not do this. Find a different way to figure out when the server has started.\n20 seconds may be too long in most cases and may not be sufficient if Travis is super-slow when your test executes.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516051683", "createdAt": "2020-11-02T15:29:28Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+\n+        // The uri returned by LocalPravegaEmulator is in the form tcp://localhost:9090 (protocol + domain + port)\n+        // but for the CLI we need to set the GRPC uri as localhost:9090 (domain + port). Because the protocol\n+        // is decided based on whether security is enabled or not.\n+\n+        // Set the CLI properties.\n+        STATE.set(new AdminCommandState());\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + REST_SERVER_PORT.toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + CONTROLLER_PORT.toString());\n+        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n+        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n+        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n+\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTg3Nw==", "bodyText": "Will try to look for a better way to identify if the server has started.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121877", "createdAt": "2020-11-04T06:31:33Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+\n+        // The uri returned by LocalPravegaEmulator is in the form tcp://localhost:9090 (protocol + domain + port)\n+        // but for the CLI we need to set the GRPC uri as localhost:9090 (domain + port). Because the protocol\n+        // is decided based on whether security is enabled or not.\n+\n+        // Set the CLI properties.\n+        STATE.set(new AdminCommandState());\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + REST_SERVER_PORT.toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + CONTROLLER_PORT.toString());\n+        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n+        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n+        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n+\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTY4Mw=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMjQwMw==", "bodyText": "This has been removed.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529812403", "createdAt": "2020-11-24T19:04:38Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+\n+        // The uri returned by LocalPravegaEmulator is in the form tcp://localhost:9090 (protocol + domain + port)\n+        // but for the CLI we need to set the GRPC uri as localhost:9090 (domain + port). Because the protocol\n+        // is decided based on whether security is enabled or not.\n+\n+        // Set the CLI properties.\n+        STATE.set(new AdminCommandState());\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.controller.rest.uri\", \"localhost:\" + REST_SERVER_PORT.toString());\n+        pravegaProperties.setProperty(\"cli.controller.grpc.uri\", \"localhost:\" + CONTROLLER_PORT.toString());\n+        pravegaProperties.setProperty(\"pravegaservice.zk.connect.uri\", localPravega.getInProcPravegaCluster().getZkUrl());\n+        pravegaProperties.setProperty(\"pravegaservice.container.count\", \"4\");\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", Boolean.toString(authEnabled));\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", SecurityConfigDefaults.AUTH_ADMIN_USERNAME);\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        pravegaProperties.setProperty(\"cli.security.tls.enable\", Boolean.toString(tlsEnabled));\n+        pravegaProperties.setProperty(\"cli.security.tls.trustStore.location\", \"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME);\n+\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTY4Mw=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDA5NDg5OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozMDo0NFrOHsJWfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMTozOFrOHtKndQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MjYwNg==", "bodyText": "Please be consistent in how you reference UTF8. Here you use StandardCharset, yet 4 lines above you use a string.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516052606", "createdAt": "2020-11-02T15:30:44Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        SETUP_UTILS.setAuthEnabled(true);\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {\n+        SETUP_UTILS.createTestStream(\"testListScopesCommand\", 2);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(SETUP_UTILS.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeScopeCommand() throws Exception {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListStreamsCommand() throws Exception {\n+        String testStream = \"testListStreamsCommand\";\n+        SETUP_UTILS.createTestStream(testStream, 1);\n+        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + SETUP_UTILS.getScope(), STATE.get());\n+        // Check that the newly created stream is retrieved as part of the list of streams.\n+        Assert.assertTrue(commandResult.contains(testStream));\n+        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListReaderGroupsCommand() throws Exception {\n+        // Check that the system reader group can be listed.\n+        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeReaderGroupCommand() throws Exception {\n+        // Check that the system reader group can be listed.\n+        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeStreamCommand() throws Exception {\n+        String scope = \"testScope\";\n+        String testStream = \"testStream\";\n+        ClientConfig clientConfig = SETUP_UTILS.generateValidClientConfig();\n+\n+        // Generate the scope and stream required for testing.\n+        @Cleanup\n+        StreamManager streamManager = StreamManager.create(clientConfig);\n+        Assert.assertNotNull(streamManager);\n+\n+        boolean isScopeCreated = streamManager.createScope(scope);\n+\n+        // Check if scope created successfully.\n+        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n+\n+        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n+                .scalingPolicy(ScalingPolicy.fixed(1))\n+                .build());\n+\n+        // Check if stream created successfully.\n+        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n+\n+        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n+        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n+        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n+        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n+        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n+        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n+        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n+\n+        // Exercise actual instantiateSegmentHelper\n+        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), STATE.get());\n+        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n+        @Cleanup\n+        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(SETUP_UTILS.getZkTestServer().getConnectString(),\n+                new RetryOneTime(5000));\n+        curatorFramework.start();\n+        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n+\n+        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n+        Properties properties = new Properties();\n+        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n+        STATE.get().getConfigBuilder().include(properties);\n+        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), STATE.get());\n+        new ControllerDescribeStreamCommand(commandArgs).execute();\n+        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n+        STATE.get().getConfigBuilder().include(properties);\n+    }\n+\n+    @Test\n+    public void testAuthConfig() throws Exception {\n+        SETUP_UTILS.createTestStream(\"testListScopesCommand\", 2);\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(SETUP_UTILS.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+        // Restore config\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        // Exercise response codes for REST requests.\n+        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n+        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n+        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n+        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n+    }\n+\n+    static String executeCommand(String inputCommand, AdminCommandState state) throws Exception {\n+        Parser.Command pc = Parser.parse(inputCommand);\n+        Assert.assertNotNull(pc.toString());\n+        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args);\n+        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+            cmd.setOut(ps);\n+            cmd.execute();\n+        }\n+        return new String(baos.toByteArray(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTkwOQ==", "bodyText": "The references are consistent now.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121909", "createdAt": "2020-11-04T06:31:38Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        SETUP_UTILS.setAuthEnabled(true);\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {\n+        SETUP_UTILS.createTestStream(\"testListScopesCommand\", 2);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(SETUP_UTILS.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeScopeCommand() throws Exception {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListStreamsCommand() throws Exception {\n+        String testStream = \"testListStreamsCommand\";\n+        SETUP_UTILS.createTestStream(testStream, 1);\n+        String commandResult = TestUtils.executeCommand(\"controller list-streams \" + SETUP_UTILS.getScope(), STATE.get());\n+        // Check that the newly created stream is retrieved as part of the list of streams.\n+        Assert.assertTrue(commandResult.contains(testStream));\n+        Assert.assertNotNull(ControllerListStreamsInScopeCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListReaderGroupsCommand() throws Exception {\n+        // Check that the system reader group can be listed.\n+        String commandResult = TestUtils.executeCommand(\"controller list-readergroups _system\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+        Assert.assertNotNull(ControllerListReaderGroupsInScopeCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeReaderGroupCommand() throws Exception {\n+        // Check that the system reader group can be listed.\n+        String commandResult = TestUtils.executeCommand(\"controller describe-readergroup _system commitStreamReaders\", STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"commitStreamReaders\"));\n+        Assert.assertNotNull(ControllerDescribeReaderGroupCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeStreamCommand() throws Exception {\n+        String scope = \"testScope\";\n+        String testStream = \"testStream\";\n+        ClientConfig clientConfig = SETUP_UTILS.generateValidClientConfig();\n+\n+        // Generate the scope and stream required for testing.\n+        @Cleanup\n+        StreamManager streamManager = StreamManager.create(clientConfig);\n+        Assert.assertNotNull(streamManager);\n+\n+        boolean isScopeCreated = streamManager.createScope(scope);\n+\n+        // Check if scope created successfully.\n+        Assert.assertTrue(\"Failed to create scope\", isScopeCreated);\n+\n+        boolean isStreamCreated = streamManager.createStream(scope, testStream, StreamConfiguration.builder()\n+                .scalingPolicy(ScalingPolicy.fixed(1))\n+                .build());\n+\n+        // Check if stream created successfully.\n+        Assert.assertTrue(\"Failed to create the stream \", isStreamCreated);\n+\n+        String commandResult = executeCommand(\"controller describe-stream \" + scope + \" \" + testStream, STATE.get());\n+        Assert.assertTrue(commandResult.contains(\"stream_config\"));\n+        Assert.assertTrue(commandResult.contains(\"stream_state\"));\n+        Assert.assertTrue(commandResult.contains(\"segment_count\"));\n+        Assert.assertTrue(commandResult.contains(\"is_sealed\"));\n+        Assert.assertTrue(commandResult.contains(\"active_epoch\"));\n+        Assert.assertTrue(commandResult.contains(\"truncation_record\"));\n+        Assert.assertTrue(commandResult.contains(\"scaling_info\"));\n+\n+        // Exercise actual instantiateSegmentHelper\n+        CommandArgs commandArgs = new CommandArgs(Arrays.asList(scope, testStream), STATE.get());\n+        ControllerDescribeStreamCommand command = new ControllerDescribeStreamCommand(commandArgs);\n+        @Cleanup\n+        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(SETUP_UTILS.getZkTestServer().getConnectString(),\n+                new RetryOneTime(5000));\n+        curatorFramework.start();\n+        Assert.assertNotNull(command.instantiateSegmentHelper(curatorFramework));\n+\n+        // Try the Zookeeper backend, which is expected to fail and be handled by the command.\n+        Properties properties = new Properties();\n+        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.ZOOKEEPER.name());\n+        STATE.get().getConfigBuilder().include(properties);\n+        commandArgs = new CommandArgs(Arrays.asList(scope, testStream), STATE.get());\n+        new ControllerDescribeStreamCommand(commandArgs).execute();\n+        properties.setProperty(\"cli.store.metadata.backend\", CLIControllerConfig.MetadataBackends.SEGMENTSTORE.name());\n+        STATE.get().getConfigBuilder().include(properties);\n+    }\n+\n+    @Test\n+    public void testAuthConfig() throws Exception {\n+        SETUP_UTILS.createTestStream(\"testListScopesCommand\", 2);\n+        Properties pravegaProperties = new Properties();\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"true\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.username\", \"admin\");\n+        pravegaProperties.setProperty(\"cli.security.auth.credentials.password\", \"1111_aaaa\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", STATE.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(SETUP_UTILS.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+        // Restore config\n+        pravegaProperties.setProperty(\"cli.security.auth.enable\", \"false\");\n+        STATE.get().getConfigBuilder().include(pravegaProperties);\n+\n+        // Exercise response codes for REST requests.\n+        CommandArgs commandArgs = new CommandArgs(Collections.emptyList(), new AdminCommandState());\n+        ControllerListScopesCommand command = new ControllerListScopesCommand(commandArgs);\n+        command.printResponseInfo(Response.status(Response.Status.UNAUTHORIZED).build());\n+        command.printResponseInfo(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n+    }\n+\n+    static String executeCommand(String inputCommand, AdminCommandState state) throws Exception {\n+        Parser.Command pc = Parser.parse(inputCommand);\n+        Assert.assertNotNull(pc.toString());\n+        CommandArgs args = new CommandArgs(pc.getArgs(), state);\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        TestingDescribeStreamCommand cmd = new TestingDescribeStreamCommand(args);\n+        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+            cmd.setOut(ps);\n+            cmd.execute();\n+        }\n+        return new String(baos.toByteArray(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MjYwNg=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEwMzA2OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozMjozMFrOHsJbfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMTo0MlrOHtKngg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1Mzg4NA==", "bodyText": "randomize", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516053884", "createdAt": "2020-11-02T15:32:30Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTkyMg==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121922", "createdAt": "2020-11-04T06:31:42Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1Mzg4NA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEwNDA4OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozMjo0M1rOHsJcGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMTo1MFrOHtKnqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDA0MQ==", "bodyText": "same comment about static shared variables.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516054041", "createdAt": "2020-11-02T15:32:43Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMTk2MQ==", "bodyText": "made non-static", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517121961", "createdAt": "2020-11-04T06:31:50Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDA0MQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEwNDc2OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozMjo1MFrOHsJceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMjowNFrOHtKn6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDEzNw==", "bodyText": "final", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516054137", "createdAt": "2020-11-02T15:32:50Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjAyNQ==", "bodyText": "authEnabled and tlsEnabled cannot be final as they will be changed according to the tests in which they are used. Explained above", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122025", "createdAt": "2020-11-04T06:32:04Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDEzNw=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEwNTU3OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozMzowMlrOHsJc7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowNTowN1rOH5RM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDI1NA==", "bodyText": "No sleeping please.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516054254", "createdAt": "2020-11-02T15:33:02Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjA1Ng==", "bodyText": "Will look for another way.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122056", "createdAt": "2020-11-04T06:32:09Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDI1NA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMjcwNw==", "bodyText": "Removed this.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529812707", "createdAt": "2020-11-24T19:05:07Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+\n+    private static final Integer CONTROLLER_PORT = 9090;\n+    private static final Integer SEGMENT_STORE_PORT = 6000;\n+    private static final Integer REST_SERVER_PORT = 9091;\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(120, TimeUnit.SECONDS);\n+\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(CONTROLLER_PORT)\n+                .segmentStorePort(SEGMENT_STORE_PORT)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(REST_SERVER_PORT)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)\n+                    .userName(SecurityConfigDefaults.AUTH_ADMIN_USERNAME)\n+                    .passwd(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD);\n+        }\n+\n+        if (tlsEnabled) {\n+            emulatorBuilder.certFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)\n+                    .keyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_PRIVATE_KEY_FILE_NAME)\n+                    .jksKeyFile(\"../../config/\" + SecurityConfigDefaults.TLS_SERVER_KEYSTORE_NAME)\n+                    .jksTrustFile(\"../../config/\" + SecurityConfigDefaults.TLS_CLIENT_TRUSTSTORE_NAME)\n+                    .keyPasswordFile(\"../../config/\" + SecurityConfigDefaults.TLS_PASSWORD_FILE_NAME);\n+        }\n+\n+        localPravega = emulatorBuilder.build();\n+        localPravega.start();\n+\n+        // Wait for the server to complete start-up.\n+        TimeUnit.SECONDS.sleep(20);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NDI1NA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEyNjUyOnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozNzoxOVrOHsJppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzozMTowMlrOH5zh4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ==", "bodyText": "Make all these fields final. Initialize them in the class constructor, and start the services only when you invoke startAllServices", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516057509", "createdAt": "2020-11-02T15:37:19Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzkwMA==", "bodyText": "Also make this class implement AutoCloseable and in the close method make sure you shut down and close all these services. Otherwise you risk leaving them running in the background when your test is done.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516057900", "createdAt": "2020-11-02T15:37:57Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjA5MA==", "bodyText": "The class implements AutoCloseable and the close method. Will look into making the fields final.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122090", "createdAt": "2020-11-04T06:32:16Z", "author": {"login": "anirudhkovuru"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MTAzMw==", "bodyText": "Ping! Please make the fields final. If you only set them in the constructor, then final is how they should be.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529651033", "createdAt": "2020-11-24T15:39:28Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3NTEzNw==", "bodyText": "I've made all these fields final as suggested.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530375137", "createdAt": "2020-11-25T13:31:02Z", "author": {"login": "anirudhkovuru"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NzUwOQ=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDEzMjc2OnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozODo1M1rOHsJtyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozMjoyN1rOHtKoUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1ODU2OA==", "bodyText": "You never shut this down. You need to keep a pointer to it and close it in your close method.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r516058568", "createdAt": "2020-11-02T15:38:53Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter\n+    private ScheduledExecutorService executor = null;\n+    @Getter\n+    private Controller controller = null;\n+    @Getter\n+    private EventStreamClientFactory clientFactory = null;\n+    private ControllerWrapper controllerWrapper = null;\n+    private PravegaConnectionListener server = null;\n+    @Getter\n+    private TestingServer zkTestServer = null;\n+\n+    @Getter\n+    @Setter\n+    private boolean authEnabled = false;\n+    @Getter\n+    @Setter\n+    private boolean tlsEnabled = false;\n+\n+    // Manage the state of the class.\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+\n+    // The test Scope name.\n+    @Getter\n+    private final String scope = \"scope\";\n+    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n+    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n+    @Getter\n+    private final int servicePort = TestUtils.getAvailableListenPort();\n+    private ClientConfig clientConfig = null;\n+\n+    public ClientConfig generateValidClientConfig() {\n+        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create((this.tlsEnabled ? \"tls\" : \"tcp\") + \"://localhost:\" + controllerRPCPort));\n+        if (this.authEnabled) {\n+            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        if (this.tlsEnabled) {\n+            clientConfigBuilder.trustStore(\"../\" + SecurityConfigDefaults.TLS_CA_CERT_PATH)\n+                    .validateHostName(false);\n+        }\n+        return clientConfigBuilder.build();\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices() throws Exception {\n+        startAllServices(null);\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @param numThreads the number of threads for the internal client threadpool.\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices(Integer numThreads) throws Exception {\n+        if (!this.started.compareAndSet(false, true)) {\n+            log.warn(\"Services already started, not attempting to start again\");\n+            return;\n+        }\n+        this.clientConfig = generateValidClientConfig();\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n+        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n+                executor);\n+        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n+\n+        // Start zookeeper.\n+        this.zkTestServer = new TestingServerStarter().start();\n+        this.zkTestServer.start();\n+\n+        // Start Pravega Service.\n+        ServiceBuilder serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMjEyOA==", "bodyText": "I've added this as a field and close it in the close method", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r517122128", "createdAt": "2020-11-04T06:32:27Z", "author": {"login": "anirudhkovuru"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils {\n+\n+    // The different services.\n+    @Getter\n+    private ScheduledExecutorService executor = null;\n+    @Getter\n+    private Controller controller = null;\n+    @Getter\n+    private EventStreamClientFactory clientFactory = null;\n+    private ControllerWrapper controllerWrapper = null;\n+    private PravegaConnectionListener server = null;\n+    @Getter\n+    private TestingServer zkTestServer = null;\n+\n+    @Getter\n+    @Setter\n+    private boolean authEnabled = false;\n+    @Getter\n+    @Setter\n+    private boolean tlsEnabled = false;\n+\n+    // Manage the state of the class.\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+\n+    // The test Scope name.\n+    @Getter\n+    private final String scope = \"scope\";\n+    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n+    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n+    @Getter\n+    private final int servicePort = TestUtils.getAvailableListenPort();\n+    private ClientConfig clientConfig = null;\n+\n+    public ClientConfig generateValidClientConfig() {\n+        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create((this.tlsEnabled ? \"tls\" : \"tcp\") + \"://localhost:\" + controllerRPCPort));\n+        if (this.authEnabled) {\n+            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        if (this.tlsEnabled) {\n+            clientConfigBuilder.trustStore(\"../\" + SecurityConfigDefaults.TLS_CA_CERT_PATH)\n+                    .validateHostName(false);\n+        }\n+        return clientConfigBuilder.build();\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices() throws Exception {\n+        startAllServices(null);\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @param numThreads the number of threads for the internal client threadpool.\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices(Integer numThreads) throws Exception {\n+        if (!this.started.compareAndSet(false, true)) {\n+            log.warn(\"Services already started, not attempting to start again\");\n+            return;\n+        }\n+        this.clientConfig = generateValidClientConfig();\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n+        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n+                executor);\n+        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n+\n+        // Start zookeeper.\n+        this.zkTestServer = new TestingServerStarter().start();\n+        this.zkTestServer.start();\n+\n+        // Start Pravega Service.\n+        ServiceBuilder serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1ODU2OA=="}, "originalCommit": {"oid": "64aefb5947586ab85025715fe60484460c955c16"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTcxNDEzOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTozNjo1NFrOH5HHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0MToxM1rOH5QVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0NzQ0Nw==", "bodyText": "Do not make these static. Keeping state (available ports is a form of state) in static variables prevents these tests from being run in parallel.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529647447", "createdAt": "2020-11-24T15:36:54Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODU5OA==", "bodyText": "Made these non static.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798598", "createdAt": "2020-11-24T18:41:13Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0NzQ0Nw=="}, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTc0MDk2OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0MDowM1rOH5HY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0MToxMFrOH5QVsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MTkzOA==", "bodyText": "Same here. Do not make this thing static.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529651938", "createdAt": "2020-11-24T15:40:03Z", "author": {"login": "andreipaduroiu"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java", "diffHunk": "@@ -22,28 +23,34 @@\n public abstract class AbstractAdminCommandTest {\n \n     // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODU3Ng==", "bodyText": "Made it non static.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798576", "createdAt": "2020-11-24T18:41:10Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractAdminCommandTest.java", "diffHunk": "@@ -22,28 +23,34 @@\n public abstract class AbstractAdminCommandTest {\n \n     // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n-    protected static final AtomicReference<AdminCommandState> STATE = new AtomicReference<>();\n+    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MTkzOA=="}, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTc1Njc0OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0MTo0N1rOH5Hi6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0MTowOFrOH5QVmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NDUwNA==", "bodyText": "not static", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529654504", "createdAt": "2020-11-24T15:41:47Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODU1NA==", "bodyText": "same", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798554", "createdAt": "2020-11-24T18:41:08Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+\n+    // Security related flags and instantiate local pravega server.\n+    private static final Integer CONTROLLER_PORT = TestUtils.getAvailableListenPort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NDUwNA=="}, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTc2MTU4OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0MjoxOVrOH5HmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0MTowNlrOH5QViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NTMyMQ==", "bodyText": "not static", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529655321", "createdAt": "2020-11-24T15:42:19Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -22,26 +23,32 @@\n public abstract class AbstractUserCommandTest {\n \n     // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODUzNg==", "bodyText": "same", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798536", "createdAt": "2020-11-24T18:41:06Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -22,26 +23,32 @@\n public abstract class AbstractUserCommandTest {\n \n     // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n-    protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n+    protected static final SecureSetupUtils SETUP_UTILS = new SecureSetupUtils();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NTMyMQ=="}, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMTc4MDQyOnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0NDozNlrOH5HysA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0MTowNFrOH5QVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1ODU0NA==", "bodyText": "This is the wrong way to shut down an executor. Use ExecutorServiceHelpers.shutdown(...)", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529658544", "createdAt": "2020-11-24T15:44:36Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils implements AutoCloseable {\n+\n+    // The different services.\n+    @Getter\n+    private ScheduledExecutorService executor = null;\n+    @Getter\n+    private Controller controller = null;\n+    @Getter\n+    private EventStreamClientFactory clientFactory = null;\n+    private ControllerWrapper controllerWrapper = null;\n+    private PravegaConnectionListener server = null;\n+    @Getter\n+    private TestingServer zkTestServer = null;\n+    private ServiceBuilder serviceBuilder = null;\n+\n+    @Getter\n+    @Setter\n+    private boolean authEnabled = false;\n+\n+    // Manage the state of the class.\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+\n+    // The test Scope name.\n+    @Getter\n+    private final String scope = \"scope\";\n+    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n+    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n+    @Getter\n+    private final int servicePort = TestUtils.getAvailableListenPort();\n+    private ClientConfig clientConfig = null;\n+\n+    public ClientConfig generateValidClientConfig() {\n+        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n+        if (this.authEnabled) {\n+            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        return clientConfigBuilder.build();\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices() throws Exception {\n+        startAllServices(null);\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @param numThreads the number of threads for the internal client threadpool.\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices(Integer numThreads) throws Exception {\n+        if (!this.started.compareAndSet(false, true)) {\n+            log.warn(\"Services already started, not attempting to start again\");\n+            return;\n+        }\n+        this.clientConfig = generateValidClientConfig();\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n+        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n+                executor);\n+        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n+\n+        // Start zookeeper.\n+        this.zkTestServer = new TestingServerStarter().start();\n+        this.zkTestServer.start();\n+\n+        // Start Pravega Service.\n+        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+\n+        this.serviceBuilder.initialize();\n+        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n+        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n+                this.serviceBuilder.getLowPriorityExecutor());\n+        this.server.startListening();\n+        log.info(\"Started Pravega Service\");\n+\n+        // Start Controller.\n+        this.controllerWrapper = new ControllerWrapper(\n+                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n+                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n+                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n+        this.controllerWrapper.awaitRunning();\n+        this.controllerWrapper.getController().createScope(scope).get();\n+        log.info(\"Initialized Pravega Controller\");\n+    }\n+\n+    /**\n+     * Stop the pravega cluster and release all resources.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    @Override\n+    public void close() throws Exception {\n+        if (!this.started.compareAndSet(true, false)) {\n+            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n+            return;\n+        }\n+\n+        this.controllerWrapper.close();\n+        this.server.close();\n+        this.zkTestServer.close();\n+        this.serviceBuilder.close();\n+        this.clientFactory.close();\n+        this.controller.close();\n+        this.executor.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5ODUyNg==", "bodyText": "Using the method mentioned above.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r529798526", "createdAt": "2020-11-24T18:41:04Z", "author": {"login": "anirudhkovuru"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.delegationtoken.PassingTokenVerifier;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.host.stat.SegmentStatsRecorder;\n+import io.pravega.segmentstore.server.host.stat.TableSegmentStatsRecorder;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils implements AutoCloseable {\n+\n+    // The different services.\n+    @Getter\n+    private ScheduledExecutorService executor = null;\n+    @Getter\n+    private Controller controller = null;\n+    @Getter\n+    private EventStreamClientFactory clientFactory = null;\n+    private ControllerWrapper controllerWrapper = null;\n+    private PravegaConnectionListener server = null;\n+    @Getter\n+    private TestingServer zkTestServer = null;\n+    private ServiceBuilder serviceBuilder = null;\n+\n+    @Getter\n+    @Setter\n+    private boolean authEnabled = false;\n+\n+    // Manage the state of the class.\n+    private final AtomicBoolean started = new AtomicBoolean(false);\n+\n+    // The test Scope name.\n+    @Getter\n+    private final String scope = \"scope\";\n+    private final int controllerRPCPort = TestUtils.getAvailableListenPort();\n+    private final int controllerRESTPort = TestUtils.getAvailableListenPort();\n+    @Getter\n+    private final int servicePort = TestUtils.getAvailableListenPort();\n+    private ClientConfig clientConfig = null;\n+\n+    public ClientConfig generateValidClientConfig() {\n+        ClientConfig.ClientConfigBuilder clientConfigBuilder = ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerRPCPort));\n+        if (this.authEnabled) {\n+            clientConfigBuilder.credentials(new DefaultCredentials(SecurityConfigDefaults.AUTH_ADMIN_PASSWORD,\n+                    SecurityConfigDefaults.AUTH_ADMIN_USERNAME));\n+        }\n+        return clientConfigBuilder.build();\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices() throws Exception {\n+        startAllServices(null);\n+    }\n+\n+    /**\n+     * Start all pravega related services required for the test deployment.\n+     *\n+     * @param numThreads the number of threads for the internal client threadpool.\n+     * @throws Exception on any errors.\n+     */\n+    public void startAllServices(Integer numThreads) throws Exception {\n+        if (!this.started.compareAndSet(false, true)) {\n+            log.warn(\"Services already started, not attempting to start again\");\n+            return;\n+        }\n+        this.clientConfig = generateValidClientConfig();\n+        this.executor = ExecutorServiceHelpers.newScheduledThreadPool(2, \"Controller pool\");\n+        this.controller = new ControllerImpl(ControllerImplConfig.builder().clientConfig(clientConfig).build(),\n+                executor);\n+        this.clientFactory = new ClientFactoryImpl(scope, controller, clientConfig);\n+\n+        // Start zookeeper.\n+        this.zkTestServer = new TestingServerStarter().start();\n+        this.zkTestServer.start();\n+\n+        // Start Pravega Service.\n+        this.serviceBuilder = ServiceBuilder.newInMemoryBuilder(ServiceBuilderConfig.getDefaultConfig());\n+\n+        this.serviceBuilder.initialize();\n+        StreamSegmentStore store = this.serviceBuilder.createStreamSegmentService();\n+        this.server = new PravegaConnectionListener(false, servicePort, store, this.serviceBuilder.createTableStoreService(),\n+                this.serviceBuilder.getLowPriorityExecutor());\n+        this.server.startListening();\n+        log.info(\"Started Pravega Service\");\n+\n+        // Start Controller.\n+        this.controllerWrapper = new ControllerWrapper(\n+                this.zkTestServer.getConnectString(), false, true, controllerRPCPort, \"localhost\", servicePort,\n+                Config.HOST_STORE_CONTAINER_COUNT, controllerRESTPort, this.authEnabled,\n+                \"../\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_PATH, \"secret\", 600);\n+        this.controllerWrapper.awaitRunning();\n+        this.controllerWrapper.getController().createScope(scope).get();\n+        log.info(\"Initialized Pravega Controller\");\n+    }\n+\n+    /**\n+     * Stop the pravega cluster and release all resources.\n+     *\n+     * @throws Exception on any errors.\n+     */\n+    @Override\n+    public void close() throws Exception {\n+        if (!this.started.compareAndSet(true, false)) {\n+            log.warn(\"Services not yet started or already stopped, not attempting to stop\");\n+            return;\n+        }\n+\n+        this.controllerWrapper.close();\n+        this.server.close();\n+        this.zkTestServer.close();\n+        this.serviceBuilder.close();\n+        this.clientFactory.close();\n+        this.controller.close();\n+        this.executor.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1ODU0NA=="}, "originalCommit": {"oid": "9deb600cfe23a0c1c8f0634ad0dd033f140bfa03"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzU3MjY3OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODowODozNFrOH5-4Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo1Mjo1NVrOH6TyTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA1OA==", "bodyText": "Are you going to resolve this TODO?\nWhat about the commented out code below?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530561058", "createdAt": "2020-11-25T18:08:34Z", "author": {"login": "andreipaduroiu"}, "path": "cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.scope.ScopeCommand;\n+import io.pravega.cli.user.stream.StreamCommand;\n+import io.pravega.shared.NameUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class SecureUserCommandsTest extends AbstractTlsUserCommandTest {\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testCommands() throws Exception {\n+        final String scope = \"SecureTestScope\";\n+        final String streamName = \"SecureTestStream\";\n+        String stream = NameUtils.getScopedStreamName(scope, streamName);\n+        final String tableName = \"SecureKvtTestTable\";\n+        final String table = NameUtils.getScopedStreamName(scope, tableName);\n+\n+        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, config.get());\n+        Assert.assertTrue(\"ScopeCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(ScopeCommand.Create.descriptor());\n+\n+        // List Streams in scope when it is empty.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertFalse(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+\n+        commandResult = TestUtils.executeCommand(\"stream create \" + stream, config.get());\n+        Assert.assertTrue(\"StreamCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(StreamCommand.Create.descriptor());\n+\n+        // List Streams in scope when we have one.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertTrue(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+        Assert.assertNotNull(StreamCommand.List.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Append.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Read.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream delete \" + stream, config.get());\n+        Assert.assertTrue(\"StreamDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n+\n+        // TODO: Test KVT commands in the secure scenario (auth+TLS).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fecaac6f6c54c42f3742720340066bdb1894d39b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5MDQ2Ng==", "bodyText": "@anirudhkovuru please, review the guidelines to add TODOs in the code: https://github.com/pravega/pravega/wiki/Contributing#todos, which requires to add a reference to the issue the TODO is related to.\n@andreipaduroiu  it looks like this test cannot work today due to a bug that ahs been found: #5374. Until the bug is fix, this test cannot work combining Auth+TLS.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530590466", "createdAt": "2020-11-25T19:09:31Z", "author": {"login": "RaulGracia"}, "path": "cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.scope.ScopeCommand;\n+import io.pravega.cli.user.stream.StreamCommand;\n+import io.pravega.shared.NameUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class SecureUserCommandsTest extends AbstractTlsUserCommandTest {\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testCommands() throws Exception {\n+        final String scope = \"SecureTestScope\";\n+        final String streamName = \"SecureTestStream\";\n+        String stream = NameUtils.getScopedStreamName(scope, streamName);\n+        final String tableName = \"SecureKvtTestTable\";\n+        final String table = NameUtils.getScopedStreamName(scope, tableName);\n+\n+        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, config.get());\n+        Assert.assertTrue(\"ScopeCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(ScopeCommand.Create.descriptor());\n+\n+        // List Streams in scope when it is empty.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertFalse(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+\n+        commandResult = TestUtils.executeCommand(\"stream create \" + stream, config.get());\n+        Assert.assertTrue(\"StreamCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(StreamCommand.Create.descriptor());\n+\n+        // List Streams in scope when we have one.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertTrue(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+        Assert.assertNotNull(StreamCommand.List.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Append.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Read.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream delete \" + stream, config.get());\n+        Assert.assertTrue(\"StreamDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n+\n+        // TODO: Test KVT commands in the secure scenario (auth+TLS).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA1OA=="}, "originalCommit": {"oid": "fecaac6f6c54c42f3742720340066bdb1894d39b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMzYzMQ==", "bodyText": "I've removed the commented code and mentioned only the issue.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r530903631", "createdAt": "2020-11-26T09:52:55Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/SecureUserCommandsTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.scope.ScopeCommand;\n+import io.pravega.cli.user.stream.StreamCommand;\n+import io.pravega.shared.NameUtils;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class SecureUserCommandsTest extends AbstractTlsUserCommandTest {\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testCommands() throws Exception {\n+        final String scope = \"SecureTestScope\";\n+        final String streamName = \"SecureTestStream\";\n+        String stream = NameUtils.getScopedStreamName(scope, streamName);\n+        final String tableName = \"SecureKvtTestTable\";\n+        final String table = NameUtils.getScopedStreamName(scope, tableName);\n+\n+        String commandResult = TestUtils.executeCommand(\"scope create \" + scope, config.get());\n+        Assert.assertTrue(\"ScopeCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(ScopeCommand.Create.descriptor());\n+\n+        // List Streams in scope when it is empty.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertFalse(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+\n+        commandResult = TestUtils.executeCommand(\"stream create \" + stream, config.get());\n+        Assert.assertTrue(\"StreamCreateCommand failed.\", commandResult.contains(\"created successfully\"));\n+        Assert.assertNotNull(StreamCommand.Create.descriptor());\n+\n+        // List Streams in scope when we have one.\n+        commandResult = TestUtils.executeCommand(\"stream list \" + scope, config.get());\n+        Assert.assertTrue(\"StreamListCommand failed.\", commandResult.contains(streamName));\n+        Assert.assertNotNull(StreamCommand.List.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Append.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" true 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+\n+        commandResult = TestUtils.executeCommand(\"stream append \" + stream + \" key 100\", config.get());\n+        Assert.assertTrue(\"StreamAppendCommand failed.\", commandResult.contains(\"Done\"));\n+        commandResult = TestUtils.executeCommand(\"stream read \" + stream + \" 5\", config.get());\n+        Assert.assertTrue(\"StreamReadCommand failed.\", commandResult.contains(\"Done\"));\n+        Assert.assertNotNull(StreamCommand.Read.descriptor());\n+\n+        commandResult = TestUtils.executeCommand(\"stream delete \" + stream, config.get());\n+        Assert.assertTrue(\"StreamDeleteCommand failed.\", commandResult.contains(\"deleted successfully\"));\n+        Assert.assertNotNull(StreamCommand.Delete.descriptor());\n+\n+        // TODO: Test KVT commands in the secure scenario (auth+TLS).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MTA1OA=="}, "originalCommit": {"oid": "fecaac6f6c54c42f3742720340066bdb1894d39b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg0MDk1OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyNDozNFrOH6432Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDo0Mjo1OFrOH7-M7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTI1Nw==", "bodyText": "Nit: please, use caps for TLS and finish comments with dot . (see https://github.com/pravega/pravega/wiki/Contributing#codestyle).", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531511257", "createdAt": "2020-11-27T10:24:34Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NzE0OA==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532647148", "createdAt": "2020-11-30T14:42:58Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTI1Nw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg0MTkzOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyNDo1NFrOH644fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzoyMzo1M1rOH7ZIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTQyMg==", "bodyText": "Nit: extra line might be removed.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531511422", "createdAt": "2020-11-27T10:24:54Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NTY1Ng==", "bodyText": "Use the utility we have to do this:\n\n  \n    \n      pravega/common/src/main/java/io/pravega/common/util/CertificateUtils.java\n    \n    \n         Line 89\n      in\n      6acd317\n    \n    \n    \n    \n\n        \n          \n           public static KeyStore createTrustStore(String certFilePath) \n        \n    \n  \n\n\nThis will help us in multiple ways:\n\nAllows us to more easily move to a different format - say from JKS to the PKCS12 format that Java uses by default now.\nAllows us to add additional functionality more easily, such as supporting password-protected truststores.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531545656", "createdAt": "2020-11-27T11:28:46Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTQyMg=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzOTg3NQ==", "bodyText": "Using createTrustStore now.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532039875", "createdAt": "2020-11-28T13:23:53Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMTQyMg=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg1NDU4OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyODoyMVrOH65AIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDo0Mjo0N1rOH7-MXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMzM3OA==", "bodyText": "If any of the previous settings is incorrect and caught on these catch blocks, it looks like we proceed anyway creating the client, right? I suppose that the result will be a non-functional client that won't be useful for the CLI. It is an option, but just want to double check that this is the behavior we want to implement there.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531513378", "createdAt": "2020-11-27T10:28:21Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NjU4NQ==", "bodyText": "Proceeding won't work I suppose. No? @anirudhkovuru what do you say?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531546585", "createdAt": "2020-11-27T11:30:48Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMzM3OA=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NzAwNA==", "bodyText": "I've added a message. Printed the stack trace. I can't throw an exception as I do not want to change the method signature. Instead I return null. Is there a better way than this?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532647004", "createdAt": "2020-11-30T14:42:47Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMzM3OA=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg2NjU3OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMTo0NVrOH65HRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzoyNjowNVrOH7ZJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTIwNw==", "bodyText": "Are these hardcoded values correct on any environment? I mean, the accessTokenTTLInSeconds may be ok (while it could be on a constant variable for clarity), but what about the tokenSigningKey?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531515207", "createdAt": "2020-11-27T10:31:45Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java", "diffHunk": "@@ -72,7 +72,12 @@ public void execute() {\n                 store = StreamStoreFactory.createZKStore(zkClient, executor);\n             } else {\n                 segmentHelper = instantiateSegmentHelper(zkClient);\n-                GrpcAuthHelper authHelper = GrpcAuthHelper.getDisabledAuthHelper();\n+                GrpcAuthHelper authHelper;\n+                if (getCLIControllerConfig().isAuthEnabled()) {\n+                    authHelper = new GrpcAuthHelper(true, \"secret\", 300);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDExNQ==", "bodyText": "tokenSigningKey can be subject to change. I've added a new property in the properties file for this.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040115", "createdAt": "2020-11-28T13:26:05Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerDescribeStreamCommand.java", "diffHunk": "@@ -72,7 +72,12 @@ public void execute() {\n                 store = StreamStoreFactory.createZKStore(zkClient, executor);\n             } else {\n                 segmentHelper = instantiateSegmentHelper(zkClient);\n-                GrpcAuthHelper authHelper = GrpcAuthHelper.getDisabledAuthHelper();\n+                GrpcAuthHelper authHelper;\n+                if (getCLIControllerConfig().isAuthEnabled()) {\n+                    authHelper = new GrpcAuthHelper(true, \"secret\", 300);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTIwNw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg3MjcwOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozMzoyN1rOH65K5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDo0MToyMlrOH7-IGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjEzNQ==", "bodyText": "Are we sure that none of these arguments can be null?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531516135", "createdAt": "2020-11-27T10:33:27Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.utils;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLSession;\n+\n+public class ControllerHostnameVerifier implements HostnameVerifier {\n+    @Override\n+    public boolean verify(String s, SSLSession sslSession) {\n+        return s.equalsIgnoreCase(sslSession.getPeerHost());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NTkxMw==", "bodyText": "This file is not used anymore as the connection to TLS is made through the use of SSLContext instead.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532645913", "createdAt": "2020-11-30T14:41:22Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.utils;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLSession;\n+\n+public class ControllerHostnameVerifier implements HostnameVerifier {\n+    @Override\n+    public boolean verify(String s, SSLSession sslSession) {\n+        return s.equalsIgnoreCase(sslSession.getPeerHost());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNjEzNQ=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg4OTMwOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNToxMFrOH65SsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNToxMFrOH65SsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxODEyOQ==", "bodyText": "Nit: Pravega (starting with caps).", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531518129", "createdAt": "2020-11-27T10:35:10Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzkwMTAwOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDozNjo1NVrOH65YiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzoyNzowNVrOH7ZKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTYyNQ==", "bodyText": "Nit: remove extra blank line.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531519625", "createdAt": "2020-11-27T10:36:55Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDIxOQ==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040219", "createdAt": "2020-11-28T13:27:05Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxOTYyNQ=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzkxODQxOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo0MjowM1rOH65jKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzoyOToyNVrOH7ZK2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyMjM0Nw==", "bodyText": "Why this test is exactly the same as testListScopesCommand() in ControllerCommandsTest.java? The whole point of this structure would be to have the same common tests in both auth and no auth tests, which can be inherited, right? I mean, AbstractAdminCommandTest may implement the \"common\" tests for both auth and no auth tests. Then, if you need some specific tests on either of them, you could implement them in their respective classes. But please, do not duplicate code, as it makes maintenance harder and it provides no benefit.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531522347", "createdAt": "2020-11-27T10:42:03Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDQwOA==", "bodyText": "I've shifted the common tests to a single class so for example all the tests in ControllerCommandsTest.java are run by AuthEnabledControllerCommandsTest.java as it extends ControllerCommandsTest.java. Same changes have been made throughout admin and user cli", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040408", "createdAt": "2020-11-28T13:29:25Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyMjM0Nw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzkzNDc3OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo0Njo0OFrOH65s-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo0Njo0OFrOH65s-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNDg1Ng==", "bodyText": "All this piece of code seems repeated here and in the previous test. Wondering about if we could add this logic in a utility method in testcommon package, which I assume will be available here too.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531524856", "createdAt": "2020-11-27T10:46:48Z", "author": {"login": "RaulGracia"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzk2MzA0OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1NToxNlrOH65-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1NToxNlrOH65-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyOTMxNw==", "bodyText": "All this logic seems similar to what is written in AbstractTlsAdminCommandTest. Is there any possibility to use the same initialization logic for both and embed such a logic in a common place, like SecureSetupUtils.java or any other place? The point is to minimize code duplication.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531529317", "createdAt": "2020-11-27T10:55:16Z", "author": {"login": "RaulGracia"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractTlsUserCommandTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.user;\n+\n+import io.pravega.cli.user.config.InteractiveConfig;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsUserCommandTest {\n+     @Rule\n+     public final Timeout globalTimeout = new Timeout(150, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<InteractiveConfig> config = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .restServerPort(io.pravega.test.common.TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzk3Njg2OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OToyOVrOH66G3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzozMDozNlrOH7ZLQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTQ4Ng==", "bodyText": "Many tests here are the same as in ClusterCommandsTest.java, right? If so, for the tests that are shared between ClusterCommandsTest.java and AuthEnabledControllerCommandsTest, move them to AbstractAdminCommandTest so both classes can inherit them and we can prevent code duplication. Then, the specific tests can be implemented on their respective test classes.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531531486", "createdAt": "2020-11-27T10:59:29Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDUxMw==", "bodyText": "Yeah as explained above now these tests are in ControllerCommandsTest, this file extends it so the tests transfer too.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040513", "createdAt": "2020-11-28T13:30:36Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTQ4Ng=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzk3NzU4OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDo1OTo0MlrOH66HUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzozMDo0NVrOH7ZLTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTYwMw==", "bodyText": "Nit: remove extra blank line.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531531603", "createdAt": "2020-11-27T10:59:42Z", "author": {"login": "RaulGracia"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDUyNg==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040526", "createdAt": "2020-11-28T13:30:45Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUzMTYwMw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDA1MjAwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMToyMzo0NlrOH661Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMToyMzo0NlrOH661Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0MzMxOA==", "bodyText": "These two lines repeat multiple times in this file. Please use something like the following instead:\n\n  \n    \n      pravega/build.gradle\n    \n    \n         Line 172\n      in\n      fc30672\n    \n    \n    \n    \n\n        \n          \n           def withoutLogger = { exclude group: 'org.slf4j', module: 'slf4j-log4j12'", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531543318", "createdAt": "2020-11-27T11:23:46Z", "author": {"login": "ravisharda"}, "path": "build.gradle", "diffHunk": "@@ -777,7 +777,14 @@ project('cli:admin') {\n         compile group: 'org.apache.bookkeeper', name: 'bookkeeper-common', version: bookKeeperVersion\n         compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n         compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n-        testCompile project(':test:integration')\n+        testCompile (project(':test:integration')) {\n+            exclude group: \"com.sun.jersey\", module: \"jersey-core\"\n+            exclude group: \"com.sun.jersey\", module: \"jersey-server\"\n+        }\n+        testCompile (project(':standalone')) {\n+            exclude group: \"com.sun.jersey\", module: \"jersey-core\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDA3NzMzOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTozMjowNVrOH67ESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzozMToxNVrOH7ZLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NzIxMA==", "bodyText": "If auth is enabled, you'll need to specify Credentials too.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531547210", "createdAt": "2020-11-27T11:32:05Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n+            client = ClientBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDU2OQ==", "bodyText": "The credentials are registered in the next lines.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040569", "createdAt": "2020-11-28T13:31:15Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n+            client = ClientBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU0NzIxMA=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDE3MzkwOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjowMjowOVrOH6794g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDo0MDowOFrOH7-EZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MTk1NA==", "bodyText": "Curious, why do you need a custom hostname verifier here? You could use one of the standard ones.\nHere's how we do it in the client (for the call to segment store):\n\n  \n    \n      pravega/client/src/main/java/io/pravega/client/connection/impl/TcpClientConnection.java\n    \n    \n        Lines 243 to 251\n      in\n      899a82d\n    \n    \n    \n    \n\n        \n          \n           if (clientConfig.isValidateHostName()) { \n        \n\n        \n          \n               SSLParameters tlsParams = new SSLParameters(); \n        \n\n        \n          \n            \n        \n\n        \n          \n               // While the connection is to a TCP service and not an HTTP server, we use `HTTPS` as the endpoint \n        \n\n        \n          \n               // identification algorithm, which in turn ensures that the SSLSocket will verify the server's host \n        \n\n        \n          \n               // name during TLS handshake. This is a commonly used way of enabling hostname verification \n        \n\n        \n          \n               // regardless of whether the service itself is HTTP (no in this case). \n        \n\n        \n          \n               tlsParams.setEndpointIdentificationAlgorithm(\"HTTPS\"); \n        \n\n        \n          \n               tlsClientSocket.setSSLParameters(tlsParams);", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531561954", "createdAt": "2020-11-27T12:02:09Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.utils;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLSession;\n+\n+public class ControllerHostnameVerifier implements HostnameVerifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NDk2NQ==", "bodyText": "Instead of having a HostnameVerfier, using SSLContext as suggested.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532644965", "createdAt": "2020-11-30T14:40:08Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/ControllerHostnameVerifier.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.utils;\n+\n+import javax.net.ssl.HostnameVerifier;\n+import javax.net.ssl.SSLSession;\n+\n+public class ControllerHostnameVerifier implements HostnameVerifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MTk1NA=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDE4MTI1OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjowNDozOVrOH68CaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDozOToyOVrOH7-CbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MzExMw==", "bodyText": "The String \"../../config\" gets repeated many times below. Create a String constant and use it here and below.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531563113", "createdAt": "2020-11-27T12:04:39Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(TestUtils.getAvailableListenPort())\n+                .restServerPort(TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NDQ2MQ==", "bodyText": "Stored in a local variable.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532644461", "createdAt": "2020-11-30T14:39:29Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/AbstractTlsAdminCommandTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin;\n+\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.local.LocalPravegaEmulator;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.rules.Timeout;\n+\n+import java.net.URI;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class AbstractTlsAdminCommandTest {\n+\n+    @Rule\n+    public final Timeout globalTimeout = new Timeout(80, TimeUnit.SECONDS);\n+\n+    protected final AtomicReference<AdminCommandState> state = new AtomicReference<>();\n+    protected boolean authEnabled = false;\n+    protected boolean tlsEnabled = false;\n+    LocalPravegaEmulator localPravega;\n+\n+    // Security related flags and instantiate local pravega server.\n+    private final Integer controllerPort = TestUtils.getAvailableListenPort();\n+    private final Integer segmentStorePort = TestUtils.getAvailableListenPort();\n+    private final Integer restServerPort = TestUtils.getAvailableListenPort();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        // Create the secure pravega server to test commands against.\n+        LocalPravegaEmulator.LocalPravegaEmulatorBuilder emulatorBuilder = LocalPravegaEmulator.builder()\n+                .controllerPort(controllerPort)\n+                .segmentStorePort(segmentStorePort)\n+                .zkPort(TestUtils.getAvailableListenPort())\n+                .restServerPort(TestUtils.getAvailableListenPort())\n+                .enableRestServer(true)\n+                .restServerPort(restServerPort)\n+                .enableAuth(authEnabled)\n+                .enableTls(tlsEnabled);\n+\n+        // Since the server is being built right here, avoiding delegating these conditions to subclasses via factory\n+        // methods. This is so that it is easy to see the difference in server configs all in one place. This is also\n+        // unlike the ClientConfig preparation which is being delegated to factory methods to make their preparation\n+        // explicit in the respective test classes.\n+\n+        if (authEnabled) {\n+            emulatorBuilder.passwdFile(\"../../config/\" + SecurityConfigDefaults.AUTH_HANDLER_INPUT_FILE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2MzExMw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDE5MDU4OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjowNzo1M1rOH68IGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNDozOToxMVrOH7-BdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NDU2OQ==", "bodyText": "In general, you should avoid throwing the base Exception. If you must throw, throw the specific exceptions. Here, in the tests, throwing exceptions is meaningless, so you could simplify the code a bit by adding a @SneakyThrows exception, if you will.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531564569", "createdAt": "2020-11-27T12:07:53Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {\n+        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeScopeCommand() throws Exception {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListStreamsCommand() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjY0NDIxMw==", "bodyText": "Using @SneakyThrows now.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532644213", "createdAt": "2020-11-30T14:39:11Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/AuthEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.cli.admin.AbstractAdminCommandTest;\n+import io.pravega.cli.admin.AdminCommandState;\n+import io.pravega.cli.admin.CommandArgs;\n+import io.pravega.cli.admin.Parser;\n+import io.pravega.cli.admin.utils.CLIControllerConfig;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.connection.impl.ConnectionPool;\n+import io.pravega.client.connection.impl.ConnectionPoolImpl;\n+import io.pravega.client.connection.impl.SocketConnectionFactoryImpl;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.Exceptions;\n+import io.pravega.common.cluster.Host;\n+import io.pravega.controller.server.SegmentHelper;\n+import io.pravega.controller.store.client.StoreClientFactory;\n+import io.pravega.controller.store.host.HostControllerStore;\n+import io.pravega.controller.store.host.HostMonitorConfig;\n+import io.pravega.controller.store.host.HostStoreFactory;\n+import io.pravega.controller.store.host.impl.HostMonitorConfigImpl;\n+import io.pravega.controller.util.Config;\n+import lombok.Cleanup;\n+import org.apache.curator.framework.CuratorFramework;\n+import org.apache.curator.framework.CuratorFrameworkFactory;\n+import org.apache.curator.retry.RetryOneTime;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.ws.rs.core.Response;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class AuthEnabledControllerCommandsTest extends AbstractAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        authEnabled = true;\n+        super.setUp();\n+    }\n+\n+\n+    @Test\n+    public void testListScopesCommand() throws Exception {\n+        setupUtils.createTestStream(\"testListScopesCommand\", 2);\n+        String commandResult = TestUtils.executeCommand(\"controller list-scopes\", state.get());\n+        // Check that both the new scope and the system one exist.\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertTrue(commandResult.contains(setupUtils.getScope()));\n+        Assert.assertNotNull(ControllerListScopesCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testDescribeScopeCommand() throws Exception {\n+        String commandResult = TestUtils.executeCommand(\"controller describe-scope _system\", state.get());\n+        Assert.assertTrue(commandResult.contains(\"_system\"));\n+        Assert.assertNotNull(ControllerDescribeStreamCommand.descriptor());\n+    }\n+\n+    @Test\n+    public void testListStreamsCommand() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2NDU2OQ=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDIzMTE4OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyMToxNFrOH68gdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxMzozMjowOVrOH7ZL3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MDgwNw==", "bodyText": "You seem to be using getCLIControllerConfig() multiple times. (The name of that method is misleading - it actually does a bit of processing as opposed to returning a cached value that one'd usually expect from a method having a name starting with get). You might want to call it once, store the value in a variable and reuse it.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531570807", "createdAt": "2020-11-27T12:21:14Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n+            client = ClientBuilder.newBuilder()\n+                    .withConfig(clientConfig)\n+                    .trustStore(ks)\n+                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .build();\n+        } else {\n+            client = ClientBuilder.newClient(clientConfig);\n+        }\n+\n         // If authorization parameters are configured, set them in the client.\n         if (getCLIControllerConfig().isAuthEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA0MDY2OA==", "bodyText": "Moved the return of getCLIControllerConfig() to a single variable which is used everywhere.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r532040668", "createdAt": "2020-11-28T13:32:09Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -50,7 +62,38 @@ protected Context createContext() {\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If tls parameters are configured, set them in client\n+        if (getCLIControllerConfig().isTlsEnabled()) {\n+            KeyStore ks = null;\n+            try {\n+                @Cleanup\n+                InputStream trustStore = new FileInputStream(new File(getCLIControllerConfig().getTruststore()));\n+                ks = KeyStore.getInstance(\"JKS\");\n+                ks.load(trustStore, null);\n+\n+            } catch (KeyStoreException e) {\n+                output(\"The keystore file is invalid, the keystore type is not supported: %s\", e.toString());\n+            } catch (IOException e) {\n+                output(\"The keystore file is invalid, check if the file exists: %s\", e.toString());\n+            } catch (NoSuchAlgorithmException e) {\n+                output(\"The keystore file is invalid, the keystore file might be in the wrong format: %s\", e.toString());\n+            } catch (CertificateException e) {\n+                output(\"The keystore file is invalid, check if the certificates are valid: %s\", e.toString());\n+            }\n+\n+            HostnameVerifier controllerHostnameVerifier = new ControllerHostnameVerifier();\n+            client = ClientBuilder.newBuilder()\n+                    .withConfig(clientConfig)\n+                    .trustStore(ks)\n+                    .hostnameVerifier(controllerHostnameVerifier)\n+                    .build();\n+        } else {\n+            client = ClientBuilder.newClient(clientConfig);\n+        }\n+\n         // If authorization parameters are configured, set them in the client.\n         if (getCLIControllerConfig().isAuthEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MDgwNw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDI1MTE1OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoyNzo1MVrOH68smQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowOTo0NVrOH9fiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MzkxMw==", "bodyText": "This test is too ambitious. It tests multiple behaviors in a single test. If one behavior fails later if something is changed, it'll mask failures in other behaviors. Please refactor this into multiple tests.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r531573913", "createdAt": "2020-11-27T12:27:51Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import io.pravega.cli.admin.AbstractTlsAdminCommandTest;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import lombok.Cleanup;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.UUID;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testAllCommands() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTk5NA==", "bodyText": "Resolved all ambitious tests", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241994", "createdAt": "2020-12-02T15:09:45Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/test/java/io/pravega/cli/admin/controller/TLSEnabledControllerCommandsTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.cli.admin.controller;\n+\n+import io.pravega.cli.admin.AbstractTlsAdminCommandTest;\n+import io.pravega.cli.admin.utils.TestUtils;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import lombok.Cleanup;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.UUID;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TLSEnabledControllerCommandsTest extends AbstractTlsAdminCommandTest {\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        tlsEnabled = true;\n+        super.setUp();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testAllCommands() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU3MzkxMw=="}, "originalCommit": {"oid": "fc306721dddc649295fcd733a9a589f99849363e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUyNjgxOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozMzoxN1rOH9JE2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowOTozMFrOH9fhwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mzg4Mw==", "bodyText": "Please remove printStackTrace.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533873883", "createdAt": "2020-12-02T03:33:17Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTczMA==", "bodyText": "Removed", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241730", "createdAt": "2020-12-02T15:09:30Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3Mzg4Mw=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUyOTU3OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzozNDozOFrOH9JGWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODo1OToyNVrOH-Lpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDI2NQ==", "bodyText": "Without the additional context, it'd be very difficult to debug this issue. Please output the exception message/trace too.\nCurious, why don't we add some logs to these methods too?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533874265", "createdAt": "2020-12-02T03:34:38Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTYyNQ==", "bodyText": "I print the error message.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241625", "createdAt": "2020-12-02T15:09:22Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDI2NQ=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk2NDU5NQ==", "bodyText": "Printing the error message gives feedback to the user who is running the command. Logging'd help customer support/developers debugging issues. So, they'd serve different purposes.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534964595", "createdAt": "2020-12-03T08:59:25Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NDI2NQ=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTU0NTcyOnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzo0MzowMVrOH9JPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowOTowNlrOH9fgbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjUyNw==", "bodyText": "nit: The logic here'll be easier to follow with a slight rearrangement. Something like:\nbuilder = ClientBuilder.newBuilder().withConfig(clientConfig); \nif (tls enabled) {\n     builder.sslContext(...)\n} \nClient client = builder.build(); \n\nif (auth enabled) {\n     // do auth-specific stuff\n}\nClient client = builder.build();", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533876527", "createdAt": "2020-12-02T03:43:01Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n+            }\n+            client = ClientBuilder.newBuilder()\n+                    .withConfig(clientConfig)\n+                    .sslContext(tlsContext)\n+                    .build();\n+        } else {\n+            client = ClientBuilder.newClient(clientConfig);\n+        }\n+\n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MTM5MA==", "bodyText": "Following a pattern like this", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534241390", "createdAt": "2020-12-02T15:09:06Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/controller/ControllerCommand.java", "diffHunk": "@@ -47,14 +58,39 @@\n      * @return REST client.\n      */\n     protected Context createContext() {\n+        CLIControllerConfig config = getCLIControllerConfig();\n         ClientConfig clientConfig = new ClientConfig();\n         clientConfig.register(JacksonJsonProvider.class);\n         clientConfig.property(\"sun.net.http.allowRestrictedHeaders\", \"true\");\n-        Client client = ClientBuilder.newClient(clientConfig);\n+\n+        Client client;\n+\n+        // If TLS parameters are configured, set them in client.\n+        if (config.isTlsEnabled()) {\n+            SSLContext tlsContext;\n+            try {\n+                KeyStore ks = createTrustStore(config.getTruststore());\n+                TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+                tmf.init(ks);\n+                tlsContext = SSLContext.getInstance(\"TLS\");\n+                tlsContext.init(null, tmf.getTrustManagers(), null);\n+            } catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException | KeyManagementException e) {\n+                output(\"Encountered exception while trying to use the given truststore: %s\", config.getTruststore());\n+                e.printStackTrace();\n+                return null;\n+            }\n+            client = ClientBuilder.newBuilder()\n+                    .withConfig(clientConfig)\n+                    .sslContext(tlsContext)\n+                    .build();\n+        } else {\n+            client = ClientBuilder.newClient(clientConfig);\n+        }\n+\n         // If authorization parameters are configured, set them in the client.\n-        if (getCLIControllerConfig().isAuthEnabled()) {\n-            HttpAuthenticationFeature auth = HttpAuthenticationFeature.basic(getCLIControllerConfig().getUserName(),\n-                    getCLIControllerConfig().getPassword());\n+        if (config.isAuthEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NjUyNw=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTU1MzI4OnYy", "diffSide": "RIGHT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzo0Njo0OVrOH9JTZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo1MTo0NVrOH9kgOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NzYwNQ==", "bodyText": "Some of these config names are inconsistent with the scheme we use elsewhere in Pravega. See the following:\n\nConfiguration Naming Guidelines\nExisting examples\n\nHere are the suggested changes:\n\ncontroller.rest.uri -> controller.connect.rest.uri (because it is connecting to the Controller's REST URI)\ncontroller.grpc.uri -> controller.connect.grpc.uri\nsecurity.auth.credentials.username -> controller.connect.credentials.username\nsecurity.auth.credentials.password -> controller.connect.credentials.pwd (we avoid the term password so that scanners and other tools don't get confused)\nsecurity.auth.token.signingKey -- ? (what is this for, here?)\n\nEtc.\nAs for security.auth.enable (and similar items), it indicates you are enabling auth for CLI. If you are using it for specifying that auth be enabled for CLI to controller communication, the config name'd be different.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533877605", "createdAt": "2020-12-02T03:46:49Z", "author": {"login": "ravisharda"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java", "diffHunk": "@@ -24,11 +24,14 @@\n         SEGMENTSTORE, ZOOKEEPER\n     }\n \n-    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"http://localhost:9091\");\n-    private static final Property<String> CONTROLLER_GRPC_URI = Property.named(\"controller.grpc.uri\", \"tcp://localhost:9090\");\n+    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"localhost:9091\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyMzI1Ng==", "bodyText": "I've used the guidelines.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534323256", "createdAt": "2020-12-02T16:51:45Z", "author": {"login": "anirudhkovuru"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/utils/CLIControllerConfig.java", "diffHunk": "@@ -24,11 +24,14 @@\n         SEGMENTSTORE, ZOOKEEPER\n     }\n \n-    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"http://localhost:9091\");\n-    private static final Property<String> CONTROLLER_GRPC_URI = Property.named(\"controller.grpc.uri\", \"tcp://localhost:9090\");\n+    private static final Property<String> CONTROLLER_REST_URI = Property.named(\"controller.rest.uri\", \"localhost:9091\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3NzYwNQ=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTU4NDYzOnYy", "diffSide": "RIGHT", "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDowMzowMlrOH9Jk5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowNzo1MFrOH9fc7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjA4NQ==", "bodyText": "Please avoid using abbreviations like this one. A streamMgr or streamManager'd help reduce the cognitive burden on the person who reads the code. Same for sc below.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533882085", "createdAt": "2020-12-02T04:03:02Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -65,7 +63,7 @@ public Create(@NonNull CommandArgs commandArgs) {\n         public void execute() {\n             ensureMinArgCount(1);\n             @Cleanup\n-            val sm = StreamManager.create(URI.create(getConfig().getControllerUri()));\n+            val sm = StreamManager.create(getClientConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MDQ5Mg==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534240492", "createdAt": "2020-12-02T15:07:50Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -65,7 +63,7 @@ public Create(@NonNull CommandArgs commandArgs) {\n         public void execute() {\n             ensureMinArgCount(1);\n             @Cleanup\n-            val sm = StreamManager.create(URI.create(getConfig().getControllerUri()));\n+            val sm = StreamManager.create(getClientConfig());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjA4NQ=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTU4NTE0OnYy", "diffSide": "RIGHT", "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDowMzoyMlrOH9JlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowNzo0NFrOH9fcsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjE1OA==", "bodyText": "same here.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533882158", "createdAt": "2020-12-02T04:03:22Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -247,7 +245,7 @@ public void execute() {\n             val readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n             val readerId = UUID.randomUUID().toString().replace(\"-\", \"\");\n \n-            val cc = ClientConfig.builder().controllerURI(getControllerUri()).build();\n+            val cc = getClientConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0MDQzNA==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534240434", "createdAt": "2020-12-02T15:07:44Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -247,7 +245,7 @@ public void execute() {\n             val readerGroup = UUID.randomUUID().toString().replace(\"-\", \"\");\n             val readerId = UUID.randomUUID().toString().replace(\"-\", \"\");\n \n-            val cc = ClientConfig.builder().controllerURI(getControllerUri()).build();\n+            val cc = getClientConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjE1OA=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTU4ODI1OnYy", "diffSide": "RIGHT", "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDowNDo0N1rOH9Jm4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDo1Mjo0NVrOH-Tnug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjU5Mw==", "bodyText": "nit: The term factory is a bit abstract. A clientFactory is more precise, and eventStreamClientFactory even more so. In general, variable names should be as precise as possible (for reasons like reducing the work that a code reader needs to perform so that the person may focus more on the logic than the syntax). Here, it's not so much an issue as the factory is used right under this statement, so you may choose to leave it as-is.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r533882593", "createdAt": "2020-12-02T04:04:47Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -183,7 +181,7 @@ public void execute() throws Exception {\n             }\n \n             @Cleanup\n-            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), ClientConfig.builder().controllerURI(getControllerUri()).build());\n+            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), getClientConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NTIyNg==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r535095226", "createdAt": "2020-12-03T10:52:45Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/main/java/io/pravega/cli/user/stream/StreamCommand.java", "diffHunk": "@@ -183,7 +181,7 @@ public void execute() throws Exception {\n             }\n \n             @Cleanup\n-            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), ClientConfig.builder().controllerURI(getControllerUri()).build());\n+            val factory = EventStreamClientFactory.withScope(scopedStream.getScope(), getClientConfig());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MjU5Mw=="}, "originalCommit": {"oid": "275425d3fd8fe4b0f08a590d4deb700fc835d971"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjQ1Njk5OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTowNjo0OFrOH-MZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDo1MjozNFrOH-Tm9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk3NjgyMg==", "bodyText": "nit: Please avoid abbreviations to the extent possible. testCreateKeyValueTable() sounds better. Same for other tests below.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534976822", "createdAt": "2020-12-03T09:06:48Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java", "diffHunk": "@@ -22,7 +23,8 @@\n public class KVTCommandsTest extends AbstractUserCommandTest {\n \n     @Test(timeout = 10000)\n-    public void testCreateKVT() throws Exception {\n+    @SneakyThrows\n+    public void testCreateKVT() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA5NTAzMA==", "bodyText": "done", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r535095030", "createdAt": "2020-12-03T10:52:34Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/kvs/KVTCommandsTest.java", "diffHunk": "@@ -22,7 +23,8 @@\n public class KVTCommandsTest extends AbstractUserCommandTest {\n \n     @Test(timeout = 10000)\n-    public void testCreateKVT() throws Exception {\n+    @SneakyThrows\n+    public void testCreateKVT() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk3NjgyMg=="}, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjQ3Nzk1OnYy", "diffSide": "RIGHT", "path": "config/admin-cli.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTowODo0MFrOH-Mncw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToxNjozNFrOIFVXxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MDQ2Nw==", "bodyText": "What is this used for in CLI?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534980467", "createdAt": "2020-12-03T09:08:40Z", "author": {"login": "ravisharda"}, "path": "config/admin-cli.properties", "diffHunk": "@@ -9,13 +9,16 @@\n #\n \n # Config for CLI credentials (at the moment, Controller auth is only supported).\n-cli.security.auth.enable=false\n-cli.security.auth.credentials.username=admin\n-cli.security.auth.credentials.password=1111_aaaa\n+cli.controller.connect.channel.auth=false\n+cli.controller.connect.channel.tls=false\n+cli.controller.connect.credentials.username=admin\n+cli.controller.connect.credentials.pwd=1111_aaaa\n+cli.controller.connect.delegationToken.signingKey.basis=secret", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk5MTA5Ng==", "bodyText": "When we run the CLI against the standalone in auth scenario, we use this token to set up a StreamMetadataStore.\nIn these lines.\nWe generate an authHelper using the token to make the store.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534991096", "createdAt": "2020-12-03T09:22:21Z", "author": {"login": "anirudhkovuru"}, "path": "config/admin-cli.properties", "diffHunk": "@@ -9,13 +9,16 @@\n #\n \n # Config for CLI credentials (at the moment, Controller auth is only supported).\n-cli.security.auth.enable=false\n-cli.security.auth.credentials.username=admin\n-cli.security.auth.credentials.password=1111_aaaa\n+cli.controller.connect.channel.auth=false\n+cli.controller.connect.channel.tls=false\n+cli.controller.connect.credentials.username=admin\n+cli.controller.connect.credentials.pwd=1111_aaaa\n+cli.controller.connect.delegationToken.signingKey.basis=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MDQ2Nw=="}, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyNTEwNw==", "bodyText": "I still don't understand it. signing key is a server secret, and it is only supposed to be used across the Controller and the Segment Store. Could you please help me understand the intent better?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541825107", "createdAt": "2020-12-13T02:23:59Z", "author": {"login": "ravisharda"}, "path": "config/admin-cli.properties", "diffHunk": "@@ -9,13 +9,16 @@\n #\n \n # Config for CLI credentials (at the moment, Controller auth is only supported).\n-cli.security.auth.enable=false\n-cli.security.auth.credentials.username=admin\n-cli.security.auth.credentials.password=1111_aaaa\n+cli.controller.connect.channel.auth=false\n+cli.controller.connect.channel.tls=false\n+cli.controller.connect.credentials.username=admin\n+cli.controller.connect.credentials.pwd=1111_aaaa\n+cli.controller.connect.delegationToken.signingKey.basis=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MDQ2Nw=="}, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ2Mzk0Mg==", "bodyText": "The signing key was removed, so this issue is resolved.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r542463942", "createdAt": "2020-12-14T15:16:34Z", "author": {"login": "ravisharda"}, "path": "config/admin-cli.properties", "diffHunk": "@@ -9,13 +9,16 @@\n #\n \n # Config for CLI credentials (at the moment, Controller auth is only supported).\n-cli.security.auth.enable=false\n-cli.security.auth.credentials.username=admin\n-cli.security.auth.credentials.password=1111_aaaa\n+cli.controller.connect.channel.auth=false\n+cli.controller.connect.channel.tls=false\n+cli.controller.connect.credentials.username=admin\n+cli.controller.connect.credentials.pwd=1111_aaaa\n+cli.controller.connect.delegationToken.signingKey.basis=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MDQ2Nw=="}, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjQ5MDc2OnYy", "diffSide": "RIGHT", "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOToxMDo0OFrOH-Mvsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNTo0NzoyNVrOIDqGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MjU3OA==", "bodyText": "Please use the ClusterWrapper instead, as it already supports running clusters both with security (TLS and auth) on and off.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r534982578", "createdAt": "2020-12-03T09:10:48Z", "author": {"login": "ravisharda"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils implements AutoCloseable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcwNjMzOA==", "bodyText": "Using the ClusterWrapper now.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r540706338", "createdAt": "2020-12-11T05:47:25Z", "author": {"login": "anirudhkovuru"}, "path": "test/integration/src/main/java/io/pravega/test/integration/utils/SecureSetupUtils.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.integration.utils;\n+\n+import com.google.common.base.Preconditions;\n+import io.pravega.client.ClientConfig;\n+import io.pravega.client.EventStreamClientFactory;\n+import io.pravega.client.admin.ReaderGroupManager;\n+import io.pravega.client.admin.StreamManager;\n+import io.pravega.client.control.impl.Controller;\n+import io.pravega.client.control.impl.ControllerImpl;\n+import io.pravega.client.control.impl.ControllerImplConfig;\n+import io.pravega.client.stream.EventStreamReader;\n+import io.pravega.client.stream.EventStreamWriter;\n+import io.pravega.client.stream.EventWriterConfig;\n+import io.pravega.client.stream.ReaderConfig;\n+import io.pravega.client.stream.ReaderGroupConfig;\n+import io.pravega.client.stream.ScalingPolicy;\n+import io.pravega.client.stream.Stream;\n+import io.pravega.client.stream.StreamConfiguration;\n+import io.pravega.client.stream.impl.ClientFactoryImpl;\n+import io.pravega.client.stream.impl.DefaultCredentials;\n+import io.pravega.common.concurrent.ExecutorServiceHelpers;\n+import io.pravega.controller.util.Config;\n+import io.pravega.segmentstore.contracts.StreamSegmentStore;\n+import io.pravega.segmentstore.server.host.handler.PravegaConnectionListener;\n+import io.pravega.segmentstore.server.store.ServiceBuilder;\n+import io.pravega.segmentstore.server.store.ServiceBuilderConfig;\n+import io.pravega.test.common.SecurityConfigDefaults;\n+import io.pravega.test.common.TestUtils;\n+import io.pravega.test.common.TestingServerStarter;\n+import io.pravega.test.integration.demo.ControllerWrapper;\n+import lombok.Cleanup;\n+import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.curator.test.TestingServer;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.net.URI;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Utility functions for creating the test setup.\n+ */\n+@Slf4j\n+@NotThreadSafe\n+public final class SecureSetupUtils implements AutoCloseable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MjU3OA=="}, "originalCommit": {"oid": "ac8067b0e14bed7dffab81a2c11032d6e3705e0a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMwNzMxOnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowMTo0M1rOIEuNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjozMjozOFrOIFOS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjI2OA==", "bodyText": "Why are you using AtomicReference for CLUSTER and CONFIG?\nSince this CLUSTER variable is static, it will be shared across all classes that use it. This will cause a synchronization issue across different classes that use this or call setUpCluster(). You should instantiate this in the respective classes instead so that you don't prevent tests from different classes from running parallelly. Or, alternatively, you can have the setUpCluster() return a new instance.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541822268", "createdAt": "2020-12-13T02:01:43Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -19,29 +20,33 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0Nzk5Mg==", "bodyText": "As discussed, avoiding the use of AtomicReference.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r542347992", "createdAt": "2020-12-14T12:32:38Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -19,29 +20,33 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjI2OA=="}, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMwOTIyOnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowMzoxM1rOIEuOBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowMzoxM1rOIEuOBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjQ3MA==", "bodyText": "See comment earlier.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541822470", "createdAt": "2020-12-13T02:03:13Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/test/java/io/pravega/cli/user/AbstractUserCommandTest.java", "diffHunk": "@@ -19,29 +20,33 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import static io.pravega.cli.user.TestUtils.createPravegaCluster;\n+import static io.pravega.cli.user.TestUtils.setInteractiveConfig;\n+\n public abstract class AbstractUserCommandTest {\n \n-    // Setup utility.\n-    protected static final SetupUtils SETUP_UTILS = new SetupUtils();\n+    protected static final AtomicReference<ClusterWrapper> CLUSTER = new AtomicReference<>();\n     protected static final AtomicReference<InteractiveConfig> CONFIG = new AtomicReference<>();\n-\n     @Rule\n     public final Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);\n \n+    public static void setUpCluster(boolean authEnabled, boolean tlsEnabled) {\n+        CLUSTER.set(createPravegaCluster(authEnabled, tlsEnabled));\n+        CLUSTER.get().start();\n+        setInteractiveConfig(CLUSTER.get().controllerUri().replace(\"tcp://\", \"\").replace(\"tls://\", \"\"),\n+                authEnabled, tlsEnabled, CONFIG);\n+    }\n+\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        SETUP_UTILS.startAllServices();\n-        InteractiveConfig interactiveConfig = InteractiveConfig.getDefault();\n-        interactiveConfig.setControllerUri(SETUP_UTILS.getControllerUri().toString());\n-        interactiveConfig.setDefaultSegmentCount(4);\n-        interactiveConfig.setMaxListItems(100);\n-        interactiveConfig.setTimeoutMillis(1000);\n-        CONFIG.set(interactiveConfig);\n+    public static void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMxMTUyOnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowNToyM1rOIEuO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowNToyM1rOIEuO_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMjcxNw==", "bodyText": "This assertion of assumption should be done right after the Command is initialized.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541822717", "createdAt": "2020-12-13T02:05:23Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMxNjM4OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowOToyMFrOIEuQ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjowOToyMFrOIEuQ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMzIyOQ==", "bodyText": "nit: this'd be shorter: baos.toString(StandardCharsets.UTF_8)", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541823229", "createdAt": "2020-12-13T02:09:20Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;\n             cmd.setOut(ps);\n             cmd.execute();\n         }\n         return new String(baos.toByteArray(), StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMzMxODE3OnYy", "diffSide": "RIGHT", "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QwMjoxMDo1MFrOIEuRvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjozMjowMlrOIFORgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMzQyMA==", "bodyText": "This and the next two lines are unnecessary if TLS is disabled. Why don't you call them only if TLS is enabled?", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r541823420", "createdAt": "2020-12-13T02:10:50Z", "author": {"login": "ravisharda"}, "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;\n             cmd.setOut(ps);\n             cmd.execute();\n         }\n         return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n     }\n+\n+    /**\n+     * Returns the relative path to `pravega/config` source directory from cli/user tests.\n+     *\n+     * @return the path\n+     */\n+    public static String pathToConfig() {\n+        return \"../../config/\";\n+    }\n+\n+    /**\n+     * Creates a local Pravega cluster to test on using {@link ClusterWrapper}.\n+     *\n+     * @param authEnabled whether accessing the cluster require authentication or not.\n+     * @param tlsEnabled whether accessing the cluster require TLS or not.\n+     * @return A local Pravega cluster\n+     */\n+    public static ClusterWrapper createPravegaCluster(boolean authEnabled, boolean tlsEnabled) {\n+        return ClusterWrapper.builder()\n+                .authEnabled(authEnabled)\n+                .tlsEnabled(tlsEnabled)\n+                .tlsServerCertificatePath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM0NzY1MA==", "bodyText": "Rearranged accordingly.", "url": "https://github.com/pravega/pravega/pull/5250#discussion_r542347650", "createdAt": "2020-12-14T12:32:02Z", "author": {"login": "anirudhkovuru"}, "path": "cli/user/src/test/java/io/pravega/cli/user/TestUtils.java", "diffHunk": "@@ -35,11 +38,60 @@ public static String executeCommand(String inputCommand, InteractiveConfig confi\n         CommandArgs args = new CommandArgs(pc.getArgs().getArgs(), config);\n         Command cmd = Command.Factory.get(pc.getComponent(), pc.getName(), args);\n         final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (PrintStream ps = new PrintStream(baos, true, \"UTF-8\")) {\n+        try (PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8)) {\n             assert cmd != null;\n             cmd.setOut(ps);\n             cmd.execute();\n         }\n         return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n     }\n+\n+    /**\n+     * Returns the relative path to `pravega/config` source directory from cli/user tests.\n+     *\n+     * @return the path\n+     */\n+    public static String pathToConfig() {\n+        return \"../../config/\";\n+    }\n+\n+    /**\n+     * Creates a local Pravega cluster to test on using {@link ClusterWrapper}.\n+     *\n+     * @param authEnabled whether accessing the cluster require authentication or not.\n+     * @param tlsEnabled whether accessing the cluster require TLS or not.\n+     * @return A local Pravega cluster\n+     */\n+    public static ClusterWrapper createPravegaCluster(boolean authEnabled, boolean tlsEnabled) {\n+        return ClusterWrapper.builder()\n+                .authEnabled(authEnabled)\n+                .tlsEnabled(tlsEnabled)\n+                .tlsServerCertificatePath(pathToConfig() + SecurityConfigDefaults.TLS_SERVER_CERT_FILE_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTgyMzQyMA=="}, "originalCommit": {"oid": "ef00bfcefa8e62bb1614113ab5a31cd34f6a4162"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4740, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}