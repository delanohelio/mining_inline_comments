{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NjYwNzM2", "number": 5231, "title": "Issue 5115: Allow reads using read-only permissions", "bodyText": "Change log description\nEnable reads using read-only permissions.\nPurpose of the change\nResolves #5115 (PDP-46), #3872.\nWhat the code does\nHere are the major things that this PR does:\n\nDistinguishes between required and target permissions when generating delegation tokens in the Controller. See this  section of the PDP for more information. For this, three main changes were made:\n\nThe StreamInfo message in Controller's protobuf definition was modified to include a new optional enum field accessOperation in a backward-compatible way.\nController getDelegationToken gRPC operation implementation was modified to make use of the client requested permissions as part of the authorization and delegation token generation process.\nClient classes were modified, so that they specify the requested read/write access operation when requesting the server for delegation tokens.\n\n\nInternal/state synchronizer streams created for reader groups require read permissions, by default. Also, adds a new configuration controller.security.auth.readerGroupStreams.writesWithReadPermissions.enable that determines whether read permissions enable writing to those internal streams - this config defaults to true.\nUses the new resource format specified developed in PR #5051 to authorize writes to reader groups.\nCreate a new shared class to represent access operations. Logically, an access operation represents an operation (like read, write, etc.) that is authorized by a permission (allow, deny, etc.).\nModifies the DelegationTokenProvider and its main implementation JwtTokenProviderImpl to take in Access operation as well, and pass it on during calls to obtain delegation token.\n\nThese are the main changes in Controller gRPC operations:\n\n\n\nS. No.\nController Operation\nPermission required earlier\nPermission Required Now\nRemarks\n\n\n\n\n1.\ngetCurrentSegments\nREAD_UPDATE\nREAD\nDoesn't issue delegation tokens for new clients, although authorizes the call for READ permissions. New clients don't expect delegation tokens in response to this call. This operation continues to authorize and issue delegation tokens with READ_UPDATE for older clients, to maintain backward compatibility.\n\n\n2.\ngetSegments\nREAD_UPDATE\nREAD\nSame as above\n\n\n3.\ngetDelegationToken\nREAD_UPDATE\nREAD or READ_UPDATE\nFor new clients, authorizes and issues tokens for READ or READ_UPDATE depending on the access operation (READ, WRITE, READ_WRITE) specified by the client. For tokens for reader groups, it downgrades required authorization to READ for writes, depending a newly introduced configuration flag. Clients can also specify other permissions - this has been done for future extensibility. If no access operation is specified (older clients won't specify this), it uses READ_UPDATE.\n\n\n\nHere are some ancillary changes that were made to aid the PR:\n\n:shared:security Gradle sub-project was made to compile for the same version as that used for client. This was necessary as a new class was added in the :shared:security sub-project which needed to be used in the client project.\nModifies the ClusterWrapper and ControllerWrapper integration test helpers to use the new Controller config mentioned above.\n\nHow to verify it\nAll unit, integration and system tests must pass.\nI used the following test suites for targeted testing.\nUnit tests:\npackage io.pravega.controller;\n\nimport ...\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({\n        StreamMetaDataAuthFocusedTests.class,\n        ControllerGrpcAuthFocusedTest.class,\n        StreamMetaDataTests.class,\n        SecureStreamMetaDataTests.class,\n        UserSecureStreamMetaDataTests.class,\n        InMemoryControllerServiceImplTest.class,\n        ZKControllerServiceImplTest.class,\n        RESTAuthHelperTest.class,\n        PravegaAuthManagerTest.class,\n        PasswordAuthHandlerTest.class,\n        AclAuthorizerImplTest.class,\n        AuthorizationResourceImplTest.class,\n        SecureLocalControllerTest.class,\n        StreamAuthParamsTest.class,\n})\n\npublic class AuthUnitTestSuite {\n}\nIntegration tests:\npackage io.pravega.test.integration;\n\nimport ....\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({\n        // Client tests\n        ConditionalOutputStreamTest.class,\n        SegmentOutputStreamTest.class,\n        DelegationTokenProviderFactoryTest.class,\n        JwtTokenProviderImplTest.class,\n        EventStreamReaderTest.class,\n        RevisionedStreamClientTest.class,\n        SegmentSelectorTest.class,\n        ConditionalOutputStreamTest.class,\n        AsyncSegmentInputStreamTest.class,\n\n        WireCommandsTest.class,\n\n        // Segment store tests\n        PravegaRequestProcessorAuthFailedTest.class,\n        TokenVerifierImplTest.class,\n        AppendProcessorAuthFailedTest.class,\n        PravegaRequestProcessorAuthFailedTest.class,\n        AppendProcessorTest.class,\n        PravegaRequestProcessorTest.class,\n\n        // Integration tests\n        ControllerGrpcListStreamsTest.class,\n        DelegationTokenTest.class,\n        BatchClientAuthTest.class,\n        AppendTest.class,\n        AppendReconnectTest.class,\n        ReadTest.class,\n})\n\npublic class AuthTestSuite {\n}", "createdAt": "2020-10-05T07:45:07Z", "url": "https://github.com/pravega/pravega/pull/5231", "merged": true, "mergeCommit": {"oid": "1ad51211669ff59a90ca403be823079db6d60720"}, "closed": true, "closedAt": "2020-11-15T15:52:59Z", "author": {"login": "ravisharda"}, "timelineItems": {"totalCount": 129, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYhHbgAFqTUyMTQ1Njk2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcyUXogFqTUzMDgxMDA2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDU2OTYy", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-521456962", "createdAt": "2020-11-02T09:26:23Z", "commit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyNjoyNFrOHr8SNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyNjoyNFrOHr8SNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzODUxNw==", "bodyText": "wouldnt requested permission for older clients be null?\nshould we invert this check to avoid NPE?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515838517", "createdAt": "2020-11-02T09:26:24Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -380,20 +480,35 @@ public void getEpochSegments(GetEpochSegmentsRequest request, StreamObserver<Seg\n \n     @Override\n     public void getSegments(GetSegmentsRequest request, StreamObserver<SegmentsAtTime> responseObserver) {\n-        log.debug(\"getSegments called for stream \" + request.getStreamInfo().getScope() + \"/\" +\n-                request.getStreamInfo().getStream());\n-        authenticateExecuteAndProcessResults(() -> this.grpcAuthHelper.checkAuthorizationAndCreateToken(\n-                authorizationResource.ofStreamInScope(request.getStreamInfo().getScope(),\n-                        request.getStreamInfo().getStream()),\n-                AuthHandler.Permissions.READ_UPDATE),\n-                delegationToken -> {\n-                    logIfEmpty(delegationToken, \"getSegments\", request.getStreamInfo().getScope(),\n-                            request.getStreamInfo().getStream());\n-                    return controllerService.getSegmentsAtHead(request.getStreamInfo().getScope(),\n-                            request.getStreamInfo().getStream())\n+        final StreamInfo streamInfo = request.getStreamInfo();\n+        final String scope = streamInfo.getScope();\n+        final String stream = streamInfo.getStream();\n+        log.debug(\"getSegments called for stream \" + scope + \"/\" + stream);\n+\n+        final boolean isDelegationTokenRequested =\n+                streamInfo.getRequestedPermission().equals(AccessOperation.NONE.toString()) ? false : true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzkyNDk2", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-521392496", "createdAt": "2020-11-02T07:51:07Z", "commit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNzo1MTowN1rOHr5SGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozMzozMlrOHr8jEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc4OTMzOA==", "bodyText": "Does NONE mean that this is requesting a token with the default authorization for the operation (MRP in the PDP)?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515789338", "createdAt": "2020-11-02T07:51:07Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/control/impl/ControllerImpl.java", "diffHunk": "@@ -957,7 +958,7 @@ private Boolean handleScaleResponse(Stream stream, ScaleResponse response, long\n \n         final CompletableFuture<SegmentsAtTime> result = this.retryConfig.runAsync(() -> {\n             RPCAsyncCallback<SegmentsAtTime> callback = new RPCAsyncCallback<>(traceId, \"getSegmentsAtTime\", stream, timestamp);\n-            StreamInfo streamInfo = ModelHelper.createStreamInfo(stream.getScope(), stream.getStreamName());\n+            StreamInfo streamInfo = ModelHelper.createStreamInfo(stream.getScope(), stream.getStreamName(), AccessOperation.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MTQyOQ==", "bodyText": "I don't understand why this mark prefix needs to be made public.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515791429", "createdAt": "2020-11-02T07:55:51Z", "author": {"login": "fpj"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -132,7 +135,7 @@\n     /**\n      * Prefix for identifying system created mark segments for storing watermarks. \n      */\n-    @Getter(AccessLevel.PACKAGE)\n+    @Getter(AccessLevel.PUBLIC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MjM0Mg==", "bodyText": "Although this makes sense, the terminology does not match what is in the PDP. The PDP refers to MRP and RP, which are about permissions, there is no reference to access operations. Perhaps it needs to be reflected in the PDP?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515792342", "createdAt": "2020-11-02T07:57:45Z", "author": {"login": "fpj"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/AccessOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+/**\n+ * Represents an operation that is authorized by a permission (allow, deny, etc.). Currently, permissions\n+ * always 'allow' access to specified access operations in Pravega.\n+ */\n+public enum AccessOperation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5MjU3OA==", "bodyText": "In which cases would I want to grant write permission but not read?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515792578", "createdAt": "2020-11-02T07:58:22Z", "author": {"login": "fpj"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/AccessOperation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+/**\n+ * Represents an operation that is authorized by a permission (allow, deny, etc.). Currently, permissions\n+ * always 'allow' access to specified access operations in Pravega.\n+ */\n+public enum AccessOperation {\n+\n+    /**\n+     * Doesn't represent any specific operation, and allows the caller to make it explicit that any access operation.\n+     * It is primarily meant for use in tests.\n+     */\n+    ANY,\n+\n+    /**\n+     * Represents reads.\n+     */\n+    READ,\n+\n+    /**\n+     * Represents inserts, updates and deletes.\n+     */\n+    WRITE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNDc4NQ==", "bodyText": "I'm wondering whether returning the default permissions is the right thing to do. If the string is illegal and we return the default, then aren't we implicitly assuming that the default is what the caller wants? It might be a better approach to error it out.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515824785", "createdAt": "2020-11-02T09:02:15Z", "author": {"login": "fpj"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/PermissionsHelper.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+/**\n+ * Helper methods for permissions.\n+ */\n+public class PermissionsHelper {\n+\n+    /**\n+     * Translates the specified {@code accessOperation} to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperation accessOperation to translate\n+     * @return a {@link AuthHandler.Permissions} object that represents the specified {@code accessOperation}\n+     */\n+    public static AuthHandler.Permissions toAuthHandlerPermissions(@NonNull AccessOperation accessOperation) {\n+        if (accessOperation.equals(AccessOperation.READ)) {\n+            return AuthHandler.Permissions.READ;\n+        } else if (accessOperation.equals(AccessOperation.WRITE) || accessOperation.equals(AccessOperation.READ_WRITE)) {\n+            return AuthHandler.Permissions.READ_UPDATE;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot translate access operation \" + accessOperation.name());\n+        }\n+    }\n+\n+    /**\n+     * Parse the specified {@code accessOperationStr} string and translate it to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperationStr a string value of an {@link AccessOperation} object\n+     * @param defaultPermissions the default {@link AuthHandler.Permissions} object to return in case the\n+     *                           {@code accessOperationStr} can't be parsed.\n+     * @return the parsed or default {@link AuthHandler.Permissions} object,\n+     */\n+    public static AuthHandler.Permissions parse(String accessOperationStr, AuthHandler.Permissions defaultPermissions) {\n+        if (Strings.isNullOrEmpty(accessOperationStr)) {\n+            return defaultPermissions;\n+        }\n+        try {\n+            return toAuthHandlerPermissions(AccessOperation.valueOf(accessOperationStr));\n+        } catch (IllegalArgumentException e) {\n+            return defaultPermissions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyNzE1NA==", "bodyText": "This feels hacky. Could the delegation token instead contain specific authorization for the internal stream that needs to be written to? This current way is amplifying a read authorization, which I'm not convinced is a good approach.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515827154", "createdAt": "2020-11-02T09:06:45Z", "author": {"login": "fpj"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -146,7 +147,8 @@ public void setupAppend(SetupAppend setupAppend) {\n             try {\n                 JsonWebToken token = tokenVerifier.verifyToken(newSegment,\n                         setupAppend.getDelegationToken(),\n-                        AuthHandler.Permissions.READ_UPDATE);\n+                        newSegment.contains(NameUtils.INTERNAL_STREAM_IDENTIFYING_PATTERN) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNTAxOA==", "bodyText": "Reader Group synchronizer and Mark streams are internal streams, but they have one very important difference. The former is written directly by clients (readers) while the latter is written by the controller. For the Mark stream, what we need to authorize is that controller tracks the requests to note time from the writer, and the writer is already expected to have write access. A reader will only be reading to the Mark stream, not writing to it.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515835018", "createdAt": "2020-11-02T09:20:45Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResourceImpl.java", "diffHunk": "@@ -64,4 +67,15 @@ public String ofKeyValueTableInScope(String scopeName, String keyValueTableName)\n         Exceptions.checkNotNullOrEmpty(keyValueTableName, \"keyValueTableName\");\n         return String.format(\"%s/%s:%s\", ofScope(scopeName), TAG_KEYVALUETABLE, keyValueTableName);\n     }\n+\n+    @Override\n+    public String ofInternalStream(String scopeName, @NonNull String streamName) {\n+        if (streamName.startsWith(NameUtils.READER_GROUP_STREAM_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNTU3Nw==", "bodyText": "... null is equivalent to NONE?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515835577", "createdAt": "2020-11-02T09:21:45Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/control/impl/ModelHelper.java", "diffHunk": "@@ -416,10 +418,18 @@ public static final NodeUri decode(final PravegaNodeUri uri) {\n         return Controller.ScopeInfo.newBuilder().setScope(scope).build();\n     }\n \n-    public static final StreamInfo createStreamInfo(final String scope, final String stream) {\n+    public static final StreamInfo createStreamInfo(final String scope, final String stream, AccessOperation accessOperation) {\n         Exceptions.checkNotNullOrEmpty(scope, \"scope\");\n         Exceptions.checkNotNullOrEmpty(stream, \"stream\");\n-        return StreamInfo.newBuilder().setScope(scope).setStream(stream).build();\n+        StreamInfo.Builder builder = StreamInfo.newBuilder().setScope(scope).setStream(stream);\n+        if (accessOperation != null) {\n+            builder.setRequestedPermission(accessOperation.name());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjM5OQ==", "bodyText": "Typo in th server.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515836399", "createdAt": "2020-11-02T09:23:10Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/security/auth/DelegationTokenProviderFactory.java", "diffHunk": "@@ -35,25 +36,28 @@ public static DelegationTokenProvider createWithEmptyToken() {\n      * @param controller the {@link Controller} client used for obtaining a delegation token from the Controller\n      * @param scopeName the name of the scope tied to the segment, for which a delegation token is to be obtained\n      * @param streamName the name of the stream tied to the segment, for which a delegation token is to be obtained\n+     * @param accessOperation the access operation to use when requesting a delegation token from th server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjUxNw==", "bodyText": "Same typo.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515836517", "createdAt": "2020-11-02T09:23:22Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/security/auth/DelegationTokenProviderFactory.java", "diffHunk": "@@ -35,25 +36,28 @@ public static DelegationTokenProvider createWithEmptyToken() {\n      * @param controller the {@link Controller} client used for obtaining a delegation token from the Controller\n      * @param scopeName the name of the scope tied to the segment, for which a delegation token is to be obtained\n      * @param streamName the name of the stream tied to the segment, for which a delegation token is to be obtained\n+     * @param accessOperation the access operation to use when requesting a delegation token from th server\n      * @return a new {@link DelegationTokenProvider} instance\n      * @throws NullPointerException if {@code controller}, {@code scopeName} or {@code streamName} is null\n      * @throws IllegalArgumentException if {@code scopeName} or {@code streamName} is empty\n      */\n     @VisibleForTesting\n-    public static DelegationTokenProvider create(Controller controller, String scopeName, String streamName) {\n-        return create(null, controller, scopeName, streamName);\n+    public static DelegationTokenProvider create(Controller controller, String scopeName, String streamName,\n+                                                 AccessOperation accessOperation) {\n+        return create(null, controller, scopeName, streamName, accessOperation);\n     }\n \n     /**\n      * Creates a {@link DelegationTokenProvider} instance with null delegation token.\n      *\n      * @param controller the {@link Controller} client used for obtaining a delegation token from the Controller\n      * @param segment the {@link Segment}, for which a delegation token is to be obtained\n+     * @param accessOperation the access operation to use when requesting a delegation token from th server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzOTY4MQ==", "bodyText": "I'm not sure what the use case would be, but a generic one would be that one an application A maintains a table that another application B consumes data from. A read-only table would allow a client only to perform gets on an existing table, while read_update would enable it to perform all operations.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515839681", "createdAt": "2020-11-02T09:28:23Z", "author": {"login": "fpj"}, "path": "client/src/main/java/io/pravega/client/tables/impl/KeyValueTableFactoryImpl.java", "diffHunk": "@@ -38,7 +39,7 @@\n             @NonNull String keyValueTableName, @NonNull Serializer<KeyT> keySerializer,\n             @NonNull Serializer<ValueT> valueSerializer, @NonNull KeyValueTableClientConfiguration clientConfiguration) {\n         val kvt = new KeyValueTableInfo(this.scope, keyValueTableName);\n-        val provider = DelegationTokenProviderFactory.create(this.controller, kvt.getScope(), kvt.getKeyValueTableName());\n+        val provider = DelegationTokenProviderFactory.create(this.controller, kvt.getScope(), kvt.getKeyValueTableName(), AccessOperation.WRITE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwOTE3OQ=="}, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MTAyMg==", "bodyText": "This sounds like a good change, but out of scope and I'd rather not do it silently as part of this PR.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515841022", "createdAt": "2020-11-02T09:30:28Z", "author": {"login": "fpj"}, "path": "client/src/test/resources/logback-test.xml", "diffHunk": "@@ -17,7 +17,7 @@\n         </encoder>\n     </appender>\n \n-    <root level=\"DEBUG\">\n+    <root level=\"INFO\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MjgzNA==", "bodyText": "One major problem I see with configuring it this way is that it will be difficult for a user to understand what to do about it. It is rather counterintuitive and the tradeoffs are not very clear. What would be the argument against always giving write access to the reader group synchronizer stream instead of adding this parameter?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515842834", "createdAt": "2020-11-02T09:33:32Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/GRPCServerConfig.java", "diffHunk": "@@ -95,6 +95,14 @@\n      */\n     Integer getAccessTokenTTLInSeconds();\n \n+    /**\n+     * Indicates whether writes to internal streams are allowed with read permissions. If false, writes to internal\n+     * streams will require write permissions too.\n+     *\n+     * @return Whether writes to internal streams are allowed with read permissions.\n+     */\n+    boolean isInternalWritesWithReadPermEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed3f57f786084ae07c2657d4134507754859e0a5", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ed3f57f786084ae07c2657d4134507754859e0a5", "committedDate": "2020-11-02T09:41:58Z", "message": "Add more tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc1283c13f57ab9e8e42e065a8e4c2a2f10e8a53", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/fc1283c13f57ab9e8e42e065a8e4c2a2f10e8a53", "committedDate": "2020-11-03T02:20:11Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09e3804a218d2dde53460b1e9f7615ce53e143aa", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/09e3804a218d2dde53460b1e9f7615ce53e143aa", "committedDate": "2020-11-05T17:13:02Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11daa62619d48b59369586c0aa8444d7df75359e", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/11daa62619d48b59369586c0aa8444d7df75359e", "committedDate": "2020-11-05T17:17:05Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzM3NTU4", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-525337558", "createdAt": "2020-11-06T17:05:58Z", "commit": {"oid": "11daa62619d48b59369586c0aa8444d7df75359e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzU3MjYy", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-525357262", "createdAt": "2020-11-06T17:32:50Z", "commit": {"oid": "11daa62619d48b59369586c0aa8444d7df75359e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3f3face185c80142eba6cb5e8b2b45389dc3858", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/b3f3face185c80142eba6cb5e8b2b45389dc3858", "committedDate": "2020-11-07T08:08:47Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a53fe7cb659b8237adc0b458baa50d87f5200cb", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/0a53fe7cb659b8237adc0b458baa50d87f5200cb", "committedDate": "2020-11-07T09:36:00Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/9b4cc6a164842869b18986323660cb5b44f9fccc", "committedDate": "2020-11-08T15:07:08Z", "message": "Update access operation\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTE1NjQ3", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-525915647", "createdAt": "2020-11-09T04:23:34Z", "commit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDoyMzozNFrOHveiyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNDoyMzozNFrOHveiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU0NTU0Ng==", "bodyText": "Does this imply that the older client talking to the newer controller server would get default permissions?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r519545546", "createdAt": "2020-11-09T04:23:34Z", "author": {"login": "shrids"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/PermissionsHelper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+import com.google.common.base.Strings;\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+/**\n+ * Helper methods for permissions.\n+ */\n+public class PermissionsHelper {\n+\n+    /**\n+     * Translates the specified {@code accessOperation} to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperation accessOperation to translate\n+     * @return a {@link AuthHandler.Permissions} object that represents the specified {@code accessOperation}\n+     */\n+    public static AuthHandler.Permissions toAuthHandlerPermissions(@NonNull AccessOperation accessOperation) {\n+        if (accessOperation.equals(AccessOperation.READ)) {\n+            return AuthHandler.Permissions.READ;\n+        } else if (accessOperation.equals(AccessOperation.WRITE) || accessOperation.equals(AccessOperation.READ_WRITE)) {\n+            return AuthHandler.Permissions.READ_UPDATE;\n+        } else if (accessOperation.equals(AccessOperation.NONE)) {\n+            return AuthHandler.Permissions.NONE;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot translate access operation \" + accessOperation.name());\n+        }\n+    }\n+\n+    /**\n+     * Parse the specified {@code accessOperationStr} string and translate it to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperationStr a string value of an {@link AccessOperation} object\n+     * @param defaultPermissions the default {@link AuthHandler.Permissions} object to return in case the\n+     *                           {@code accessOperationStr} can't be parsed.\n+     * @return the parsed or default {@link AuthHandler.Permissions} object,\n+     */\n+    public static AuthHandler.Permissions parse(String accessOperationStr, AuthHandler.Permissions defaultPermissions) {\n+        if (Strings.isNullOrEmpty(accessOperationStr)) {\n+            return defaultPermissions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTE5MzIx", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-525919321", "createdAt": "2020-11-09T04:38:46Z", "commit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTI1ODEz", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-525925813", "createdAt": "2020-11-09T05:04:00Z", "commit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNTowNDowMVrOHvfFBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNTowNDowMVrOHvfFBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU1NDMwOQ==", "bodyText": "Would using an enum simplify the code further?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r519554309", "createdAt": "2020-11-09T05:04:01Z", "author": {"login": "shrids"}, "path": "shared/controller-api/src/main/proto/Controller.proto", "diffHunk": "@@ -279,6 +279,7 @@ message ContinuationToken {\n message StreamInfo {\n     string scope = 1;\n     string stream = 2;\n+    string requestedPermission = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTE3MjAw", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-526517200", "createdAt": "2020-11-09T18:04:41Z", "commit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODowNDo0MVrOHv7EYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoxODowNVrOHv7ihw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxMjg5OQ==", "bodyText": "I don't understand this. If shared:security compiles without withoutJaxb then why is it a dependency in the first place?\nIf there is some class that uses it as a runtime dependency and that is not needed by the client, then it should be removed as a dependency and added to the appropriate packages which actually use it.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r520012899", "createdAt": "2020-11-09T18:04:41Z", "author": {"login": "tkaitchuck"}, "path": "build.gradle", "diffHunk": "@@ -271,7 +279,7 @@ project('client') {\n         compile project(':shared:authplugin')\n         compile project(':shared:protocol')\n         compile project(\":shared:controller-api\")\n-\n+        compile project(\":shared:security\"), withoutJaxb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMDYxNQ==", "bodyText": "This conflicts with the fact that / is used a separator between scope and stream.\nWhere is this used?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r520020615", "createdAt": "2020-11-09T18:18:05Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/main/java/io/pravega/shared/NameUtils.java", "diffHunk": "@@ -34,6 +34,9 @@\n     // The prefix which has to be appended to streams created internally for readerGroups.\n     public static final String READER_GROUP_STREAM_PREFIX = INTERNAL_NAME_PREFIX + \"RG\";\n \n+    // The string which may be used to identify whether a segment is part of an internal stream.\n+    public static final String INTERNAL_STREAM_IDENTIFYING_PATTERN = \"/\" + INTERNAL_NAME_PREFIX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2Nzc3NDI3", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-526777427", "createdAt": "2020-11-10T01:09:36Z", "commit": {"oid": "9b4cc6a164842869b18986323660cb5b44f9fccc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e1c2739255ebcef96aa59285d66e19cf89aaf2", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/10e1c2739255ebcef96aa59285d66e19cf89aaf2", "committedDate": "2020-11-10T10:29:09Z", "message": "Change datatype of requestedPermission field in StreamInfo protobuf message to enum (from String)\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba73a05dd381ee6117ecc344cfc2345c9325ebd", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6ba73a05dd381ee6117ecc344cfc2345c9325ebd", "committedDate": "2020-11-10T11:03:13Z", "message": "Include jjwt in the exclude list for client module.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "841c2ab26675345b0dd56a61c1fb0a87fb3bcfbb", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/841c2ab26675345b0dd56a61c1fb0a87fb3bcfbb", "committedDate": "2020-11-10T11:17:04Z", "message": "Remove dead code\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e79911d98d888ea2891c3439a498b4eb9e766b46", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/e79911d98d888ea2891c3439a498b4eb9e766b46", "committedDate": "2020-11-10T12:58:38Z", "message": "Restrict writes to internal streams with read permissions to reader group streams.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73529313335ec6818d8e3c30c2214658b28443dc", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/73529313335ec6818d8e3c30c2214658b28443dc", "committedDate": "2020-11-10T16:44:07Z", "message": "Reduce the scope of 'writes with read permissions' from all types of internal streams to reader group internal streams.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ace93a3e80b2169bc6246d807584d01f71010c8d", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ace93a3e80b2169bc6246d807584d01f71010c8d", "committedDate": "2020-11-11T12:43:12Z", "message": "Prevent clients from fetching delegation tokens containing read_update permissions for mark streams.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTcwNjAx", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-528170601", "createdAt": "2020-11-11T13:28:46Z", "commit": {"oid": "ace93a3e80b2169bc6246d807584d01f71010c8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe8f7f527db3221ecfd39899a7e3281d6ae3b922", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/fe8f7f527db3221ecfd39899a7e3281d6ae3b922", "committedDate": "2020-11-11T16:46:53Z", "message": "Fix backward compatibility issue and remove inadvertant logging of delegation token\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDA2ODM4", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-528406838", "createdAt": "2020-11-11T17:54:33Z", "commit": {"oid": "fe8f7f527db3221ecfd39899a7e3281d6ae3b922"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNzo1NDozNFrOHxYHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDo0MjoyMVrOHxdjqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUzNzI4NA==", "bodyText": "This question somewhat depends on the answer of the previous one. Should we more broadly be checking whether a principal is requesting READ_UPDATE authorization on internal + mark streams? Or are we checking it elsewhere?\nAlso, if delegation tokens generated here are also used by the controller, then are we limiting access to mark streams by the controller?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r521537284", "createdAt": "2020-11-11T17:54:34Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -343,23 +360,136 @@ public void deleteStream(StreamInfo request, StreamObserver<DeleteStreamStatus>\n                 delegationToken -> controllerService.deleteStream(request.getScope(), request.getStream()), responseObserver, requestTag);\n     }\n \n+    private AccessOperation translate(@NonNull StreamInfo.AccessOperation accessOperation) {\n+        return AccessOperation.valueOf(accessOperation.name());\n+    }\n+\n     @Override\n     public void getCurrentSegments(StreamInfo request, StreamObserver<SegmentRanges> responseObserver) {\n-        log.info(\"getCurrentSegments called for stream {}/{}.\", request.getScope(), request.getStream());\n-        authenticateExecuteAndProcessResults(() -> this.grpcAuthHelper.checkAuthorizationAndCreateToken(\n-                authorizationResource.ofStreamInScope(request.getScope(), request.getStream()),\n-                AuthHandler.Permissions.READ_UPDATE),\n-                delegationToken -> {\n-                    logIfEmpty(delegationToken, \"getCurrentSegments\", request.getScope(), request.getStream());\n-                    return controllerService.getCurrentSegments(request.getScope(), request.getStream())\n-                            .thenApply(segmentRanges -> SegmentRanges.newBuilder()\n-                                    .addAllSegmentRanges(segmentRanges)\n-                                    .setDelegationToken(delegationToken)\n-                                    .build());\n+        final String scope = request.getScope();\n+        final String stream = request.getStream();\n+        log.info(\"getCurrentSegments called for stream {}/{}.\", scope, stream);\n+        String resource = StreamAuthParams.toResourceString(scope, stream);\n+\n+        final boolean isDelegationTokenRequested = !request.getAccessOperation().equals(StreamInfo.AccessOperation.NONE);\n+\n+        authenticateExecuteAndProcessResults(() -> {\n+                    if (isDelegationTokenRequested) {\n+                        // For backward compatibility: older clients still depend on delegation tokens generated\n+                        // by this method for both reads and writes.\n+                        return this.grpcAuthHelper.checkAuthorizationAndCreateToken(resource, AuthHandler.Permissions.READ_UPDATE);\n+                    } else {\n+                        return this.grpcAuthHelper.checkAuthorization(resource, AuthHandler.Permissions.READ);\n+                    }\n+                },\n+                authorizationResult -> {\n+                    logIfEmpty(authorizationResult, \"getCurrentSegments\", scope, stream);\n+                    return controllerService.getCurrentSegments(scope, stream)\n+                            .thenApply(segmentRanges -> {\n+                                SegmentRanges.Builder builder = SegmentRanges.newBuilder().addAllSegmentRanges(segmentRanges);\n+                                if (isDelegationTokenRequested) {\n+                                    builder.setDelegationToken(authorizationResult);\n+                                }\n+                                return builder.build();\n+                            });\n                 },\n                 responseObserver);\n     }\n \n+    @VisibleForTesting\n+    public Supplier<String> delegationTokenSupplier(StreamInfo request) {\n+        return () -> {\n+            if (!this.isAuthEnabled()) {\n+                return \"\";\n+            }\n+\n+            StreamAuthParams authParams = new StreamAuthParams(request.getScope(), request.getStream(),\n+                    translate(request.getAccessOperation()), this.isRGStreamWritesWithReadPermEnabled);\n+\n+            // StreamResource will be a stream representation (ex: \"prn:://scope:myScope/stream:_RGmyApp\") of the\n+            // reader group (ex: \"prn:://scope:myScope/reader-group:myApp). We use stream representation in claims\n+            // put in delegation tokens for Segment Store's use, even though we use the regular representation for\n+            // authorization here in the Controller.\n+            String streamResource = authParams.streamResourceString();\n+            String resource = authParams.resourceString();\n+\n+            if (authParams.isAccessOperationUnspecified()) {\n+                // For backward compatibility: Older clients will not send access operation in the request.\n+                log.debug(\"Access operation was unspecified for request with scope {} and stream {}\",\n+                        request.getScope(), request.getStream());\n+\n+                final AuthHandler.Permissions authAndTokenPermission;\n+                if (authParams.isMarkStream()) {\n+                    // Clients are allowed to read from a mark stream, but aren't allowed to write to it. Since the\n+                    // client didn't specify the access operation, we assume here that it intends to read from it.\n+                    authAndTokenPermission = AuthHandler.Permissions.READ;\n+                } else {\n+                    authAndTokenPermission = AuthHandler.Permissions.READ_UPDATE;\n+                }\n+                this.grpcAuthHelper.checkAuthorization(resource, authAndTokenPermission);\n+                return this.grpcAuthHelper.createDelegationToken(streamResource, authAndTokenPermission);\n+            } else {\n+                log.trace(\"Access operation was {} for request with scope {} and stream {}\",\n+                        translate(request.getAccessOperation()), request.getScope(), request.getStream());\n+\n+                // The resource string that'll be used in the delegation token for use of the segment store\n+                final String tokenResource;\n+\n+                // The operation that'll be specified as granted for the resource in the token. The bearer of the token\n+                // will be allowed to perform the specified operation.\n+                final AuthHandler.Permissions tokenPermission;\n+\n+                // This is the permission that the client is requesting to be assigned on the delegation token.\n+                AuthHandler.Permissions requestedPermissions = authParams.requestedPermission();\n+\n+                if (authParams.isStreamUserDefined()) {\n+                    // The operation itself requires the caller to possess read permissions.\n+                    AuthHandler.Permissions minimumPermissions = AuthHandler.Permissions.READ;\n+\n+                    if (requestedPermissions.equals(AuthHandler.Permissions.READ_UPDATE) ||\n+                            requestedPermissions.equals(minimumPermissions)) {\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, requestedPermissions);\n+                        tokenResource = streamResource;\n+                        tokenPermission = requestedPermissions;\n+                    } else {\n+                        // The minimum permission that the user must have to be able to invoke this call. This\n+                        // authorizes the operation.\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, minimumPermissions);\n+\n+                        // Here, we check whether the user is authorized for the requested access.\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, requestedPermissions);\n+                        tokenResource = streamResource;\n+                        tokenPermission = requestedPermissions;\n+                    }\n+                } else {\n+                    final AuthHandler.Permissions authorizationPermission;\n+                    if (requestedPermissions.equals(AuthHandler.Permissions.READ_UPDATE)) {\n+                        // Clients have no business requesting for delegation tokens with write permissions for\n+                        // mark streams. Clients are allowed to read from a mark stream, but aren't allowed to write to\n+                        // it. (Only Controller writes to it.)\n+                        if (authParams.isMarkStream()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8f7f527db3221ecfd39899a7e3281d6ae3b922"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyNjUzOA==", "bodyText": "This else block starting at line 464 is about internal streams. Are the tokens produced here both for the use of application clients and the controller? For application clients, is there a case in which we want to authorize them to read from internal streams that are not mark streams,(e.g., streams the controller use with its workflows)? Is it for some debug or recovery scenario?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r521626538", "createdAt": "2020-11-11T20:42:21Z", "author": {"login": "fpj"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -343,23 +360,136 @@ public void deleteStream(StreamInfo request, StreamObserver<DeleteStreamStatus>\n                 delegationToken -> controllerService.deleteStream(request.getScope(), request.getStream()), responseObserver, requestTag);\n     }\n \n+    private AccessOperation translate(@NonNull StreamInfo.AccessOperation accessOperation) {\n+        return AccessOperation.valueOf(accessOperation.name());\n+    }\n+\n     @Override\n     public void getCurrentSegments(StreamInfo request, StreamObserver<SegmentRanges> responseObserver) {\n-        log.info(\"getCurrentSegments called for stream {}/{}.\", request.getScope(), request.getStream());\n-        authenticateExecuteAndProcessResults(() -> this.grpcAuthHelper.checkAuthorizationAndCreateToken(\n-                authorizationResource.ofStreamInScope(request.getScope(), request.getStream()),\n-                AuthHandler.Permissions.READ_UPDATE),\n-                delegationToken -> {\n-                    logIfEmpty(delegationToken, \"getCurrentSegments\", request.getScope(), request.getStream());\n-                    return controllerService.getCurrentSegments(request.getScope(), request.getStream())\n-                            .thenApply(segmentRanges -> SegmentRanges.newBuilder()\n-                                    .addAllSegmentRanges(segmentRanges)\n-                                    .setDelegationToken(delegationToken)\n-                                    .build());\n+        final String scope = request.getScope();\n+        final String stream = request.getStream();\n+        log.info(\"getCurrentSegments called for stream {}/{}.\", scope, stream);\n+        String resource = StreamAuthParams.toResourceString(scope, stream);\n+\n+        final boolean isDelegationTokenRequested = !request.getAccessOperation().equals(StreamInfo.AccessOperation.NONE);\n+\n+        authenticateExecuteAndProcessResults(() -> {\n+                    if (isDelegationTokenRequested) {\n+                        // For backward compatibility: older clients still depend on delegation tokens generated\n+                        // by this method for both reads and writes.\n+                        return this.grpcAuthHelper.checkAuthorizationAndCreateToken(resource, AuthHandler.Permissions.READ_UPDATE);\n+                    } else {\n+                        return this.grpcAuthHelper.checkAuthorization(resource, AuthHandler.Permissions.READ);\n+                    }\n+                },\n+                authorizationResult -> {\n+                    logIfEmpty(authorizationResult, \"getCurrentSegments\", scope, stream);\n+                    return controllerService.getCurrentSegments(scope, stream)\n+                            .thenApply(segmentRanges -> {\n+                                SegmentRanges.Builder builder = SegmentRanges.newBuilder().addAllSegmentRanges(segmentRanges);\n+                                if (isDelegationTokenRequested) {\n+                                    builder.setDelegationToken(authorizationResult);\n+                                }\n+                                return builder.build();\n+                            });\n                 },\n                 responseObserver);\n     }\n \n+    @VisibleForTesting\n+    public Supplier<String> delegationTokenSupplier(StreamInfo request) {\n+        return () -> {\n+            if (!this.isAuthEnabled()) {\n+                return \"\";\n+            }\n+\n+            StreamAuthParams authParams = new StreamAuthParams(request.getScope(), request.getStream(),\n+                    translate(request.getAccessOperation()), this.isRGStreamWritesWithReadPermEnabled);\n+\n+            // StreamResource will be a stream representation (ex: \"prn:://scope:myScope/stream:_RGmyApp\") of the\n+            // reader group (ex: \"prn:://scope:myScope/reader-group:myApp). We use stream representation in claims\n+            // put in delegation tokens for Segment Store's use, even though we use the regular representation for\n+            // authorization here in the Controller.\n+            String streamResource = authParams.streamResourceString();\n+            String resource = authParams.resourceString();\n+\n+            if (authParams.isAccessOperationUnspecified()) {\n+                // For backward compatibility: Older clients will not send access operation in the request.\n+                log.debug(\"Access operation was unspecified for request with scope {} and stream {}\",\n+                        request.getScope(), request.getStream());\n+\n+                final AuthHandler.Permissions authAndTokenPermission;\n+                if (authParams.isMarkStream()) {\n+                    // Clients are allowed to read from a mark stream, but aren't allowed to write to it. Since the\n+                    // client didn't specify the access operation, we assume here that it intends to read from it.\n+                    authAndTokenPermission = AuthHandler.Permissions.READ;\n+                } else {\n+                    authAndTokenPermission = AuthHandler.Permissions.READ_UPDATE;\n+                }\n+                this.grpcAuthHelper.checkAuthorization(resource, authAndTokenPermission);\n+                return this.grpcAuthHelper.createDelegationToken(streamResource, authAndTokenPermission);\n+            } else {\n+                log.trace(\"Access operation was {} for request with scope {} and stream {}\",\n+                        translate(request.getAccessOperation()), request.getScope(), request.getStream());\n+\n+                // The resource string that'll be used in the delegation token for use of the segment store\n+                final String tokenResource;\n+\n+                // The operation that'll be specified as granted for the resource in the token. The bearer of the token\n+                // will be allowed to perform the specified operation.\n+                final AuthHandler.Permissions tokenPermission;\n+\n+                // This is the permission that the client is requesting to be assigned on the delegation token.\n+                AuthHandler.Permissions requestedPermissions = authParams.requestedPermission();\n+\n+                if (authParams.isStreamUserDefined()) {\n+                    // The operation itself requires the caller to possess read permissions.\n+                    AuthHandler.Permissions minimumPermissions = AuthHandler.Permissions.READ;\n+\n+                    if (requestedPermissions.equals(AuthHandler.Permissions.READ_UPDATE) ||\n+                            requestedPermissions.equals(minimumPermissions)) {\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, requestedPermissions);\n+                        tokenResource = streamResource;\n+                        tokenPermission = requestedPermissions;\n+                    } else {\n+                        // The minimum permission that the user must have to be able to invoke this call. This\n+                        // authorizes the operation.\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, minimumPermissions);\n+\n+                        // Here, we check whether the user is authorized for the requested access.\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, requestedPermissions);\n+                        tokenResource = streamResource;\n+                        tokenPermission = requestedPermissions;\n+                    }\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8f7f527db3221ecfd39899a7e3281d6ae3b922"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTg2ODE5", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-529586819", "createdAt": "2020-11-12T23:31:15Z", "commit": {"oid": "fe8f7f527db3221ecfd39899a7e3281d6ae3b922"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab612c31adc9a6d870bf7c6894f4044c4179437", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/1ab612c31adc9a6d870bf7c6894f4044c4179437", "committedDate": "2020-11-13T03:16:06Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f920058591b78dc7efafc56bdca1059a5b70c810", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/f920058591b78dc7efafc56bdca1059a5b70c810", "committedDate": "2020-11-14T01:54:48Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODEwMDYy", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-530810062", "createdAt": "2020-11-15T15:44:37Z", "commit": {"oid": "f920058591b78dc7efafc56bdca1059a5b70c810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df74633b134444482a4db2cbbd52153918fa2453", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/df74633b134444482a4db2cbbd52153918fa2453", "committedDate": "2020-07-27T10:37:08Z", "message": "Refactor PasswordAuthHandler for unit testing\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9036ad8f7d3d5a5d695306096317355b66eea3a", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/e9036ad8f7d3d5a5d695306096317355b66eea3a", "committedDate": "2020-07-27T10:37:37Z", "message": "Add unit tests for PasswordAuthHandler\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "854d652dc4c73de8d11d1290d53d5916bd044711", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/854d652dc4c73de8d11d1290d53d5916bd044711", "committedDate": "2020-07-27T11:24:42Z", "message": "Add initial set of authorization-related tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7afb4ac3b243eb0b6c6c031e279d54ac80f4f058", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/7afb4ac3b243eb0b6c6c031e279d54ac80f4f058", "committedDate": "2020-08-04T05:56:38Z", "message": "Refactoring and reorganization of Handler code\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f0f0fbb45612e5c4a0c12be3a99df1f3e9ada2", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/77f0f0fbb45612e5c4a0c12be3a99df1f3e9ada2", "committedDate": "2020-08-05T03:00:43Z", "message": "Refactoring and reorganization\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4d55a3632383bd0e8db92d2b876271e0815e75", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ee4d55a3632383bd0e8db92d2b876271e0815e75", "committedDate": "2020-08-05T10:18:04Z", "message": "Save partial work\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "195becc1608d80b07ae2aabf7b926bf574194a33", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/195becc1608d80b07ae2aabf7b926bf574194a33", "committedDate": "2020-08-06T10:49:55Z", "message": "Remove support for old format in Auth Handler\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c32f1c94ea4259526cbae0b859caba520cda83c", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/4c32f1c94ea4259526cbae0b859caba520cda83c", "committedDate": "2020-08-07T08:34:11Z", "message": "Finish up new ACL implmenetation and tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82284afff3044a9ed791891213cef0b34de8e83a", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/82284afff3044a9ed791891213cef0b34de8e83a", "committedDate": "2020-08-07T09:10:48Z", "message": "Update Controller API tests to use new ACL format\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a74dc5050a3cd3569214a6aaa622c89fccefd3b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/2a74dc5050a3cd3569214a6aaa622c89fccefd3b", "committedDate": "2020-08-10T04:08:29Z", "message": "Fix for tests and a bug in TestAuthhandler service config\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfba3a80baeb2df930e05d34f5a0bdfd3d4eb581", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/dfba3a80baeb2df930e05d34f5a0bdfd3d4eb581", "committedDate": "2020-08-10T08:43:09Z", "message": "Fix Auth manager tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd4e727cf05edf44d3877c7a16c2282f96e2223", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3fd4e727cf05edf44d3877c7a16c2282f96e2223", "committedDate": "2020-08-10T08:53:42Z", "message": "Use structured utility method to compose an auth file entry\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd6c4a25f8070bd9406765bf93f00d5b37c0698", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/bcd6c4a25f8070bd9406765bf93f00d5b37c0698", "committedDate": "2020-08-10T10:48:04Z", "message": "Merge branch 'master' into auth-resources-permissions\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1a69534502e32b62778b39ed2961cc558e076c", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/8d1a69534502e32b62778b39ed2961cc558e076c", "committedDate": "2020-08-11T04:33:25Z", "message": "Fix compilation issues after merge\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7217a5d504041f7d3e4d5d5657983cefef06eb33", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/7217a5d504041f7d3e4d5d5657983cefef06eb33", "committedDate": "2020-08-12T01:26:55Z", "message": "Modify claimKey to match Segment Store format\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab1b9e67d62d420ca7fbf3ba368dd68217c4b9a5", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ab1b9e67d62d420ca7fbf3ba368dd68217c4b9a5", "committedDate": "2020-08-12T01:27:27Z", "message": "Revert standalone mode config\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64317b94f2b9c90d7fb6d4fdede50d06522bc2f", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/e64317b94f2b9c90d7fb6d4fdede50d06522bc2f", "committedDate": "2020-08-12T03:23:27Z", "message": "Modify remaining test classes to use new resource format\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8dbfc683ed78b4c1104a06078a04402a159f8dd", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/b8dbfc683ed78b4c1104a06078a04402a159f8dd", "committedDate": "2020-08-12T04:43:44Z", "message": "Modify remaining test classes to use new resource format\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2ff0ef331b55d718f8378f135328ad5ac942b4", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ee2ff0ef331b55d718f8378f135328ad5ac942b4", "committedDate": "2020-08-12T09:57:19Z", "message": "Cleanup and add tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a000a66776c32c3e475cfd7671eca45a1fbb5b69", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a000a66776c32c3e475cfd7671eca45a1fbb5b69", "committedDate": "2020-08-14T09:13:04Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e2196ae352b37497b658da5cc725918172aa82f", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/4e2196ae352b37497b658da5cc725918172aa82f", "committedDate": "2020-08-17T02:11:14Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a459ca0275089b845832c1aac7460f9241ed1462", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a459ca0275089b845832c1aac7460f9241ed1462", "committedDate": "2020-08-17T08:13:55Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63b6c65df46adc77db50e1d6da80799adb8a503a", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/63b6c65df46adc77db50e1d6da80799adb8a503a", "committedDate": "2020-08-17T08:15:12Z", "message": "Merge remote-tracking branch 'origin/auth-resources-permissions' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060e8d6546291991fc7b6d66970687de9f25cfd3", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/060e8d6546291991fc7b6d66970687de9f25cfd3", "committedDate": "2020-08-18T02:40:58Z", "message": "Push replacement of `*` with `.*` in resource patterns from authorization time to ACE construction time\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d507b9b025950730d0fd61a05d25e793b65207", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/97d507b9b025950730d0fd61a05d25e793b65207", "committedDate": "2020-08-19T03:34:49Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "095cfed037b8bef930c5d8dc939bc495de4623c5", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/095cfed037b8bef930c5d8dc939bc495de4623c5", "committedDate": "2020-08-19T06:06:50Z", "message": "Optimize resource parts replacement\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a12909f647b3af7c6759d4560211165b38a3c8b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/1a12909f647b3af7c6759d4560211165b38a3c8b", "committedDate": "2020-08-19T06:27:03Z", "message": "Merge remote-tracking branch 'origin/auth-resources-permissions' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436cfc6991f01911098c1f2860b620734d5f65af", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/436cfc6991f01911098c1f2860b620734d5f65af", "committedDate": "2020-08-21T04:50:41Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6f00e86ff45a164bac6615c23c5091ddc43bde9", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/d6f00e86ff45a164bac6615c23c5091ddc43bde9", "committedDate": "2020-08-26T15:28:04Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1051184bd9337e3f27d10f3a4a551a4c1fa0cb8", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a1051184bd9337e3f27d10f3a4a551a4c1fa0cb8", "committedDate": "2020-08-27T10:09:10Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f432d3f5b2890a47bfd4ac57c58a39583639f839", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/f432d3f5b2890a47bfd4ac57c58a39583639f839", "committedDate": "2020-08-31T03:42:26Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8e0a328341add09a24fd4a64e00106ceeac86d", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3d8e0a328341add09a24fd4a64e00106ceeac86d", "committedDate": "2020-08-31T04:14:57Z", "message": "Add a test\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b0c21aa111a30eb4a156be484e502db13108363", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3b0c21aa111a30eb4a156be484e502db13108363", "committedDate": "2020-09-01T11:03:08Z", "message": "Initial changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85e2852eb4b67ad9a604597def02fa3d2f3d0f0", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/e85e2852eb4b67ad9a604597def02fa3d2f3d0f0", "committedDate": "2020-09-01T12:17:35Z", "message": "Add a test\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc6f35ff16b9fb62e3ecaa4c7cf7b00b6bf7353", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/fcc6f35ff16b9fb62e3ecaa4c7cf7b00b6bf7353", "committedDate": "2020-09-02T05:46:27Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d452e3a562c0672ce9ead5d8f2aa5615c549a16", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/7d452e3a562c0672ce9ead5d8f2aa5615c549a16", "committedDate": "2020-09-02T06:49:22Z", "message": "Add a test\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bb8e0f7d24a47e934271349f8d69a61017216f9", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/7bb8e0f7d24a47e934271349f8d69a61017216f9", "committedDate": "2020-09-02T06:51:15Z", "message": "Save temporary work\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/9f868b5acf8b7c5462ac5092c9fe3ef32a36f1b5", "committedDate": "2020-09-02T08:15:54Z", "message": "Changes to fix compilation issues after merge from master\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9fbb2112859db5ee7af866195bec6ed0eacf89", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3b9fbb2112859db5ee7af866195bec6ed0eacf89", "committedDate": "2020-09-02T09:23:11Z", "message": "Merge remote-tracking branch 'origin/auth-resources-permissions' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd5b809233b14d0735d58fd0c04a5f831f2405ca", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/dd5b809233b14d0735d58fd0c04a5f831f2405ca", "committedDate": "2020-09-02T10:07:30Z", "message": "Save intermediate changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f053512c0254879d25e866a2917344c7f3c995cc", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/f053512c0254879d25e866a2917344c7f3c995cc", "committedDate": "2020-09-04T03:34:56Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22d0368582a8a1af06280f78aae24c4b8ff63498", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/22d0368582a8a1af06280f78aae24c4b8ff63498", "committedDate": "2020-09-08T09:46:28Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc25cd9f06ce657f73e40bb535395cdeff55ce1c", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/cc25cd9f06ce657f73e40bb535395cdeff55ce1c", "committedDate": "2020-09-09T07:18:04Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88be4769834ebaedd19446d31cfee7764f26afeb", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/88be4769834ebaedd19446d31cfee7764f26afeb", "committedDate": "2020-09-09T07:58:24Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0086b5173f6b624e9a3d55d98d7bd23440c3d93", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/c0086b5173f6b624e9a3d55d98d7bd23440c3d93", "committedDate": "2020-09-10T03:54:33Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a195a3244b8ad8a0f5bbe8ec57439ad610b19145", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a195a3244b8ad8a0f5bbe8ec57439ad610b19145", "committedDate": "2020-09-11T04:49:52Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0942c4ba4e056b81136c4cecda07d3dcd4c5307f", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/0942c4ba4e056b81136c4cecda07d3dcd4c5307f", "committedDate": "2020-09-11T04:50:13Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b8f820f8e15f542949055eeb0c67cc14cd3236", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/72b8f820f8e15f542949055eeb0c67cc14cd3236", "committedDate": "2020-09-11T10:35:59Z", "message": "Merge branch 'master' into auth-resources-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d13674fdd66b9e954abc9d574d0d0132b363ef89", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/d13674fdd66b9e954abc9d574d0d0132b363ef89", "committedDate": "2020-09-14T09:46:28Z", "message": "Save intermediate changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2754590d501bf045c4ca7c5a3c164785a889530", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/c2754590d501bf045c4ca7c5a3c164785a889530", "committedDate": "2020-09-14T09:52:05Z", "message": "Merge branch 'auth-resources-permissions' of https://github.com/ravisharda/pravega into issue-5115-reads-using-read-permissions\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5239db13c33ca150c6e0265ae0b79d7935dc1b1c", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/5239db13c33ca150c6e0265ae0b79d7935dc1b1c", "committedDate": "2020-09-16T05:35:27Z", "message": "Specify access operation for client calls to fetch delegation token\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca54e60caab53f650f36cd29ff86b51f8d1ff54b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ca54e60caab53f650f36cd29ff86b51f8d1ff54b", "committedDate": "2020-09-16T07:50:23Z", "message": "Prevent NPE\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027c415b8398ecab0eeeb2b3a0ede1c47fd067c9", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/027c415b8398ecab0eeeb2b3a0ede1c47fd067c9", "committedDate": "2020-09-16T15:56:15Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5115-reads-using-read-permissions\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a3a0cab81f605197b49a0e377919c5eb68ff803", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/7a3a0cab81f605197b49a0e377919c5eb68ff803", "committedDate": "2020-09-17T04:03:20Z", "message": "Fix fallouts from merge with master\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d94affe427d304acdbb7ef9bc428e768913360", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/68d94affe427d304acdbb7ef9bc428e768913360", "committedDate": "2020-09-30T15:55:54Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5115-reads-using-read-permissions\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1c686d0a296b6f3fadb7c3e01e690da04f1212", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/8f1c686d0a296b6f3fadb7c3e01e690da04f1212", "committedDate": "2020-10-05T04:26:10Z", "message": "Merge remote-tracking branch 'origin/master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05a2d1a768eec07553607f4a3233439927682fa7", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/05a2d1a768eec07553607f4a3233439927682fa7", "committedDate": "2020-10-05T07:34:41Z", "message": "Have shared:security project use the same version of Java as client due to client's dependency on it.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e7dce21927e0efdbb77850565cf8e644a8fd989", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/8e7dce21927e0efdbb77850565cf8e644a8fd989", "committedDate": "2020-10-06T01:48:01Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d70b2212cc66295fd7374a51e108e4879953048b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/d70b2212cc66295fd7374a51e108e4879953048b", "committedDate": "2020-10-06T05:28:41Z", "message": "Introduce a Controller config for determining whether to allow writes to internal streams with read permissions.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d56f6aeff5094f3359615e84196506037c0b9873", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/d56f6aeff5094f3359615e84196506037c0b9873", "committedDate": "2020-10-06T07:47:30Z", "message": "Save changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f54f55e23cbd12fc4d8ac16b74e06ecff22275c", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6f54f55e23cbd12fc4d8ac16b74e06ecff22275c", "committedDate": "2020-10-06T08:10:21Z", "message": "Add a test and fix a bug\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313a924a7d6b314dd52e12548fc4ffa527ff66eb", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/313a924a7d6b314dd52e12548fc4ffa527ff66eb", "committedDate": "2020-10-08T07:45:32Z", "message": "save changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea6a079e50ede528963f9c781f5c7eeb66c961bf", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ea6a079e50ede528963f9c781f5c7eeb66c961bf", "committedDate": "2020-10-08T08:32:53Z", "message": "Send internal streams as streams to segment store\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "088f181f607a634c0b98c26e9db0b851b56a1c02", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/088f181f607a634c0b98c26e9db0b851b56a1c02", "committedDate": "2020-10-08T08:33:21Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a803f28f4d1a05cef096633196ea4bfe8e6dff2", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/5a803f28f4d1a05cef096633196ea4bfe8e6dff2", "committedDate": "2020-10-08T10:54:00Z", "message": "Clean up\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45584b7ad82830fc7dda10229fc138c3a9d8de48", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/45584b7ad82830fc7dda10229fc138c3a9d8de48", "committedDate": "2020-10-08T17:49:14Z", "message": "More clean-up and new tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74b0702fc9972dfc31321132a8f581a660ff16bf", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/74b0702fc9972dfc31321132a8f581a660ff16bf", "committedDate": "2020-10-09T02:36:31Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61f2d9b3c05b964eb42d580f556b90fe473f8cbf", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/61f2d9b3c05b964eb42d580f556b90fe473f8cbf", "committedDate": "2020-10-09T11:03:44Z", "message": "More clean-up and new tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72db233d421293ccb9bbb1861588063d9be63cd6", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/72db233d421293ccb9bbb1861588063d9be63cd6", "committedDate": "2020-10-12T03:31:21Z", "message": "Fix a bug\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/226d1202b8d78fccbc12239e1b38253e52402d63", "committedDate": "2020-10-12T05:55:13Z", "message": "Add tests and cleanup\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NTE1NjYw", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-508515660", "createdAt": "2020-10-14T16:16:53Z", "commit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoxNjo1M1rOHha7uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjoyNjoyNVrOHhbT1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwNjMzMQ==", "bodyText": "Formatting: This can fit on one line.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504806331", "createdAt": "2020-10-14T16:16:53Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/control/impl/Controller.java", "diffHunk": "@@ -369,13 +371,15 @@\n     void close();\n \n     /**\n-     * Refreshes an expired/non-existent delegation token.\n+     * Obtains a delegation token from the server.\n      *\n-     * @param scope      Scope of the stream.\n+     * @param scope Scope of the stream.\n      * @param streamName Name of the stream.\n+     * @param accessOperation The requested permission.\n      * @return The delegation token for the given stream.\n      */\n-    CompletableFuture<String> getOrRefreshDelegationTokenFor(String scope, String streamName);\n+    CompletableFuture<String> getOrRefreshDelegationTokenFor(String scope, String streamName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwNjUwMQ==", "bodyText": "Formatting: Revert indentation.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504806501", "createdAt": "2020-10-14T16:17:06Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/control/impl/ControllerImpl.java", "diffHunk": "@@ -1254,7 +1254,7 @@ private void closeChannel() {\n         final CompletableFuture<DelegationToken> result = this.retryConfig.runAsync(() -> {\n             RPCAsyncCallback<DelegationToken> callback = new RPCAsyncCallback<>(traceId, \"getOrRefreshDelegationTokenFor\", scope, streamName);\n             client.withDeadlineAfter(timeoutMillis, TimeUnit.MILLISECONDS)\n-                  .getDelegationToken(ModelHelper.createStreamInfo(scope, streamName), callback);\n+                    .getDelegationToken(ModelHelper.createStreamInfo(scope, streamName, accessOperation), callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwNjk1NA==", "bodyText": "Can you have the other method you overloaded call into this one?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504806954", "createdAt": "2020-10-14T16:17:51Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/control/impl/ModelHelper.java", "diffHunk": "@@ -377,6 +379,17 @@ public static final NodeUri decode(final PravegaNodeUri uri) {\n         return Controller.ScopeInfo.newBuilder().setScope(scope).build();\n     }\n \n+    public static final StreamInfo createStreamInfo(final String scope, final String stream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwODY3MQ==", "bodyText": "Undo or remove commented out code.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504808671", "createdAt": "2020-10-14T16:20:28Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/stream/impl/SegmentSelector.java", "diffHunk": "@@ -188,7 +188,7 @@ void removeSegmentWriter(Segment segment) {\n     }\n \n     private void createMissingWriters(Consumer<Segment> segmentSealedCallBack) {\n-        tokenProvider.populateToken(currentSegments.getDelegationToken());\n+        // tokenProvider.populateToken(currentSegments.getDelegationToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwOTE3OQ==", "bodyText": "This isn't so simple. KeyValueTable clients can be used for both reading or writing. What if someone just wants to read from KVTs?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504809179", "createdAt": "2020-10-14T16:21:14Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/tables/impl/KeyValueTableFactoryImpl.java", "diffHunk": "@@ -38,7 +39,7 @@\n             @NonNull String keyValueTableName, @NonNull Serializer<KeyT> keySerializer,\n             @NonNull Serializer<ValueT> valueSerializer, @NonNull KeyValueTableClientConfiguration clientConfiguration) {\n         val kvt = new KeyValueTableInfo(this.scope, keyValueTableName);\n-        val provider = DelegationTokenProviderFactory.create(this.controller, kvt.getScope(), kvt.getKeyValueTableName());\n+        val provider = DelegationTokenProviderFactory.create(this.controller, kvt.getScope(), kvt.getKeyValueTableName(), AccessOperation.WRITE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMDQ0MA==", "bodyText": "Please use some api in NameUtils. No code outside of that class should hardcoded these special strings.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504810440", "createdAt": "2020-10-14T16:23:14Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResourceImpl.java", "diffHunk": "@@ -58,10 +60,29 @@ public String ofReaderGroupInScope(String scopeName, String readerGroupName) {\n         return String.format(\"%s/%s:%s\", ofScope(scopeName), TAG_READERGROUP, readerGroupName);\n     }\n \n+    @Override\n+    public String ofWatermarkInScope(String scopeName, String watermarkName) {\n+        Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n+        Exceptions.checkNotNullOrEmpty(watermarkName, \"watermarkName\");\n+        return String.format(\"%s/%s:%s\", ofScope(scopeName), TAG_WATERMARK, watermarkName);\n+    }\n+\n     @Override\n     public String ofKeyValueTableInScope(String scopeName, String keyValueTableName) {\n         Exceptions.checkNotNullOrEmpty(scopeName, \"scopeName\");\n         Exceptions.checkNotNullOrEmpty(keyValueTableName, \"keyValueTableName\");\n         return String.format(\"%s/%s:%s\", ofScope(scopeName), TAG_KEYVALUETABLE, keyValueTableName);\n     }\n+\n+    @Override\n+    public String ofInternalStream(String scopeName, @NonNull String streamName) {\n+        // Internal stream names start with either `_RG` (reader groups) or `_MARK` (watermarks).\n+        if (streamName.startsWith(\"_RG\")) {\n+            return ofReaderGroupInScope(scopeName, streamName.replace(\"_RG\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMDgxMw==", "bodyText": "What does this special string mean? Again, consider using NameUtils. If your method is not there, please add it.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504810813", "createdAt": "2020-10-14T16:23:51Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/StreamAuthParams.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.pravega.auth.AuthHandler;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A helper class used for processing auth params for streams.\n+ */\n+@Slf4j\n+public class StreamAuthParams {\n+\n+    private static final AuthorizationResource AUTH_RESOURCE = new AuthorizationResourceImpl();\n+\n+    private final String scope;\n+    private final String stream;\n+    private final boolean isInternalWritesWithReadPermEnabled;\n+\n+    @VisibleForTesting\n+    @Getter\n+    private final boolean isInternalStream;\n+\n+    @VisibleForTesting\n+    StreamAuthParams(@NonNull String scope, @NonNull String stream) {\n+        this(scope, stream, true);\n+    }\n+\n+    public StreamAuthParams(@NonNull String scope, @NonNull String stream, boolean isInternalWritesWithReadPermEnabled) {\n+        this.scope = scope;\n+        this.stream = stream;\n+        this.isInternalWritesWithReadPermEnabled = isInternalWritesWithReadPermEnabled;\n+        if (stream.startsWith(\"_\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMDg5Nw==", "bodyText": "here too", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504810897", "createdAt": "2020-10-14T16:23:58Z", "author": {"login": "andreipaduroiu"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/StreamAuthParams.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.controller.server.security.auth;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.pravega.auth.AuthHandler;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A helper class used for processing auth params for streams.\n+ */\n+@Slf4j\n+public class StreamAuthParams {\n+\n+    private static final AuthorizationResource AUTH_RESOURCE = new AuthorizationResourceImpl();\n+\n+    private final String scope;\n+    private final String stream;\n+    private final boolean isInternalWritesWithReadPermEnabled;\n+\n+    @VisibleForTesting\n+    @Getter\n+    private final boolean isInternalStream;\n+\n+    @VisibleForTesting\n+    StreamAuthParams(@NonNull String scope, @NonNull String stream) {\n+        this(scope, stream, true);\n+    }\n+\n+    public StreamAuthParams(@NonNull String scope, @NonNull String stream, boolean isInternalWritesWithReadPermEnabled) {\n+        this.scope = scope;\n+        this.stream = stream;\n+        this.isInternalWritesWithReadPermEnabled = isInternalWritesWithReadPermEnabled;\n+        if (stream.startsWith(\"_\")) {\n+            this.isInternalStream = true;\n+        } else {\n+            this.isInternalStream = false;\n+        }\n+    }\n+\n+    public AuthHandler.Permissions requiredPermissionForWrites() {\n+        if (this.isInternalStream) {\n+            if (this.isInternalWritesWithReadPermEnabled) {\n+                return AuthHandler.Permissions.READ;\n+            } else {\n+                return AuthHandler.Permissions.READ_UPDATE;\n+            }\n+        } else {\n+            return AuthHandler.Permissions.READ_UPDATE;\n+        }\n+    }\n+\n+    public String resourceString() {\n+        return toResourceString(this.scope, this.stream);\n+    }\n+\n+    public String streamResourceString() {\n+        return AUTH_RESOURCE.ofStreamInScope(scope, stream);\n+    }\n+\n+    private static String toResourceString(String scope, String stream, boolean isStreamInternal) {\n+        return isStreamInternal ? AUTH_RESOURCE.ofInternalStream(scope, stream) :\n+                AUTH_RESOURCE.ofStreamInScope(scope, stream);\n+    }\n+\n+    public static String toResourceString(String scope, String stream) {\n+        return toResourceString(scope, stream, stream.startsWith(\"_\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMTMwNw==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504811307", "createdAt": "2020-10-14T16:24:38Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -146,7 +146,7 @@ public void setupAppend(SetupAppend setupAppend) {\n             try {\n                 JsonWebToken token = tokenVerifier.verifyToken(newSegment,\n                         setupAppend.getDelegationToken(),\n-                        AuthHandler.Permissions.READ_UPDATE);\n+                        newSegment.contains(\"/_\") ? AuthHandler.Permissions.READ : AuthHandler.Permissions.READ_UPDATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMTk2Ng==", "bodyText": "Clearly define what the behavior of this is. What is the most restrictive level that this implies?\nConsider documenting the same for the other ones too so that whomever uses these understands what to expect.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504811966", "createdAt": "2020-10-14T16:25:38Z", "author": {"login": "andreipaduroiu"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/AccessOperation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+/**\n+ * Represents an operation that is authorized by a permission (allow, deny, etc.). Currently, permissions\n+ * always 'allow' access to specified access operations in Pravega.\n+ */\n+public enum AccessOperation {\n+    /**\n+     * Not known.\n+     */\n+    UNKNOWN,\n+\n+    /**\n+     * Any operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMjE5OA==", "bodyText": "You may want to specify this applies exclusively to KeyValueTables/Table Segments.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504812198", "createdAt": "2020-10-14T16:25:57Z", "author": {"login": "andreipaduroiu"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/AccessOperation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+/**\n+ * Represents an operation that is authorized by a permission (allow, deny, etc.). Currently, permissions\n+ * always 'allow' access to specified access operations in Pravega.\n+ */\n+public enum AccessOperation {\n+    /**\n+     * Not known.\n+     */\n+    UNKNOWN,\n+\n+    /**\n+     * Any operation.\n+     */\n+    ANY,\n+\n+    /**\n+     * Represents reads.\n+     */\n+    READ,\n+\n+    /**\n+     * Represents inserts, updates and deletes.\n+     */\n+    WRITE,\n+\n+    /**\n+     * Represents reads and writes (inserts, updates and deletes).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMjM5Ng==", "bodyText": "Include the argument too. IT will help with debugging.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504812396", "createdAt": "2020-10-14T16:26:13Z", "author": {"login": "andreipaduroiu"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/PermissionsHelper.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+/**\n+ * Helper methods for permissions.\n+ */\n+public class PermissionsHelper {\n+\n+    /**\n+     * Translates the specified {@code accessOperation} to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperation accessOperation to translate\n+     * @return a {@link AuthHandler.Permissions} object that represents the specified {@code accessOperation}\n+     */\n+    public static AuthHandler.Permissions toAuthHandlerPermissions(AccessOperation accessOperation) {\n+        if (accessOperation.equals(AccessOperation.READ)) {\n+            return AuthHandler.Permissions.READ;\n+        } else if (accessOperation.equals(AccessOperation.WRITE) ||\n+                accessOperation.equals(AccessOperation.READ_UPDATE)) {\n+            return AuthHandler.Permissions.READ_UPDATE;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot translate\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgxMjUwMQ==", "bodyText": "Strings.isEmpty?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504812501", "createdAt": "2020-10-14T16:26:25Z", "author": {"login": "andreipaduroiu"}, "path": "shared/security/src/main/java/io/pravega/shared/security/auth/PermissionsHelper.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.shared.security.auth;\n+\n+import io.pravega.auth.AuthHandler;\n+import lombok.NonNull;\n+\n+/**\n+ * Helper methods for permissions.\n+ */\n+public class PermissionsHelper {\n+\n+    /**\n+     * Translates the specified {@code accessOperation} to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperation accessOperation to translate\n+     * @return a {@link AuthHandler.Permissions} object that represents the specified {@code accessOperation}\n+     */\n+    public static AuthHandler.Permissions toAuthHandlerPermissions(AccessOperation accessOperation) {\n+        if (accessOperation.equals(AccessOperation.READ)) {\n+            return AuthHandler.Permissions.READ;\n+        } else if (accessOperation.equals(AccessOperation.WRITE) ||\n+                accessOperation.equals(AccessOperation.READ_UPDATE)) {\n+            return AuthHandler.Permissions.READ_UPDATE;\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot translate\");\n+        }\n+    }\n+\n+    /**\n+     * Parse the specified {@code accessOperationStr} string and translate it to an {@link AuthHandler.Permissions} object.\n+     *\n+     * @param accessOperationStr a string value of an {@link AccessOperation} object\n+     * @param defaultPermissions the default {@link AuthHandler.Permissions} object to return in case the\n+     *                           {@code accessOperationStr} can't be parsed.\n+     * @return the parsed or default {@link AuthHandler.Permissions} object,\n+     */\n+    public static AuthHandler.Permissions parse(@NonNull String accessOperationStr, AuthHandler.Permissions defaultPermissions) {\n+        if (accessOperationStr.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NDkyMzEx", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-508492311", "createdAt": "2020-10-14T15:51:29Z", "commit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1MToyOVrOHhZ1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowNTowNVrOHhabvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc4ODM1MA==", "bodyText": "what is this change for?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504788350", "createdAt": "2020-10-14T15:51:29Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -416,7 +486,7 @@ public void getURI(SegmentId request, StreamObserver<NodeUri> responseObserver)\n         log.info(\"getURI called for segment {}/{}/{}.\", request.getStreamInfo().getScope(),\n                 request.getStreamInfo().getStream(), request.getSegmentId());\n         authenticateExecuteAndProcessResults(() -> this.grpcAuthHelper.checkAuthorization(\n-                authorizationResource.ofStreamInScope(request.getStreamInfo().getScope(), request.getStreamInfo().getStream()),\n+                StreamAuthParams.toResourceString(request.getStreamInfo().getScope(), request.getStreamInfo().getStream()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc4OTE3MQ==", "bodyText": "why do we need a differentiation here? for example a readergroup's state synchronizer is an internal stream.. but depending on the api being invoked the user may or may not have the authorization permission.. so would rg stream be treated as \"stream\" and \"internal stream\" interchangably depending on the context?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504789171", "createdAt": "2020-10-14T15:52:39Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/security/auth/AuthorizationResource.java", "diffHunk": "@@ -101,4 +113,13 @@\n      * @throws IllegalArgumentException if {@code scopeName} or {@code kvtName} are empty\n      */\n     String ofKeyValueTableInScope(String scopeName, String kvtName);\n+\n+    /**\n+     * Creates a resource representation for use in authorization of actions related to the specified internal stream.\n+     *\n+     * @param scopeName the name of the scope\n+     * @param streamName the name of the internal stream\n+     * @return a string representing the resource\n+     */\n+    String ofInternalStream(String scopeName, String streamName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTgwOA==", "bodyText": "if this is set to false can user never make any write operations with read permissions on reader group streams?\nshould we keep this as a service level setting or a per stream setting?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504791808", "createdAt": "2020-10-14T15:56:08Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -101,14 +103,19 @@\n     // Send to the client server traces on error message replies.\n     private final boolean replyWithStackTraceOnError;\n \n+    private final boolean isInternalWritesWithReadPermEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5Mjk1NQ==", "bodyText": "should we make a special case for internal \"resources\" in this fashion.\ni can understand an rg resource or watermark resource for creation api.. but subsequent to that the clients access these streams for their segmetns using the same get/successor apis which would treat them as \"stream\" resource.\nright?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504792955", "createdAt": "2020-10-14T15:57:37Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -295,6 +308,66 @@ public void getCurrentSegments(StreamInfo request, StreamObserver<SegmentRanges>\n                 responseObserver);\n     }\n \n+    private Supplier<String> createDelegationTokenSupplier(StreamInfo request) {\n+        return () -> {\n+            StreamAuthParams authParams = new StreamAuthParams(request.getScope(), request.getStream(),\n+                    this.isInternalWritesWithReadPermEnabled);\n+\n+            // StreamResource will take on values containing `_RG` (ex: \"prn:://scope:myScope/stream:_RGmyApp\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MzYxMQ==", "bodyText": "for older clients would request.getRequestedPermission be empty or can it be null?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504793611", "createdAt": "2020-10-14T15:58:30Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -295,6 +308,66 @@ public void getCurrentSegments(StreamInfo request, StreamObserver<SegmentRanges>\n                 responseObserver);\n     }\n \n+    private Supplier<String> createDelegationTokenSupplier(StreamInfo request) {\n+        return () -> {\n+            StreamAuthParams authParams = new StreamAuthParams(request.getScope(), request.getStream(),\n+                    this.isInternalWritesWithReadPermEnabled);\n+\n+            // StreamResource will take on values containing `_RG` (ex: \"prn:://scope:myScope/stream:_RGmyApp\")\n+            // and `_MARK` for internal streams. We use the same strings in delegation tokens sent to Segment Store,\n+            // while we use resource tags lie \"reader-group\" (ex: \"prn:://scope:myScope/reader-group:myApp)\n+            // and \"watermark\" for authorization in Controller.\n+            String streamResource = authParams.streamResourceString();\n+\n+            // This is for backward compatibility.\n+            if (request.getRequestedPermission().equals(\"\") && authParams.isStreamUserDefined()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5ODE0Mw==", "bodyText": "can defaulting the permission to read have adverse consequence on old clients?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r504798143", "createdAt": "2020-10-14T16:05:05Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -295,6 +308,66 @@ public void getCurrentSegments(StreamInfo request, StreamObserver<SegmentRanges>\n                 responseObserver);\n     }\n \n+    private Supplier<String> createDelegationTokenSupplier(StreamInfo request) {\n+        return () -> {\n+            StreamAuthParams authParams = new StreamAuthParams(request.getScope(), request.getStream(),\n+                    this.isInternalWritesWithReadPermEnabled);\n+\n+            // StreamResource will take on values containing `_RG` (ex: \"prn:://scope:myScope/stream:_RGmyApp\")\n+            // and `_MARK` for internal streams. We use the same strings in delegation tokens sent to Segment Store,\n+            // while we use resource tags lie \"reader-group\" (ex: \"prn:://scope:myScope/reader-group:myApp)\n+            // and \"watermark\" for authorization in Controller.\n+            String streamResource = authParams.streamResourceString();\n+\n+            // This is for backward compatibility.\n+            if (request.getRequestedPermission().equals(\"\") && authParams.isStreamUserDefined()) {\n+                return this.grpcAuthHelper.checkAuthorizationAndCreateToken(streamResource,\n+                        AuthHandler.Permissions.READ);\n+            }\n+\n+            // The resource string that'll be used in the delegation token for use of the segment store\n+            final String tokenResource;\n+\n+            // The operation that'll be specified as granted for the resource in the token. The bearer of the token\n+            // will be allowed to perform the specified operation.\n+            final AuthHandler.Permissions tokenPermission;\n+\n+            if (authParams.isStreamUserDefined()) {\n+                // The operation itself requires the caller to possess read permissions.\n+                AuthHandler.Permissions minimumPermissions = AuthHandler.Permissions.READ;\n+\n+                // This is the permission that the client is requesting to be assigned on the delegation token.\n+                AuthHandler.Permissions requestedPermissions = PermissionsHelper.parse(request.getRequestedPermission(),\n+                        AuthHandler.Permissions.READ);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4OTI1MzM3", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-508925337", "createdAt": "2020-10-15T04:17:38Z", "commit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDoxNzozOFrOHhwKfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozMzoxOFrOHhwZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NDE3NQ==", "bodyText": "Preconditions.checkNotNull(accessOperation)", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r505154175", "createdAt": "2020-10-15T04:17:38Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "diffHunk": "@@ -66,13 +70,14 @@\n     @Getter(AccessLevel.PACKAGE)\n     private final AtomicReference<CompletableFuture<Void>> tokenRefreshFuture = new AtomicReference<>();\n \n-    JwtTokenProviderImpl(Controller controllerClient, String scopeName, String streamName) {\n+    JwtTokenProviderImpl(Controller controllerClient, String scopeName, String streamName, AccessOperation accessOperation) {\n         this(controllerClient, scopeName, streamName, ConfigurationOptionsExtractor.extractInt(\n-                REFRESH_THRESHOLD_SYSTEM_PROPERTY, REFRESH_THRESHOLD_ENV_VARIABLE, DEFAULT_REFRESH_THRESHOLD_SECONDS));\n+                REFRESH_THRESHOLD_SYSTEM_PROPERTY, REFRESH_THRESHOLD_ENV_VARIABLE, DEFAULT_REFRESH_THRESHOLD_SECONDS),\n+                accessOperation);\n     }\n \n     private JwtTokenProviderImpl(Controller controllerClient, String scopeName, String streamName,\n-                                 int refreshThresholdInSeconds) {\n+                                 int refreshThresholdInSeconds, AccessOperation accessOperation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NTY2OA==", "bodyText": "This would cause the SegmentOutputStream created by the RevisionedStreamClient to have READ permissions right ?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r505155668", "createdAt": "2020-10-15T04:23:59Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ClientFactoryImpl.java", "diffHunk": "@@ -213,9 +214,8 @@ public ClientFactoryImpl(String scope, Controller controller, ConnectionPool con\n     private <T> RevisionedStreamClient<T> createRevisionedStreamClient(Segment segment, Serializer<T> serializer,\n                                                                        SynchronizerConfig config) {\n         EventSegmentReader in = inFactory.createEventReaderForSegment(segment, config.getReadBufferSize());\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStreamName()), RuntimeException::new);\n-        DelegationTokenProvider delegationTokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        DelegationTokenProvider delegationTokenProvider = DelegationTokenProviderFactory.create(controller, segment,\n+                AccessOperation.READ);\n         ConditionalOutputStream cond = condFactory.createConditionalOutputStream(segment, delegationTokenProvider, config.getEventWriterConfig());\n         SegmentMetadataClient meta = metaFactory.createSegmentMetadataClient(segment, delegationTokenProvider);\n         return new RevisionedStreamClientImpl<>(segment, in, outFactory, cond, meta, serializer, config.getEventWriterConfig(), delegationTokenProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NjM1NQ==", "bodyText": "SegmentMetadataCLient can truncate a Stream. Is \"READ\" permission enough to do this ?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r505156355", "createdAt": "2020-10-15T04:26:47Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/segment/impl/SegmentMetadataClientImpl.java", "diffHunk": "@@ -63,7 +64,7 @@\n     public SegmentMetadataClientImpl(Segment segment, Controller controller, ConnectionPool connectionPool,\n                                      String delegationToken) {\n         this(segment, controller, connectionPool,\n-                DelegationTokenProviderFactory.create(delegationToken, controller, segment));\n+                DelegationTokenProviderFactory.create(delegationToken, controller, segment, AccessOperation.READ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NjYwNQ==", "bodyText": "Same question as above.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r505156605", "createdAt": "2020-10-15T04:27:53Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ReaderGroupImpl.java", "diffHunk": "@@ -322,8 +323,7 @@ private StreamCut computeEndStreamCut(Stream stream, Map<Segment, Long> endSegme\n                     totalLength += endPositions.get(s);\n                 } else {\n                     if (tokenProvider == null) {\n-                        tokenProvider = DelegationTokenProviderFactory.create(\n-                                unreadVal.getDelegationToken(), controller, s);\n+                        tokenProvider = DelegationTokenProviderFactory.create(controller, s, AccessOperation.READ);\n                     }\n                     @Cleanup\n                     SegmentMetadataClient metadataClient = metaFactory.createSegmentMetadataClient(s, tokenProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1NzkwNA==", "bodyText": "we should add a comment to explain this config...", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r505157904", "createdAt": "2020-10-15T04:33:18Z", "author": {"login": "shrids"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/GRPCServerConfig.java", "diffHunk": "@@ -95,6 +95,8 @@\n      */\n     Integer getAccessTokenTTLInSeconds();\n \n+    boolean isInternalWritesWithReadPermEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226d1202b8d78fccbc12239e1b38253e52402d63"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e94ca554ce203a2485b395bbb87c72d92c759bea", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/e94ca554ce203a2485b395bbb87c72d92c759bea", "committedDate": "2020-10-16T04:16:05Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be890bcde5fb6247dec3f544adfd5182692a44d0", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/be890bcde5fb6247dec3f544adfd5182692a44d0", "committedDate": "2020-10-16T11:15:56Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5bc046748de38d4d266be0eeb7a89be1f4049e7", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/b5bc046748de38d4d266be0eeb7a89be1f4049e7", "committedDate": "2020-10-16T11:16:36Z", "message": "Merge remote-tracking branch 'origin/issue-5115-reads-using-read-permissions' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f2c1ac49f6fd794f329550112d0d42b6f69fbff", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/2f2c1ac49f6fd794f329550112d0d42b6f69fbff", "committedDate": "2020-10-16T11:19:42Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4128e72d1c99803bc42c0df1e8f33a9a45babb0", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/d4128e72d1c99803bc42c0df1e8f33a9a45babb0", "committedDate": "2020-10-16T11:22:26Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6166784d250758f8b907350a2e14ab675a0d4db4", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6166784d250758f8b907350a2e14ab675a0d4db4", "committedDate": "2020-10-19T04:45:30Z", "message": "Add tests and reduce a log level\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15e0ccd2a83a717be4534dee9dbf7ffa11678c59", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/15e0ccd2a83a717be4534dee9dbf7ffa11678c59", "committedDate": "2020-10-19T04:45:57Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "096a1e6c2a2de5be9c5f4d800f1a721669101b22", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/096a1e6c2a2de5be9c5f4d800f1a721669101b22", "committedDate": "2020-10-22T05:51:56Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb5f75bea4ab955e4ebe56041dce4bc113751b4", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6cb5f75bea4ab955e4ebe56041dce4bc113751b4", "committedDate": "2020-10-22T15:58:39Z", "message": "Address review comments on design and implementation\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab3e44351a50ba30d75b4f0cb5c772ed791bd8d", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/8ab3e44351a50ba30d75b4f0cb5c772ed791bd8d", "committedDate": "2020-10-22T15:58:52Z", "message": "Merge remote-tracking branch 'origin/issue-5115-reads-using-read-permissions' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd0a8e724d934a3c9ce0687e6ff3a8d93c8992c", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/0dd0a8e724d934a3c9ce0687e6ff3a8d93c8992c", "committedDate": "2020-10-23T03:16:43Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f6edfeb9fd0e23266e2dd61696e62b09334d13", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/c4f6edfeb9fd0e23266e2dd61696e62b09334d13", "committedDate": "2020-10-23T04:52:24Z", "message": "Modify handling of Watermark resources to account for the fact that it is not user visible.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2798cba7eee05aa112af92fce43b21b470c5c683", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/2798cba7eee05aa112af92fce43b21b470c5c683", "committedDate": "2020-10-23T08:30:01Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15769653cdff7794bbbc20e8369197f5b07c494", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/d15769653cdff7794bbbc20e8369197f5b07c494", "committedDate": "2020-10-23T08:55:05Z", "message": "Document the constuctor's test-only usage\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d27990a04eea7ebdc1f132ae3a7942d3beb83ed", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6d27990a04eea7ebdc1f132ae3a7942d3beb83ed", "committedDate": "2020-10-23T09:51:23Z", "message": "Rename an access operation.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTExOTc1", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-517111975", "createdAt": "2020-10-26T19:34:28Z", "commit": {"oid": "6d27990a04eea7ebdc1f132ae3a7942d3beb83ed"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8ea19353764489c13aafaf0ace6462b5edfc8a", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ec8ea19353764489c13aafaf0ace6462b5edfc8a", "committedDate": "2020-10-27T05:18:21Z", "message": "Fix a unit test\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223474c9df89b17cb85ab24df92d22f39f88f5f0", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/223474c9df89b17cb85ab24df92d22f39f88f5f0", "committedDate": "2020-10-28T02:17:26Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f10cb538f5ac89a4c6f15985178479feac095aab", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/f10cb538f5ac89a4c6f15985178479feac095aab", "committedDate": "2020-10-28T15:01:33Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODM2MzAw", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-518836300", "createdAt": "2020-10-28T16:09:20Z", "commit": {"oid": "f10cb538f5ac89a4c6f15985178479feac095aab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowOToyMFrOHpx9Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxODozNFrOHpyYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MjA5OQ==", "bodyText": "This makes the client depend on jaxb-api and jaxb-runtime. Are these needed for this change to work? If not please find a way to reconfigure things so the client isn't pulling these in.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r513572099", "createdAt": "2020-10-28T16:09:20Z", "author": {"login": "tkaitchuck"}, "path": "build.gradle", "diffHunk": "@@ -250,6 +255,7 @@ project('client') {\n         compile project(':shared:authplugin')\n         compile project(':shared:protocol')\n         compile project(\":shared:controller-api\")\n+        compile project(\":shared:security\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10cb538f5ac89a4c6f15985178479feac095aab"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3OTE4MQ==", "bodyText": "This is not read-only. The revisioned stream client is used for writes.\nThis is called from the public API above, not for internal streams.\nPlease add unit / integration tests such that this sort of bug would be caught.", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r513579181", "createdAt": "2020-10-28T16:18:34Z", "author": {"login": "tkaitchuck"}, "path": "client/src/main/java/io/pravega/client/stream/impl/ClientFactoryImpl.java", "diffHunk": "@@ -213,9 +214,8 @@ public ClientFactoryImpl(String scope, Controller controller, ConnectionPool con\n     private <T> RevisionedStreamClient<T> createRevisionedStreamClient(Segment segment, Serializer<T> serializer,\n                                                                        SynchronizerConfig config) {\n         EventSegmentReader in = inFactory.createEventReaderForSegment(segment, config.getReadBufferSize());\n-        String delegationToken = Futures.getAndHandleExceptions(controller.getOrRefreshDelegationTokenFor(segment.getScope(),\n-                                                                                                          segment.getStreamName()), RuntimeException::new);\n-        DelegationTokenProvider delegationTokenProvider = DelegationTokenProviderFactory.create(delegationToken, controller, segment);\n+        DelegationTokenProvider delegationTokenProvider = DelegationTokenProviderFactory.create(controller, segment,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10cb538f5ac89a4c6f15985178479feac095aab"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00aba40458a23500aed4354f3fce35cbc4f4a974", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/00aba40458a23500aed4354f3fce35cbc4f4a974", "committedDate": "2020-10-29T10:17:28Z", "message": "Address review comments and add tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "580281499d49374f6370257f8846b1dcc71c7cb0", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/580281499d49374f6370257f8846b1dcc71c7cb0", "committedDate": "2020-10-29T10:17:48Z", "message": "Merge remote-tracking branch 'origin/issue-5115-reads-using-read-permissions' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "571cca29b960463d89180e99fda40c19ad5f5d4e", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/571cca29b960463d89180e99fda40c19ad5f5d4e", "committedDate": "2020-10-29T10:21:38Z", "message": "Merge branch 'master' into issue-5115-reads-using-read-permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b77005598f0a4da8cb3ed15ec1bb214fa745cd53", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/b77005598f0a4da8cb3ed15ec1bb214fa745cd53", "committedDate": "2020-10-30T02:09:12Z", "message": "Add jaxb back to avoid test failures and exclude from client\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c901175c6c52fc7e319ccbb65b668a795ee2bb", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/73c901175c6c52fc7e319ccbb65b668a795ee2bb", "committedDate": "2020-11-02T04:42:58Z", "message": "Ass support for testing delegation token supplier\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/fcc039ff041156714a984852b4ab25d21e25d72a", "committedDate": "2020-11-02T07:18:19Z", "message": "Merge from master, resolve conflicts and add tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDU1Nzky", "url": "https://github.com/pravega/pravega/pull/5231#pullrequestreview-521455792", "createdAt": "2020-11-02T09:25:03Z", "commit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyNTowM1rOHr8OpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyNTowM1rOHr8OpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNzYwNA==", "bodyText": "i am sorry, i think i had asked this earlier too - why do we authorize for both minimum permissions and requested permissions successively.. isnt minimum permission redundant in that case?", "url": "https://github.com/pravega/pravega/pull/5231#discussion_r515837604", "createdAt": "2020-11-02T09:25:03Z", "author": {"login": "shiveshr"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -345,21 +360,106 @@ public void deleteStream(StreamInfo request, StreamObserver<DeleteStreamStatus>\n \n     @Override\n     public void getCurrentSegments(StreamInfo request, StreamObserver<SegmentRanges> responseObserver) {\n-        log.info(\"getCurrentSegments called for stream {}/{}.\", request.getScope(), request.getStream());\n-        authenticateExecuteAndProcessResults(() -> this.grpcAuthHelper.checkAuthorizationAndCreateToken(\n-                authorizationResource.ofStreamInScope(request.getScope(), request.getStream()),\n-                AuthHandler.Permissions.READ_UPDATE),\n-                delegationToken -> {\n-                    logIfEmpty(delegationToken, \"getCurrentSegments\", request.getScope(), request.getStream());\n-                    return controllerService.getCurrentSegments(request.getScope(), request.getStream())\n-                            .thenApply(segmentRanges -> SegmentRanges.newBuilder()\n-                                    .addAllSegmentRanges(segmentRanges)\n-                                    .setDelegationToken(delegationToken)\n-                                    .build());\n+        final String scope = request.getScope();\n+        final String stream = request.getStream();\n+        log.info(\"getCurrentSegments called for stream {}/{}.\", scope, stream);\n+        String resource = StreamAuthParams.toResourceString(scope, stream);\n+\n+        final boolean isDelegationTokenRequested =\n+                request.getRequestedPermission().equals(AccessOperation.NONE.toString()) ? false : true;\n+\n+        authenticateExecuteAndProcessResults(() -> {\n+                    if (isDelegationTokenRequested) {\n+                        // For backward compatibility: older clients still depend on delegation tokens generated\n+                        // by this method for both reads and writes.\n+                        return this.grpcAuthHelper.checkAuthorizationAndCreateToken(resource, AuthHandler.Permissions.READ_UPDATE);\n+                    } else {\n+                        return this.grpcAuthHelper.checkAuthorization(resource, AuthHandler.Permissions.READ);\n+                    }\n+                },\n+                authorizationResult -> {\n+                    logIfEmpty(authorizationResult, \"getCurrentSegments\", scope, stream);\n+                    return controllerService.getCurrentSegments(scope, stream)\n+                            .thenApply(segmentRanges -> {\n+                                SegmentRanges.Builder builder = SegmentRanges.newBuilder().addAllSegmentRanges(segmentRanges);\n+                                if (isDelegationTokenRequested) {\n+                                    builder.setDelegationToken(authorizationResult);\n+                                }\n+                                return builder.build();\n+                            });\n                 },\n                 responseObserver);\n     }\n \n+    @VisibleForTesting\n+    public Supplier<String> delegationTokenSupplier(StreamInfo request) {\n+        return () -> {\n+            if (!this.isAuthEnabled()) {\n+                return \"\";\n+            }\n+\n+            StreamAuthParams authParams = new StreamAuthParams(request.getScope(), request.getStream(),\n+                    request.getRequestedPermission(), this.isInternalWritesWithReadPermEnabled);\n+\n+            // StreamResource will be a stream representation (ex: \"prn:://scope:myScope/stream:_RGmyApp\") of the\n+            // reader group (ex: \"prn:://scope:myScope/reader-group:myApp). We use stream representation in claims\n+            // put in delegation tokens for Segment Store's use, even though we use the regular representation for\n+            // authorization here in the Controller.\n+            String streamResource = authParams.streamResourceString();\n+            String resource = authParams.resourceString();\n+\n+            if (authParams.isRequestedPermissionEmpty()) {\n+                // For backward compatibility: Older clients will not populate requested permission.\n+                log.info(\"Requested permission was empty for request with scope {} and stream {}\", request.getScope(),\n+                        request.getStream());\n+                return this.grpcAuthHelper.checkAuthorizationAndCreateToken(resource, AuthHandler.Permissions.READ_UPDATE);\n+            } else {\n+                log.debug(\"Requested permission was {} for request with scope {} and stream {}\",\n+                        request.getRequestedPermission(), request.getScope(), request.getStream());\n+\n+                // The resource string that'll be used in the delegation token for use of the segment store\n+                final String tokenResource;\n+\n+                // The operation that'll be specified as granted for the resource in the token. The bearer of the token\n+                // will be allowed to perform the specified operation.\n+                final AuthHandler.Permissions tokenPermission;\n+\n+                // This is the permission that the client is requesting to be assigned on the delegation token.\n+                AuthHandler.Permissions requestedPermissions = authParams.requestedPermission();\n+\n+                if (authParams.isStreamUserDefined()) {\n+                    // The operation itself requires the caller to possess read permissions.\n+                    AuthHandler.Permissions minimumPermissions = AuthHandler.Permissions.READ;\n+\n+                    if (requestedPermissions.equals(AuthHandler.Permissions.READ_UPDATE) ||\n+                            requestedPermissions.equals(minimumPermissions)) {\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, requestedPermissions);\n+                        tokenResource = streamResource;\n+                        tokenPermission = requestedPermissions;\n+                    } else {\n+                        // The minimum permission that the user must have to be able to invoke this call. This\n+                        // authorizes the operation.\n+                        this.grpcAuthHelper.checkAuthorization(streamResource, minimumPermissions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc039ff041156714a984852b4ab25d21e25d72a"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3888, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}