{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzY0OTQ0", "number": 4853, "title": "Issue 4852: Update segment split/merge metrics after rolling transaction is committed", "bodyText": "Signed-off-by: Kevin Han kevinhan88@gmail.com\nChange log description\nAfter rolling transaction has been committed, update segment split/merge metrics with latest values.\nPurpose of the change\nFixes #4852\nWhat the code does\nInside AbstractStreamMetadataStore, after completeRollingTxn, findNumSplitsMerges is called to get the latest values, followed by the call to update the metrics\nHow to verify it\nUnit test should pass; metrics should be consistent with RestAPI in case of rolling transaction.", "createdAt": "2020-06-08T19:59:40Z", "url": "https://github.com/pravega/pravega/pull/4853", "merged": true, "mergeCommit": {"oid": "e05194e1722aa8403f900b0cea8971263a4d55c8"}, "closed": true, "closedAt": "2020-06-15T16:25:48Z", "author": {"login": "kevinhan88"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpV9_xAH2gAyNDMxMzY0OTQ0OmRjOWYwMWU0MGI1MjQyY2FmZjE2YzgzZDdlYjEyNDZiZjYxMTVkZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqUdjcgH2gAyNDMxMzY0OTQ0OjNjZTg0N2FhOWFmNThmYmIxOGYzMzJlY2UxM2VkYjI1YjMyZTU1NTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "author": {"user": {"login": "kevinhan88", "name": "Kevin Han"}}, "url": "https://github.com/pravega/pravega/commit/dc9f01e40b5242caff16c83d7eb1246bf6115dfe", "committedDate": "2020-06-08T19:52:42Z", "message": "Issue-4852: update segment split/merge metrics after rolling transaction is committed.\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjEwNjg4", "url": "https://github.com/pravega/pravega/pull/4853#pullrequestreview-426610688", "createdAt": "2020-06-08T20:50:49Z", "commit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo1MDo1MFrOGgv7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo1MTo1NlrOGgv-Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5Mjk1NA==", "bodyText": "Why don't you fail the test?", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r436992954", "createdAt": "2020-06-08T20:50:50Z", "author": {"login": "eolivelli"}, "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzA3Mg==", "bodyText": "Same here", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r436993072", "createdAt": "2020-06-08T20:51:02Z", "author": {"login": "eolivelli"}, "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);\n+            return;\n+        }\n+\n+        @Cleanup\n+        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scaleRollingTxnScopeName, ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerPort)).build());\n+        @Cleanup\n+        TransactionalEventStreamWriter<String> writer = clientFactory.createTransactionalEventWriter(Stream.of(scaleRollingTxnScopeName, scaleRollingTxnStreamName).getStreamName(),\n+                new JavaSerializer<>(), EventWriterConfig.builder().build());\n+        Transaction<String> transaction = writer.beginTxn();\n+        transaction.writeEvent(\"Transactional content\");\n+\n+        //split to 3 segments\n+        Map<Double, Double> keyRanges = new HashMap<>();\n+        keyRanges.put(0.0, 0.25);\n+        keyRanges.put(0.25, 0.75);\n+        keyRanges.put(0.75, 1.0);\n+\n+        Stream scaleRollingTxnStream = new StreamImpl(scaleRollingTxnScopeName, scaleRollingTxnStreamName);\n+        if (!controller.scaleStream(scaleRollingTxnStream, Collections.singletonList(0L), keyRanges, executor).getFuture().get()) {\n+            log.error(\"Scale stream: splitting segment into three failed, exiting\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzU2Mg==", "bodyText": "This sleep may turn the test into a new flaky one.\nYou could wait for the conditions below to be verified", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r436993562", "createdAt": "2020-06-08T20:51:56Z", "author": {"login": "eolivelli"}, "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);\n+            return;\n+        }\n+\n+        @Cleanup\n+        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scaleRollingTxnScopeName, ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerPort)).build());\n+        @Cleanup\n+        TransactionalEventStreamWriter<String> writer = clientFactory.createTransactionalEventWriter(Stream.of(scaleRollingTxnScopeName, scaleRollingTxnStreamName).getStreamName(),\n+                new JavaSerializer<>(), EventWriterConfig.builder().build());\n+        Transaction<String> transaction = writer.beginTxn();\n+        transaction.writeEvent(\"Transactional content\");\n+\n+        //split to 3 segments\n+        Map<Double, Double> keyRanges = new HashMap<>();\n+        keyRanges.put(0.0, 0.25);\n+        keyRanges.put(0.25, 0.75);\n+        keyRanges.put(0.75, 1.0);\n+\n+        Stream scaleRollingTxnStream = new StreamImpl(scaleRollingTxnScopeName, scaleRollingTxnStreamName);\n+        if (!controller.scaleStream(scaleRollingTxnStream, Collections.singletonList(0L), keyRanges, executor).getFuture().get()) {\n+            log.error(\"Scale stream: splitting segment into three failed, exiting\");\n+            return;\n+        }\n+\n+        assertEquals(3, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_COUNT, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+        assertEquals(1, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_SPLITS, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+        assertEquals(0, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_MERGES, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+\n+        transaction.flush();\n+        transaction.commit();\n+\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac07c5d845126c63c92f974529072d07478ba41", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/0ac07c5d845126c63c92f974529072d07478ba41", "committedDate": "2020-06-08T21:33:13Z", "message": "Merge branch 'master' into issue-4852"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjM4MDI2", "url": "https://github.com/pravega/pravega/pull/4853#pullrequestreview-426638026", "createdAt": "2020-06-08T21:34:04Z", "commit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNDowNFrOGgxPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTozNDowNFrOGgxPAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxNDI3Mg==", "bodyText": "Use TestUtils.await or AssertExtensions.assertEventuallyEquals", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437014272", "createdAt": "2020-06-08T21:34:04Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/StreamMetricsTest.java", "diffHunk": "@@ -229,4 +229,50 @@ public void testTransactionMetrics() throws Exception {\n         AssertExtensions.assertEventuallyEquals(true, () -> MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)) != null, 10000);\n         assertEquals(1, (long) MetricRegistryUtils.getCounter(MetricsNames.ABORT_TRANSACTION, streamTags(txScopeName, txStreamName)).count());\n     }\n+\n+    @Test(timeout = 30000)\n+    public void testRollingTxnMetrics() throws Exception {\n+        String scaleRollingTxnScopeName = \"scaleRollingTxnScope\";\n+        String scaleRollingTxnStreamName = \"scaleRollingTxnStream\";\n+\n+        controllerWrapper.getControllerService().createScope(scaleRollingTxnScopeName).get();\n+        if (!controller.createStream(scaleRollingTxnScopeName, scaleRollingTxnStreamName, config).get()) {\n+            log.error(\"Stream {} for scale testing already existed, exiting\", scaleRollingTxnScopeName + \"/\" + scaleRollingTxnStreamName);\n+            return;\n+        }\n+\n+        @Cleanup\n+        EventStreamClientFactory clientFactory = EventStreamClientFactory.withScope(scaleRollingTxnScopeName, ClientConfig.builder()\n+                .controllerURI(URI.create(\"tcp://localhost:\" + controllerPort)).build());\n+        @Cleanup\n+        TransactionalEventStreamWriter<String> writer = clientFactory.createTransactionalEventWriter(Stream.of(scaleRollingTxnScopeName, scaleRollingTxnStreamName).getStreamName(),\n+                new JavaSerializer<>(), EventWriterConfig.builder().build());\n+        Transaction<String> transaction = writer.beginTxn();\n+        transaction.writeEvent(\"Transactional content\");\n+\n+        //split to 3 segments\n+        Map<Double, Double> keyRanges = new HashMap<>();\n+        keyRanges.put(0.0, 0.25);\n+        keyRanges.put(0.25, 0.75);\n+        keyRanges.put(0.75, 1.0);\n+\n+        Stream scaleRollingTxnStream = new StreamImpl(scaleRollingTxnScopeName, scaleRollingTxnStreamName);\n+        if (!controller.scaleStream(scaleRollingTxnStream, Collections.singletonList(0L), keyRanges, executor).getFuture().get()) {\n+            log.error(\"Scale stream: splitting segment into three failed, exiting\");\n+            return;\n+        }\n+\n+        assertEquals(3, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_COUNT, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+        assertEquals(1, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_SPLITS, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+        assertEquals(0, (long) MetricRegistryUtils.getGauge(MetricsNames.SEGMENTS_MERGES, streamTags(scaleRollingTxnScopeName, scaleRollingTxnStreamName)).value());\n+\n+        transaction.flush();\n+        transaction.commit();\n+\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MzU2Mg=="}, "originalCommit": {"oid": "dc9f01e40b5242caff16c83d7eb1246bf6115dfe"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4ee95d0d9dc928a83501b0431b6fb54c718f79", "author": {"user": {"login": "kevinhan88", "name": "Kevin Han"}}, "url": "https://github.com/pravega/pravega/commit/3c4ee95d0d9dc928a83501b0431b6fb54c718f79", "committedDate": "2020-06-08T23:23:16Z", "message": "Issue-4852: use AssertExtensions to assert tested values.\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ecc147d6bb914d7f7ff22fb3036f81e6bab4fd6", "author": {"user": {"login": "kevinhan88", "name": "Kevin Han"}}, "url": "https://github.com/pravega/pravega/commit/7ecc147d6bb914d7f7ff22fb3036f81e6bab4fd6", "committedDate": "2020-06-08T23:31:55Z", "message": "Issue-4852: fail test directly instead of throwing exceptions per code review comments.\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "787c6838e5c91717fdb51858a7b5ccfc54a65c4e", "author": {"user": {"login": "kevinhan88", "name": "Kevin Han"}}, "url": "https://github.com/pravega/pravega/commit/787c6838e5c91717fdb51858a7b5ccfc54a65c4e", "committedDate": "2020-06-08T23:36:32Z", "message": "Issue-4852: minor casting enhancement\n\nSigned-off-by: Kevin Han <kevinhan88@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODcyMDU1", "url": "https://github.com/pravega/pravega/pull/4853#pullrequestreview-426872055", "createdAt": "2020-06-09T07:47:07Z", "commit": {"oid": "787c6838e5c91717fdb51858a7b5ccfc54a65c4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo0NzowN1rOGg8xww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNzo0NzowN1rOGg8xww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIwMzM5NQ==", "bodyText": "It looks like that this code is the same as in scaleSegmentsSealed\nwhat about creating a common method ?\nI am still new with this code, maybe @shrids can give more hints", "url": "https://github.com/pravega/pravega/pull/4853#discussion_r437203395", "createdAt": "2020-06-09T07:47:07Z", "author": {"login": "eolivelli"}, "path": "controller/src/main/java/io/pravega/controller/store/stream/AbstractStreamMetadataStore.java", "diffHunk": "@@ -494,7 +494,13 @@ public OperationContext createContext(String scope, String name) {\n     @Override\n     public CompletableFuture<Void> completeRollingTxn(String scope, String name, Map<Long, Long> sealedActiveEpochSegments,\n                                                       VersionedMetadata<CommittingTransactionsRecord> record, OperationContext context, Executor executor) {\n-        return withCompletion(getStream(scope, name, context).completeRollingTxn(sealedActiveEpochSegments, record), executor);\n+\n+        CompletableFuture<Void> future = withCompletion(getStream(scope, name, context).completeRollingTxn(sealedActiveEpochSegments, record), executor);\n+\n+        future.thenCompose(result -> findNumSplitsMerges(scope, name, context, executor).thenAccept(simpleEntry ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "787c6838e5c91717fdb51858a7b5ccfc54a65c4e"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4dfa9c7dcaed7ce9e14499c7a786a4ff335a90a", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/e4dfa9c7dcaed7ce9e14499c7a786a4ff335a90a", "committedDate": "2020-06-09T13:17:40Z", "message": "Merge branch 'master' into issue-4852"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDk3NTUw", "url": "https://github.com/pravega/pravega/pull/4853#pullrequestreview-427497550", "createdAt": "2020-06-09T20:01:38Z", "commit": {"oid": "e4dfa9c7dcaed7ce9e14499c7a786a4ff335a90a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjczODY2", "url": "https://github.com/pravega/pravega/pull/4853#pullrequestreview-429273866", "createdAt": "2020-06-11T20:41:11Z", "commit": {"oid": "e4dfa9c7dcaed7ce9e14499c7a786a4ff335a90a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ce847aa9af58fbb18f332ece13edb25b32e5557", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/3ce847aa9af58fbb18f332ece13edb25b32e5557", "committedDate": "2020-06-11T20:41:17Z", "message": "Merge branch 'master' into issue-4852"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3525, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}