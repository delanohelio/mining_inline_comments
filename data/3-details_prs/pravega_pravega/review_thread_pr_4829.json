{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTg4MDEz", "number": 4829, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxMjoxMVrOEByjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxMjoxMVrOEByjGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzEyMjE5OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/pravega/client/stream/impl/TransactionalEventStreamWriterImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxMjoxMlrOGd2YRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMjoxM1rOGd5ZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1MjgzNw==", "bodyText": "question: why do we need to get the segments for a txn again? when you create a txn, controller returns the txn segments, right?\nso when is this getTxn api useful?", "url": "https://github.com/pravega/pravega/pull/4829#discussion_r433952837", "createdAt": "2020-06-02T15:12:12Z", "author": {"login": "shiveshr"}, "path": "client/src/main/java/io/pravega/client/stream/impl/TransactionalEventStreamWriterImpl.java", "diffHunk": "@@ -198,13 +199,19 @@ private void throwIfClosed() throws TxnFailedException {\n \n     @Override\n     public Transaction<Type> getTxn(UUID txId) {\n-        StreamSegments segments = getAndHandleExceptions(\n-                controller.getCurrentSegments(stream.getScope(), stream.getStreamName()), RuntimeException::new);\n+        // check if the transaction is open.\n         Status status = getAndHandleExceptions(controller.checkTransactionStatus(stream, txId), RuntimeException::new);\n         if (status != Status.OPEN) {\n             return new TransactionImpl<>(writerId, txId, controller, stream);\n         }\n-        \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c8d8dbaab60fae196afb0f05fd508903ce937e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMjI0OA==", "bodyText": "TransactionalEventStreamWriter enables users to created transactions. The user can use\n\nTransactionalEventStreamWriter#beginTxn() to create a new transaction\nTransactionalEventStreamWriter#getTxn(UUID txnId) to fetch an already created transaction given its id. This is useful when the user knows a txnId and wants to perform operations on that transaction.\n\nBoth the above APIs return a io.pravega.client.stream.Transaction using which the user can\na. Write events to a transaction, Transaction#writeEvent\nb. Commit a transaction, Transaction#commit() \nc. Abort a transaction, Transaction#abort()\nd. Check the status of the transaction Transaction#checkStatus().\nThe new controller API ensures the correct segments are fetched when the user uses  [2.] getTxn(txnId) API.", "url": "https://github.com/pravega/pravega/pull/4829#discussion_r434002248", "createdAt": "2020-06-02T16:12:13Z", "author": {"login": "shrids"}, "path": "client/src/main/java/io/pravega/client/stream/impl/TransactionalEventStreamWriterImpl.java", "diffHunk": "@@ -198,13 +199,19 @@ private void throwIfClosed() throws TxnFailedException {\n \n     @Override\n     public Transaction<Type> getTxn(UUID txId) {\n-        StreamSegments segments = getAndHandleExceptions(\n-                controller.getCurrentSegments(stream.getScope(), stream.getStreamName()), RuntimeException::new);\n+        // check if the transaction is open.\n         Status status = getAndHandleExceptions(controller.checkTransactionStatus(stream, txId), RuntimeException::new);\n         if (status != Status.OPEN) {\n             return new TransactionImpl<>(writerId, txId, controller, stream);\n         }\n-        \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1MjgzNw=="}, "originalCommit": {"oid": "d3c8d8dbaab60fae196afb0f05fd508903ce937e"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4356, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}