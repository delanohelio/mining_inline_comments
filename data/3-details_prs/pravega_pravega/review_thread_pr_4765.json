{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjQwMDE5", "number": 4765, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToyNjoyMlrOD5lcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozMTowMlrOD5lh3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA4ODQwOnYy", "diffSide": "LEFT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/AppendDecoder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToyNjoyMlrOGQ8LZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDo0MzoxM1rOGSCB8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjM1Ng==", "bodyText": "See this comment for why this copy was added. We need to test to confirm this will not cause problemms.", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r420416356", "createdAt": "2020-05-05T21:26:22Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/AppendDecoder.java", "diffHunk": "@@ -163,22 +205,15 @@ private ByteBuf getAppendDataBuf(WireCommands.AppendBlockEnd blockEnd, int sizeO\n                 // Work around a bug in netty:\n                 // See https://github.com/netty/netty/issues/5597\n                 if (appendDataBuf.readableBytes() == 0) {\n-                    appendDataBuf.release();\n+                    currentBlock.release();\n                     appendDataBuf = wrappedBuffer(((WireCommands.PartialEvent) cmd).getData(), blockEnd.getData());\n                 } else {\n                     appendDataBuf = wrappedBuffer(appendDataBuf, ((WireCommands.PartialEvent) cmd).getData(), blockEnd.getData());\n                 }\n             }\n         }\n \n-        // Make a copy of the ByteBuf as the readable bytes of the result may be significantly less than the total allocated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MzI5Ng==", "bodyText": "@RaulGracia is testing this with unthrottled loads. If we don't get any memory problems we should be OK.\nSince we've added that extra copy we have made numerous improvements in the Segment Stores' throttler and it is now a lot more aggressive in keeping incoming data flow under control. My expectation is that this should no longer be an issue and I want to see if it actually serves any purpose.\nIn addition, there is no longer a heap issue, as none of the source buffers are stored in the heap (the changes I made in WireCommands eliminated the heap buffer allocations). This will now point to sliced direct mem buffers from Netty.", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r420463296", "createdAt": "2020-05-05T23:17:31Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/AppendDecoder.java", "diffHunk": "@@ -163,22 +205,15 @@ private ByteBuf getAppendDataBuf(WireCommands.AppendBlockEnd blockEnd, int sizeO\n                 // Work around a bug in netty:\n                 // See https://github.com/netty/netty/issues/5597\n                 if (appendDataBuf.readableBytes() == 0) {\n-                    appendDataBuf.release();\n+                    currentBlock.release();\n                     appendDataBuf = wrappedBuffer(((WireCommands.PartialEvent) cmd).getData(), blockEnd.getData());\n                 } else {\n                     appendDataBuf = wrappedBuffer(appendDataBuf, ((WireCommands.PartialEvent) cmd).getData(), blockEnd.getData());\n                 }\n             }\n         }\n \n-        // Make a copy of the ByteBuf as the readable bytes of the result may be significantly less than the total allocated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjM1Ng=="}, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MDgxNw==", "bodyText": "We executed several perf tests and had no issues.", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r421560817", "createdAt": "2020-05-07T14:43:13Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/AppendDecoder.java", "diffHunk": "@@ -163,22 +205,15 @@ private ByteBuf getAppendDataBuf(WireCommands.AppendBlockEnd blockEnd, int sizeO\n                 // Work around a bug in netty:\n                 // See https://github.com/netty/netty/issues/5597\n                 if (appendDataBuf.readableBytes() == 0) {\n-                    appendDataBuf.release();\n+                    currentBlock.release();\n                     appendDataBuf = wrappedBuffer(((WireCommands.PartialEvent) cmd).getData(), blockEnd.getData());\n                 } else {\n                     appendDataBuf = wrappedBuffer(appendDataBuf, ((WireCommands.PartialEvent) cmd).getData(), blockEnd.getData());\n                 }\n             }\n         }\n \n-        // Make a copy of the ByteBuf as the readable bytes of the result may be significantly less than the total allocated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjM1Ng=="}, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzA5NDE3OnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToyODoxN1rOGQ8PDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxNDo1MlrOGQ--Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNzI5Mw==", "bodyText": "I don't see a corresponding retain", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r420417293", "createdAt": "2020-05-05T21:28:17Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -582,26 +591,32 @@ public void writeFields(DataOutput out) throws IOException {\n             out.writeLong(requestId);\n         }\n \n-        public static WireCommand readFrom(ByteBufInputStream in, int length) throws IOException {\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n             UUID writerId = new UUID(in.readLong(), in.readLong());\n             int sizeOfHeaderlessAppends = in.readInt();\n             int dataLength = in.readInt();\n-            byte[] data;\n+            ByteBuf data;\n             if (dataLength > 0) {\n-                data = new byte[dataLength];\n-                in.readFully(data);\n+                data = in.readFully(dataLength);\n             } else {\n-                data = new byte[0];\n+                data = EMPTY_BUFFER;\n             }\n             int numEvents = in.readInt();\n             long lastEventNumber = in.readLong();\n             long requestId = in.available() >= Long.BYTES ? in.readLong() : -1L;\n-            return new AppendBlockEnd(writerId, sizeOfHeaderlessAppends, wrappedBuffer(data), numEvents, lastEventNumber, requestId);\n+            return new AppendBlockEnd(writerId, sizeOfHeaderlessAppends, data.retain(), numEvents, lastEventNumber, requestId)\n+                    .requireRelease();\n+        }\n+\n+        @Override\n+        void releaseInternal() {\n+            this.data.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MjE3MQ==", "bodyText": "6 lines above.", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r420462171", "createdAt": "2020-05-05T23:14:52Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/main/java/io/pravega/shared/protocol/netty/WireCommands.java", "diffHunk": "@@ -582,26 +591,32 @@ public void writeFields(DataOutput out) throws IOException {\n             out.writeLong(requestId);\n         }\n \n-        public static WireCommand readFrom(ByteBufInputStream in, int length) throws IOException {\n+        public static WireCommand readFrom(EnhancedByteBufInputStream in, int length) throws IOException {\n             UUID writerId = new UUID(in.readLong(), in.readLong());\n             int sizeOfHeaderlessAppends = in.readInt();\n             int dataLength = in.readInt();\n-            byte[] data;\n+            ByteBuf data;\n             if (dataLength > 0) {\n-                data = new byte[dataLength];\n-                in.readFully(data);\n+                data = in.readFully(dataLength);\n             } else {\n-                data = new byte[0];\n+                data = EMPTY_BUFFER;\n             }\n             int numEvents = in.readInt();\n             long lastEventNumber = in.readLong();\n             long requestId = in.available() >= Long.BYTES ? in.readLong() : -1L;\n-            return new AppendBlockEnd(writerId, sizeOfHeaderlessAppends, wrappedBuffer(data), numEvents, lastEventNumber, requestId);\n+            return new AppendBlockEnd(writerId, sizeOfHeaderlessAppends, data.retain(), numEvents, lastEventNumber, requestId)\n+                    .requireRelease();\n+        }\n+\n+        @Override\n+        void releaseInternal() {\n+            this.data.release();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNzI5Mw=="}, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzEwMzAzOnYy", "diffSide": "RIGHT", "path": "shared/protocol/src/test/java/io/pravega/shared/protocol/netty/AppendEncodeDecodeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozMTowMlrOGQ8Ukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxNDoxNVrOGQ-9cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxODcwNg==", "bodyText": "Does this number have to be 1 for the test to pass? If so there should be a comment explaining it.", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r420418706", "createdAt": "2020-05-05T21:31:02Z", "author": {"login": "tkaitchuck"}, "path": "shared/protocol/src/test/java/io/pravega/shared/protocol/netty/AppendEncodeDecodeTest.java", "diffHunk": "@@ -219,23 +219,37 @@ public void execute(Runnable runnable) {\n \n         }\n     };\n-\n     @Mock\n     private ChannelHandlerContext ctx;\n     @Mock\n     private Channel ch;\n+    private ByteBuf fakeNetwork;\n+    private BufferReleaseVerifier releaseVerifier;\n+\n+    protected int getThreadPoolSize() {\n+        return 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MTkzNg==", "bodyText": "If it's 0, it uses the InlineExecutor. If it's 1, it uses an executor with 1 thread. This is exactly as it was before, if you look at the modifications in this class, except that now I am using the services from the inherited class as opposed from doing it again.", "url": "https://github.com/pravega/pravega/pull/4765#discussion_r420461936", "createdAt": "2020-05-05T23:14:15Z", "author": {"login": "andreipaduroiu"}, "path": "shared/protocol/src/test/java/io/pravega/shared/protocol/netty/AppendEncodeDecodeTest.java", "diffHunk": "@@ -219,23 +219,37 @@ public void execute(Runnable runnable) {\n \n         }\n     };\n-\n     @Mock\n     private ChannelHandlerContext ctx;\n     @Mock\n     private Channel ch;\n+    private ByteBuf fakeNetwork;\n+    private BufferReleaseVerifier releaseVerifier;\n+\n+    protected int getThreadPoolSize() {\n+        return 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxODcwNg=="}, "originalCommit": {"oid": "081258e578be3b35eb64de775d4c780c4f0581db"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4307, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}