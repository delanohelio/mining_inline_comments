{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzczMzU2", "number": 5092, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxMjowNVrOEcnzag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxMzoyNlrOEcn1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDQ3NzIyOnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxMjowNlrOHHQ23w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoyMjoyOFrOHHWIlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3ODI3MQ==", "bodyText": "Please wait sufficient time before assertion using assert utility tools, or retry a few times here, otherwise when the testing env is slow/busy, the test may fail again from time to time.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477378271", "createdAt": "2020-08-26T15:12:06Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NDcyNA==", "bodyText": "Same response as below.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477464724", "createdAt": "2020-08-26T17:22:28Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3ODI3MQ=="}, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDQ4MzE3OnYy", "diffSide": "RIGHT", "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToxMzoyNlrOHHQ6ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODowNToxM1rOHIbi_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTI2Nw==", "bodyText": "Similarly, wait sufficient time (or retry) before the null check - this is the reason why the test always pass locally but sometimes fail in a loaded env.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477379267", "createdAt": "2020-08-26T15:13:26Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n+        assertEquals(usedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n+        assertEquals(allocatedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n         assertEquals(generationSpread, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_GENERATION_SPREAD).value());\n-        assertEquals(managerIterationDuration, (int) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n+        assertEquals(managerIterationDuration, (long) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n \n         cache.close();\n \n         assertNull(MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NDUzNQ==", "bodyText": "The failure was due to the metric being declared as static as mentioned in the description. Is there anything about this specific metric that warrants a timeout (as opposed to others). I feel like we should be consistent in defining how we perceive success/failure across all the metrics. I don't notice many metrics relying on retries or timeouts.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477464535", "createdAt": "2020-08-26T17:22:11Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n+        assertEquals(usedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n+        assertEquals(allocatedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n         assertEquals(generationSpread, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_GENERATION_SPREAD).value());\n-        assertEquals(managerIterationDuration, (int) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n+        assertEquals(managerIterationDuration, (long) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n \n         cache.close();\n \n         assertNull(MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTI2Nw=="}, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODUwNw==", "bodyText": "The failure was caused by not closing metrics after CacheManager is closed, as the code shows.\nStatic metrics registry is a design dilemma of Micrometer, which might be enhanced, however it's not the direct cause.\nWe've experienced the null assertion problem (not the random number caused by not closing metrics properly), due to the test code talked to registry too soon, before the registry was able to finish the processing. Since we do have assertion tools to address the concern, then why not take this opportunity to make the test robust? - Isn't this fix part of the effort trying to recover from a recent test disaster due to hostile test env?\nRemember in production code, metrics registry doesn't need to talk back to application code. So it is test code's responsibility to ensure things happen as expected.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477538507", "createdAt": "2020-08-26T19:28:37Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n+        assertEquals(usedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n+        assertEquals(allocatedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n         assertEquals(generationSpread, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_GENERATION_SPREAD).value());\n-        assertEquals(managerIterationDuration, (int) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n+        assertEquals(managerIterationDuration, (long) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n \n         cache.close();\n \n         assertNull(MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTI2Nw=="}, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU2MTM1OQ==", "bodyText": "No, that was not the cause of the failure. The direct cause (for the issue introduced with this new metric) was because the metric was declared as static.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477561359", "createdAt": "2020-08-26T20:12:21Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n+        assertEquals(usedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n+        assertEquals(allocatedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n         assertEquals(generationSpread, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_GENERATION_SPREAD).value());\n-        assertEquals(managerIterationDuration, (int) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n+        assertEquals(managerIterationDuration, (long) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n \n         cache.close();\n \n         assertNull(MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTI2Nw=="}, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MDQ2Nw==", "bodyText": "Ok, I thought you were talking about \"static\" metric registry.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r477580467", "createdAt": "2020-08-26T20:49:02Z", "author": {"login": "kevinhan88"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n+        assertEquals(usedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n+        assertEquals(allocatedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n         assertEquals(generationSpread, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_GENERATION_SPREAD).value());\n-        assertEquals(managerIterationDuration, (int) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n+        assertEquals(managerIterationDuration, (long) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n \n         cache.close();\n \n         assertNull(MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTI2Nw=="}, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYwMTk4MQ==", "bodyText": "There were two issues with the PR that updated the CacheManager metric:\n\nDeclaring the metric as static. Depending on various timings, the logger likely resolves to a NullStatsLogger before the metrics provider is initialized, preventing any updates to the metric.\nThe CacheManager metrics was not closed, leading to potential residual metrics being reported between disjoint tests.\n\nThis PR is not necessarily to make the test as robust as possible. I would prefer to address any timing issues with the assert statements in a separate issue as it is not related to issues related to this PR (or the PR prompting this one). Many other metrics would have the same problem and it should be addressed with a new issue.", "url": "https://github.com/pravega/pravega/pull/5092#discussion_r478601981", "createdAt": "2020-08-27T18:05:13Z", "author": {"login": "co-jo"}, "path": "segmentstore/server/src/test/java/io/pravega/segmentstore/server/SegmentStoreMetricsTests.java", "diffHunk": "@@ -161,30 +161,30 @@ public void testThrottlerMetrics() {\n \n     @Test\n     public void testCacheManagerMetrics() {\n-        int storedBytes = 10000;\n-        int usedBytes = 1000;\n-        int allocatedBytes = 100;\n+        long storedBytes = 10000;\n+        long usedBytes = 1000;\n+        long allocatedBytes = 100;\n         int generationSpread = 10;\n-        int managerIterationDuration = 1;\n+        long managerIterationDuration = 1;\n \n         int containerId = new Random().nextInt(Integer.MAX_VALUE);\n         @Cleanup\n         SegmentStoreMetrics.CacheManager cache = new SegmentStoreMetrics.CacheManager();\n         cache.report(new CacheState(storedBytes, usedBytes, 0, allocatedBytes, storedBytes), generationSpread, managerIterationDuration);\n \n-        assertEquals(storedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n-        assertEquals(usedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n-        assertEquals(allocatedBytes, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n+        assertEquals(storedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES).value());\n+        assertEquals(usedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_USED_SIZE_BYTES).value());\n+        assertEquals(allocatedBytes, (long) MetricRegistryUtils.getGauge(MetricsNames.CACHE_ALLOC_SIZE_BYTES).value());\n         assertEquals(generationSpread, (int) MetricRegistryUtils.getGauge(MetricsNames.CACHE_GENERATION_SPREAD).value());\n-        assertEquals(managerIterationDuration, (int) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n+        assertEquals(managerIterationDuration, (long) MetricRegistryUtils.getTimer(MetricsNames.CACHE_MANAGER_ITERATION_DURATION).mean(TimeUnit.MILLISECONDS));\n \n         cache.close();\n \n         assertNull(MetricRegistryUtils.getGauge(MetricsNames.CACHE_STORED_SIZE_BYTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM3OTI2Nw=="}, "originalCommit": {"oid": "7a609ae5b9b817aec490eb43505f04277ce70600"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4642, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}