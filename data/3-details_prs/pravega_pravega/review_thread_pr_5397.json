{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzkxMjAx", "number": 5397, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTo1NjowOVrOE_8kjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjowMDoxMFrOE_8syA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDg4MTQzOnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTo1NjowOVrOH97axQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjowODoyNlrOH-9lBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY5ODY5Mw==", "bodyText": "It looks like the segmentNames argument is not used.", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r534698693", "createdAt": "2020-12-03T05:56:09Z", "author": {"login": "eolivelli"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MjY2MA==", "bodyText": "currently yes.", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r535782660", "createdAt": "2020-12-04T02:08:26Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY5ODY5Mw=="}, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDkwMjQ4OnYy", "diffSide": "RIGHT", "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNjowMDoxMFrOH97pTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNDowOVrOIBqssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMjQxNA==", "bodyText": "Why so you need to start the computation this way?\nWhy not just submitting the operation to the thread pool?\nThe weird fact is that the operation returns a CompletableFuture so we may expect it to be already an asynchronous operation (but probably this is not always the case?)", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r534702414", "createdAt": "2020-12-03T06:00:10Z", "author": {"login": "eolivelli"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {\n+        return CompletableFuture.completedFuture(null).thenComposeAsync(v -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ2NzI4OQ==", "bodyText": "I didn't find any equivalent to CompletableFuture::ComposeAsync().\nWe definitely want to run this method and lambda supplied on storage thread pool and not on core thread pool.", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r535467289", "createdAt": "2020-12-03T18:12:38Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {\n+        return CompletableFuture.completedFuture(null).thenComposeAsync(v -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMjQxNA=="}, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY4NDQwNQ==", "bodyText": "Use CompletableFuture.runAsync or CompletableFuture.supplyAsync, and inside that you execute your code. It's much simpler and more elegant.", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r535684405", "createdAt": "2020-12-03T22:17:41Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {\n+        return CompletableFuture.completedFuture(null).thenComposeAsync(v -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMjQxNA=="}, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4MTc2MQ==", "bodyText": "CompletableFuture.supplyAsync can't compose.\n\nRequired type: CompletableFuture<R>\nProvided: CompletableFuture<CompletableFuture<R>>\n\nno instance(s) of type variable(s) exist so that CompletableFuture<R> conforms to R inference variable U has incompatible bounds: equality constraints: R lower bounds: CompletableFuture<R>", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r535781761", "createdAt": "2020-12-04T02:05:49Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {\n+        return CompletableFuture.completedFuture(null).thenComposeAsync(v -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMjQxNA=="}, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxOTA1Ng==", "bodyText": "OK, let's file a follow-up issue to clean this class up for the next release.", "url": "https://github.com/pravega/pravega/pull/5397#discussion_r538619056", "createdAt": "2020-12-08T17:14:09Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/chunklayer/ChunkedSegmentStorage.java", "diffHunk": "@@ -753,6 +754,30 @@ private void release(String... segmentNames) {\n         }\n     }\n \n+    /**\n+     * Executes the given Callable asynchronously and concurrently.\n+     * It returns a CompletableFuture that will be completed with the result.\n+     * The operations are assumed to be independent of other operations.\n+     *\n+     * @param operation    The Callable to execute.\n+     * @param <R>       Return type of the operation.\n+     * @param segmentNames The names of the Segments involved in this operation (for sequencing purposes).\n+     * @return A CompletableFuture that, when completed, will contain the result of the operation.\n+     * If the operation failed, it will contain the cause of the failure.\n+     * */\n+    private <R> CompletableFuture<R> executeParallel(Callable<CompletableFuture<R>> operation, String... segmentNames) {\n+        return CompletableFuture.completedFuture(null).thenComposeAsync(v -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcwMjQxNA=="}, "originalCommit": {"oid": "25f33fd0c5f976ddc5c395533f040f4371bf5b00"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4581, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}