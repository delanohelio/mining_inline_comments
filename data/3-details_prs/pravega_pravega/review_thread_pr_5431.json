{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDIxNTk1", "number": 5431, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoxMTo0MlrOFGYHFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoxMTo0MlrOFGYHFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjMwODA0OnYy", "diffSide": "LEFT", "path": "cli/admin/src/main/java/io/pravega/cli/admin/dataRecovery/DurableLogRecoveryCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoxMTo0MlrOIHXN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoxMTo0MlrOIHXN1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5MTMxNg==", "bodyText": "zkClient and dataLogFactory need not to be closed, as they are initialized with @CleanUp tag. In case of an exception, it will be popped up and cleanUp will clean these variables.", "url": "https://github.com/pravega/pravega/pull/5431#discussion_r544591316", "createdAt": "2020-12-16T20:11:42Z", "author": {"login": "ManishKumarKeshri"}, "path": "cli/admin/src/main/java/io/pravega/cli/admin/dataRecovery/DurableLogRecoveryCommand.java", "diffHunk": "@@ -91,55 +85,43 @@\n     public DurableLogRecoveryCommand(CommandArgs args) {\n         super(args);\n         this.containerCount = getServiceConfig().getContainerCount();\n-        this.storageFactory = createStorageFactory(executorService);\n-        this.storage = this.storageFactory.createStorageAdapter();\n-        this.zkClient = createZKClient();\n+        this.storageFactory = createStorageFactory(this.executorService);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        @Cleanup\n+        Storage storage = this.storageFactory.createStorageAdapter();\n+        @Cleanup\n+        val zkClient = createZKClient();\n \n         val bkConfig = getCommandArgs().getState().getConfigBuilder()\n                 .include(BookKeeperConfig.builder().with(BookKeeperConfig.ZK_ADDRESS, getServiceConfig().getZkURL()))\n                 .build().getConfig(BookKeeperConfig::builder);\n-        this.dataLogFactory = new BookKeeperLogFactory(bkConfig, this.zkClient, executorService);\n-    }\n-\n-    @Override\n-    public void close() throws Exception {\n-        if (this.dataLogFactory != null) {\n-            this.dataLogFactory.close();\n-        }\n-        this.zkClient.close();\n-        this.storage.close();\n-        ExecutorServiceHelpers.shutdown(Duration.ofSeconds(2), executorService);\n-    }\n+        @Cleanup\n+        val dataLogFactory = new BookKeeperLogFactory(bkConfig, zkClient, executorService);\n \n-    @Override\n-    public void execute() throws Exception {\n         outputInfo(\"Container Count = %d\", this.containerCount);\n \n-        try {\n-            this.dataLogFactory.initialize();\n-        } catch (DurableDataLogException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07a10964bc78557a222b78b105ad791d7281dbd9"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4616, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}