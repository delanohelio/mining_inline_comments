{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjEwNjgx", "number": 5373, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OToyNFrOE9ekQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OToyNFrOE9ekQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODk5MzkyOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/io/pravega/client/CredentialsExtractorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1OToyNFrOH6L5nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0MDo0MFrOH6TSbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDQyOA==", "bodyText": "Isn't this test similar to test testLoadsLegacyCredentialsUsingNewInterfacePackage? I think it is similar because\n\nboth LegacyCredentials1 and LegacyCredentials2 implement io.pravega.client.stream.impl.Credentials.  (older interface)\nThe test uses the latest io.pravega.client.stream.impl.Credentials interface (which extends io.pravega.shared.security.auth.Credentials)\nServiceLoader.load(io.pravega.shared.security.auth.Credentials) lists the impls of the older interface too.\n\nIf the above point is true then we need not check the implementations of the older interface in method ClientConfig.credentialFromMap()", "url": "https://github.com/pravega/pravega/pull/5373#discussion_r530774428", "createdAt": "2020-11-26T04:59:24Z", "author": {"login": "shrids"}, "path": "client/src/test/java/io/pravega/client/CredentialsExtractorTest.java", "diffHunk": "@@ -190,6 +190,43 @@ public void testLoadsCredentialsObjOfARegisteredTypeFromEnvVariablesIfLoadDynami\n                 credentials.getAuthenticationType());\n     }\n \n+    @Test\n+    public void testLoadsLegacyCredentialsUsingNewInterfacePackage() {\n+        // This method depends on service definition in\n+        // resources/META-INF/services/io.pravega.shared.security.auth.Credentials file.\n+        Map<String, String> authEnvVariables = new HashMap<>();\n+        authEnvVariables.put(\"pravega_client_auth_loadDynamic\", \"true\");\n+        authEnvVariables.put(\"pravega_client_auth_method\", LegacyCredentials1.AUTHENTICATION_METHOD);\n+\n+        ClientConfig clientConfig = ClientConfig.builder()\n+                .extractCredentials(null, authEnvVariables)\n+                .build();\n+        Credentials credentials = clientConfig.getCredentials();\n+\n+        assertNotNull(\"Credentials is null\", credentials);\n+        assertNotNull(LegacyCredentials1.class.getName(), credentials.getClass());\n+        assertEquals(\"Expected a different authentication type\", LegacyCredentials1.AUTHENTICATION_METHOD,\n+                credentials.getAuthenticationType());\n+    }\n+\n+    @Test\n+    public void testLoadsLegacyCredentialsUsingOldInterfacePackage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bbc7d9abac42d6d125b961406cd3f2767b0709a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg4MjYzNg==", "bodyText": "The difference in the tests is in how they are setup to load the legacy Credentials class.\nOne is setup using the new interface's service file:\nhttps://github.com/pravega/pravega/blob/7bbc7d9abac42d6d125b961406cd3f2767b0709a/client/src/test/resources/META-INF/services/io.pravega.shared.security.auth.Credentials\nThis simulates the scenario where the existing implementations of the io.pravega.client.stream.impl.Credentials will continue to work if they are specified using the new interface's service file: io.pravega.shared.security.auth.Credentials.\nThe other is setup using the old interface's service file:\nhttps://github.com/pravega/pravega/blob/7bbc7d9abac42d6d125b961406cd3f2767b0709a/client/src/test/resources/META-INF/services/io.pravega.client.stream.impl.Credentials\nThis simulates the scenario where the existing implementations of the io.pravega.client.stream.impl.Credentials will also work if they are specified using the old interface's service file: io.pravega.client.stream.impl.Credentials. So, they will work without any code or configuration changes.\nHope that clarifies. I guess this warrants some documentation in the test to make this more explicit. Will add some comments.", "url": "https://github.com/pravega/pravega/pull/5373#discussion_r530882636", "createdAt": "2020-11-26T09:21:41Z", "author": {"login": "ravisharda"}, "path": "client/src/test/java/io/pravega/client/CredentialsExtractorTest.java", "diffHunk": "@@ -190,6 +190,43 @@ public void testLoadsCredentialsObjOfARegisteredTypeFromEnvVariablesIfLoadDynami\n                 credentials.getAuthenticationType());\n     }\n \n+    @Test\n+    public void testLoadsLegacyCredentialsUsingNewInterfacePackage() {\n+        // This method depends on service definition in\n+        // resources/META-INF/services/io.pravega.shared.security.auth.Credentials file.\n+        Map<String, String> authEnvVariables = new HashMap<>();\n+        authEnvVariables.put(\"pravega_client_auth_loadDynamic\", \"true\");\n+        authEnvVariables.put(\"pravega_client_auth_method\", LegacyCredentials1.AUTHENTICATION_METHOD);\n+\n+        ClientConfig clientConfig = ClientConfig.builder()\n+                .extractCredentials(null, authEnvVariables)\n+                .build();\n+        Credentials credentials = clientConfig.getCredentials();\n+\n+        assertNotNull(\"Credentials is null\", credentials);\n+        assertNotNull(LegacyCredentials1.class.getName(), credentials.getClass());\n+        assertEquals(\"Expected a different authentication type\", LegacyCredentials1.AUTHENTICATION_METHOD,\n+                credentials.getAuthenticationType());\n+    }\n+\n+    @Test\n+    public void testLoadsLegacyCredentialsUsingOldInterfacePackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDQyOA=="}, "originalCommit": {"oid": "7bbc7d9abac42d6d125b961406cd3f2767b0709a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NTQ3MQ==", "bodyText": "Thanks for the clarification. \ud83d\udc4d", "url": "https://github.com/pravega/pravega/pull/5373#discussion_r530895471", "createdAt": "2020-11-26T09:40:40Z", "author": {"login": "shrids"}, "path": "client/src/test/java/io/pravega/client/CredentialsExtractorTest.java", "diffHunk": "@@ -190,6 +190,43 @@ public void testLoadsCredentialsObjOfARegisteredTypeFromEnvVariablesIfLoadDynami\n                 credentials.getAuthenticationType());\n     }\n \n+    @Test\n+    public void testLoadsLegacyCredentialsUsingNewInterfacePackage() {\n+        // This method depends on service definition in\n+        // resources/META-INF/services/io.pravega.shared.security.auth.Credentials file.\n+        Map<String, String> authEnvVariables = new HashMap<>();\n+        authEnvVariables.put(\"pravega_client_auth_loadDynamic\", \"true\");\n+        authEnvVariables.put(\"pravega_client_auth_method\", LegacyCredentials1.AUTHENTICATION_METHOD);\n+\n+        ClientConfig clientConfig = ClientConfig.builder()\n+                .extractCredentials(null, authEnvVariables)\n+                .build();\n+        Credentials credentials = clientConfig.getCredentials();\n+\n+        assertNotNull(\"Credentials is null\", credentials);\n+        assertNotNull(LegacyCredentials1.class.getName(), credentials.getClass());\n+        assertEquals(\"Expected a different authentication type\", LegacyCredentials1.AUTHENTICATION_METHOD,\n+                credentials.getAuthenticationType());\n+    }\n+\n+    @Test\n+    public void testLoadsLegacyCredentialsUsingOldInterfacePackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3NDQyOA=="}, "originalCommit": {"oid": "7bbc7d9abac42d6d125b961406cd3f2767b0709a"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4562, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}