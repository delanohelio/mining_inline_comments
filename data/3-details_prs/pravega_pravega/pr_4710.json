{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODM0MDAw", "number": 4710, "title": "Issue 3994 : List all Segments in Tier 2", "bodyText": "Change log description\nAdded list-segments API to retrieve the segments from Tier 2.\nPurpose of the change\nFixes #3994\nWhat the code does\nBasic implementation of Iterator over the header files in the storage returning SegmentProperties per file.\nThe iterator logic is tailored to the specific underlying storage depending on how the listing of entries works in that implementation.\nFor retrieving StreamSegmentInformation for a particular header file, RollingSegmentHandle is used.\nWhat this doesn't do\nAs of now, the API support is only verified for the FileSystemStorage type. For other storage types such as s3 and HDFS, it will be considered later.\nHow to verify it\nUnit tests added to verify feature.", "createdAt": "2020-04-20T05:29:34Z", "url": "https://github.com/pravega/pravega/pull/4710", "merged": true, "mergeCommit": {"oid": "5e89a55ac03d94e6426909346d89a4e89a113764"}, "closed": true, "closedAt": "2020-05-27T16:27:41Z", "author": {"login": "ManishKumarKeshri"}, "timelineItems": {"totalCount": 58, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZYKqAgH2gAyNDA1ODM0MDAwOjdkMWQ5MTc4MDNjMTA2Y2JlNmM5ZmVlZDk4ODBmYTVjNzcyNTI0NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclapZtAFqTQxOTMxNTg1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d1d917803c106cbe6c9feed9880fa5c77252459", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7d1d917803c106cbe6c9feed9880fa5c77252459", "committedDate": "2020-04-20T05:23:33Z", "message": "Fixing build failure.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c51ab1f03d4e84010d690d698c3c5a5c627360b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8c51ab1f03d4e84010d690d698c3c5a5c627360b", "committedDate": "2020-04-20T06:05:08Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7edd5dc0581c7b99e9787bf8cdce431671754c4e", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7edd5dc0581c7b99e9787bf8cdce431671754c4e", "committedDate": "2020-04-20T06:05:53Z", "message": "Updating Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c04d0a1e65b160bd00e38fdb6e5752cd36ebc780", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/c04d0a1e65b160bd00e38fdb6e5752cd36ebc780", "committedDate": "2020-04-20T08:03:34Z", "message": "Updating checksytle failure.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94f5dc1750783ba6368adfc6459a8bdd4d52f52", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/b94f5dc1750783ba6368adfc6459a8bdd4d52f52", "committedDate": "2020-04-20T10:54:56Z", "message": "Merge branch 'master' into issue-3994-list-segments-tier2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e3da181b54e386f139126e33576e2f27b307700", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6e3da181b54e386f139126e33576e2f27b307700", "committedDate": "2020-04-21T08:17:38Z", "message": "Fixing code coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8efa1413a79adf38e3a794bba7d0e92e8c812ef", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/f8efa1413a79adf38e3a794bba7d0e92e8c812ef", "committedDate": "2020-04-21T17:06:23Z", "message": "Update Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d59cd896861148e3946039c4a7586e6e6cc768d8", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/d59cd896861148e3946039c4a7586e6e6cc768d8", "committedDate": "2020-04-21T17:34:00Z", "message": "Fixing build failure.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6699a3fcd3d7e692ce2a4ae49977017c6bab9e87", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6699a3fcd3d7e692ce2a4ae49977017c6bab9e87", "committedDate": "2020-04-21T17:34:00Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e11419268bb988572732fd6ea8c8cb9239b7e39d", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e11419268bb988572732fd6ea8c8cb9239b7e39d", "committedDate": "2020-04-21T17:34:00Z", "message": "Updating Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86da22cb454570272ac13df26cd55c44a765873c", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/86da22cb454570272ac13df26cd55c44a765873c", "committedDate": "2020-04-21T17:34:00Z", "message": "Updating checksytle failure.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "536df7e96641a115223f098a6aa2464203346990", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/536df7e96641a115223f098a6aa2464203346990", "committedDate": "2020-04-21T17:34:00Z", "message": "Fixing code coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2b0c704de1fccaf441be91ad64ddf31db63b1f4", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e2b0c704de1fccaf441be91ad64ddf31db63b1f4", "committedDate": "2020-04-21T17:34:00Z", "message": "Update Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf91ded6753ad226388e98631eed452da6b5fe86", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/cf91ded6753ad226388e98631eed452da6b5fe86", "committedDate": "2020-04-22T01:44:14Z", "message": "Merge branch 'master' into issue-3994-list-segments-tier2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0d965ee149ab9379c27390fc87edc92b3fd4d7", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/9c0d965ee149ab9379c27390fc87edc92b3fd4d7", "committedDate": "2020-04-22T09:38:26Z", "message": "Unit tests for next and hasNext in HDFSStorage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64122c3bf64db37811d895d2d2db8a1b02647226", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/64122c3bf64db37811d895d2d2db8a1b02647226", "committedDate": "2020-04-23T04:46:41Z", "message": "Improving coverage - adding unit tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070de301e3c747f925c5ef16fa3bfe9c7823c5d8", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/070de301e3c747f925c5ef16fa3bfe9c7823c5d8", "committedDate": "2020-04-23T04:57:15Z", "message": "Merge branch 'issue-3994-list-segments-tier2' of https://github.com/ManishKumarKeshri/pravega into issue-3994-list-segments-tier2\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daa7f22ff9362e44c394873bf27f40d722e6deec", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/daa7f22ff9362e44c394873bf27f40d722e6deec", "committedDate": "2020-04-23T06:16:44Z", "message": "Updating tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "497be9df9bf86678292ea665a962def12b6c45c3", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/497be9df9bf86678292ea665a962def12b6c45c3", "committedDate": "2020-04-23T07:49:12Z", "message": "Updating checkstyle fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afbc92806f91f1855df840f40002c56f279f8730", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/afbc92806f91f1855df840f40002c56f279f8730", "committedDate": "2020-04-23T22:29:24Z", "message": "Improving coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a1111dd26ddcb9120c8bed1151c090cc8ecee31", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8a1111dd26ddcb9120c8bed1151c090cc8ecee31", "committedDate": "2020-04-27T02:41:20Z", "message": "Adding tests in HDFSStorageTests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "681b7fd3f3ab0d780f3ae56a61a6a9c341a94ba2", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/681b7fd3f3ab0d780f3ae56a61a6a9c341a94ba2", "committedDate": "2020-04-27T02:45:15Z", "message": "Updating tests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ebaae089358e5194ebd248f93819a86ad8901dd", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6ebaae089358e5194ebd248f93819a86ad8901dd", "committedDate": "2020-04-27T03:42:23Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjk2MDY2", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-401296066", "createdAt": "2020-04-27T20:20:52Z", "commit": {"oid": "6ebaae089358e5194ebd248f93819a86ad8901dd"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b6448c48d8a2a7d86e49a614eeed1113daa2aa0", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/4b6448c48d8a2a7d86e49a614eeed1113daa2aa0", "committedDate": "2020-04-28T05:15:26Z", "message": "Updating RollingStorageMocktests\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0d45d78c3bfad0703c67731b9e323f7e654e41", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/3c0d45d78c3bfad0703c67731b9e323f7e654e41", "committedDate": "2020-04-28T06:53:41Z", "message": "Updating HDFSMocktests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a58cf7260fbca615544acb4888ef198a33c3e88", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8a58cf7260fbca615544acb4888ef198a33c3e88", "committedDate": "2020-04-28T06:59:21Z", "message": "Updating checkstylefail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b62742ea535732731b524e03c55a396d7c72bd", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/55b62742ea535732731b524e03c55a396d7c72bd", "committedDate": "2020-04-28T07:44:01Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f22058726920727679c2e1a580f8225bef17609", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/0f22058726920727679c2e1a580f8225bef17609", "committedDate": "2020-04-28T07:57:53Z", "message": "Updating build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e292c9623ceffbab627aa683139879844929fd9", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6e292c9623ceffbab627aa683139879844929fd9", "committedDate": "2020-04-28T09:31:23Z", "message": "Improving coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74186daa32d81186d5a82eeca93d62a7a4d00b75", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/74186daa32d81186d5a82eeca93d62a7a4d00b75", "committedDate": "2020-04-28T16:54:12Z", "message": "Updating FileSystemMockTests.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "471adbd7088295f8b678fa20f996d7aef106879f", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/471adbd7088295f8b678fa20f996d7aef106879f", "committedDate": "2020-04-29T16:26:01Z", "message": "Updating Javadoc.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDc5NDQ3", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-403079447", "createdAt": "2020-04-29T22:16:54Z", "commit": {"oid": "471adbd7088295f8b678fa20f996d7aef106879f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoxNjo1NFrOGOTDPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMDoxOVrOGOTIIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0NTM3NQ==", "bodyText": "I suggest returning StreamSegmentInformation.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r417645375", "createdAt": "2020-04-29T22:16:54Z", "author": {"login": "sachin-j-joshi"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageSegmentIteratorMockTests.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.rolling;\n+\n+import io.pravega.common.util.ImmutableDate;\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.contracts.StreamingException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.Mockito;\n+\n+import java.time.Duration;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.UUID;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+\n+public class RollingStorageSegmentIteratorMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final SegmentRollingPolicy DEFAULT_ROLLING_POLICY = new SegmentRollingPolicy(100);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    /**\n+     * Tests the scenario when openHandle method throws StreamingException exception during the method under test execution.\n+     * @throws StreamingException openHandle method mocked to throw this exception.\n+     */\n+    @Test\n+    public void testNext() throws StreamingException {\n+        RollingStorageSegmentIteratorMockTests.TestRollingStorageSegmentIterator testRollingStorageSegmentIterator = new\n+                RollingStorageSegmentIteratorMockTests.TestRollingStorageSegmentIterator(null, null,\n+                null);\n+        val baseStorage = new InMemoryStorage();\n+        testRollingStorageSegmentIterator.instance = Mockito.spy(new RollingStorage(baseStorage, DEFAULT_ROLLING_POLICY));\n+        testRollingStorageSegmentIterator.current = new SegmentProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471adbd7088295f8b678fa20f996d7aef106879f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0NjYyNA==", "bodyText": "I don't think we need to check isDebugEnabled", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r417646624", "createdAt": "2020-04-29T22:20:19Z", "author": {"login": "sachin-j-joshi"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -187,6 +189,37 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"OS_OPEN_STREAM\", justification = \"Rare operation. The leaked object is collected by GC. In case of a iteraror in a for loop this would be fast.\")\n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471adbd7088295f8b678fa20f996d7aef106879f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ec36fd30483341468c92d82ebf73b0df9c740a", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/a8ec36fd30483341468c92d82ebf73b0df9c740a", "committedDate": "2020-04-30T19:34:10Z", "message": "Removed redundant tests in HDFSStorageTest. Removed log Enabled check.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a13459619919d33acc30530cc98e199c43fbef", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/00a13459619919d33acc30530cc98e199c43fbef", "committedDate": "2020-04-30T19:58:57Z", "message": "Updating SegmentProperties Initialization.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTE2MDQ4", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-403916048", "createdAt": "2020-04-30T22:18:52Z", "commit": {"oid": "00a13459619919d33acc30530cc98e199c43fbef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff72696905c64ec6e62a70ffd094bd73e06e87b", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/6ff72696905c64ec6e62a70ffd094bd73e06e87b", "committedDate": "2020-05-01T09:54:59Z", "message": "Fixing spelling mistakes.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efe58e26934868de63175124131be2d50d5c72be", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/efe58e26934868de63175124131be2d50d5c72be", "committedDate": "2020-05-01T21:20:07Z", "message": "Merge branch 'master' into issue-3994-list-segments-tier2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NDA3MTgx", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-404407181", "createdAt": "2020-05-01T21:20:53Z", "commit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMToyMDo1M1rOGPWDYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTozNDoyMVrOGPWU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MzEzNw==", "bodyText": "Make all of these private.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418743137", "createdAt": "2020-05-01T21:20:53Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -181,6 +185,71 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return new ExtendedS3SegmentIterator(s3object -> true);\n+    }\n+\n+    /**\n+     * Iterator for segments in ExtendedS3Storage.\n+     */\n+    public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {\n+        ListObjectsResult results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDAxNQ==", "bodyText": "This doesn't work as it should. In an Iterator, when you invoke next, you get the \"next\" result and on a subsequent invocation, you should get the following item.\nYour implementation does not do this. Actually it seems to to advance the \"next\" every time you invoke hasNext ... so if you do:\ni.hasNext();\ni.hasNext();\n\nthen your iterator has advanced two positions. hasNext should be a side-effect-free operation.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744015", "createdAt": "2020-05-01T21:23:22Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -181,6 +185,71 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return new ExtendedS3SegmentIterator(s3object -> true);\n+    }\n+\n+    /**\n+     * Iterator for segments in ExtendedS3Storage.\n+     */\n+    public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {\n+        ListObjectsResult results;\n+        S3Object current;\n+        Iterator<S3Object> innerIterator;\n+        java.util.function.Predicate<S3Object> patternMatchPredicate;\n+\n+        ExtendedS3SegmentIterator(java.util.function.Predicate<S3Object> patternMatchPredicate) {\n+            this.results = client.listObjects(config.getBucket(), config.getPrefix());\n+            this.innerIterator = results.getObjects().iterator();\n+            this.patternMatchPredicate = patternMatchPredicate;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            boolean nextBatch = false;\n+            while (innerIterator != null) { // Loops through the batches\n+                while (innerIterator.hasNext()) { // Loops through the objects in the batch\n+                    current = innerIterator.next();\n+                    if (patternMatchPredicate.test(current)) {\n+                        return true;\n+                    }\n+                }\n+                if (!innerIterator.hasNext()) { // End of the batch\n+                    if (nextBatch) {    // Already fetched the next batch\n+                        break;\n+                    }\n+                    if (results.getObjects().size() < results.getMaxKeys()) {   // This batch was last if less than max keys were returned.\n+                        break;\n+                    }\n+                    // Fetching from the next batch\n+                    results = client.listMoreObjects(results);\n+                    innerIterator = results.getObjects().iterator();\n+                    nextBatch = true;\n+                }\n+            }\n+            results = null;\n+            innerIterator = null;\n+            current = null;\n+            return false;\n+        }\n+\n+        @Override\n+        public SegmentProperties next() {\n+            if (null != current) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDA3OA==", "bodyText": "Also some of them can be made final", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744078", "createdAt": "2020-05-01T21:23:35Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -181,6 +185,71 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return new ExtendedS3SegmentIterator(s3object -> true);\n+    }\n+\n+    /**\n+     * Iterator for segments in ExtendedS3Storage.\n+     */\n+    public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {\n+        ListObjectsResult results;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0MzEzNw=="}, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDI5MA==", "bodyText": "You should throw this exception. If you just return an empty iterator then the caller will never know something went amiss.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744290", "createdAt": "2020-05-01T21:24:13Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -187,6 +189,34 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"OS_OPEN_STREAM\", justification = \"Rare operation. The leaked object is collected by GC. In case of a iteraror in a for loop this would be fast.\")\n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        try {\n+            return Files.find(Paths.get(config.getRoot()),\n+                    Integer.MAX_VALUE,\n+                    (filePath, fileAttr) -> fileAttr.isRegularFile())\n+                    .map(path -> (SegmentProperties) getStreamSegmentInformation(config.getRoot(), path))\n+                    .iterator();\n+        } catch (IOException e) {\n+            log.error(\"Exception occurred while listing the segments.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDM5NQ==", "bodyText": "What is this?", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744395", "createdAt": "2020-05-01T21:24:31Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -187,6 +189,34 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"OS_OPEN_STREAM\", justification = \"Rare operation. The leaked object is collected by GC. In case of a iteraror in a for loop this would be fast.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDQ1Ng==", "bodyText": "and here", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744456", "createdAt": "2020-05-01T21:24:41Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/filesystem/FileSystemStorage.java", "diffHunk": "@@ -187,6 +189,34 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"OS_OPEN_STREAM\", justification = \"Rare operation. The leaked object is collected by GC. In case of a iteraror in a for loop this would be fast.\")\n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        try {\n+            return Files.find(Paths.get(config.getRoot()),\n+                    Integer.MAX_VALUE,\n+                    (filePath, fileAttr) -> fileAttr.isRegularFile())\n+                    .map(path -> (SegmentProperties) getStreamSegmentInformation(config.getRoot(), path))\n+                    .iterator();\n+        } catch (IOException e) {\n+            log.error(\"Exception occurred while listing the segments.\", e);\n+        }\n+        return Collections.emptyIterator();\n+    }\n+\n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDcxNQ==", "bodyText": "throw it", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744715", "createdAt": "2020-05-01T21:25:22Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/hdfs/HDFSStorage.java", "diffHunk": "@@ -487,6 +491,78 @@ public SegmentHandle create(String streamSegmentName) throws StreamSegmentExcept\n         // return handle\n         return HDFSSegmentHandle.write(streamSegmentName);\n     }\n+\n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        try {\n+            return new HDFSSegmentIterator(this.fileSystem.listStatusIterator(new Path(config.getHdfsRoot() + Path.SEPARATOR)),\n+                    fileStatus -> {\n+                        String fileName = fileStatus.getPath().getName();\n+                        int index = fileName.lastIndexOf(PART_SEPARATOR);\n+                        if (fileName.endsWith(PART_SEPARATOR + SEALED)) {\n+                            return true;\n+                        }\n+                        try {\n+                            Long.parseLong(fileName.substring(index + 1));\n+                        } catch (NumberFormatException nfe) {\n+                            return false;\n+                        }\n+                        return true;\n+                    });\n+        } catch (Exception e) {\n+            log.error(\"Exception occurred while listing the segments.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NDc3NQ==", "bodyText": "Private and final", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418744775", "createdAt": "2020-05-01T21:25:35Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/hdfs/HDFSStorage.java", "diffHunk": "@@ -487,6 +491,78 @@ public SegmentHandle create(String streamSegmentName) throws StreamSegmentExcept\n         // return handle\n         return HDFSSegmentHandle.write(streamSegmentName);\n     }\n+\n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        try {\n+            return new HDFSSegmentIterator(this.fileSystem.listStatusIterator(new Path(config.getHdfsRoot() + Path.SEPARATOR)),\n+                    fileStatus -> {\n+                        String fileName = fileStatus.getPath().getName();\n+                        int index = fileName.lastIndexOf(PART_SEPARATOR);\n+                        if (fileName.endsWith(PART_SEPARATOR + SEALED)) {\n+                            return true;\n+                        }\n+                        try {\n+                            Long.parseLong(fileName.substring(index + 1));\n+                        } catch (NumberFormatException nfe) {\n+                            return false;\n+                        }\n+                        return true;\n+                    });\n+        } catch (Exception e) {\n+            log.error(\"Exception occurred while listing the segments.\", e);\n+        }\n+        return Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Iterator for segments in HDFS Storage.\n+     */\n+    public static class HDFSSegmentIterator implements Iterator<SegmentProperties> {\n+        RemoteIterator<FileStatus> results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NTA3MA==", "bodyText": "same comments as in ExtendedS3Storage.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418745070", "createdAt": "2020-05-01T21:26:29Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/hdfs/HDFSStorage.java", "diffHunk": "@@ -487,6 +491,78 @@ public SegmentHandle create(String streamSegmentName) throws StreamSegmentExcept\n         // return handle\n         return HDFSSegmentHandle.write(streamSegmentName);\n     }\n+\n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        try {\n+            return new HDFSSegmentIterator(this.fileSystem.listStatusIterator(new Path(config.getHdfsRoot() + Path.SEPARATOR)),\n+                    fileStatus -> {\n+                        String fileName = fileStatus.getPath().getName();\n+                        int index = fileName.lastIndexOf(PART_SEPARATOR);\n+                        if (fileName.endsWith(PART_SEPARATOR + SEALED)) {\n+                            return true;\n+                        }\n+                        try {\n+                            Long.parseLong(fileName.substring(index + 1));\n+                        } catch (NumberFormatException nfe) {\n+                            return false;\n+                        }\n+                        return true;\n+                    });\n+        } catch (Exception e) {\n+            log.error(\"Exception occurred while listing the segments.\", e);\n+        }\n+        return Collections.emptyIterator();\n+    }\n+\n+    /**\n+     * Iterator for segments in HDFS Storage.\n+     */\n+    public static class HDFSSegmentIterator implements Iterator<SegmentProperties> {\n+        RemoteIterator<FileStatus> results;\n+        FileStatus current;\n+        java.util.function.Predicate<FileStatus> patternMatchPredicate;\n+\n+        HDFSSegmentIterator(RemoteIterator<FileStatus> results, java.util.function.Predicate<FileStatus> patternMatchPredicate) {\n+            this.results = results;\n+            this.patternMatchPredicate = patternMatchPredicate;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NTYwMw==", "bodyText": "Why is this a shared member?", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418745603", "createdAt": "2020-05-01T21:28:13Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/hdfs/HDFSSegmentIteratorMockTests.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.hdfs;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.IOException;\n+\n+import java.time.Duration;\n+import java.util.NoSuchElementException;\n+import java.util.function.Predicate;\n+\n+import org.mockito.Mockito;\n+\n+public class HDFSSegmentIteratorMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+    private RemoteIterator<FileStatus> results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NTc4Mg==", "bodyText": "this can be made static-final; then you won't need the setup method.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418745782", "createdAt": "2020-05-01T21:28:40Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/test/java/io/pravega/storage/hdfs/HDFSSegmentIteratorMockTests.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.storage.hdfs;\n+\n+import org.apache.hadoop.fs.FileStatus;\n+import org.apache.hadoop.fs.RemoteIterator;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.io.IOException;\n+\n+import java.time.Duration;\n+import java.util.NoSuchElementException;\n+import java.util.function.Predicate;\n+\n+import org.mockito.Mockito;\n+\n+public class HDFSSegmentIteratorMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+    private RemoteIterator<FileStatus> results;\n+    private java.util.function.Predicate<FileStatus> patternMatchPredicate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NjExNQ==", "bodyText": "So ... why is this returning a CompletableFuture if you are always wrapping a sync call?\nJust return Iterator<SegmentProperties from the method.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418746115", "createdAt": "2020-05-01T21:29:35Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/AsyncStorageWrapper.java", "diffHunk": "@@ -138,6 +139,11 @@ public boolean supportsTruncation() {\n         return supplyAsync(() -> this.syncStorage.exists(streamSegmentName), streamSegmentName);\n     }\n \n+    @Override\n+    public CompletableFuture<Iterator<SegmentProperties>> listSegments() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NjY0NA==", "bodyText": "Did you notice that streamSegments is guarded by a lock?\nThis tells you two things:\n\nWrap this call in a synchronized block\nMake a copy of the values() collection in that block and iterate over the copy. That will prevent your iterator from failing if some other thread modifies the collection while you iterate through it.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418746644", "createdAt": "2020-05-01T21:31:19Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryStorage.java", "diffHunk": "@@ -195,6 +196,11 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return this.streamSegments.values().stream().map( s -> s.getInfo()).iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0Njc5OA==", "bodyText": "Private final for all of these", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418746798", "createdAt": "2020-05-01T21:31:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -516,6 +518,59 @@ public boolean supportsTruncation() {\n         return true;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return new RollingStorageSegmentIterator(this, this.baseStorage.listSegments(),\n+                props -> NameUtils.isHeaderSegment(props.getName()));\n+    }\n+\n+    /**\n+     * Iterator for segments in Rolling storage.\n+     */\n+    public static class RollingStorageSegmentIterator implements Iterator<SegmentProperties> {\n+        RollingStorage instance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0Njg2NA==", "bodyText": "Same comment as in the other iterators.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418746864", "createdAt": "2020-05-01T21:32:01Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -516,6 +518,59 @@ public boolean supportsTruncation() {\n         return true;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return new RollingStorageSegmentIterator(this, this.baseStorage.listSegments(),\n+                props -> NameUtils.isHeaderSegment(props.getName()));\n+    }\n+\n+    /**\n+     * Iterator for segments in Rolling storage.\n+     */\n+    public static class RollingStorageSegmentIterator implements Iterator<SegmentProperties> {\n+        RollingStorage instance;\n+        Iterator<SegmentProperties> results;\n+        SegmentProperties current;\n+        java.util.function.Predicate<SegmentProperties> patternMatchPredicate;\n+\n+        RollingStorageSegmentIterator(RollingStorage instance, Iterator<SegmentProperties> results, java.util.function.Predicate<SegmentProperties> patternMatchPredicate) {\n+            this.instance = instance;\n+            this.results = results;\n+            this.patternMatchPredicate = patternMatchPredicate;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (results != null) {\n+                while (results.hasNext()) {\n+                    current = results.next();\n+                    if (patternMatchPredicate.test(current)) {\n+                        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0Njg5MA==", "bodyText": "throw", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418746890", "createdAt": "2020-05-01T21:32:07Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -516,6 +518,59 @@ public boolean supportsTruncation() {\n         return true;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        return new RollingStorageSegmentIterator(this, this.baseStorage.listSegments(),\n+                props -> NameUtils.isHeaderSegment(props.getName()));\n+    }\n+\n+    /**\n+     * Iterator for segments in Rolling storage.\n+     */\n+    public static class RollingStorageSegmentIterator implements Iterator<SegmentProperties> {\n+        RollingStorage instance;\n+        Iterator<SegmentProperties> results;\n+        SegmentProperties current;\n+        java.util.function.Predicate<SegmentProperties> patternMatchPredicate;\n+\n+        RollingStorageSegmentIterator(RollingStorage instance, Iterator<SegmentProperties> results, java.util.function.Predicate<SegmentProperties> patternMatchPredicate) {\n+            this.instance = instance;\n+            this.results = results;\n+            this.patternMatchPredicate = patternMatchPredicate;\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            if (results != null) {\n+                while (results.hasNext()) {\n+                    current = results.next();\n+                    if (patternMatchPredicate.test(current)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            current = null;\n+            return false;\n+        }\n+\n+        @Override\n+        public SegmentProperties next() throws NoSuchElementException {\n+            if (null != this.current) {\n+                try {\n+                    String segmentName = NameUtils.getSegmentNameFromHeader(current.getName());\n+                    val handle = instance.openHandle(segmentName, true);\n+                    return StreamSegmentInformation.builder()\n+                            .name(segmentName)\n+                            .length(handle.length())\n+                            .sealed(handle.isSealed()).build();\n+                } catch (StreamSegmentException e) {\n+                    log.error(\"Exception occurred while fetching the next segment.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0Njk0NQ==", "bodyText": "Why public?", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418746945", "createdAt": "2020-05-01T21:32:19Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -666,7 +721,7 @@ private boolean shouldConcatNatively(RollingSegmentHandle source, RollingSegment\n                 && lastTarget.getLength() + lastSource.getLength() <= target.getRollingPolicy().getMaxLength();\n     }\n \n-    private RollingSegmentHandle openHandle(String segmentName, boolean readOnly) throws StreamSegmentException {\n+    public RollingSegmentHandle openHandle(String segmentName, boolean readOnly) throws StreamSegmentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NzE1Ng==", "bodyText": "In your tests, always initialize your RNG with a constant. That way, if you get a failure, it will be easy to reproduce since you'll always have the same input.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418747156", "createdAt": "2020-05-01T21:33:06Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/StorageTestBase.java", "diffHunk": "@@ -40,17 +47,18 @@\n import static io.pravega.test.common.AssertExtensions.assertThrows;\n \n import static io.pravega.shared.NameUtils.INTERNAL_NAME_PREFIX;\n+\n /**\n  * Base class for testing any implementation of the Storage interface.\n  */\n public abstract class StorageTestBase extends ThreadPooledTestSuite {\n     //region General Test arguments\n-\n     protected static final Duration TIMEOUT = Duration.ofSeconds(30);\n     protected static final long DEFAULT_EPOCH = 1;\n     protected static final int APPENDS_PER_SEGMENT = 10;\n     protected static final String APPEND_FORMAT = \"Segment_%s_Append_%d\";\n     private static final int SEGMENT_COUNT = 4;\n+    private static final Random RANDOM = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0NzYxOQ==", "bodyText": "You can replace this try-catch-assert with  AssertExtensions.assertThrows.\nPlease fix this anywhere else you used this pattern.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r418747619", "createdAt": "2020-05-01T21:34:21Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/test/java/io/pravega/segmentstore/storage/rolling/RollingStorageSegmentIteratorMockTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.segmentstore.storage.rolling;\n+\n+import io.pravega.segmentstore.contracts.SegmentProperties;\n+import io.pravega.segmentstore.contracts.StreamSegmentException;\n+import io.pravega.segmentstore.contracts.StreamSegmentInformation;\n+import io.pravega.segmentstore.contracts.StreamingException;\n+import io.pravega.segmentstore.storage.SegmentRollingPolicy;\n+import io.pravega.segmentstore.storage.mocks.InMemoryStorage;\n+import lombok.val;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.mockito.Mockito;\n+\n+import java.time.Duration;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+\n+public class RollingStorageSegmentIteratorMockTests {\n+    static final Duration TIMEOUT = Duration.ofSeconds(30);\n+    private static final SegmentRollingPolicy DEFAULT_ROLLING_POLICY = new SegmentRollingPolicy(100);\n+    @Rule\n+    public Timeout globalTimeout = Timeout.seconds(TIMEOUT.getSeconds());\n+\n+    /**\n+     * Tests the scenario when openHandle method throws StreamingException exception during the method under test execution.\n+     * @throws StreamingException openHandle method mocked to throw this exception.\n+     */\n+    @Test\n+    public void testNext() throws StreamingException {\n+        RollingStorageSegmentIteratorMockTests.TestRollingStorageSegmentIterator testRollingStorageSegmentIterator = new\n+                RollingStorageSegmentIteratorMockTests.TestRollingStorageSegmentIterator(null, null,\n+                null);\n+        val baseStorage = new InMemoryStorage();\n+        testRollingStorageSegmentIterator.instance = Mockito.spy(new RollingStorage(baseStorage, DEFAULT_ROLLING_POLICY));\n+        testRollingStorageSegmentIterator.current = StreamSegmentInformation.builder()\n+                .name(\"x$header\")\n+                .build();\n+        Mockito.doThrow(mock(StreamSegmentException.class)).when(testRollingStorageSegmentIterator.instance).openHandle(anyString(), anyBoolean());\n+        boolean caughtException = false;\n+        try {\n+            testRollingStorageSegmentIterator.next();\n+        } catch (NoSuchElementException e) {\n+            caughtException = true;\n+        }\n+        Assert.assertTrue(caughtException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe58e26934868de63175124131be2d50d5c72be"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0de0166d1b4e221430a2a832b8f58daceed1378", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e0de0166d1b4e221430a2a832b8f58daceed1378", "committedDate": "2020-05-04T09:01:35Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff7925dec2f64afb8c1a41aef8df700811409d53", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/ff7925dec2f64afb8c1a41aef8df700811409d53", "committedDate": "2020-05-05T06:23:51Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "454ce03009bd8d7cc281c0f615d3ebd9b01a6772", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/454ce03009bd8d7cc281c0f615d3ebd9b01a6772", "committedDate": "2020-05-11T05:26:14Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e21cdbbd623df1a203fb741ad4d4117106449ec8", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/e21cdbbd623df1a203fb741ad4d4117106449ec8", "committedDate": "2020-05-11T06:06:07Z", "message": "Fixing Checksytle fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/b18429d971599194d06d5c6907983cafb53c6e4d", "committedDate": "2020-05-11T07:14:43Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjU0Nzc1", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-413654775", "createdAt": "2020-05-18T14:34:53Z", "commit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDozNDo1M1rOGW6Afg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDo0NjoyOVrOGW6gmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3MjI1NA==", "bodyText": "I think this can be final too.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r426672254", "createdAt": "2020-05-18T14:34:53Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -194,24 +194,36 @@ public boolean supportsTruncation() {\n      * Iterator for segments in ExtendedS3Storage.\n      */\n     public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {\n-        ListObjectsResult results;\n-        S3Object current;\n-        Iterator<S3Object> innerIterator;\n-        java.util.function.Predicate<S3Object> patternMatchPredicate;\n+        private final java.util.function.Predicate<S3Object> patternMatchPredicate;\n+        private ListObjectsResult results;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3NjM3Mg==", "bodyText": "I've been thinking. ...\nThis could be achieved by doing something like:\n(constructor)\ninnerIterator = client.listObjects(config.getBucket(), config.getPrefix()).stream()\n                      .flatMap(r -> r.getObjects().stream())\n                      .filter(patternMatchIPredicate)\n                      .map(this::toSegmentProperties)\n                      .iterator()\n\nhasNext: return innerIterator.hasNext()\nnext: return innerIterator.next()\ntoSegmentProperties: put the code you have in next here\nDoes this work? It may require a couple of adjustments but it should eliminate the need for all this extra code.\nPlease fix the other iterators too.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r426676372", "createdAt": "2020-05-18T14:40:44Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -194,24 +194,36 @@ public boolean supportsTruncation() {\n      * Iterator for segments in ExtendedS3Storage.\n      */\n     public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {\n-        ListObjectsResult results;\n-        S3Object current;\n-        Iterator<S3Object> innerIterator;\n-        java.util.function.Predicate<S3Object> patternMatchPredicate;\n+        private final java.util.function.Predicate<S3Object> patternMatchPredicate;\n+        private ListObjectsResult results;\n+        private Iterator<S3Object> innerIterator;\n+        private S3Object current;\n+        private boolean isAvailable;\n \n         ExtendedS3SegmentIterator(java.util.function.Predicate<S3Object> patternMatchPredicate) {\n             this.results = client.listObjects(config.getBucket(), config.getPrefix());\n             this.innerIterator = results.getObjects().iterator();\n             this.patternMatchPredicate = patternMatchPredicate;\n+            this.isAvailable = false;\n         }\n \n+        /**\n+         * Method to check the presence of next element in the iterator.\n+         * It also sets the position of the current element for Next method, but repetitive call to this method before Next\n+         * will not advance the current element.\n+         * @return true if the next element is there, else false.\n+         */\n         @Override\n         public boolean hasNext() {\n+            if (isAvailable) { // If the method was already called before next method call, return true if last call returned true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3ODQ5Ng==", "bodyText": "This class does not need to be public.\nCan it be static?\nTo better organize the code, please move the class to the bottom of this file. Do not mix methods and inner classes together.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r426678496", "createdAt": "2020-05-18T14:43:49Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -194,24 +194,36 @@ public boolean supportsTruncation() {\n      * Iterator for segments in ExtendedS3Storage.\n      */\n     public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3OTExMA==", "bodyText": "Ideally the toSegmentProperties would share code with doGetStreamSegmentInfo. Both places extract info from S3ObjectMetadata into our own types.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r426679110", "createdAt": "2020-05-18T14:44:45Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/extendeds3/ExtendedS3Storage.java", "diffHunk": "@@ -194,24 +194,36 @@ public boolean supportsTruncation() {\n      * Iterator for segments in ExtendedS3Storage.\n      */\n     public class ExtendedS3SegmentIterator implements Iterator<SegmentProperties> {\n-        ListObjectsResult results;\n-        S3Object current;\n-        Iterator<S3Object> innerIterator;\n-        java.util.function.Predicate<S3Object> patternMatchPredicate;\n+        private final java.util.function.Predicate<S3Object> patternMatchPredicate;\n+        private ListObjectsResult results;\n+        private Iterator<S3Object> innerIterator;\n+        private S3Object current;\n+        private boolean isAvailable;\n \n         ExtendedS3SegmentIterator(java.util.function.Predicate<S3Object> patternMatchPredicate) {\n             this.results = client.listObjects(config.getBucket(), config.getPrefix());\n             this.innerIterator = results.getObjects().iterator();\n             this.patternMatchPredicate = patternMatchPredicate;\n+            this.isAvailable = false;\n         }\n \n+        /**\n+         * Method to check the presence of next element in the iterator.\n+         * It also sets the position of the current element for Next method, but repetitive call to this method before Next\n+         * will not advance the current element.\n+         * @return true if the next element is there, else false.\n+         */\n         @Override\n         public boolean hasNext() {\n+            if (isAvailable) { // If the method was already called before next method call, return true if last call returned true.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3NjM3Mg=="}, "originalCommit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4MDQ3NQ==", "bodyText": "Same comments here:\n\nMake private.\nMove to the bottom of the file\nI don't think you can use stream() here since you are already working with an iterator. Use the Iterators class. There's a filter method that you can use.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r426680475", "createdAt": "2020-05-18T14:46:29Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/hdfs/HDFSStorage.java", "diffHunk": "@@ -511,30 +510,42 @@ public SegmentHandle create(String streamSegmentName) throws StreamSegmentExcept\n                     });\n         } catch (Exception e) {\n             log.error(\"Exception occurred while listing the segments.\", e);\n+            throw e;\n         }\n-        return Collections.emptyIterator();\n     }\n \n     /**\n      * Iterator for segments in HDFS Storage.\n      */\n     public static class HDFSSegmentIterator implements Iterator<SegmentProperties> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18429d971599194d06d5c6907983cafb53c6e4d"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "293a55688c84ce56754adc1792666ec9a9e6cab1", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/293a55688c84ce56754adc1792666ec9a9e6cab1", "committedDate": "2020-05-22T10:02:03Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e8fc5940785925158c1ae359327b4403e4add5f", "author": {"user": {"login": "RaulGracia", "name": "Ra\u00fal Gracia"}}, "url": "https://github.com/pravega/pravega/commit/3e8fc5940785925158c1ae359327b4403e4add5f", "committedDate": "2020-05-22T14:26:12Z", "message": "Merge branch 'master' into issue-3994-list-segments-tier2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "350bcd5eaf4831e182625ca4265f7b0b1c72fd85", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/350bcd5eaf4831e182625ca4265f7b0b1c72fd85", "committedDate": "2020-05-26T01:40:05Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8749dd7b39b1fcf7bc5afe2448dce60bdcd19d35", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/8749dd7b39b1fcf7bc5afe2448dce60bdcd19d35", "committedDate": "2020-05-26T02:14:13Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b92295bb3808ddc74277fbb7985a5ee84619c634", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/b92295bb3808ddc74277fbb7985a5ee84619c634", "committedDate": "2020-05-26T02:59:31Z", "message": "Fixing build fail.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7846e4f5beecbd93a2d8540da9b52f6d23aad3", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/fa7846e4f5beecbd93a2d8540da9b52f6d23aad3", "committedDate": "2020-05-26T04:22:26Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c0141408d29469299509ca45af9659f1e5f1a64", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7c0141408d29469299509ca45af9659f1e5f1a64", "committedDate": "2020-05-26T06:10:41Z", "message": "Improving coverage.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3df5387fe4c7271acc21dc56975e0cdf73225e7", "author": {"user": {"login": "ManishKumarKeshri", "name": "Manish Kumar Keshri"}}, "url": "https://github.com/pravega/pravega/commit/e3df5387fe4c7271acc21dc56975e0cdf73225e7", "committedDate": "2020-05-26T16:23:41Z", "message": "Merge branch 'master' into issue-3994-list-segments-tier2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzM3MTE5", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-418737119", "createdAt": "2020-05-26T23:05:14Z", "commit": {"oid": "e3df5387fe4c7271acc21dc56975e0cdf73225e7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzowNToxNFrOGazL1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzowNjo1MlrOGazNwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NDc3Mg==", "bodyText": "There is no need for this try-catch as the exception will automatically bubble up.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r430754772", "createdAt": "2020-05-26T23:05:14Z", "author": {"login": "andreipaduroiu"}, "path": "bindings/src/main/java/io/pravega/storage/hdfs/HDFSStorage.java", "diffHunk": "@@ -654,5 +667,77 @@ private int readInternal(SegmentHandle handle, byte[] buffer, long offset, int b\n         return length;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() throws IOException {\n+        try {\n+            return new HDFSSegmentIterator(this.fileSystem.listStatus(new Path(config.getHdfsRoot() + Path.SEPARATOR)),\n+                    fileStatus -> {\n+                        String fileName = fileStatus.getPath().getName();\n+                        int index = fileName.lastIndexOf(PART_SEPARATOR);\n+                        if (fileName.endsWith(PART_SEPARATOR + SEALED)) {\n+                            return true;\n+                        }\n+                        try {\n+                            Long.parseLong(fileName.substring(index + 1));\n+                        } catch (NumberFormatException nfe) {\n+                            return false;\n+                        }\n+                        return true;\n+                    });\n+        } catch (Exception e) {\n+            log.error(\"Exception occurred while listing the segments.\", e);\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Iterator for segments in HDFS Storage.\n+     */\n+    private static class HDFSSegmentIterator implements Iterator<SegmentProperties> {\n+        private final Iterator<SegmentProperties> results;\n+\n+        HDFSSegmentIterator(FileStatus[] results, java.util.function.Predicate<FileStatus> patternMatchPredicate) {\n+                this.results = Arrays.asList(results).stream()\n+                        .filter(patternMatchPredicate)\n+                        .map(this::toSegmentProperties)\n+                        .iterator();\n+        }\n+\n+        public SegmentProperties toSegmentProperties(FileStatus fileStatus) {\n+            try {\n+                boolean isSealed = isSealed(fileStatus.getPath());\n+                return StreamSegmentInformation.builder()\n+                        .name(getSegmentNameFromPath(fileStatus.getPath()))\n+                        .length(fileStatus.getLen())\n+                        .sealed(isSealed).build();\n+            } catch (Exception e) {\n+                log.error(\"Exception occurred while transforming the object into SegmentProperties.\");\n+                return null;\n+            }\n+        }\n+\n+        /**\n+         * Method to check the presence of next element in the iterator.\n+         * @return true if the next element is there, else false.\n+         */\n+        @Override\n+        public boolean hasNext() {\n+            return results.hasNext();\n+        }\n+\n+        /**\n+         * Method to return the next element in the iterator.\n+         * @return A newly created StreamSegmentInformation class.\n+         * @throws NoSuchElementException in case of an unexpected failure.\n+         */\n+        @Override\n+        public SegmentProperties next() throws NoSuchElementException {\n+            try {\n+                return results.next();\n+            } catch (NoSuchElementException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3df5387fe4c7271acc21dc56975e0cdf73225e7"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NTA2Nw==", "bodyText": "This is not making a copy. You need to do new ArrayList<>(this.streamSegments.values())  inside the synchronized block, and then move the following line out of that block.", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r430755067", "createdAt": "2020-05-26T23:06:12Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/mocks/InMemoryStorage.java", "diffHunk": "@@ -195,6 +197,14 @@ public boolean supportsTruncation() {\n         return false;\n     }\n \n+    @Override\n+    public Iterator<SegmentProperties> listSegments() {\n+        synchronized (this) {\n+            Collection<StreamSegmentData> copyValues = this.streamSegments.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3df5387fe4c7271acc21dc56975e0cdf73225e7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NTE5MA==", "bodyText": "final", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r430755190", "createdAt": "2020-05-26T23:06:37Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -834,5 +845,57 @@ private void ensureOffset(RollingSegmentHandle handle, long offset) throws Strea\n         }\n     }\n \n+    /**\n+     * Iterator for segments in Rolling storage.\n+     */\n+    private static class RollingStorageSegmentIterator implements Iterator<SegmentProperties> {\n+        protected RollingStorage instance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3df5387fe4c7271acc21dc56975e0cdf73225e7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NTI2NA==", "bodyText": "same here", "url": "https://github.com/pravega/pravega/pull/4710#discussion_r430755264", "createdAt": "2020-05-26T23:06:52Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/storage/src/main/java/io/pravega/segmentstore/storage/rolling/RollingStorage.java", "diffHunk": "@@ -834,5 +845,57 @@ private void ensureOffset(RollingSegmentHandle handle, long offset) throws Strea\n         }\n     }\n \n+    /**\n+     * Iterator for segments in Rolling storage.\n+     */\n+    private static class RollingStorageSegmentIterator implements Iterator<SegmentProperties> {\n+        protected RollingStorage instance;\n+        private final Iterator<SegmentProperties> results;\n+\n+        RollingStorageSegmentIterator(RollingStorage instance, Iterator<SegmentProperties> results, java.util.function.Predicate<SegmentProperties> patternMatchPredicate) {\n+            this.instance = instance;\n+            this.results = StreamSupport.stream(Spliterators.spliteratorUnknownSize(results, 0), false)\n+                    .filter(patternMatchPredicate)\n+                    .map(this::toSegmentProperties)\n+                    .iterator();\n+        }\n+\n+        public SegmentProperties toSegmentProperties(SegmentProperties segmentProperties) {\n+            try {\n+                String segmentName = NameUtils.getSegmentNameFromHeader(segmentProperties.getName());\n+                val handle = instance.openHandle(segmentName, true);\n+                return StreamSegmentInformation.builder()\n+                        .name(segmentName)\n+                        .length(handle.length())\n+                        .sealed(handle.isSealed()).build();\n+            } catch (StreamSegmentException e) {\n+                log.error(\"Exception occurred while transforming the object into SegmentProperties.\");\n+                return null;\n+            }\n+        }\n+\n+        /**\n+         * Method to check the presence of next element in the iterator.\n+         * @return true if the next element is there, else false.\n+         */\n+        @Override\n+        public boolean hasNext() {\n+            return results.hasNext();\n+        }\n+\n+        /**\n+         * Method to return the next element in the iterator.\n+         * @return A newly created StreamSegmentInformation class.\n+         * @throws NoSuchElementException in case of an unexpected failure.\n+         */\n+        @Override\n+        public SegmentProperties next() throws NoSuchElementException {\n+            try {\n+                return results.next();\n+            } catch (NoSuchElementException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3df5387fe4c7271acc21dc56975e0cdf73225e7"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d0fdd09651e5822d82c1a118f488c6bbc3e7aa4", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/7d0fdd09651e5822d82c1a118f488c6bbc3e7aa4", "committedDate": "2020-05-27T03:14:17Z", "message": "Fixing comments.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50a776e423e792c2bbe8fa22f0bc0a16b4182039", "author": {"user": null}, "url": "https://github.com/pravega/pravega/commit/50a776e423e792c2bbe8fa22f0bc0a16b4182039", "committedDate": "2020-05-27T03:37:49Z", "message": "Fixing related to catching exceptions.\n\nSigned-off-by: ManishKumarKeshri <manish.keshri562@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d2664c30be5589fe8c6ef1d2725c2b91f16107", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/c8d2664c30be5589fe8c6ef1d2725c2b91f16107", "committedDate": "2020-05-27T15:03:34Z", "message": "Merge branch 'master' into issue-3994-list-segments-tier2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MzE1ODU0", "url": "https://github.com/pravega/pravega/pull/4710#pullrequestreview-419315854", "createdAt": "2020-05-27T15:04:02Z", "commit": {"oid": "c8d2664c30be5589fe8c6ef1d2725c2b91f16107"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3421, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}