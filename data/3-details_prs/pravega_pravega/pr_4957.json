{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MDE3OTMy", "number": 4957, "title": "Issue 4956: Fix bugs in list streams and list scope api when resources are filtered", "bodyText": "Change log description\nIf resources are filtered due to authorization, keep calling list resource api on store until we have collected desired number of results to fill the page or entries are exhausted.\nPurpose of the change\nFixes #4956\nWhat the code does\nMake recursive call if the resources are filtered out due to authorization until we either collect \"limit\" number of records or exhaust all entries in the store.\nThis is performed for both streams and KVT.\nKVT already had the implementation but there were bugs in it which are also fixed here.\nAlso, segment store returns an empty continuation token if we request from the last element and there are no more elements to read. This is handled in PravegaTableStoreHelper to return the caller's token if response from segment store is empty.\nHow to verify it\nunit tests added", "createdAt": "2020-07-22T10:11:21Z", "url": "https://github.com/pravega/pravega/pull/4957", "merged": true, "mergeCommit": {"oid": "1ae420fe34a9b8a8a2ad07778fca1ae3a7ac9b00"}, "closed": true, "closedAt": "2020-07-24T05:27:07Z", "author": {"login": "shiveshr"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1y0FsgH2gAyNDU1MDE3OTMyOmRjZTgyM2E5YWI4MzY3ZjVmOTU5NWRhMGJlYjQzOWQ1ZjVkNTJiZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc38pZLAFqTQ1NDYzMzE3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dce823a9ab8367f5f9595da0beb439d5f5d52bdd", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/dce823a9ab8367f5f9595da0beb439d5f5d52bdd", "committedDate": "2020-07-17T12:16:13Z", "message": "Implementation\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca4c8560822743ce5217f297144963e4a054ca3", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/6ca4c8560822743ce5217f297144963e4a054ca3", "committedDate": "2020-07-17T13:43:56Z", "message": "unit test\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93339a95d0d095851b81fe50e49c04bac09173dc", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/93339a95d0d095851b81fe50e49c04bac09173dc", "committedDate": "2020-07-17T13:51:33Z", "message": "merging with master\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5306bfb7f97753df7e0ec46b2f9aa230eb260234", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/5306bfb7f97753df7e0ec46b2f9aa230eb260234", "committedDate": "2020-07-17T15:11:43Z", "message": "Merge with master\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb62dbf7275bb70cf9d71ef06b2e4a33dcab2144", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/eb62dbf7275bb70cf9d71ef06b2e4a33dcab2144", "committedDate": "2020-07-17T15:30:58Z", "message": "Unit tests\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aee3d78651a5d13535e9feb6428f486f892edb75", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/aee3d78651a5d13535e9feb6428f486f892edb75", "committedDate": "2020-07-17T16:32:23Z", "message": "test fix\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e44b329f027cce0f8711c46c44e689c3a4cd023c", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/e44b329f027cce0f8711c46c44e689c3a4cd023c", "committedDate": "2020-07-18T01:39:03Z", "message": "unit test for local cotroller\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7147c43c8c74f4b13447fe486b37809003e99035", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/7147c43c8c74f4b13447fe486b37809003e99035", "committedDate": "2020-07-20T03:34:47Z", "message": "checkstyle\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "325239deea684d9614d690a1b3cfeeaeb50b2822", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/325239deea684d9614d690a1b3cfeeaeb50b2822", "committedDate": "2020-07-20T03:35:24Z", "message": "Merge branch 'master' into issue4751"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "286402c01e959a479bb995ed28f308ed153e04a6", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/286402c01e959a479bb995ed28f308ed153e04a6", "committedDate": "2020-07-21T01:32:30Z", "message": "PR comment\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16f248428c7c105980ecc391f1bd801ed693f3f", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/c16f248428c7c105980ecc391f1bd801ed693f3f", "committedDate": "2020-07-21T01:32:53Z", "message": "Merge branch 'issue4751' of https://github.com/shiveshr/pravega-1 into issue4751"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7723021acab9980f35f2d474b89e7261972596c", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/f7723021acab9980f35f2d474b89e7261972596c", "committedDate": "2020-07-21T14:41:39Z", "message": "Merge branch 'master' into issue4751"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f041f05d847cf0988de47309ed4dcaa050f54ae4", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/f041f05d847cf0988de47309ed4dcaa050f54ae4", "committedDate": "2020-07-22T06:25:52Z", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d423f4efd1a8cc5f4bcf16cce0051377bbe9093", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/0d423f4efd1a8cc5f4bcf16cce0051377bbe9093", "committedDate": "2020-07-22T06:26:17Z", "message": "Merge branch 'issue4751' of https://github.com/shiveshr/pravega-1 into issue4751"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "037919ef7ab047683c5e5ab56ceccda414129ed6", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/037919ef7ab047683c5e5ab56ceccda414129ed6", "committedDate": "2020-07-22T07:47:56Z", "message": "filter scopes\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eab0375244cee4d2c8d6ac51c6e7d1593a3977f", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/8eab0375244cee4d2c8d6ac51c6e7d1593a3977f", "committedDate": "2020-07-22T09:34:43Z", "message": "Issue 4956: Fix filtering logic\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "425578c5f59da8ead25d329a925c1e605b72f1b2", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/425578c5f59da8ead25d329a925c1e605b72f1b2", "committedDate": "2020-07-22T10:08:08Z", "message": "merge with master\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/bf961c4e3b39353b9881dbe60252bfbd1fbdae66", "committedDate": "2020-07-22T14:06:37Z", "message": "Fix issue with next token\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/bf961c4e3b39353b9881dbe60252bfbd1fbdae66", "committedDate": "2020-07-22T14:06:37Z", "message": "Fix issue with next token\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTk5NTMw", "url": "https://github.com/pravega/pravega/pull/4957#pullrequestreview-453999530", "createdAt": "2020-07-23T10:14:49Z", "commit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDoxNDo0OVrOG2EY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo1Mjo1NVrOG2FfIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0ODE5NA==", "bodyText": "The AuthContext if..else block could be expressed more concisely using a ternary operator as done in listKeyValueTables :\n\n  \n    \n      pravega/controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java\n    \n    \n         Line 158\n      in\n      bf961c4\n    \n    \n    \n    \n\n        \n          \n           final AuthContext ctx = this.grpcAuthHelper.isAuthEnabled() ? AuthContext.current() : null;", "url": "https://github.com/pravega/pravega/pull/4957#discussion_r459348194", "createdAt": "2020-07-23T10:14:49Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -696,49 +696,65 @@ public void listStreamsInScope(Controller.StreamsInScopeRequest request, StreamO\n         } else {\n             ctx = null;\n         }\n-\n-        authenticateExecuteAndProcessResults(\n-                () -> {\n-                        String result = this.grpcAuthHelper.checkAuthorization(\n-                                AuthResourceRepresentation.ofScope(scopeName),\n-                                AuthHandler.Permissions.READ,\n-                                ctx);\n-                        log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n-                            AuthResourceRepresentation.ofScope(scopeName), result);\n-                        return result;\n-                },\n-                delegationToken -> controllerService\n-                        .listStreams(scopeName, request.getContinuationToken().getToken(), pageLimit)\n+        Function<String, CompletableFuture<Controller.StreamsInScopeResponse>> streamsFn = delegationToken ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1MDE4NQ==", "bodyText": "Passing streamsFn as an argument to authenticateExecuteAndProcessResults is a much cleaner way to organize code. Could we also do the same for listKeyValueTablesInScope?", "url": "https://github.com/pravega/pravega/pull/4957#discussion_r459350185", "createdAt": "2020-07-23T10:19:04Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -696,49 +696,65 @@ public void listStreamsInScope(Controller.StreamsInScopeRequest request, StreamO\n         } else {\n             ctx = null;\n         }\n-\n-        authenticateExecuteAndProcessResults(\n-                () -> {\n-                        String result = this.grpcAuthHelper.checkAuthorization(\n-                                AuthResourceRepresentation.ofScope(scopeName),\n-                                AuthHandler.Permissions.READ,\n-                                ctx);\n-                        log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n-                            AuthResourceRepresentation.ofScope(scopeName), result);\n-                        return result;\n-                },\n-                delegationToken -> controllerService\n-                        .listStreams(scopeName, request.getContinuationToken().getToken(), pageLimit)\n+        Function<String, CompletableFuture<Controller.StreamsInScopeResponse>> streamsFn = delegationToken ->\n+                listStreamsInternal(scopeName, request.getContinuationToken().getToken(), pageLimit, ctx)\n                         .handle((response, ex) -> {\n                             if (ex != null) {\n                                 if (Exceptions.unwrap(ex) instanceof StoreException.DataNotFoundException) {\n-                                    return Controller.StreamsInScopeResponse.newBuilder().setStatus(Controller.StreamsInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n+                                    return Controller.StreamsInScopeResponse\n+                                            .newBuilder().setStatus(Controller.StreamsInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n                                 } else {\n                                     throw new CompletionException(ex);\n                                 }\n                             } else {\n-                                log.debug(\"All streams in scope with continuation token: {}\", response);\n-                                List<StreamInfo> streams = response\n-                                        .getKey().stream()\n-                                        .filter(streamName -> {\n-                                            String streamAuthResource =\n-                                                    AuthResourceRepresentation.ofStreamInScope(scopeName, streamName);\n-\n-                                            boolean isAuthorized = grpcAuthHelper.isAuthorized(streamAuthResource,\n-                                                    AuthHandler.Permissions.READ, ctx);\n-                                            log.debug(\"Authorization for [{}] for READ permission was [{}]\",\n-                                                    streamAuthResource, isAuthorized);\n-                                            return isAuthorized;\n-                                        })\n-                                        .map(m -> StreamInfo.newBuilder().setScope(scopeName).setStream(m).build())\n-                                        .collect(Collectors.toList());\n                                 return Controller.StreamsInScopeResponse\n-                                        .newBuilder().addAllStreams(streams)\n-                                        .setContinuationToken(Controller.ContinuationToken.newBuilder()\n-                                                                .setToken(response.getValue()).build())\n+                                        .newBuilder().addAllStreams(response.getKey())\n+                                        .setContinuationToken(Controller.ContinuationToken.newBuilder().setToken(response.getValue()).build())\n                                         .setStatus(Controller.StreamsInScopeResponse.Status.SUCCESS).build();\n                             }\n-                        }), responseObserver, requestTag);\n+                        });\n+\n+        authenticateExecuteAndProcessResults(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MTc5MA==", "bodyText": "We could do with an AtomicBoolean here instead of Integer.... all we need to know is if something got filtered out or no...", "url": "https://github.com/pravega/pravega/pull/4957#discussion_r459361790", "createdAt": "2020-07-23T10:43:23Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -696,49 +696,65 @@ public void listStreamsInScope(Controller.StreamsInScopeRequest request, StreamO\n         } else {\n             ctx = null;\n         }\n-\n-        authenticateExecuteAndProcessResults(\n-                () -> {\n-                        String result = this.grpcAuthHelper.checkAuthorization(\n-                                AuthResourceRepresentation.ofScope(scopeName),\n-                                AuthHandler.Permissions.READ,\n-                                ctx);\n-                        log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n-                            AuthResourceRepresentation.ofScope(scopeName), result);\n-                        return result;\n-                },\n-                delegationToken -> controllerService\n-                        .listStreams(scopeName, request.getContinuationToken().getToken(), pageLimit)\n+        Function<String, CompletableFuture<Controller.StreamsInScopeResponse>> streamsFn = delegationToken ->\n+                listStreamsInternal(scopeName, request.getContinuationToken().getToken(), pageLimit, ctx)\n                         .handle((response, ex) -> {\n                             if (ex != null) {\n                                 if (Exceptions.unwrap(ex) instanceof StoreException.DataNotFoundException) {\n-                                    return Controller.StreamsInScopeResponse.newBuilder().setStatus(Controller.StreamsInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n+                                    return Controller.StreamsInScopeResponse\n+                                            .newBuilder().setStatus(Controller.StreamsInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n                                 } else {\n                                     throw new CompletionException(ex);\n                                 }\n                             } else {\n-                                log.debug(\"All streams in scope with continuation token: {}\", response);\n-                                List<StreamInfo> streams = response\n-                                        .getKey().stream()\n-                                        .filter(streamName -> {\n-                                            String streamAuthResource =\n-                                                    AuthResourceRepresentation.ofStreamInScope(scopeName, streamName);\n-\n-                                            boolean isAuthorized = grpcAuthHelper.isAuthorized(streamAuthResource,\n-                                                    AuthHandler.Permissions.READ, ctx);\n-                                            log.debug(\"Authorization for [{}] for READ permission was [{}]\",\n-                                                    streamAuthResource, isAuthorized);\n-                                            return isAuthorized;\n-                                        })\n-                                        .map(m -> StreamInfo.newBuilder().setScope(scopeName).setStream(m).build())\n-                                        .collect(Collectors.toList());\n                                 return Controller.StreamsInScopeResponse\n-                                        .newBuilder().addAllStreams(streams)\n-                                        .setContinuationToken(Controller.ContinuationToken.newBuilder()\n-                                                                .setToken(response.getValue()).build())\n+                                        .newBuilder().addAllStreams(response.getKey())\n+                                        .setContinuationToken(Controller.ContinuationToken.newBuilder().setToken(response.getValue()).build())\n                                         .setStatus(Controller.StreamsInScopeResponse.Status.SUCCESS).build();\n                             }\n-                        }), responseObserver, requestTag);\n+                        });\n+\n+        authenticateExecuteAndProcessResults(\n+                () -> {\n+                        String result = this.grpcAuthHelper.checkAuthorization(\n+                                AuthResourceRepresentation.ofScope(scopeName),\n+                                AuthHandler.Permissions.READ,\n+                                ctx);\n+                        log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n+                            AuthResourceRepresentation.ofScope(scopeName), result);\n+                        return result;\n+                }, streamsFn, responseObserver, requestTag);\n+    }\n+\n+    private CompletableFuture<Pair<List<StreamInfo>, String>> listStreamsInternal(String scope, String continuationToken, int limit, AuthContext ctx) {\n+        List<StreamInfo> streams = new ArrayList<>();\n+        return controllerService.listStreams(scope, continuationToken, limit)\n+                                .thenCompose(response -> {\n+                                    log.debug(\"All streams in scope with continuation token: {}\", response);\n+                                    // filter unauthorized scopes. \n+                                    // fetch recursively if scopes are filtered out.\n+                                    AtomicInteger filteredCount = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjgyOA==", "bodyText": "What is this for?", "url": "https://github.com/pravega/pravega/pull/4957#discussion_r459362828", "createdAt": "2020-07-23T10:45:34Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/store/PravegaTablesStoreHelper.java", "diffHunk": "@@ -428,13 +430,15 @@ public void invalidateCache(String table, String key) {\n                                      List<String> items = result.getItems().stream().map(x -> new String(getArray(x.getKey()), Charsets.UTF_8))\n                                                                 .collect(Collectors.toList());\n                                      log.trace(\"get keys paginated on table {} returned items {}\", tableName, items);\n-                                     return new AbstractMap.SimpleEntry<>(Unpooled.wrappedBuffer(result.getState().toBytes()), items);\n+                                     // if the returned token and result are empty, return the incoming token so that \n+                                     // callers can resume from that token. \n+                                     return new AbstractMap.SimpleEntry<>(getNextToken(continuationToken, result), items);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NjE3OQ==", "bodyText": "Perhaps putting it this way may make it easier to read and we also won't need the Atomic variable\nList<String> streamNames = response.getKey().stream().filter(x -> grpcAuthHelper.isAuthorized(AuthResourceRepresentation.ofStreamInScope(scope, x), AuthHandler.Permissions.READ, ctx)).collect(Collectors.toList())\nif (streamNames.size() < response.getKey()) {\n//recurse...\n} else {\n//return ...\n}", "url": "https://github.com/pravega/pravega/pull/4957#discussion_r459366179", "createdAt": "2020-07-23T10:52:55Z", "author": {"login": "pbelgundi"}, "path": "controller/src/main/java/io/pravega/controller/server/rpc/grpc/v1/ControllerServiceImpl.java", "diffHunk": "@@ -696,49 +696,65 @@ public void listStreamsInScope(Controller.StreamsInScopeRequest request, StreamO\n         } else {\n             ctx = null;\n         }\n-\n-        authenticateExecuteAndProcessResults(\n-                () -> {\n-                        String result = this.grpcAuthHelper.checkAuthorization(\n-                                AuthResourceRepresentation.ofScope(scopeName),\n-                                AuthHandler.Permissions.READ,\n-                                ctx);\n-                        log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n-                            AuthResourceRepresentation.ofScope(scopeName), result);\n-                        return result;\n-                },\n-                delegationToken -> controllerService\n-                        .listStreams(scopeName, request.getContinuationToken().getToken(), pageLimit)\n+        Function<String, CompletableFuture<Controller.StreamsInScopeResponse>> streamsFn = delegationToken ->\n+                listStreamsInternal(scopeName, request.getContinuationToken().getToken(), pageLimit, ctx)\n                         .handle((response, ex) -> {\n                             if (ex != null) {\n                                 if (Exceptions.unwrap(ex) instanceof StoreException.DataNotFoundException) {\n-                                    return Controller.StreamsInScopeResponse.newBuilder().setStatus(Controller.StreamsInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n+                                    return Controller.StreamsInScopeResponse\n+                                            .newBuilder().setStatus(Controller.StreamsInScopeResponse.Status.SCOPE_NOT_FOUND).build();\n                                 } else {\n                                     throw new CompletionException(ex);\n                                 }\n                             } else {\n-                                log.debug(\"All streams in scope with continuation token: {}\", response);\n-                                List<StreamInfo> streams = response\n-                                        .getKey().stream()\n-                                        .filter(streamName -> {\n-                                            String streamAuthResource =\n-                                                    AuthResourceRepresentation.ofStreamInScope(scopeName, streamName);\n-\n-                                            boolean isAuthorized = grpcAuthHelper.isAuthorized(streamAuthResource,\n-                                                    AuthHandler.Permissions.READ, ctx);\n-                                            log.debug(\"Authorization for [{}] for READ permission was [{}]\",\n-                                                    streamAuthResource, isAuthorized);\n-                                            return isAuthorized;\n-                                        })\n-                                        .map(m -> StreamInfo.newBuilder().setScope(scopeName).setStream(m).build())\n-                                        .collect(Collectors.toList());\n                                 return Controller.StreamsInScopeResponse\n-                                        .newBuilder().addAllStreams(streams)\n-                                        .setContinuationToken(Controller.ContinuationToken.newBuilder()\n-                                                                .setToken(response.getValue()).build())\n+                                        .newBuilder().addAllStreams(response.getKey())\n+                                        .setContinuationToken(Controller.ContinuationToken.newBuilder().setToken(response.getValue()).build())\n                                         .setStatus(Controller.StreamsInScopeResponse.Status.SUCCESS).build();\n                             }\n-                        }), responseObserver, requestTag);\n+                        });\n+\n+        authenticateExecuteAndProcessResults(\n+                () -> {\n+                        String result = this.grpcAuthHelper.checkAuthorization(\n+                                AuthResourceRepresentation.ofScope(scopeName),\n+                                AuthHandler.Permissions.READ,\n+                                ctx);\n+                        log.debug(\"Result of authorization for [{}] and READ permission is: [{}]\",\n+                            AuthResourceRepresentation.ofScope(scopeName), result);\n+                        return result;\n+                }, streamsFn, responseObserver, requestTag);\n+    }\n+\n+    private CompletableFuture<Pair<List<StreamInfo>, String>> listStreamsInternal(String scope, String continuationToken, int limit, AuthContext ctx) {\n+        List<StreamInfo> streams = new ArrayList<>();\n+        return controllerService.listStreams(scope, continuationToken, limit)\n+                                .thenCompose(response -> {\n+                                    log.debug(\"All streams in scope with continuation token: {}\", response);\n+                                    // filter unauthorized scopes. \n+                                    // fetch recursively if scopes are filtered out.\n+                                    AtomicInteger filteredCount = new AtomicInteger();\n+\n+                                    response.getKey().stream().filter(x -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf961c4e3b39353b9881dbe60252bfbd1fbdae66"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7f559e4193123db6eb27befdcdc5e7c45d5da6", "author": {"user": {"login": "shiveshr", "name": "shivesh ranjan"}}, "url": "https://github.com/pravega/pravega/commit/eb7f559e4193123db6eb27befdcdc5e7c45d5da6", "committedDate": "2020-07-23T11:54:29Z", "message": "PR comments\n\nSigned-off-by: Shivesh Ranjan <shivesh.ranjan@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjMzMTcz", "url": "https://github.com/pravega/pravega/pull/4957#pullrequestreview-454633173", "createdAt": "2020-07-24T04:51:26Z", "commit": {"oid": "eb7f559e4193123db6eb27befdcdc5e7c45d5da6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3965, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}