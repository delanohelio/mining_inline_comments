{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTYxNDMx", "number": 4692, "title": "Issue 4691: Honor delegation token expiration during appends ", "bodyText": "Change log description\nPrevent writes upon delegation token expiry and ensure that the client re-authenticates with the Controller.\nThere were multiple ways of tackling this problem, each one with its own pros and cons as described below. This PR uses approach 5.\n\n\n\nS.No.\nApproach\nPros\nCons\n\n\n\n\n1.\nPerform delegation token expiry check upon each append on the server-side.\nAfter the token expires, no write/append is allowed to go through.\nNegative impact on append performance, due to additional cost of expiry checking.\n\n\n2.\nPerform delegation token expiry check for each AppendBlock on the server-side\nLower impact on write performance than approach 1 in many practical scenarios.\nStill, a significant negative impact on data append performance.\n\n\n3.\nAppendProcessor closes the connections at periodic intervals regardless of whether a token has expired, in order to bound the period until which writes can continue despite token expiry.\nLower impact on write performance than the above approaches\nWrites can continue after token expiry for a much longer duration than desired/expected.\n\n\n4.\nOn client-side, parse token expiry upon SetupAppend and store the expiration duration in the writer (SegmentOutputStreamImpl) state. This is so that parsing - an expensive operation - is done only once. Then, perform a \"low-cost\" token expiration check upon each write.\nNo additional performance costs on the server-side.\nThe check depends wholely on client-side validation, plus might impact client application performance.\n\n\n5.\nRun a task upon SetupAppend that closes the connection upon token expiration.\nToken expiry takes effect soon after the event improving security. The impact on performance is minimal.\nIn some cases, the token expiry can occur slightly slower than expected.\n\n\n\nPurpose of the change\nResolves #4691\nWhat the code does\nHere are the main changes:\n\nAdds a task in AppendProcessor.setupAppend(..) for closing the connection upon token expiry. This will ensure that the client will re-authenticate with the Controller and retry the request with a new delegation token.\nAdds a ScheduledExecutorService instance in PravegaConnectionListener for running the token expiry handling task described above.\n\nHere are the ancillary changes:\n\nExtracts away token expiration parsing logic from a client class to a class (JwtUtils) in common subproject. Without this change, we'd have to use a client class in Segment Store AppendProcessor, which'd be odd. In the same class, an additional method was added to identify the \"duration to expiry\"  for tokens.\nRelocates a couple of other Security utilities to the same package as the newly created JwtUtils.\nRelocates a few security-related test classes too, to enable the changes made for this PR.\n\nHow to verify it\nAll unit and integration tests must succeed. In addition, systems tests must also succeed.", "createdAt": "2020-04-15T06:10:02Z", "url": "https://github.com/pravega/pravega/pull/4692", "merged": true, "mergeCommit": {"oid": "6b98ef07cbaeb997c930815f32002d59a76186ff"}, "closed": true, "closedAt": "2020-05-19T21:12:21Z", "author": {"login": "ravisharda"}, "timelineItems": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXxH4lAH2gAyNDAzNTYxNDMxOjM2NDljYzQyMTYzZTVmMjg3OTZjM2NmYmVkNThkNWZkNTRkZGI1M2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci7HJpgFqTQxNDgyNjYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3649cc42163e5f28796c3cfbed58d5fd54ddb53b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3649cc42163e5f28796c3cfbed58d5fd54ddb53b", "committedDate": "2020-04-15T05:20:18Z", "message": "Move classes related to security in ...auth package to ...security package\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a065223111ec85a4aa9bce6cbf8bf4e55f0296", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/74a065223111ec85a4aa9bce6cbf8bf4e55f0296", "committedDate": "2020-04-15T06:03:02Z", "message": "Extract out Jwt utility functions so that it can be reused elsewhere\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d715cbfe994ebe8305d032c0d41cab3ce912872", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/3d715cbfe994ebe8305d032c0d41cab3ce912872", "committedDate": "2020-04-15T06:04:47Z", "message": "Refactor to move to appropriate module and package\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5686388eb0a02b447c96f39b3efcd0420870c9c3", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/5686388eb0a02b447c96f39b3efcd0420870c9c3", "committedDate": "2020-04-15T06:05:23Z", "message": "Fix for the core issue\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ca1d4fca561ae0557e228ca6e896b7f600080d1", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/0ca1d4fca561ae0557e228ca6e896b7f600080d1", "committedDate": "2020-04-15T07:28:49Z", "message": "Fix for Gson version conflicts\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzA3OTQ2", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-393707946", "createdAt": "2020-04-15T12:03:17Z", "commit": {"oid": "0ca1d4fca561ae0557e228ca6e896b7f600080d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowMzoxN1rOGF2hJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowMzoxN1rOGF2hJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4OTI4Nw==", "bodyText": "if connection pooling is enabled then all the sessions will be terminated. We should send a WireCommands.AuthTokenCheckFailed .", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408789287", "createdAt": "2020-04-15T12:03:17Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -142,6 +146,30 @@ public void setupAppend(SetupAppend setupAppend) {\n                 tokenVerifier.verifyToken(newSegment,\n                         setupAppend.getDelegationToken(),\n                         AuthHandler.Permissions.READ_UPDATE);\n+\n+                final Duration durationToExpiry = JwtUtils.durationToExpiry(setupAppend.getDelegationToken());\n+\n+                if (durationToExpiry != null) { // Can be null if token had no expiry set (for internal communications)\n+                    if (durationToExpiry.isNegative()) {\n+                        log.debug(\"Token has already expired\");\n+                        throw new TokenExpiredException(\"Token already expired\");\n+                    } else {\n+                        Futures.delayedTask(() -> {\n+                            if (writerStates.containsKey(Pair.of(newSegment, writer))) {\n+                                // Closing the connection will result in client authenticating with Controller again\n+                                // and retrying.\n+                                log.debug(\"Closing client connection due to token expiry\");\n+                                try {\n+                                    this.connection.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ca1d4fca561ae0557e228ca6e896b7f600080d1"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef50e3fc7b8eb99eae1c6badde82253165634072", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ef50e3fc7b8eb99eae1c6badde82253165634072", "committedDate": "2020-04-15T15:10:58Z", "message": "Send token expiry notification to client instead of closing the connection\nas suggested in a review comment.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/b485b1770c32b01b1eafd433d10dff668c6e6ee5", "committedDate": "2020-04-15T15:11:51Z", "message": "Add tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTAwMDAy", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-393900002", "createdAt": "2020-04-15T15:41:33Z", "commit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0MTozM1rOGF_4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0OTozNlrOGGAOwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MjY4OA==", "bodyText": "Revert this line", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408942688", "createdAt": "2020-04-15T15:41:33Z", "author": {"login": "andreipaduroiu"}, "path": "build.gradle", "diffHunk": "@@ -337,7 +346,7 @@ project ('bindings') {\n         compile project(':common')\n         compile project(':segmentstore:storage')\n         compile project(':shared:metrics')\n-        testCompile project(':test:testcommon')\n+        testCompile project(':test:testcommon') ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MzA0MA==", "bodyText": "Revert this", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408943040", "createdAt": "2020-04-15T15:42:04Z", "author": {"login": "andreipaduroiu"}, "path": "client/src/main/java/io/pravega/client/security/auth/JwtTokenProviderImpl.java", "diffHunk": "@@ -205,6 +153,7 @@ public boolean populateToken(String token) {\n         } else {\n             return this.delegationToken.compareAndSet(currentToken, new DelegationToken(token, extractExpirationTime(token)));\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NDgyNA==", "bodyText": "\"Unable to parse JWT body for expiration time: {}\"", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408944824", "createdAt": "2020-04-15T15:44:34Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/security/JwtUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.security;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class JwtUtils {\n+\n+    /**\n+     * The regex pattern for extracting \"exp\" field from the JWT.\n+     *\n+     * Examples:\n+     *    Input:- {\"sub\":\"subject\",\"aud\":\"segmentstore\",\"iat\":1569837384,\"exp\":1569837434}, output:- \"exp\":1569837434\n+     *    Input:- {\"sub\": \"subject\",\"aud\": \"segmentstore\",\"iat\": 1569837384,\"exp\": 1569837434}, output:- \"exp\": 1569837434\n+     */\n+    private static final Pattern JWT_EXPIRATION_PATTERN = Pattern.compile(\"\\\"exp\\\":\\\\s?(\\\\d+)\");\n+\n+    public static Long extractExpirationTime(String token) {\n+        if (token == null || token.trim().equals(\"\")) {\n+            return null;\n+        }\n+        String[] tokenParts = token.split(\"\\\\.\");\n+\n+        //A JWT token has 3 parts: the header, the body and the signature.\n+        if (tokenParts == null || tokenParts.length != 3) {\n+            return null;\n+        }\n+\n+        // The second part of the JWT token is the body, which contains the expiration time if present.\n+        String encodedBody = tokenParts[1];\n+        String decodedJsonBody = new String(Base64.getDecoder().decode(encodedBody));\n+\n+        return parseExpirationTime(decodedJsonBody);\n+    }\n+\n+    public static Duration durationToExpiry(String token) {\n+        Long expirationTime = extractExpirationTime(token);\n+        if (expirationTime == null) {\n+            return null;\n+        } else {\n+            return Duration.between(Instant.now(), Instant.ofEpochSecond(expirationTime));\n+        }\n+    }\n+\n+    public static Long parseExpirationTime(String jwtBody) {\n+        Long result = null;\n+        if (jwtBody != null && !jwtBody.trim().equals(\"\")) {\n+            Matcher matcher = JWT_EXPIRATION_PATTERN.matcher(jwtBody);\n+            if (matcher.find()) {\n+                // Should look like this, if a proper match is found: \"exp\": 1569837434\n+                String matchedString = matcher.group();\n+\n+                // JwtUtils\n+\n+                String[] expiryTimeFieldParts = matchedString.split(\":\");\n+                if (expiryTimeFieldParts != null && expiryTimeFieldParts.length == 2) {\n+                    try {\n+                        result = Long.parseLong(expiryTimeFieldParts[1].trim());\n+                    } catch (NumberFormatException e) {\n+                        // ignore\n+                        log.warn(\"Encountered this exception when parsing JWT body for expiration time: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NTQ0Ng==", "bodyText": "Include segment and writer id in the message. Both here and everywhere else you log or throw something.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408945446", "createdAt": "2020-04-15T15:45:27Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,33 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    void setupTokenExpiryTask(SetupAppend setupAppend, String newSegment, UUID writer) {\n+        final Duration durationToExpiry = JwtUtils.durationToExpiry(setupAppend.getDelegationToken());\n+\n+        if (durationToExpiry != null) { // Can be null if token had no expiry set (for internal communications)\n+            if (durationToExpiry.isNegative()) {\n+                log.debug(\"Token has already expired\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NjQxNg==", "bodyText": "Better message", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408946416", "createdAt": "2020-04-15T15:46:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,33 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    void setupTokenExpiryTask(SetupAppend setupAppend, String newSegment, UUID writer) {\n+        final Duration durationToExpiry = JwtUtils.durationToExpiry(setupAppend.getDelegationToken());\n+\n+        if (durationToExpiry != null) { // Can be null if token had no expiry set (for internal communications)\n+            if (durationToExpiry.isNegative()) {\n+                log.debug(\"Token has already expired\");\n+                throw new TokenExpiredException(\"Token already expired\");\n+            } else {\n+                Futures.delayedTask(() -> {\n+                    if (writerStates.containsKey(Pair.of(newSegment, writer))) {\n+                        try {\n+                            log.debug(\"Informing the client about token expiry\");\n+                            connection.send(new WireCommands.AuthTokenCheckFailed(setupAppend.getRequestId(),\n+                                    \"Token expired\",\n+                                    WireCommands.AuthTokenCheckFailed.ErrorCode.TOKEN_EXPIRED));\n+                        } catch (RuntimeException e) {\n+                            log.warn(\"Encountered an exception\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NzU5OA==", "bodyText": "Please do not create random executors. There are already executors created in the Segment Store process; use one of them. Or otherwise try to rework your code to not require an executor.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408947598", "createdAt": "2020-04-15T15:48:32Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaConnectionListener.java", "diffHunk": "@@ -90,6 +92,10 @@\n \n     private FileModificationMonitor tlsCertFileModificationMonitor; // used only if tls reload is enabled\n \n+    // Used for running token expiry handling tasks.\n+    private final ScheduledExecutorService tokenExpiryHandlerExecutor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0ODAxMA==", "bodyText": "This is the wrong way to shut down an executor. See ExecutorServiceHelpers.shutdown. But anyway, see my comment above.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408948010", "createdAt": "2020-04-15T15:49:02Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaConnectionListener.java", "diffHunk": "@@ -280,5 +286,8 @@ public void close() {\n         if (tlsCertFileModificationMonitor != null) {\n             tlsCertFileModificationMonitor.stopMonitoring();\n         }\n+        if (tokenExpiryHandlerExecutor != null) {\n+            tokenExpiryHandlerExecutor.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0ODQxNw==", "bodyText": "Javadoc for this class and all its methods.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r408948417", "createdAt": "2020-04-15T15:49:36Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtTestUtils.java", "diffHunk": "@@ -7,20 +7,24 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n-package io.pravega.client.security.auth;\n+package io.pravega.test.common;\n \n import com.google.gson.Gson;\n \n import java.util.Base64;\n \n public class JwtTestUtils {\n \n-    static String createJwtBody(JwtBody jwt) {\n+    public static String createJwtBody(JwtBody jwt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b485b1770c32b01b1eafd433d10dff668c6e6ee5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01149f8448837c7da8e20c5a65bebb001653b8e", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a01149f8448837c7da8e20c5a65bebb001653b8e", "committedDate": "2020-04-16T04:13:32Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32dd3114d4a02a3c4132d4995db73769d8e1fc0", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a32dd3114d4a02a3c4132d4995db73769d8e1fc0", "committedDate": "2020-04-16T08:02:36Z", "message": "Add some tests\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc9b98ecb1fa18349412a443477f0b28a74ff26", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/8bc9b98ecb1fa18349412a443477f0b28a74ff26", "committedDate": "2020-04-16T17:37:46Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc044f9877968750faf33b42cad25c337e8e4071", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/cc044f9877968750faf33b42cad25c337e8e4071", "committedDate": "2020-04-16T17:40:11Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5272fde4a2bc6211eaccf0834f900c880094eb6b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/5272fde4a2bc6211eaccf0834f900c880094eb6b", "committedDate": "2020-04-17T02:12:08Z", "message": "Add tests and some minor formatting changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5b7f308e0641c6d3d371b1bb164c1ad8c44bc6", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/0b5b7f308e0641c6d3d371b1bb164c1ad8c44bc6", "committedDate": "2020-04-17T04:54:07Z", "message": "Add tests and other minor changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ed19e5012291a4f7b31bfea5ade4b1eba91318", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/a7ed19e5012291a4f7b31bfea5ade4b1eba91318", "committedDate": "2020-04-17T04:55:02Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTc1OTIw", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-396975920", "createdAt": "2020-04-21T04:20:04Z", "commit": {"oid": "a7ed19e5012291a4f7b31bfea5ade4b1eba91318"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDoyMDowNFrOGIxwEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDozNzoxM1rOGIyF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1NjkxNQ==", "bodyText": "Can we move the resolution strategy to the global one in build.gradle, to enforce a common lib across all.\n\n  \n    \n      pravega/build.gradle\n    \n    \n        Lines 109 to 115\n      in\n      729bc23\n    \n    \n    \n    \n\n        \n          \n           configurations.all { \n        \n\n        \n          \n               resolutionStrategy { \n        \n\n        \n          \n                   //failOnVersionConflict() \n        \n\n        \n          \n                   force \"com.google.guava:guava:\" + guavaVersion \n        \n\n        \n          \n                   force \"com.google.protobuf:protobuf-java:\" + protobufProtocVersion \n        \n\n        \n          \n                   force \"io.grpc:grpc-context:\" + grpcVersion \n        \n\n        \n          \n                   force \"commons-beanutils:commons-beanutils:\" + commonsBeanutilsVersion", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r411856915", "createdAt": "2020-04-21T04:20:04Z", "author": {"login": "shrids"}, "path": "build.gradle", "diffHunk": "@@ -321,6 +322,14 @@ project('segmentstore:storage:impl') {\n }\n \n project ('bindings') {\n+    configurations.all {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ed19e5012291a4f7b31bfea5ade4b1eba91318"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2MjUwMg==", "bodyText": "Can we avoid sending this if the connection is closed? A connection closing should ensure all the pending tasks are cancelled.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r411862502", "createdAt": "2020-04-21T04:37:13Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +175,57 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.debug(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        connection.send(new WireCommands.AuthTokenCheckFailed(setupAppend.getRequestId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ed19e5012291a4f7b31bfea5ade4b1eba91318"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2183a08a79bc15a6fc4c5b9e902dbf78ff4f17dd", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/2183a08a79bc15a6fc4c5b9e902dbf78ff4f17dd", "committedDate": "2020-04-21T04:40:13Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDMwMTky", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-397030192", "createdAt": "2020-04-21T06:44:21Z", "commit": {"oid": "2183a08a79bc15a6fc4c5b9e902dbf78ff4f17dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0NDoyMVrOGI1NgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNjo0NDoyMVrOGI1NgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTkxMzYwMA==", "bodyText": "I think we should have a lower log level here.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r411913600", "createdAt": "2020-04-21T06:44:21Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +175,57 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.debug(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        connection.send(new WireCommands.AuthTokenCheckFailed(setupAppend.getRequestId(),\n+                                String.format(\"Token sent by writer %s for segment %s in request %s has expired\",\n+                                        writerId, segment, requestId),\n+                                WireCommands.AuthTokenCheckFailed.ErrorCode.TOKEN_EXPIRED));\n+                    } catch (RuntimeException e) {\n+                        // Log and ignore\n+                        log.warn(\"Unable to inform writer {} that sent request {}, about token expiry for segment {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2183a08a79bc15a6fc4c5b9e902dbf78ff4f17dd"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5157f9814afbc63d910bd8dd157ae132d9687afe", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/5157f9814afbc63d910bd8dd157ae132d9687afe", "committedDate": "2020-04-21T06:46:23Z", "message": "Miscellaneous changes\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33e02fc06963444df8980d27702aa18abd8188ef", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/33e02fc06963444df8980d27702aa18abd8188ef", "committedDate": "2020-04-22T05:35:09Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae7504b0b790f649c5e5ce8e0a4285bc75d364d", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6ae7504b0b790f649c5e5ce8e0a4285bc75d364d", "committedDate": "2020-04-22T10:32:27Z", "message": "Introduce a method for checking whether the connection is closed.\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e33b47e8acb3b787623bd2eb7ab3df0d6bc227c", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6e33b47e8acb3b787623bd2eb7ab3df0d6bc227c", "committedDate": "2020-04-22T10:32:58Z", "message": "Merge branch 'honor-tokenexpiry-upon-writes' of https://github.com/ravisharda/pravega into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4d86f136270ef11c0040d3e293c4a3eb9e4c85", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/bf4d86f136270ef11c0040d3e293c4a3eb9e4c85", "committedDate": "2020-04-27T10:56:20Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b8576bca639525205f27471acbd466b6e259758", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/1b8576bca639525205f27471acbd466b6e259758", "committedDate": "2020-04-27T12:25:01Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzA2Mjcy", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-401306272", "createdAt": "2020-04-27T20:36:13Z", "commit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDozNjoxM1rOGM2kZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozODo0NFrOGM42lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzMDE1MQ==", "bodyText": "Can this be merged into the larger block of these on line 110?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416130151", "createdAt": "2020-04-27T20:36:13Z", "author": {"login": "tkaitchuck"}, "path": "build.gradle", "diffHunk": "@@ -321,6 +322,17 @@ project('segmentstore:storage:impl') {\n }\n \n project ('bindings') {\n+    configurations.all {\n+        resolutionStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NTEzOA==", "bodyText": "This should not be creating threads on a per connection basis. This is going to need to be provided by the caller.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416165138", "createdAt": "2020-04-27T21:34:34Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -108,7 +113,9 @@ public static AppendProcessorBuilder defaultBuilder() {\n                 .nextRequestProcessor(new FailingRequestProcessor())\n                 .statsRecorder(SegmentStatsRecorder.noOp())\n                 .connectionTracker(new ConnectionTracker())\n-                .replyWithStackTraceOnError(false);\n+                .replyWithStackTraceOnError(false)\n+                .tokenExpiryHandlerExecutor(ExecutorServiceHelpers.newScheduledThreadPool(2,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NjI2OQ==", "bodyText": "This sends a message over the connection and then leaves it open, so appends can continue to occur if the client simply ignores the message.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416166269", "createdAt": "2020-04-27T21:36:27Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +175,59 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.send(new WireCommands.AuthTokenCheckFailed(setupAppend.getRequestId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NjQ3OA==", "bodyText": "I think this is a warn level event", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416166478", "createdAt": "2020-04-27T21:36:48Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +175,59 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.send(new WireCommands.AuthTokenCheckFailed(setupAppend.getRequestId(),\n+                                    String.format(\"Token sent by writer %s for segment %s in request %s has expired\",\n+                                            writerId, segment, requestId),\n+                                    WireCommands.AuthTokenCheckFailed.ErrorCode.TOKEN_EXPIRED));\n+                        }\n+                    } catch (RuntimeException e) {\n+                        // Log and ignore\n+                        log.debug(\"Unable to inform writer {} that sent request {}, about token expiry for segment {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NzU3Mg==", "bodyText": "why this change?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416167572", "createdAt": "2020-04-27T21:38:44Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaConnectionListener.java", "diffHunk": "@@ -199,13 +217,10 @@ public void initChannel(SocketChannel ch) {\n                          new AppendDecoder(),\n                          lsh);\n \n-                 lsh.setRequestProcessor(new AppendProcessor(store,\n-                         lsh,\n-                         connectionTracker,\n-                         new PravegaRequestProcessor(store, tableStore, lsh, statsRecorder, tableStatsRecorder, tokenVerifier, replyWithStackTraceOnError),\n-                         statsRecorder,\n-                         tokenVerifier,\n-                         replyWithStackTraceOnError));\n+                 lsh.setRequestProcessor(new AppendProcessor(store, lsh, connectionTracker,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzg3MjQ4", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-401387248", "createdAt": "2020-04-27T23:03:39Z", "commit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzowMzo0MFrOGM7TkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzowNzozNlrOGM7aBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNzc2MA==", "bodyText": "This is an expensive string parse. Can you just look up exp and get the number that succeeds it?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416207760", "createdAt": "2020-04-27T23:03:40Z", "author": {"login": "andreipaduroiu"}, "path": "common/src/main/java/io/pravega/common/security/JwtUtils.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.common.security;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Base64;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Utility methods for JSON Web Tokens (JWT).\n+ */\n+@Slf4j\n+public class JwtUtils {\n+\n+    /**\n+     * The regex pattern for extracting \"exp\" field from the JWT.\n+     *\n+     * Examples:\n+     *    Input:- {\"sub\":\"subject\",\"aud\":\"segmentstore\",\"iat\":1569837384,\"exp\":1569837434}, output:- \"exp\":1569837434\n+     *    Input:- {\"sub\": \"subject\",\"aud\": \"segmentstore\",\"iat\": 1569837384,\"exp\": 1569837434}, output:- \"exp\": 1569837434\n+     */\n+    private static final Pattern JWT_EXPIRATION_PATTERN = Pattern.compile(\"\\\"exp\\\":\\\\s?(\\\\d+)\");\n+\n+    /**\n+     * Extracts expiration time from the specified JWT token.\n+     *\n+     * @param jsonWebToken the JWT to extract the expiration time from\n+     * @return the the expiration time (in seconds). Returns null if\n+     *         a) the specified token is blank, or\n+     *         b) the specified token is of invalid format, or\n+     *         c) expiration time is missing from the token, or\n+     *         d) expiration time is not a number.\n+     */\n+    public static Long extractExpirationTime(String jsonWebToken) {\n+        if (jsonWebToken == null || jsonWebToken.trim().equals(\"\")) {\n+            return null;\n+        }\n+        String[] tokenParts = jsonWebToken.split(\"\\\\.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwODY3Nw==", "bodyText": "RuntimeException extends Exception. Please catch Exception.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416208677", "createdAt": "2020-04-27T23:05:55Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +175,59 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.send(new WireCommands.AuthTokenCheckFailed(setupAppend.getRequestId(),\n+                                    String.format(\"Token sent by writer %s for segment %s in request %s has expired\",\n+                                            writerId, segment, requestId),\n+                                    WireCommands.AuthTokenCheckFailed.ErrorCode.TOKEN_EXPIRED));\n+                        }\n+                    } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwOTE2Nw==", "bodyText": "Also:\n\nThis executor has a weird name.\nIt is never shut down.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416209167", "createdAt": "2020-04-27T23:06:59Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -108,7 +113,9 @@ public static AppendProcessorBuilder defaultBuilder() {\n                 .nextRequestProcessor(new FailingRequestProcessor())\n                 .statsRecorder(SegmentStatsRecorder.noOp())\n                 .connectionTracker(new ConnectionTracker())\n-                .replyWithStackTraceOnError(false);\n+                .replyWithStackTraceOnError(false)\n+                .tokenExpiryHandlerExecutor(ExecutorServiceHelpers.newScheduledThreadPool(2,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2NTEzOA=="}, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwOTQxMg==", "bodyText": "Who manages this executor?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r416209412", "createdAt": "2020-04-27T23:07:36Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaConnectionListener.java", "diffHunk": "@@ -105,7 +110,17 @@\n     @VisibleForTesting\n     public PravegaConnectionListener(boolean enableTls, int port, StreamSegmentStore streamSegmentStore, TableStore tableStore) {\n         this(enableTls, false, \"localhost\", port, streamSegmentStore, tableStore, SegmentStatsRecorder.noOp(), TableSegmentStatsRecorder.noOp(),\n-                new PassingTokenVerifier(), null, null, true);\n+                new PassingTokenVerifier(), null, null, true,\n+                ExecutorServiceHelpers.newScheduledThreadPool(1, \"test-token-expiry-handler\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8576bca639525205f27471acbd466b6e259758"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09775fe9daec18a1d47e7fcc4af8563e46dea169", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/09775fe9daec18a1d47e7fcc4af8563e46dea169", "committedDate": "2020-04-29T07:35:07Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc1565c452202e5ec756f1a701bc6aa4ce42c9ca", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/cc1565c452202e5ec756f1a701bc6aa4ce42c9ca", "committedDate": "2020-04-29T07:35:38Z", "message": "Merge branch 'honor-tokenexpiry-upon-writes' of https://github.com/ravisharda/pravega into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "948799327d98405f60952b7eba26007c18d7a2c7", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/948799327d98405f60952b7eba26007c18d7a2c7", "committedDate": "2020-04-30T03:18:22Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjI3NzMz", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-403227733", "createdAt": "2020-04-30T06:11:43Z", "commit": {"oid": "948799327d98405f60952b7eba26007c18d7a2c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjoxMTo0M1rOGObDcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjoxMTo0M1rOGObDcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc3NjQ5Nw==", "bodyText": "Default priority can be java.lang.Thread#NORM_PRIORITY", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r417776497", "createdAt": "2020-04-30T06:11:43Z", "author": {"login": "shrids"}, "path": "common/src/main/java/io/pravega/common/concurrent/ExecutorServiceHelpers.java", "diffHunk": "@@ -66,6 +66,17 @@ public void uncaughtException(Thread t, Throwable e) {\n      * @return a thread factory\n      */\n     public static ThreadFactory getThreadFactory(String groupName) {\n+        return getThreadFactory(groupName, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948799327d98405f60952b7eba26007c18d7a2c7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d657c000e14ee4b96cd763b6b92646b117a1de3", "author": {"user": {"login": "shrids", "name": "Sandeep"}}, "url": "https://github.com/pravega/pravega/commit/1d657c000e14ee4b96cd763b6b92646b117a1de3", "committedDate": "2020-04-30T06:17:50Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2add1554ebb592d435bd184012246e68e7703a82", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/2add1554ebb592d435bd184012246e68e7703a82", "committedDate": "2020-05-04T11:29:44Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa9502051fb03716beb222246a2a12da9419de9", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/2fa9502051fb03716beb222246a2a12da9419de9", "committedDate": "2020-05-08T06:07:38Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e2c7ffd55d99efa000d457214156b40d315e35b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/6e2c7ffd55d99efa000d457214156b40d315e35b", "committedDate": "2020-05-08T09:50:06Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c964260a602b5fba01486a6013efdcd3dbc0d33", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/2c964260a602b5fba01486a6013efdcd3dbc0d33", "committedDate": "2020-05-08T10:13:36Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTQyODQ1", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-408142845", "createdAt": "2020-05-08T10:19:02Z", "commit": {"oid": "2c964260a602b5fba01486a6013efdcd3dbc0d33"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxOTowM1rOGSgyXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxOTowM1rOGSgyXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NDczMw==", "bodyText": "can we remove this redundant null check? The user would invoke newScheduledThreadPool(int size, String poolName) if the priority is default.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422064733", "createdAt": "2020-05-08T10:19:03Z", "author": {"login": "shrids"}, "path": "common/src/main/java/io/pravega/common/concurrent/ExecutorServiceHelpers.java", "diffHunk": "@@ -86,8 +100,24 @@ public Thread newThread(Runnable r) {\n      * @return A new executor service.\n      */\n     public static ScheduledExecutorService newScheduledThreadPool(int size, String poolName) {\n+        return newScheduledThreadPool(size, poolName, Thread.NORM_PRIORITY);\n+    }\n+\n+    /**\n+     * Creates a new ScheduledExecutorService that will use daemon threads with specified priority and names.\n+     *\n+     * @param size The number of threads in the threadpool\n+     * @param poolName The name of the pool (this will be printed in logs)\n+     * @param threadPriority The priority to be assigned to the threads\n+     * @return A new executor service.\n+     */\n+    public static ScheduledExecutorService newScheduledThreadPool(int size, String poolName, Integer threadPriority) {\n+\n+        ThreadFactory threadFactory =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c964260a602b5fba01486a6013efdcd3dbc0d33"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/19570c74fa3403b0752b8fb56f1082e52de34d94", "committedDate": "2020-05-08T10:55:11Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTczMzAx", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-408173301", "createdAt": "2020-05-08T11:25:50Z", "commit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToyNTo1MFrOGSiWfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMTozNzoxMFrOGSioDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MDM2NQ==", "bodyText": "We can improve/remove the warn message here since we are closing the connection and not informing the writer via a Wirecommand.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422090365", "createdAt": "2020-05-08T11:25:50Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,56 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.close();\n+                        }\n+                    } catch (RuntimeException e) {\n+                        // Log and ignore\n+                        log.warn(\"Unable to inform writer {} that sent request {}, about token expiry for segment {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MDg1Ng==", "bodyText": "we do not need this check since we are closing the connection.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422090856", "createdAt": "2020-05-08T11:27:09Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,56 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5MTU5Mg==", "bodyText": "I did not understand the need to catch an exception for connection.close()?\n(if it is required, then this pattern should be replicated at all connection.close() invocation instances. )", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422091592", "createdAt": "2020-05-08T11:29:07Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,56 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.close();\n+                        }\n+                    } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NDg2Mg==", "bodyText": "Would the TokenVerifierImpl#verifyToken verify if the duration is negative? If not, we could move the check there to ensure expired tokens are not allowed.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422094862", "createdAt": "2020-05-08T11:37:10Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,56 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.close();\n+                        }\n+                    } catch (RuntimeException e) {\n+                        // Log and ignore\n+                        log.warn(\"Unable to inform writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                    }\n+                }\n+                return null;\n+            }, expiryDuration, this.tokenExpiryHandlerExecutor);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    Duration durationToExpiry(SetupAppend setupAppend) {\n+        final Duration duration = JwtUtils.durationToExpiry(setupAppend.getDelegationToken());\n+\n+        // Note that duration can be null, say if token had no expiry set (for internal communications).\n+\n+        if (duration != null && duration.isNegative()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTMxMzI3", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-408531327", "createdAt": "2020-05-08T21:13:39Z", "commit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMzozOVrOGSz6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToyNTowOVrOGS0NgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3ODA4Mg==", "bodyText": "This comment makes no sense. If there is a conflict with testcommon why is the bindings version being changed? This fix should go into testcommon. Because testcommon is not depended on by any non-test target there should be no conflict.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422378082", "createdAt": "2020-05-08T21:13:39Z", "author": {"login": "tkaitchuck"}, "path": "build.gradle", "diffHunk": "@@ -322,6 +323,17 @@ project('segmentstore:storage:impl') {\n }\n \n project ('bindings') {\n+    configurations.all {\n+        resolutionStrategy {\n+            // We need to force this version as dependency, since ':test:testcommon' brings in a newer version of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3OTIxNw==", "bodyText": "In this code path, this executor does not look like it will ever be shutdown. That is a thread leak.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422379217", "createdAt": "2020-05-08T21:16:15Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/PravegaConnectionListener.java", "diffHunk": "@@ -105,7 +110,17 @@\n     @VisibleForTesting\n     public PravegaConnectionListener(boolean enableTls, int port, StreamSegmentStore streamSegmentStore, TableStore tableStore) {\n         this(enableTls, false, \"localhost\", port, streamSegmentStore, tableStore, SegmentStatsRecorder.noOp(), TableSegmentStatsRecorder.noOp(),\n-                new PassingTokenVerifier(), null, null, true);\n+                new PassingTokenVerifier(), null, null, true,\n+                ExecutorServiceHelpers.newScheduledThreadPool(1, \"test-token-expiry-handler\"));\n+    }\n+\n+    public PravegaConnectionListener(boolean enableTls, boolean enableTlsReload, String host, int port, StreamSegmentStore streamSegmentStore, TableStore tableStore,\n+                                     SegmentStatsRecorder statsRecorder, TableSegmentStatsRecorder tableStatsRecorder,\n+                                     DelegationTokenVerifier tokenVerifier, String certFile, String keyFile,\n+                                     boolean replyWithStackTraceOnError) {\n+        this(enableTls, enableTlsReload, host, port, streamSegmentStore, tableStore, statsRecorder, tableStatsRecorder,\n+                tokenVerifier, certFile, keyFile, replyWithStackTraceOnError,\n+                ExecutorServiceHelpers.newScheduledThreadPool(1, \"test-token-expiry-handler\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4MTkyNQ==", "bodyText": "This is such a small amount of json, and it doesn't even have nesting. Rather than dealing with dependency managment of Gson can we just use a Format template?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422381925", "createdAt": "2020-05-08T21:22:35Z", "author": {"login": "tkaitchuck"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/JwtBody.java", "diffHunk": "@@ -20,7 +20,7 @@\n @Builder\n @Getter\n @Setter\n-class JwtBody {\n+public class JwtBody {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4Mjk3Ng==", "bodyText": "This doesn't appear to be used anywhere.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r422382976", "createdAt": "2020-05-08T21:25:09Z", "author": {"login": "tkaitchuck"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -66,13 +66,15 @@\n public class ServiceBuilder implements AutoCloseable {\n     //region Members\n \n-    private static final Duration SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n+    private static final Duration SHUTDOWN_TIMEOUT = Duration.ofSeconds(45);\n     private final SegmentStoreMetrics.ThreadPool threadPoolMetrics;\n     private final SegmentToContainerMapper segmentToContainerMapper;\n     private final ServiceBuilderConfig serviceBuilderConfig;\n     @Getter(AccessLevel.PROTECTED)\n     private final ScheduledExecutorService coreExecutor;\n     private final ScheduledExecutorService storageExecutor;\n+    @Getter(AccessLevel.PUBLIC)\n+    private final ScheduledExecutorService lowPriorityExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "330376d8889e2f0c5a2c278baa166634cd64d2f8", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/330376d8889e2f0c5a2c278baa166634cd64d2f8", "committedDate": "2020-05-13T04:17:41Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdd1b91dc2634453ac46ab3a328f8fea0d430844", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/bdd1b91dc2634453ac46ab3a328f8fea0d430844", "committedDate": "2020-05-13T11:35:42Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDUyMTcw", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-411452170", "createdAt": "2020-05-14T04:11:37Z", "commit": {"oid": "bdd1b91dc2634453ac46ab3a328f8fea0d430844"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDoxMTozN1rOGVLafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNDo0MDo1OFrOGVL0yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2MDI4NA==", "bodyText": "can we ensure close() is invoked only once? i.e\nif (isClosed.compareAndSet(false, true) ) {\n   Channel ch = ...\n}", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r424860284", "createdAt": "2020-05-14T04:11:37Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/ServerConnectionInboundHandler.java", "diffHunk": "@@ -84,6 +87,12 @@ public void close() {\n             // wait for all messages to be sent before closing the channel.\n             ch.eventLoop().execute(() -> ch.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE));\n         }\n+        isClosed.compareAndSet(false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdd1b91dc2634453ac46ab3a328f8fea0d430844"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg2NzAxOA==", "bodyText": "TokenVerifierImpl#verifyToken is already checking for TokenExpired. Hence this check seems redundant.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r424867018", "createdAt": "2020-05-14T04:40:58Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +172,56 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(SetupAppend setupAppend) {\n+        String segment = setupAppend.getSegment();\n+        UUID writerId = setupAppend.getWriterId();\n+        long requestId = setupAppend.getRequestId();\n+\n+        Duration expiryDuration = this.durationToExpiry(setupAppend);\n+\n+        if (expiryDuration == null) {\n+            return CompletableFuture.completedFuture(null);\n+        } else {\n+            return Futures.delayedTask(() -> {\n+                if (isSetupAppendCompleted(segment, writerId)) {\n+                    try {\n+                        log.trace(\"Informing writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                        if (!connection.isClosed()) {\n+                            connection.close();\n+                        }\n+                    } catch (RuntimeException e) {\n+                        // Log and ignore\n+                        log.warn(\"Unable to inform writer {} that sent request {}, about token expiry for segment {}\",\n+                                writerId, requestId, segment);\n+                    }\n+                }\n+                return null;\n+            }, expiryDuration, this.tokenExpiryHandlerExecutor);\n+        }\n+    }\n+\n+    @VisibleForTesting\n+    Duration durationToExpiry(SetupAppend setupAppend) {\n+        final Duration duration = JwtUtils.durationToExpiry(setupAppend.getDelegationToken());\n+\n+        // Note that duration can be null, say if token had no expiry set (for internal communications).\n+\n+        if (duration != null && duration.isNegative()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NDg2Mg=="}, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ea88352da66f936b555a3dc69d97348fa339b4e", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/8ea88352da66f936b555a3dc69d97348fa339b4e", "committedDate": "2020-05-14T11:35:14Z", "message": "Make token verifier return JsonWebToken\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/1e2b17c28f73e2c46016475600b21ff2eaca23d2", "committedDate": "2020-05-14T15:21:25Z", "message": "Remove redundant delegation token expiry check in AppendProcessor\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzQzNzk1", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-412343795", "createdAt": "2020-05-15T04:44:57Z", "commit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDo0NDo1N1rOGV2UfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNDo1MToxOVrOGV2Z6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2MzI2MA==", "bodyText": "+1", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r425563260", "createdAt": "2020-05-15T04:44:57Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/delegationtoken/DelegationTokenVerifier.java", "diffHunk": "@@ -33,7 +34,8 @@\n      * @throws InvalidClaimException  if the {@code token} does not contain the claim representing\n      *                                {@code expectedLevel} of access\n      * @throws TokenException         if any other failure condition is encountered\n+     * @return JsonWebToken           a non-null value if token was parsed and verified successfully, otherwise null.\n      */\n-    void verifyToken(String resource, String token, AuthHandler.Permissions expectedLevel)\n+    JsonWebToken verifyToken(String resource, String token, AuthHandler.Permissions expectedLevel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU2NDY0OA==", "bodyText": "Should this be bumped to ERROR log level ?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r425564648", "createdAt": "2020-05-15T04:51:19Z", "author": {"login": "shrids"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -328,8 +361,7 @@ private void handleException(UUID writerId, long requestId, String segment, long\n             connection.close();\n         } else if (u instanceof TokenExpiredException) {\n             log.warn(requestId, \"Token expired for writer {} on segment {}.\", writerId, segment, u);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODQ4MDA1", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-412848005", "createdAt": "2020-05-15T17:46:39Z", "commit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo0NjozOVrOGWOQOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzo1MzoyNVrOGWOd-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1NTM4Nw==", "bodyText": "Should this have a defensive copy?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r425955387", "createdAt": "2020-05-15T17:46:39Z", "author": {"login": "tkaitchuck"}, "path": "shared/security/src/main/java/io/pravega/shared/security/token/JsonWebToken.java", "diffHunk": "@@ -107,6 +104,19 @@ public JsonWebToken(@NonNull String subject, @NonNull String audience, @NonNull\n         this.permissionsByResource = resourcePermissionClaims;\n     }\n \n+    public JsonWebToken(@NonNull String subject, @NonNull String audience, @NonNull byte[] signingKey,\n+                        Date expiry, Map<String, Object> resourcePermissionClaims) {\n+        this.subject = subject;\n+        this.audience = audience;\n+        this.signingKey = signingKey.clone();\n+        if (expiry != null) {\n+            this.expirationTime = Date.from(expiry.toInstant());\n+        } else {\n+            this.expirationTime = null;\n+        }\n+        this.permissionsByResource = resourcePermissionClaims;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk1ODkwNQ==", "bodyText": "Now that you have changed the code both :client and :test:testcommon can remove the dependency all together.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r425958905", "createdAt": "2020-05-15T17:53:25Z", "author": {"login": "tkaitchuck"}, "path": "build.gradle", "diffHunk": "@@ -322,6 +323,17 @@ project('segmentstore:storage:impl') {\n }\n \n project ('bindings') {\n+    configurations.all {\n+        resolutionStrategy {\n+            // We need to force this version as dependency, since ':test:testcommon' brings in a newer version of ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3ODA4Mg=="}, "originalCommit": {"oid": "19570c74fa3403b0752b8fb56f1082e52de34d94"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTE1NDUw", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-412915450", "createdAt": "2020-05-15T19:33:18Z", "commit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTozMzoxOFrOGWRbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MTozNFrOGWRpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwNzM3NQ==", "bodyText": "Why do you return a future when you don't use it?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426007375", "createdAt": "2020-05-15T19:33:18Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/main/java/io/pravega/segmentstore/server/host/handler/AppendProcessor.java", "diffHunk": "@@ -167,6 +173,33 @@ public void setupAppend(SetupAppend setupAppend) {\n                 });\n     }\n \n+    @VisibleForTesting\n+    CompletableFuture<Void> setupTokenExpiryTask(@NonNull SetupAppend setupAppend, @NonNull JsonWebToken token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwODMyOQ==", "bodyText": "Please do everything you can to avoid sleeping arbitrary amounts of time in unit tests. This just adds unnecessary delays.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426008329", "createdAt": "2020-05-15T19:35:22Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/host/src/test/java/io/pravega/segmentstore/server/host/handler/AppendProcessorTest.java", "diffHunk": "@@ -124,6 +136,101 @@ public void testAppend() {\n         verifyNoMoreInteractions(store);\n \n         verify(mockedRecorder).recordAppend(eq(streamSegmentName), eq(8L), eq(1), any());\n+        assertTrue(processor.isSetupAppendCompleted(setupAppendCommand.getSegment(), setupAppendCommand.getWriterId()));\n+    }\n+\n+    @Test\n+    public void testSetupAppendClosesConnectionIfTokenHasExpired() {\n+        String streamSegmentName = \"scope/stream/0.#epoch.0\";\n+        UUID clientId = UUID.randomUUID();\n+        byte[] data = new byte[] { 1, 2, 3, 4, 6, 7, 8, 9 };\n+        StreamSegmentStore store = mock(StreamSegmentStore.class);\n+        ServerConnection connection = mock(ServerConnection.class);\n+        ConnectionTracker tracker = mock(ConnectionTracker.class);\n+        val mockedRecorder = Mockito.mock(SegmentStatsRecorder.class);\n+\n+        AppendProcessor processor = AppendProcessor.defaultBuilder()\n+                .store(store)\n+                .connection(connection)\n+                .connectionTracker(tracker)\n+                .statsRecorder(mockedRecorder)\n+                .tokenVerifier(new TokenVerifierImpl(\"secret\"))\n+                .build();\n+\n+        setupGetAttributes(streamSegmentName, clientId, store);\n+        val ac = interceptAppend(store, streamSegmentName, updateEventNumber(clientId, data.length), CompletableFuture.completedFuture((long) data.length));\n+\n+        Date expiryDate = Date.from(Instant.now().minusSeconds(100));\n+        JsonWebToken token = new JsonWebToken(\"subject\", \"audience\", \"secret\".getBytes(), expiryDate, null);\n+\n+        SetupAppend setupAppend = new SetupAppend(1, clientId, streamSegmentName, token.toCompactString());\n+        processor.setupAppend(setupAppend);\n+        verify(connection).close();\n+    }\n+\n+    @Test\n+    public void testSetupTokenExpiryTaskClosesConnectionIfTokenHasExpired() throws InterruptedException {\n+        // Arrange\n+        String streamSegmentName = \"scope/stream/0.#epoch.0\";\n+        UUID clientId = UUID.randomUUID();\n+\n+        StreamSegmentStore mockStore = mock(StreamSegmentStore.class);\n+        ServerConnection mockConnection = mock(ServerConnection.class);\n+\n+        @Cleanup(\"shutdown\")\n+        ScheduledExecutorService executor = new InlineExecutor();\n+        AppendProcessor processor = AppendProcessor.defaultBuilder()\n+                .store(mockStore)\n+                .connection(mockConnection)\n+                .tokenExpiryHandlerExecutor(executor)\n+                .build();\n+\n+        // Spy the actual Append Processor, so that we can have some of the methods return stubbed values.\n+        AppendProcessor mockProcessor = spy(processor);\n+        doReturn(true).when(mockProcessor).isSetupAppendCompleted(streamSegmentName, clientId);\n+        // doReturn(Duration.ofMillis(20)).when(mockProcessor);\n+\n+        JsonWebToken token = new JsonWebToken(\"subject\", \"audience\", \"secret\".getBytes(),\n+                Date.from(Instant.now().plusMillis(100)), null);\n+        SetupAppend setupAppend = new SetupAppend(1, clientId, streamSegmentName, token.toCompactString());\n+\n+        Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwODUxMg==", "bodyText": "Why?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426008512", "createdAt": "2020-05-15T19:35:48Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -66,13 +66,15 @@\n public class ServiceBuilder implements AutoCloseable {\n     //region Members\n \n-    private static final Duration SHUTDOWN_TIMEOUT = Duration.ofSeconds(30);\n+    private static final Duration SHUTDOWN_TIMEOUT = Duration.ofSeconds(45);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwODgyNA==", "bodyText": "What does 2 mean here? Above you use Thread.NORM_PRIORITY. Is there another constant you can use?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426008824", "createdAt": "2020-05-15T19:36:40Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -122,8 +124,10 @@ private ServiceBuilder(ServiceBuilderConfig serviceBuilderConfig, ServiceConfig\n \n         // Setup Thread Pools.\n         String instancePrefix = getInstanceIdPrefix(serviceConfig);\n-        this.coreExecutor = executorBuilder.apply(serviceConfig.getCoreThreadPoolSize(), instancePrefix + \"core\");\n-        this.storageExecutor = executorBuilder.apply(serviceConfig.getStorageThreadPoolSize(), instancePrefix + \"storage-io\");\n+        this.coreExecutor = executorBuilder.apply(serviceConfig.getCoreThreadPoolSize(), instancePrefix + \"core\", Thread.NORM_PRIORITY);\n+        this.storageExecutor = executorBuilder.apply(serviceConfig.getStorageThreadPoolSize(), instancePrefix + \"storage-io\", Thread.NORM_PRIORITY);\n+        this.lowPriorityExecutor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwOTA5Ng==", "bodyText": "Also do not hardcode the number of threads. Please add an entry in ServiceConfig, default it to 10, so that we may change it at any time if we encounter problems.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426009096", "createdAt": "2020-05-15T19:37:20Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -122,8 +124,10 @@ private ServiceBuilder(ServiceBuilderConfig serviceBuilderConfig, ServiceConfig\n \n         // Setup Thread Pools.\n         String instancePrefix = getInstanceIdPrefix(serviceConfig);\n-        this.coreExecutor = executorBuilder.apply(serviceConfig.getCoreThreadPoolSize(), instancePrefix + \"core\");\n-        this.storageExecutor = executorBuilder.apply(serviceConfig.getStorageThreadPoolSize(), instancePrefix + \"storage-io\");\n+        this.coreExecutor = executorBuilder.apply(serviceConfig.getCoreThreadPoolSize(), instancePrefix + \"core\", Thread.NORM_PRIORITY);\n+        this.storageExecutor = executorBuilder.apply(serviceConfig.getStorageThreadPoolSize(), instancePrefix + \"storage-io\", Thread.NORM_PRIORITY);\n+        this.lowPriorityExecutor =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwODgyNA=="}, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwOTc1OA==", "bodyText": "Undo", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426009758", "createdAt": "2020-05-15T19:38:48Z", "author": {"login": "andreipaduroiu"}, "path": "test/integration/src/test/java/io/pravega/test/integration/ReaderGroupTest.java", "diffHunk": "@@ -67,7 +67,7 @@ public void run() {\n         }\n     }\n \n-    @Test(timeout = 20000)\n+    @Test//(timeout = 20000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDQ3Mw==", "bodyText": "This is probably going to hurt someone at one point if they don't know they work with this. If the return value is null, and they want to cancel it, they'll hit a nullptr exception. You'll need to return a no-op future for this.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426010473", "createdAt": "2020-05-15T19:40:23Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/NoOpScheduledExecutor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.common;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * A fake implementation of ScheduledExecutorService that does nothing. An INSTANCE of this class may be used as a\n+ * placeholder for unused scheduled executor in tests.\n+ */\n+public class NoOpScheduledExecutor implements ScheduledExecutorService {\n+\n+    private static final NoOpScheduledExecutor INSTANCE = new NoOpScheduledExecutor();\n+\n+    public static NoOpScheduledExecutor get() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> schedule(Runnable runnable, long l, TimeUnit timeUnit) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDY4OA==", "bodyText": "Does this return value match the contract of Executor.shutdownNow?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426010688", "createdAt": "2020-05-15T19:40:52Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/NoOpScheduledExecutor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.common;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * A fake implementation of ScheduledExecutorService that does nothing. An INSTANCE of this class may be used as a\n+ * placeholder for unused scheduled executor in tests.\n+ */\n+public class NoOpScheduledExecutor implements ScheduledExecutorService {\n+\n+    private static final NoOpScheduledExecutor INSTANCE = new NoOpScheduledExecutor();\n+\n+    public static NoOpScheduledExecutor get() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> schedule(Runnable runnable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+\n+    }\n+\n+    @Override\n+    public List<Runnable> shutdownNow() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDgwMg==", "bodyText": "Should return true if you invoked shutdown", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426010802", "createdAt": "2020-05-15T19:41:08Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/NoOpScheduledExecutor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.common;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * A fake implementation of ScheduledExecutorService that does nothing. An INSTANCE of this class may be used as a\n+ * placeholder for unused scheduled executor in tests.\n+ */\n+public class NoOpScheduledExecutor implements ScheduledExecutorService {\n+\n+    private static final NoOpScheduledExecutor INSTANCE = new NoOpScheduledExecutor();\n+\n+    public static NoOpScheduledExecutor get() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> schedule(Runnable runnable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+\n+    }\n+\n+    @Override\n+    public List<Runnable> shutdownNow() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isShutdown() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDkxOQ==", "bodyText": "Should return true if terminated.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426010919", "createdAt": "2020-05-15T19:41:24Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/NoOpScheduledExecutor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.common;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * A fake implementation of ScheduledExecutorService that does nothing. An INSTANCE of this class may be used as a\n+ * placeholder for unused scheduled executor in tests.\n+ */\n+public class NoOpScheduledExecutor implements ScheduledExecutorService {\n+\n+    private static final NoOpScheduledExecutor INSTANCE = new NoOpScheduledExecutor();\n+\n+    public static NoOpScheduledExecutor get() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> schedule(Runnable runnable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+\n+    }\n+\n+    @Override\n+    public List<Runnable> shutdownNow() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isShutdown() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isTerminated() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean awaitTermination(long l, TimeUnit timeUnit) throws InterruptedException {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDk4Nw==", "bodyText": "same comment as above.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426010987", "createdAt": "2020-05-15T19:41:34Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/NoOpScheduledExecutor.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) Dell Inc., or its subsidiaries. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package io.pravega.test.common;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * A fake implementation of ScheduledExecutorService that does nothing. An INSTANCE of this class may be used as a\n+ * placeholder for unused scheduled executor in tests.\n+ */\n+public class NoOpScheduledExecutor implements ScheduledExecutorService {\n+\n+    private static final NoOpScheduledExecutor INSTANCE = new NoOpScheduledExecutor();\n+\n+    public static NoOpScheduledExecutor get() {\n+        return INSTANCE;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> schedule(Runnable runnable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <V> ScheduledFuture<V> schedule(Callable<V> callable, long l, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+\n+    }\n+\n+    @Override\n+    public List<Runnable> shutdownNow() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isShutdown() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isTerminated() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean awaitTermination(long l, TimeUnit timeUnit) throws InterruptedException {\n+        return false;\n+    }\n+\n+    @Override\n+    public <T> Future<T> submit(Callable<T> callable) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2b17c28f73e2c46016475600b21ff2eaca23d2"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb991f21cde480eff4babb45fd0a88a5dc78f0e", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/ecb991f21cde480eff4babb45fd0a88a5dc78f0e", "committedDate": "2020-05-16T08:23:13Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf90e6649ddec2c7a18a10a5225412a8c77537b", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/dbf90e6649ddec2c7a18a10a5225412a8c77537b", "committedDate": "2020-05-16T15:19:12Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzgxNTEx", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-413781511", "createdAt": "2020-05-18T17:04:25Z", "commit": {"oid": "dbf90e6649ddec2c7a18a10a5225412a8c77537b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNDoyNVrOGXAF2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNjowNlrOGXAJcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MTkzMQ==", "bodyText": "Why can't you use Thread.MIN_PRIORITY?", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426771931", "createdAt": "2020-05-18T17:04:25Z", "author": {"login": "andreipaduroiu"}, "path": "segmentstore/server/src/main/java/io/pravega/segmentstore/server/store/ServiceBuilder.java", "diffHunk": "@@ -126,8 +126,8 @@ private ServiceBuilder(ServiceBuilderConfig serviceBuilderConfig, ServiceConfig\n         String instancePrefix = getInstanceIdPrefix(serviceConfig);\n         this.coreExecutor = executorBuilder.apply(serviceConfig.getCoreThreadPoolSize(), instancePrefix + \"core\", Thread.NORM_PRIORITY);\n         this.storageExecutor = executorBuilder.apply(serviceConfig.getStorageThreadPoolSize(), instancePrefix + \"storage-io\", Thread.NORM_PRIORITY);\n-        this.lowPriorityExecutor =\n-                executorBuilder.apply(10, instancePrefix + \"low-priority-cleanup\", 2);\n+        this.lowPriorityExecutor = executorBuilder.apply(serviceConfig.getLowPriorityThreadPoolSize(),\n+                instancePrefix + \"low-priority-cleanup\", 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf90e6649ddec2c7a18a10a5225412a8c77537b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3Mjg0OQ==", "bodyText": "Hmm.. I wonder how come checkstyle didn't catch this. We shouldn't define more than one class/interface per file.\nYou should move this as a static nested class inside the NoOpScheduledExecutor class.", "url": "https://github.com/pravega/pravega/pull/4692#discussion_r426772849", "createdAt": "2020-05-18T17:06:06Z", "author": {"login": "andreipaduroiu"}, "path": "test/testcommon/src/main/java/io/pravega/test/common/NoOpScheduledExecutor.java", "diffHunk": "@@ -9,110 +9,173 @@\n  */\n package io.pravega.test.common;\n \n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Delayed;\n import java.util.concurrent.Future;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n- * A fake implementation of ScheduledExecutorService that does nothing. An INSTANCE of this class may be used as a\n+ * A fake implementation of ScheduledExecutorService that does nothing. An instance of this class may be used as a\n  * placeholder for unused scheduled executor in tests.\n  */\n public class NoOpScheduledExecutor implements ScheduledExecutorService {\n \n     private static final NoOpScheduledExecutor INSTANCE = new NoOpScheduledExecutor();\n \n+    private AtomicBoolean isShutDown = new AtomicBoolean(false);\n+\n     public static NoOpScheduledExecutor get() {\n         return INSTANCE;\n     }\n \n     @Override\n     public ScheduledFuture<?> schedule(Runnable runnable, long l, TimeUnit timeUnit) {\n-        return null;\n+        return new DummyScheduledFuture(0);\n     }\n \n     @Override\n     public <V> ScheduledFuture<V> schedule(Callable<V> callable, long l, TimeUnit timeUnit) {\n-        return null;\n+        throw new UnsupportedOperationException();\n     }\n \n     @Override\n     public ScheduledFuture<?> scheduleAtFixedRate(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n-        return null;\n+        return new DummyScheduledFuture(0);\n     }\n \n     @Override\n     public ScheduledFuture<?> scheduleWithFixedDelay(Runnable runnable, long l, long l1, TimeUnit timeUnit) {\n-        return null;\n+        return new DummyScheduledFuture(0);\n     }\n \n     @Override\n     public void shutdown() {\n-\n+        isShutDown.set(true);\n     }\n \n     @Override\n     public List<Runnable> shutdownNow() {\n-        return null;\n+        isShutDown.set(true);\n+        return new ArrayList<>();\n     }\n \n     @Override\n     public boolean isShutdown() {\n-        return false;\n+        return isShutDown.get();\n     }\n \n     @Override\n     public boolean isTerminated() {\n-        return false;\n+        return isShutDown.get();\n     }\n \n     @Override\n-    public boolean awaitTermination(long l, TimeUnit timeUnit) throws InterruptedException {\n-        return false;\n+    public boolean awaitTermination(long l, TimeUnit timeUnit) {\n+        return isShutDown.get();\n     }\n \n     @Override\n     public <T> Future<T> submit(Callable<T> callable) {\n-        return null;\n+        return CompletableFuture.completedFuture(null);\n     }\n \n     @Override\n     public <T> Future<T> submit(Runnable runnable, T t) {\n-        return null;\n+        return CompletableFuture.completedFuture(null);\n     }\n \n     @Override\n     public Future<?> submit(Runnable runnable) {\n-        return null;\n+        return CompletableFuture.completedFuture(null);\n     }\n \n     @Override\n-    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> collection) throws InterruptedException {\n-        return null;\n+    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> collection) {\n+        return new ArrayList<>();\n     }\n \n     @Override\n-    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> collection, long l, TimeUnit timeUnit) throws InterruptedException {\n-        return null;\n+    public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> collection, long l, TimeUnit timeUnit) {\n+        return new ArrayList<>();\n     }\n \n     @Override\n-    public <T> T invokeAny(Collection<? extends Callable<T>> collection) throws InterruptedException, ExecutionException {\n-        return null;\n+    public <T> T invokeAny(Collection<? extends Callable<T>> collection) {\n+        throw new UnsupportedOperationException();\n     }\n \n     @Override\n-    public <T> T invokeAny(Collection<? extends Callable<T>> collection, long l, TimeUnit timeUnit) throws InterruptedException, ExecutionException, TimeoutException {\n-        return null;\n+    public <T> T invokeAny(Collection<? extends Callable<T>> collection, long l, TimeUnit timeUnit) {\n+        throw new UnsupportedOperationException();\n     }\n \n     @Override\n     public void execute(Runnable runnable) {\n+    }\n+}\n+\n+@EqualsAndHashCode // Required to keep Spotbugs satisfied (owing to code in `compareTo()`).\n+@RequiredArgsConstructor\n+class DummyScheduledFuture implements ScheduledFuture<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbf90e6649ddec2c7a18a10a5225412a8c77537b"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a0947ef325bff565379dfa785d3f35fe88e856", "author": {"user": {"login": "andreipaduroiu", "name": "Andrei Paduroiu"}}, "url": "https://github.com/pravega/pravega/commit/42a0947ef325bff565379dfa785d3f35fe88e856", "committedDate": "2020-05-18T17:06:18Z", "message": "Merge branch 'master' into honor-tokenexpiry-upon-writes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27a922cdae977a81c102d52076261787ac61c918", "author": {"user": {"login": "ravisharda", "name": "Ravi Sharda"}}, "url": "https://github.com/pravega/pravega/commit/27a922cdae977a81c102d52076261787ac61c918", "committedDate": "2020-05-18T17:46:43Z", "message": "Address review comments\n\nSigned-off-by: Ravi Sharda <ravi.sharda@emc.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjYzNzgz", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-414663783", "createdAt": "2020-05-19T17:22:05Z", "commit": {"oid": "27a922cdae977a81c102d52076261787ac61c918"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODI2NjI1", "url": "https://github.com/pravega/pravega/pull/4692#pullrequestreview-414826625", "createdAt": "2020-05-19T21:11:43Z", "commit": {"oid": "27a922cdae977a81c102d52076261787ac61c918"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3397, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}